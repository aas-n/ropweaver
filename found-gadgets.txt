0x5050ae9f  # aaa; add byte ptr [eax], al; inc eax; pop esi; pop edi; ret 4; 
0x505212fe  # aaa; add byte ptr [ecx + 0x3707d6c6], al; ret; 
0x5051ec12  # aaa; add dword ptr [eax], eax; add esp, 0xc; pop ebp; ret; 
0x505235f7  # aaa; and eax, dword ptr [eax]; add byte ptr [ecx + 0x59], bl; leave; ret; 
0x5053b2bf  # aaa; call 0x42052; pop ecx; ret; 
0x5051eb06  # aaa; inc dword ptr [eax]; pop edi; pop esi; pop ebp; ret; 
0x50525142  # aaa; mov eax, edi; pop edi; ret; 
0x50520195  # aaa; movsx eax, word ptr [eax + 2]; pop esi; ret; 
0x5050e1e8  # aaa; ret; 
0x5050e804  # aaa; sub eax, dword ptr [eax]; add cl, ch; ret 0; 
0x50527166  # aad 0x33; rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x5053f05e  # aad 0x5e; pop ebx; pop ebp; ret; 
0x5050c7cc  # aad 0x8b; dec esp; and al, 8; mov dword ptr [eax + 0x32d8], ecx; xor eax, eax; ret 8; 
0x50536bfa  # aad 0x8b; jne 0x36c06; push esi; call 0x36026; pop ecx; ret; 
0x50505a9e  # aad 0xc8; add al, byte ptr [eax]; leave; ret 0x24; 
0x505169eb  # aam 0; add byte ptr [eax], al; ret; 
0x5050a7e6  # aam 0x32; add byte ptr [eax], al; pop edi; pop esi; pop ebp; ret 4; 
0x5051164e  # aam 0x3b; ret; 
0x50527902  # aam 0x55; push eax; call 0x24dea; pop ecx; pop ecx; ret; 
0x5052786a  # aam 0x55; push eax; call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x505263f7  # aam 0x55; push eax; pop esi; pop ebx; ret; 
0x50526437  # aam 0x55; push eax; ret; 
0x5051c902  # aam 0x5f; pop esi; pop ebx; pop ebp; ret; 
0x5050a39f  # aam 0x7f; add al, byte ptr [eax]; leave; ret 8; 
0x5051c95e  # aam 0x98; add dword ptr [eax], eax; pop ecx; pop ecx; pop ebp; ret; 
0x5052838b  # aam 0xbc; push esp; push eax; ret; 
0x50528b22  # aam 0xe8; ret; 
0x5052259f  # aam 0xfd; add byte ptr [eax], al; leave; ret; 
0x50527907  # aam 0xff; call ptr [ecx + 0x59]; ret; 
0x50516623  # aas; arpl word ptr [eax], ax; add byte ptr [ebx - 0x3b7cabb9], cl; sbb byte ptr [ebx], bh; ret; 
0x5051c876  # aas; mov al, byte ptr [eax + 0x5054b5c0]; mov byte ptr [ecx + 3], al; ret; 
0x505169ea  # adc ah, 0; add byte ptr [eax], al; ret; 
0x50523324  # adc al, 0; add byte ptr [eax], al; pop esi; ret; 
0x50526428  # adc al, 0; add byte ptr [ebx + 0x18a30cc4], al; loope 0x26487; push eax; ret; 
0x5051e195  # adc al, 0; xor ecx, ebp; pop esi; call 0x32377; leave; ret; 
0x505128d0  # adc al, 0x10; add byte ptr [eax], al; leave; ret 0x10; 
0x50515797  # adc al, 0x2b; ret 0xc103; 
0x505229d1  # adc al, 0x2b; ret; 
0x50516fdf  # adc al, 0x2d; add byte ptr [eax], al; pop esi; pop ebp; pop ebx; ret; 
0x5053142b  # adc al, 0x33; int 0x5f; call 0x32377; leave; ret; 
0x50536c44  # adc al, 0x33; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5051217b  # adc al, 0x3b; ret 0x840f; 
0x505166a0  # adc al, 0x3b; ret; 
0x5051e39e  # adc al, 0x48; je 0x1e3ae; dec eax; je 0x1e3a9; or eax, 0xffffffff; ret; 
0x505153de  # adc al, 0x59; mov eax, esi; pop esi; ret; 
0x5052db22  # adc al, 0x59; pop ecx; ret; 
0x5052c184  # adc al, 0x5b; leave; ret; 
0x5052dfaa  # adc al, 0x5d; ret; 
0x50533d07  # adc al, 0x5e; pop ebx; mov esp, ebp; pop ebp; ret; 
0x50516c71  # adc al, 0x5e; ret; 
0x5051f358  # adc al, 0x5f; mov dword ptr [esi], 0x2736; mov eax, esi; pop esi; ret; 
0x5051c999  # adc al, 0x5f; mov eax, esi; pop esi; ret; 
0x505156c2  # adc al, 0x5f; pop ebx; leave; ret; 
0x5051518e  # adc al, 0x5f; pop ebx; ret; 
0x50517c2c  # adc al, 0x5f; pop esi; pop ebx; leave; ret; 
0x50533d38  # adc al, 0x5f; pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x5052e206  # adc al, 0x6a; add bl, byte ptr [ebx + 0x3b]; ret; 
0x50531f98  # adc al, 0x6b; rol byte ptr [edi], 0x2b; ret 0x4503; 
0x50523a19  # adc al, 0x74; or byte ptr [ebx], bh; ret 0x474; 
0x5052f7a2  # adc al, 0x74; pop es; call 0x2f707; pop esi; ret; 
0x5050912b  # adc al, 0x75; and byte ptr [ebx + 0x74ff107e], al; sbb dh, dh; ret; 
0x50515668  # adc al, 0x81; inc dword ptr [esi + 0x17c]; ret; 
0x505333f4  # adc al, 0x83; les ecx, ptr [ecx + ecx*4]; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x50521e72  # adc al, 0x83; pop es; in al, dx; pop ecx; pop ecx; ret; 
0x50523cc0  # adc al, 0x83; ret; 
0x5054233e  # adc al, 0x83; retf 0x8bff; ret 0x5beb; 
0x50524e03  # adc al, 0x85; sal byte ptr [ebp + 2], 0xc9; ret; 
0x5052f76a  # adc al, 0x89; inc esi; sbb al, 0xff; adc eax, 0x5054a13c; pop esi; ret; 
0x50516953  # adc al, 0x89; xchg esp, ebp; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x50531198  # adc al, 0x8b; inc ecx; sbb byte ptr [ebx], al; ret 0x558b; 
0x50524fdd  # adc al, 0x8b; ret; 
0x5053b6f5  # adc al, 0x8d; push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x5050725f  # adc al, 0xb1; add al, byte ptr [eax]; leave; ret 8; 
0x50536b3e  # adc al, 0xb; ret; 
0x50546b3b  # adc al, 0xe1; push ebp; push eax; test eax, eax; jne 0x46b46; ret 0xc; 
0x5051e014  # adc al, 0xe8; ret 1; 
0x50516496  # adc al, 0xeb; add eax, 0x9c69e8; add byte ptr [ecx - 0x75], bl; xchg dword ptr [eax + 0x3b000000], edi; ret; 
0x50524dac  # adc al, 0xff; or byte ptr [ebx + 0x3b078b3f], cl; ret 0xde75; 
0x50516ab2  # adc al, 1; add byte ptr [eax], al; ret; 
0x50531190  # adc al, 3; ret 0x558b; 
0x50502cce  # adc al, 5; add byte ptr [eax], al; ret 4; 
0x5051fad8  # adc al, bh; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x5050a79d  # adc al, byte ptr [ebx - 0x75]; ret; 
0x50548c4a  # adc al, ch; ret; 
0x505207d6  # adc al, dh; loope 0x207ac; ret; 
0x505207d3  # adc bh, al; inc eax; adc al, dh; loope 0x207ac; ret; 
0x5052f3ce  # adc bh, bh; jbe 0x2f3da; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x5053b2d9  # adc bh, bh; jne 0x3b2e9; call 0x3b1fb; add esp, 0x18; pop ebp; ret; 
0x50505abb  # adc bh, bh; jne 0x5acb; push dword ptr [ebp + 8]; call 0x51b3; pop ebp; ret 0x1c; 
0x50546cd4  # adc bh, bl; push ebp; push eax; pop esi; leave; ret 4; 
0x50509894  # adc bh, byte ptr [ecx - 1]; inc dword ptr [ebx + 0x5f5bffc8]; pop esi; pop ebp; ret 8; 
0x50523a11  # adc bh, byte ptr [ecx]; push esi; sbb al, 0x74; or eax, 0x74145639; or byte ptr [ebx], bh; ret 0x474; 
0x5050c761  # adc bl, byte ptr [edx + eax]; leave; ret 0xc; 
0x50542819  # adc byte ptr [eax + 0x33], bh; sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x5053922e  # adc byte ptr [eax + 0x4e], al; jne 0x3922a; pop edi; pop esi; ret; 
0x5052d6b0  # adc byte ptr [eax + 0x50], bl; call 0x2d127; pop ecx; pop ecx; ret; 
0x505119f1  # adc byte ptr [eax + 0x5f], al; pop esi; ret 4; 
0x505166f3  # adc byte ptr [eax + 1], 0; add byte ptr [ebx], bh; ret 0xed74; 
0x5053604c  # adc byte ptr [eax - 0x18], dl; shr dword ptr [ebx], 1; add byte ptr [eax], al; pop ecx; pop ebp; ret; 
0x50502e79  # adc byte ptr [eax], 1; add byte ptr [eax], al; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50516aa1  # adc byte ptr [eax], 1; add byte ptr [eax], al; ret; 
0x5052b4f9  # adc byte ptr [eax], al; add byte ptr [ebx - 0x37], bl; ret; 
0x5052b7b8  # adc byte ptr [eax], al; add byte ptr [ebx - 0x777607b3], cl; dec esp; adc byte ptr [eax], al; add byte ptr [esi - 0x37], bl; ret; 
0x5052b4f3  # adc byte ptr [eax], al; add byte ptr [ecx + 0x104c88], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x50503cc7  # adc byte ptr [eax], al; add byte ptr [edi + 0x3b], dh; sal dword ptr [eax + edi + 0x68], cl; test eax, 0xeb80042f; and dword ptr [ebx], edi; ret; 
0x5052b412  # adc byte ptr [eax], al; add byte ptr [edi - 0x77], bl; or dword ptr [eax + edx], 0; pop esi; leave; ret; 
0x5052b9fc  # adc byte ptr [eax], al; add byte ptr [edx + 1], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052babb  # adc byte ptr [eax], al; add byte ptr [esi - 0x18], dl; cld; push 0xc4830000; adc al, 0x5e; ret; 
0x5052b419  # adc byte ptr [eax], al; add byte ptr [esi - 0x37], bl; ret; 
0x505128d1  # adc byte ptr [eax], al; add cl, cl; ret 0x10; 
0x50516783  # adc byte ptr [eax], al; je 0x1678b; or eax, 0xffffffff; ret; 
0x50537cd8  # adc byte ptr [eax], al; je 0x37ce4; push 8; call 0x38c24; pop ecx; ret; 
0x50524e45  # adc byte ptr [eax], al; jne 0x24e21; mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x50528e17  # adc byte ptr [eax], al; jne 0x28ddf; mov eax, edi; pop edi; pop esi; ret; 
0x5051fadc  # adc byte ptr [eax], cl; jge 0x1faa7; ret; 
0x50535edd  # adc byte ptr [ebp + 0x55], bl; push eax; ret; 
0x5053338f  # adc byte ptr [ebp + eax + 0x38], dh; push eax; add dword ptr [ebp + 4], esi; xor eax, eax; inc eax; ret; 
0x50524c49  # adc byte ptr [ebp - 0x74f88a2e], al; push eax; or al, 0x85; sal byte ptr [esp + eax - 0x75], cl; ret 0x9eb; 
0x50515d69  # adc byte ptr [ebp - 0x75], al; xchg byte ptr [ecx + eax], cl; add byte ptr [ebx], bh; ret; 
0x5052675f  # adc byte ptr [ebx + 0x12ca6], al; add byte ptr [eax], al; pop esi; pop edi; ret; 
0x5051525f  # adc byte ptr [ebx + 0x44881856], cl; adc edi, edi; pop edi; ret; 
0x505152af  # adc byte ptr [ebx + 0x44881856], cl; adc edi, edi; ret; 
0x505341e9  # adc byte ptr [ebx + 0x5e], bl; pop edi; ret; 
0x50521e29  # adc byte ptr [ebx + 0x5f012906], cl; pop ebx; ret; 
0x5051c8ae  # adc byte ptr [ebx + 0x8488b01], cl; lea eax, [ecx + eax + 0xc]; mov ecx, dword ptr [esp + 8]; mov dword ptr [ecx], eax; ret; 
0x50545c53  # adc byte ptr [ebx + eax - 0x7d], dh; retf 0xf602; ret; 
0x5051c93c  # adc byte ptr [ebx - 0x37c4f3b3], cl; jbe 0x1c948; xor eax, eax; pop ebp; ret; 
0x5053d7de  # adc byte ptr [ebx - 0x397400f8], al; pop edi; pop esi; ret; 
0x50522fa3  # adc byte ptr [ebx - 0x75], bh; inc esi; add al, 0x2b; ret; 
0x5053b059  # adc byte ptr [ebx], ah; ret 0xf883; 
0x505012eb  # adc byte ptr [ebx], al; add cl, cl; ret 0xc; 
0x50501341  # adc byte ptr [ebx], al; add cl, cl; ret 8; 
0x50531185  # adc byte ptr [ebx], al; ret 0x558b; 
0x5050e335  # adc byte ptr [ebx], al; ret; 
0x505032bb  # adc byte ptr [ebx], bh; ret; 
0x50542c6b  # adc byte ptr [ebx], bh; ror dword ptr [eax - 0x74fb81e2], cl; ret 0x2eb; 
0x50539cff  # adc byte ptr [ebx], ch; ret 0x4589; 
0x5050ac06  # adc byte ptr [ebx], ch; ret; 
0x5053b97b  # adc byte ptr [ebx], cl; add byte ptr [eax], al; add bl, ch; ret 0xff8b; 
0x5053b044  # adc byte ptr [ebx], cl; ret 0x840f; 
0x5053afc4  # adc byte ptr [ebx], cl; ret 0xc774; 
0x50521ced  # adc byte ptr [ebx], dh; int 0x5b; call 0x32377; leave; ret; 
0x50526d51  # adc byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x5051fd5f  # adc byte ptr [ebx], dh; ret; 
0x50543578  # adc byte ptr [ecx + 0x3b802], cl; add byte ptr [eax], al; ret; 
0x50515d5a  # adc byte ptr [ecx + 0x3b], bl; ret; 
0x5052ef66  # adc byte ptr [ecx + 0x59], bl; pop esi; ret; 
0x5052dd35  # adc byte ptr [ecx + 0x59], bl; ret; 
0x50548867  # adc byte ptr [ecx + 1], 0; div ecx; pop esi; ret 4; 
0x50549222  # adc byte ptr [ecx + 1], 0; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x5054922a  # adc byte ptr [ecx + 1], 0; leave; ret; 
0x5053607b  # adc byte ptr [ecx - 0x18], dl; mov byte ptr [0x5900002b], al; pop ebp; ret; 
0x50519799  # adc byte ptr [ecx - 0x36a4d382], cl; ret; 
0x5053d934  # adc byte ptr [ecx - 0x71f003a3], cl; push ebp; add dword ptr [eax], eax; add dh, dh; ret; 
0x5052a308  # adc byte ptr [ecx], al; add byte ptr [eax], al; call 0x2a12b; pop edi; pop ebp; ret; 
0x50502e7a  # adc byte ptr [ecx], al; add byte ptr [eax], al; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50516a85  # adc byte ptr [ecx], al; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x124], ecx; ret; 
0x50502f03  # adc byte ptr [ecx], al; add byte ptr [eax], al; pop esi; or eax, 0xffffffff; ret 0xc; 
0x50516aa2  # adc byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x5050aba1  # adc byte ptr [edi + 0x3b], dl; ret; 
0x50518f62  # adc byte ptr [edi + 0x5b], bl; leave; ret; 
0x505160b8  # adc byte ptr [edi + 0x5e], bl; leave; ret; 
0x505153b8  # adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x50515f57  # adc byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x5052668b  # adc byte ptr [edi + 0x5e], bl; ret; 
0x50509852  # adc byte ptr [edi + 0x68], dl; dec eax; mov dword ptr [0x75ff5054], eax; or al, ch; ret; 
0x505360f7  # adc byte ptr [edi - 0x37], bl; ret; 
0x50527b85  # adc byte ptr [edi - 0x77], bl; inc esi; add al, 0x5e; pop ebx; leave; ret; 
0x5051994d  # adc byte ptr [edi], cl; test dword ptr [edi - 0x75000000], esp; inc edi; or al, 0x2b; ret; 
0x5052d6c4  # adc byte ptr [edx + 0x18], ch; pop eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x5052d6d9  # adc byte ptr [edx + 0x20], ch; pop eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x50523a0f  # adc byte ptr [edx + edx + 0x39], dh; push esi; sbb al, 0x74; or eax, 0x74145639; or byte ptr [ebx], bh; ret 0x474; 
0x50545c3f  # adc byte ptr [edx - 0xa], bl; ret; 
0x50515523  # adc byte ptr [edx], al; ret; 
0x50532eef  # adc byte ptr [edx], bh; ret; 
0x50537aea  # adc byte ptr [edx], dl; add byte ptr [eax], al; pop ecx; ret; 
0x5052da95  # adc byte ptr [esi + 0x5d], bl; ret; 
0x50506122  # adc byte ptr [esi - 0x18], dl; pushal; xchg byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50518e2b  # adc byte ptr [esi - 0x75], dl; ret; 
0x5050d65e  # adc byte ptr [esi], cl; add byte ptr [eax], al; xor eax, eax; pop esi; pop edi; ret 8; 
0x5050166d  # adc ch, al; ret; 
0x50539870  # adc ch, byte ptr [edx - 3]; call 0x396ce; pop ecx; mov dword ptr [0x5055e26c], 1; xor eax, eax; ret; 
0x50536373  # adc cl, byte ptr [ebx + 0x5d8b0c75]; or byte ptr [edx + 4], ch; call 0x38c24; pop ecx; ret; 
0x50534377  # adc dh, bh; ret 0; 
0x50538d4b  # adc dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50545b16  # adc dh, dh; ret; 
0x505151ac  # adc dl, dl; add dword ptr [eax], eax; add esp, 0xc; pop esi; ret; 
0x5050e538  # adc dword ptr [0xc1bd3af2], esi; ret 0x30a; 
0x50539e70  # adc dword ptr [eax - 0x18], edx; cmc; ret 0xffff; 
0x5053435d  # adc dword ptr [ebx + 0xa904c1], eax; add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x505273e4  # adc dword ptr [ebx + edi], ecx; ret 0x1b7d; 
0x50501272  # adc dword ptr [ebx], eax; add cl, cl; ret 0xc; 
0x5051ce31  # adc dword ptr [ebx], eax; ret 0xb60f; 
0x5052491a  # adc dword ptr [edi + 0x5b], ebx; pop esi; leave; ret; 
0x5053a171  # adc dword ptr [edi + 0xe], esi; push 0xd; pop eax; pop ebp; ret; 
0x50515f51  # adc dword ptr [edx], ebp; add byte ptr [ebx + 0x5e5f10c4], al; pop ebx; ret; 
0x5052d511  # adc eax, 0x154489c4; in al, 0x83; ret 0x8304; 
0x50502717  # adc eax, 0x3b000449; ret; 
0x5053601f  # adc eax, 0x5054a020; pop ebp; ret; 
0x50535fec  # adc eax, 0x5054a020; pop esi; pop ebp; ret; 
0x50501130  # adc eax, 0x5054a020; ret; 
0x5053605b  # adc eax, 0x5054a024; pop ebp; ret; 
0x50501151  # adc eax, 0x5054a024; ret; 
0x50501189  # adc eax, 0x5054a028; mov eax, esi; pop esi; ret; 
0x505375cc  # adc eax, 0x5054a028; pop edi; mov eax, esi; pop esi; ret; 
0x505011e3  # adc eax, 0x5054a028; pop esi; ret 4; 
0x50516bb5  # adc eax, 0x5054a028; ret; 
0x50537430  # adc eax, 0x5054a02c; mov eax, esi; pop esi; ret; 
0x50537786  # adc eax, 0x5054a02c; pop ebp; ret; 
0x505475dd  # adc eax, 0x5054a02c; xor eax, eax; ret; 
0x5054759c  # adc eax, 0x5054a030; movzx eax, al; and eax, 1; ret; 
0x5050119e  # adc eax, 0x5054a030; ret; 
0x50514340  # adc eax, 0x5054a03c; pop ebp; ret 0xc; 
0x50514337  # adc eax, 0x5054a04c; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x5050c8da  # adc eax, 0x5054a04c; xor eax, eax; ret 8; 
0x5052f3ac  # adc eax, 0x5054a060; xor eax, eax; add esp, 0x14; ret 4; 
0x505064d1  # adc eax, 0x5054a078; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x505064fa  # adc eax, 0x5054a07c; ret 4; 
0x50506542  # adc eax, 0x5054a07c; ret 8; 
0x5050651a  # adc eax, 0x5054a084; ret 4; 
0x50506566  # adc eax, 0x5054a084; ret 8; 
0x5054401b  # adc eax, 0x5054a0a8; mov dword ptr [0x50556ce4], eax; ret; 
0x5051e3cc  # adc eax, 0x5054a0e4; neg eax; sbb eax, eax; ret; 
0x5051e3ed  # adc eax, 0x5054a0ec; mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50538f6c  # adc eax, 0x5054a128; push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x5052f3d3  # adc eax, 0x5054a13c; mov dword ptr [esi + 0x18], 1; ret; 
0x5052f76f  # adc eax, 0x5054a13c; pop esi; ret; 
0x50543e97  # adc eax, 0x5054a164; mov esi, eax; mov eax, esi; call 0x38721; ret; 
0x505373fd  # adc eax, 0x5054a184; ret 4; 
0x5052786e  # adc eax, 0x5054a188; mov dword ptr [0x5055d454], eax; ret; 
0x505010a4  # adc eax, 0x5054a18c; pop edi; pop esi; ret 4; 
0x505011dc  # adc eax, 0x5054a18c; push esi; call dword ptr [0x5054a028]; pop esi; ret 4; 
0x50547c8b  # adc eax, 0x5054a18c; ret 4; 
0x505064a9  # adc eax, 0x5054a18c; ret; 
0x50506588  # adc eax, 0x5054a190; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50538f73  # adc eax, 0x5054a1e4; leave; ret; 
0x50501040  # adc eax, 0x5054a240; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50546cd3  # adc eax, 0x5055df10; pop esi; leave; ret 4; 
0x50537bb6  # adc eax, 0x5055e270; xor eax, eax; pop ebp; ret; 
0x50511376  # adc eax, 0x59000058; pop ecx; ret 8; 
0x5052478f  # adc eax, 0x59fffffb; pop ecx; ret; 
0x50536994  # adc eax, 0x7320f980; push es; shld edx, eax, cl; shl eax, cl; ret; 
0x50542f24  # adc eax, 0x7320f980; push es; shrd eax, edx, cl; shr edx, cl; ret; 
0x5052424d  # adc eax, 0x83ffff87; les edx, ptr [esi + ebx*2]; ret; 
0x5053e6d3  # adc eax, 0x83ffffff; les ebx, ptr [eax]; pop ebp; ret; 
0x50524fda  # adc eax, 0x8b1475ff; ret; 
0x50521d5e  # adc eax, 0xc9000106; ret; 
0x5053753b  # adc eax, 0xe8000000; fst qword ptr [ecx]; add byte ptr [eax], al; ret; 
0x5050f887  # adc eax, 0xf6ffffff; ret 0xf01; 
0x5051eaa8  # adc eax, dword ptr [edx]; add byte ptr [eax], al; mov eax, esi; pop esi; pop ebx; ret; 
0x50520fac  # adc eax, dword ptr [esi + 0x30]; test al, 0x81; ret 0xc613; 
0x5054145d  # adc ebp, eax; sub eax, 0x8bffff0f; les edi, ptr [ebx]; ret; 
0x50539e5d  # adc ebp, eax; sub eax, 0x8bffff85; les edi, ptr [ebx]; ret; 
0x5051646e  # adc ecx, dword ptr [ebx + 0x3b517847]; ret; 
0x5051648b  # adc ecx, dword ptr [ebx + 0x3b517c47]; ret; 
0x50503262  # adc ecx, esi; add al, byte ptr [eax]; add ebp, 0x18c; leave; ret 4; 
0x50519743  # adc edi, edi; jbe 0x19777; call 0x26694; pop ecx; ret; 
0x50515265  # adc edi, edi; pop edi; ret; 
0x505152b5  # adc edi, edi; ret; 
0x5050e422  # adc edx, dword ptr [edi - 0x3ebcd501]; ret 0x8b0a; 
0x5050e47e  # adc edx, dword ptr [edx - 0x7470f334]; fdiv st(7); rol ecx, cl; ret 0x30a; 
0x50528264  # adc esi, dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0xc9; ret; 
0x5050e4da  # adc esp, eax; out 0x2c, al; dec byte ptr [ebx - 0x3e2c0828]; ret 0x30a; 
0x505317d1  # add al, 0; add byte ptr [0xc0330474], al; leave; ret; 
0x50517175  # add al, 0; add byte ptr [ebx], dh; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x5051c39c  # add al, 0; add byte ptr [ecx - 0x7b], bl; sar byte ptr [esi + 0x11], 0x8b; ret; 
0x5052e2fb  # add al, 0; add cl, cl; ret; 
0x50545ba7  # add al, 0; add dh, dh; ret 0x7402; 
0x5051ca84  # add al, 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x505279ca  # add al, 0; and dword ptr [esi], 0; add esp, 0xc; mov dword ptr [esi + 0x10], eax; ret; 
0x5054364e  # add al, 0; call eax; ret; 
0x50545b7b  # add al, 0; je 0x45b84; or eax, 0x1000; ret; 
0x5051488e  # add al, 0; jne 0x14897; neg eax; sbb eax, eax; ret; 
0x50524781  # add al, 0; jne 0x24788; xor eax, eax; ret; 
0x50537705  # add al, 0; mov esi, dword ptr [ebp + 8]; push 0xd; call 0x38c24; pop ecx; ret; 
0x5052792d  # add al, 0; push esi; call 0x2793a; add esp, 0xc; pop esi; ret; 
0x50538f68  # add al, 0; sar bh, 0x15; sub byte ptr [ecx - 0xafafac], ah; adc eax, 0x5054a1e4; leave; ret; 
0x5051482f  # add al, 0; xor eax, eax; ret; 
0x50544016  # add al, 0x21; push ebp; push eax; call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x50521f62  # add al, 0x23; rol dword ptr [ebx], cl; ret 0xf88b; 
0x50532f3f  # add al, 0x24; ret; 
0x50522fa8  # add al, 0x2b; ret; 
0x5051ce25  # add al, 0x2b; rol byte ptr [ebx + 0x37304fa], 1; xor eax, eax; ret; 
0x5051ce03  # add al, 0x2b; rol dword ptr [ebx + 0x37301fa], 1; xor eax, eax; ret; 
0x50515fbd  # add al, 0x2d; add byte ptr [eax], al; ret; 
0x5051c889  # add al, 0x33; leave; mov dword ptr [eax + 4], ecx; mov dword ptr [eax], ecx; mov dword ptr [eax + 8], ecx; ret; 
0x50506485  # add al, 0x33; shr bl, 3; mov eax, dword ptr [esi + 0x34]; pop esi; ret 4; 
0x50527833  # add al, 0x39; inc esp; and al, 8; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x50537b31  # add al, 0x3b; jne 0x37b41; jb 0x37b23; pop esi; pop ebp; ret; 
0x50503b7b  # add al, 0x3b; ret; 
0x50523416  # add al, 0x3e; add byte ptr [edi + 0x5e], bl; pop ebp; pop ebx; ret; 
0x50532b8b  # add al, 0x41; and eax, 0x103; pop ebp; ret; 
0x50532d95  # add al, 0x41; and eax, 0x107; pop ebp; ret; 
0x50532c90  # add al, 0x41; and eax, 0x80; pop ebp; ret; 
0x50532d11  # add al, 0x41; and eax, 8; pop ebp; ret; 
0x50509768  # add al, 0x49; jne 0x9743; pop edi; pop esi; ret; 
0x50524291  # add al, 0x4a; jne 0x24289; ret; 
0x5050972f  # add al, 0x4e; jne 0x9714; pop esi; ret; 
0x5052f234  # add al, 0x50; call 0x26341; pop ecx; pop ecx; leave; ret; 
0x5051cbd2  # add al, 0x50; call 0x323c0; add esp, 0xc; pop esi; ret; 
0x50526e2d  # add al, 0x50; call 0x3462e; add esp, 0xc; pop esi; ret; 
0x5052d3d2  # add al, 0x50; call dword ptr [eax + 0x3c0]; pop ecx; pop ecx; ret; 
0x5052d3e0  # add al, 0x50; call dword ptr [eax + 0x3c4]; pop ecx; pop ecx; ret; 
0x5051ccc5  # add al, 0x59; mov dword ptr [esi + 0xc], eax; ret; 
0x50527279  # add al, 0x59; pop ecx; pop edi; pop esi; ret; 
0x50516ddf  # add al, 0x5b; leave; ret; 
0x5054751b  # add al, 0x5d; ret 8; 
0x50532c10  # add al, 0x5d; ret; 
0x5052af3b  # add al, 0x5e; mov dword ptr [edi], eax; pop ebx; leave; ret; 
0x5053ff45  # add al, 0x5e; pop ebp; ret; 
0x50527b89  # add al, 0x5e; pop ebx; leave; ret; 
0x50527947  # add al, 0x5e; ret; 
0x50521e4b  # add al, 0x5e; test eax, eax; jne 0x21e55; xor eax, eax; leave; ret; 
0x5053deaf  # add al, 0x5f; pop esi; pop ebx; leave; ret; 
0x50547c84  # add al, 0x68; or cl, ah; push ebp; push eax; call dword ptr [0x5054a18c]; ret 4; 
0x50506515  # add al, 0x6a; add byte ptr [eax - 1], dl; adc eax, 0x5054a084; ret 4; 
0x505064f5  # add al, 0x6a; or byte ptr [eax - 1], dl; adc eax, 0x5054a07c; ret 4; 
0x5051ce2a  # add al, 0x73; add esi, dword ptr [ebx]; rol bl, 0x8b; adc dword ptr [ebx], eax; ret 0xb60f; 
0x50545ba2  # add al, 0x74; add eax, 0x4000d; add dh, dh; ret 0x7402; 
0x5051a6d7  # add al, 0x75; add eax, 0x5d5ec033; ret; 
0x50518fd4  # add al, 0x75; add ecx, dword ptr [ecx + 0x5f5b305e]; pop esi; ret; 
0x5053c3e3  # add al, 0x78; or dword ptr [ebx + 0x1b60f0a], ecx; inc ecx; mov dword ptr [edx], ecx; ret; 
0x5052b9f3  # add al, 0x7c; rcr byte ptr [edi + 0x5b], cl; leave; ret; 
0x5053b2ba  # add al, 0x80; and dh, bh; push dword ptr [edi]; call 0x42052; pop ecx; ret; 
0x50501360  # add al, 0x80; call 0x11aa; call 0x1136; or eax, 0xffffffff; pop ebp; ret; 
0x5050c817  # add al, 0x80; call 0x11aa; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50502f84  # add al, 0x80; call 0x11aa; or eax, 0xffffffff; pop edi; pop esi; ret 8; 
0x5050a670  # add al, 0x80; call 0x11aa; or eax, 0xffffffff; pop esi; pop ebp; ret 0xc; 
0x50501676  # add al, 0x80; call 0x11aa; or eax, 0xffffffff; pop esi; ret 8; 
0x50501a12  # add al, 0x80; call 0x11aa; or eax, 0xffffffff; ret 8; 
0x5050a348  # add al, 0x80; call 0x11aa; xor eax, eax; pop edi; pop esi; ret 8; 
0x5050381a  # add al, 0x80; call 0x11aa; xor eax, eax; ret; 
0x5053ab47  # add al, 0x80; dec ebp; inc dword ptr [eax - 0x1f7c3e75]; add ebp, dword ptr [ebx]; ret; 
0x5052592d  # add al, 0x81; dec dword ptr [eax]; ret; 
0x505215c5  # add al, 0x81; ret; 
0x5052477e  # add al, 0x83; js 0x24786; add byte ptr [ebp + 3], dh; xor eax, eax; ret; 
0x5051511d  # add al, 0x83; les ebx, ptr [eax]; leave; ret; 
0x50515150  # add al, 0x83; les ecx, ptr [ecx + ecx*8]; ret; 
0x5052ef47  # add al, 0x83; les ecx, ptr [esi + ebx*2]; ret; 
0x50526688  # add al, 0x83; les edx, ptr [eax]; pop edi; pop esi; ret; 
0x50533b26  # add al, 0x83; ret 0xa04; 
0x50522a38  # add al, 0x83; ret; 
0x50509765  # add al, 0x83; rol byte ptr [ecx + ecx*2], 0x75; xlatb; pop edi; pop esi; ret; 
0x5052d71d  # add al, 0x83; rol dword ptr [edx + ecx*2], 0x75; xlatb; pop edi; pop esi; ret; 
0x5050972c  # add al, 0x83; rol dword ptr [esi + ecx*2], 0x75; loope 0x9792; ret; 
0x5052f85e  # add al, 0x83; ror byte ptr [eax], 0x4a; jne 0x2f853; pop esi; ret; 
0x50523322  # add al, 0x85; adc al, 0; add byte ptr [eax], al; pop esi; ret; 
0x50516b7d  # add al, 0x85; sal byte ptr [ebp + 6], 0xff; and eax, 0x5054a0e4; mov eax, dword ptr [eax + 0xdc]; ret; 
0x505169e4  # add al, 0x85; sal byte ptr [edi + eax - 0x75], 0x80; aam 0; add byte ptr [eax], al; ret; 
0x505168b0  # add al, 0x85; sal byte ptr [edi + eax - 0x75], 0x80; in al, 0; add byte ptr [eax], al; ret; 
0x50516b44  # add al, 0x85; sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; add dword ptr [eax + 0x124], ecx; ret; 
0x50516aba  # add al, 0x85; sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b6a  # add al, 0x85; sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; mov dword ptr [eax + 0x128], ecx; ret; 
0x505169f7  # add al, 0x85; sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; mov dword ptr [eax + 0xd8], ecx; ret; 
0x50537a73  # add al, 0x85; sal byte ptr [esi + ebx*8 + 0x5f], 0x5d; ret; 
0x50515666  # add al, 0x89; adc al, 0x81; inc dword ptr [esi + 0x17c]; ret; 
0x5050aefd  # add al, 0x89; add dword ptr [ebx], esi; rol byte ptr [eax + 0x5f], 0x5e; ret 8; 
0x50521901  # add al, 0x89; inc ecx; or al, 0x5b; leave; ret; 
0x505311bf  # add al, 0x89; inc ecx; pushal; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x505096f0  # add al, 0x89; stosd dword ptr es:[edi], eax; int 0xef; mov dword ptr [eax + 8], 0x98badcfe; mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x5053ce0f  # add al, 0x8a; ret 0xd18a; 
0x505232de  # add al, 0x8b; dec esp; and al, 0xc; call 0x2307b; pop ecx; ret; 
0x50514966  # add al, 0x8b; fsubp st(3); add cl, byte ptr [ebx + 0x2bc78bfe]; ret; 
0x5053116c  # add al, 0x8b; inc ecx; or byte ptr [ebx], al; ret 0x558b; 
0x50516775  # add al, 0x8b; or al, 0; add byte ptr [eax], al; ret; 
0x505287bb  # add al, 0x8b; popfd; push 0x8bffffff; ret; 
0x5051e1a4  # add al, 0x8b; push esp; and al, 8; ret; 
0x50534ea9  # add al, 0x8b; ret 0x1deb; 
0x50542c71  # add al, 0x8b; ret 0x2eb; 
0x50524c54  # add al, 0x8b; ret 0x9eb; 
0x505056e2  # add al, 0x8b; ret; 
0x5051c878  # add al, 0xb5; push esp; push eax; mov byte ptr [ecx + 3], al; ret; 
0x50525289  # add al, 0xb; bnd jne 0x25278; pop esi; ret; 
0x50546e01  # add al, 0xc1; call 0xc0ba7d10; shl ecx, 8; or eax, ecx; ret 4; 
0x5054701f  # add al, 0xc1; call 0xc0ba7f2e; shl ecx, 8; or eax, ecx; ret 4; 
0x50525ac3  # add al, 0xc1; loope 0x25aca; shr eax, cl; pop esi; and eax, 0xff; ret; 
0x505364a8  # add al, 0xe8; jbe 0x364d3; add byte ptr [eax], al; pop ecx; ret; 
0x5053637b  # add al, 0xe8; mov dword ptr [0x59000028], eax; ret; 
0x5052f7f6  # add al, 0xe8; mov ebp, 0x83fffffb; les edx, ptr [eax]; pop esi; ret; 
0x50536164  # add al, 0xe8; mov edx, 0x5900002a; ret; 
0x50522aaf  # add al, 0xe8; ret; 
0x50543c76  # add al, 0xe8; sahf; cmp al, 0xff; call ptr [ecx - 0x5d]; push 0x3b5055d5; ret; 
0x50517415  # add al, 0xe8; sub dword ptr [ebx - 0x3b7d0000], edi; or al, 0x85; ror byte ptr [edi], 0x84; ret 0xfffe; 
0x50545b06  # add al, 0xf6; ret; 
0x5052a827  # add al, 0xf; mov dh, 0x51; add eax, 0xb08e0c1; ret 0xb60f; 
0x5052a154  # add al, 0xf; mov dh, 0x56; add eax, 0xb08e0c1; ret 0xb60f; 
0x50522f9a  # add al, 0xff; inc ebp; adc byte ptr [ebx], ch; ret; 
0x50546b30  # add al, 0xff; ror byte ptr [ebx + 0x5fc78bf8], 1; pop esi; ret; 
0x505169dc  # add al, 1; add byte ptr [eax], al; ret; 
0x5051ebe0  # add al, 2; setne al; lea eax, [eax + eax + 1]; ret; 
0x5051e11a  # add al, 3; ret 0xf799; 
0x505391bb  # add al, 4; add byte ptr [eax], al; ret; 
0x505391c7  # add al, 8; add byte ptr [eax], al; ret; 
0x5054268d  # add al, al; add byte ptr [eax], al; add eax, 0x4000; pop ebp; ret; 
0x50538f69  # add al, al; call dword ptr [0x5054a128]; push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x50539112  # add al, al; je 0x39119; xor eax, eax; ret; 
0x505462c6  # add al, al; je 0x462d4; cmp eax, 0xc000001d; je 0x462d4; xor eax, eax; ret; 
0x505462cd  # add al, al; je 0x462d4; xor eax, eax; ret; 
0x505412f4  # add al, al; sete cl; mov eax, ecx; ret; 
0x50541227  # add al, al; sete dl; mov eax, edx; ret; 
0x50514ee7  # add al, byte ptr [eax]; add bl, ch; ret 0x87c7; 
0x5052e0b2  # add al, byte ptr [eax]; add byte ptr [eax + 0x33], dl; fucomi st(0); ret; 
0x50506583  # add al, byte ptr [eax]; add byte ptr [eax - 1], dl; adc eax, 0x5054a190; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x5050ab9c  # add al, byte ptr [eax]; add byte ptr [ebx + 0x3b571045], cl; ret; 
0x50503399  # add al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x50535e53  # add al, byte ptr [eax]; add byte ptr [ecx + 0x59], bl; ret; 
0x50514ce0  # add al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x50512953  # add al, byte ptr [eax]; add byte ptr [esi - 0x75], dl; ret; 
0x50545b96  # add al, byte ptr [eax]; add dh, dh; ret 0x7408; 
0x50503264  # add al, byte ptr [eax]; add ebp, 0x18c; leave; ret 4; 
0x50507385  # add al, byte ptr [eax]; add ebp, 0x18c; leave; ret 8; 
0x5050f688  # add al, byte ptr [eax]; add ebp, 0x1ffc; leave; ret 0xc; 
0x5050f939  # add al, byte ptr [eax]; add ebp, 0x68; leave; ret 0x10; 
0x505035e5  # add al, byte ptr [eax]; add ebp, 0x6c; leave; ret 0xc; 
0x505028f8  # add al, byte ptr [eax]; add ebp, 0x74; leave; ret 4; 
0x50506852  # add al, byte ptr [eax]; add ebp, 0x78; leave; ret; 
0x5050d92c  # add al, byte ptr [eax]; add ebp, 0xf94; leave; ret 0xc; 
0x5050e593  # add al, byte ptr [eax]; add esp, 0xc; pop edi; pop ebx; leave; ret; 
0x5051f2b9  # add al, byte ptr [eax]; and dword ptr [esi + 0x2c], 0; pop esi; pop ebp; ret; 
0x5051e839  # add al, byte ptr [eax]; inc eax; ret; 
0x50504c56  # add al, byte ptr [eax]; leave; ret 0x10; 
0x5050ae46  # add al, byte ptr [eax]; leave; ret 0x14; 
0x50505baa  # add al, byte ptr [eax]; leave; ret 0x1c; 
0x50508594  # add al, byte ptr [eax]; leave; ret 0x20; 
0x505059b9  # add al, byte ptr [eax]; leave; ret 0x24; 
0x50505ee8  # add al, byte ptr [eax]; leave; ret 0x2c; 
0x50502a1a  # add al, byte ptr [eax]; leave; ret 0xc; 
0x50504380  # add al, byte ptr [eax]; leave; ret 4; 
0x505051ad  # add al, byte ptr [eax]; leave; ret 8; 
0x5050693b  # add al, byte ptr [eax]; leave; ret; 
0x5051f323  # add al, byte ptr [eax]; movzx eax, ax; ret; 
0x505115a0  # add al, byte ptr [eax]; pop ecx; pop ecx; ret; 
0x50534393  # add al, byte ptr [eax]; pop edi; ret; 
0x5051ebcb  # add al, byte ptr [eax]; push eax; call 0x1eb23; pop ecx; ret; 
0x5051e437  # add al, byte ptr [eax]; xor eax, eax; ret; 
0x50509729  # add al, byte ptr [ebx - 0x3e7cfb40]; add al, 0x4e; jne 0x9714; pop esi; ret; 
0x5050b432  # add al, byte ptr [ebx]; fild word ptr [ebx]; ret; 
0x50533fb3  # add al, byte ptr [ebx]; ret 0x848d; 
0x5053e8d9  # add al, byte ptr [ebx]; ret; 
0x50544c6f  # add al, byte ptr [edx + 0x3a]; ret; 
0x50546ee3  # add al, byte ptr [edx - 0x75]; ret 0x4848; 
0x50512137  # add al, byte ptr [edx]; add cl, cl; ret 0x10; 
0x5050f4db  # add al, byte ptr cs:[eax]; leave; ret; 
0x5050ec8d  # add al, byte ptr ss:[eax]; leave; ret 0x10; 
0x5053753e  # add al, ch; fst qword ptr [ecx]; add byte ptr [eax], al; ret; 
0x50541384  # add al, ch; lcall 0x10c4, 0x83ffffff; pop ebp; ret; 
0x505165d3  # add al, ch; lea esp, [ebx]; add byte ptr [ebx + 0x1a887], cl; add byte ptr [ecx + 0x3b], bl; ret; 
0x50547c6d  # add al, ch; push cs; add byte ptr [eax], al; add byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x50523fc8  # add al, ch; push edi; sbb al, byte ptr [eax]; add byte ptr [ebx], al; ret; 
0x50515d52  # add al, ch; sahf; sbb eax, dword ptr [ecx]; add byte ptr [ebx + 0x3b591046], cl; ret; 
0x50542ad0  # add al, ch; xchg byte ptr [eax - 1], ah; inc dword ptr [ebx - 0x377ceb3c]; call ptr [esi + 0x5d]; ret; 
0x5053641a  # add bh, al; add byte ptr [eax + eax], cl; add byte ptr [eax], al; xor eax, eax; call 0x38721; ret; 
0x50533a96  # add bh, al; add byte ptr [eax + eax], cl; add byte ptr [eax], al; xor eax, eax; pop esi; ret; 
0x50502abc  # add bh, al; xchg byte ptr [eax + eax + 0x10000], ah; add byte ptr [eax], al; xor eax, eax; pop esi; ret 4; 
0x5050103e  # add bh, bh; adc eax, 0x5054a240; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50537bb4  # add bh, bh; adc eax, 0x5055e270; xor eax, eax; pop ebp; ret; 
0x50534373  # add bh, bh; add byte ptr [edx + edx - 9], dh; ret 0; 
0x50534254  # add bh, bh; add byte ptr [esp + ecx - 9], dh; ret 0; 
0x50538273  # add bh, bh; add ecx, ecx; ret; 
0x5052f136  # add bh, bh; inc dword ptr [ebx + 0x5e5f1cc4]; pop ebx; leave; ret; 
0x50516c05  # add bh, bh; je 0x16c2d; adc byte ptr [edx + 0x50], dl; call ecx; ret; 
0x50532db4  # add bh, bh; jne 0x32dc0; call 0x345d7; add esp, 0xc; pop ebp; ret; 
0x50533259  # add bh, bh; jne 0x3326d; call 0x33209; mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x5051e0e9  # add bh, bh; pop edi; pop esi; ret; 
0x50541268  # add bh, bh; shr bl, 1; pop es; xor eax, eax; inc eax; ret; 
0x5051159a  # add bh, bh; xor al, ch; dec esi; and eax, 0x59590002; ret; 
0x50535fa5  # add bh, bh; xor eax, 0x5055e274; call 0x36451; pop ecx; ret; 
0x5054357a  # add bh, byte ptr [eax + 3]; ret; 
0x50534403  # add bh, byte ptr [ecx + ecx*8 - 0x7d]; jge 0x3441d; and al, 0x7f; ret; 
0x5054886a  # add bh, dh; int1; pop esi; ret 4; 
0x50545bc2  # add bh, dh; ret 0; 
0x5053cef5  # add bh, dh; ret; 
0x50549225  # add bh, dh; stc; imul eax, eax, 0x15180; leave; ret; 
0x5051f61a  # add bh, dh; stc; mov eax, edx; ret; 
0x5052e208  # add bl, byte ptr [ebx + 0x3b]; ret; 
0x50508033  # add bl, byte ptr [edx + 0x2b]; ret 0x2b74; 
0x50539e6e  # add bl, ch; adc dword ptr [eax - 0x18], edx; cmc; ret 0xffff; 
0x5051c4c2  # add bl, ch; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5b], 0xc9; ret; 
0x50515fb5  # add bl, ch; add ecx, dword ptr [ecx - 0x7976efbf]; add al, 0x2d; add byte ptr [eax], al; ret; 
0x50542d3b  # add bl, ch; and al, 0x33; fstp xword ptr [ebx]; ret; 
0x5053a60e  # add bl, ch; mov byte ptr [ebx], bh; ret; 
0x5053945e  # add bl, ch; mov cs, word ptr [ebx + 0xd6ae475]; call 0x38c24; pop ecx; ret; 
0x50516550  # add bl, ch; or eax, 0x3b30468b; ret; 
0x50519970  # add bl, ch; or eax, 0x3b30478b; ret; 
0x50504fd0  # add bl, ch; ret 0x67e8; 
0x50514ee9  # add bl, ch; ret 0x87c7; 
0x5053b97f  # add bl, ch; ret 0xff8b; 
0x50507c5e  # add bl, ch; sbb byte ptr [ebx - 0x4b76f3bb], cl; ret; 
0x5053982c  # add bl, ch; xor byte ptr [edx + 0xd], ch; call 0x38c24; pop ecx; ret; 
0x50542690  # add byte ptr [0x4000], al; pop ebp; ret; 
0x50539107  # add byte ptr [0xc0000005], bh; je 0x39119; cmp eax, 0xc000001d; je 0x39119; xor eax, eax; ret; 
0x505462c2  # add byte ptr [0xc0000005], bh; je 0x462d4; cmp eax, 0xc000001d; je 0x462d4; xor eax, eax; ret; 
0x505317d3  # add byte ptr [0xc0330474], al; leave; ret; 
0x505162cc  # add byte ptr [bx + si], al; add esp, 0xc; ret; 
0x5052bb7a  # add byte ptr [bx + si], al; leave; ret; 
0x5052f3c9  # add byte ptr [eax + 0x107d0000], al; push dword ptr [esi + 8]; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x5051f86f  # add byte ptr [eax + 0x2b42ffff], al; ret 0xf88b; 
0x5052e0b4  # add byte ptr [eax + 0x33], dl; fucomi st(0); ret; 
0x5053ac4b  # add byte ptr [eax + 0x3b], dh; ret 0x850f; 
0x50536010  # add byte ptr [eax + 0x5d590000], al; ret; 
0x5050aea1  # add byte ptr [eax + 0x5e], al; pop edi; ret 4; 
0x50532ed0  # add byte ptr [eax + 0x5f5ec475], al; pop ebx; xor eax, eax; ret; 
0x5051618a  # add byte ptr [eax + 0x61], cl; push ecx; push eax; pop edi; ret; 
0x5052744d  # add byte ptr [eax + 0x68], dl; inc eax; ret; 
0x505064a2  # add byte ptr [eax + 0x70], ch; leave; push ebp; push eax; call dword ptr [0x5054a18c]; ret; 
0x50545ba6  # add byte ptr [eax + eax], al; add dh, dh; ret 0x7402; 
0x50545b7a  # add byte ptr [eax + eax], al; je 0x45b84; or eax, 0x1000; ret; 
0x5053641c  # add byte ptr [eax + eax], cl; add byte ptr [eax], al; xor eax, eax; call 0x38721; ret; 
0x5053622c  # add byte ptr [eax + eax], cl; add byte ptr [eax], al; xor eax, eax; pop esi; pop ebp; ret; 
0x50533a98  # add byte ptr [eax + eax], cl; add byte ptr [eax], al; xor eax, eax; pop esi; ret; 
0x50537cd9  # add byte ptr [eax + ecx + 0x6a], dh; or al, ch; inc ecx; sldt word ptr [eax]; pop ecx; ret; 
0x50535fe0  # add byte ptr [eax - 0x14a70000], al; or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x5054a020; pop esi; pop ebp; ret; 
0x505494cd  # add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x505495e0  # add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x5050cd8b  # add byte ptr [eax - 0x17], dl; ret; 
0x50545f2d  # add byte ptr [eax - 0x36a4a1a1], al; ret; 
0x5052ab26  # add byte ptr [eax - 0x75], dl; inc esp; and al, 0x10; call 0x2a1fa; pop ecx; ret; 
0x5052bae9  # add byte ptr [eax - 0x75], dl; inc esp; and al, 0xc; call 0x2b41f; pop ecx; ret; 
0x5051c365  # add byte ptr [eax - 0x75], dl; ret; 
0x5050dd76  # add byte ptr [eax - 0x797503bb], cl; ret 0xa; 
0x50516bb2  # add byte ptr [eax - 1], dl; adc eax, 0x5054a028; ret; 
0x50537783  # add byte ptr [eax - 1], dl; adc eax, 0x5054a02c; pop ebp; ret; 
0x5050c8d7  # add byte ptr [eax - 1], dl; adc eax, 0x5054a04c; xor eax, eax; ret 8; 
0x50506517  # add byte ptr [eax - 1], dl; adc eax, 0x5054a084; ret 4; 
0x50506563  # add byte ptr [eax - 1], dl; adc eax, 0x5054a084; ret 8; 
0x50506585  # add byte ptr [eax - 1], dl; adc eax, 0x5054a190; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x505074aa  # add byte ptr [eax], 0; add byte ptr [ebx + 0x388886], cl; add byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0x1674; 
0x5052a2cf  # add byte ptr [eax], 0; add byte ptr [ecx + 0x8481], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5052a1ed  # add byte ptr [eax], 0; add byte ptr [ecx + 0x848f], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5052f3ca  # add byte ptr [eax], 0; jge 0x2f3df; push dword ptr [esi + 8]; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x50542683  # add byte ptr [eax], 0; pop ebp; ret; 
0x50536011  # add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x50545c17  # add byte ptr [eax], 0; ret; 
0x50545b79  # add byte ptr [eax], al; add al, 0; je 0x45b84; or eax, 0x1000; ret; 
0x5051a6d5  # add byte ptr [eax], al; add al, 0x75; add eax, 0x5d5ec033; ret; 
0x5053753c  # add byte ptr [eax], al; add al, ch; fst qword ptr [ecx]; add byte ptr [eax], al; ret; 
0x50523fc6  # add byte ptr [eax], al; add al, ch; push edi; sbb al, byte ptr [eax]; add byte ptr [ebx], al; ret; 
0x50515d50  # add byte ptr [eax], al; add al, ch; sahf; sbb eax, dword ptr [ecx]; add byte ptr [ebx + 0x3b591046], cl; ret; 
0x5053945c  # add byte ptr [eax], al; add bl, ch; mov cs, word ptr [ebx + 0xd6ae475]; call 0x38c24; pop ecx; ret; 
0x5053b97d  # add byte ptr [eax], al; add bl, ch; ret 0xff8b; 
0x50507c5c  # add byte ptr [eax], al; add bl, ch; sbb byte ptr [ebx - 0x4b76f3bb], cl; ret; 
0x5053982a  # add byte ptr [eax], al; add bl, ch; xor byte ptr [edx + 0xd], ch; call 0x38c24; pop ecx; ret; 
0x50532ece  # add byte ptr [eax], al; add byte ptr [eax + 0x5f5ec475], al; pop ebx; xor eax, eax; ret; 
0x5052744b  # add byte ptr [eax], al; add byte ptr [eax + 0x68], dl; inc eax; ret; 
0x50545f2b  # add byte ptr [eax], al; add byte ptr [eax - 0x36a4a1a1], al; ret; 
0x50516bb0  # add byte ptr [eax], al; add byte ptr [eax - 1], dl; adc eax, 0x5054a028; ret; 
0x50526f9c  # add byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [eax], al; ret; 
0x5050c77f  # add byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [ebp + eax + 0x33], dh; rol byte ptr [eax - 0x15], 6; mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x50526f95  # add byte ptr [eax], al; add byte ptr [eax], al; mov dword ptr [eax + 0x8c], 0x40; ret; 
0x50526f9e  # add byte ptr [eax], al; add byte ptr [eax], al; ret; 
0x505097f1  # add byte ptr [eax], al; add byte ptr [ebp + 0x19486], cl; add byte ptr [ebx], bh; ret; 
0x5050a8d5  # add byte ptr [eax], al; add byte ptr [ebp + 0x5f], bl; pop esi; pop ebx; ret 4; 
0x5050c781  # add byte ptr [eax], al; add byte ptr [ebp + eax + 0x33], dh; rol byte ptr [eax - 0x15], 6; mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x5051fcbb  # add byte ptr [eax], al; add byte ptr [ebp + eax + 0x6a], dh; add ebx, dword ptr [eax - 0x15]; jnp 0xc0850d0a; or bl, byte ptr [ecx + 0x307e283]; ret 0xf8c1; 
0x50501ce5  # add byte ptr [eax], al; add byte ptr [ebx + 0x10886], cl; add byte ptr [ebx], bh; ret; 
0x505074ab  # add byte ptr [eax], al; add byte ptr [ebx + 0x388886], cl; add byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0x1674; 
0x50507d6a  # add byte ptr [eax], al; add byte ptr [ebx + 0x38ac86], cl; add byte ptr [ebx], al; ret; 
0x5050d4f6  # add byte ptr [eax], al; add byte ptr [ebx + 0x5e118901], cl; ret 8; 
0x505435fb  # add byte ptr [eax], al; add byte ptr [ebx + 0x5e5f18c4], al; pop ebx; ret; 
0x5050feb0  # add byte ptr [eax], al; add byte ptr [ebx + 0x5f], bl; pop esi; leave; ret 0x14; 
0x50505158  # add byte ptr [eax], al; add byte ptr [ebx + 0x5f], bl; pop esi; pop ebp; ret 8; 
0x5052f5c7  # add byte ptr [eax], al; add byte ptr [ebx - 0x36a4a13a], cl; ret; 
0x5052a1f4  # add byte ptr [eax], al; add byte ptr [ebx - 0x37], bl; ret; 
0x5053c355  # add byte ptr [eax], al; add byte ptr [ebx - 0x3e171bbb], cl; ret; 
0x5053c206  # add byte ptr [eax], al; add byte ptr [ebx - 0x55160038], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x50536f71  # add byte ptr [eax], al; add byte ptr [ebx - 0x5a171bbb], cl; pop ss; add byte ptr [eax], al; ret; 
0x5053708b  # add byte ptr [eax], al; add byte ptr [ebx - 0x74171bbb], cl; push ss; add byte ptr [eax], al; ret; 
0x505088d4  # add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50517d52  # add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0x840f; 
0x5052d2bf  # add byte ptr [eax], al; add byte ptr [ebx], cl; ret 0xb60f; 
0x50539893  # add byte ptr [eax], al; add byte ptr [ebx], dh; fist dword ptr [edi + 0x3b]; ret; 
0x5053c20e  # add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5050deb2  # add byte ptr [eax], al; add byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5b; ret 8; 
0x50547c70  # add byte ptr [eax], al; add byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x50516a80  # add byte ptr [eax], al; add byte ptr [ecx + 0x11088], cl; add byte ptr [ebx - 0x76efdbb4], cl; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x5051163a  # add byte ptr [eax], al; add byte ptr [ecx + 0x15ffcc5d], cl; mov byte ptr [ecx + 0x45895054], ah; ror byte ptr [ebx + 0x5d891045], 1; aam 0x3b; ret; 
0x5052a2d0  # add byte ptr [eax], al; add byte ptr [ecx + 0x8481], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5052a1ee  # add byte ptr [eax], al; add byte ptr [ecx + 0x848f], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5053efb5  # add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; pop esi; leave; ret; 
0x50509989  # add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; pop esi; ret 8; 
0x5051a38b  # add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; ret; 
0x50528ef1  # add byte ptr [eax], al; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x50509d10  # add byte ptr [eax], al; add byte ptr [edi + 0x5e], bl; ret 8; 
0x5051eb35  # add byte ptr [eax], al; add byte ptr [edi + 0x75], bh; add eax, 0xc940c033; ret; 
0x5052f4f8  # add byte ptr [eax], al; add byte ptr [edi - 0x37], bl; ret; 
0x5051a679  # add byte ptr [eax], al; add byte ptr [edi - 0x75], dl; ret; 
0x5052a6c1  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6d0  # add byte ptr [eax], al; add byte ptr [edx + 2], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6a3  # add byte ptr [eax], al; add byte ptr [edx + 3], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6b2  # add byte ptr [eax], al; add byte ptr [edx + 6], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5050626c  # add byte ptr [eax], al; add byte ptr [esi + 0x3b], ah; ret; 
0x50516957  # add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x5052a560  # add byte ptr [eax], al; add byte ptr [esi - 0x37], bl; ret; 
0x50545ed2  # add byte ptr [eax], al; add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x50517bb6  # add byte ptr [eax], al; add cl, cl; ret; 
0x50509e86  # add byte ptr [eax], al; add dh, bh; xor eax, eax; ret 8; 
0x5051a388  # add byte ptr [eax], al; add dword ptr [eax], eax; add byte ptr [eax], al; pop edi; pop ebx; ret; 
0x50502ac1  # add byte ptr [eax], al; add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop esi; ret 4; 
0x5054268f  # add byte ptr [eax], al; add eax, 0x4000; pop ebp; ret; 
0x505317d2  # add byte ptr [eax], al; add eax, 0xc0330474; leave; ret; 
0x505316ea  # add byte ptr [eax], al; add ebp, 0x188; leave; ret; 
0x5052e8da  # add byte ptr [eax], al; add ebp, 0x198; leave; ret; 
0x5052eee0  # add byte ptr [eax], al; add ebp, 0x1e0; leave; ret; 
0x50527ebb  # add byte ptr [eax], al; add ebp, 0x400c; leave; ret; 
0x5052e2f6  # add byte ptr [eax], al; add ebp, 0x450; leave; ret; 
0x505277e4  # add byte ptr [eax], al; add ebp, 0x5c; leave; ret; 
0x50522e49  # add byte ptr [eax], al; add ebp, 0x68; leave; ret; 
0x50528a2a  # add byte ptr [eax], al; add ebp, 0x6c; leave; ret; 
0x505223fb  # add byte ptr [eax], al; add ebp, 0x74; leave; ret; 
0x5052d8c4  # add byte ptr [eax], al; add ebp, 0x8c; leave; ret; 
0x50509e7e  # add byte ptr [eax], al; add ebx, ebp; pop es; and dword ptr [eax + 0xdc], 0xfffffffe; xor eax, eax; ret 8; 
0x50515c7f  # add byte ptr [eax], al; add esp, 0x10; call 0x14981; pop esi; ret; 
0x50518f5e  # add byte ptr [eax], al; add esp, 0x10; pop edi; pop ebx; leave; ret; 
0x505160b4  # add byte ptr [eax], al; add esp, 0x10; pop edi; pop esi; leave; ret; 
0x50515f53  # add byte ptr [eax], al; add esp, 0x10; pop edi; pop esi; pop ebx; ret; 
0x505156be  # add byte ptr [eax], al; add esp, 0x14; pop edi; pop ebx; leave; ret; 
0x5052bac2  # add byte ptr [eax], al; add esp, 0x14; pop esi; ret; 
0x505157b8  # add byte ptr [eax], al; add esp, 0x14; test eax, eax; jge 0x157c4; xor eax, eax; ret; 
0x50536e58  # add byte ptr [eax], al; add esp, 0x14; xor eax, eax; call 0x38721; ret; 
0x5051438f  # add byte ptr [eax], al; add esp, 0x18; pop ecx; ret; 
0x5051675b  # add byte ptr [eax], al; add esp, 0x18; pop edi; mov eax, esi; pop esi; ret; 
0x505435fc  # add byte ptr [eax], al; add esp, 0x18; pop edi; pop esi; pop ebx; ret; 
0x505152fb  # add byte ptr [eax], al; add esp, 0x1c; pop edi; pop esi; ret; 
0x5052d7af  # add byte ptr [eax], al; add esp, 0x28; leave; ret; 
0x50526429  # add byte ptr [eax], al; add esp, 0xc; mov dword ptr [0x5055e118], eax; ret; 
0x5052513c  # add byte ptr [eax], al; add esp, 0xc; mov dword ptr [edi], esi; mov eax, edi; pop edi; ret; 
0x50525174  # add byte ptr [eax], al; add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x50532dbb  # add byte ptr [eax], al; add esp, 0xc; pop ebp; ret; 
0x5051638d  # add byte ptr [eax], al; add esp, 0xc; pop ebx; leave; ret; 
0x5052d59c  # add byte ptr [eax], al; add esp, 0xc; pop edi; leave; ret; 
0x5052d4a8  # add byte ptr [eax], al; add esp, 0xc; pop esi; leave; ret; 
0x50517cf1  # add byte ptr [eax], al; add esp, 0xc; pop esi; pop ebx; leave; ret; 
0x50526e32  # add byte ptr [eax], al; add esp, 0xc; pop esi; ret; 
0x505162cd  # add byte ptr [eax], al; add esp, 0xc; ret; 
0x5051e8bb  # add byte ptr [eax], al; and dword ptr [0x5055cf2c], 0; pop ecx; pop esi; ret; 
0x5052a8b9  # add byte ptr [eax], al; call 0x2a414; pop ecx; pop ecx; pop esi; ret; 
0x5054171b  # add byte ptr [eax], al; call 0x36451; add esp, 0x2c; pop esi; pop ebp; ret; 
0x505322ed  # add byte ptr [eax], al; call 0x38721; ret; 
0x5053e08f  # add byte ptr [eax], al; call 0x3deb5; pop ecx; pop ecx; ret; 
0x505475b5  # add byte ptr [eax], al; call 0x4756b; or eax, 0xffffffff; ret; 
0x5054919c  # add byte ptr [eax], al; call 0x47c81; xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x505484fa  # add byte ptr [eax], al; call 0x47c81; xor eax, eax; ret; 
0x50537a9b  # add byte ptr [eax], al; call eax; add esp, 0xc; pop ebp; ret; 
0x50516989  # add byte ptr [eax], al; cmp eax, ecx; jl 0x16992; lea eax, [ecx - 1]; mov dword ptr [edx + 0xf0], eax; ret; 
0x505166e2  # add byte ptr [eax], al; cmp ecx, 1; jne 0x166ed; mov eax, esi; pop esi; ret; 
0x50541128  # add byte ptr [eax], al; cmp word ptr [eax + 0x18], cx; sete dl; mov eax, edx; pop ebp; ret; 
0x505366a4  # add byte ptr [eax], al; fnclex; pop ebp; ret; 
0x5051f619  # add byte ptr [eax], al; idiv ecx; mov eax, edx; ret; 
0x5050aea0  # add byte ptr [eax], al; inc eax; pop esi; pop edi; ret 4; 
0x505479fd  # add byte ptr [eax], al; jb 0x479e9; xor eax, eax; ret 4; 
0x50547a4b  # add byte ptr [eax], al; jb 0x47a1e; pop edi; pop esi; ret 0xc; 
0x5051eb36  # add byte ptr [eax], al; jg 0x1ebaf; add eax, 0xc940c033; ret; 
0x5052f3cb  # add byte ptr [eax], al; jge 0x2f3df; push dword ptr [esi + 8]; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x505128d2  # add byte ptr [eax], al; leave; ret 0x10; 
0x505147ed  # add byte ptr [eax], al; leave; ret 0x20; 
0x5050d932  # add byte ptr [eax], al; leave; ret 0xc; 
0x5050326a  # add byte ptr [eax], al; leave; ret 4; 
0x5050738b  # add byte ptr [eax], al; leave; ret 8; 
0x50517bb7  # add byte ptr [eax], al; leave; ret; 
0x505201f4  # add byte ptr [eax], al; mov byte ptr [eax + ecx], bl; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x5051a2c3  # add byte ptr [eax], al; mov ch, 0x63; push ecx; push eax; pop edi; ret; 
0x5052b4f4  # add byte ptr [eax], al; mov dword ptr [eax + 0x104c], ecx; pop ebx; leave; ret; 
0x50516a81  # add byte ptr [eax], al; mov dword ptr [eax + 0x110], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x124], ecx; ret; 
0x50502eff  # add byte ptr [eax], al; mov dword ptr [eax + 0x110], edx; pop esi; or eax, 0xffffffff; ret 0xc; 
0x5051f744  # add byte ptr [eax], al; mov dword ptr [eax + 0x38000], ecx; ret; 
0x50526f97  # add byte ptr [eax], al; mov dword ptr [eax + 0x8c], 0x40; ret; 
0x50536419  # add byte ptr [eax], al; mov dword ptr [eax], 0xc; xor eax, eax; call 0x38721; ret; 
0x50533a95  # add byte ptr [eax], al; mov dword ptr [eax], 0xc; xor eax, eax; pop esi; ret; 
0x50531ed6  # add byte ptr [eax], al; mov dword ptr [eax], esi; call 0x38721; ret; 
0x5052a2d1  # add byte ptr [eax], al; mov dword ptr [ecx + 0x84], eax; pop ebx; leave; ret; 
0x50502e7c  # add byte ptr [eax], al; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50516aff  # add byte ptr [eax], al; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x5051691b  # add byte ptr [eax], al; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0xec]; ret; 
0x5052a1ef  # add byte ptr [eax], al; mov dword ptr [edi + 0x84], ecx; pop ebx; leave; ret; 
0x50502abb  # add byte ptr [eax], al; mov dword ptr [esi + 0xa4], 1; xor eax, eax; pop esi; ret 4; 
0x505364d4  # add byte ptr [eax], al; mov dword ptr [esi], eax; pop ecx; call 0x38721; ret; 
0x50538e6e  # add byte ptr [eax], al; mov eax, dword ptr [eax + 4]; ret; 
0x50532363  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50542399  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x5052a693  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 8]; mov dword ptr [edi + 0x84], eax; pop esi; leave; ret; 
0x5050d4f7  # add byte ptr [eax], al; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; pop esi; ret 8; 
0x5050d566  # add byte ptr [eax], al; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x505201ee  # add byte ptr [eax], al; mov eax, dword ptr [esi + 0x81a0]; mov byte ptr [eax + ecx], bl; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x50515c98  # add byte ptr [eax], al; mov eax, dword ptr [esi]; add dword ptr [edi], eax; and dword ptr [esi], 0; add esp, 0xc; ret; 
0x50547bba  # add byte ptr [eax], al; mov eax, edi; pop esi; pop edi; ret 4; 
0x50548923  # add byte ptr [eax], al; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x5052f5c8  # add byte ptr [eax], al; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x5051eaaa  # add byte ptr [eax], al; mov eax, esi; pop esi; pop ebx; ret; 
0x5051f35e  # add byte ptr [eax], al; mov eax, esi; pop esi; ret; 
0x50531b6f  # add byte ptr [eax], al; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; pop ebp; ret; 
0x5052b7b9  # add byte ptr [eax], al; mov ecx, dword ptr [ebp - 8]; mov dword ptr [eax + 0x104c], ecx; pop esi; leave; ret; 
0x5052a558  # add byte ptr [eax], al; mov ecx, dword ptr [ebp - 8]; mov dword ptr [eax + 0x84], ecx; pop esi; leave; ret; 
0x505169d5  # add byte ptr [eax], al; mov ecx, dword ptr [ecx + 0x10]; mov dword ptr [eax + 0x104], ecx; ret; 
0x5051565b  # add byte ptr [eax], al; mov ecx, dword ptr [esi + 0x178]; mov edx, dword ptr [esp + 4]; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x50516b24  # add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a87  # add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x124], ecx; ret; 
0x50516bd5  # add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x50516b1a  # add byte ptr [eax], al; mov ecx, dword ptr [esp + 0xc]; mov dword ptr [eax + 0x11c], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516bcb  # add byte ptr [eax], al; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x134], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x50515661  # add byte ptr [eax], al; mov edx, dword ptr [esp + 4]; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x50541f59  # add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x5050a8d6  # add byte ptr [eax], al; pop ebp; pop edi; pop esi; pop ebx; ret 4; 
0x50532b90  # add byte ptr [eax], al; pop ebp; ret; 
0x5052a1f5  # add byte ptr [eax], al; pop ebx; leave; ret; 
0x5050feb1  # add byte ptr [eax], al; pop ebx; pop edi; pop esi; leave; ret 0x14; 
0x50505159  # add byte ptr [eax], al; pop ebx; pop edi; pop esi; pop ebp; ret 8; 
0x5051497d  # add byte ptr [eax], al; pop ebx; ret; 
0x50516708  # add byte ptr [eax], al; pop ecx; add eax, esi; pop esi; ret; 
0x5051e87e  # add byte ptr [eax], al; pop ecx; mov dword ptr [0x5055cf2c], eax; ret; 
0x505168a2  # add byte ptr [eax], al; pop ecx; mov dword ptr [esi + 0xe0], eax; pop esi; ret; 
0x505168fb  # add byte ptr [eax], al; pop ecx; mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x50516a42  # add byte ptr [eax], al; pop ecx; mov eax, dword ptr [esp + 0xc]; mov dword ptr [esi], eax; pop esi; ret; 
0x505375e9  # add byte ptr [eax], al; pop ecx; mov eax, esi; pop esi; ret; 
0x50536012  # add byte ptr [eax], al; pop ecx; pop ebp; ret; 
0x50519723  # add byte ptr [eax], al; pop ecx; pop ebx; leave; ret; 
0x50521e61  # add byte ptr [eax], al; pop ecx; pop ecx; leave; ret; 
0x50511378  # add byte ptr [eax], al; pop ecx; pop ecx; ret 8; 
0x5051498d  # add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x50516007  # add byte ptr [eax], al; pop ecx; pop esi; ret; 
0x50511367  # add byte ptr [eax], al; pop ecx; ret 4; 
0x50513c7a  # add byte ptr [eax], al; pop ecx; ret; 
0x50513c0f  # add byte ptr [eax], al; pop ecx; test eax, eax; jne 0x13c18; pop esi; ret; 
0x5052f4f9  # add byte ptr [eax], al; pop edi; leave; ret; 
0x5052b413  # add byte ptr [eax], al; pop edi; mov dword ptr [ebx + 0x104c], eax; pop esi; leave; ret; 
0x5053efb6  # add byte ptr [eax], al; pop edi; pop ebx; pop esi; leave; ret; 
0x5050998a  # add byte ptr [eax], al; pop edi; pop ebx; pop esi; ret 8; 
0x5051a38c  # add byte ptr [eax], al; pop edi; pop ebx; ret; 
0x5050a7e8  # add byte ptr [eax], al; pop edi; pop esi; pop ebp; ret 4; 
0x5051c3e6  # add byte ptr [eax], al; pop edi; pop esi; pop ebp; ret; 
0x50501df9  # add byte ptr [eax], al; pop edi; pop esi; pop ebx; leave; ret 8; 
0x50514ce1  # add byte ptr [eax], al; pop edi; pop esi; pop ebx; leave; ret; 
0x505033df  # add byte ptr [eax], al; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x50509d11  # add byte ptr [eax], al; pop edi; pop esi; ret 8; 
0x5052a561  # add byte ptr [eax], al; pop esi; leave; ret; 
0x50502f05  # add byte ptr [eax], al; pop esi; or eax, 0xffffffff; ret 0xc; 
0x50516fe1  # add byte ptr [eax], al; pop esi; pop ebp; pop ebx; ret; 
0x50516958  # add byte ptr [eax], al; pop esi; pop edi; ret; 
0x5050d4d2  # add byte ptr [eax], al; pop esi; ret 4; 
0x505168a9  # add byte ptr [eax], al; pop esi; ret; 
0x5052a6c2  # add byte ptr [eax], al; push 1; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6d1  # add byte ptr [eax], al; push 2; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6a4  # add byte ptr [eax], al; push 3; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6b3  # add byte ptr [eax], al; push 6; call 0x1c908; pop ecx; pop ecx; ret; 
0x50535fa4  # add byte ptr [eax], al; push dword ptr [0x5055e274]; call 0x36451; pop ecx; ret; 
0x50516c04  # add byte ptr [eax], al; push dword ptr [esp + 0x10]; push edx; push eax; call ecx; ret; 
0x5052bb38  # add byte ptr [eax], al; push eax; call 0x1c973; pop ecx; pop ecx; ret; 
0x50516c67  # add byte ptr [eax], al; push eax; call 0x323c0; add esp, 0x14; pop esi; ret; 
0x50516bb1  # add byte ptr [eax], al; push eax; call dword ptr [0x5054a028]; ret; 
0x5050c8d6  # add byte ptr [eax], al; push eax; call dword ptr [0x5054a04c]; xor eax, eax; ret 8; 
0x50506584  # add byte ptr [eax], al; push eax; call dword ptr [0x5054a190]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x5052ab25  # add byte ptr [eax], al; push eax; mov eax, dword ptr [esp + 0x10]; call 0x2a1fa; pop ecx; ret; 
0x5052bae8  # add byte ptr [eax], al; push eax; mov eax, dword ptr [esp + 0xc]; call 0x2b41f; pop ecx; ret; 
0x50525193  # add byte ptr [eax], al; push esi; call 0x1c966; add esp, 0x10; pop esi; ret; 
0x50521f33  # add byte ptr [eax], al; push esi; call 0x1c966; add esp, 0x14; pop esi; ret; 
0x50514987  # add byte ptr [eax], al; push esi; call 0x1c966; pop ecx; pop ecx; ret; 
0x5052a887  # add byte ptr [eax], al; push esi; call 0x2a6e2; add esp, 0x10; pop esi; ret; 
0x5052aaf9  # add byte ptr [eax], al; push esi; call 0x2a820; add esp, 0x10; pop esi; ret; 
0x5052babc  # add byte ptr [eax], al; push esi; call 0x323c0; add esp, 0x14; pop esi; ret; 
0x505376f6  # add byte ptr [eax], al; push esi; call 0x36451; pop ecx; call 0x38721; ret 4; 
0x50502aee  # add byte ptr [eax], al; ret 4; 
0x50502e31  # add byte ptr [eax], al; ret 8; 
0x5051566e  # add byte ptr [eax], al; ret; 
0x50541226  # add byte ptr [eax], al; ror byte ptr [edi], 0x94; ret 0xc28b; 
0x50539111  # add byte ptr [eax], al; sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x505462c5  # add byte ptr [eax], al; sal byte ptr [edx + ecx + 0x3d], 0x1d; add byte ptr [eax], al; sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x50545f2c  # add byte ptr [eax], al; sbb byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5051a75f  # add byte ptr [eax], al; sub edi, dword ptr [esp + 0x10]; call 0x19758; pop edi; pop esi; ret; 
0x5051678f  # add byte ptr [eax], al; test eax, eax; jge 0x1679a; mov eax, 0x7fffffff; ret; 
0x50532ecf  # add byte ptr [eax], al; xor byte ptr [ebp - 0x3c], 0x5e; pop edi; pop ebx; xor eax, eax; ret; 
0x5050977e  # add byte ptr [eax], al; xor eax, dword ptr [edx*4 + 0x50555868]; mov dword ptr [ecx], eax; ret; 
0x50513fef  # add byte ptr [eax], al; xor eax, eax; add esp, 0x1c; inc eax; pop ebp; ret 0x10; 
0x50513e10  # add byte ptr [eax], al; xor eax, eax; add esp, 0xc; inc eax; ret; 
0x5053641f  # add byte ptr [eax], al; xor eax, eax; call 0x38721; ret; 
0x5051401b  # add byte ptr [eax], al; xor eax, eax; inc eax; pop ecx; pop ecx; ret 4; 
0x5050d527  # add byte ptr [eax], al; xor eax, eax; inc eax; ret 0xc; 
0x5051c790  # add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x50513e43  # add byte ptr [eax], al; xor eax, eax; pop edi; inc eax; pop esi; ret; 
0x5050deb3  # add byte ptr [eax], al; xor eax, eax; pop edi; pop esi; pop ebx; ret 8; 
0x5053622f  # add byte ptr [eax], al; xor eax, eax; pop esi; pop ebp; ret; 
0x50547c71  # add byte ptr [eax], al; xor eax, eax; pop esi; pop ebx; pop ebp; ret 0xc; 
0x5050d660  # add byte ptr [eax], al; xor eax, eax; pop esi; pop edi; ret 8; 
0x50502ac5  # add byte ptr [eax], al; xor eax, eax; pop esi; ret 4; 
0x5052ef2b  # add byte ptr [eax], al; xor eax, eax; pop esi; ret; 
0x5050ab6f  # add byte ptr [eax], al; xor eax, eax; ret 8; 
0x50539881  # add byte ptr [eax], al; xor eax, eax; ret; 
0x5050737e  # add byte ptr [eax], al; xor ecx, ebp; call 0x32377; add ebp, 0x18c; leave; ret 8; 
0x505167dc  # add byte ptr [eax], dl; add byte ptr [eax], al; ret; 
0x5052f3cc  # add byte ptr [ebp + 0x10], bh; push dword ptr [esi + 8]; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x505097f3  # add byte ptr [ebp + 0x19486], cl; add byte ptr [ebx], bh; ret; 
0x5052e0ae  # add byte ptr [ebp + 0x29085], cl; add byte ptr [eax + 0x33], dl; fucomi st(0); ret; 
0x5051748e  # add byte ptr [ebp + 0x3b2f74c0], al; ret 0x2b74; 
0x50542f18  # add byte ptr [ebp + 0x5e], bl; pop edi; ret 0x10; 
0x5051a2c4  # add byte ptr [ebp + 0x5f505163], dh; ret; 
0x5050a8d7  # add byte ptr [ebp + 0x5f], bl; pop esi; pop ebx; ret 4; 
0x50519d03  # add byte ptr [ebp + 0x7d8de075], cl; in al, 0x8b; ret; 
0x50503814  # add byte ptr [ebp + 0xc], dh; push 0x80042ee2; call 0x11aa; xor eax, eax; ret; 
0x50524782  # add byte ptr [ebp + 3], dh; xor eax, eax; ret; 
0x5051488f  # add byte ptr [ebp + 5], dh; neg eax; sbb eax, eax; ret; 
0x50539d5d  # add byte ptr [ebp + 7], dh; push eax; call 0x36451; pop ecx; pop ebp; ret; 
0x5050c784  # add byte ptr [ebp + eax + 0x33], dh; rol byte ptr [eax - 0x15], 6; mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x5051fcbd  # add byte ptr [ebp + eax + 0x6a], dh; add ebx, dword ptr [eax - 0x15]; jnp 0xc0850d0a; or bl, byte ptr [ecx + 0x307e283]; ret 0xf8c1; 
0x50545b7c  # add byte ptr [ebp + eax + 0xd], dh; add byte ptr [eax], dl; add byte ptr [eax], al; ret; 
0x50535f9e  # add byte ptr [ebp + eax - 0x18], dh; and eax, 0xff000063; xor eax, 0x5055e274; call 0x36451; pop ecx; ret; 
0x5050650f  # add byte ptr [ebp + ecx - 1], dh; je 0x6539; add al, 0x6a; add byte ptr [eax - 1], dl; adc eax, 0x5054a084; ret 4; 
0x5050655b  # add byte ptr [ebp + ecx - 1], dh; je 0x6585; or byte ptr [edx], ch; push eax; call dword ptr [0x5054a084]; ret 8; 
0x505064ef  # add byte ptr [ebp + esi*8 - 1], dh; je 0x6519; add al, 0x6a; or byte ptr [eax - 1], dl; adc eax, 0x5054a07c; ret 4; 
0x50506537  # add byte ptr [ebp + esi*8 - 1], dh; je 0x6561; or byte ptr [edx + 8], ch; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x5051ca7f  # add byte ptr [ebp - 0x12], dh; and dword ptr [esi + 4], 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x50515c58  # add byte ptr [ebp - 0x15], dh; ret; 
0x50541ff7  # add byte ptr [ebp - 0x17aff3ba], cl; ret; 
0x50504eec  # add byte ptr [ebp - 0x17e68a40], al; pushfd; ret 0xffff; 
0x5050134c  # add byte ptr [ebp - 0x18], dl; ret 0xfffd; 
0x5053bfaa  # add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x5051cfbf  # add byte ptr [ebp - 0x25], dh; xor eax, eax; inc eax; pop edi; leave; ret; 
0x50524e46  # add byte ptr [ebp - 0x28], dh; mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x50528e18  # add byte ptr [ebp - 0x3c], dh; mov eax, edi; pop edi; pop esi; ret; 
0x505287b7  # add byte ptr [ebp - 0x74fbe084], cl; popfd; push 0x8bffffff; ret; 
0x50501ce7  # add byte ptr [ebx + 0x10886], cl; add byte ptr [ebx], bh; ret; 
0x50515e88  # add byte ptr [ebx + 0x14c86], cl; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5051658d  # add byte ptr [ebx + 0x16487], cl; add byte ptr [ebx], bh; ret; 
0x5051565c  # add byte ptr [ebx + 0x1788e], cl; add byte ptr [ebx - 0x76fbdbac], cl; adc al, 0x81; inc dword ptr [esi + 0x17c]; ret; 
0x5052642a  # add byte ptr [ebx + 0x18a30cc4], al; loope 0x26487; push eax; ret; 
0x505165d8  # add byte ptr [ebx + 0x1a887], cl; add byte ptr [ecx + 0x3b], bl; ret; 
0x505166dd  # add byte ptr [ebx + 0x1ac88], cl; add byte ptr [ebx + 0x47501f9], al; mov eax, esi; pop esi; ret; 
0x5051468f  # add byte ptr [ebx + 0x266085], cl; add byte ptr [ebx], bh; ret; 
0x5052513d  # add byte ptr [ebx + 0x37890cc4], al; mov eax, edi; pop edi; ret; 
0x5050c2be  # add byte ptr [ebx + 0x37dc86], cl; add byte ptr [ebx], bh; ret; 
0x505074ad  # add byte ptr [ebx + 0x388886], cl; add byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0x1674; 
0x50507d6c  # add byte ptr [ebx + 0x38ac86], cl; add byte ptr [ebx], al; ret; 
0x5050ab9e  # add byte ptr [ebx + 0x3b571045], cl; ret; 
0x50515d57  # add byte ptr [ebx + 0x3b591046], cl; ret; 
0x50512d5d  # add byte ptr [ebx + 0x458924c4], al; in al, 0x3b; ret; 
0x505116b5  # add byte ptr [ebx + 0x458928c4], al; adc byte ptr [ebx], bh; ret; 
0x505166e3  # add byte ptr [ebx + 0x47501f9], al; mov eax, esi; pop esi; ret; 
0x50522f8d  # add byte ptr [ebx + 0x488104d], cl; cmp dword ptr [eax + eax*8 + 0x468bf174], eax; add al, 0xff; inc ebp; adc byte ptr [ebx], ch; ret; 
0x5053e410  # add byte ptr [ebx + 0x4d8b0c45], cl; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x50545cca  # add byte ptr [ebx + 0x4d8b0c7d], cl; or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5051e8bc  # add byte ptr [ebx + 0x55cf2c25], al; push eax; add byte ptr [ecx + 0x5e], bl; ret; 
0x50517cf2  # add byte ptr [ebx + 0x5b5e0cc4], al; leave; ret; 
0x50533d04  # add byte ptr [ebx + 0x5b5e14c4], al; mov esp, ebp; pop ebp; ret; 
0x5050e594  # add byte ptr [ebx + 0x5b5f0cc4], al; leave; ret; 
0x50518f5f  # add byte ptr [ebx + 0x5b5f10c4], al; leave; ret; 
0x505156bf  # add byte ptr [ebx + 0x5b5f14c4], al; leave; ret; 
0x50504f23  # add byte ptr [ebx + 0x5b5f5ec3], cl; leave; ret 0xc; 
0x5051ca85  # add byte ptr [ebx + 0x5e000866], al; ret; 
0x5051f2ba  # add byte ptr [ebx + 0x5e002c66], al; pop ebp; ret; 
0x5050d4f8  # add byte ptr [ebx + 0x5e118901], cl; ret 8; 
0x5050f460  # add byte ptr [ebx + 0x5e5f0cc4], al; pop ebx; leave; ret 4; 
0x505160b5  # add byte ptr [ebx + 0x5e5f10c4], al; leave; ret; 
0x505153b5  # add byte ptr [ebx + 0x5e5f10c4], al; pop ebx; leave; ret; 
0x50515f54  # add byte ptr [ebx + 0x5e5f10c4], al; pop ebx; ret; 
0x505435fd  # add byte ptr [ebx + 0x5e5f18c4], al; pop ebx; ret; 
0x505152fc  # add byte ptr [ebx + 0x5e5f1cc4], al; ret; 
0x5052a9e6  # add byte ptr [ebx + 0x5e5f2cc4], al; pop ebx; leave; ret; 
0x50541ead  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x5053b4e4  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebx; leave; ret; 
0x50536753  # add byte ptr [ebx + 0x5e], bl; pop edi; ret 0x10; 
0x50533fdc  # add byte ptr [ebx + 0x5f5effc8], al; pop ebx; leave; ret; 
0x5050feb2  # add byte ptr [ebx + 0x5f], bl; pop esi; leave; ret 0x14; 
0x5050515a  # add byte ptr [ebx + 0x5f], bl; pop esi; pop ebp; ret 8; 
0x50528789  # add byte ptr [ebx + 0x7c8d8045], cl; xor byte ptr [ebx + ecx*4], al; ret; 
0x505219e4  # add byte ptr [ebx + 0x7e890cc4], al; push eax; pop edi; pop esi; leave; ret; 
0x5053129f  # add byte ptr [ebx + 0x7e890cc4], al; pushal; pop edi; pop esi; leave; ret; 
0x50531b70  # add byte ptr [ebx + 0x889084d], cl; pop ebp; ret; 
0x50537706  # add byte ptr [ebx + 0xd6a0875], cl; call 0x38c24; pop ecx; ret; 
0x50545ece  # add byte ptr [ebx + ebx + 0x3d], dh; add byte ptr [eax], al; add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x505033b8  # add byte ptr [ebx - 0x15], dl; ret 0x1468; 
0x5052d59d  # add byte ptr [ebx - 0x36a0f33c], al; ret; 
0x5052d4a9  # add byte ptr [ebx - 0x36a1f33c], al; ret; 
0x5052f5c9  # add byte ptr [ebx - 0x36a4a13a], cl; ret; 
0x5051638e  # add byte ptr [ebx - 0x36a4f33c], al; ret; 
0x5052a1f6  # add byte ptr [ebx - 0x37], bl; ret; 
0x5052f522  # add byte ptr [ebx - 0x37c4f7b7], cl; jbe 0x2f52e; or eax, 0xffffffff; ret; 
0x50525175  # add byte ptr [ebx - 0x3874f33c], al; pop edi; pop esi; ret; 
0x5053b283  # add byte ptr [ebx - 0x39c41fbb], cl; je 0x3b28e; or dword ptr [edi], 0xffffffff; call 0x38721; ret; 
0x50516626  # add byte ptr [ebx - 0x3b7cabb9], cl; sbb byte ptr [ebx], bh; ret; 
0x5053c357  # add byte ptr [ebx - 0x3e171bbb], cl; ret; 
0x505157b9  # add byte ptr [ebx - 0x3f7aeb3c], al; jge 0x157c4; xor eax, eax; ret; 
0x505157e5  # add byte ptr [ebx - 0x3f7af33c], al; jge 0x157f1; xor eax, eax; leave; ret; 
0x50513c56  # add byte ptr [ebx - 0x3fccc73c], al; pop edi; inc eax; pop esi; ret; 
0x50536e59  # add byte ptr [ebx - 0x3fcceb3c], al; call 0x38721; ret; 
0x5053c208  # add byte ptr [ebx - 0x55160038], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x50536f73  # add byte ptr [ebx - 0x5a171bbb], cl; pop ss; add byte ptr [eax], al; ret; 
0x5053708d  # add byte ptr [ebx - 0x74171bbb], cl; push ss; add byte ptr [eax], al; ret; 
0x505241a1  # add byte ptr [ebx - 0x74ff1b9b], al; ret; 
0x50516a88  # add byte ptr [ebx - 0x76efdbb4], cl; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x50516b1b  # add byte ptr [ebx - 0x76f3dbb4], cl; mov byte ptr [ecx + eax], bl; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516bcc  # add byte ptr [ebx - 0x76f7dbb4], cl; mov byte ptr [ecx + eax], dh; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x50515662  # add byte ptr [ebx - 0x76fbdbac], cl; adc al, 0x81; inc dword ptr [esi + 0x17c]; ret; 
0x5052b7ba  # add byte ptr [ebx - 0x777607b3], cl; dec esp; adc byte ptr [eax], al; add byte ptr [esi - 0x37], bl; ret; 
0x5052a559  # add byte ptr [ebx - 0x777607b3], cl; test byte ptr [eax], al; add byte ptr [eax], al; pop esi; leave; ret; 
0x505169d6  # add byte ptr [ebx - 0x7776efb7], cl; add al, 1; add byte ptr [eax], al; ret; 
0x5052a694  # add byte ptr [ebx - 0x787607bb], cl; test byte ptr [eax], al; add byte ptr [eax], al; pop esi; leave; ret; 
0x505046c5  # add byte ptr [ebx - 0x7af00008], al; ret; 
0x50520361  # add byte ptr [ebx - 0x7af0fd07], al; ret 0xfffe; 
0x50508857  # add byte ptr [ebx - 0x7bf00008], al; sti; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50528737  # add byte ptr [ebx - 0xa773], cl; dec dword ptr [ecx - 0x977b]; inc dword ptr [ebx]; ret; 
0x5051f73c  # add byte ptr [ebx], 0; inc ecx; and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x5051f749  # add byte ptr [ebx], 0; ret; 
0x5053abf4  # add byte ptr [ebx], ah; ret 0xb9; 
0x5053afd2  # add byte ptr [ebx], ah; ret 0xc483; 
0x5051f610  # add byte ptr [ebx], al; ret 0xc103; 
0x50507d72  # add byte ptr [ebx], al; ret; 
0x505421ab  # add byte ptr [ebx], bh; ret 0x1773; 
0x505166f7  # add byte ptr [ebx], bh; ret 0xed74; 
0x50501c72  # add byte ptr [ebx], bh; ret; 
0x50517169  # add byte ptr [ebx], bh; ror dword ptr [edi], 0x8f; or byte ptr [0x840f0000], al; xor eax, 0x33000004; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x5050ab64  # add byte ptr [ebx], bh; sar dword ptr [esi + 2], 1; mov edx, ecx; mov dword ptr [eax + 0x108], edx; xor eax, eax; ret 8; 
0x50517d54  # add byte ptr [ebx], ch; ret 0x840f; 
0x5051bffb  # add byte ptr [ebx], ch; ret; 
0x5052d2c1  # add byte ptr [ebx], cl; ret 0xb60f; 
0x50539895  # add byte ptr [ebx], dh; fist dword ptr [edi + 0x3b]; ret; 
0x50515e8e  # add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x505130d5  # add byte ptr [ebx], dh; int 0x5b; call 0x32377; add ebp, 0xf90; leave; ret 0xc; 
0x5052dc03  # add byte ptr [ebx], dh; int 0x5e; call 0x32377; add ebp, 0x18c; leave; ret; 
0x5052e8d3  # add byte ptr [ebx], dh; int 0x5e; call 0x32377; add ebp, 0x198; leave; ret; 
0x5051e196  # add byte ptr [ebx], dh; int 0x5e; call 0x32377; leave; ret; 
0x5051f24f  # add byte ptr [ebx], dh; int 0x5f; call 0x32377; add ebp, 0x4fa0; leave; ret; 
0x505166b9  # add byte ptr [ebx], dh; rcl byte ptr [esi + 0x3b], cl; ret 0x4e74; 
0x505380bf  # add byte ptr [ebx], dh; rcr byte ptr [ecx + 0x5b], 0x5f; pop esi; ret; 
0x50513e44  # add byte ptr [ebx], dh; rcr byte ptr [edi + 0x40], 0x5e; ret; 
0x505019bb  # add byte ptr [ebx], dh; rcr byte ptr [edi + 0x5b], 0x5e; leave; ret 0x10; 
0x50514f72  # add byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5050deb4  # add byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5b; ret 8; 
0x50547c72  # add byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x5051401c  # add byte ptr [ebx], dh; rol byte ptr [eax + 0x59], 0x59; ret 4; 
0x505119ec  # add byte ptr [ebx], dh; rol byte ptr [ebx + 0x5f4010c4], 0x5e; ret 4; 
0x505074b3  # add byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0x1674; 
0x50517177  # add byte ptr [ebx], dh; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x505128cd  # add byte ptr [ecx + 0x1014c5], al; add cl, cl; ret 0x10; 
0x5052b4f5  # add byte ptr [ecx + 0x104c88], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x50516a82  # add byte ptr [ecx + 0x11088], cl; add byte ptr [ebx - 0x76efdbb4], cl; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x5051163c  # add byte ptr [ecx + 0x15ffcc5d], cl; mov byte ptr [ecx + 0x45895054], ah; ror byte ptr [ebx + 0x5d891045], 1; aam 0x3b; ret; 
0x505316eb  # add byte ptr [ecx + 0x188c5], al; add cl, cl; ret; 
0x50503265  # add byte ptr [ecx + 0x18cc5], al; add cl, cl; ret 4; 
0x50507386  # add byte ptr [ecx + 0x18cc5], al; add cl, cl; ret 8; 
0x5052e8db  # add byte ptr [ecx + 0x198c5], al; add cl, cl; ret; 
0x5052eee1  # add byte ptr [ecx + 0x1e0c5], al; add cl, cl; ret; 
0x5051ea6b  # add byte ptr [ecx + 0x1f90c5], al; add cl, cl; ret; 
0x5050f689  # add byte ptr [ecx + 0x1ffcc5], al; add cl, cl; ret 0xc; 
0x505147e8  # add byte ptr [ecx + 0x2640c5], al; add cl, cl; ret 0x20; 
0x50516524  # add byte ptr [ecx + 0x2d009f], cl; add byte ptr [ebx], bh; ret; 
0x5051651e  # add byte ptr [ecx + 0x2d049f], cl; add byte ptr [ecx + 0x2d009f], cl; add byte ptr [ebx], bh; ret; 
0x50501df4  # add byte ptr [ecx + 0x32c88e], cl; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 8; 
0x505212ff  # add byte ptr [ecx + 0x3707d6c6], al; ret; 
0x50519650  # add byte ptr [ecx + 0x3a0c5], al; add cl, cl; ret; 
0x505165de  # add byte ptr [ecx + 0x3b], bl; ret; 
0x50527ebc  # add byte ptr [ecx + 0x400cc5], al; add cl, cl; ret; 
0x5052e2f7  # add byte ptr [ecx + 0x450c5], al; add cl, cl; ret; 
0x5051f257  # add byte ptr [ecx + 0x4fa0c5], al; add cl, cl; ret; 
0x50547c7a  # add byte ptr [ecx + 0x5055e108], ah; ret; 
0x50516001  # add byte ptr [ecx + 0x56], bl; call 0x1c966; pop ecx; pop esi; ret; 
0x505271c8  # add byte ptr [ecx + 0x59], bl; jne 0x271d1; xor eax, eax; pop esi; ret; 
0x50515825  # add byte ptr [ecx + 0x59], bl; leave; ret; 
0x50524e6c  # add byte ptr [ecx + 0x59], bl; mov dword ptr [eax + 4], 0x1000; ret; 
0x50524217  # add byte ptr [ecx + 0x59], bl; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x5051c961  # add byte ptr [ecx + 0x59], bl; pop ebp; ret; 
0x50511379  # add byte ptr [ecx + 0x59], bl; ret 8; 
0x505115a1  # add byte ptr [ecx + 0x59], bl; ret; 
0x5051f2d8  # add byte ptr [ecx + 0x59], bl; test eax, eax; je 0x1f2e3; mov eax, dword ptr [eax + 8]; ret; 
0x5051f2fd  # add byte ptr [ecx + 0x59], bl; test eax, eax; je 0x1f308; mov eax, dword ptr [eax + 8]; ret; 
0x50515ec5  # add byte ptr [ecx + 0x59], bl; test eax, eax; jne 0x15e99; pop ebx; ret; 
0x50528383  # add byte ptr [ecx + 0x59], bl; test eax, eax; jne 0x28390; mov eax, 0x5054bcd4; ret; 
0x50513193  # add byte ptr [ecx + 0x59], bl; xor eax, eax; pop ebx; pop esi; ret 8; 
0x505132a1  # add byte ptr [ecx + 0x59], bl; xor eax, eax; pop edi; pop esi; ret 8; 
0x50542fac  # add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; pop ebp; ret; 
0x50519724  # add byte ptr [ecx + 0x5b], bl; leave; ret; 
0x50536013  # add byte ptr [ecx + 0x5d], bl; ret; 
0x50516008  # add byte ptr [ecx + 0x5e], bl; ret; 
0x50531ed7  # add byte ptr [ecx + 0x6842e830], cl; add byte ptr [eax], al; ret; 
0x50522bbf  # add byte ptr [ecx + 0x75], bl; in al, 0x8b; ret; 
0x50539caf  # add byte ptr [ecx + 0x75], cl; ror byte ptr [ebx - 0x1a740383], 1; pop ebp; ret; 
0x5052a2d2  # add byte ptr [ecx + 0x8481], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5052a1f0  # add byte ptr [ecx + 0x848f], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5052d8c5  # add byte ptr [ecx + 0x8cc5], al; add cl, cl; ret; 
0x50517bb2  # add byte ptr [ecx + 0xa8c5], al; add cl, cl; ret; 
0x505033b2  # add byte ptr [ecx + 0xaa486], cl; add byte ptr [ebx - 0x15], dl; ret 0x1468; 
0x5051a1b9  # add byte ptr [ecx + 0xb4c5], al; add cl, cl; ret; 
0x505130dd  # add byte ptr [ecx + 0xf90c5], al; add cl, cl; ret 0xc; 
0x5050d92d  # add byte ptr [ecx + 0xf94c5], al; add cl, cl; ret 0xc; 
0x5052428b  # add byte ptr [ecx + eax + 0x40], dh; add ecx, 4; dec edx; jne 0x24289; ret; 
0x50535fe3  # add byte ptr [ecx - 0x15], bl; or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x5054a020; pop esi; pop ebp; ret; 
0x50531ecd  # add byte ptr [ecx - 0x238a74d0], cl; call 0x38a0d; mov dword ptr [eax], esi; call 0x38721; ret; 
0x505412eb  # add byte ptr [ecx - 0x36cc1fbb], cl; cmp eax, 0xc0000017; sete cl; mov eax, ecx; ret; 
0x5051e87f  # add byte ptr [ecx - 0x5d], bl; sub al, 0xcf; push ebp; push eax; ret; 
0x50516a43  # add byte ptr [ecx - 0x75], bl; inc esp; and al, 0xc; mov dword ptr [esi], eax; pop esi; ret; 
0x50513a7c  # add byte ptr [ecx - 0x75], bl; ret; 
0x5051649d  # add byte ptr [ecx - 0x75], bl; xchg dword ptr [eax + 0x3b000000], edi; ret; 
0x50513c10  # add byte ptr [ecx - 0x7b], bl; sal byte ptr [ebp + 2], 0x5e; ret; 
0x5051c39e  # add byte ptr [ecx - 0x7b], bl; sar byte ptr [esi + 0x11], 0x8b; ret; 
0x50507c5a  # add byte ptr [ecx], al; add byte ptr [eax], al; add bl, ch; sbb byte ptr [ebx - 0x4b76f3bb], cl; ret; 
0x50509987  # add byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; pop esi; ret 8; 
0x5051a389  # add byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; ret; 
0x505169d3  # add byte ptr [ecx], al; add byte ptr [eax], al; mov ecx, dword ptr [ecx + 0x10]; mov dword ptr [eax + 0x104], ecx; ret; 
0x5051fb15  # add byte ptr [ecx], al; call 0x1fa91; pop ecx; pop esi; pop ebp; ret; 
0x5051ebe7  # add byte ptr [ecx], al; ret; 
0x50508f70  # add byte ptr [edi + 0x33], bl; rcr byte ptr [ebx + 0x5e], 0x5d; ret 8; 
0x50503cc9  # add byte ptr [edi + 0x3b], dh; sal dword ptr [eax + edi + 0x68], cl; test eax, 0xeb80042f; and dword ptr [ebx], edi; ret; 
0x50515c53  # add byte ptr [edi + 0x40], bl; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x5053efb7  # add byte ptr [edi + 0x5b], bl; pop esi; leave; ret; 
0x5050998b  # add byte ptr [edi + 0x5b], bl; pop esi; ret 8; 
0x5051a38d  # add byte ptr [edi + 0x5b], bl; ret; 
0x50523418  # add byte ptr [edi + 0x5e], bl; pop ebp; pop ebx; ret; 
0x5050a7e9  # add byte ptr [edi + 0x5e], bl; pop ebp; ret 4; 
0x5051c3e7  # add byte ptr [edi + 0x5e], bl; pop ebp; ret; 
0x50501dfa  # add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 8; 
0x50514ce2  # add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x505033e0  # add byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0x10; 
0x50509d12  # add byte ptr [edi + 0x5e], bl; ret 8; 
0x5051eb37  # add byte ptr [edi + 0x75], bh; add eax, 0xc940c033; ret; 
0x50537a71  # add byte ptr [edi + 4], dh; test eax, eax; je 0x37a56; pop edi; pop ebp; ret; 
0x50532b66  # add byte ptr [edi + eax - 0x75], dh; dec ebp; clc; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5053310f  # add byte ptr [edi + eax - 0x75], dh; dec ebp; lock and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5053f010  # add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x5053f05c  # add byte ptr [edi - 0x2b], bh; pop esi; pop ebx; pop ebp; ret; 
0x5052f4fa  # add byte ptr [edi - 0x37], bl; ret; 
0x5051cb3e  # add byte ptr [edi - 0x55], bh; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5051a67c  # add byte ptr [edi - 0x75], dl; ret; 
0x5052b414  # add byte ptr [edi - 0x77], bl; or dword ptr [eax + edx], 0; pop esi; leave; ret; 
0x50526510  # add byte ptr [edi - 0x77], bl; xor eax, 0x5055d3e8; pop esi; pop ebx; leave; ret; 
0x5051f324  # add byte ptr [edi], cl; mov bh, 0xc0; ret; 
0x50535b5d  # add byte ptr [edi], cl; mov dh, 0x41; add cl, byte ptr [edi]; mov dh, 0x56; add ch, byte ptr [ebx]; ret 0x1574; 
0x50535b3c  # add byte ptr [edi], cl; mov dh, 0x41; add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1574; 
0x50517d4e  # add byte ptr [edi], cl; test ah, bh; add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0x840f; 
0x505088d0  # add byte ptr [edi], cl; test bl, dl; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50517171  # add byte ptr [edi], cl; test byte ptr [0x33000004], dh; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x50525807  # add byte ptr [edi], cl; test byte ptr [esi - 0x75000000], bl; ret; 
0x5052a6c3  # add byte ptr [edx + 1], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6d2  # add byte ptr [edx + 2], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x50537bb0  # add byte ptr [edx + 2], ch; push 0; call dword ptr [0x5055e270]; xor eax, eax; pop ebp; ret; 
0x5052a6a5  # add byte ptr [edx + 3], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052a6b4  # add byte ptr [edx + 6], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x5052de32  # add byte ptr [edx + ebp - 0x75], dh; ret; 
0x50508145  # add byte ptr [edx + ebx + 0x2b], dh; ret 0x1174; 
0x50515d22  # add byte ptr [edx + ebx*4 + 0x5e], dh; pop ebx; pop edi; leave; ret; 
0x50505bee  # add byte ptr [edx + ecx + 0x68], dh; test eax, 0xe980042f; mov edx, 0x8b000001; inc ebp; or byte ptr [ebx], bh; ret; 
0x50534375  # add byte ptr [edx + edx - 9], dh; ret 0; 
0x505479fe  # add byte ptr [edx - 0x18], dh; xor eax, eax; ret 4; 
0x50547a4c  # add byte ptr [edx - 0x31], dh; pop edi; pop esi; ret 0xc; 
0x505092d5  # add byte ptr [edx - 1], ch; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x5050a2ac  # add byte ptr [edx], 0; leave; ret 0xc; 
0x5050a127  # add byte ptr [edx], 0; leave; ret 8; 
0x5051c3e3  # add byte ptr [edx], ah; or eax, dword ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebp; ret; 
0x50545cba  # add byte ptr [edx], al; add bh, dh; ret; 
0x5054348e  # add byte ptr [edx], bh; ret; 
0x50537d04  # add byte ptr [edx], ch; call 0x37bbf; add esp, 0xc; ret; 
0x505229c2  # add byte ptr [edx], ch; ret; 
0x5051967a  # add byte ptr [edx], ch; xor eax, eax; call 0x18eb6; add esp, 0x18; pop esi; ret; 
0x50541129  # add byte ptr [esi + 0x39], ah; dec eax; sbb byte ptr [edi], cl; xchg esp, eax; ret 0xc28b; 
0x5050626e  # add byte ptr [esi + 0x3b], ah; ret; 
0x50516fe2  # add byte ptr [esi + 0x5d], bl; pop ebx; ret; 
0x5051f2be  # add byte ptr [esi + 0x5d], bl; ret; 
0x50516959  # add byte ptr [esi + 0x5f], bl; ret; 
0x5053e3b3  # add byte ptr [esi + 0x74], bl; pop es; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5052792e  # add byte ptr [esi - 0x18], dl; add eax, 0x83000000; les ecx, ptr [esi + ebx*2]; ret; 
0x5052babd  # add byte ptr [esi - 0x18], dl; cld; push 0xc4830000; adc al, 0x5e; ret; 
0x5051792f  # add byte ptr [esi - 0x18], dl; dec edx; ret 1; 
0x50547818  # add byte ptr [esi - 0x18], dl; mov byte ptr [0x3b000002], al; ret; 
0x5050b007  # add byte ptr [esi - 0x18], dl; ret 0x27d; 
0x5051dac5  # add byte ptr [esi - 0x18], dl; ret; 
0x50524e89  # add byte ptr [esi - 0x18], dl; salc; jp 0x24e8e; call ptr [ecx + 0x59]; pop esi; ret; 
0x50521f34  # add byte ptr [esi - 0x18], dl; sub ebp, dword ptr [edx - 0x3b7c0001]; adc al, 0x5e; ret; 
0x50513c75  # add byte ptr [esi - 0x18], dl; xchg esi, eax; daa; add byte ptr [eax], al; pop ecx; ret; 
0x50514988  # add byte ptr [esi - 0x18], dl; xlatb; jg 0x1498e; add byte ptr [ecx + 0x59], bl; ret; 
0x5052a562  # add byte ptr [esi - 0x37], bl; ret; 
0x50512955  # add byte ptr [esi - 0x75], dl; ret; 
0x5050d4b6  # add byte ptr [esi - 1], dl; je 0xd4df; or al, ch; ret; 
0x5051a6d6  # add byte ptr [esi*2 + 0x5ec03305], al; pop ebp; ret; 
0x50545ed5  # add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x50534256  # add byte ptr [esp + ecx - 9], dh; ret 0; 
0x5052e4ee  # add byte ptr ds:[eax], al; leave; ret; 
0x5051ca7e  # add byte ptr ds:[ebp - 0x12], dh; and dword ptr [esi + 4], 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x50523417  # add byte ptr ds:[edi + 0x5e], bl; pop ebp; pop ebx; ret; 
0x505147ec  # add byte ptr es:[eax], al; leave; ret 0x20; 
0x50524e88  # add byte ptr es:[esi - 0x18], dl; salc; jp 0x24e8e; call ptr [ecx + 0x59]; pop esi; ret; 
0x505322f1  # add byte ptr fs:[eax], al; ret; 
0x5052a6d4  # add ch, al; and bh, bh; call ptr [ecx + 0x59]; ret; 
0x50542f40  # add ch, al; xor eax, 0x59ffff4b; ret; 
0x50535b65  # add ch, byte ptr [ebx]; ret 0x1574; 
0x50534621  # add ch, byte ptr [edx]; call 0x343a8; add esp, 0x14; pop ebp; ret; 
0x50537bb2  # add ch, byte ptr [edx]; call dword ptr [0x5055e270]; xor eax, eax; pop ebp; ret; 
0x50533fb0  # add cl, al; clc; add al, byte ptr [ebx]; ret 0x848d; 
0x50523553  # add cl, al; clc; or byte ptr [eax + 0x76ff0247], cl; or al, ch; ret; 
0x50532578  # add cl, byte ptr [eax + 0x458b0247]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x5051496a  # add cl, byte ptr [ebx + 0x2bc78bfe]; ret; 
0x50514146  # add cl, byte ptr [ebx + 0x5e5f5bc7]; leave; ret 0xc; 
0x50514218  # add cl, byte ptr [ebx + 0x5e5f5bc7]; leave; ret 8; 
0x5051e079  # add cl, byte ptr [ebx + 0x5e5f5dc5]; ret; 
0x5053257b  # add cl, byte ptr [ebx + 0x5f5e0845]; leave; ret; 
0x50532f76  # add cl, byte ptr [ebx - 0x36a00339]; ret; 
0x50545b73  # add cl, byte ptr [ebx]; ret 0xf75e; 
0x50545b9d  # add cl, byte ptr [ebx]; ret; 
0x50548819  # add cl, byte ptr [ecx + 0x40c03306]; pop esi; ret 0xc; 
0x50501dbc  # add cl, byte ptr [ecx + 0x7dc73b39]; and byte ptr [ebx], bh; ret; 
0x50535b61  # add cl, byte ptr [edi]; mov dh, 0x56; add ch, byte ptr [ebx]; ret 0x1574; 
0x505413f4  # add cl, byte ptr [edi]; test bh, cl; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x5051571d  # add cl, byte ptr [edi]; xchg ebp, eax; ret; 
0x50519cfe  # add cl, ch; push ds; add dword ptr [eax], eax; add byte ptr [ebp + 0x7d8de075], cl; in al, 0x8b; ret; 
0x5050e807  # add cl, ch; ret 0; 
0x50511e62  # add cl, ch; ret 2; 
0x5050c273  # add cl, ch; ret; 
0x50501ce2  # add cl, ch; retf 0; add byte ptr [ebx + 0x10886], cl; add byte ptr [ebx], bh; ret; 
0x50504c57  # add cl, cl; ret 0x10; 
0x5050ae47  # add cl, cl; ret 0x14; 
0x50505bab  # add cl, cl; ret 0x1c; 
0x50508595  # add cl, cl; ret 0x20; 
0x505059ba  # add cl, cl; ret 0x24; 
0x50505ee9  # add cl, cl; ret 0x2c; 
0x50501274  # add cl, cl; ret 0xc; 
0x5050326b  # add cl, cl; ret 4; 
0x50501343  # add cl, cl; ret 8; 
0x5050693c  # add cl, cl; ret; 
0x50533d7a  # add cl, dl; call 0x3caec90; ret; 
0x50543b5c  # add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x50509e88  # add dh, bh; xor eax, eax; ret 8; 
0x5053237e  # add dh, bl; ret; 
0x505167cd  # add dh, byte ptr [ebp + 0xb]; mov eax, dword ptr [eax + 0x58]; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051681a  # add dh, byte ptr [ebp + 0xb]; mov eax, dword ptr [eax + 0x58]; test eax, eax; je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x50507631  # add dh, byte ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 8; 
0x5051c4c4  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5b], 0xc9; ret; 
0x50508a7b  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0x10; 
0x50549583  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0xc; 
0x5051d8eb  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x505494d0  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x505495e3  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x50545f81  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x5053a6d8  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x505297ca  # add dh, byte ptr [ebx]; ret 0x3325; 
0x50528f33  # add dh, byte ptr [ebx]; ret; 
0x50545c0e  # add dh, byte ptr [edx + ecx + 0x3b]; sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x50545bb3  # add dh, dh; ret 0x7401; 
0x50545ba9  # add dh, dh; ret 0x7402; 
0x50545b98  # add dh, dh; ret 0x7408; 
0x5050f7c0  # add dh, dh; ret 0xf02; 
0x5053d93d  # add dh, dh; ret; 
0x50501271  # add dl, byte ptr [ecx]; add eax, dword ptr [eax]; leave; ret 0xc; 
0x505263f4  # add dword ptr [0x5055d440], esi; pop esi; pop ebx; ret; 
0x50516b4d  # add dword ptr [eax + 0x124], ecx; ret; 
0x5051577c  # add dword ptr [eax + 0x18], ecx; ret; 
0x5053255e  # add dword ptr [eax + 0x458b0147], ecx; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x5051ceb7  # add dword ptr [eax + 0xc], ecx; xor eax, eax; inc eax; pop esi; ret; 
0x5053b2b9  # add dword ptr [eax + eax*4], eax; and dh, bh; push dword ptr [edi]; call 0x42052; pop ecx; ret; 
0x5051e831  # add dword ptr [eax + eax*8 - 0x3fcce88b], eax; mov byte ptr [edx], 0; inc eax; ret; 
0x5052428d  # add dword ptr [eax - 0x7d], eax; rol dword ptr [edx + ecx*2], 0x75; hlt; ret; 
0x50545afd  # add dword ptr [eax - 0xa], eax; ret; 
0x505201f3  # add dword ptr [eax], 0x81c8800; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x505201ed  # add dword ptr [eax], 0xa0868b00; add dword ptr [eax], 0x81c8800; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x505165d1  # add dword ptr [eax], eax; add al, ch; lea esp, [ebx]; add byte ptr [ebx + 0x1a887], cl; add byte ptr [ecx + 0x3b], bl; ret; 
0x50516c03  # add dword ptr [eax], eax; add bh, bh; je 0x16c2d; adc byte ptr [edx + 0x50], dl; call ecx; ret; 
0x50545bc0  # add dword ptr [eax], eax; add bh, dh; ret 0; 
0x50516a7f  # add dword ptr [eax], eax; add byte ptr [eax], al; mov dword ptr [eax + 0x110], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x124], ecx; ret; 
0x5052f4f7  # add dword ptr [eax], eax; add byte ptr [eax], al; pop edi; leave; ret; 
0x50509988  # add dword ptr [eax], eax; add byte ptr [eax], al; pop edi; pop ebx; pop esi; ret 8; 
0x5051a38a  # add dword ptr [eax], eax; add byte ptr [eax], al; pop edi; pop ebx; ret; 
0x50526763  # add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; pop edi; ret; 
0x50527970  # add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; ret; 
0x5051d187  # add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x50502ac3  # add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop esi; ret 4; 
0x5052ef29  # add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop esi; ret; 
0x5053987f  # add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; ret; 
0x50519d01  # add dword ptr [eax], eax; add byte ptr [ebp + 0x7d8de075], cl; in al, 0x8b; ret; 
0x50515e86  # add dword ptr [eax], eax; add byte ptr [ebx + 0x14c86], cl; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5051658b  # add dword ptr [eax], eax; add byte ptr [ebx + 0x16487], cl; add byte ptr [ebx], bh; ret; 
0x5051565a  # add dword ptr [eax], eax; add byte ptr [ebx + 0x1788e], cl; add byte ptr [ebx - 0x76fbdbac], cl; adc al, 0x81; inc dword ptr [esi + 0x17c]; ret; 
0x505166e1  # add dword ptr [eax], eax; add byte ptr [ebx + 0x47501f9], al; mov eax, esi; pop esi; ret; 
0x50516a86  # add dword ptr [eax], eax; add byte ptr [ebx - 0x76efdbb4], cl; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x50515660  # add dword ptr [eax], eax; add byte ptr [ebx - 0x76fbdbac], cl; adc al, 0x81; inc dword ptr [esi + 0x17c]; ret; 
0x505169d4  # add dword ptr [eax], eax; add byte ptr [ebx - 0x7776efb7], cl; add al, 1; add byte ptr [eax], al; ret; 
0x5052035f  # add dword ptr [eax], eax; add byte ptr [ebx - 0x7af0fd07], al; ret 0xfffe; 
0x5051f60e  # add dword ptr [eax], eax; add byte ptr [ebx], al; ret 0xc103; 
0x505166f5  # add dword ptr [eax], eax; add byte ptr [ebx], bh; ret 0xed74; 
0x50501ceb  # add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x5051bff9  # add dword ptr [eax], eax; add byte ptr [ebx], ch; ret; 
0x50515e8c  # add dword ptr [eax], eax; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5051651c  # add dword ptr [eax], eax; add byte ptr [ecx + 0x2d049f], cl; add byte ptr [ecx + 0x2d009f], cl; add byte ptr [ebx], bh; ret; 
0x505165dc  # add dword ptr [eax], eax; add byte ptr [ecx + 0x3b], bl; ret; 
0x5051a387  # add dword ptr [eax], eax; add byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; ret; 
0x5052d8d0  # add dword ptr [eax], eax; add byte ptr [edx + 1], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x50541127  # add dword ptr [eax], eax; add byte ptr [esi + 0x39], ah; dec eax; sbb byte ptr [edi], cl; xchg esp, eax; ret 0xc28b; 
0x50547816  # add dword ptr [eax], eax; add byte ptr [esi - 0x18], dl; mov byte ptr [0x3b000002], al; ret; 
0x5051a6d4  # add dword ptr [eax], eax; add byte ptr [esi*2 + 0x5ec03305], al; pop ebp; ret; 
0x50533fae  # add dword ptr [eax], eax; add cl, al; clc; add al, byte ptr [ebx]; ret 0x848d; 
0x50503269  # add dword ptr [eax], eax; add cl, cl; ret 4; 
0x5050738a  # add dword ptr [eax], eax; add cl, cl; ret 8; 
0x5052dc0f  # add dword ptr [eax], eax; add cl, cl; ret; 
0x50533d78  # add dword ptr [eax], eax; add cl, dl; call 0x3caec90; ret; 
0x5050f7be  # add dword ptr [eax], eax; add dh, dh; ret 0xf02; 
0x5053d93b  # add dword ptr [eax], eax; add dh, dh; ret; 
0x505128cc  # add dword ptr [eax], eax; add ebp, 0x1014; leave; ret 0x10; 
0x5051ea6a  # add dword ptr [eax], eax; add ebp, 0x1f90; leave; ret; 
0x505147e7  # add dword ptr [eax], eax; add ebp, 0x2640; leave; ret 0x20; 
0x5051964f  # add dword ptr [eax], eax; add ebp, 0x3a0; leave; ret; 
0x5051f256  # add dword ptr [eax], eax; add ebp, 0x4fa0; leave; ret; 
0x50512c08  # add dword ptr [eax], eax; add ebp, 0x64; leave; ret 0x14; 
0x505172c5  # add dword ptr [eax], eax; add ebp, 0x78; leave; ret; 
0x50517bb1  # add dword ptr [eax], eax; add ebp, 0xa8; leave; ret; 
0x5051a1b8  # add dword ptr [eax], eax; add ebp, 0xb4; leave; ret; 
0x505130dc  # add dword ptr [eax], eax; add ebp, 0xf90; leave; ret 0xc; 
0x5051d1a3  # add dword ptr [eax], eax; add esp, 0x14; mov byte ptr [edi + esi], 0; mov eax, edi; pop edi; ret; 
0x5051c995  # add dword ptr [eax], eax; add esp, 0x14; pop edi; mov eax, esi; pop esi; ret; 
0x50516c6d  # add dword ptr [eax], eax; add esp, 0x14; pop esi; ret; 
0x5051ec13  # add dword ptr [eax], eax; add esp, 0xc; pop ebp; ret; 
0x50521dda  # add dword ptr [eax], eax; add esp, 0xc; pop ebx; leave; ret; 
0x505151ae  # add dword ptr [eax], eax; add esp, 0xc; pop esi; ret; 
0x50548869  # add dword ptr [eax], eax; div ecx; pop esi; ret 4; 
0x50549224  # add dword ptr [eax], eax; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x5051834a  # add dword ptr [eax], eax; leave; ret; 
0x50515824  # add dword ptr [eax], eax; pop ecx; pop ecx; leave; ret; 
0x5051c960  # add dword ptr [eax], eax; pop ecx; pop ecx; pop ebp; ret; 
0x505148a5  # add dword ptr [eax], eax; pop ecx; pop ecx; ret; 
0x5051c92c  # add dword ptr [eax], eax; pop ecx; ret; 
0x5051c970  # add dword ptr [eax], eax; ret; 
0x5053b6f8  # add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50521e28  # add dword ptr [eax], edx; mov eax, dword ptr [esi]; sub dword ptr [ecx], eax; pop edi; pop ebx; ret; 
0x505167bd  # add dword ptr [ebp + 0xb], esi; mov eax, dword ptr [eax + 0x4c]; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x5051570f  # add dword ptr [ebp + 3], edi; xor eax, eax; ret; 
0x505166e6  # add dword ptr [ebp + 4], esi; mov eax, esi; pop esi; ret; 
0x50533394  # add dword ptr [ebp + 4], esi; xor eax, eax; inc eax; ret; 
0x5052ef4f  # add dword ptr [ebp + 4], esi; xor eax, eax; pop esi; ret; 
0x505341e3  # add dword ptr [ebp - 0x13], esi; mov eax, dword ptr [esp + 0x10]; pop ebx; pop esi; pop edi; ret; 
0x50541cad  # add dword ptr [ebp - 0x29], esi; xor eax, eax; pop ebp; ret; 
0x50532e3c  # add dword ptr [ebp - 0xa], esi; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5053421a  # add dword ptr [ebp - 0xa], esi; pop ebx; pop esi; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50535e68  # add dword ptr [ebx + 0x374e445], ecx; mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x5051c8b0  # add dword ptr [ebx + 0x448d0848], ecx; add dword ptr [ebx + ecx*4], ecx; dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x50532561  # add dword ptr [ebx + 0x5f5e0845], ecx; leave; ret; 
0x5051ce08  # add dword ptr [ebx + 3], esi; xor eax, eax; ret; 
0x50545c3b  # add dword ptr [ebx + eax + 0x6a], esi; adc byte ptr [edx - 0xa], bl; ret; 
0x5051c8b6  # add dword ptr [ebx + ecx*4], ecx; dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x50532e39  # add dword ptr [ebx - 0x98afe16], eax; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5053115d  # add dword ptr [ebx], eax; ret 0x558b; 
0x50535bc9  # add dword ptr [ebx], ebp; ret 0x1174; 
0x50535b44  # add dword ptr [ebx], ebp; ret 0x1574; 
0x505183f3  # add dword ptr [ebx], ebp; ret 0x7674; 
0x50518299  # add dword ptr [ebx], ebp; ret 0x840f; 
0x5051fee4  # add dword ptr [ebx], ebp; ret 0xf883; 
0x50542fbb  # add dword ptr [ebx], esi; leave; cmp dword ptr [0x5055ded0], eax; sete cl; mov eax, ecx; ret; 
0x5051fde2  # add dword ptr [ebx], esi; rcr byte ptr [esi + 0x40], 0x5b; pop ebp; ret; 
0x5050aeff  # add dword ptr [ebx], esi; rol byte ptr [eax + 0x5f], 0x5e; ret 8; 
0x50541221  # add dword ptr [ebx], esi; sar byte ptr [0xc0000005], cl; sete dl; mov eax, edx; ret; 
0x5051c926  # add dword ptr [ecx + 0x51], eax; call 0x3616c; pop ecx; ret; 
0x5051ce59  # add dword ptr [ecx + 0xc], 4; xor eax, eax; inc eax; pop esi; ret; 
0x50525929  # add dword ptr [ecx + esi*8 - 0x73], edi; add al, 0x81; dec dword ptr [eax]; ret; 
0x5051a1b7  # add dword ptr [ecx], 0xb4c58100; add byte ptr [eax], al; add cl, cl; ret; 
0x5051497a  # add dword ptr [ecx], 1; add byte ptr [eax], al; pop ebx; ret; 
0x5051654e  # add dword ptr [ecx], eax; add bl, ch; or eax, 0x3b30468b; ret; 
0x5051497b  # add dword ptr [ecx], eax; add byte ptr [eax], al; pop ebx; ret; 
0x50515823  # add dword ptr [ecx], eax; add byte ptr [ecx + 0x59], bl; leave; ret; 
0x50534363  # add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x50534244  # add dword ptr [ecx], eax; xor dword ptr [esp + ebx*8 - 0x7c], 0x842c74d2; div byte ptr [esi + ebx - 9]; ret 0; 
0x5051d9ab  # add dword ptr [edi + 0x1c], eax; add esp, 0x30; pop edi; pop esi; ret; 
0x50521e2d  # add dword ptr [edi + 0x5b], ebx; ret; 
0x505333f9  # add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x5050a472  # add dword ptr [edi + 2], edi; add cl, cl; ret 8; 
0x5052d81b  # add dword ptr [edi - 0x37], ebx; ret; 
0x50504ee2  # add dword ptr [edi - 0x7b], edx; sal byte ptr [eax + ebx - 0x18], 0xc7; sub byte ptr [eax], al; add byte ptr [ebp - 0x17e68a40], al; pushfd; ret 0xffff; 
0x50521e73  # add dword ptr [edi], -0x14; pop ecx; pop ecx; ret; 
0x50515c9c  # add dword ptr [edi], eax; and dword ptr [esi], 0; add esp, 0xc; ret; 
0x50535bc5  # add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1174; 
0x50535b40  # add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1574; 
0x50545adc  # add dword ptr [edi], ecx; xchg ebp, eax; ret 0xcafe; 
0x5050a054  # add dword ptr [edx], 0; leave; ret 0xc; 
0x5050103c  # add dword ptr [edx], ebp; call dword ptr [0x5054a240]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50537d02  # add dword ptr [edx], ebp; push 0; call 0x37bbf; add esp, 0xc; ret; 
0x50532fa2  # add dword ptr [edx], edi; ret 0x1774; 
0x50532faf  # add dword ptr [edx], edi; ret 0xa74; 
0x5051e78f  # add dword ptr [edx], edi; ret; 
0x505491ec  # add dword ptr [edx], esi; ret 0x688; 
0x5051fad6  # add dword ptr [esi + 0x10], -8; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x505157f1  # add dword ptr [esi + 0x18], eax; mov eax, dword ptr [ebp - 4]; leave; ret; 
0x505157c4  # add dword ptr [esi + 0x18], eax; xor eax, eax; inc eax; ret; 
0x505197de  # add dword ptr [esi + 0x24], eax; call 0x19729; pop esi; leave; ret; 
0x50531572  # add dword ptr [esi], ecx; add byte ptr [eax], al; leave; ret; 
0x5053b6f3  # add dword ptr [esp + edx - 0x73], esi; push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50516590  # add dword ptr fs:[eax], eax; add byte ptr [ebx], bh; ret; 
0x50533135  # add eax, -0x20; pop ebp; ret; 
0x5053604a  # add eax, 0x10; push eax; call 0x38c24; pop ecx; pop ebp; ret; 
0x5053d416  # add eax, 0x14; cmp eax, ecx; jb 0x3d408; xor eax, eax; pop ebp; ret; 
0x505162c2  # add eax, 0x18; push dword ptr [esp + 8]; push eax; call 0x1ca8c; add esp, 0xc; ret; 
0x5053393e  # add eax, 0x20; pop ebp; ret; 
0x5053601a  # add eax, 0x20; push eax; call dword ptr [0x5054a020]; pop ebp; ret; 
0x50536056  # add eax, 0x20; push eax; call dword ptr [0x5054a024]; pop ebp; ret; 
0x5050c8d3  # add eax, 0x32dc; push eax; call dword ptr [0x5054a04c]; xor eax, eax; ret 8; 
0x50542691  # add eax, 0x4000; pop ebp; ret; 
0x50545ba4  # add eax, 0x4000d; add dh, dh; ret 0x7402; 
0x50515189  # add eax, 0x4689c703; adc al, 0x5f; pop ebx; ret; 
0x50536049  # add eax, 0x5010c083; call 0x38c24; pop ecx; pop ebp; ret; 
0x505265dd  # add eax, 0x5055d448; ret; 
0x50542fbf  # add eax, 0x5055ded0; sete cl; mov eax, ecx; ret; 
0x5053987a  # add eax, 0x5055e26c; add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; ret; 
0x5051ee11  # add eax, 0x59fffffe; push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x5051fff4  # add eax, 0x5bffc883; ret; 
0x5053e0c6  # add eax, 0x5d40c033; ret; 
0x5051a6d9  # add eax, 0x5d5ec033; ret; 
0x50527944  # add eax, 0x5e044621; ret; 
0x50526e18  # add eax, 0x5e40c033; ret; 
0x50541097  # add eax, 0x5e58186a; ret; 
0x50535f2c  # add eax, 0x5e581a6a; ret; 
0x50526e1f  # add eax, 0x5effc883; ret; 
0x50516140  # add eax, 0x5ffffffd; pop esi; leave; ret; 
0x50535fa0  # add eax, 0x6325e8; add bh, bh; xor eax, 0x5055e274; call 0x36451; pop ecx; ret; 
0x505462c4  # add eax, 0x74c00000; or bh, byte ptr [0xc000001d]; je 0x462d4; xor eax, eax; ret; 
0x5053ab42  # add eax, 0x74e04539; add al, 0x80; dec ebp; inc dword ptr [eax - 0x1f7c3e75]; add ebp, dword ptr [ebx]; ret; 
0x50541caa  # add eax, 0x7501f883; xlatb; xor eax, eax; pop ebp; ret; 
0x505087b5  # add eax, 0x75185e39; je 0x8747; xchg byte ptr [eax], cl; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50545bae  # add eax, 0x8000d; add dh, dh; ret 0x7401; 
0x50521382  # add eax, 0x8101e3e9; ret; 
0x505215c2  # add eax, 0x8104881d; ret; 
0x50527931  # add eax, 0x83000000; les ecx, ptr [esi + ebx*2]; ret; 
0x5051ffe1  # add eax, 0x83fffffe; les ebx, ptr [eax]; pop edi; pop esi; leave; ret; 
0x5051716f  # add eax, 0x840f0000; xor eax, 0x33000004; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x5054458d  # add eax, 0x890c4d8b; sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x50536e93  # add eax, 0x8b000000; inc ebp; in al, 0xeb; ret; 
0x50516498  # add eax, 0x9c69e8; add byte ptr [ecx - 0x75], bl; xchg dword ptr [eax + 0x3b000000], edi; ret; 
0x5052a158  # add eax, 0xb08e0c1; ret 0xb60f; 
0x50514891  # add eax, 0xc01bd8f7; ret; 
0x505317d4  # add eax, 0xc0330474; leave; ret; 
0x5053ee24  # add eax, 0xc033057a; inc eax; leave; ret; 
0x5051eb3a  # add eax, 0xc940c033; ret; 
0x5051e2c4  # add eax, 0xc9ffc883; ret; 
0x5053a1b7  # add eax, 0xc; ret; 
0x5053ee4e  # add eax, 0xd0ff006a; ret; 
0x50545f29  # add eax, 0xd; sbb byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5053945b  # add eax, 0xeb000000; mov cs, word ptr [ebx + 0xd6ae475]; call 0x38c24; pop ecx; ret; 
0x50516493  # add eax, 0xeb1450ff; add eax, 0x9c69e8; add byte ptr [ecx - 0x75], bl; xchg dword ptr [eax + 0x3b000000], edi; ret; 
0x5050c786  # add eax, 0xeb40c033; push es; mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x5051fcbf  # add eax, 0xeb58036a; jnp 0xc0850d0a; or bl, byte ptr [ecx + 0x307e283]; ret 0xf8c1; 
0x5050ab3b  # add eax, 0xebffc883; push es; mov eax, dword ptr [eax + 0x108]; ret 4; 
0x50502ce1  # add eax, 0xebffc883; push es; mov eax, dword ptr [eax + 0x32cc]; ret 4; 
0x50502cc6  # add eax, 0xebffc883; push es; mov eax, dword ptr [eax + 0x514]; ret 4; 
0x5050d53d  # add eax, 0xebffc883; push es; mov eax, dword ptr [eax + 0xab4]; ret 4; 
0x50502f1a  # add eax, 0xebffc883; push es; mov eax, dword ptr [eax + 0xab8]; ret 4; 
0x5050ddd7  # add eax, 0xebffc883; push es; mov eax, dword ptr [eax + 0xe4]; ret 4; 
0x505169a2  # add eax, 0xf4; ret; 
0x50541225  # add eax, 0xfc00000; xchg esp, eax; ret 0xc28b; 
0x50533b38  # add eax, 1; ret; 
0x5050972a  # add eax, 4; add ecx, 4; dec esi; jne 0x9714; pop esi; ret; 
0x50509766  # add eax, 4; dec ecx; jne 0x9743; pop edi; pop esi; ret; 
0x5051fcd4  # add eax, 4; ret; 
0x5052f85f  # add eax, 8; dec edx; jne 0x2f853; pop esi; ret; 
0x5053a190  # add eax, 8; pop ebp; ret; 
0x5053a1a4  # add eax, 8; ret; 
0x50525a73  # add eax, dword ptr [eax + 0x59]; inc eax; ret; 
0x5054357c  # add eax, dword ptr [eax]; add byte ptr [eax], al; ret; 
0x5051f67f  # add eax, dword ptr [eax]; add byte ptr [ebx], dh; rcr byte ptr [edi + 0x40], 0x5e; ret; 
0x5052d3d7  # add eax, dword ptr [eax]; add byte ptr [ecx + 0x59], bl; ret; 
0x50517d4c  # add eax, dword ptr [eax]; add byte ptr [edi], cl; test ah, bh; add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0x840f; 
0x5052d69a  # add eax, dword ptr [eax]; add byte ptr [edx + 1], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x50519654  # add eax, dword ptr [eax]; add cl, cl; ret; 
0x5051f73d  # add eax, dword ptr [eax]; inc ecx; and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x50501273  # add eax, dword ptr [eax]; leave; ret 0xc; 
0x50501342  # add eax, dword ptr [eax]; leave; ret 8; 
0x5051f737  # add eax, dword ptr [eax]; mov ecx, dword ptr [eax + 0x38000]; inc ecx; and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x50513c74  # add eax, dword ptr [eax]; push esi; call 0x16412; pop ecx; ret; 
0x5051f74a  # add eax, dword ptr [eax]; ret; 
0x50538270  # add eax, dword ptr [ebx + 0x1ff0020]; leave; ret; 
0x50516adc  # add eax, dword ptr [ebx + 0x448b0021]; and al, 4; test eax, eax; jne 0x16ae9; ret; 
0x50546f3a  # add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 4; 
0x5053832a  # add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret; 
0x50522f22  # add eax, dword ptr [ebx + 0x5f5effc8]; pop ebx; pop ebp; ret; 
0x5052a33a  # add eax, dword ptr [ebx + 0xf]; mov dh, 0x46; add al, 0xf; mov dh, 0x56; add eax, 0xb08e0c1; ret 0xb60f; 
0x5054027c  # add eax, dword ptr [ebx - 0x75]; ret; 
0x5052d12f  # add eax, dword ptr [ebx]; ret 0x5653; 
0x5050b42d  # add eax, dword ptr [ebx]; ret 0xf8c1; 
0x505260e8  # add eax, dword ptr [ecx - 0x7d]; ret 0x3b04; 
0x50532b8e  # add eax, dword ptr [ecx]; add byte ptr [eax], al; pop ebp; ret; 
0x5051cbd0  # add eax, dword ptr [esi + 4]; push eax; call 0x323c0; add esp, 0xc; pop esi; ret; 
0x505151a8  # add eax, dword ptr [esi]; push eax; call 0x323c0; add esp, 0xc; pop esi; ret; 
0x5052a6c5  # add eax, ebp; cmp eax, 0x59ffff22; pop ecx; ret; 
0x5053c362  # add eax, ebp; mov esp, 0x59ffffc8; ret; 
0x5052f540  # add eax, ebp; ret 0xfed3; 
0x5051dc40  # add eax, ebp; ret 0xffec; 
0x50524e64  # add eax, ebp; sahf; jp 0x24e68; inc dword ptr [ebx + 0x59590020]; mov dword ptr [eax + 4], 0x1000; ret; 
0x5051f613  # add eax, ecx; cdq; mov ecx, 0x7f7; idiv ecx; mov eax, edx; ret; 
0x5051c7fc  # add eax, ecx; out 0x1e, al; mov eax, esi; pop esi; leave; ret; 
0x5051e1c0  # add eax, ecx; pop ebp; ret; 
0x5051579a  # add eax, ecx; ret; 
0x5051518a  # add eax, edi; mov dword ptr [esi + 0x14], eax; pop edi; pop ebx; ret; 
0x505311a8  # add eax, edx; pop esi; mov dword ptr [ecx + 0x1c], eax; pop ebx; leave; ret; 
0x5051fccf  # add eax, edx; sar eax, 3; add eax, 4; ret; 
0x50525a6f  # add eax, edx; sar eax, 3; inc eax; pop ecx; inc eax; ret; 
0x50525a88  # add eax, edx; sar eax, 3; pop ecx; add eax, 4; ret; 
0x50515c51  # add eax, esi; add byte ptr [edi + 0x40], bl; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x5052331e  # add eax, esi; pop edi; lea eax, [eax*4 + 0x14]; pop esi; ret; 
0x505128ce  # add ebp, 0x1014; leave; ret 0x10; 
0x505316ec  # add ebp, 0x188; leave; ret; 
0x50503266  # add ebp, 0x18c; leave; ret 4; 
0x50507387  # add ebp, 0x18c; leave; ret 8; 
0x505484ce  # add ebp, 0x190; leave; ret 8; 
0x5052e8dc  # add ebp, 0x198; leave; ret; 
0x505487bb  # add ebp, 0x19c; leave; ret 4; 
0x50548c87  # add ebp, 0x1a4; leave; ret 4; 
0x5052eee2  # add ebp, 0x1e0; leave; ret; 
0x5051ea6c  # add ebp, 0x1f90; leave; ret; 
0x5050f68a  # add ebp, 0x1ffc; leave; ret 0xc; 
0x505147e9  # add ebp, 0x2640; leave; ret 0x20; 
0x50519651  # add ebp, 0x3a0; leave; ret; 
0x50527ebd  # add ebp, 0x400c; leave; ret; 
0x5052e2f8  # add ebp, 0x450; leave; ret; 
0x5051f258  # add ebp, 0x4fa0; leave; ret; 
0x505277e6  # add ebp, 0x5c; leave; ret; 
0x5050f93b  # add ebp, 0x68; leave; ret 0x10; 
0x50522e4b  # add ebp, 0x68; leave; ret; 
0x505035e7  # add ebp, 0x6c; leave; ret 0xc; 
0x50528a2c  # add ebp, 0x6c; leave; ret; 
0x505028fa  # add ebp, 0x74; leave; ret 4; 
0x505223fd  # add ebp, 0x74; leave; ret; 
0x50506854  # add ebp, 0x78; leave; ret; 
0x5052d8c6  # add ebp, 0x8c; leave; ret; 
0x50517bb3  # add ebp, 0xa8; leave; ret; 
0x5051a1ba  # add ebp, 0xb4; leave; ret; 
0x50549449  # add ebp, 0xd0; leave; ret; 
0x505130de  # add ebp, 0xf90; leave; ret 0xc; 
0x5050d92e  # add ebp, 0xf94; leave; ret 0xc; 
0x5053ab50  # add ebp, dword ptr [ebx]; ret; 
0x5050df61  # add ebp, dword ptr [edi - 0x3e0a83f1]; rol byte ptr [edi], 3; ret 0x4589; 
0x505287b2  # add ebp, eax; or byte ptr [eax + eax + 0x1f7c8d00], bl; add al, 0x8b; popfd; push 0x8bffffff; ret; 
0x5052a6a7  # add ebp, eax; pop ebx; and bh, bh; call ptr [ecx + 0x59]; ret; 
0x5051fcc1  # add ebx, dword ptr [eax - 0x15]; jnp 0xc0850d0a; or bl, byte ptr [ecx + 0x307e283]; ret 0xf8c1; 
0x50521fe2  # add ebx, dword ptr [ecx + 0x303e283]; ret 0xf8c1; 
0x50536786  # add ebx, eax; mov eax, dword ptr [esp + 8]; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x50509e80  # add ebx, ebp; pop es; and dword ptr [eax + 0xdc], 0xfffffffe; xor eax, eax; ret 8; 
0x50536079  # add ecx, 0x10; push ecx; call 0x38c24; pop ecx; pop ebp; ret; 
0x5052428f  # add ecx, 4; dec edx; jne 0x24289; ret; 
0x5052d71e  # add ecx, 4; dec edx; jne 0x2d6fb; pop edi; pop esi; ret; 
0x5050972d  # add ecx, 4; dec esi; jne 0x9714; pop esi; ret; 
0x50525287  # add ecx, 4; or esi, edx; jne 0x25278; pop esi; ret; 
0x505326ea  # add ecx, dword ptr [eax + 0x458b0347]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x5051e1bd  # add ecx, dword ptr [ebp + 0x10]; add eax, ecx; pop ebp; ret; 
0x50511585  # add ecx, dword ptr [ebp - 0x3974fe90]; pop esi; ret; 
0x5053c1e3  # add ecx, dword ptr [ebx + 0x5d5e1040]; ret; 
0x505326ed  # add ecx, dword ptr [ebx + 0x5f5e0845]; leave; ret; 
0x50518fd6  # add ecx, dword ptr [ecx + 0x5f5b305e]; pop esi; ret; 
0x50515fb7  # add ecx, dword ptr [ecx - 0x7976efbf]; add al, 0x2d; add byte ptr [eax], al; ret; 
0x505088ce  # add ecx, dword ptr [ecx]; add byte ptr [edi], cl; test bl, dl; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x5053efe9  # add ecx, dword ptr [ecx]; push es; ret; 
0x50536b10  # add ecx, ecx; ret; 
0x50515790  # add ecx, edx; mov dword ptr [eax + 0x18], ecx; mov eax, dword ptr [eax + 0x14]; sub eax, edx; add eax, ecx; ret; 
0x5052a306  # add edi, 0x110; call 0x2a12b; pop edi; pop ebp; ret; 
0x50532e37  # add edi, 1; sub edx, 1; jne 0x32e35; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50538486  # add edi, 4; cmp edi, esi; jb 0x3847e; pop edi; pop esi; ret; 
0x505384ac  # add edi, 4; cmp edi, esi; jb 0x384a4; pop edi; pop esi; ret; 
0x50544c6a  # add edi, edi; inc ebp; mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x50514ee1  # add edi, edi; or bh, bh; xchg dword ptr [eax], esi; add al, byte ptr [eax]; add bl, ch; ret 0x87c7; 
0x50510e93  # add edi, edi; push dword ptr [ebx]; rcr byte ptr [esi + 0x5f], 0xc9; ret 0x1c; 
0x50533b27  # add edx, 4; or ah, ah; jne 0x33b00; mov edi, edi; xor eax, eax; ret; 
0x5054404d  # add edx, dword ptr [eax - 1]; salc; pop esi; ret; 
0x50525ac6  # add edx, ebx; call 0x101802b; add byte ptr [eax], al; ret; 
0x5053678e  # add edx, ebx; pop ebx; ret 0x10; 
0x50515776  # add edx, ecx; mov dword ptr [edi], edx; mov ecx, dword ptr [esi]; add dword ptr [eax + 0x18], ecx; ret; 
0x5052a8b5  # add esi, 0x198; call 0x2a414; pop ecx; pop ecx; pop esi; ret; 
0x5052a883  # add esi, 0x198; push esi; call 0x2a6e2; add esp, 0x10; pop esi; ret; 
0x50535fe7  # add esi, 0x20; push esi; call dword ptr [0x5054a020]; pop esi; pop ebp; ret; 
0x5051132b  # add esi, 0x64; cmp esi, dword ptr [esp + 8]; jb 0x11314; xor eax, eax; pop esi; ret 4; 
0x5052f7f4  # add esi, 4; call 0x2f3b9; add esp, 0x10; pop esi; ret; 
0x5052f835  # add esi, 4; call 0x2f4b4; pop edi; pop esi; ret; 
0x50537ff2  # add esi, 4; cmp esi, 0x5055e260; jl 0x37fbb; pop edi; pop esi; ret; 
0x50537b2f  # add esi, 4; cmp esi, dword ptr [ebp + 0xc]; jb 0x37b23; pop esi; pop ebp; ret; 
0x5051ce2c  # add esi, dword ptr [ebx]; rol bl, 0x8b; adc dword ptr [ebx], eax; ret 0xb60f; 
0x5051c414  # add esi, dword ptr [ebx]; rol byte ptr [eax + 0x5e], 0x5b; ret; 
0x5053e44a  # add esi, edi; push esi; call 0x32730; add esp, 0x10; pop esi; ret; 
0x50545c60  # add esi, esi; ret; 
0x5052675d  # add esp, 0x10; and dword ptr [esi + 0x12c], 0; pop esi; pop edi; ret; 
0x50515c81  # add esp, 0x10; call 0x14981; pop esi; ret; 
0x505119ef  # add esp, 0x10; inc eax; pop edi; pop esi; ret 4; 
0x5051d908  # add esp, 0x10; mov dword ptr [eax + 0x24], 1; ret; 
0x50527a31  # add esp, 0x10; mov dword ptr [esi + 0x14], eax; call 0x279b5; mov eax, esi; pop esi; ret; 
0x50519797  # add esp, 0x10; mov dword ptr [esi + 0x2c], edi; pop ebx; leave; ret; 
0x50522bea  # add esp, 0x10; mov eax, edi; pop edi; pop esi; ret; 
0x5051cc17  # add esp, 0x10; mov eax, esi; pop esi; ret; 
0x50518e88  # add esp, 0x10; mov esi, ebx; call 0x14981; pop ebx; pop esi; ret; 
0x50531727  # add esp, 0x10; pop ebp; ret; 
0x50521ca1  # add esp, 0x10; pop ebx; ret; 
0x505360f5  # add esp, 0x10; pop edi; leave; ret; 
0x50518f60  # add esp, 0x10; pop edi; pop ebx; leave; ret; 
0x505160b6  # add esp, 0x10; pop edi; pop esi; leave; ret; 
0x505153b6  # add esp, 0x10; pop edi; pop esi; pop ebx; leave; ret; 
0x50515f55  # add esp, 0x10; pop edi; pop esi; pop ebx; ret; 
0x50526689  # add esp, 0x10; pop edi; pop esi; ret; 
0x5052da93  # add esp, 0x10; pop esi; pop ebp; ret; 
0x5051a1e3  # add esp, 0x10; pop esi; ret; 
0x5051640e  # add esp, 0x10; ret; 
0x50521ceb  # add esp, 0x10; xor ecx, ebp; pop ebx; call 0x32377; leave; ret; 
0x5052f832  # add esp, 0x14; add esi, 4; call 0x2f4b4; pop edi; pop esi; ret; 
0x5051d1a5  # add esp, 0x14; mov byte ptr [edi + esi], 0; mov eax, edi; pop edi; ret; 
0x5051d870  # add esp, 0x14; mov eax, esi; pop esi; ret; 
0x50542ad6  # add esp, 0x14; or eax, 0xffffffff; pop esi; pop ebp; ret; 
0x5052dfa8  # add esp, 0x14; pop ebp; ret; 
0x5051f356  # add esp, 0x14; pop edi; mov dword ptr [esi], 0x2736; mov eax, esi; pop esi; ret; 
0x5051c997  # add esp, 0x14; pop edi; mov eax, esi; pop esi; ret; 
0x505156c0  # add esp, 0x14; pop edi; pop ebx; leave; ret; 
0x50517c2a  # add esp, 0x14; pop edi; pop esi; pop ebx; leave; ret; 
0x50533d05  # add esp, 0x14; pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x50516c6f  # add esp, 0x14; pop esi; ret; 
0x5052f3b3  # add esp, 0x14; ret 4; 
0x50524935  # add esp, 0x14; ret; 
0x505157ba  # add esp, 0x14; test eax, eax; jge 0x157c4; xor eax, eax; ret; 
0x50524e01  # add esp, 0x14; test eax, eax; jne 0x24e0a; leave; ret; 
0x50536e5a  # add esp, 0x14; xor eax, eax; call 0x38721; ret; 
0x50531429  # add esp, 0x14; xor ecx, ebp; pop edi; call 0x32377; leave; ret; 
0x5051511e  # add esp, 0x18; leave; ret; 
0x5051d29c  # add esp, 0x18; mov eax, edi; pop edi; pop esi; ret; 
0x5052dc4f  # add esp, 0x18; pop ebp; ret; 
0x50514391  # add esp, 0x18; pop ecx; ret; 
0x5051675d  # add esp, 0x18; pop edi; mov eax, esi; pop esi; ret; 
0x5051ffe5  # add esp, 0x18; pop edi; pop esi; leave; ret; 
0x505435fe  # add esp, 0x18; pop edi; pop esi; pop ebx; ret; 
0x5052a7c6  # add esp, 0x18; pop edi; pop esi; ret; 
0x50519684  # add esp, 0x18; pop esi; ret; 
0x5050c19d  # add esp, 0x18; ret 8; 
0x5052293d  # add esp, 0x18; xor eax, eax; pop esi; ret; 
0x50513ff3  # add esp, 0x1c; inc eax; pop ebp; ret 0x10; 
0x5053eda1  # add esp, 0x1c; pop ebp; ret; 
0x5051d3bf  # add esp, 0x1c; pop edi; mov eax, esi; pop esi; ret; 
0x5052f139  # add esp, 0x1c; pop edi; pop esi; pop ebx; leave; ret; 
0x505152fd  # add esp, 0x1c; pop edi; pop esi; ret; 
0x50527a7a  # add esp, 0x1c; pop esi; ret; 
0x50523a58  # add esp, 0x1c; xor eax, eax; pop esi; ret; 
0x5051d2e9  # add esp, 0x20; mov eax, edi; pop edi; pop esi; ret; 
0x5051d37c  # add esp, 0x20; pop edi; pop esi; pop ebx; leave; ret; 
0x50535cf0  # add esp, 0x20; pop esi; leave; ret; 
0x505162b7  # add esp, 0x20; pop esi; pop ebx; pop ebp; ret; 
0x50537d54  # add esp, 0x24; mov dword ptr [0x50555fb8], eax; pop esi; ret; 
0x5051a6c0  # add esp, 0x24; pop edi; pop ebx; pop esi; pop ebp; ret; 
0x5052d7b1  # add esp, 0x28; leave; ret; 
0x50517a66  # add esp, 0x28; pop esi; pop edi; pop ebx; leave; ret; 
0x5052a9e7  # add esp, 0x2c; pop edi; pop esi; pop ebx; leave; ret; 
0x50541722  # add esp, 0x2c; pop esi; pop ebp; ret; 
0x5051d9ae  # add esp, 0x30; pop edi; pop esi; ret; 
0x50513c57  # add esp, 0x38; xor eax, eax; pop edi; inc eax; pop esi; ret; 
0x505263f1  # add esp, 0xc; add dword ptr [0x5055d440], esi; pop esi; pop ebx; ret; 
0x5050f4d6  # add esp, 0xc; call 0x32377; leave; ret; 
0x50513e14  # add esp, 0xc; inc eax; ret; 
0x50515151  # add esp, 0xc; leave; ret; 
0x5052642b  # add esp, 0xc; mov dword ptr [0x5055e118], eax; ret; 
0x505333f5  # add esp, 0xc; mov dword ptr [ecx], eax; pop edi; pop esi; pop ebp; ret; 
0x5052513e  # add esp, 0xc; mov dword ptr [edi], esi; mov eax, edi; pop edi; ret; 
0x505279cf  # add esp, 0xc; mov dword ptr [esi + 0x10], eax; ret; 
0x505219e5  # add esp, 0xc; mov dword ptr [esi + 0x50], edi; pop edi; pop esi; leave; ret; 
0x505312a0  # add esp, 0xc; mov dword ptr [esi + 0x60], edi; pop edi; pop esi; leave; ret; 
0x5051cbb3  # add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x50539d3c  # add esp, 0xc; mov eax, dword ptr [ebp + 8]; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x50525176  # add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x5053139d  # add esp, 0xc; mov eax, edx; ret; 
0x50526004  # add esp, 0xc; mov eax, esi; pop esi; ret; 
0x5051ec15  # add esp, 0xc; pop ebp; ret; 
0x5051638f  # add esp, 0xc; pop ebx; leave; ret; 
0x505499fc  # add esp, 0xc; pop ebx; pop ebp; ret; 
0x5052d59e  # add esp, 0xc; pop edi; leave; ret; 
0x50525e55  # add esp, 0xc; pop edi; mov eax, esi; pop esi; ret; 
0x5050e595  # add esp, 0xc; pop edi; pop ebx; leave; ret; 
0x5051bfcc  # add esp, 0xc; pop edi; pop ebx; pop esi; pop ebp; ret; 
0x5052df8a  # add esp, 0xc; pop edi; pop esi; pop ebp; ret; 
0x5050f461  # add esp, 0xc; pop edi; pop esi; pop ebx; leave; ret 4; 
0x505199f8  # add esp, 0xc; pop edi; pop esi; pop ebx; leave; ret; 
0x5051a61d  # add esp, 0xc; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5052f739  # add esp, 0xc; pop edi; ret; 
0x5052d4aa  # add esp, 0xc; pop esi; leave; ret; 
0x5052daef  # add esp, 0xc; pop esi; pop ebp; ret; 
0x50517cf3  # add esp, 0xc; pop esi; pop ebx; leave; ret; 
0x505151b0  # add esp, 0xc; pop esi; ret; 
0x50515072  # add esp, 0xc; ret; 
0x505157e6  # add esp, 0xc; test eax, eax; jge 0x157f1; xor eax, eax; leave; ret; 
0x5051d056  # add esp, 0xc; test eax, eax; jne 0x1d05f; leave; ret; 
0x5052ef89  # add esp, 0xc; xor eax, eax; inc eax; pop esi; ret; 
0x50547a76  # add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x505311bd  # add esp, 4; mov dword ptr [ecx + 0x60], eax; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x5051ced4  # add esp, 4; test eax, eax; jne 0x1cedf; xor eax, eax; leave; ret; 
0x5050e508  # add esp, dword ptr [ecx - 0x3eb1f7ef]; retf; or eax, dword ptr [ebx]; fisttp word ptr [ebx + 0xbd0f7c2]; ret; 
0x5050f7bd  # add word ptr [eax], ax; add dh, dh; ret 0xf02; 
0x5050ddde  # and ah, 0; add byte ptr [eax], al; ret 4; 
0x505168b6  # and ah, 0; add byte ptr [eax], al; ret; 
0x5051685c  # and al, 0; add byte ptr [eax], al; ret; 
0x50523551  # and al, 0; add cl, al; clc; or byte ptr [eax + 0x76ff0247], cl; or al, ch; ret; 
0x50525b08  # and al, 0x10; add byte ptr [ebp + 0x4748604], cl; or dword ptr [eax], edx; pop esi; ret; 
0x50528e16  # and al, 0x10; add byte ptr [ebp - 0x3c], dh; mov eax, edi; pop edi; pop esi; ret; 
0x5051d1c1  # and al, 0x10; call 0x16b67; add esp, 0x10; ret; 
0x5051a763  # and al, 0x10; call 0x19758; pop edi; pop esi; ret; 
0x5051d901  # and al, 0x10; call 0x1d704; add esp, 0x10; mov dword ptr [eax + 0x24], 1; ret; 
0x5051e1d1  # and al, 0x10; call 0x1e1aa; add esp, 0x10; ret; 
0x50527b99  # and al, 0x10; call 0x2600b; add esp, 0xc; ret; 
0x5052ab2a  # and al, 0x10; call 0x2a1fa; pop ecx; ret; 
0x5052ba21  # and al, 0x10; call 0x2b7c7; pop ecx; pop ecx; pop esi; ret; 
0x5052d928  # and al, 0x10; call 0x2d8dd; add esp, 0x10; ret; 
0x50547a6f  # and al, 0x10; call 0x323c0; add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x505092e2  # and al, 0x10; call 0x90e7; ret 0xc; 
0x50516b28  # and al, 0x10; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a8b  # and al, 0x10; mov dword ptr [eax + 0x124], ecx; ret; 
0x50516bd9  # and al, 0x10; mov dword ptr [eax + 0x138], ecx; ret; 
0x50543577  # and al, 0x10; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x5052a8de  # and al, 0x10; mov eax, dword ptr [esp + 0xc]; call 0x2a44c; pop ecx; ret; 
0x5052bb10  # and al, 0x10; mov eax, dword ptr [esp + 0xc]; call 0x2b5d0; pop ecx; ret; 
0x5052a905  # and al, 0x10; mov ecx, dword ptr [esp + 0xc]; call 0x2a1fa; pop ecx; ret; 
0x5052bb23  # and al, 0x10; mov edx, dword ptr [esp + 0xc]; call 0x2b6b4; pop ecx; ret; 
0x505341e8  # and al, 0x10; pop ebx; pop esi; pop edi; ret; 
0x5051d8fd  # and al, 0x10; push dword ptr [esp + 0x10]; call 0x1d704; add esp, 0x10; mov dword ptr [eax + 0x24], 1; ret; 
0x5051e1cd  # and al, 0x10; push dword ptr [esp + 0x10]; call 0x1e1aa; add esp, 0x10; ret; 
0x505092de  # and al, 0x10; push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x505092da  # and al, 0x10; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x5052d72d  # and al, 0x10; push dword ptr [esp + 0xc]; call 0x2d3eb; pop ecx; pop ecx; ret; 
0x5052d741  # and al, 0x10; push dword ptr [esp + 0xc]; call 0x2d4b0; pop ecx; pop ecx; ret; 
0x5052d755  # and al, 0x10; push dword ptr [esp + 0xc]; call 0x2d5a4; pop ecx; pop ecx; ret; 
0x50516c08  # and al, 0x10; push edx; push eax; call ecx; ret; 
0x5051a1dc  # and al, 0x14; call 0x18dfe; add esp, 0x10; pop esi; ret; 
0x5052492e  # and al, 0x14; call 0x2481a; add esp, 0x14; ret; 
0x50516952  # and al, 0x14; mov dword ptr [edi + 0xec], eax; pop esi; pop edi; ret; 
0x5052492a  # and al, 0x14; push dword ptr [esp + 0x14]; call 0x2481a; add esp, 0x14; ret; 
0x50524926  # and al, 0x14; push dword ptr [esp + 0x14]; push dword ptr [esp + 0x14]; call 0x2481a; add esp, 0x14; ret; 
0x50521c9a  # and al, 0x18; call 0x21bf3; add esp, 0x10; pop ebx; ret; 
0x5052f3a9  # and al, 0x18; call dword ptr [0x5054a060]; xor eax, eax; add esp, 0x14; ret 4; 
0x50542d3d  # and al, 0x33; fstp xword ptr [ebx]; ret; 
0x50544bf2  # and al, 0x3a; ret; 
0x50518ce2  # and al, 0x3b; ret 0x27e; 
0x5050af8e  # and al, 0x49; pop ebx; pop esi; pop edi; ret 8; 
0x5051cdf3  # and al, 0x56; call 0x1cc1e; pop ecx; pop ecx; pop ebp; ret; 
0x50531911  # and al, 0x5f; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x5051a6c2  # and al, 0x5f; pop ebx; pop esi; pop ebp; ret; 
0x50538bb8  # and al, 0x7c; sal byte ptr [ebx], cl; rol byte ptr [eax + 0x5f], 0x5e; ret; 
0x50512d60  # and al, 0x89; inc ebp; in al, 0x3b; ret; 
0x50508fba  # and al, 0x89; jle 0x8fe6; xor eax, eax; pop edi; pop esi; ret 4; 
0x50518cdf  # and al, 0x8b; push ecx; and al, 0x3b; ret 0x27e; 
0x5053605c  # and al, 0xa0; push esp; push eax; pop ebp; ret; 
0x50501152  # and al, 0xa0; push esp; push eax; ret; 
0x50537d56  # and al, 0xa3; mov eax, 0x5e50555f; ret; 
0x505313b7  # and al, 0xc; call 0x1c966; add esp, 0xc; ret; 
0x5051dc83  # and al, 0xc; call 0x1cfcc; pop esi; ret; 
0x5051dc7a  # and al, 0xc; call 0x1da6e; mov esi, dword ptr [esp + 0xc]; call 0x1cfcc; pop esi; ret; 
0x50521be8  # and al, 0xc; call 0x21b22; add esp, 0xc; ret; 
0x505232e1  # and al, 0xc; call 0x2307b; pop ecx; ret; 
0x5052478c  # and al, 0xc; call 0x242a8; pop ecx; pop ecx; ret; 
0x50522f39  # and al, 0xc; call 0x259c8; add esp, 0xc; ret; 
0x50525dec  # and al, 0xc; call 0x25c6e; add esp, 0xc; ret; 
0x5052a89e  # and al, 0xc; call 0x2a2dc; pop ecx; pop ecx; ret; 
0x5052a8e2  # and al, 0xc; call 0x2a44c; pop ecx; ret; 
0x5052baed  # and al, 0xc; call 0x2b41f; pop ecx; ret; 
0x5052bb14  # and al, 0xc; call 0x2b5d0; pop ecx; ret; 
0x5052bb27  # and al, 0xc; call 0x2b6b4; pop ecx; ret; 
0x5052d731  # and al, 0xc; call 0x2d3eb; pop ecx; pop ecx; ret; 
0x5052d745  # and al, 0xc; call 0x2d4b0; pop ecx; pop ecx; ret; 
0x5052d759  # and al, 0xc; call 0x2d5a4; pop ecx; pop ecx; ret; 
0x5052d91f  # and al, 0xc; call 0x2d81f; push dword ptr [esp + 0x10]; call 0x2d8dd; add esp, 0x10; ret; 
0x50509c81  # and al, 0xc; call 0x3824; ret 4; 
0x5053676c  # and al, 0xc; jne 0x36779; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x5050d4f1  # and al, 0xc; lea ecx, [esi + 0xd8]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; pop esi; ret 8; 
0x50516b1e  # and al, 0xc; mov dword ptr [eax + 0x11c], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a47  # and al, 0xc; mov dword ptr [esi], eax; pop esi; ret; 
0x5053173a  # and al, 0xc; mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0xc]; add esp, 0xc; ret; 
0x50536a18  # and al, 0xc; neg edx; neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x50516f3a  # and al, 0xc; pop ecx; call 0x16de3; pop ebx; ret; 
0x50516870  # and al, 0xc; pop esi; ret; 
0x50531795  # and al, 0xc; push dword ptr [eax + 0xc]; call 0x2f672; add esp, 0xc; ret; 
0x50521be4  # and al, 0xc; push dword ptr [esp + 0xc]; call 0x21b22; add esp, 0xc; ret; 
0x50525de8  # and al, 0xc; push dword ptr [esp + 0xc]; call 0x25c6e; add esp, 0xc; ret; 
0x50526701  # and al, 0xc; push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5051568d  # and al, 0xc; push esi; call 0x1557b; add esp, 0xc; pop esi; ret; 
0x50516a8f  # and al, 1; add byte ptr [eax], al; ret; 
0x5050ff36  # and al, 2; add cl, cl; ret 0x14; 
0x5051488d  # and al, 4; add byte ptr [ebp + 5], dh; neg eax; sbb eax, eax; ret; 
0x50526f90  # and al, 4; and dword ptr [eax + 0x84], 0; mov dword ptr [eax + 0x8c], 0x40; ret; 
0x50502af5  # and al, 4; call 0x1684; test eax, eax; je 0x2b06; mov eax, dword ptr [eax + 0xac]; ret 4; 
0x5050e59e  # and al, 4; call 0x1684; test eax, eax; jne 0xe5af; or eax, 0xffffffff; ret 8; 
0x50513e84  # and al, 4; call 0x16853; pop ecx; ret 4; 
0x50511362  # and al, 4; call 0x16b7a; pop ecx; ret 4; 
0x50546f8f  # and al, 4; call eax; ret 4; 
0x5051677f  # and al, 4; cmp dword ptr [eax + 0x10], 0; je 0x1678b; or eax, 0xffffffff; ret; 
0x5052daf7  # and al, 4; cmp dword ptr [eax + 0x40], 0; je 0x2db07; mov dword ptr [eax + 0x30], 1; ret; 
0x5052477d  # and al, 4; cmp dword ptr [eax + 4], 0; jne 0x24788; xor eax, eax; ret; 
0x50527832  # and al, 4; cmp dword ptr [esp + 8], eax; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x5051c915  # and al, 4; cmp ecx, eax; jbe 0x1c91e; xor eax, eax; ret; 
0x5051e869  # and al, 4; jbe 0x1e871; or eax, 0xffffffff; ret; 
0x50547559  # and al, 4; je 0x47566; test eax, eax; jne 0x47551; xor eax, eax; ret 8; 
0x5052dfdf  # and al, 4; jl 0x2dfb8; or eax, 0xffffffff; ret; 
0x5053143e  # and al, 4; mov byte ptr [edx + ecx], 3; inc dword ptr [eax]; ret; 
0x5051ce15  # and al, 4; mov byte ptr [edx], cl; inc dword ptr [eax + 0xc]; xor eax, eax; inc eax; ret; 
0x5051d879  # and al, 4; mov dword ptr [eax + 0x28], 1; ret; 
0x5051d182  # and al, 4; mov dword ptr [eax + 4], 1; ret; 
0x5052421c  # and al, 4; mov dword ptr [eax + 4], ecx; ret; 
0x5051f266  # and al, 4; mov dword ptr [ecx + 0x10], eax; ret; 
0x505317ae  # and al, 4; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5051d6fe  # and al, 4; mov dword ptr [ecx + 8], eax; ret; 
0x50515665  # and al, 4; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x5051f26e  # and al, 4; mov eax, dword ptr [eax + 0x10]; ret; 
0x505317bf  # and al, 4; mov eax, dword ptr [eax + 0x14]; ret; 
0x505317b6  # and al, 4; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5052f842  # and al, 4; mov eax, dword ptr [eax + 0x20]; ret; 
0x5051d783  # and al, 4; mov eax, dword ptr [eax + 0x2c]; ret; 
0x50516774  # and al, 4; mov eax, dword ptr [eax + 0xc8]; ret; 
0x5051f27d  # and al, 4; mov eax, dword ptr [eax + 4]; ret; 
0x5051c897  # and al, 4; mov eax, dword ptr [eax + 8]; ret; 
0x5051f276  # and al, 4; mov eax, dword ptr [eax]; ret; 
0x5053174c  # and al, 4; mov eax, dword ptr [ecx + 0x18]; test edx, edx; je 0x31758; mov dword ptr [ecx + 0x18], edx; ret; 
0x5052da43  # and al, 4; mov eax, dword ptr [ecx + 0xc]; test edx, edx; je 0x2da4f; mov dword ptr [ecx + 0xc], edx; ret; 
0x505232dd  # and al, 4; mov ecx, dword ptr [esp + 0xc]; call 0x2307b; pop ecx; ret; 
0x5051e1a3  # and al, 4; mov edx, dword ptr [esp + 8]; ret; 
0x50536772  # and al, 4; mul ecx; ret 0x10; 
0x50506514  # and al, 4; push 0; push eax; call dword ptr [0x5054a084]; ret 4; 
0x50547c83  # and al, 4; push 0x5055e108; call dword ptr [0x5054a18c]; ret 4; 
0x505064f4  # and al, 4; push 8; push eax; call dword ptr [0x5054a07c]; ret 4; 
0x5052d3d1  # and al, 4; push eax; call dword ptr [eax + 0x3c0]; pop ecx; pop ecx; ret; 
0x5052d3df  # and al, 4; push eax; call dword ptr [eax + 0x3c4]; pop ecx; pop ecx; ret; 
0x50532e47  # and al, 4; ret; 
0x50509775  # and al, 4; shr eax, 8; and edx, 0xff; xor eax, dword ptr [edx*4 + 0x50555868]; mov dword ptr [ecx], eax; ret; 
0x5054701e  # and al, 4; shr eax, 8; movzx eax, al; shl ecx, 8; or eax, ecx; ret 4; 
0x50533be8  # and al, 4; sub eax, ecx; ret; 
0x5051679d  # and al, 4; test eax, eax; je 0x167aa; mov eax, dword ptr [eax + 0x1ac]; ret; 
0x5051682d  # and al, 4; test eax, eax; je 0x1683a; mov eax, dword ptr [eax + 0x90]; ret; 
0x50516855  # and al, 4; test eax, eax; je 0x16862; mov eax, dword ptr [eax + 0xe0]; ret; 
0x505168af  # and al, 4; test eax, eax; je 0x168bc; mov eax, dword ptr [eax + 0xe4]; ret; 
0x505169e3  # and al, 4; test eax, eax; je 0x169f0; mov eax, dword ptr [eax + 0xd4]; ret; 
0x505169f6  # and al, 4; test eax, eax; je 0x16a06; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0xd8], ecx; ret; 
0x50516ab9  # and al, 4; test eax, eax; je 0x16ac9; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b43  # and al, 4; test eax, eax; je 0x16b53; mov ecx, dword ptr [esp + 8]; add dword ptr [eax + 0x124], ecx; ret; 
0x50516b69  # and al, 4; test eax, eax; je 0x16b79; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x128], ecx; ret; 
0x5051f32e  # and al, 4; test eax, eax; je 0x1f338; mov eax, dword ptr [eax + 8]; ret; 
0x50516908  # and al, 4; test eax, eax; jne 0x1690f; ret; 
0x5051695f  # and al, 4; test eax, eax; jne 0x16969; or eax, 0xffffffff; ret; 
0x5051699b  # and al, 4; test eax, eax; jne 0x169a2; ret; 
0x50516a1b  # and al, 4; test eax, eax; jne 0x16a22; ret; 
0x50516a4f  # and al, 4; test eax, eax; jne 0x16a56; ret; 
0x50516a96  # and al, 4; test eax, eax; jne 0x16aa0; or eax, 0xffffffff; ret; 
0x50516aa9  # and al, 4; test eax, eax; jne 0x16ab0; ret; 
0x50516ae2  # and al, 4; test eax, eax; jne 0x16ae9; ret; 
0x50516b33  # and al, 4; test eax, eax; jne 0x16b3a; ret; 
0x50516b56  # and al, 4; test eax, eax; jne 0x16b60; or eax, 0xffffffff; ret; 
0x50516c76  # and al, 4; test eax, eax; jne 0x16c7d; ret; 
0x50524798  # and al, 4; test eax, eax; jne 0x2479f; ret; 
0x505266f2  # and al, 4; test eax, eax; jne 0x266f9; ret; 
0x50516767  # and al, 4; xor eax, eax; cmp dword ptr [ecx + 0x10], eax; setne al; ret; 
0x5051ebda  # and al, 4; xor eax, eax; cmp dword ptr [ecx + 4], 2; setne al; lea eax, [eax + eax + 1]; ret; 
0x5051c888  # and al, 4; xor ecx, ecx; mov dword ptr [eax + 4], ecx; mov dword ptr [eax], ecx; mov dword ptr [eax + 8], ecx; ret; 
0x50516b4b  # and al, 8; add dword ptr [eax + 0x124], ecx; ret; 
0x505152c2  # and al, 8; call 0x1520c; pop ecx; pop esi; ret; 
0x5051567f  # and al, 8; call 0x1562b; pop ecx; pop esi; ret; 
0x50511373  # and al, 8; call 0x16b8f; pop ecx; pop ecx; ret 8; 
0x50502adf  # and al, 8; call 0x16e3; test eax, eax; je 0x2af0; mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x5051cb92  # and al, 8; call 0x1ca1a; pop ecx; pop ecx; ret; 
0x5051cd87  # and al, 8; call 0x1cccb; pop ecx; pop esi; ret; 
0x5052ab11  # and al, 8; call 0x2a12b; pop edi; ret; 
0x5052a8cf  # and al, 8; call 0x2a314; pop edi; ret; 
0x5052a8f6  # and al, 8; call 0x2a566; pop edi; ret; 
0x5052bad4  # and al, 8; call 0x2b351; pop ebx; ret; 
0x5052bb01  # and al, 8; call 0x2b4ff; pop ebx; ret; 
0x505313ae  # and al, 8; call 0x312aa; push dword ptr [esp + 0xc]; call 0x1c966; add esp, 0xc; ret; 
0x505148a0  # and al, 8; call 0x33af0; pop ecx; pop ecx; ret; 
0x50548540  # and al, 8; call 0x48394; ret 4; 
0x5052f741  # and al, 8; cmp dword ptr [esi + 0x1c], 0; je 0x2f752; mov dword ptr [esi + 0x10], 1; pop esi; ret; 
0x50511330  # and al, 8; jb 0x11314; xor eax, eax; pop esi; ret 4; 
0x50527836  # and al, 8; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x5050d560  # and al, 8; lea ecx, [eax + 0xab4]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x5053438f  # and al, 8; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x50516ac1  # and al, 8; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b71  # and al, 8; mov dword ptr [eax + 0x128], ecx; ret; 
0x50516bcf  # and al, 8; mov dword ptr [eax + 0x134], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x5050c7cf  # and al, 8; mov dword ptr [eax + 0x32d8], ecx; xor eax, eax; ret 8; 
0x505169fe  # and al, 8; mov dword ptr [eax + 0xd8], ecx; ret; 
0x5051c8ba  # and al, 8; mov dword ptr [ecx], eax; ret; 
0x50521f43  # and al, 8; mov eax, dword ptr [esi]; test eax, eax; jne 0x21f4d; pop esi; ret; 
0x50531438  # and al, 8; mov ecx, dword ptr [eax]; mov edx, dword ptr [esp + 4]; mov byte ptr [edx + ecx], 3; inc dword ptr [eax]; ret; 
0x5051506a  # and al, 8; mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5051c911  # and al, 8; mov ecx, dword ptr [esp + 4]; cmp ecx, eax; jbe 0x1c91e; xor eax, eax; ret; 
0x5051f262  # and al, 8; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x10], eax; ret; 
0x505317aa  # and al, 8; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5051d6fa  # and al, 8; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 8], eax; ret; 
0x50543573  # and al, 8; mov edx, dword ptr [esp + 0x10]; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x5053678a  # and al, 8; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x50532e41  # and al, 8; pop edi; ret; 
0x50524e54  # and al, 8; push 0; call 0x24e19; add esp, 0xc; ret; 
0x50503734  # and al, 8; push 0; call 0x33e8; ret 8; 
0x50503746  # and al, 8; push 0; call 0x35ee; ret 8; 
0x50506560  # and al, 8; push 0; push eax; call dword ptr [0x5054a084]; ret 8; 
0x5050653c  # and al, 8; push 8; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x505271a8  # and al, 8; push dword ptr [eax + 0x44]; call 0x1a725; pop ecx; pop ecx; ret; 
0x50524e98  # and al, 8; push dword ptr [esi]; call 0x24e19; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x5052a89a  # and al, 8; push dword ptr [esp + 0xc]; call 0x2a2dc; pop ecx; pop ecx; ret; 
0x5051136f  # and al, 8; push dword ptr [esp + 8]; call 0x16b8f; pop ecx; pop ecx; ret 8; 
0x50524e50  # and al, 8; push dword ptr [esp + 8]; push 0; call 0x24e19; add esp, 0xc; ret; 
0x50503730  # and al, 8; push dword ptr [esp + 8]; push 0; call 0x33e8; ret 8; 
0x50503742  # and al, 8; push dword ptr [esp + 8]; push 0; call 0x35ee; ret 8; 
0x50526655  # and al, 8; push eax; call 0x1a725; pop ecx; pop ecx; ret; 
0x505162c7  # and al, 8; push eax; call 0x1ca8c; add esp, 0xc; ret; 
0x5052bacf  # and al, 8; push ebx; mov ebx, dword ptr [esp + 8]; call 0x2b351; pop ebx; ret; 
0x5052bafc  # and al, 8; push ebx; mov ebx, dword ptr [esp + 8]; call 0x2b4ff; pop ebx; ret; 
0x5052a8ca  # and al, 8; push edi; mov edi, dword ptr [esp + 8]; call 0x2a314; pop edi; ret; 
0x5052a8f1  # and al, 8; push edi; mov edi, dword ptr [esp + 8]; call 0x2a566; pop edi; ret; 
0x5051e1a7  # and al, 8; ret; 
0x5051ffef  # and al, 8; test ebx, ebx; jne 0x1fffa; or eax, 0xffffffff; pop ebx; ret; 
0x50516868  # and al, 8; test esi, esi; jne 0x16874; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x505168c2  # and al, 8; test esi, esi; jne 0x168ce; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x5051cec0  # and al, byte ptr [eax]; xor eax, eax; pop esi; ret; 
0x50534ad9  # and al, byte ptr [ebx]; ret 0xca03; 
0x50539ff0  # and al, ch; ret; 
0x5052a6aa  # and bh, bh; call ptr [ecx + 0x59]; ret; 
0x5050f155  # and bh, bh; inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0x14; 
0x50545b1e  # and bh, dh; ret; 
0x50541860  # and bl, byte ptr [ecx - 0x77]; or byte ptr [ebx + 0x33b5ebf1], cl; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50538e3f  # and bl, byte ptr [ecx - 0x77]; or byte ptr [ebx + 0x33c1ebf1], cl; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50538a14  # and byte ptr [eax + 0x55], ah; push eax; ret; 
0x50535fed  # and byte ptr [eax + 0x5d5e5054], ah; ret; 
0x50519960  # and byte ptr [eax + 0x75], cl; sub al, 0x8b; inc edi; xor byte ptr [ebx], bh; ret; 
0x50527494  # and byte ptr [eax - 0x74bdfb82], al; ret; 
0x5053601c  # and byte ptr [eax - 1], dl; adc eax, 0x5054a020; pop ebp; ret; 
0x50536058  # and byte ptr [eax - 1], dl; adc eax, 0x5054a024; pop ebp; ret; 
0x505425d3  # and byte ptr [eax], 0xfd; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5053b2bb  # and byte ptr [eax], 0xfe; push dword ptr [edi]; call 0x42052; pop ecx; ret; 
0x50545ecc  # and byte ptr [eax], al; add byte ptr [ebx + ebx + 0x3d], dh; add byte ptr [eax], al; add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x50538272  # and byte ptr [eax], al; inc dword ptr [ecx]; leave; ret; 
0x50541eac  # and byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x50524e6b  # and byte ptr [eax], al; pop ecx; pop ecx; mov dword ptr [eax + 4], 0x1000; ret; 
0x50524216  # and byte ptr [eax], al; pop ecx; pop ecx; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x50515c4f  # and byte ptr [ebp + 3], dh; mov byte ptr [eax], 0x5f; inc eax; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x50526dde  # and byte ptr [ebx + 0x45891cc4], al; or byte ptr [esi + 0x3b], dl; ret; 
0x5050912d  # and byte ptr [ebx + 0x74ff107e], al; sbb dh, dh; ret; 
0x50536997  # and byte ptr [ebx + 6], dh; shld edx, eax, cl; shl eax, cl; ret; 
0x50542f27  # and byte ptr [ebx + 6], dh; shrd eax, edx, cl; shr edx, cl; ret; 
0x50545c5b  # and byte ptr [ebx + eax - 0x7d], dh; retf 0xf601; ret; 
0x50501dc2  # and byte ptr [ebx], bh; ret; 
0x5054281b  # and byte ptr [ebx], dh; sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x505033da  # and byte ptr [ecx + 0xaa486], cl; add byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0x10; 
0x50516afd  # and byte ptr [ecx], al; add byte ptr [eax], al; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x50516b2c  # and byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x5051d37e  # and byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x5051d843  # and byte ptr [edi], cl; mov word ptr [edi + edi*8 - 1], ss; call ptr [edi + 0x5b]; pop esi; ret; 
0x5051d91e  # and byte ptr [edi], cl; pushfd; ret 0xc28b; 
0x50516807  # and byte ptr [edx + 0x38], ch; pop eax; ret; 
0x505484f4  # and byte ptr [edx + 0xd], dh; push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x5054909c  # and byte ptr [edx - 0x75], bl; inc ebp; sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x5051027d  # and byte ptr [edx], al; add cl, cl; ret 0x14; 
0x505162b9  # and byte ptr [esi + 0x5b], bl; pop ebp; ret; 
0x50535cf2  # and byte ptr [esi - 0x37], bl; ret; 
0x50535fe9  # and byte ptr [esi - 1], dl; adc eax, 0x5054a020; pop esi; pop ebp; ret; 
0x505425d4  # and ch, bh; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5053ce17  # and ch, byte ptr [edx]; ret 0xc0fe; 
0x505369a4  # and cl, 0x1f; shl edx, cl; ret; 
0x50542f34  # and cl, 0x1f; shr eax, cl; ret; 
0x5051c3e4  # and cl, byte ptr [ebx]; add byte ptr [eax], al; pop edi; pop esi; pop ebp; ret; 
0x5052d59a  # and cl, byte ptr [esi]; add byte ptr [ebx - 0x36a0f33c], al; ret; 
0x5053b2bc  # and dh, bh; push dword ptr [edi]; call 0x42052; pop ecx; ret; 
0x5051e8bd  # and dword ptr [0x5055cf2c], 0; pop ecx; pop esi; ret; 
0x5053e338  # and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x505394e0  # and dword ptr [eax + 0x70], 0xfffffffd; mov eax, esi; pop ebx; leave; ret; 
0x50526f92  # and dword ptr [eax + 0x84], 0; mov dword ptr [eax + 0x8c], 0x40; ret; 
0x5050d523  # and dword ptr [eax + 0xd8], ecx; xor eax, eax; inc eax; ret 0xc; 
0x50509e83  # and dword ptr [eax + 0xdc], 0xfffffffe; xor eax, eax; ret 8; 
0x50538271  # and dword ptr [eax], 0; inc dword ptr [ecx]; leave; ret; 
0x50541eab  # and dword ptr [eax], 0; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x50524e6a  # and dword ptr [eax], 0; pop ecx; pop ecx; mov dword ptr [eax + 4], 0x1000; ret; 
0x50524215  # and dword ptr [eax], 0; pop ecx; pop ecx; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x50516ade  # and dword ptr [eax], eax; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16ae9; ret; 
0x50525b16  # and dword ptr [eax], edx; pop esi; ret; 
0x50544017  # and dword ptr [ebp + 0x50], edx; call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x505462f3  # and dword ptr [ebp + 8], 0xffffffbf; ldmxcsr dword ptr [ebp + 8]; call 0x38721; ret; 
0x5053985b  # and dword ptr [ebp - 0x20], 0; mov eax, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x50524fef  # and dword ptr [ebx - 0x397cefbb], ecx; or byte ptr [ebx], al; ret; 
0x50503cd6  # and dword ptr [ebx], edi; ret; 
0x50532b6c  # and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50533115  # and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50541c73  # and dword ptr [ecx + 0x70], 0xfffffffd; pop edi; pop ebx; leave; ret; 
0x5053391d  # and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x50516add  # and dword ptr [ecx], 0; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16ae9; ret; 
0x505366a2  # and dword ptr [edi - 0x1d250000], eax; pop ebp; ret; 
0x5051cebf  # and dword ptr [edx], 0; xor eax, eax; pop esi; ret; 
0x505101d0  # and dword ptr [edx], eax; add cl, cl; ret 0x14; 
0x50526760  # and dword ptr [esi + 0x12c], 0; pop esi; pop edi; ret; 
0x5051f2bb  # and dword ptr [esi + 0x2c], 0; pop esi; pop ebp; ret; 
0x505064d6  # and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x5051ca82  # and dword ptr [esi + 4], 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x505279c8  # and dword ptr [esi + 4], 0; and dword ptr [esi], 0; add esp, 0xc; mov dword ptr [esi + 0x10], eax; ret; 
0x5052792b  # and dword ptr [esi + 4], 0; push esi; call 0x2793a; add esp, 0xc; pop esi; ret; 
0x50527945  # and dword ptr [esi + 4], eax; pop esi; ret; 
0x5051ca86  # and dword ptr [esi + 8], 0; pop esi; ret; 
0x505279cc  # and dword ptr [esi], 0; add esp, 0xc; mov dword ptr [esi + 0x10], eax; ret; 
0x50515c9e  # and dword ptr [esi], 0; add esp, 0xc; ret; 
0x50506f67  # and dword ptr [esi], 0; pop esi; ret 4; 
0x5054109d  # and dword ptr [esi], 0; xor eax, eax; pop esi; ret; 
0x50543bc0  # and dword ptr [esi], eax; mov eax, dword ptr [ebp - 4]; pop esi; pop edi; leave; ret; 
0x50532b8d  # and eax, 0x103; pop ebp; ret; 
0x50532d97  # and eax, 0x107; pop ebp; ret; 
0x5051c874  # and eax, 0x3f; mov al, byte ptr [eax + 0x5054b5c0]; mov byte ptr [ecx + 3], al; ret; 
0x50542925  # and eax, 0x40; pop esi; pop ebp; ret; 
0x50516b83  # and eax, 0x5054a0e4; mov eax, dword ptr [eax + 0xdc]; ret; 
0x505283a6  # and eax, 0x5054bc28; ret; 
0x5051e8be  # and eax, 0x5055cf2c; add byte ptr [ecx + 0x5e], bl; ret; 
0x5051159f  # and eax, 0x59590002; ret; 
0x50532c92  # and eax, 0x80; pop ebp; ret; 
0x5054268c  # and eax, 0xc000; add eax, 0x4000; pop ebp; ret; 
0x50535fa2  # and eax, 0xff000063; xor eax, 0x5055e274; call 0x36451; pop ecx; ret; 
0x50525aca  # and eax, 0xff; ret; 
0x5053c3d9  # and eax, 0xffffffdf; sub eax, 7; pop ebp; ret; 
0x5051e1e9  # and eax, 0xfffffffe; inc eax; pop ebp; ret; 
0x505475a4  # and eax, 1; ret; 
0x50532c0e  # and eax, 4; pop ebp; ret; 
0x5053331b  # and eax, 7; or eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50532d13  # and eax, 8; pop ebp; ret; 
0x505235f8  # and eax, dword ptr [eax]; add byte ptr [ecx + 0x59], bl; leave; ret; 
0x5053a18e  # and eax, ecx; add eax, 8; pop ebp; ret; 
0x50533add  # and eax, esi; pop esi; pop ebp; ret; 
0x5051f740  # and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x50506850  # and edi, dword ptr [ebx - 0x3a7cfffe]; js 0x6821; ret; 
0x5050977a  # and edx, 0xff; xor eax, dword ptr [edx*4 + 0x50555868]; mov dword ptr [ecx], eax; ret; 
0x5051fccc  # and edx, 7; add eax, edx; sar eax, 3; add eax, 4; ret; 
0x50525a85  # and edx, 7; add eax, edx; sar eax, 3; pop ecx; add eax, 4; ret; 
0x5050ade5  # arpl di, di; inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0x14; 
0x50535fa3  # arpl word ptr [eax], ax; add bh, bh; xor eax, 0x5055e274; call 0x36451; pop ecx; ret; 
0x505165d6  # arpl word ptr [eax], ax; add byte ptr [ebx + 0x1a887], cl; add byte ptr [ecx + 0x3b], bl; ret; 
0x50516624  # arpl word ptr [eax], ax; add byte ptr [ebx - 0x3b7cabb9], cl; sbb byte ptr [ebx], bh; ret; 
0x50521b10  # arpl word ptr [eax], cx; add dword ptr [eax], eax; leave; ret; 
0x5051a2c6  # arpl word ptr [ecx + 0x50], dx; pop edi; ret; 
0x50509dab  # arpl word ptr [edi + 6], si; mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e4c  # arpl word ptr [edi + 6], si; mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x5052528b  # bnd jne 0x25278; pop esi; ret; 
0x5050d044  # bound eax, qword ptr [ecx - 1]; push dword ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 0xc; 
0x5050a511  # bound edi, qword ptr [esi + 2]; add cl, cl; ret 8; 
0x50501021  # call 0x1005; xor eax, eax; inc eax; ret 0xc; 
0x50525ac8  # call 0x101802b; add byte ptr [eax], al; ret; 
0x50501367  # call 0x1136; or eax, 0xffffffff; pop ebp; ret; 
0x50501406  # call 0x1136; or eax, 0xffffffff; pop esi; pop ebx; pop ebp; ret; 
0x5050166e  # call 0x1136; push 0x80042736; call 0x11aa; or eax, 0xffffffff; pop esi; ret 8; 
0x50501362  # call 0x11aa; call 0x1136; or eax, 0xffffffff; pop ebp; ret; 
0x5050d4c9  # call 0x11aa; mov eax, dword ptr [esi + 0xd8]; pop esi; ret 4; 
0x5050c819  # call 0x11aa; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50501ab6  # call 0x11aa; or eax, 0xffffffff; pop ebx; pop esi; pop ebp; ret 0xc; 
0x5050a58a  # call 0x11aa; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret 0xc; 
0x50502f86  # call 0x11aa; or eax, 0xffffffff; pop edi; pop esi; ret 8; 
0x5050a672  # call 0x11aa; or eax, 0xffffffff; pop esi; pop ebp; ret 0xc; 
0x50501678  # call 0x11aa; or eax, 0xffffffff; pop esi; ret 8; 
0x50501a14  # call 0x11aa; or eax, 0xffffffff; ret 8; 
0x5050161f  # call 0x11aa; pop edi; pop esi; leave; ret 4; 
0x505029a1  # call 0x11aa; xor eax, eax; pop edi; pop esi; pop ebp; ret 0xc; 
0x505018a3  # call 0x11aa; xor eax, eax; pop edi; pop esi; ret 8; 
0x50510e91  # call 0x11aa; xor eax, eax; pop esi; pop edi; leave; ret 0x1c; 
0x5050381c  # call 0x11aa; xor eax, eax; ret; 
0x5051d051  # call 0x13d27; add esp, 0xc; test eax, eax; jne 0x1d05f; leave; ret; 
0x50514386  # call 0x13d27; push esi; call 0x16412; add esp, 0x18; pop ecx; ret; 
0x50514824  # call 0x1436a; xor eax, eax; inc eax; pop esi; pop ebp; ret 4; 
0x50518e8d  # call 0x14981; pop ebx; pop esi; ret; 
0x50515622  # call 0x14981; pop edi; pop esi; pop ebx; ret; 
0x50516e1d  # call 0x14981; pop esi; leave; ret; 
0x50516e90  # call 0x14981; pop esi; pop ebx; leave; ret; 
0x50515c84  # call 0x14981; pop esi; ret; 
0x505151f4  # call 0x15192; pop ecx; pop edi; leave; ret; 
0x505151c2  # call 0x15192; pop ecx; pop edi; ret; 
0x505152bb  # call 0x151fd; push dword ptr [esp + 8]; call 0x1520c; pop ecx; pop esi; ret; 
0x505152c4  # call 0x1520c; pop ecx; pop esi; ret; 
0x50503e36  # call 0x1521; xor eax, eax; pop edi; pop esi; ret 4; 
0x50515690  # call 0x1557b; add esp, 0xc; pop esi; ret; 
0x50515681  # call 0x1562b; pop ecx; pop esi; ret; 
0x505197d9  # call 0x156c7; add dword ptr [esi + 0x24], eax; call 0x19729; pop esi; leave; ret; 
0x50516158  # call 0x15729; pop edi; pop esi; leave; ret; 
0x50515e6a  # call 0x15d2a; pop edi; pop esi; ret; 
0x5051605c  # call 0x15e49; pop edi; pop esi; leave; ret; 
0x50517117  # call 0x15e72; pop ecx; pop edi; pop esi; ret; 
0x5051438c  # call 0x16412; add esp, 0x18; pop ecx; ret; 
0x50513c77  # call 0x16412; pop ecx; ret; 
0x50502af7  # call 0x1684; test eax, eax; je 0x2b06; mov eax, dword ptr [eax + 0xac]; ret 4; 
0x5050e5a0  # call 0x1684; test eax, eax; jne 0xe5af; or eax, 0xffffffff; ret 8; 
0x50513e86  # call 0x16853; pop ecx; ret 4; 
0x50514018  # call 0x169f4; xor eax, eax; inc eax; pop ecx; pop ecx; ret 4; 
0x5051d1c3  # call 0x16b67; add esp, 0x10; ret; 
0x50511364  # call 0x16b7a; pop ecx; ret 4; 
0x50511375  # call 0x16b8f; pop ecx; pop ecx; ret 8; 
0x5051d1b8  # call 0x16b8f; push -1; push dword ptr [esp + 0x10]; call 0x16b67; add esp, 0x10; ret; 
0x50513fec  # call 0x16be2; xor eax, eax; add esp, 0x1c; inc eax; pop ebp; ret 0x10; 
0x50516f3d  # call 0x16de3; pop ebx; ret; 
0x50516f52  # call 0x16e25; pop ecx; pop ecx; ret; 
0x50502ae1  # call 0x16e3; test eax, eax; je 0x2af0; mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x50516f4c  # call 0x16e99; push eax; call 0x16e25; pop ecx; pop ecx; ret; 
0x5051706a  # call 0x16f5a; leave; ret; 
0x5051a1de  # call 0x18dfe; add esp, 0x10; pop esi; ret; 
0x50518ead  # call 0x18dfe; pop ecx; pop ecx; pop esi; ret; 
0x50519792  # call 0x18e95; add esp, 0x10; mov dword ptr [esi + 0x2c], edi; pop ebx; leave; ret; 
0x50519edb  # call 0x18e95; pop ecx; pop ecx; leave; ret; 
0x5051967f  # call 0x18eb6; add esp, 0x18; pop esi; ret; 
0x505197e1  # call 0x19729; pop esi; leave; ret; 
0x505198a2  # call 0x19758; pop edi; pop esi; pop ebx; leave; ret; 
0x5051a765  # call 0x19758; pop edi; pop esi; ret; 
0x50526658  # call 0x1a725; pop ecx; pop ecx; ret; 
0x5052f692  # call 0x1c895; add esp, 0x10; pop edi; pop esi; ret; 
0x5052da8e  # call 0x1c895; add esp, 0x10; pop esi; pop ebp; ret; 
0x50516705  # call 0x1c895; pop ecx; add eax, esi; pop esi; ret; 
0x5051ef39  # call 0x1c895; pop ecx; pop edi; pop esi; ret; 
0x50524e65  # call 0x1c908; and dword ptr [eax], 0; pop ecx; pop ecx; mov dword ptr [eax + 4], 0x1000; ret; 
0x5051e2fa  # call 0x1c908; pop ecx; pop ecx; mov dword ptr [eax], esi; pop esi; ret; 
0x50521b1a  # call 0x1c908; pop ecx; pop ecx; ret; 
0x5051cbae  # call 0x1c930; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x50526758  # call 0x1c966; add esp, 0x10; and dword ptr [esi + 0x12c], 0; pop esi; pop edi; ret; 
0x50527233  # call 0x1c966; add esp, 0x10; mov eax, edi; pop edi; pop esi; ret; 
0x50518f5b  # call 0x1c966; add esp, 0x10; pop edi; pop ebx; leave; ret; 
0x50515f50  # call 0x1c966; add esp, 0x10; pop edi; pop esi; pop ebx; ret; 
0x50525196  # call 0x1c966; add esp, 0x10; pop esi; ret; 
0x505156bb  # call 0x1c966; add esp, 0x14; pop edi; pop ebx; leave; ret; 
0x50521f36  # call 0x1c966; add esp, 0x14; pop esi; ret; 
0x50522938  # call 0x1c966; add esp, 0x18; xor eax, eax; pop esi; ret; 
0x505152f8  # call 0x1c966; add esp, 0x1c; pop edi; pop esi; ret; 
0x50527a75  # call 0x1c966; add esp, 0x1c; pop esi; ret; 
0x50523a53  # call 0x1c966; add esp, 0x1c; xor eax, eax; pop esi; ret; 
0x5052f15f  # call 0x1c966; add esp, 0xc; leave; ret; 
0x5052f734  # call 0x1c966; add esp, 0xc; pop edi; ret; 
0x5051d6ee  # call 0x1c966; add esp, 0xc; pop esi; ret; 
0x505313b9  # call 0x1c966; add esp, 0xc; ret; 
0x5051d695  # call 0x1c966; pop ecx; pop ecx; pop esi; pop ebx; ret; 
0x50524263  # call 0x1c966; pop ecx; pop ecx; pop esi; ret; 
0x5051498a  # call 0x1c966; pop ecx; pop ecx; ret; 
0x50531782  # call 0x1c966; pop ecx; pop edi; pop esi; ret; 
0x50516004  # call 0x1c966; pop ecx; pop esi; ret; 
0x5051cfd3  # call 0x1c966; pop ecx; push esi; call 0x1c966; pop ecx; ret; 
0x5051cfda  # call 0x1c966; pop ecx; ret; 
0x50521f06  # call 0x1c966; pop ecx; xor eax, eax; pop edi; leave; ret; 
0x5051d6e8  # call 0x1c966; push esi; call 0x1c966; add esp, 0xc; pop esi; ret; 
0x50514984  # call 0x1c966; push esi; call 0x1c966; pop ecx; pop ecx; ret; 
0x505168f8  # call 0x1c973; pop ecx; mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x5052bb3b  # call 0x1c973; pop ecx; pop ecx; ret; 
0x5051cb94  # call 0x1ca1a; pop ecx; pop ecx; ret; 
0x5051638a  # call 0x1ca8c; add esp, 0xc; pop ebx; leave; ret; 
0x505162ca  # call 0x1ca8c; add esp, 0xc; ret; 
0x5051cc48  # call 0x1cbb9; pop ecx; pop edi; leave; ret; 
0x5051cbeb  # call 0x1cbb9; pop ecx; pop edi; ret; 
0x5051cc12  # call 0x1cbde; add esp, 0x10; mov eax, esi; pop esi; ret; 
0x5051ccbe  # call 0x1cc1e; mov eax, dword ptr [esi + 4]; pop ecx; mov dword ptr [esi + 0xc], eax; ret; 
0x5051cdf5  # call 0x1cc1e; pop ecx; pop ecx; pop ebp; ret; 
0x5051cd80  # call 0x1ccbb; push dword ptr [esp + 8]; call 0x1cccb; pop ecx; pop esi; ret; 
0x5051cd89  # call 0x1cccb; pop ecx; pop esi; ret; 
0x5051d038  # call 0x1cfcc; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5051dc85  # call 0x1cfcc; pop esi; ret; 
0x5051da63  # call 0x1cfcc; xor eax, eax; pop edi; pop esi; leave; ret; 
0x5051d297  # call 0x1cfe1; add esp, 0x18; mov eax, edi; pop edi; pop esi; ret; 
0x5051d31f  # call 0x1cfe1; add esp, 0x18; pop edi; mov eax, esi; pop esi; ret; 
0x5051d3ba  # call 0x1cfe1; add esp, 0x1c; pop edi; mov eax, esi; pop esi; ret; 
0x5051d2e4  # call 0x1cfe1; add esp, 0x20; mov eax, edi; pop edi; pop esi; ret; 
0x5051d9fa  # call 0x1d1b0; pop ecx; pop ecx; xor eax, eax; leave; ret; 
0x5051d903  # call 0x1d704; add esp, 0x10; mov dword ptr [eax + 0x24], 1; ret; 
0x5051d86b  # call 0x1d789; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x5051dc7c  # call 0x1da6e; mov esi, dword ptr [esp + 0xc]; call 0x1cfcc; pop esi; ret; 
0x5051e1d3  # call 0x1e1aa; add esp, 0x10; ret; 
0x5052df85  # call 0x1e8c7; add esp, 0xc; pop edi; pop esi; pop ebp; ret; 
0x5051ebce  # call 0x1eb23; pop ecx; ret; 
0x5052da61  # call 0x1ec1a; push esi; call 0x1c966; add esp, 0xc; pop esi; ret; 
0x5051ef70  # call 0x1ee1f; pop ecx; mov eax, dword ptr [esi + 0x38]; pop edi; pop esi; ret; 
0x50516848  # call 0x1f32c; pop ecx; ret; 
0x5052dfa3  # call 0x1f473; add esp, 0x14; pop ebp; ret; 
0x5051fb17  # call 0x1fa91; pop ecx; pop esi; pop ebp; ret; 
0x5051ffe0  # call 0x1fdea; add esp, 0x18; pop edi; pop esi; leave; ret; 
0x5052014e  # call 0x1ffec; push esi; call 0x1c966; add esp, 0xc; pop esi; ret; 
0x50521bea  # call 0x21b22; add esp, 0xc; ret; 
0x50521c9c  # call 0x21bf3; add esp, 0x10; pop ebx; ret; 
0x50521d0e  # call 0x21ca6; pop ecx; pop ecx; pop edi; pop esi; ret; 
0x50522be5  # call 0x21f11; add esp, 0x10; mov eax, edi; pop edi; pop esi; ret; 
0x505232e3  # call 0x2307b; pop ecx; ret; 
0x505236af  # call 0x2332a; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x50523d86  # call 0x23687; add esp, 0x10; mov eax, edi; pop edi; pop esi; ret; 
0x5051e87b  # call 0x2420c; pop ecx; mov dword ptr [0x5055cf2c], eax; ret; 
0x50524246  # call 0x24222; push esi; call 0x1c966; add esp, 0x14; pop esi; ret; 
0x5052478e  # call 0x242a8; pop ecx; pop ecx; ret; 
0x50516758  # call 0x2477b; add esp, 0x18; pop edi; mov eax, esi; pop esi; ret; 
0x50524930  # call 0x2481a; add esp, 0x14; ret; 
0x50524dfc  # call 0x2481a; add esp, 0x14; test eax, eax; jne 0x24e0a; leave; ret; 
0x50524e10  # call 0x24939; pop ecx; pop ecx; leave; ret; 
0x50524ddd  # call 0x24939; pop ecx; pop ecx; pop esi; ret; 
0x50527905  # call 0x24dea; pop ecx; pop ecx; ret; 
0x5052f72e  # call 0x24dea; push esi; call 0x1c966; add esp, 0xc; pop edi; ret; 
0x50524e9c  # call 0x24e19; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x50524e58  # call 0x24e19; add esp, 0xc; ret; 
0x50521f30  # call 0x2517e; push esi; call 0x1c966; add esp, 0x14; pop esi; ret; 
0x50527a6f  # call 0x2517e; push esi; call 0x1c966; add esp, 0x1c; pop esi; ret; 
0x50525e50  # call 0x2571a; add esp, 0xc; pop edi; mov eax, esi; pop esi; ret; 
0x50515821  # call 0x25932; pop ecx; pop ecx; leave; ret; 
0x50522f3b  # call 0x259c8; add esp, 0xc; ret; 
0x50525fff  # call 0x25ad0; add esp, 0xc; mov eax, esi; pop esi; ret; 
0x50525dee  # call 0x25c6e; add esp, 0xc; ret; 
0x505279c3  # call 0x25df7; and dword ptr [esi + 4], 0; and dword ptr [esi], 0; add esp, 0xc; mov dword ptr [esi + 0x10], eax; ret; 
0x50527b9b  # call 0x2600b; add esp, 0xc; ret; 
0x5052f236  # call 0x26341; pop ecx; pop ecx; leave; ret; 
0x5051c78d  # call 0x26598; xor eax, eax; pop ebp; ret; 
0x5052f157  # call 0x26609; push dword ptr [ebp - 4]; call 0x1c966; add esp, 0xc; leave; ret; 
0x50526780  # call 0x26660; pop ecx; xor eax, eax; inc eax; pop esi; ret; 
0x50519747  # call 0x26694; pop ecx; ret; 
0x50519751  # call 0x2727f; pop ecx; ret; 
0x50526426  # call 0x27879; add esp, 0xc; mov dword ptr [0x5055e118], eax; ret; 
0x5052799a  # call 0x2793a; add esp, 0xc; mov eax, esi; pop esi; ret; 
0x50527930  # call 0x2793a; add esp, 0xc; pop esi; ret; 
0x50527a37  # call 0x279b5; mov eax, esi; pop esi; ret; 
0x50527a06  # call 0x279b5; pop edi; mov eax, esi; pop esi; ret; 
0x5052a7c1  # call 0x28e20; add esp, 0x18; pop edi; pop esi; ret; 
0x5052a867  # call 0x28e20; pop ecx; pop ecx; pop esi; ret; 
0x5052ab13  # call 0x2a12b; pop edi; ret; 
0x5052aad9  # call 0x2a1fa; pop ecx; pop ecx; leave; ret; 
0x5052a442  # call 0x2a1fa; pop ecx; pop ecx; pop edi; pop ebp; ret; 
0x5052ab2c  # call 0x2a1fa; pop ecx; ret; 
0x5052a8a0  # call 0x2a2dc; pop ecx; pop ecx; ret; 
0x5052a8d1  # call 0x2a314; pop edi; ret; 
0x5052a8bb  # call 0x2a414; pop ecx; pop ecx; pop esi; ret; 
0x5052a8e4  # call 0x2a44c; pop ecx; ret; 
0x5052a8f8  # call 0x2a566; pop edi; ret; 
0x5052a88a  # call 0x2a6e2; add esp, 0x10; pop esi; ret; 
0x5052aafc  # call 0x2a820; add esp, 0x10; pop esi; ret; 
0x5052bad6  # call 0x2b351; pop ebx; ret; 
0x5052baef  # call 0x2b41f; pop ecx; ret; 
0x5052bb03  # call 0x2b4ff; pop ebx; ret; 
0x5052bb16  # call 0x2b5d0; pop ecx; ret; 
0x5052bb29  # call 0x2b6b4; pop ecx; ret; 
0x5052ba23  # call 0x2b7c7; pop ecx; pop ecx; pop esi; ret; 
0x505260dc  # call 0x2b99756e; ror dword ptr [ebx + 0x2898304], 0x8b; add eax, dword ptr [ecx - 0x7d]; ret 0x3b04; 
0x5052d6b3  # call 0x2d127; pop ecx; pop ecx; ret; 
0x5052d733  # call 0x2d3eb; pop ecx; pop ecx; ret; 
0x5052d747  # call 0x2d4b0; pop ecx; pop ecx; ret; 
0x5052d75b  # call 0x2d5a4; pop ecx; pop ecx; ret; 
0x5052d921  # call 0x2d81f; push dword ptr [esp + 0x10]; call 0x2d8dd; add esp, 0x10; ret; 
0x5052d92a  # call 0x2d8dd; add esp, 0x10; ret; 
0x5052f26c  # call 0x2f141; leave; ret; 
0x5052f7f7  # call 0x2f3b9; add esp, 0x10; pop esi; ret; 
0x5052f838  # call 0x2f4b4; pop edi; pop esi; ret; 
0x5053179a  # call 0x2f672; add esp, 0xc; ret; 
0x5052f758  # call 0x2f707; pop esi; ret; 
0x50531398  # call 0x311b1; add esp, 0xc; mov eax, edx; ret; 
0x505313b0  # call 0x312aa; push dword ptr [esp + 0xc]; call 0x1c966; add esp, 0xc; ret; 
0x50531b5d  # call 0x31a4e; pop ecx; pop ebp; ret 0xc; 
0x505322ea  # call 0x322f5; call 0x38721; ret; 
0x50532322  # call 0x3232d; call 0x38721; ret; 
0x50532360  # call 0x3236e; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x505128c9  # call 0x32377; add ebp, 0x1014; leave; ret 0x10; 
0x505316e7  # call 0x32377; add ebp, 0x188; leave; ret; 
0x50503261  # call 0x32377; add ebp, 0x18c; leave; ret 4; 
0x50507382  # call 0x32377; add ebp, 0x18c; leave; ret 8; 
0x5052dc07  # call 0x32377; add ebp, 0x18c; leave; ret; 
0x505484c9  # call 0x32377; add ebp, 0x190; leave; ret 8; 
0x5052e8d7  # call 0x32377; add ebp, 0x198; leave; ret; 
0x505487b6  # call 0x32377; add ebp, 0x19c; leave; ret 4; 
0x50548c82  # call 0x32377; add ebp, 0x1a4; leave; ret 4; 
0x5052eedd  # call 0x32377; add ebp, 0x1e0; leave; ret; 
0x5051ea67  # call 0x32377; add ebp, 0x1f90; leave; ret; 
0x5050f685  # call 0x32377; add ebp, 0x1ffc; leave; ret 0xc; 
0x505147e4  # call 0x32377; add ebp, 0x2640; leave; ret 0x20; 
0x5051964c  # call 0x32377; add ebp, 0x3a0; leave; ret; 
0x50527eb8  # call 0x32377; add ebp, 0x400c; leave; ret; 
0x5052e2f3  # call 0x32377; add ebp, 0x450; leave; ret; 
0x5051f253  # call 0x32377; add ebp, 0x4fa0; leave; ret; 
0x505277e1  # call 0x32377; add ebp, 0x5c; leave; ret; 
0x50512c05  # call 0x32377; add ebp, 0x64; leave; ret 0x14; 
0x5050f936  # call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50522e46  # call 0x32377; add ebp, 0x68; leave; ret; 
0x505035e2  # call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50528a27  # call 0x32377; add ebp, 0x6c; leave; ret; 
0x505028f5  # call 0x32377; add ebp, 0x74; leave; ret 4; 
0x505223f8  # call 0x32377; add ebp, 0x74; leave; ret; 
0x5050684f  # call 0x32377; add ebp, 0x78; leave; ret; 
0x5052d8c1  # call 0x32377; add ebp, 0x8c; leave; ret; 
0x50517bae  # call 0x32377; add ebp, 0xa8; leave; ret; 
0x5051a1b5  # call 0x32377; add ebp, 0xb4; leave; ret; 
0x50549444  # call 0x32377; add ebp, 0xd0; leave; ret; 
0x505130d9  # call 0x32377; add ebp, 0xf90; leave; ret 0xc; 
0x5050d929  # call 0x32377; add ebp, 0xf94; leave; ret 0xc; 
0x50504c53  # call 0x32377; leave; ret 0x10; 
0x5050ae43  # call 0x32377; leave; ret 0x14; 
0x50505ba7  # call 0x32377; leave; ret 0x1c; 
0x50508591  # call 0x32377; leave; ret 0x20; 
0x505059b6  # call 0x32377; leave; ret 0x24; 
0x50505ee5  # call 0x32377; leave; ret 0x2c; 
0x50501270  # call 0x32377; leave; ret 0xc; 
0x5050437d  # call 0x32377; leave; ret 4; 
0x5050133f  # call 0x32377; leave; ret 8; 
0x50506938  # call 0x32377; leave; ret; 
0x50516c6a  # call 0x323c0; add esp, 0x14; pop esi; ret; 
0x50525171  # call 0x323c0; add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x5051ec10  # call 0x323c0; add esp, 0xc; pop ebp; ret; 
0x5052d599  # call 0x323c0; add esp, 0xc; pop edi; leave; ret; 
0x505151ab  # call 0x323c0; add esp, 0xc; pop esi; ret; 
0x50547a71  # call 0x323c0; add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x5053e44d  # call 0x32730; add esp, 0x10; pop esi; ret; 
0x50532b99  # call 0x32b1c; pop ecx; pop ecx; pop ebp; ret; 
0x50532c18  # call 0x32ba2; pop ecx; pop ecx; pop ebp; ret; 
0x50532c9e  # call 0x32c21; pop ecx; pop ecx; pop ebp; ret; 
0x50532d1d  # call 0x32ca7; pop ecx; pop ecx; pop ebp; ret; 
0x50532da3  # call 0x32d26; pop ecx; pop ecx; pop ebp; ret; 
0x505271e7  # call 0x32dc2; pop ecx; pop esi; ret; 
0x5052d7ac  # call 0x32dd0; add esp, 0x28; leave; ret; 
0x50525139  # call 0x32dd0; add esp, 0xc; mov dword ptr [edi], esi; mov eax, edi; pop edi; ret; 
0x50521dd7  # call 0x32dd0; add esp, 0xc; pop ebx; leave; ret; 
0x5053313f  # call 0x33006; pop ecx; pop ecx; pop ebp; ret; 
0x5053325d  # call 0x33209; mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x5051159d  # call 0x33af0; pop ecx; pop ecx; ret; 
0x50503738  # call 0x33e8; ret 8; 
0x5053416e  # call 0x33f1d; pop ecx; pop ebp; ret; 
0x5051c992  # call 0x342b0; add esp, 0x14; pop edi; mov eax, esi; pop esi; ret; 
0x505345f8  # call 0x343a8; add esp, 0x14; pop ebp; ret; 
0x50532db8  # call 0x345d7; add esp, 0xc; pop ebp; ret; 
0x50526e2f  # call 0x3462e; add esp, 0xc; pop esi; ret; 
0x50535ed5  # call 0x35da6; pop ecx; ret; 
0x50535ebb  # call 0x35ec9; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5050374a  # call 0x35ee; ret 8; 
0x50535ecc  # call 0x36026; pop ecx; ret; 
0x50535e51  # call 0x36062; pop ecx; pop ecx; ret; 
0x50536112  # call 0x36091; add esp, 0x10; pop esi; pop ebp; ret; 
0x50536155  # call 0x36163; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5051c929  # call 0x3616c; pop ecx; ret; 
0x5051c95d  # call 0x36236; pop ecx; pop ecx; pop ebp; ret; 
0x5054171d  # call 0x36451; add esp, 0x2c; pop esi; pop ebp; ret; 
0x505376f9  # call 0x36451; pop ecx; call 0x38721; ret 4; 
0x50539d61  # call 0x36451; pop ecx; pop ebp; ret; 
0x50541764  # call 0x36451; pop ecx; pop esi; pop ebp; ret; 
0x50535fac  # call 0x36451; pop ecx; ret; 
0x50548515  # call 0x36451; xor eax, eax; pop ecx; inc eax; ret; 
0x5053660e  # call 0x3661f; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5054127b  # call 0x36873; call 0x38721; ret; 
0x50536eb9  # call 0x36e10; add esp, 0x14; pop ebp; ret; 
0x50536f94  # call 0x36ec3; add esp, 0xc; pop ebp; ret; 
0x50536f6f  # call 0x36f7d; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50537089  # call 0x3709a; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x505371ed  # call 0x371fb; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5052bb35  # call 0x3728c; push eax; call 0x1c973; pop ecx; pop ecx; ret; 
0x505372f8  # call 0x37306; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50537d4f  # call 0x3730f; add esp, 0x24; mov dword ptr [0x50555fb8], eax; pop esi; ret; 
0x5054128b  # call 0x3730f; pop ecx; mov dword ptr [0x5055de98], eax; ret; 
0x50537383  # call 0x3730f; pop ecx; ret; 
0x5053fcee  # call 0x3738a; pop ecx; ret; 
0x50537a93  # call 0x3738a; push 0xff; call eax; add esp, 0xc; pop ebp; ret; 
0x50537910  # call 0x37439; xor eax, eax; pop edi; pop esi; ret; 
0x5053753a  # call 0x37554; call 0x38721; ret; 
0x5053a1a8  # call 0x3755d; test eax, eax; jne 0x3a1b7; mov eax, 0x505569bc; ret; 
0x505376f3  # call 0x37716; push esi; call 0x36451; pop ecx; call 0x38721; ret 4; 
0x505393f5  # call 0x37a7b; pop ecx; mov eax, esi; call 0x38721; ret; 
0x505375e6  # call 0x37a7b; pop ecx; mov eax, esi; pop esi; ret; 
0x50542f41  # call 0x37a7b; pop ecx; ret; 
0x505410da  # call 0x37af0; ret; 
0x50537d07  # call 0x37bbf; add esp, 0xc; ret; 
0x50509c83  # call 0x3824; ret 4; 
0x505386cd  # call 0x3855a; pop ecx; pop ecx; pop ebp; ret; 
0x50531b2a  # call 0x386ba; pop ecx; pop ecx; ret; 
0x505376ff  # call 0x38721; ret 4; 
0x50531b3e  # call 0x38721; ret; 
0x50531ed3  # call 0x38a0d; mov dword ptr [eax], esi; call 0x38721; ret; 
0x50531b8e  # call 0x38a19; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; pop ebp; ret; 
0x5053ede8  # call 0x38a34; add esp, 0x14; pop esi; ret; 
0x50542ad1  # call 0x38b5c; add esp, 0x14; or eax, 0xffffffff; pop esi; pop ebp; ret; 
0x50536e55  # call 0x38b5c; add esp, 0x14; xor eax, eax; call 0x38721; ret; 
0x50539ba1  # call 0x38c24; pop ecx; mov esi, dword ptr [ebp - 0x1c]; ret; 
0x5053604e  # call 0x38c24; pop ecx; pop ebp; ret; 
0x50531e48  # call 0x38c24; pop ecx; ret; 
0x50538ce7  # call 0x38cf5; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50537ae9  # call 0x38cfe; pop ecx; ret; 
0x50539196  # call 0x39134; mov dword ptr [0x5055e138], eax; xor eax, eax; ret; 
0x50539873  # call 0x396ce; pop ecx; mov dword ptr [0x5055e26c], 1; xor eax, eax; ret; 
0x50539b28  # call 0x39886; pop ecx; mov eax, edi; pop esi; ret; 
0x50538e6b  # call 0x39b35; mov eax, dword ptr [eax + 4]; ret; 
0x505364d1  # call 0x3a153; mov dword ptr [esi], eax; pop ecx; call 0x38721; ret; 
0x50536416  # call 0x3a195; mov dword ptr [eax], 0xc; xor eax, eax; call 0x38721; ret; 
0x50533a92  # call 0x3a195; mov dword ptr [eax], 0xc; xor eax, eax; pop esi; ret; 
0x50541f50  # call 0x3a195; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x505428d4  # call 0x3a195; mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x5053a1d4  # call 0x3a195; mov dword ptr [eax], esi; pop esi; pop ebp; ret; 
0x5053a45c  # call 0x3a229; add esp, 0xc; pop ebp; ret; 
0x5053a52f  # call 0x3a466; add esp, 0xc; pop ebp; ret; 
0x5053a794  # call 0x3a7a2; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5053a88a  # call 0x3aad2; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50505786  # call 0x3b005ba3; ret; 
0x5053b2dd  # call 0x3b1fb; add esp, 0x18; pop ebp; ret; 
0x5053b666  # call 0x3b5b6; pop ecx; pop ecx; pop ebp; ret; 
0x5053b749  # call 0x3b66f; add esp, 0xc; pop ebp; ret; 
0x5053c1a0  # call 0x3c1ae; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5053c2b3  # call 0x3c2c1; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50535fa1  # call 0x3c2cb; push dword ptr [0x5055e274]; call 0x36451; pop ecx; ret; 
0x50533d7c  # call 0x3caec90; ret; 
0x5053e091  # call 0x3deb5; pop ecx; pop ecx; ret; 
0x5053e087  # call 0x3deb5; push 0xff; call 0x3deb5; pop ecx; pop ecx; ret; 
0x5053e196  # call 0x3e0d0; add esp, 0x14; pop ebp; ret; 
0x5053c3f0  # call 0x3e1a0; pop ecx; ret; 
0x5053e461  # call 0x3e2cb; pop ecx; pop ecx; pop ebp; ret; 
0x5053e474  # call 0x3e33e; pop ecx; pop ecx; pop ebp; ret; 
0x5053e42e  # call 0x3e3dc; add esp, 0x10; pop ebp; ret; 
0x5053e6d2  # call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed21  # call 0x3eb46; add esp, 0x14; pop ebp; ret; 
0x5053ed9c  # call 0x3ecfb; add esp, 0x1c; pop ebp; ret; 
0x505366a1  # call 0x3edc7; fnclex; pop ebp; ret; 
0x5053fc89  # call 0x3fbfb; add esp, 0x10; pop ebp; ret; 
0x5050ae9e  # call 0x4000aeda; pop esi; pop edi; ret 4; 
0x505405f0  # call 0x405fe; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x505410cc  # call 0x410da; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50541385  # call 0x41324; add esp, 0x10; pop ebp; ret; 
0x50541e1d  # call 0x41e2b; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5053a7a5  # call 0x42052; pop ecx; ret; 
0x505421fc  # call 0x4220a; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50542396  # call 0x423a7; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x505428bd  # call 0x42796; add esp, 0x10; pop ebp; ret; 
0x50543149  # call 0x42fca; add esp, 0x14; pop ebp; ret; 
0x5054338e  # call 0x43153; add esp, 0x10; pop ebp; ret; 
0x50543512  # call 0x43398; add esp, 0x10; pop ebp; ret; 
0x50543ffc  # call 0x43eb7; add esp, 0x10; pop esi; pop ebp; ret; 
0x50546052  # call 0x45f89; add esp, 0xc; pop ebp; ret; 
0x50513c71  # call 0x46c2b; push esi; call 0x16412; pop ecx; ret; 
0x5051ebc8  # call 0x46dae; push eax; call 0x1eb23; pop ecx; ret; 
0x5051f2b6  # call 0x47030; and dword ptr [esi + 0x2c], 0; pop esi; pop ebp; ret; 
0x505475b7  # call 0x4756b; or eax, 0xffffffff; ret; 
0x5054919e  # call 0x47c81; xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x50547c6e  # call 0x47c81; xor eax, eax; pop esi; pop ebx; pop ebp; ret 0xc; 
0x505484fc  # call 0x47c81; xor eax, eax; ret; 
0x505391b0  # call 0x481005c2; je 0x391ba; xor eax, eax; ret; 
0x50548542  # call 0x48394; ret 4; 
0x505487e3  # call 0x484f2; pop esi; ret 4; 
0x505487dc  # call 0x4854a; mov eax, esi; call 0x484f2; pop esi; ret 4; 
0x50547bb7  # call 0x487c5; mov eax, edi; pop esi; pop edi; ret 4; 
0x505499f4  # call 0x49968; mov eax, dword ptr [ebp + 8]; add esp, 0xc; pop ebx; pop ebp; ret; 
0x50549c10  # call 0x49b85; mov eax, dword ptr [ebp + 8]; add esp, 0xc; pop ebx; pop ebp; ret; 
0x50505ac2  # call 0x51b3; pop ebp; ret 0x1c; 
0x50505dd2  # call 0x51b3; pop edi; pop esi; pop ebx; pop ebp; ret 0x2c; 
0x50541765  # call 0x5a0416b6; pop esi; pop ebp; ret; 
0x50526592  # call 0x5b52bb6a; ret; 
0x50505f10  # call 0x5bb0; pop ebp; ret 0x24; 
0x50526514  # call 0x5e52baec; pop ebx; leave; ret; 
0x5054117c  # call 0x5e63d1b4; pop ebx; pop ebp; ret; 
0x50509d0f  # call 0x5f009d14; pop esi; ret 8; 
0x5051605d  # call 0x6001605f; pop esi; leave; ret; 
0x50506f62  # call 0x6502; and dword ptr [esi], 0; pop esi; ret 4; 
0x5050488a  # call 0x72004892; ret; 
0x50508731  # call 0x79c1; pop edi; pop esi; pop ebx; leave; ret 8; 
0x5050ca25  # call 0x8300ca61; les ecx, ptr [ebx + edi]; ret; 
0x5053118a  # call 0x8b135318; inc ecx; adc al, 3; ret 0x558b; 
0x50519ab4  # call 0x8bf61846; ret; 
0x505092e4  # call 0x90e7; ret 0xc; 
0x505029a3  # call 0xc03429a7; pop edi; pop esi; pop ebp; ret 0xc; 
0x50546e03  # call 0xc0ba7d10; shl ecx, 8; or eax, ecx; ret 4; 
0x50547021  # call 0xc0ba7f2e; shl ecx, 8; or eax, ecx; ret 4; 
0x505165b2  # call 0xc48465b7; or al, 0x3b; ret; 
0x5050f28a  # call 0xc935; pop edi; pop esi; pop ebx; leave; ret 8; 
0x5052474c  # call 0xc95da5b0; ret; 
0x505271e4  # call 0xd6eac229; mov ebx, 0x5e590000; ret; 
0x50526601  # call 0xf52bbd9; mov dh, 0xc0; ret; 
0x5053601e  # call dword ptr [0x5054a020]; pop ebp; ret; 
0x50535feb  # call dword ptr [0x5054a020]; pop esi; pop ebp; ret; 
0x5050112f  # call dword ptr [0x5054a020]; ret; 
0x5053605a  # call dword ptr [0x5054a024]; pop ebp; ret; 
0x50501150  # call dword ptr [0x5054a024]; ret; 
0x50501188  # call dword ptr [0x5054a028]; mov eax, esi; pop esi; ret; 
0x505375cb  # call dword ptr [0x5054a028]; pop edi; mov eax, esi; pop esi; ret; 
0x505011e2  # call dword ptr [0x5054a028]; pop esi; ret 4; 
0x50516bb4  # call dword ptr [0x5054a028]; ret; 
0x5053742f  # call dword ptr [0x5054a02c]; mov eax, esi; pop esi; ret; 
0x50537785  # call dword ptr [0x5054a02c]; pop ebp; ret; 
0x505475dc  # call dword ptr [0x5054a02c]; xor eax, eax; ret; 
0x5054759b  # call dword ptr [0x5054a030]; movzx eax, al; and eax, 1; ret; 
0x5050119d  # call dword ptr [0x5054a030]; ret; 
0x5051433f  # call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x50514336  # call dword ptr [0x5054a04c]; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x5050c8d9  # call dword ptr [0x5054a04c]; xor eax, eax; ret 8; 
0x5052f3ab  # call dword ptr [0x5054a060]; xor eax, eax; add esp, 0x14; ret 4; 
0x505064d0  # call dword ptr [0x5054a078]; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x505064f9  # call dword ptr [0x5054a07c]; ret 4; 
0x50506541  # call dword ptr [0x5054a07c]; ret 8; 
0x50506519  # call dword ptr [0x5054a084]; ret 4; 
0x50506565  # call dword ptr [0x5054a084]; ret 8; 
0x5054401a  # call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x5051e3cb  # call dword ptr [0x5054a0e4]; neg eax; sbb eax, eax; ret; 
0x5051e3ec  # call dword ptr [0x5054a0ec]; mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50538f6b  # call dword ptr [0x5054a128]; push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x5052f3d2  # call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x5052f76e  # call dword ptr [0x5054a13c]; pop esi; ret; 
0x50543e96  # call dword ptr [0x5054a164]; mov esi, eax; mov eax, esi; call 0x38721; ret; 
0x505373fc  # call dword ptr [0x5054a184]; ret 4; 
0x5052786d  # call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x505010a3  # call dword ptr [0x5054a18c]; pop edi; pop esi; ret 4; 
0x505011db  # call dword ptr [0x5054a18c]; push esi; call dword ptr [0x5054a028]; pop esi; ret 4; 
0x50547c8a  # call dword ptr [0x5054a18c]; ret 4; 
0x505064a8  # call dword ptr [0x5054a18c]; ret; 
0x50506587  # call dword ptr [0x5054a190]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50538f72  # call dword ptr [0x5054a1e4]; leave; ret; 
0x5050103f  # call dword ptr [0x5054a240]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50546cd2  # call dword ptr [0x5055df10]; pop esi; leave; ret 4; 
0x50537bb5  # call dword ptr [0x5055e270]; xor eax, eax; pop ebp; ret; 
0x5052dc2a  # call dword ptr [eax + 0x20]; pop ecx; ret; 
0x5052d3d4  # call dword ptr [eax + 0x3c0]; pop ecx; pop ecx; ret; 
0x5052d3e2  # call dword ptr [eax + 0x3c4]; pop ecx; pop ecx; ret; 
0x5052dc72  # call dword ptr [eax + 0x48]; pop ecx; pop ecx; pop ebp; ret; 
0x5052daec  # call dword ptr [eax + 0xc]; add esp, 0xc; pop esi; pop ebp; ret; 
0x50526686  # call dword ptr [eax + 4]; add esp, 0x10; pop edi; pop esi; ret; 
0x5051514e  # call dword ptr [eax + 4]; add esp, 0xc; leave; ret; 
0x5052ef86  # call dword ptr [eax + 4]; add esp, 0xc; xor eax, eax; inc eax; pop esi; ret; 
0x50527277  # call dword ptr [eax + 4]; pop ecx; pop ecx; pop edi; pop esi; ret; 
0x5052dcd8  # call dword ptr [eax + 8]; add esp, 0x10; pop esi; pop ebp; ret; 
0x5053bfb0  # call dword ptr [eax - 0x75]; ret; 
0x505360f2  # call dword ptr [ebp + 8]; add esp, 0x10; pop edi; leave; ret; 
0x5052f267  # call dword ptr [ebp + 8]; pop ecx; pop ecx; call 0x2f141; leave; ret; 
0x5052f19c  # call dword ptr [ebp + 8]; pop ecx; pop ecx; leave; ret; 
0x50538a26  # call dword ptr [ebp - 0x75]; in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055d6a0], eax; pop ebp; ret; 
0x5053e09a  # call dword ptr [ebp - 0x75]; in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de7c], eax; pop ebp; ret; 
0x50541298  # call dword ptr [ebp - 0x75]; in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de9c], eax; pop ebp; ret; 
0x505412a7  # call dword ptr [ebp - 0x75]; in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055dea8], eax; pop ebp; ret; 
0x505412b6  # call dword ptr [ebp - 0x75]; in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055deac], eax; pop ebp; ret; 
0x5052ef64  # call dword ptr [ecx + 0x10]; pop ecx; pop ecx; pop esi; ret; 
0x5052dd33  # call dword ptr [ecx + 0x10]; pop ecx; pop ecx; ret; 
0x5052db30  # call dword ptr [ecx + 0x18]; pop ecx; ret; 
0x505266b5  # call dword ptr [ecx + 0x1c]; add esp, 0xc; pop esi; ret; 
0x50515d35  # call dword ptr [ecx + 0x1c]; pop ecx; pop ecx; mov dword ptr [esi + 0x28f0], edi; ret; 
0x505266e9  # call dword ptr [ecx + 0x1c]; pop ecx; pop ecx; pop esi; ret; 
0x5053173f  # call dword ptr [ecx + 0xc]; add esp, 0xc; ret; 
0x5052dd07  # call dword ptr [ecx + 0xc]; pop ecx; pop ecx; ret; 
0x5052dc85  # call dword ptr [ecx + 4]; add esp, 0xc; pop ebp; ret; 
0x5052ef45  # call dword ptr [ecx + 4]; add esp, 0xc; pop esi; ret; 
0x50531724  # call dword ptr [ecx + 8]; add esp, 0x10; pop ebp; ret; 
0x5052daa5  # call dword ptr [ecx + 8]; add esp, 0xc; pop ebp; ret; 
0x5051506f  # call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5052dc4d  # call dword ptr [ecx]; add esp, 0x18; pop ebp; ret; 
0x50515c7b  # call dword ptr [edi + 0x244]; add esp, 0x10; call 0x14981; pop esi; ret; 
0x50519334  # call dword ptr [edi - 0x75]; ret; 
0x505050b8  # call dword ptr [edi - 0x77]; inc ebp; or al, 0xe8; ret 0xffc5; 
0x5053170f  # call dword ptr [edx + 4]; add esp, 0xc; pop ebp; ret; 
0x50519583  # call dword ptr [esi + 0x68]; ret 0x515f; 
0x5051511b  # call dword ptr [esi + 4]; add esp, 0x18; leave; ret; 
0x505162b4  # call dword ptr [esi + 8]; add esp, 0x20; pop esi; pop ebx; pop ebp; ret; 
0x5052424a  # call dword ptr [esi - 0x18]; adc eax, 0x83ffff87; les edx, ptr [esi + ebx*2]; ret; 
0x505152f6  # call dword ptr [esi - 0x18]; imul esi, dword ptr [esi], 0x1cc48300; pop edi; pop esi; ret; 
0x50524261  # call dword ptr [esi - 0x18]; inc byte ptr [esi + 0x5959ffff]; pop esi; ret; 
0x5051fca0  # call dword ptr [esi - 0x18]; mov edi, 0x83ffffcc; les ecx, ptr [esi + ebx*2]; ret; 
0x50520152  # call dword ptr [esi - 0x18]; or eax, 0x83ffffc8; les ecx, ptr [esi + ebx*2]; ret; 
0x5052f732  # call dword ptr [esi - 0x18]; sub eax, 0x83fffed2; les ecx, ptr [edi + ebx*2]; ret; 
0x50528b1e  # call dword ptr [esi - 0x73]; inc ebp; aam 0xe8; ret; 
0x50538d27  # call dword ptr ss:[0x5054a020]; pop esi; pop ebp; ret; 
0x50537a9d  # call eax; add esp, 0xc; pop ebp; ret; 
0x50537376  # call eax; mov dword ptr [ebp + 8], eax; mov eax, dword ptr [ebp + 8]; pop esi; pop ebp; ret; 
0x50546b31  # call eax; mov edi, eax; mov eax, edi; pop edi; pop esi; ret; 
0x50537acb  # call eax; pop ebp; ret; 
0x50546f91  # call eax; ret 4; 
0x5053ee51  # call eax; ret; 
0x50539a57  # call esi; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5054404f  # call esi; pop esi; ret; 
0x50501abd  # call ptr [ebx + 0x5e]; pop ebp; ret 0xc; 
0x50518e91  # call ptr [ebx + 0x5e]; ret; 
0x505024d0  # call ptr [ebx + 0x5f]; pop esi; leave; ret 0xc; 
0x505386b4  # call ptr [ebx + 0x5f]; pop esi; leave; ret; 
0x5050989a  # call ptr [ebx + 0x5f]; pop esi; pop ebp; ret 8; 
0x50537173  # call ptr [ebx + 0x5f]; pop esi; pop ebp; ret; 
0x50531f75  # call ptr [ecx + 0x303e283]; ret 0xf8c1; 
0x50523989  # call ptr [ecx + 0x33]; shr bl, 2; mov eax, esi; pop esi; pop ebp; ret; 
0x50539e76  # call ptr [ecx + 0x3b]; ret; 
0x5051ec2b  # call ptr [ecx + 0x56]; call 0x1c966; pop ecx; pop esi; ret; 
0x5051cfd7  # call ptr [ecx + 0x56]; call 0x1c966; pop ecx; ret; 
0x5053efe2  # call ptr [ecx + 0x59]; cmp eax, -1; jne 0x3efed; or dword ptr [esi], eax; ret; 
0x50519edf  # call ptr [ecx + 0x59]; leave; ret; 
0x5051e2fe  # call ptr [ecx + 0x59]; mov dword ptr [eax], esi; pop esi; ret; 
0x505278ee  # call ptr [ecx + 0x59]; mov eax, edi; pop edi; pop esi; ret; 
0x5051dae7  # call ptr [ecx + 0x59]; or eax, 0xffffffff; pop edi; leave; ret; 
0x505170f8  # call ptr [ecx + 0x59]; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x5051cdf9  # call ptr [ecx + 0x59]; pop ebp; ret; 
0x5052a446  # call ptr [ecx + 0x59]; pop edi; pop ebp; ret; 
0x5051abcf  # call ptr [ecx + 0x59]; pop edi; pop ebx; pop esi; ret; 
0x50521d12  # call ptr [ecx + 0x59]; pop edi; pop esi; ret; 
0x5051d699  # call ptr [ecx + 0x59]; pop esi; pop ebx; ret; 
0x50518eb1  # call ptr [ecx + 0x59]; pop esi; ret; 
0x50516f56  # call ptr [ecx + 0x59]; ret; 
0x50527623  # call ptr [ecx + 0x59]; xor eax, eax; inc eax; pop esi; ret; 
0x5051d9fe  # call ptr [ecx + 0x59]; xor eax, eax; leave; ret; 
0x50531b61  # call ptr [ecx + 0x5d]; ret 0xc; 
0x50534172  # call ptr [ecx + 0x5d]; ret; 
0x5051fb1b  # call ptr [ecx + 0x5e]; pop ebp; ret; 
0x505152c8  # call ptr [ecx + 0x5e]; ret; 
0x505151f8  # call ptr [ecx + 0x5f]; leave; ret; 
0x50515970  # call ptr [ecx + 0x5f]; pop esi; pop ebx; leave; ret; 
0x505399c8  # call ptr [ecx + 0x5f]; pop esi; pop ebx; pop ebp; ret; 
0x5051711b  # call ptr [ecx + 0x5f]; pop esi; ret; 
0x505151c6  # call ptr [ecx + 0x5f]; ret; 
0x50539877  # call ptr [ecx - 0x39]; add eax, 0x5055e26c; add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; ret; 
0x5054128f  # call ptr [ecx - 0x5d]; cwde; ficom word ptr [ebp + 0x50]; ret; 
0x50543c7b  # call ptr [ecx - 0x5d]; push 0x3b5055d5; ret; 
0x50531f91  # call ptr [ecx - 0x740408a5]; inc ebp; adc al, 0x6b; rol byte ptr [edi], 0x2b; ret 0x4503; 
0x5051ef74  # call ptr [ecx - 0x75]; inc esi; cmp byte ptr [edi + 0x5e], bl; ret; 
0x50539ba5  # call ptr [ecx - 0x75]; jne 0x39b8e; ret; 
0x5053c429  # call ptr [ecx - 0x7b]; sal byte ptr [ebp - 0x1f], 0x8b; ret; 
0x50538d24  # call ptr [ecx - 1]; call dword ptr ss:[0x5054a020]; pop esi; pop ebp; ret; 
0x50509fd6  # call ptr [edi + 0x5b]; pop esi; pop ebp; ret 0xc; 
0x5051d849  # call ptr [edi + 0x5b]; pop esi; ret; 
0x5052a310  # call ptr [edi + 0x5d]; ret; 
0x50501623  # call ptr [edi + 0x5e]; leave; ret 4; 
0x50516060  # call ptr [edi + 0x5e]; leave; ret; 
0x5050a591  # call ptr [edi + 0x5e]; pop ebp; ret 0xc; 
0x5053e2c6  # call ptr [edi + 0x5e]; pop ebp; ret; 
0x50504bfd  # call ptr [edi + 0x5e]; pop ebx; leave; ret 0x10; 
0x5050adea  # call ptr [edi + 0x5e]; pop ebx; leave; ret 0x14; 
0x50506197  # call ptr [edi + 0x5e]; pop ebx; leave; ret 0xc; 
0x50546f3d  # call ptr [edi + 0x5e]; pop ebx; leave; ret 4; 
0x50508735  # call ptr [edi + 0x5e]; pop ebx; leave; ret 8; 
0x505198a6  # call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x5050916a  # call ptr [edi + 0x5e]; pop ebx; pop ebp; ret 0x10; 
0x50505dd6  # call ptr [edi + 0x5e]; pop ebx; pop ebp; ret 0x2c; 
0x5051fc42  # call ptr [edi + 0x5e]; pop ebx; pop ebp; ret; 
0x50515626  # call ptr [edi + 0x5e]; pop ebx; ret; 
0x50502f8d  # call ptr [edi + 0x5e]; ret 8; 
0x50515e6e  # call ptr [edi + 0x5e]; ret; 
0x5051daec  # call ptr [edi - 0x37]; ret; 
0x50516e94  # call ptr [esi + 0x5b]; leave; ret; 
0x50507f53  # call ptr [esi + 0x5b]; pop edi; leave; ret 0x10; 
0x50548da1  # call ptr [esi + 0x5b]; pop edi; leave; ret 8; 
0x505489dd  # call ptr [esi + 0x5b]; pop edi; pop ebp; ret 4; 
0x50532ffb  # call ptr [esi + 0x5b]; pop edi; ret; 
0x5050a679  # call ptr [esi + 0x5d]; ret 0xc; 
0x50542adb  # call ptr [esi + 0x5d]; ret; 
0x50533fdf  # call ptr [esi + 0x5f]; pop ebx; leave; ret; 
0x50522f25  # call ptr [esi + 0x5f]; pop ebx; pop ebp; ret; 
0x50516e21  # call ptr [esi - 0x37]; ret; 
0x5052a1e9  # call ptr [esi - 0x77]; lahf; add byte ptr [eax], 0; add byte ptr [ecx + 0x848f], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5050f4da  # cdq; add al, byte ptr cs:[eax]; leave; ret; 
0x5052a2ce  # cdq; add byte ptr [eax], 0; add byte ptr [ecx + 0x8481], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x50528a29  # cdq; add byte ptr [eax], al; add ebp, 0x6c; leave; ret; 
0x505130da  # cdq; add dword ptr [eax], eax; add ebp, 0xf90; leave; ret 0xc; 
0x5051fccb  # cdq; and edx, 7; add eax, edx; sar eax, 3; add eax, 4; ret; 
0x5051f615  # cdq; mov ecx, 0x7f7; idiv ecx; mov eax, edx; ret; 
0x50521bda  # cdq; pop es; add dword ptr [eax], eax; leave; ret; 
0x50518fd3  # clc; add al, 0x75; add ecx, dword ptr [ecx + 0x5f5b305e]; pop esi; ret; 
0x5050b431  # clc; add al, byte ptr [ebx]; fild word ptr [ebx]; ret; 
0x50533fb2  # clc; add al, byte ptr [ebx]; ret 0x848d; 
0x505413f3  # clc; add cl, byte ptr [edi]; test bh, cl; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50543b5b  # clc; add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x5051570e  # clc; add dword ptr [ebp + 3], edi; xor eax, eax; ret; 
0x5052ef4e  # clc; add dword ptr [ebp + 4], esi; xor eax, eax; pop esi; ret; 
0x50541cac  # clc; add dword ptr [ebp - 0x29], esi; xor eax, eax; pop ebp; ret; 
0x50536048  # clc; add eax, 0x5010c083; call 0x38c24; pop ecx; pop ebp; ret; 
0x50525a72  # clc; add eax, dword ptr [eax + 0x59]; inc eax; ret; 
0x505484f3  # clc; and byte ptr [edx + 0xd], dh; push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x5053e337  # clc; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x505394df  # clc; and dword ptr [eax + 0x70], 0xfffffffd; mov eax, esi; pop ebx; leave; ret; 
0x50532b6b  # clc; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50541c72  # clc; and dword ptr [ecx + 0x70], 0xfffffffd; pop edi; pop ebx; leave; ret; 
0x5053b733  # clc; and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x50516157  # clc; call 0x15729; pop edi; pop esi; leave; ret; 
0x50547bb6  # clc; call 0x487c5; mov eax, edi; pop esi; pop edi; ret 4; 
0x5053403d  # clc; cmp al, 0xf; xchg ebp, eax; ret 0xc28b; 
0x5051fad9  # clc; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x50508859  # clc; dec dword ptr [edi]; test bl, bh; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x5050ef70  # clc; dec dword ptr [edi]; test byte ptr [edi], bl; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50538716  # clc; lea eax, [ebp - 0x10]; mov dword ptr fs:[0], eax; ret; 
0x5051e3f6  # clc; leave; ret; 
0x5052b7bd  # clc; mov dword ptr [eax + 0x104c], ecx; pop esi; leave; ret; 
0x5052a55c  # clc; mov dword ptr [eax + 0x84], ecx; pop esi; leave; ret; 
0x5052a697  # clc; mov dword ptr [edi + 0x84], eax; pop esi; leave; ret; 
0x50546b34  # clc; mov eax, edi; pop edi; pop esi; ret; 
0x505390dc  # clc; mov edi, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x50538ff9  # clc; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x50542290  # clc; mov edx, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x50523555  # clc; or byte ptr [eax + 0x76ff0247], cl; or al, ch; ret; 
0x50501198  # clc; push dword ptr [eax + ecx + 0x50]; call dword ptr [0x5054a030]; ret; 
0x505475ae  # clc; push dword ptr [ebp + 0xe]; push 0x276d; call 0x4756b; or eax, 0xffffffff; ret; 
0x5053efe6  # clc; push dword ptr [ebp + 3]; or dword ptr [esi], eax; ret; 
0x50547593  # clc; push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x5053777e  # clc; push dword ptr [ecx + ecx + 0x6a]; add byte ptr [eax - 1], dl; adc eax, 0x5054a02c; pop ebp; ret; 
0x505056d8  # clc; push dword ptr [edi + ecx*8 - 0x75]; pop ebp; sbb byte ptr [ebp - 0x74fb8b25], al; ret; 
0x50533ffe  # clc; sbb byte ptr [edi], cl; xchg ebp, eax; ret 0xc28b; 
0x50517d51  # cld; add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0x840f; 
0x50525806  # cld; add byte ptr [edi], cl; test byte ptr [esi - 0x75000000], bl; ret; 
0x5050161e  # cld; call 0x11aa; pop edi; pop esi; leave; ret 4; 
0x5052f15e  # cld; call 0x1c966; add esp, 0xc; leave; ret; 
0x505235f5  # cld; call 0x25932; pop ecx; pop ecx; leave; ret; 
0x5053e332  # cld; je 0x3e33c; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x505157f6  # cld; leave; ret; 
0x50533c03  # cld; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x505390d9  # cld; mov esi, dword ptr [ebp - 8]; mov edi, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x50538ffc  # cld; mov esp, ebp; pop ebp; ret; 
0x5050f68c  # cld; pop ds; add byte ptr [eax], al; leave; ret 0xc; 
0x50532f79  # cld; pop edi; leave; ret; 
0x505090df  # cld; pop edi; pop ebx; pop esi; leave; ret 0xc; 
0x50542293  # cld; pop edi; pop esi; leave; ret; 
0x5050227e  # cld; pop edi; pop esi; pop ebx; leave; ret 0xc; 
0x5051e2a0  # cld; pop edi; pop esi; pop ebx; leave; ret; 
0x50516f23  # cld; pop esi; pop ebx; leave; ret; 
0x50543bc4  # cld; pop esi; pop edi; leave; ret; 
0x50532f19  # cld; pop esi; pop edi; pop ebx; ret; 
0x5052bac0  # cld; push 0xc4830000; adc al, 0x5e; ret; 
0x5050f4d3  # cld; xor ecx, ebp; add esp, 0xc; call 0x32377; leave; ret; 
0x50504c50  # cld; xor ecx, ebp; call 0x32377; leave; ret 0x10; 
0x5050ae40  # cld; xor ecx, ebp; call 0x32377; leave; ret 0x14; 
0x50505ba4  # cld; xor ecx, ebp; call 0x32377; leave; ret 0x1c; 
0x5050858e  # cld; xor ecx, ebp; call 0x32377; leave; ret 0x20; 
0x505059b3  # cld; xor ecx, ebp; call 0x32377; leave; ret 0x24; 
0x50505ee2  # cld; xor ecx, ebp; call 0x32377; leave; ret 0x2c; 
0x5050126d  # cld; xor ecx, ebp; call 0x32377; leave; ret 0xc; 
0x5050133c  # cld; xor ecx, ebp; call 0x32377; leave; ret 8; 
0x5053a104  # cld; xor ecx, ebp; call 0x32377; leave; ret; 
0x5052259a  # cld; xor ecx, ebp; pop ebx; call 0x32377; leave; ret; 
0x5051ccb0  # cld; xor ecx, ebp; pop edi; call 0x32377; leave; ret; 
0x505492b3  # cld; xor ecx, ebp; pop esi; call 0x32377; leave; ret 0xc; 
0x5053c0d1  # cld; xor ecx, ebp; pop esi; call 0x32377; leave; ret; 
0x5051ce29  # cli; add al, 0x73; add esi, dword ptr [ebx]; rol bl, 0x8b; adc dword ptr [ebx], eax; ret 0xb60f; 
0x505028f7  # cli; add al, byte ptr [eax]; add ebp, 0x74; leave; ret 4; 
0x50546ee2  # cli; add al, byte ptr [edx - 0x75]; ret 0x4848; 
0x5052bb79  # cli; add byte ptr [bx + si], al; leave; ret; 
0x50522892  # cli; add byte ptr [eax], al; leave; ret; 
0x505128cb  # cli; add dword ptr [eax], eax; add ebp, 0x1014; leave; ret 0x10; 
0x5051ce07  # cli; add dword ptr [ebx + 3], esi; xor eax, eax; ret; 
0x50504f79  # cli; rol dword ptr [edx], cl; add cl, cl; ret 0xc; 
0x50526e30  # cli; xlatb; add byte ptr [eax], al; add esp, 0xc; pop esi; ret; 
0x50522e48  # cmc; add byte ptr [eax], al; add ebp, 0x68; leave; ret; 
0x5050437e  # cmc; fild word ptr [edx]; add cl, cl; ret 4; 
0x505064f1  # cmc; push dword ptr [esp + 4]; push 8; push eax; call dword ptr [0x5054a07c]; ret 4; 
0x50506539  # cmc; push dword ptr [esp + 8]; push 8; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x50539e73  # cmc; ret 0xffff; 
0x5050f937  # cmp al, 0x2a; add al, byte ptr [eax]; add ebp, 0x68; leave; ret 0x10; 
0x50514341  # cmp al, 0xa0; push esp; push eax; pop ebp; ret 0xc; 
0x5052f3d4  # cmp al, 0xa1; push esp; push eax; mov dword ptr [esi + 0x18], 1; ret; 
0x5052f770  # cmp al, 0xa1; push esp; push eax; pop esi; ret; 
0x5053403e  # cmp al, 0xf; xchg ebp, eax; ret 0xc28b; 
0x50543c79  # cmp al, 0xff; call ptr [ecx - 0x5d]; push 0x3b5055d5; ret; 
0x5053e6b7  # cmp al, 0xff; dec ecx; ret; 
0x5050e72e  # cmp al, 2; add cl, cl; ret 0xc; 
0x50531d19  # cmp al, 3; ret 0x4589; 
0x50518f5d  # cmp al, byte ptr [eax]; add byte ptr [ebx + 0x5b5f10c4], al; leave; ret; 
0x5052e8d9  # cmp al, byte ptr [eax]; add byte ptr [ecx + 0x198c5], al; add cl, cl; ret; 
0x50521e60  # cmp al, byte ptr [eax]; add byte ptr [ecx + 0x59], bl; leave; ret; 
0x5050e8de  # cmp al, byte ptr [edx]; add cl, cl; ret 8; 
0x5051ffbb  # cmp al, byte ptr [esi - 0x7d]; ret 0x3b04; 
0x5052b9f2  # cmp al, byte ptr [esp + edi*2]; rcr byte ptr [edi + 0x5b], cl; leave; ret; 
0x50541f52  # cmp bh, 0xff; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x505265fb  # cmp bh, cl; push ebp; push eax; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x50533392  # cmp byte ptr [eax + 1], dl; jne 0x3339b; xor eax, eax; inc eax; ret; 
0x50515c56  # cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x505265fa  # cmp byte ptr [eax], 0xcf; push ebp; push eax; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x50507d70  # cmp byte ptr [eax], al; add byte ptr [ebx], al; ret; 
0x505074b1  # cmp byte ptr [eax], al; add byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0x1674; 
0x50507c58  # cmp byte ptr [eax], al; add byte ptr [ecx], al; add byte ptr [eax], al; add bl, ch; sbb byte ptr [ebx - 0x4b76f3bb], cl; ret; 
0x50515c57  # cmp byte ptr [eax], al; jne 0x15c46; ret; 
0x50524749  # cmp byte ptr [ebx + 0x5e5fe845], cl; pop ebx; leave; ret; 
0x50513c59  # cmp byte ptr [ebx], dh; rcr byte ptr [edi + 0x40], 0x5e; ret; 
0x50516bdd  # cmp byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x50516dda  # cmp byte ptr [edi + 0x5e], bl; lea eax, [ebx + 4]; pop ebx; leave; ret; 
0x5051ef78  # cmp byte ptr [edi + 0x5e], bl; ret; 
0x50536995  # cmp cl, 0x20; jae 0x369a0; shld edx, eax, cl; shl eax, cl; ret; 
0x50542f25  # cmp cl, 0x20; jae 0x42f30; shrd eax, edx, cl; shr edx, cl; ret; 
0x5053919c  # cmp cl, ah; push ebp; push eax; xor eax, eax; ret; 
0x5052b9ef  # cmp cl, byte ptr [ecx + 0x7c043a44]; rcr byte ptr [edi + 0x5b], cl; leave; ret; 
0x505496cd  # cmp dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x50542fbe  # cmp dword ptr [0x5055ded0], eax; sete cl; mov eax, ecx; ret; 
0x50516781  # cmp dword ptr [eax + 0x10], 0; je 0x1678b; or eax, 0xffffffff; ret; 
0x5051a6d1  # cmp dword ptr [eax + 0x16c], 4; jne 0x1a6df; xor eax, eax; pop esi; pop ebp; ret; 
0x5054112b  # cmp dword ptr [eax + 0x18], ecx; sete dl; mov eax, edx; pop ebp; ret; 
0x5051d775  # cmp dword ptr [eax + 0x30], ecx; jne 0x1d77e; xor eax, eax; inc eax; ret; 
0x5052daf9  # cmp dword ptr [eax + 0x40], 0; je 0x2db07; mov dword ptr [eax + 0x30], 1; ret; 
0x505317ce  # cmp dword ptr [eax + 0x42c], 5; je 0x317db; xor eax, eax; leave; ret; 
0x5052477f  # cmp dword ptr [eax + 4], 0; jne 0x24788; xor eax, eax; ret; 
0x5053fcdf  # cmp dword ptr [eax + 4], edx; je 0x3fce6; xor eax, eax; pop ebp; ret; 
0x50522f93  # cmp dword ptr [eax + eax*8 + 0x468bf174], eax; add al, 0xff; inc ebp; adc byte ptr [ebx], ch; ret; 
0x505060df  # cmp dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50524e43  # cmp dword ptr [ebp + 0x10], 0; jne 0x24e21; mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x5053f059  # cmp dword ptr [ebp + 8], 0; jg 0x3f034; pop esi; pop ebx; pop ebp; ret; 
0x50535e65  # cmp dword ptr [ebp + 8], 1; mov eax, dword ptr [ebp - 0x1c]; je 0x35e71; mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x5053fe69  # cmp dword ptr [ebp - 0x1c], 0; je 0x3fe77; push 0; call 0x38c24; pop ecx; ret; 
0x5050846d  # cmp dword ptr [ebp - 0x3fcc0001], ecx; pop edi; pop esi; pop ebx; pop ebp; ret 0x20; 
0x505235e5  # cmp dword ptr [ebp - 4], 0; pop esi; jne 0x235f0; xor eax, eax; leave; ret; 
0x50509124  # cmp dword ptr [ebx - 0x74ffe782], eax; pop ebp; adc al, 0x75; and byte ptr [ebx + 0x74ff107e], al; sbb dh, dh; ret; 
0x505233db  # cmp dword ptr [ebx - 0x75], ecx; ret; 
0x5051676b  # cmp dword ptr [ecx + 0x10], eax; setne al; ret; 
0x5051ebde  # cmp dword ptr [ecx + 4], 2; setne al; lea eax, [eax + eax + 1]; ret; 
0x5054361d  # cmp dword ptr [ecx + 8], edx; jne 0x43627; mov eax, 1; ret; 
0x5051ea69  # cmp dword ptr [ecx], eax; add byte ptr [ecx + 0x1f90c5], al; add cl, cl; ret; 
0x5054110e  # cmp dword ptr [ecx], eax; je 0x41116; xor eax, eax; pop ebp; ret; 
0x5051fada  # cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x5052f7a0  # cmp dword ptr [esi + 0x14], ecx; je 0x2f7ac; call 0x2f707; pop esi; ret; 
0x5052f752  # cmp dword ptr [esi + 0x18], 0; je 0x2f75f; call 0x2f707; pop esi; ret; 
0x5052f743  # cmp dword ptr [esi + 0x1c], 0; je 0x2f752; mov dword ptr [esi + 0x10], 1; pop esi; ret; 
0x5051ca7d  # cmp dword ptr [esi], 0; jne 0x1ca70; and dword ptr [esi + 4], 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x5051488b  # cmp dword ptr [esp + 4], 0; jne 0x14897; neg eax; sbb eax, eax; ret; 
0x50527834  # cmp dword ptr [esp + 8], eax; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x50501197  # cmp eax, -1; je 0x11a4; push eax; call dword ptr [0x5054a030]; ret; 
0x5053efe5  # cmp eax, -1; jne 0x3efed; or dword ptr [esi], eax; ret; 
0x50547592  # cmp eax, -1; jne 0x4759a; xor eax, eax; ret; 
0x505475ad  # cmp eax, -1; jne 0x475c0; push 0x276d; call 0x4756b; or eax, 0xffffffff; ret; 
0x50544049  # cmp eax, -2; je 0x44051; push eax; call esi; pop esi; ret; 
0x505484f2  # cmp eax, 0x20; jb 0x48504; push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x50508e8e  # cmp eax, 0x5055ca40; pop edi; pop esi; ret; 
0x5052a6c7  # cmp eax, 0x59ffff22; pop ecx; ret; 
0x5051cd8a  # cmp eax, 0x59ffffff; pop esi; ret; 
0x50502603  # cmp eax, 0x76ff50f0; or al, 0xe8; and cl, byte ptr [edx + 4]; add byte ptr [ebx], bh; ret; 
0x5051eb34  # cmp eax, 0x7f000000; jne 0x1eb40; xor eax, eax; inc eax; leave; ret; 
0x5052df86  # cmp eax, 0x83ffff09; les ecx, ptr [edi + ebx*2]; pop esi; pop ebp; ret; 
0x50539108  # cmp eax, 0xc0000005; je 0x39119; cmp eax, 0xc000001d; je 0x39119; xor eax, eax; ret; 
0x505462c3  # cmp eax, 0xc0000005; je 0x462d4; cmp eax, 0xc000001d; je 0x462d4; xor eax, eax; ret; 
0x50541224  # cmp eax, 0xc0000005; sete dl; mov eax, edx; ret; 
0x505412f1  # cmp eax, 0xc0000017; sete cl; mov eax, ecx; ret; 
0x5053910f  # cmp eax, 0xc000001d; je 0x39119; xor eax, eax; ret; 
0x505462ca  # cmp eax, 0xc000001d; je 0x462d4; xor eax, eax; ret; 
0x50536418  # cmp eax, 0xc70000; or al, 0; add byte ptr [eax], al; xor eax, eax; call 0x38721; ret; 
0x50512136  # cmp eax, 0xc9000202; ret 0x10; 
0x5052ef4d  # cmp eax, 1; jne 0x2ef56; xor eax, eax; pop esi; ret; 
0x50541cab  # cmp eax, 1; jne 0x41c87; xor eax, eax; pop ebp; ret; 
0x505156cf  # cmp eax, 4; jge 0x156d8; xor eax, eax; pop esi; ret; 
0x5050614f  # cmp eax, dword ptr [eax]; add byte ptr [ebx], bh; ret; 
0x5051e1f2  # cmp eax, dword ptr [ebp + 0x14]; jne 0x1e1e7; xor eax, eax; pop ebp; ret; 
0x50540e19  # cmp eax, dword ptr [ebp + 0xc]; jb 0x40e12; pop ebp; ret; 
0x50525928  # cmp eax, dword ptr [ecx]; jl 0x2591d; lea eax, [ecx + eax*4]; dec dword ptr [eax]; ret; 
0x5050e782  # cmp eax, dword ptr [edx]; add cl, cl; ret 0xc; 
0x5051d841  # cmp eax, dword ptr [esi + 0x20]; jl 0x1d79e; pop edi; pop ebx; pop esi; ret; 
0x50527965  # cmp eax, dword ptr [esi + 8]; jge 0x27974; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], 1; pop esi; ret; 
0x5051e867  # cmp eax, dword ptr [esp + 4]; jbe 0x1e871; or eax, 0xffffffff; ret; 
0x5052dfdd  # cmp eax, dword ptr [esp + 4]; jl 0x2dfb8; or eax, 0xffffffff; ret; 
0x5053d419  # cmp eax, ecx; jb 0x3d408; xor eax, eax; pop ebp; ret; 
0x50514880  # cmp eax, ecx; jbe 0x14888; xor eax, eax; inc eax; ret; 
0x5051698b  # cmp eax, ecx; jl 0x16992; lea eax, [ecx - 1]; mov dword ptr [edx + 0xf0], eax; ret; 
0x50523a1c  # cmp eax, edx; je 0x23a24; mov eax, esi; pop esi; ret; 
0x50524827  # cmp eax, edx; jne 0x2482f; xor eax, eax; leave; ret; 
0x5053b287  # cmp eax, esi; je 0x3b28e; or dword ptr [edi], 0xffffffff; call 0x38721; ret; 
0x5050ddc3  # cmp ebx, dword ptr [esi + 0x5b]; pop edi; leave; ret 8; 
0x5053a16f  # cmp ecx, 0x11; ja 0x3a182; push 0xd; pop eax; pop ebp; ret; 
0x50533130  # cmp ecx, 0x19; ja 0x33146; add eax, -0x20; pop ebp; ret; 
0x50533939  # cmp ecx, 0x19; ja 0x3394f; add eax, 0x20; pop ebp; ret; 
0x50509d08  # cmp ecx, 0x63; ja 0x9d13; mov dword ptr [esi + 0xe8], edi; pop edi; pop esi; ret 8; 
0x50509da9  # cmp ecx, 0x63; ja 0x9db4; mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e4a  # cmp ecx, 0x63; ja 0x9e55; mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x505479f9  # cmp ecx, 0xf18; jb 0x479e9; xor eax, eax; ret 4; 
0x505166e4  # cmp ecx, 1; jne 0x166ed; mov eax, esi; pop esi; ret; 
0x5051d91c  # cmp ecx, dword ptr [eax + 0x20]; setl dl; mov eax, edx; ret; 
0x5051c917  # cmp ecx, eax; jbe 0x1c91e; xor eax, eax; ret; 
0x5051c940  # cmp ecx, eax; jbe 0x1c948; xor eax, eax; pop ebp; ret; 
0x5051d0e2  # cmp ecx, eax; jbe 0x1d0ea; or eax, 0xffffffff; ret; 
0x5052f526  # cmp ecx, eax; jbe 0x2f52e; or eax, 0xffffffff; ret; 
0x50525aa0  # cmp ecx, eax; jl 0x25aa8; xor eax, eax; pop esi; ret; 
0x5053a18a  # cmp ecx, eax; sbb eax, eax; and eax, ecx; add eax, 8; pop ebp; ret; 
0x50520184  # cmp ecx, esi; jle 0x20165; or eax, 0xffffffff; pop esi; ret; 
0x5053edbf  # cmp edi, 0x28; jb 0x3edac; pop edi; pop esi; ret; 
0x50525925  # cmp edi, 0x7c013b40; int1; lea eax, [ecx + eax*4]; dec dword ptr [eax]; ret; 
0x5051dcb2  # cmp edi, 1; pop edi; sete al; pop esi; ret; 
0x5053f0c7  # cmp edi, edi; inc dword ptr [ebp - 0x17ca8a0a]; ret 0xffb0; 
0x50538489  # cmp edi, esi; jb 0x3847e; pop edi; pop esi; ret; 
0x505384af  # cmp edi, esi; jb 0x384a4; pop edi; pop esi; ret; 
0x5051ce06  # cmp edx, 1; jae 0x1ce0e; xor eax, eax; ret; 
0x5051ce28  # cmp edx, 4; jae 0x1ce30; xor eax, eax; ret; 
0x5051eba7  # cmp edx, eax; jl 0x1eb9c; xor eax, eax; pop esi; leave; ret; 
0x5050ab65  # cmp edx, ecx; jle 0xab6b; mov edx, ecx; mov dword ptr [eax + 0x108], edx; xor eax, eax; ret 8; 
0x50545c11  # cmp edx, ecx; jne 0x45c24; or eax, 0x8000; ret; 
0x50526e15  # cmp edx, esi; jbe 0x26e1e; xor eax, eax; inc eax; pop esi; ret; 
0x5051e2ed  # cmp esi, -1; jne 0x1e2f6; xor eax, eax; pop esi; ret; 
0x50537ff5  # cmp esi, 0x5055e260; jl 0x37fbb; pop edi; pop esi; ret; 
0x5051cb95  # cmp esi, 0x5959ffff; ret; 
0x5053ac04  # cmp esi, dword ptr [eax + esi + 0x3b]; ret; 
0x50537b32  # cmp esi, dword ptr [ebp + 0xc]; jb 0x37b23; pop esi; pop ebp; ret; 
0x50537b0e  # cmp esi, dword ptr [ebp + 8]; jb 0x37b03; pop esi; pop ebp; ret; 
0x5051132e  # cmp esi, dword ptr [esp + 8]; jb 0x11314; xor eax, eax; pop esi; ret 4; 
0x5051132d  # cmp esi, dword ptr fs:[esp + 8]; jb 0x11314; xor eax, eax; pop esi; ret 4; 
0x505150e0  # cmp esi, eax; jne 0x150a1; xor eax, eax; pop esi; leave; ret; 
0x50533244  # cmp esi, ecx; jb 0x3323a; pop esi; pop ebp; ret 8; 
0x50515788  # cmp esi, edx; pop esi; jge 0x15790; xor eax, eax; ret; 
0x5054112a  # cmp word ptr [eax + 0x18], cx; sete dl; mov eax, edx; pop ebp; ret; 
0x505156bc  # cmpsb byte ptr [esi], byte ptr es:[edi]; jb 0x156bf; add byte ptr [ebx + 0x5b5f14c4], al; leave; ret; 
0x50526761  # cmpsb byte ptr [esi], byte ptr es:[edi]; sub al, 1; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x50528dcd  # cmpsb byte ptr [esi], byte ptr es:[edi]; xchg ebp, eax; add byte ptr [eax], al; leave; ret; 
0x50517bb0  # cmpsd dword ptr [esi], dword ptr es:[edi]; add dword ptr [eax], eax; add ebp, 0xa8; leave; ret; 
0x50528ae1  # cwde; add byte ptr [eax], al; leave; ret; 
0x5052e8de  # cwde; add dword ptr [eax], eax; add cl, cl; ret; 
0x5051c95f  # cwde; add dword ptr [eax], eax; pop ecx; pop ecx; pop ebp; ret; 
0x5051c92b  # cwde; add dword ptr [eax], eax; pop ecx; ret; 
0x5052b4f1  # cwde; dec eax; adc byte ptr [eax], al; add byte ptr [ecx + 0x104c88], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x50541292  # cwde; ficom word ptr [ebp + 0x50]; ret; 
0x505096fb  # cwde; mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x505099db  # cwde; mov dword ptr [edx], eax; add cl, cl; ret 8; 
0x505497db  # cwde; mov edi, esi; dec ecx; ret 0x10; 
0x5050c816  # daa; add al, 0x80; call 0x11aa; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50501675  # daa; add al, 0x80; call 0x11aa; or eax, 0xffffffff; pop esi; ret 8; 
0x50501a11  # daa; add al, 0x80; call 0x11aa; or eax, 0xffffffff; ret 8; 
0x505475b4  # daa; add byte ptr [eax], al; call 0x4756b; or eax, 0xffffffff; ret; 
0x5051f35d  # daa; add byte ptr [eax], al; mov eax, esi; pop esi; ret; 
0x50513c79  # daa; add byte ptr [eax], al; pop ecx; ret; 
0x5052035e  # daa; add dword ptr [eax], eax; add byte ptr [ebx - 0x7af0fd07], al; ret 0xfffe; 
0x5050f3cb  # das; add al, byte ptr [eax]; leave; ret 8; 
0x50513c73  # das; add eax, dword ptr [eax]; push esi; call 0x16412; pop ecx; ret; 
0x5050ae44  # das; jne 0xae49; add cl, cl; ret 0x14; 
0x5052f20e  # das; jno 0x2f210; call ptr [ecx + 0x59]; leave; ret; 
0x5050e4de  # dec byte ptr [ebx - 0x3e2c0828]; ret 0x30a; 
0x505152a7  # dec byte ptr [edx + 0x18462a06]; mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; ret; 
0x50526434  # dec dword ptr [0x5055d448]; ret; 
0x5052d818  # dec dword ptr [eax - 0x36a0feb8]; ret; 
0x5052592f  # dec dword ptr [eax]; ret; 
0x505276aa  # dec dword ptr [ebp + 0x5068d845]; ret; 
0x50532ff8  # dec dword ptr [ebp + 0x5b5eff47]; pop edi; ret; 
0x50516f35  # dec dword ptr [ebx + 0x24448bd8]; or al, 0x59; call 0x16de3; pop ebx; ret; 
0x5051fd5b  # dec dword ptr [ebx + 0x33106ac7]; ret; 
0x50540f18  # dec dword ptr [ebx + 0x46a0c75]; call 0x38c24; pop ecx; ret; 
0x5053429b  # dec dword ptr [ebx + 0x5b102444]; pop esi; pop edi; ret; 
0x5054243d  # dec dword ptr [ebx + 0x5b5e5f00]; leave; ret; 
0x50509b93  # dec dword ptr [ebx + 0x5b5e5fc6]; pop ebp; ret 0x10; 
0x5051dbb7  # dec dword ptr [ebx + 0x5b5e5fc7]; leave; ret; 
0x5051dcf6  # dec dword ptr [ebx + 0x5b5e5fc7]; pop ebp; ret; 
0x5051d03c  # dec dword ptr [ebx + 0x5d5e5fc7]; ret; 
0x50502de4  # dec dword ptr [ebx + 0x5e5b5fc3]; pop ebp; ret 8; 
0x5050ab90  # dec dword ptr [ebx + 0x75f33bf0]; or byte ptr [ebx + 0x4de9ffc8], al; add al, byte ptr [eax]; add byte ptr [ebx + 0x3b571045], cl; ret; 
0x505063bf  # dec dword ptr [ebx + 0x75f685f0]; pop es; or eax, 0xffffffff; pop esi; ret 4; 
0x5053398f  # dec dword ptr [ebx - 0x3b7cf3bb]; or al, 0x3b; ret; 
0x505499f8  # dec dword ptr [ebx - 0x3b7cf7bb]; or al, 0x5b; pop ebp; ret; 
0x505317a7  # dec dword ptr [ebx - 0x74f7dbbc]; dec esp; and al, 4; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5050dd6c  # dec dword ptr [ebx - 0x75ac1439]; xchg cl, al; or al, byte ptr [eax]; add byte ptr [eax - 0x797503bb], cl; ret 0xa; 
0x5051f62b  # dec dword ptr [ebx - 0x7aa6a630]; sal byte ptr [ebp + 1], cl; ret; 
0x5051694d  # dec dword ptr [ecx + 0x24448b06]; adc al, 0x89; xchg esp, ebp; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x5051e074  # dec dword ptr [ecx + 0x2eb0c46]; mov eax, ebp; pop ebp; pop edi; pop esi; ret; 
0x5051e985  # dec dword ptr [ecx + 0x458b0846]; mov byte ptr [ebx], bh; ret; 
0x50519aae  # dec dword ptr [ecx + 0x758df045]; call 0x8bf61846; ret; 
0x5051d0cd  # dec dword ptr [ecx - 0x3974efba]; pop esi; leave; ret; 
0x50525e30  # dec dword ptr [ecx - 0x7b]; leave; jg 0x25e2d; pop esi; ret; 
0x5052873d  # dec dword ptr [ecx - 0x977b]; inc dword ptr [ebx]; ret; 
0x5050885a  # dec dword ptr [edi]; test bl, bh; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x5050ef71  # dec dword ptr [edi]; test byte ptr [edi], bl; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50523502  # dec dword ptr [edi]; xchg esp, eax; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x50526436  # dec eax; aam 0x55; push eax; ret; 
0x5052c183  # dec eax; adc al, 0x5b; leave; ret; 
0x5052b4f2  # dec eax; adc byte ptr [eax], al; add byte ptr [ecx + 0x104c88], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5050db1b  # dec eax; add al, byte ptr [eax]; leave; ret 0xc; 
0x5052d81a  # dec eax; add dword ptr [edi - 0x37], ebx; ret; 
0x5051d91d  # dec eax; and byte ptr [edi], cl; pushfd; ret 0xc28b; 
0x50516804  # dec eax; dec eax; jne 0x16828; push 0x38; pop eax; ret; 
0x50515c2e  # dec eax; inc eax; pop edi; pop ebp; ret; 
0x50519748  # dec eax; iretd; add byte ptr [eax], al; pop ecx; ret; 
0x5051e3a2  # dec eax; je 0x1e3a9; or eax, 0xffffffff; ret; 
0x5051e39f  # dec eax; je 0x1e3ae; dec eax; je 0x1e3a9; or eax, 0xffffffff; ret; 
0x505391b4  # dec eax; je 0x391ba; xor eax, eax; ret; 
0x50516805  # dec eax; jne 0x16828; push 0x38; pop eax; ret; 
0x50519741  # dec eax; jne 0x19757; push dword ptr [esi + 0x30]; call 0x26694; pop ecx; ret; 
0x5050112b  # dec eax; leave; push ebp; push eax; call dword ptr [0x5054a020]; ret; 
0x5050114c  # dec eax; leave; push ebp; push eax; call dword ptr [0x5054a024]; ret; 
0x50528734  # dec eax; mov ah, 0; add byte ptr [ebx - 0xa773], cl; dec dword ptr [ecx - 0x977b]; inc dword ptr [ebx]; ret; 
0x50509855  # dec eax; mov dword ptr [0x75ff5054], eax; or al, ch; ret; 
0x5053600e  # dec eax; or al, 0; add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x5052bdeb  # dec eax; or al, 0x5b; leave; ret; 
0x5051c8b2  # dec eax; or byte ptr [ebp - 0x74f3febc], cl; dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x50542da6  # dec eax; or byte ptr [ebx - 0x37], bl; ret; 
0x50521917  # dec eax; pop eax; mov dword ptr [eax + 0x54], ecx; ret; 
0x505410f4  # dec eax; pop ebp; ret; 
0x5052dc74  # dec eax; pop ecx; pop ecx; pop ebp; ret; 
0x5051618b  # dec eax; popal; push ecx; push eax; pop edi; ret; 
0x50521914  # dec eax; push eax; mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x5052191a  # dec eax; push esp; ret; 
0x5052c645  # dec eax; sbb al, 0x5b; leave; ret; 
0x50515793  # dec eax; sbb byte ptr [ebx - 0x3dd4ebc0], cl; add eax, ecx; ret; 
0x5054112c  # dec eax; sbb byte ptr [edi], cl; xchg esp, eax; ret 0xc28b; 
0x5051d776  # dec eax; xor byte ptr [ebp + 4], dh; xor eax, eax; inc eax; ret; 
0x505333f3  # dec ebp; adc al, 0x83; les ecx, ptr [ecx + ecx*4]; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x5053d933  # dec ebp; adc byte ptr [ecx - 0x71f003a3], cl; push ebp; add dword ptr [eax], eax; add dh, dh; ret; 
0x5050ab9b  # dec ebp; add al, byte ptr [eax]; add byte ptr [ebx + 0x3b571045], cl; ret; 
0x5052d68f  # dec ebp; add byte ptr [eax], al; add esp, 0xc; pop edi; leave; ret; 
0x5050a126  # dec ebp; add byte ptr [edx], 0; leave; ret 8; 
0x50532b6a  # dec ebp; clc; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5052b7bc  # dec ebp; clc; mov dword ptr [eax + 0x104c], ecx; pop esi; leave; ret; 
0x5052a55b  # dec ebp; clc; mov dword ptr [eax + 0x84], ecx; pop esi; leave; ret; 
0x50504c4f  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0x10; 
0x5050ae3f  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0x14; 
0x50505ba3  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0x1c; 
0x5050858d  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0x20; 
0x505059b2  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0x24; 
0x50505ee1  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0x2c; 
0x5050126c  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 0xc; 
0x5050133b  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret 8; 
0x5053a103  # dec ebp; cld; xor ecx, ebp; call 0x32377; leave; ret; 
0x5052d817  # dec ebp; dec dword ptr [eax - 0x36a0feb8]; ret; 
0x50503726  # dec ebp; in al, dx; add al, byte ptr [eax]; leave; ret 0xc; 
0x5053ab49  # dec ebp; inc dword ptr [eax - 0x1f7c3e75]; add ebp, dword ptr [ebx]; ret; 
0x50533113  # dec ebp; lock and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5053391b  # dec ebp; lock and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x50544ca6  # dec ebp; mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x5054458f  # dec ebp; or al, 0x89; sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x50541d33  # dec ebp; or byte ptr [eax - 0x76fc14e1], cl; pop ebp; or byte ptr [ebx], bh; ret; 
0x50545ccf  # dec ebp; or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5052481e  # dec ebp; or byte ptr [ebx - 0x7c2dccff], cl; in al, dx; or al, 0x3b; ret 0x475; 
0x5053e415  # dec ebp; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x5052d812  # dec ebp; or ecx, dword ptr [eax - 0xb275f8]; mov byte ptr [eax + 1], cl; pop edi; leave; ret; 
0x50531344  # dec ebp; ret 0x7fe8; 
0x50548e3f  # dec ebp; sbb al, 0x8a; add dword ptr [edx], edi; ret; 
0x5051fe52  # dec ebp; sbb byte ptr [ebx], al; ret 0x4589; 
0x50544e8b  # dec ebp; test byte ptr [ebx], bh; ret 0x840f; 
0x50528a28  # dec ebx; cdq; add byte ptr [eax], al; add ebp, 0x6c; leave; ret; 
0x505148a3  # dec ecx; add dword ptr [eax], eax; pop ecx; pop ecx; ret; 
0x50501a10  # dec ecx; daa; add al, 0x80; call 0x11aa; or eax, 0xffffffff; ret 8; 
0x5050d92a  # dec ecx; dec edx; add al, byte ptr [eax]; add ebp, 0xf94; leave; ret 0xc; 
0x50539cb0  # dec ecx; jne 0x39c83; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x50509769  # dec ecx; jne 0x9743; pop edi; pop esi; ret; 
0x50543668  # dec ecx; mov eax, dword ptr [ebp + 8]; sub eax, ecx; dec eax; pop ebp; ret; 
0x5050af8f  # dec ecx; pop ebx; pop esi; pop edi; ret 8; 
0x50547798  # dec ecx; ret 0x10; 
0x505473c2  # dec ecx; ret 0x14; 
0x505479e0  # dec ecx; ret 0x20; 
0x50547b48  # dec ecx; ret 0xc; 
0x5051706e  # dec ecx; ret; 
0x50525e31  # dec ecx; test ecx, ecx; jg 0x25e2d; pop esi; ret; 
0x50521f31  # dec ecx; xor al, byte ptr [eax]; add byte ptr [esi - 0x18], dl; sub ebp, dword ptr [edx - 0x3b7c0001]; adc al, 0x5e; ret; 
0x5050d45c  # dec edi; add al, byte ptr [eax]; leave; ret 0xc; 
0x5052d4a7  # dec edi; add byte ptr [eax], al; add esp, 0xc; pop esi; leave; ret; 
0x5051f25b  # dec edi; add byte ptr [eax], al; leave; ret; 
0x50513e0f  # dec edi; add byte ptr [eax], al; xor eax, eax; add esp, 0xc; inc eax; ret; 
0x505277ff  # dec edi; or byte ptr [ebx], ch; ret 0xca2b; 
0x5053c3e2  # dec edx; add al, 0x78; or dword ptr [ebx + 0x1b60f0a], ecx; inc ecx; mov dword ptr [edx], ecx; ret; 
0x5050d92b  # dec edx; add al, byte ptr [eax]; add ebp, 0xf94; leave; ret 0xc; 
0x5052d8c3  # dec edx; add byte ptr [eax], al; add ebp, 0x8c; leave; ret; 
0x50542c29  # dec edx; idiv esi; dec ecx; ret; 
0x50524292  # dec edx; jne 0x24289; ret; 
0x5052d721  # dec edx; jne 0x2d6fb; pop edi; pop esi; ret; 
0x5052f862  # dec edx; jne 0x2f853; pop esi; ret; 
0x50517932  # dec edx; ret 1; 
0x50525172  # dec edx; rol byte ptr [eax], cl; add byte ptr [ebx - 0x3874f33c], al; pop edi; pop esi; ret; 
0x50526427  # dec esi; adc al, 0; add byte ptr [ebx + 0x18a30cc4], al; loope 0x26487; push eax; ret; 
0x5052f7a1  # dec esi; adc al, 0x74; pop es; call 0x2f707; pop esi; ret; 
0x5051525e  # dec esi; adc byte ptr [ebx + 0x44881856], cl; adc edi, edi; pop edi; ret; 
0x505152ae  # dec esi; adc byte ptr [ebx + 0x44881856], cl; adc edi, edi; ret; 
0x50515522  # dec esi; adc byte ptr [edx], al; ret; 
0x5050d4b0  # dec esi; add al, byte ptr [eax]; leave; ret 0xc; 
0x5052d59b  # dec esi; add byte ptr [eax], al; add esp, 0xc; pop edi; leave; ret; 
0x5050af8d  # dec esi; and al, 0x49; pop ebx; pop esi; pop edi; ret 8; 
0x5051159e  # dec esi; and eax, 0x59590002; ret; 
0x50515c2d  # dec esi; dec eax; inc eax; pop edi; pop ebp; ret; 
0x50539230  # dec esi; jne 0x3922a; pop edi; pop esi; ret; 
0x50509730  # dec esi; jne 0x9714; pop esi; ret; 
0x50525a56  # dec esi; jns 0x25a32; pop edi; lea eax, [esi + 1]; pop esi; ret; 
0x5053b942  # dec esi; sbb al, 0x33; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret; 
0x50510725  # dec esi; sbb al, 2; add cl, cl; ret 0x14; 
0x50524349  # dec esi; sbb al, 3; ret 0xc13b; 
0x5051613d  # dec esi; sbb al, ch; add eax, 0x5ffffffd; pop esi; leave; ret; 
0x50524338  # dec esi; sbb byte ptr [ebx], al; ret 0xc13b; 
0x5053ff0e  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x5052b4f8  # dec esp; adc byte ptr [eax], al; add byte ptr [ebx - 0x37], bl; ret; 
0x5052b418  # dec esp; adc byte ptr [eax], al; add byte ptr [esi - 0x37], bl; ret; 
0x5050d732  # dec esp; add al, byte ptr [eax]; leave; ret 8; 
0x5051658a  # dec esp; add dword ptr [eax], eax; add byte ptr [ebx + 0x16487], cl; add byte ptr [ebx], bh; ret; 
0x50515d6d  # dec esp; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50515e8b  # dec esp; add dword ptr [eax], eax; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5051651b  # dec esp; add dword ptr [eax], eax; add byte ptr [ecx + 0x2d049f], cl; add byte ptr [ecx + 0x2d009f], cl; add byte ptr [ebx], bh; ret; 
0x50516b27  # dec esp; and al, 0x10; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a8a  # dec esp; and al, 0x10; mov dword ptr [eax + 0x124], ecx; ret; 
0x50516bd8  # dec esp; and al, 0x10; mov dword ptr [eax + 0x138], ecx; ret; 
0x5052a8dd  # dec esp; and al, 0x10; mov eax, dword ptr [esp + 0xc]; call 0x2a44c; pop ecx; ret; 
0x5052bb0f  # dec esp; and al, 0x10; mov eax, dword ptr [esp + 0xc]; call 0x2b5d0; pop ecx; ret; 
0x5052bb22  # dec esp; and al, 0x10; mov edx, dword ptr [esp + 0xc]; call 0x2b6b4; pop ecx; ret; 
0x505232e0  # dec esp; and al, 0xc; call 0x2307b; pop ecx; ret; 
0x5052a908  # dec esp; and al, 0xc; call 0x2a1fa; pop ecx; ret; 
0x5053676b  # dec esp; and al, 0xc; jne 0x36779; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x50516b1d  # dec esp; and al, 0xc; mov dword ptr [eax + 0x11c], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x5051c914  # dec esp; and al, 4; cmp ecx, eax; jbe 0x1c91e; xor eax, eax; ret; 
0x5052421b  # dec esp; and al, 4; mov dword ptr [eax + 4], ecx; ret; 
0x5051f265  # dec esp; and al, 4; mov dword ptr [ecx + 0x10], eax; ret; 
0x505317ad  # dec esp; and al, 4; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5051d6fd  # dec esp; and al, 4; mov dword ptr [ecx + 8], eax; ret; 
0x50533be7  # dec esp; and al, 4; sub eax, ecx; ret; 
0x50516766  # dec esp; and al, 4; xor eax, eax; cmp dword ptr [ecx + 0x10], eax; setne al; ret; 
0x50516b4a  # dec esp; and al, 8; add dword ptr [eax + 0x124], ecx; ret; 
0x50516ac0  # dec esp; and al, 8; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b70  # dec esp; and al, 8; mov dword ptr [eax + 0x128], ecx; ret; 
0x50516bce  # dec esp; and al, 8; mov dword ptr [eax + 0x134], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x5050c7ce  # dec esp; and al, 8; mov dword ptr [eax + 0x32d8], ecx; xor eax, eax; ret 8; 
0x505169fd  # dec esp; and al, 8; mov dword ptr [eax + 0xd8], ecx; ret; 
0x5051c8b9  # dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x5052a6b8  # dec esp; and bh, bh; call ptr [ecx + 0x59]; ret; 
0x5050ab27  # dec esp; js 0xab2c; add cl, cl; ret 0xc; 
0x50547748  # dec esp; mov al, byte ptr [0x458b5054]; mov al, 0x3b; ret; 
0x50514338  # dec esp; mov al, byte ptr [0x75ff5054]; or al, 0xff; adc eax, 0x5054a03c; pop ebp; ret 0xc; 
0x5050c8db  # dec esp; mov al, byte ptr [0xc0335054]; ret 8; 
0x50539395  # dec esp; push cs; sbb eax, 0x80d18a10; ret 0xeb20; 
0x505112eb  # dec esp; retf 0x5055; call dword ptr [0x5054a020]; ret; 
0x50511355  # dec esp; retf 0x5055; call dword ptr [0x5054a024]; ret; 
0x50509f27  # dec esp; test byte ptr [edx], al; add cl, cl; ret 0xc; 
0x505167c2  # dec esp; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x50527cf3  # dec esp; xor eax, 0xe85051f8; ret; 
0x50533a8f  # div byte ptr [ebp + 0xf]; call 0x3a195; mov dword ptr [eax], 0xc; xor eax, eax; pop esi; ret; 
0x50511543  # div byte ptr [ebp + 2]; pop esi; ret; 
0x505247a3  # div byte ptr [ebp + 4]; xor eax, eax; pop esi; ret; 
0x50541095  # div byte ptr [ebp + 5]; push 0x18; pop eax; pop esi; ret; 
0x5051686b  # div byte ptr [ebp + 6]; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x505063c3  # div byte ptr [ebp + 7]; or eax, 0xffffffff; pop esi; ret 4; 
0x50533c2c  # div byte ptr [ebp - 0xf]; pop ebx; pop esi; ret; 
0x505235c1  # div byte ptr [edi + eax + 0x56]; call 0x1c966; pop ecx; pop esi; ret; 
0x5053436d  # div byte ptr [edi - 9]; ret 0; 
0x50548817  # div byte ptr [edx + eax - 0x77]; push es; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x5053424e  # div byte ptr [esi + ebx - 9]; ret 0; 
0x5051491e  # div dword ptr [edi - 0x63]; jb 0x148c5; xor eax, eax; pop edi; pop esi; ret; 
0x5051c90f  # div dword ptr [esp + 8]; mov ecx, dword ptr [esp + 4]; cmp ecx, eax; jbe 0x1c91e; xor eax, eax; ret; 
0x5054886b  # div ecx; pop esi; ret 4; 
0x5050d4f5  # fadd dword ptr [eax]; add byte ptr [eax], al; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; pop esi; ret 8; 
0x5050d4d0  # fadd dword ptr [eax]; add byte ptr [eax], al; pop esi; ret 4; 
0x50516a02  # fadd dword ptr [eax]; add byte ptr [eax], al; ret; 
0x5050d525  # fadd dword ptr [eax]; add byte ptr [eax], al; xor eax, eax; inc eax; ret 0xc; 
0x50536750  # fadd dword ptr [ebx + 0x5e5b00da]; pop edi; ret 0x10; 
0x50542f15  # fadd dword ptr [ebx + 0x5e5d00da]; pop edi; ret 0x10; 
0x5053fe68  # fadd dword ptr [ebx + 0x7400e47d]; or byte ptr [edx], ch; call 0x38c24; pop ecx; ret; 
0x5050e043  # fadd dword ptr [ebx]; pop ebp; in al, 0x8b; ret 0xbc8d; 
0x5050e41c  # fadd dword ptr [ebx]; pop ebp; ror byte ptr [ebp - 0x68ec6c], 1; sub al, byte ptr [ebx - 0x3f]; ret 0x8b0a; 
0x5051e19b  # fadd dword ptr [ecx + 1]; add cl, cl; ret; 
0x50516baf  # fadd qword ptr [eax]; add byte ptr [eax], al; push eax; call dword ptr [0x5054a028]; ret; 
0x50516b8a  # fadd qword ptr [eax]; add byte ptr [eax], al; ret; 
0x5052513b  # fadd qword ptr [eax]; add byte ptr [ebx + 0x37890cc4], al; mov eax, edi; pop edi; ret; 
0x50502c92  # fadd qword ptr [ebx + 4]; add byte ptr [ebx], bh; ret; 
0x50530e76  # faddp st(1); ret; 
0x50531783  # fbstp tbyte ptr [ecx + 0x5f59fffe]; pop esi; ret; 
0x50530ffd  # fcmovb st(0), st(1); ret; 
0x50532e8e  # fcom dword ptr [edi - 0x75]; ret; 
0x5052839f  # fcomp dword ptr [ebx]; rcr byte ptr [ecx - 9], 0xd0; pop ecx; and eax, 0x5054bc28; ret; 
0x505410ee  # fcomp dword ptr [ebx]; sal bh, 0xd8; pop ecx; dec eax; pop ebp; ret; 
0x5051df56  # fcomp dword ptr [ecx + 0x1b]; rol byte ptr [eax + 0x5e], 0x5d; ret; 
0x50535d9b  # fcomp dword ptr [ecx + 0x1b]; shr bl, 2; xor eax, eax; pop esi; pop ebp; ret; 
0x505410f2  # fcomp dword ptr [ecx + 0x48]; pop ebp; ret; 
0x5052782c  # fcomp dword ptr [edi + 0x5e]; ret; 
0x50543b5e  # fcomp dword ptr [esi + 0x5d]; ret; 
0x50519581  # fcos; call dword ptr [esi + 0x68]; ret 0x515f; 
0x5051ef3b  # fcos; call ptr [ecx + 0x5f]; pop esi; ret; 
0x5050e45f  # fdiv dword ptr [ebx]; fild word ptr [ebx]; pop ebp; in al, 0x8d; mov word ptr [ebx], cs; ret; 
0x5050c78e  # fdiv dword ptr [edx]; add byte ptr [eax], al; ret 4; 
0x5050c7d3  # fdiv dword ptr [edx]; add byte ptr [eax], al; xor eax, eax; ret 8; 
0x5050c8d4  # fdiv qword ptr [edx]; add byte ptr [eax], al; push eax; call dword ptr [0x5054a04c]; xor eax, eax; ret 8; 
0x5050e484  # fdiv st(7); rol ecx, cl; ret 0x30a; 
0x5053bfa0  # fdivr dword ptr [ebx]; fimul word ptr [edi]; test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x50510588  # fdivr dword ptr [ebx]; ret; 
0x50531e99  # fdivr qword ptr [ebx]; ret; 
0x50520e7a  # fdivr qword ptr [edx + 0xc40c798]; jbe 0x20ed6; xor dl, byte ptr [eax]; ret; 
0x505096f9  # fdivr qword ptr [edx + 0xc40c798]; jbe 0x9755; xor dl, byte ptr [eax]; ret; 
0x50533b53  # fdivr st(7), st(0); ret 2; 
0x50530ef5  # ffreep st(1); ret; 
0x50542f17  # fiadd dword ptr [eax]; pop ebp; pop esi; pop edi; ret 0x10; 
0x50536752  # fiadd dword ptr [eax]; pop ebx; pop esi; pop edi; ret 0x10; 
0x50536a1f  # fiadd dword ptr [eax]; pop ebx; ret 0x10; 
0x5053fceb  # ficom word ptr [ebp + 0x50]; call 0x3738a; pop ecx; ret; 
0x5053fca2  # ficom word ptr [ebp + 0x50]; mov dword ptr [0x5055de8c], eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x5053fca7  # ficom word ptr [ebp + 0x50]; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x5053e0a3  # ficom word ptr [ebp + 0x50]; pop ebp; ret; 
0x50541293  # ficom word ptr [ebp + 0x50]; ret; 
0x50542fc1  # ficom word ptr [ebp + 0x50]; sete cl; mov eax, ecx; ret; 
0x50537a77  # ficomp word ptr [edi + 0x5d]; ret; 
0x50525ba9  # fidiv dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50511fd8  # fild dword ptr [ebp + 0x2b517ec0]; ret; 
0x505147e6  # fild dword ptr [ecx]; add byte ptr [ecx + 0x2640c5], al; add cl, cl; ret 0x20; 
0x5051cb82  # fild word ptr [ebp + 0x5fce7fdb]; pop esi; pop ebx; ret; 
0x5050e461  # fild word ptr [ebx]; pop ebp; in al, 0x8d; mov word ptr [ebx], cs; ret; 
0x5050e313  # fild word ptr [ebx]; pop ebp; les ecx, ptr [ebp - 0x3056f464]; fimul word ptr [ebx - 0x3f]; ret; 
0x5050b434  # fild word ptr [ebx]; ret; 
0x5050437f  # fild word ptr [edx]; add cl, cl; ret 4; 
0x505215bf  # fimul dword ptr [ebp - 0x77e2fa6d]; add al, 0x81; ret; 
0x5050e13e  # fimul dword ptr [ebx]; ret; 
0x5050e31c  # fimul word ptr [ebx - 0x3f]; ret; 
0x5053bfa2  # fimul word ptr [edi]; test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x50518ebc  # fist dword ptr [edi + 0x3b]; ret; 
0x50546cd5  # fist word ptr [ebp + 0x50]; pop esi; leave; ret 4; 
0x50546d1b  # fist word ptr [ebp + 0x50]; test eax, eax; jne 0x46d28; or eax, 0xffffffff; ret 0xc; 
0x505474e8  # fist word ptr [ebp + 0x50]; test eax, eax; jne 0x474f2; ret 4; 
0x50547515  # fist word ptr [ebp + 0x50]; test eax, eax; jne 0x47520; pop ebp; ret 8; 
0x50526f87  # fistp dword ptr [ecx - 1]; call ptr [ecx + 0x5e]; ret; 
0x50531e42  # fisttp dword ptr [ebx + 0x76ac475]; call 0x38c24; pop ecx; ret; 
0x5050e511  # fisttp word ptr [ebx + 0xbd0f7c2]; ret; 
0x5050e9a6  # fisubr dword ptr [edi + edi*8]; inc dword ptr [ebp - 0x74fb8a40]; ret; 
0x5050e17b  # fldenv [ebx]; fimul dword ptr [ebx]; ret; 
0x50516f37  # fmul dword ptr [ebx + 0x590c2444]; call 0x16de3; pop ebx; ret; 
0x50542148  # fmul dword ptr [ebx + 0xa6ae075]; call 0x38c24; pop ecx; ret; 
0x50518f15  # fmul dword ptr [ebx - 0x17acf3bb]; stosd dword ptr es:[edi], eax; ret 0xffff; 
0x5050b427  # fmul dword ptr [ebx - 0x1d7c663f]; add eax, dword ptr [ebx]; ret 0xf8c1; 
0x505366a6  # fnclex; pop ebp; ret; 
0x5050e41a  # fnstenv [ebx]; fadd dword ptr [ebx]; pop ebp; ror byte ptr [ebp - 0x68ec6c], 1; sub al, byte ptr [ebx - 0x3f]; ret 0x8b0a; 
0x50508916  # fnstsw word ptr [ebx]; ret; 
0x50514985  # fnstsw word ptr [edi]; add byte ptr [esi - 0x18], dl; xlatb; jg 0x1498e; add byte ptr [ecx + 0x59], bl; ret; 
0x50537540  # fst qword ptr [ecx]; add byte ptr [eax], al; ret; 
0x50501ad7  # fstp xword ptr [ebx]; ret; 
0x5051cb84  # fstp xword ptr [edi - 0x32]; pop edi; pop esi; pop ebx; ret; 
0x50514968  # fsubp st(3); add cl, byte ptr [ebx + 0x2bc78bfe]; ret; 
0x505276ad  # fsubr dword ptr [eax + 0x50]; ret; 
0x505276a5  # fsubr st(0); mov ebx, 0x8dffff52; inc ebp; fsubr dword ptr [eax + 0x50]; ret; 
0x5052e0b7  # fucomi st(0); ret; 
0x50509e51  # hlt; add byte ptr [eax], al; add byte ptr [edi + 0x5e], bl; ret 8; 
0x5052d598  # hlt; call 0x323c0; add esp, 0xc; pop edi; leave; ret; 
0x50504889  # hlt; call 0x72004892; ret; 
0x505390df  # hlt; mov esp, ebp; pop ebp; ret; 
0x50540e1d  # hlt; pop ebp; ret; 
0x50524294  # hlt; ret; 
0x50521dd8  # hlt; sgdt [eax]; add esp, 0xc; pop ebx; leave; ret; 
0x50549b7f  # hlt; xchg esi, edi; dec ecx; ret; 
0x50501ab8  # idiv bh; inc dword ptr [ebx + 0x5e5bffc8]; pop ebp; ret 0xc; 
0x50519794  # idiv bh; inc dword ptr [ebx + 0x7e8910c4]; sub al, 0x5b; leave; ret; 
0x50549226  # idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x5051f61b  # idiv ecx; mov eax, edx; ret; 
0x5052aadb  # idiv edi; call ptr [ecx + 0x59]; leave; ret; 
0x5051d9fc  # idiv edi; call ptr [ecx + 0x59]; xor eax, eax; leave; ret; 
0x50542b82  # idiv esi; dec ecx; ret; 
0x50531ed5  # imul eax, dword ptr [eax], 0; mov dword ptr [eax], esi; call 0x38721; ret; 
0x50531b2c  # imul eax, dword ptr [eax], 0; pop ecx; pop ecx; ret; 
0x50531b40  # imul eax, dword ptr [eax], 0; ret; 
0x5052dc08  # imul eax, dword ptr [edi], 0; add ebp, 0x18c; leave; ret; 
0x50549228  # imul eax, eax, 0x15180; leave; ret; 
0x505487dd  # imul edi, ebp, 0xc68bffff; call 0x484f2; pop esi; ret 4; 
0x5050a674  # imul edi, edi, -1; or eax, 0xffffffff; pop esi; pop ebp; ret 0xc; 
0x505152f9  # imul esi, dword ptr [esi], 0x1cc48300; pop edi; pop esi; ret; 
0x505050b5  # imul esp, edi, -1; call dword ptr [edi - 0x77]; inc ebp; or al, 0xe8; ret 0xffc5; 
0x5050dddf  # in al, 0; add byte ptr [eax], al; ret 4; 
0x505168b7  # in al, 0; add byte ptr [eax], al; ret; 
0x5053fe6b  # in al, 0; je 0x3fe77; push 0; call 0x38c24; pop ecx; ret; 
0x50510377  # in al, 0x2b; ret; 
0x505364f3  # in al, 0x33; fstp xword ptr [ebx]; ret; 
0x50512d63  # in al, 0x3b; ret; 
0x50509002  # in al, 0x5f; pop esi; xor eax, eax; pop ebx; ret 0x10; 
0x50544021  # in al, 0x6c; push ebp; push eax; ret; 
0x5052d516  # in al, 0x83; ret 0x8304; 
0x5050e046  # in al, 0x8b; ret 0xbc8d; 
0x50522bc2  # in al, 0x8b; ret; 
0x5050e464  # in al, 0x8d; mov word ptr [ebx], cs; ret; 
0x50516b84  # in al, 0xa0; push esp; push eax; mov eax, dword ptr [eax + 0xdc]; ret; 
0x5051e3cd  # in al, 0xa0; push esp; push eax; neg eax; sbb eax, eax; ret; 
0x50538f74  # in al, 0xa1; push esp; push eax; leave; ret; 
0x50532367  # in al, 0xe8; mov ah, 0x63; add byte ptr [eax], al; ret; 
0x50537090  # in al, 0xe8; mov edx, dword ptr [esi]; add byte ptr [eax], al; ret; 
0x50536f76  # in al, 0xe8; movsd dword ptr es:[edi], dword ptr [esi]; pop ss; add byte ptr [eax], al; ret; 
0x505372ff  # in al, 0xe8; sbb al, 0x14; add byte ptr [eax], al; ret; 
0x50536e99  # in al, 0xeb; ret; 
0x50502cae  # in al, 0xff; push dword ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 8; 
0x50503727  # in al, dx; add al, byte ptr [eax]; leave; ret 0xc; 
0x50516956  # in al, dx; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x50531b8d  # in al, dx; call 0x38a19; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; pop ebp; ret; 
0x505317cc  # in al, dx; jo 0x31752; mov eax, 0x42c; add eax, 0xc0330474; leave; ret; 
0x5051e3ee  # in al, dx; mov al, byte ptr [0xd08b5054]; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50538a29  # in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055d6a0], eax; pop ebp; ret; 
0x5053e09d  # in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de7c], eax; pop ebp; ret; 
0x5054129b  # in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de9c], eax; pop ebp; ret; 
0x505412aa  # in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055dea8], eax; pop ebp; ret; 
0x505412b9  # in al, dx; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055deac], eax; pop ebp; ret; 
0x50524825  # in al, dx; or al, 0x3b; ret 0x475; 
0x50521e75  # in al, dx; pop ecx; pop ecx; ret; 
0x50537b36  # in al, dx; pop esi; pop ebp; ret; 
0x5054191e  # in al, dx; xor eax, eax; pop edi; pop ebx; leave; ret; 
0x50538731  # in eax, 0x5d; push ecx; ret; 
0x50533cc0  # in eax, 0x5d; ret; 
0x50502e2b  # in eax, 0x8b; test byte ptr [eax + 0xf8], cl; ret 8; 
0x5053bfae  # in eax, 0xff; call dword ptr [eax - 0x75]; ret; 
0x5052a869  # in eax, 0xff; call ptr [ecx + 0x59]; pop esi; ret; 
0x5051e390  # in eax, 0xff; call ptr [ecx + 0x5e]; ret; 
0x50502be5  # in eax, 0xff; push dword ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 0xc; 
0x505035e4  # in eax, dx; add al, byte ptr [eax]; add ebp, 0x6c; leave; ret 0xc; 
0x505341e5  # in eax, dx; mov eax, dword ptr [esp + 0x10]; pop ebx; pop esi; pop edi; ret; 
0x50531386  # in eax, dx; sldt word ptr [eax]; leave; ret; 
0x5050f686  # in eax, dx; sub al, 2; add byte ptr [ecx + 0x1ffcc5], al; add cl, cl; ret 0xc; 
0x5051e1eb  # inc byte ptr [eax + 0x5d]; ret; 
0x50524264  # inc byte ptr [esi + 0x5959ffff]; pop esi; ret; 
0x505265ff  # inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x505265dc  # inc dword ptr [0x5055d448]; ret; 
0x50525926  # inc dword ptr [eax + 0x3b]; add dword ptr [ecx + esi*8 - 0x73], edi; add al, 0x81; dec dword ptr [eax]; ret; 
0x5051ce19  # inc dword ptr [eax + 0xc]; xor eax, eax; inc eax; ret; 
0x5053ab4a  # inc dword ptr [eax - 0x1f7c3e75]; add ebp, dword ptr [ebx]; ret; 
0x5053e08d  # inc dword ptr [eax]; add byte ptr [eax], al; call 0x3deb5; pop ecx; pop ecx; ret; 
0x50537a99  # inc dword ptr [eax]; add byte ptr [eax], al; call eax; add esp, 0xc; pop ebp; ret; 
0x50525acb  # inc dword ptr [eax]; add byte ptr [eax], al; ret; 
0x5050977c  # inc dword ptr [eax]; add byte ptr [eax], al; xor eax, dword ptr [edx*4 + 0x50555868]; mov dword ptr [ecx], eax; ret; 
0x5051eb07  # inc dword ptr [eax]; pop edi; pop esi; pop ebp; ret; 
0x50531444  # inc dword ptr [eax]; ret; 
0x50539187  # inc dword ptr [ebp + 0x330574c0]; rol byte ptr [eax - 0x15], 2; xor eax, eax; pop ebx; leave; ret; 
0x5053f0c9  # inc dword ptr [ebp - 0x17ca8a0a]; ret 0xffb0; 
0x5051cfac  # inc dword ptr [ebp - 0x74e88b40]; ret; 
0x5050e9a9  # inc dword ptr [ebp - 0x74fb8a40]; ret; 
0x50534ea5  # inc dword ptr [ebp - 0x74fb8b2e]; ret 0x1deb; 
0x5050181b  # inc dword ptr [ebx + 0x2ebffc8]; mov eax, ebx; pop edi; pop esi; pop ebx; ret 4; 
0x5050e7ff  # inc dword ptr [ebx + 0x37e8ffce]; sub eax, dword ptr [eax]; add cl, ch; ret 0; 
0x50539d3b  # inc dword ptr [ebx + 0x458b0cc4]; or byte ptr [ebx - 0x1a740383], cl; pop ebp; ret; 
0x5052792a  # inc dword ptr [ebx + 0x56000466]; call 0x2793a; add esp, 0xc; pop esi; ret; 
0x50524e69  # inc dword ptr [ebx + 0x59590020]; mov dword ptr [eax + 4], 0x1000; ret; 
0x50524214  # inc dword ptr [ebx + 0x59590020]; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x50507f50  # inc dword ptr [ebx + 0x5b5effc8]; pop edi; leave; ret 0x10; 
0x50548d9e  # inc dword ptr [ebx + 0x5b5effc8]; pop edi; leave; ret 8; 
0x505489da  # inc dword ptr [ebx + 0x5b5effc8]; pop edi; pop ebp; ret 4; 
0x5051bfcb  # inc dword ptr [ebx + 0x5b5f0cc4]; pop esi; pop ebp; ret; 
0x5051a6bf  # inc dword ptr [ebx + 0x5b5f24c4]; pop esi; pop ebp; ret; 
0x50509fd3  # inc dword ptr [ebx + 0x5b5fffc8]; pop esi; pop ebp; ret 0xc; 
0x5052da92  # inc dword ptr [ebx + 0x5d5e10c4]; ret; 
0x50541721  # inc dword ptr [ebx + 0x5d5e2cc4]; ret; 
0x5050a676  # inc dword ptr [ebx + 0x5d5effc8]; ret 0xc; 
0x50501aba  # inc dword ptr [ebx + 0x5e5bffc8]; pop ebp; ret 0xc; 
0x5052df89  # inc dword ptr [ebx + 0x5e5f0cc4]; pop ebp; ret; 
0x505199f7  # inc dword ptr [ebx + 0x5e5f0cc4]; pop ebx; leave; ret; 
0x5051a61c  # inc dword ptr [ebx + 0x5e5f0cc4]; pop ebx; pop ebp; ret; 
0x5052f696  # inc dword ptr [ebx + 0x5e5f10c4]; ret; 
0x50517c29  # inc dword ptr [ebx + 0x5e5f14c4]; pop ebx; leave; ret; 
0x5051ffe4  # inc dword ptr [ebx + 0x5e5f18c4]; leave; ret; 
0x5052a7c5  # inc dword ptr [ebx + 0x5e5f18c4]; ret; 
0x5052f138  # inc dword ptr [ebx + 0x5e5f1cc4]; pop ebx; leave; ret; 
0x5052d910  # inc dword ptr [ebx + 0x5e5f30c4]; ret; 
0x5050a58e  # inc dword ptr [ebx + 0x5e5fffc8]; pop ebp; ret 0xc; 
0x50504bfa  # inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0x10; 
0x5050ade7  # inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0x14; 
0x50506194  # inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0xc; 
0x5051dd4e  # inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret; 
0x50509167  # inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; pop ebp; ret 0x10; 
0x50502f8a  # inc dword ptr [ebx + 0x5e5fffc8]; ret 8; 
0x505024cd  # inc dword ptr [ebx + 0x5f5bffc8]; pop esi; leave; ret 0xc; 
0x50509897  # inc dword ptr [ebx + 0x5f5bffc8]; pop esi; pop ebp; ret 8; 
0x50517a65  # inc dword ptr [ebx + 0x5f5e28c4]; pop ebx; leave; ret; 
0x50509d07  # inc dword ptr [ebx + 0x67763f9]; mov dword ptr [esi + 0xe8], edi; pop edi; pop esi; ret 8; 
0x50509da8  # inc dword ptr [ebx + 0x67763f9]; mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e49  # inc dword ptr [ebx + 0x67763f9]; mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x5051cbb2  # inc dword ptr [ebx + 0x6890cc4]; ret; 
0x50537fa8  # inc dword ptr [ebx + 0x70e8ffc8]; pop es; add byte ptr [eax], al; ret; 
0x50533d72  # inc dword ptr [ebx + 0x76e90cc4]; add dword ptr [eax], eax; add cl, dl; call 0x3caec90; ret; 
0x50519796  # inc dword ptr [ebx + 0x7e8910c4]; sub al, 0x5b; leave; ret; 
0x5053f058  # inc dword ptr [ebx + 0x7f00087d]; aad 0x5e; pop ebx; pop ebp; ret; 
0x50536078  # inc dword ptr [ebx - 0x17aeef3f]; mov byte ptr [0x5900002b], al; pop ebp; ret; 
0x50541969  # inc dword ptr [ebx - 0x36a1df3c]; ret; 
0x50542ad5  # inc dword ptr [ebx - 0x377ceb3c]; call ptr [esi + 0x5d]; ret; 
0x50541eaa  # inc dword ptr [ebx - 0x377cffe0]; call ptr [edi + 0x5e]; pop ebp; ret; 
0x5051d2e8  # inc dword ptr [ebx - 0x3874df3c]; pop edi; pop esi; ret; 
0x5051d29b  # inc dword ptr [ebx - 0x3874e73c]; pop edi; pop esi; ret; 
0x50522be9  # inc dword ptr [ebx - 0x3874ef3c]; pop edi; pop esi; ret; 
0x5051d86f  # inc dword ptr [ebx - 0x3974eb3c]; pop esi; ret; 
0x5051cc16  # inc dword ptr [ebx - 0x3974ef3c]; pop esi; ret; 
0x50526003  # inc dword ptr [ebx - 0x3974f33c]; pop esi; ret; 
0x5053139c  # inc dword ptr [ebx - 0x3d74f33c]; ret; 
0x5051d055  # inc dword ptr [ebx - 0x3f7af33c]; jne 0x1d05f; leave; ret; 
0x5051ced3  # inc dword ptr [ebx - 0x3f7afb3c]; jne 0x1cedf; xor eax, eax; leave; ret; 
0x50523a57  # inc dword ptr [ebx - 0x3fcce33c]; pop esi; ret; 
0x5052293c  # inc dword ptr [ebx - 0x3fcce73c]; pop esi; ret; 
0x50547a75  # inc dword ptr [ebx - 0x3fccf33c]; inc eax; ret 8; 
0x50537d53  # inc dword ptr [ebx - 0x475cdb3c]; pop edi; push ebp; push eax; pop esi; ret; 
0x5052675c  # inc dword ptr [ebx - 0x597cef3c]; sub al, 1; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x5050ef6e  # inc dword ptr [ebx - 0x7bf00008]; pop ds; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50504943  # inc dword ptr [ebx - 0x7bf00008]; ret 0xfffe; 
0x5050f437  # inc dword ptr [ebx - 0x7cbf03bb]; ret; 
0x5052e0ec  # inc dword ptr [ebx - 0x7cfc7393]; ret; 
0x50518e87  # inc dword ptr [ebx - 0xc74ef3c]; call 0x14981; pop ebx; pop esi; ret; 
0x50528743  # inc dword ptr [ebx]; ret; 
0x505484cd  # inc dword ptr [ecx + 0x190c5]; add cl, cl; ret 8; 
0x505487ba  # inc dword ptr [ecx + 0x19cc5]; add cl, cl; ret 4; 
0x50548c86  # inc dword ptr [ecx + 0x1a4c5]; add cl, cl; ret 4; 
0x50549448  # inc dword ptr [ecx + 0xd0c5]; add cl, cl; ret; 
0x50538274  # inc dword ptr [ecx]; leave; ret; 
0x5051dcb3  # inc dword ptr [ecx]; pop edi; sete al; pop esi; ret; 
0x50537546  # inc dword ptr [edi - 0x75]; jne 0x37553; push 0xd; call 0x38c24; pop ecx; ret; 
0x5051f872  # inc dword ptr [edx + 0x2b]; ret 0xf88b; 
0x5051566a  # inc dword ptr [esi + 0x17c]; ret; 
0x505201f9  # inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x5053efed  # inc dword ptr [esi]; ret; 
0x505263f6  # inc eax; aam 0x55; push eax; pop esi; pop ebx; ret; 
0x50515796  # inc eax; adc al, 0x2b; ret 0xc103; 
0x505207d5  # inc eax; adc al, dh; loope 0x207ac; ret; 
0x5053c1e5  # inc eax; adc byte ptr [esi + 0x5d], bl; ret; 
0x5051469b  # inc eax; add al, 0x3b; ret; 
0x5052e2f5  # inc eax; add byte ptr [eax], al; add ebp, 0x450; leave; ret; 
0x50527ec0  # inc eax; add byte ptr [eax], al; leave; ret; 
0x50542693  # inc eax; add byte ptr [eax], al; pop ebp; ret; 
0x505147eb  # inc eax; add byte ptr es:[eax], al; leave; ret 0x20; 
0x5052ef28  # inc eax; add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop esi; ret; 
0x5052428e  # inc eax; add ecx, 4; dec edx; jne 0x24289; ret; 
0x50518cde  # inc eax; and al, 0x8b; push ecx; and al, 0x3b; ret 0x27e; 
0x505033d9  # inc eax; and byte ptr [ecx + 0xaa486], cl; add byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0x10; 
0x50541f51  # inc eax; cmp bh, 0xff; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x50515c55  # inc eax; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x50525927  # inc eax; cmp eax, dword ptr [ecx]; jl 0x2591d; lea eax, [ecx + eax*4]; dec dword ptr [eax]; ret; 
0x505479f8  # inc eax; cmp ecx, 0xf18; jb 0x479e9; xor eax, eax; ret 4; 
0x5053922f  # inc eax; dec esi; jne 0x3922a; pop edi; pop esi; ret; 
0x505167c1  # inc eax; dec esp; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x50540e17  # inc eax; inc ecx; cmp eax, dword ptr [ebp + 0xc]; jb 0x40e12; pop ebp; ret; 
0x5052dfdb  # inc eax; inc edx; cmp eax, dword ptr [esp + 4]; jl 0x2dfb8; or eax, 0xffffffff; ret; 
0x5053afcf  # inc eax; jb 0x3afd2; add byte ptr [ebx], ah; ret 0xc483; 
0x50536bca  # inc eax; je 0x36bd9; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5051eb3d  # inc eax; leave; ret; 
0x505384e0  # inc eax; loope 0x38538; push eax; pop ebp; ret; 
0x505384de  # inc eax; mov dword ptr [0x5055e140], eax; pop ebp; ret; 
0x505096fd  # inc eax; or al, 0x76; push esp; xor dl, byte ptr [eax]; ret; 
0x5052f507  # inc eax; or byte ptr [ebx - 0x37c4f7b7], cl; jbe 0x2f514; or eax, 0xffffffff; ret; 
0x50520e77  # inc eax; or dh, bh; fdivr qword ptr [edx + 0xc40c798]; jbe 0x20ed6; xor dl, byte ptr [eax]; ret; 
0x505096f6  # inc eax; or dh, bh; fdivr qword ptr [edx + 0xc40c798]; jbe 0x9755; xor dl, byte ptr [eax]; ret; 
0x505167d1  # inc eax; pop eax; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051681e  # inc eax; pop eax; test eax, eax; je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x50513ff6  # inc eax; pop ebp; ret 0x10; 
0x5051e1ec  # inc eax; pop ebp; ret; 
0x50520e60  # inc eax; pop ebx; call 0x32377; leave; ret; 
0x5051fde6  # inc eax; pop ebx; pop ebp; ret; 
0x50507518  # inc eax; pop ebx; pop edi; pop esi; leave; ret 8; 
0x50525a74  # inc eax; pop ecx; inc eax; ret; 
0x5051401f  # inc eax; pop ecx; pop ecx; ret 4; 
0x5051cfc4  # inc eax; pop edi; leave; ret; 
0x50515c2f  # inc eax; pop edi; pop ebp; ret; 
0x50531a47  # inc eax; pop edi; pop esi; pop ebp; ret 0xc; 
0x50512fc2  # inc eax; pop edi; pop esi; pop ebx; leave; ret 4; 
0x505077ac  # inc eax; pop edi; pop esi; pop ebx; leave; ret 8; 
0x5051c32b  # inc eax; pop edi; pop esi; pop ebx; leave; ret; 
0x50508e2e  # inc eax; pop edi; pop esi; pop ebx; pop ebp; ret 8; 
0x50522ff7  # inc eax; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x505119f2  # inc eax; pop edi; pop esi; ret 4; 
0x5050af02  # inc eax; pop edi; pop esi; ret 8; 
0x50538bbd  # inc eax; pop edi; pop esi; ret; 
0x505316e5  # inc eax; pop esi; call 0x32377; add ebp, 0x188; leave; ret; 
0x50513135  # inc eax; pop esi; leave; ret 0xc; 
0x5051482b  # inc eax; pop esi; pop ebp; ret 4; 
0x5051df5a  # inc eax; pop esi; pop ebp; ret; 
0x5050dac6  # inc eax; pop esi; pop ebx; pop edi; pop ebp; ret 0xc; 
0x5051c417  # inc eax; pop esi; pop ebx; ret; 
0x5050aea2  # inc eax; pop esi; pop edi; ret 4; 
0x5054881e  # inc eax; pop esi; ret 0xc; 
0x50513c5d  # inc eax; pop esi; ret; 
0x50544014  # inc eax; push 0x50552104; call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x505271e5  # inc eax; push eax; call 0x32dc2; pop ecx; pop esi; ret; 
0x50501028  # inc eax; ret 0xc; 
0x50547a7b  # inc eax; ret 8; 
0x50513e17  # inc eax; ret; 
0x50508e8f  # inc eax; retf 0x5055; pop edi; pop esi; ret; 
0x50528b21  # inc ebp; aam 0xe8; ret; 
0x5051217a  # inc ebp; adc al, 0x3b; ret 0x840f; 
0x50548eaf  # inc ebp; adc al, 0x3b; ret; 
0x50531f97  # inc ebp; adc al, 0x6b; rol byte ptr [edi], 0x2b; ret 0x4503; 
0x50522fa2  # inc ebp; adc byte ptr [ebx - 0x75], bh; inc esi; add al, 0x2b; ret; 
0x505032ba  # inc ebp; adc byte ptr [ebx], bh; ret; 
0x50539cfe  # inc ebp; adc byte ptr [ebx], ch; ret 0x4589; 
0x5050ac05  # inc ebp; adc byte ptr [ebx], ch; ret; 
0x5050aba0  # inc ebp; adc byte ptr [edi + 0x3b], dl; ret; 
0x5054909b  # inc ebp; and byte ptr [edx - 0x75], bl; inc ebp; sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x5052474b  # inc ebp; call 0xc95da5b0; ret; 
0x5053e336  # inc ebp; clc; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50538715  # inc ebp; clc; lea eax, [ebp - 0x10]; mov dword ptr fs:[0], eax; ret; 
0x5051e3f5  # inc ebp; clc; leave; ret; 
0x5052a696  # inc ebp; clc; mov dword ptr [edi + 0x84], eax; pop esi; leave; ret; 
0x505157f5  # inc ebp; cld; leave; ret; 
0x50516f22  # inc ebp; cld; pop esi; pop ebx; leave; ret; 
0x50543bc3  # inc ebp; cld; pop esi; pop edi; leave; ret; 
0x5050e92e  # inc ebp; cmp al, byte ptr [edx]; add cl, cl; ret 8; 
0x5051d0cc  # inc ebp; dec dword ptr [ecx - 0x3974efba]; pop esi; leave; ret; 
0x50510587  # inc ebp; fdivr dword ptr [ebx]; ret; 
0x50531e98  # inc ebp; fdivr qword ptr [ebx]; ret; 
0x505276ac  # inc ebp; fsubr dword ptr [eax + 0x50]; ret; 
0x50510376  # inc ebp; in al, 0x2b; ret; 
0x505364f2  # inc ebp; in al, 0x33; fstp xword ptr [ebx]; ret; 
0x50512d62  # inc ebp; in al, 0x3b; ret; 
0x50532366  # inc ebp; in al, 0xe8; mov ah, 0x63; add byte ptr [eax], al; ret; 
0x5053708f  # inc ebp; in al, 0xe8; mov edx, dword ptr [esi]; add byte ptr [eax], al; ret; 
0x50536f75  # inc ebp; in al, 0xe8; movsd dword ptr es:[edi], dword ptr [esi]; pop ss; add byte ptr [eax], al; ret; 
0x505372fe  # inc ebp; in al, 0xe8; sbb al, 0x14; add byte ptr [eax], al; ret; 
0x50536e98  # inc ebp; in al, 0xeb; ret; 
0x50544c62  # inc ebp; mov ah, 0x2a; ret; 
0x50511fe1  # inc ebp; mov ah, 3; ret; 
0x50507d67  # inc ebp; mov ah, 7; add byte ptr [eax], al; add byte ptr [ebx + 0x38ac86], cl; add byte ptr [ebx], al; ret; 
0x5054774d  # inc ebp; mov al, 0x3b; ret; 
0x50544c6c  # inc ebp; mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x50519a81  # inc ebp; mov bh, 0xff; call dword ptr [edi - 0x75]; ret; 
0x5051e98a  # inc ebp; mov byte ptr [ebx], bh; ret; 
0x5052e437  # inc ebp; or al, 0x33; fstp xword ptr [ebx]; ret; 
0x50545cdc  # inc ebp; or al, 0x3b; ret 0x840f; 
0x5051350f  # inc ebp; or al, 0x3b; ret; 
0x50533263  # inc ebp; or al, 0x5d; ret; 
0x50540e1a  # inc ebp; or al, 0x72; hlt; pop ebp; ret; 
0x50524350  # inc ebp; or al, 0x7e; push 0x2bffca83; rol dword ptr [ebx], 1; ret 0x463b; 
0x50533991  # inc ebp; or al, 0x83; les ecx, ptr [ebx + edi]; ret; 
0x50536018  # inc ebp; or al, 0x83; shl byte ptr [eax], 0x50; call dword ptr [0x5054a020]; pop ebp; ret; 
0x5050ddc0  # inc ebp; or al, 0x89; cmp ebx, dword ptr [esi + 0x5b]; pop edi; leave; ret 8; 
0x5053a868  # inc ebp; or al, 0x8b; add byte ptr [ebx], al; ret; 
0x5053e412  # inc ebp; or al, 0x8b; dec ebp; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x5051fe4f  # inc ebp; or al, 0x8b; dec ebp; sbb byte ptr [ebx], al; ret 0x4589; 
0x505050bb  # inc ebp; or al, 0xe8; ret 0xffc5; 
0x50524ee9  # inc ebp; or al, 3; ret; 
0x50522ac8  # inc ebp; or al, ch; ret; 
0x50522f1f  # inc ebp; or bl, ch; add eax, dword ptr [ebx + 0x5f5effc8]; pop ebx; pop ebp; ret; 
0x50533934  # inc ebp; or byte ptr [ebp - 0x67c40b8], cl; sbb dword ptr [edi + 0x11], esi; add eax, 0x20; pop ebp; ret; 
0x50538a2b  # inc ebp; or byte ptr [ebx + 0x5055d6a0], ah; pop ebp; ret; 
0x5053e09f  # inc ebp; or byte ptr [ebx + 0x5055de7c], ah; pop ebp; ret; 
0x5054129d  # inc ebp; or byte ptr [ebx + 0x5055de9c], ah; pop ebp; ret; 
0x505412ac  # inc ebp; or byte ptr [ebx + 0x5055dea8], ah; pop ebp; ret; 
0x505412bb  # inc ebp; or byte ptr [ebx + 0x5055deac], ah; pop ebp; ret; 
0x505499fa  # inc ebp; or byte ptr [ebx + 0x5d5b0cc4], al; ret; 
0x50537379  # inc ebp; or byte ptr [ebx + 0x5d5e0845], cl; ret; 
0x50539d40  # inc ebp; or byte ptr [ebx - 0x1a740383], cl; pop ebp; ret; 
0x50505bfc  # inc ebp; or byte ptr [ebx], bh; ret; 
0x50509341  # inc ebp; or byte ptr [ebx], ch; ret; 
0x50545f9e  # inc ebp; or byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5052d138  # inc ebp; or byte ptr [ecx + 0x303e283], bl; ret 0xf8c1; 
0x505364ec  # inc ebp; or byte ptr [ecx + 0x4589e045], cl; in al, 0x33; fstp xword ptr [ebx]; ret; 
0x50541067  # inc ebp; or byte ptr [ecx - 0x15], bl; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5050a237  # inc ebp; or byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0xc; 
0x5050dcc4  # inc ebp; or byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 8; 
0x5053416a  # inc ebp; or byte ptr [edx], ch; call 0x33f1d; pop ecx; pop ebp; ret; 
0x50526de3  # inc ebp; or byte ptr [esi + 0x3b], dl; ret; 
0x5053737c  # inc ebp; or byte ptr [esi + 0x5d], bl; ret; 
0x50532545  # inc ebp; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x5053187f  # inc ebp; ret 0x458b; 
0x50521a59  # inc ebp; ret 0xc38b; 
0x50521a51  # inc ebp; ret; 
0x50511647  # inc ebp; ror byte ptr [ebx + 0x5d891045], 1; aam 0x3b; ret; 
0x5053fe98  # inc ebp; ror byte ptr [ecx - 0x3fcc9bb9], 1; call 0x38721; ret; 
0x50548ec1  # inc ebp; sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x5051034f  # inc ebp; sbb byte ptr [ebx], bh; ret; 
0x505106a1  # inc ebp; sbb byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 0x14; 
0x5054786b  # inc ebp; test al, 0x3b; ret; 
0x50548194  # inc ebp; xor byte ptr [eax - 0xa], dl; ret; 
0x50516dde  # inc ebx; add al, 0x5b; leave; ret; 
0x50531430  # inc ebx; sldt word ptr [eax]; leave; ret; 
0x5051e435  # inc ebx; xchg ecx, eax; add al, byte ptr [eax]; xor eax, eax; ret; 
0x50531197  # inc ecx; adc al, 0x8b; inc ecx; sbb byte ptr [ebx], al; ret 0x558b; 
0x5053118f  # inc ecx; adc al, 3; ret 0x558b; 
0x50531184  # inc ecx; adc byte ptr [ebx], al; ret 0x558b; 
0x5053116b  # inc ecx; add al, 0x8b; inc ecx; or byte ptr [ebx], al; ret 0x558b; 
0x5052a826  # inc ecx; add al, 0xf; mov dh, 0x51; add eax, 0xb08e0c1; ret 0xb60f; 
0x50535b60  # inc ecx; add cl, byte ptr [edi]; mov dh, 0x56; add ch, byte ptr [ebx]; ret 0x1574; 
0x5051e19c  # inc ecx; add dword ptr [eax], eax; leave; ret; 
0x50535bc4  # inc ecx; add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1174; 
0x50535b3f  # inc ecx; add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1574; 
0x50532b8c  # inc ecx; and eax, 0x103; pop ebp; ret; 
0x50532d96  # inc ecx; and eax, 0x107; pop ebp; ret; 
0x50532c91  # inc ecx; and eax, 0x80; pop ebp; ret; 
0x50532d12  # inc ecx; and eax, 8; pop ebp; ret; 
0x5051f73f  # inc ecx; and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x50533c02  # inc ecx; cld; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50540e18  # inc ecx; cmp eax, dword ptr [ebp + 0xc]; jb 0x40e12; pop ebp; ret; 
0x5053e3d0  # inc ecx; jp 0x3e3d8; xor eax, eax; inc eax; pop ebp; ret; 
0x505488c2  # inc ecx; mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x5053c3eb  # inc ecx; mov dword ptr [edx], ecx; ret; 
0x50521903  # inc ecx; or al, 0x5b; leave; ret; 
0x50531181  # inc ecx; or al, 0x8b; inc ecx; adc byte ptr [ebx], al; ret 0x558b; 
0x50531179  # inc ecx; or al, 3; ret 0x558b; 
0x5051ce5a  # inc ecx; or al, 4; xor eax, eax; inc eax; pop esi; ret; 
0x505218f4  # inc ecx; or byte ptr [ebx - 0x76a0f3bf], cl; xor dword ptr [ebx], eax; ret; 
0x5053116e  # inc ecx; or byte ptr [ebx], al; ret 0x558b; 
0x5051c927  # inc ecx; push ecx; call 0x3616c; pop ecx; ret; 
0x505311c1  # inc ecx; pushal; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x505311ac  # inc ecx; sbb al, 0x5b; leave; ret; 
0x505311a2  # inc ecx; sbb byte ptr [ebx + 0x35f1c41], cl; ret 0x895e; 
0x5053119a  # inc ecx; sbb byte ptr [ebx], al; ret 0x558b; 
0x50537cdf  # inc ecx; sldt word ptr [eax]; pop ecx; ret; 
0x50533bf8  # inc ecx; std; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50533c2a  # inc ecx; test esi, esi; jne 0x33c20; pop ebx; pop esi; ret; 
0x50533f65  # inc edi; adc byte ptr [ebx], bh; ret; 
0x505399aa  # inc edi; add al, 0x3b; ret; 
0x50534392  # inc edi; add al, byte ptr [eax]; pop edi; ret; 
0x5053a608  # inc edi; add byte ptr [edx], ah; add byte ptr [eax], al; add bl, ch; mov byte ptr [ebx], bh; ret; 
0x5053257a  # inc edi; add cl, byte ptr [ebx + 0x5f5e0845]; leave; ret; 
0x50532560  # inc edi; add dword ptr [ebx + 0x5f5e0845], ecx; leave; ret; 
0x505326ec  # inc edi; add ecx, dword ptr [ebx + 0x5f5e0845]; leave; ret; 
0x5053411b  # inc edi; and byte ptr [ebx], bh; ret; 
0x505151c1  # inc edi; call 0x15192; pop ecx; pop edi; ret; 
0x5051cbea  # inc edi; call 0x1cbb9; pop ecx; pop edi; ret; 
0x50531f74  # inc edi; call ptr [ecx + 0x303e283]; ret 0xf8c1; 
0x50532ffa  # inc edi; call ptr [esi + 0x5b]; pop edi; ret; 
0x50516457  # inc edi; je 0x16495; ret; 
0x50516448  # inc edi; jo 0x16486; ret; 
0x50537547  # inc edi; mov esi, dword ptr [ebp + 8]; push 0xd; call 0x38c24; pop ecx; ret; 
0x50519955  # inc edi; or al, 0x2b; ret; 
0x5051d9ac  # inc edi; sbb al, 0x83; les esi, ptr [eax]; pop edi; pop esi; ret; 
0x50527e2a  # inc edi; sbb byte ptr [eax - 0x75], dl; ret; 
0x50515def  # inc edi; sub byte ptr [ebx], bh; ret; 
0x5052e0ab  # inc edi; xchg dword ptr [eax], eax; add byte ptr [ebp + 0x29085], cl; add byte ptr [eax + 0x33], dl; fucomi st(0); ret; 
0x50519965  # inc edi; xor byte ptr [ebx], bh; ret; 
0x5053fe9b  # inc edi; xor eax, eax; call 0x38721; ret; 
0x5052a126  # inc edx; add al, 0x5b; leave; ret; 
0x5053deae  # inc edx; add al, 0x5f; pop esi; pop ebx; leave; ret; 
0x5050aefc  # inc edx; add al, 0x89; add dword ptr [ebx], esi; rol byte ptr [eax + 0x5f], 0x5e; ret 8; 
0x50532f18  # inc edx; cld; pop esi; pop edi; pop ebx; ret; 
0x5052dfdc  # inc edx; cmp eax, dword ptr [esp + 4]; jl 0x2dfb8; or eax, 0xffffffff; ret; 
0x5050d731  # inc edx; dec esp; add al, byte ptr [eax]; leave; ret 8; 
0x50532f11  # inc edx; std; pop esi; pop edi; pop ebx; ret; 
0x505153dd  # inc esi; adc al, 0x59; mov eax, esi; pop esi; ret; 
0x5051518d  # inc esi; adc al, 0x5f; pop ebx; ret; 
0x5051fad7  # inc esi; adc al, bh; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x5053d7dd  # inc esi; adc byte ptr [ebx - 0x397400f8], al; pop edi; pop esi; ret; 
0x5053b97a  # inc esi; adc byte ptr [ebx], cl; add byte ptr [eax], al; add bl, ch; ret 0xff8b; 
0x50515d59  # inc esi; adc byte ptr [ecx + 0x3b], bl; ret; 
0x50522fa7  # inc esi; add al, 0x2b; ret; 
0x5051cbd1  # inc esi; add al, 0x50; call 0x323c0; add esp, 0xc; pop esi; ret; 
0x5051ccc4  # inc esi; add al, 0x59; mov dword ptr [esi + 0xc], eax; ret; 
0x5053ff44  # inc esi; add al, 0x5e; pop ebp; ret; 
0x50527b88  # inc esi; add al, 0x5e; pop ebx; leave; ret; 
0x50527946  # inc esi; add al, 0x5e; ret; 
0x5052a153  # inc esi; add al, 0xf; mov dh, 0x56; add eax, 0xb08e0c1; ret 0xb60f; 
0x50522f99  # inc esi; add al, 0xff; inc ebp; adc byte ptr [ebx], ch; ret; 
0x50532577  # inc esi; add cl, byte ptr [eax + 0x458b0247]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x5053255d  # inc esi; add dword ptr [eax + 0x458b0147], ecx; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x505326e9  # inc esi; add ecx, dword ptr [eax + 0x458b0347]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x5051d842  # inc esi; and byte ptr [edi], cl; mov word ptr [edi + edi*8 - 1], ss; call ptr [edi + 0x5b]; pop esi; ret; 
0x5050e72d  # inc esi; cmp al, 2; add cl, cl; ret 0xc; 
0x5051ef77  # inc esi; cmp byte ptr [edi + 0x5e], bl; ret; 
0x50533243  # inc esi; cmp esi, ecx; jb 0x3323a; pop esi; pop ebp; ret 8; 
0x50541968  # inc esi; inc dword ptr [ebx - 0x36a1df3c]; ret; 
0x5052df2d  # inc esi; inc esp; add byte ptr [eax], al; leave; ret; 
0x50533ab7  # inc esi; inc esp; pop esi; ret; 
0x5051d75b  # inc esi; or al, 0x5f; mov dword ptr [esi + 0x10], edx; mov eax, esi; pop esi; ret; 
0x5051cd71  # inc esi; or al, 0x8b; push cs; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; ret; 
0x505241b4  # inc esi; or al, 0x8b; ret; 
0x5052035b  # inc esi; or al, 0xe9; daa; add dword ptr [eax], eax; add byte ptr [ebx - 0x7af0fd07], al; ret 0xfffe; 
0x5051e076  # inc esi; or al, 0xeb; add cl, byte ptr [ebx + 0x5e5f5dc5]; ret; 
0x5050e585  # inc esi; or al, 3; ret 0x4689; 
0x50513cdf  # inc esi; or al, 3; ret; 
0x50527966  # inc esi; or byte ptr [ebp + 0xa], bh; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], 1; pop esi; ret; 
0x5053ff41  # inc esi; or byte ptr [ecx + 0x5d5e0446], cl; ret; 
0x5050c92d  # inc esi; pop edx; add al, byte ptr [eax]; leave; ret 8; 
0x505273e0  # inc esi; sbb al, 0x8d; push esp; adc dword ptr [ebx + edi], ecx; ret 0x1b7d; 
0x5052f76c  # inc esi; sbb al, 0xff; adc eax, 0x5054a13c; pop esi; ret; 
0x5051525b  # inc esi; sbb byte ptr [ebx + 0x568b104e], cl; sbb byte ptr [eax + 0x5fff1144], cl; ret; 
0x5052f4f5  # inc esi; sbb byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [edi - 0x37], bl; ret; 
0x5052439f  # inc esi; sub al, 0x3b; ret; 
0x50524385  # inc esi; sub byte ptr [ebx], bh; ret; 
0x5050648b  # inc esi; xor al, 0x5e; ret 4; 
0x50503f2d  # inc esi; xor byte ptr [ebx], bh; ret; 
0x5052d510  # inc esp; adc eax, 0x154489c4; in al, 0x83; ret 0x8304; 
0x50515264  # inc esp; adc edi, edi; pop edi; ret; 
0x505152b4  # inc esp; adc edi, edi; ret; 
0x5051e0e8  # inc esp; add bh, bh; pop edi; pop esi; ret; 
0x5052df2e  # inc esp; add byte ptr [eax], al; leave; ret; 
0x5051ebe6  # inc esp; add byte ptr [ecx], al; ret; 
0x5051c8b5  # inc esp; add dword ptr [ebx + ecx*4], ecx; dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x5052ab29  # inc esp; and al, 0x10; call 0x2a1fa; pop ecx; ret; 
0x5052a904  # inc esp; and al, 0x10; mov ecx, dword ptr [esp + 0xc]; call 0x2a1fa; pop ecx; ret; 
0x505341e7  # inc esp; and al, 0x10; pop ebx; pop esi; pop edi; ret; 
0x50516951  # inc esp; and al, 0x14; mov dword ptr [edi + 0xec], eax; pop esi; pop edi; ret; 
0x5052a8e1  # inc esp; and al, 0xc; call 0x2a44c; pop ecx; ret; 
0x5052baec  # inc esp; and al, 0xc; call 0x2b41f; pop ecx; ret; 
0x5052bb13  # inc esp; and al, 0xc; call 0x2b5d0; pop ecx; ret; 
0x50516a46  # inc esp; and al, 0xc; mov dword ptr [esi], eax; pop esi; ret; 
0x50516f39  # inc esp; and al, 0xc; pop ecx; call 0x16de3; pop ebx; ret; 
0x5051686f  # inc esp; and al, 0xc; pop esi; ret; 
0x50526f8f  # inc esp; and al, 4; and dword ptr [eax + 0x84], 0; mov dword ptr [eax + 0x8c], 0x40; ret; 
0x5051677e  # inc esp; and al, 4; cmp dword ptr [eax + 0x10], 0; je 0x1678b; or eax, 0xffffffff; ret; 
0x5052daf6  # inc esp; and al, 4; cmp dword ptr [eax + 0x40], 0; je 0x2db07; mov dword ptr [eax + 0x30], 1; ret; 
0x5052477c  # inc esp; and al, 4; cmp dword ptr [eax + 4], 0; jne 0x24788; xor eax, eax; ret; 
0x50527831  # inc esp; and al, 4; cmp dword ptr [esp + 8], eax; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x5051e868  # inc esp; and al, 4; jbe 0x1e871; or eax, 0xffffffff; ret; 
0x5052dfde  # inc esp; and al, 4; jl 0x2dfb8; or eax, 0xffffffff; ret; 
0x5051d878  # inc esp; and al, 4; mov dword ptr [eax + 0x28], 1; ret; 
0x5051d181  # inc esp; and al, 4; mov dword ptr [eax + 4], 1; ret; 
0x5051f26d  # inc esp; and al, 4; mov eax, dword ptr [eax + 0x10]; ret; 
0x505317be  # inc esp; and al, 4; mov eax, dword ptr [eax + 0x14]; ret; 
0x505317b5  # inc esp; and al, 4; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5052f841  # inc esp; and al, 4; mov eax, dword ptr [eax + 0x20]; ret; 
0x5051d782  # inc esp; and al, 4; mov eax, dword ptr [eax + 0x2c]; ret; 
0x50516773  # inc esp; and al, 4; mov eax, dword ptr [eax + 0xc8]; ret; 
0x5051f27c  # inc esp; and al, 4; mov eax, dword ptr [eax + 4]; ret; 
0x5051c896  # inc esp; and al, 4; mov eax, dword ptr [eax + 8]; ret; 
0x5051f275  # inc esp; and al, 4; mov eax, dword ptr [eax]; ret; 
0x5051e1a2  # inc esp; and al, 4; mov edx, dword ptr [esp + 8]; ret; 
0x50536771  # inc esp; and al, 4; mul ecx; ret 0x10; 
0x50532e46  # inc esp; and al, 4; ret; 
0x5051679c  # inc esp; and al, 4; test eax, eax; je 0x167aa; mov eax, dword ptr [eax + 0x1ac]; ret; 
0x5051682c  # inc esp; and al, 4; test eax, eax; je 0x1683a; mov eax, dword ptr [eax + 0x90]; ret; 
0x50516854  # inc esp; and al, 4; test eax, eax; je 0x16862; mov eax, dword ptr [eax + 0xe0]; ret; 
0x505168ae  # inc esp; and al, 4; test eax, eax; je 0x168bc; mov eax, dword ptr [eax + 0xe4]; ret; 
0x505169e2  # inc esp; and al, 4; test eax, eax; je 0x169f0; mov eax, dword ptr [eax + 0xd4]; ret; 
0x50516a08  # inc esp; and al, 4; test eax, eax; je 0x16a16; mov eax, dword ptr [eax + 0xd8]; ret; 
0x5051f32d  # inc esp; and al, 4; test eax, eax; je 0x1f338; mov eax, dword ptr [eax + 8]; ret; 
0x50516907  # inc esp; and al, 4; test eax, eax; jne 0x1690f; ret; 
0x5051695e  # inc esp; and al, 4; test eax, eax; jne 0x16969; or eax, 0xffffffff; ret; 
0x5051699a  # inc esp; and al, 4; test eax, eax; jne 0x169a2; ret; 
0x50516a1a  # inc esp; and al, 4; test eax, eax; jne 0x16a22; ret; 
0x50516a4e  # inc esp; and al, 4; test eax, eax; jne 0x16a56; ret; 
0x50516a95  # inc esp; and al, 4; test eax, eax; jne 0x16aa0; or eax, 0xffffffff; ret; 
0x50516aa8  # inc esp; and al, 4; test eax, eax; jne 0x16ab0; ret; 
0x50516ae1  # inc esp; and al, 4; test eax, eax; jne 0x16ae9; ret; 
0x50516b32  # inc esp; and al, 4; test eax, eax; jne 0x16b3a; ret; 
0x50516b55  # inc esp; and al, 4; test eax, eax; jne 0x16b60; or eax, 0xffffffff; ret; 
0x50516c75  # inc esp; and al, 4; test eax, eax; jne 0x16c7d; ret; 
0x50524797  # inc esp; and al, 4; test eax, eax; jne 0x2479f; ret; 
0x505266f1  # inc esp; and al, 4; test eax, eax; jne 0x266f9; ret; 
0x50527835  # inc esp; and al, 8; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x5053438e  # inc esp; and al, 8; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x5051f261  # inc esp; and al, 8; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x10], eax; ret; 
0x505317a9  # inc esp; and al, 8; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5051d6f9  # inc esp; and al, 8; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 8], eax; ret; 
0x50543572  # inc esp; and al, 8; mov edx, dword ptr [esp + 0x10]; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x50536789  # inc esp; and al, 8; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x50532e40  # inc esp; and al, 8; pop edi; ret; 
0x505271ac  # inc esp; call 0x1a725; pop ecx; pop ecx; ret; 
0x5052b9f1  # inc esp; cmp al, byte ptr [esp + edi*2]; rcr byte ptr [edi + 0x5b], cl; leave; ret; 
0x50502602  # inc esp; cmp eax, 0x76ff50f0; or al, 0xe8; and cl, byte ptr [edx + 4]; add byte ptr [ebx], bh; ret; 
0x505011a5  # inc esp; leave; push ebp; push eax; ret; 
0x50524daa  # inc esp; mov byte ptr [edi + edi*8], dl; or byte ptr [ebx + 0x3b078b3f], cl; ret 0xde75; 
0x5052f80e  # inc esp; pop ecx; pop ecx; mov dword ptr [esi + 0x18], 1; pop esi; ret; 
0x50533ab8  # inc esp; pop esi; ret; 
0x50533ab1  # inc esp; test eax, eax; je 0x33a92; mov eax, dword ptr [esi + 0x44]; pop esi; ret; 
0x50519c93  # inc esp; xor dword ptr [eax*4 + 0x3b0b74c0], eax; ret 0x775; 
0x5051a6d3  # insb byte ptr es:[edi], dx; add dword ptr [eax], eax; add byte ptr [esi*2 + 0x5ec03305], al; pop ebp; ret; 
0x505035e9  # insb byte ptr es:[edi], dx; leave; ret 0xc; 
0x50528a2e  # insb byte ptr es:[edi], dx; leave; ret; 
0x50544022  # insb byte ptr es:[edi], dx; push ebp; push eax; ret; 
0x50531e4a  # insd dword ptr es:[edi], dx; add byte ptr [eax], al; pop ecx; ret; 
0x50533fad  # insd dword ptr es:[edi], dx; add dword ptr [eax], eax; add cl, al; clc; add al, byte ptr [ebx]; ret 0x848d; 
0x505475b3  # insd dword ptr es:[edi], dx; daa; add byte ptr [eax], al; call 0x4756b; or eax, 0xffffffff; ret; 
0x50524206  # insd dword ptr es:[edi], dx; loope 0x24209; add cl, cl; ret; 
0x50548206  # insd dword ptr es:[edi], dx; mov eax, dword ptr [0xc583fffe]; je 0x481d7; ret 4; 
0x50512c06  # insd dword ptr es:[edi], dx; test dword ptr [ecx], 0x64c58300; leave; ret 0x14; 
0x50520e5f  # int 0x40; pop ebx; call 0x32377; leave; ret; 
0x505316e4  # int 0x40; pop esi; call 0x32377; add ebp, 0x188; leave; ret; 
0x505128c7  # int 0x5b; call 0x32377; add ebp, 0x1014; leave; ret 0x10; 
0x505484c7  # int 0x5b; call 0x32377; add ebp, 0x190; leave; ret 8; 
0x5052eedb  # int 0x5b; call 0x32377; add ebp, 0x1e0; leave; ret; 
0x5051ea65  # int 0x5b; call 0x32377; add ebp, 0x1f90; leave; ret; 
0x5050f683  # int 0x5b; call 0x32377; add ebp, 0x1ffc; leave; ret 0xc; 
0x505147e2  # int 0x5b; call 0x32377; add ebp, 0x2640; leave; ret 0x20; 
0x5051964a  # int 0x5b; call 0x32377; add ebp, 0x3a0; leave; ret; 
0x50527eb6  # int 0x5b; call 0x32377; add ebp, 0x400c; leave; ret; 
0x5052e2f1  # int 0x5b; call 0x32377; add ebp, 0x450; leave; ret; 
0x505277df  # int 0x5b; call 0x32377; add ebp, 0x5c; leave; ret; 
0x50512c03  # int 0x5b; call 0x32377; add ebp, 0x64; leave; ret 0x14; 
0x5050f934  # int 0x5b; call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50522e44  # int 0x5b; call 0x32377; add ebp, 0x68; leave; ret; 
0x505035e0  # int 0x5b; call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50528a25  # int 0x5b; call 0x32377; add ebp, 0x6c; leave; ret; 
0x505028f3  # int 0x5b; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x505223f6  # int 0x5b; call 0x32377; add ebp, 0x74; leave; ret; 
0x505172c0  # int 0x5b; call 0x32377; add ebp, 0x78; leave; ret; 
0x5052d8bf  # int 0x5b; call 0x32377; add ebp, 0x8c; leave; ret; 
0x50517bac  # int 0x5b; call 0x32377; add ebp, 0xa8; leave; ret; 
0x5051a1b3  # int 0x5b; call 0x32377; add ebp, 0xb4; leave; ret; 
0x50549442  # int 0x5b; call 0x32377; add ebp, 0xd0; leave; ret; 
0x505130d7  # int 0x5b; call 0x32377; add ebp, 0xf90; leave; ret 0xc; 
0x5050d927  # int 0x5b; call 0x32377; add ebp, 0xf94; leave; ret 0xc; 
0x5050ec89  # int 0x5b; call 0x32377; leave; ret 0x10; 
0x505101cc  # int 0x5b; call 0x32377; leave; ret 0x14; 
0x5050c75e  # int 0x5b; call 0x32377; leave; ret 0xc; 
0x5050437b  # int 0x5b; call 0x32377; leave; ret 4; 
0x50518345  # int 0x5b; call 0x32377; leave; ret; 
0x50515ecb  # int 0x5b; ret; 
0x5052dc05  # int 0x5e; call 0x32377; add ebp, 0x18c; leave; ret; 
0x5052e8d5  # int 0x5e; call 0x32377; add ebp, 0x198; leave; ret; 
0x505487b4  # int 0x5e; call 0x32377; add ebp, 0x19c; leave; ret 4; 
0x50548c80  # int 0x5e; call 0x32377; add ebp, 0x1a4; leave; ret 4; 
0x50548386  # int 0x5e; call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50504822  # int 0x5e; call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50547edc  # int 0x5e; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x50547d95  # int 0x5e; call 0x32377; leave; ret 0x14; 
0x505492b5  # int 0x5e; call 0x32377; leave; ret 0xc; 
0x505093b7  # int 0x5e; call 0x32377; leave; ret 4; 
0x50506936  # int 0x5e; call 0x32377; leave; ret; 
0x5051f251  # int 0x5f; call 0x32377; add ebp, 0x4fa0; leave; ret; 
0x5050684d  # int 0x5f; call 0x32377; add ebp, 0x78; leave; ret; 
0x5051ccb2  # int 0x5f; call 0x32377; leave; ret; 
0x5050f4d5  # int 0x83; les ecx, ptr [eax + ebp*8]; cdq; add al, byte ptr cs:[eax]; leave; ret; 
0x50505a9c  # int 0xe8; aad 0xc8; add al, byte ptr [eax]; leave; ret 0x24; 
0x5050a39d  # int 0xe8; aam 0x7f; add al, byte ptr [eax]; leave; ret 8; 
0x5050725d  # int 0xe8; adc al, 0xb1; add al, byte ptr [eax]; leave; ret 8; 
0x5050126f  # int 0xe8; add dl, byte ptr [ecx]; add eax, dword ptr [eax]; leave; ret 0xc; 
0x5050a470  # int 0xe8; add dword ptr [edi + 2], edi; add cl, cl; ret 8; 
0x5050ff33  # int 0xe8; and al, 2; add cl, cl; ret 0x14; 
0x5050a50f  # int 0xe8; bound edi, qword ptr [esi + 2]; add cl, cl; ret 8; 
0x50504f77  # int 0xe8; cli; rol dword ptr [edx], cl; add cl, cl; ret 0xc; 
0x5050e77f  # int 0xe8; cmp eax, dword ptr [edx]; add cl, cl; ret 0xc; 
0x505099d9  # int 0xe8; cwde; mov dword ptr [edx], eax; add cl, cl; ret 8; 
0x5050ae42  # int 0xe8; das; jne 0xae49; add cl, cl; ret 0x14; 
0x5050a124  # int 0xe8; dec ebp; add byte ptr [edx], 0; leave; ret 8; 
0x50503724  # int 0xe8; dec ebp; in al, dx; add al, byte ptr [eax]; leave; ret 0xc; 
0x50510723  # int 0xe8; dec esi; sbb al, 2; add cl, cl; ret 0x14; 
0x5050ab25  # int 0xe8; dec esp; js 0xab2c; add cl, cl; ret 0xc; 
0x50509f25  # int 0xe8; dec esp; test byte ptr [edx], al; add cl, cl; ret 0xc; 
0x50549b7d  # int 0xe8; hlt; xchg esi, edi; dec ecx; ret; 
0x5050e92c  # int 0xe8; inc ebp; cmp al, byte ptr [edx]; add cl, cl; ret 8; 
0x5050d72f  # int 0xe8; inc edx; dec esp; add al, byte ptr [eax]; leave; ret 8; 
0x5050c92b  # int 0xe8; inc esi; pop edx; add al, byte ptr [eax]; leave; ret 8; 
0x5050a5ff  # int 0xe8; jb 0xa680; add al, byte ptr [eax]; leave; ret 0xc; 
0x5050d4ad  # int 0xe8; les ecx, ptr [esi + 2]; add cl, cl; ret 0xc; 
0x50508590  # int 0xe8; loope 0x8531; add al, byte ptr [eax]; leave; ret 0x20; 
0x5050aad1  # int 0xe8; mov al, byte ptr [0xc9000278]; ret 0xc; 
0x505061e9  # int 0xe8; mov cl, al; add al, byte ptr [eax]; leave; ret 0xc; 
0x505095bb  # int 0xe8; mov dh, 0x8d; add al, byte ptr [eax]; leave; ret 0xc; 
0x50509abf  # int 0xe8; mov dl, 0x88; add al, byte ptr [eax]; leave; ret 8; 
0x505012e8  # int 0xe8; mov dword ptr [eax], edx; add eax, dword ptr [eax]; leave; ret 0xc; 
0x5050a6e8  # int 0xe8; mov dword ptr [edx + eax], edi; leave; ret 0xc; 
0x5050f9b8  # int 0xe8; mov ecx, 0xc9000229; ret 0x10; 
0x5050f1b2  # int 0xe8; mov edi, 0xc9000231; ret 0x14; 
0x505059b5  # int 0xe8; mov esp, 0xc90002c9; ret 0x24; 
0x5050d2e5  # int 0xe8; mov word ptr [eax + 2], ss; add cl, cl; ret 0xc; 
0x5051027a  # int 0xe8; mul dword ptr [eax]; add al, byte ptr [eax]; leave; ret 0x14; 
0x5050ece1  # int 0xe8; nop; add al, byte ptr ss:[eax]; leave; ret 0x10; 
0x50504c52  # int 0xe8; pop ds; xlatb; add al, byte ptr [eax]; leave; ret 0x10; 
0x50502a16  # int 0xe8; pop ebx; stc; add al, byte ptr [eax]; leave; ret 0xc; 
0x5050db18  # int 0xe8; pop ecx; dec eax; add al, byte ptr [eax]; leave; ret 0xc; 
0x50510f1d  # int 0xe8; push esp; adc al, 2; add cl, cl; ret 0x1c; 
0x5050601d  # int 0xe8; push esp; ret; 
0x5050c89e  # int 0xe8; rcr dword ptr [edx + 2], cl; add cl, cl; ret 0xc; 
0x5050d1ae  # int 0xe8; ret; 
0x505419b1  # int 0xe8; ror byte ptr [ecx], 0xff; dec ecx; ret; 
0x50547b43  # int 0xe8; test al, 0xfe; dec ecx; ret 0xc; 
0x5050f3c8  # int 0xe8; test eax, 0xc900022f; ret 8; 
0x505096d6  # int 0xe8; wait; mov word ptr [edx], es; add cl, cl; ret 0xc; 
0x5050e8db  # int 0xe8; xchg esi, eax; cmp al, byte ptr [edx]; add cl, cl; ret 8; 
0x50509c3d  # int 0xe8; xor al, 0x87; add al, byte ptr [eax]; leave; ret 0x10; 
0x5050133e  # int 0xe8; xor edx, dword ptr [eax]; add eax, dword ptr [eax]; leave; ret 8; 
0x505096f3  # int 0xef; mov dword ptr [eax + 8], 0x98badcfe; mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x50503263  # int1; add al, byte ptr [eax]; add ebp, 0x18c; leave; ret 4; 
0x50515787  # int1; cmp esi, edx; pop esi; jge 0x15790; xor eax, eax; ret; 
0x50533245  # int1; jb 0x3323a; pop esi; pop ebp; ret 8; 
0x5052592b  # int1; lea eax, [ecx + eax*4]; dec dword ptr [eax]; ret; 
0x50541966  # int1; lea eax, [esi - 1]; add esp, 0x20; pop esi; leave; ret; 
0x50533c2e  # int1; pop ebx; pop esi; ret; 
0x5053848c  # int1; pop edi; pop esi; ret; 
0x5054886c  # int1; pop esi; ret 4; 
0x505117ff  # int1; ret; 
0x5051ebaa  # int1; xor eax, eax; pop esi; leave; ret; 
0x50520185  # into; jle 0x20165; or eax, 0xffffffff; pop esi; ret; 
0x5051cb86  # into; pop edi; pop esi; pop ebx; ret; 
0x50535f8d  # into; pop edi; xor eax, eax; pop esi; ret; 
0x5053c426  # into; push 0x8559ffff; sal byte ptr [ebp - 0x1f], 0x8b; ret; 
0x505413f7  # iretd; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50519749  # iretd; add byte ptr [eax], al; pop ecx; ret; 
0x50521e5f  # iretd; cmp al, byte ptr [eax]; add byte ptr [ecx + 0x59], bl; leave; ret; 
0x5050e31b  # iretd; fimul word ptr [ebx - 0x3f]; ret; 
0x5052477a  # iretd; mov eax, dword ptr [esp + 4]; cmp dword ptr [eax + 4], 0; jne 0x24788; xor eax, eax; ret; 
0x50547a4e  # iretd; pop edi; pop esi; ret 0xc; 
0x5051e8c0  # iretd; push ebp; push eax; add byte ptr [ecx + 0x5e], bl; ret; 
0x505265fc  # iretd; push ebp; push eax; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x5051e883  # iretd; push ebp; push eax; ret; 
0x5051491f  # ja 0x148be; jb 0x148c5; xor eax, eax; pop edi; pop esi; ret; 
0x50527165  # ja 0x2713c; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x50527827  # ja 0x27809; sbb eax, eax; neg eax; pop edi; pop esi; ret; 
0x5052af3a  # ja 0x2af40; pop esi; mov dword ptr [edi], eax; pop ebx; leave; ret; 
0x5052b349  # ja 0x2b34f; pop esi; mov dword ptr [edi], eax; pop ebx; leave; ret; 
0x50533133  # ja 0x33146; add eax, -0x20; pop ebp; ret; 
0x5053393c  # ja 0x3394f; add eax, 0x20; pop ebp; ret; 
0x50537a72  # ja 0x37a78; test eax, eax; je 0x37a56; pop edi; pop ebp; ret; 
0x5053a172  # ja 0x3a182; push 0xd; pop eax; pop ebp; ret; 
0x50509dac  # ja 0x9db4; mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e4d  # ja 0x9e55; mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x5051ce2b  # jae 0x1ce30; xor eax, eax; ret; 
0x50526e1e  # jae 0x26e25; or eax, 0xffffffff; pop esi; ret; 
0x50535cec  # jae 0x35cdc; mov eax, ecx; add esp, 0x20; pop esi; leave; ret; 
0x50536998  # jae 0x369a0; shld edx, eax, cl; shl eax, cl; ret; 
0x50536993  # jae 0x369aa; cmp cl, 0x20; jae 0x369a0; shld edx, eax, cl; shl eax, cl; ret; 
0x5053fcdd  # jae 0x3fce4; cmp dword ptr [eax + 4], edx; je 0x3fce6; xor eax, eax; pop ebp; ret; 
0x50541965  # jae 0x41958; lea eax, [esi - 1]; add esp, 0x20; pop esi; leave; ret; 
0x50542f28  # jae 0x42f30; shrd eax, edx, cl; shr edx, cl; ret; 
0x50542f23  # jae 0x42f3a; cmp cl, 0x20; jae 0x42f30; shrd eax, edx, cl; shr edx, cl; ret; 
0x50511332  # jb 0x11314; xor eax, eax; pop esi; ret 4; 
0x50514921  # jb 0x148c5; xor eax, eax; pop edi; pop esi; ret; 
0x505156bd  # jb 0x156bf; add byte ptr [ebx + 0x5b5f14c4], al; leave; ret; 
0x50528d01  # jb 0x28c99; add byte ptr [eax], al; leave; ret; 
0x50533246  # jb 0x3323a; pop esi; pop ebp; ret 8; 
0x505367dc  # jb 0x367cc; mov eax, ecx; add esp, 0x20; pop esi; leave; ret; 
0x50537b11  # jb 0x37b03; pop esi; pop ebp; ret; 
0x50537b35  # jb 0x37b23; pop esi; pop ebp; ret; 
0x5053848b  # jb 0x3847e; pop edi; pop esi; ret; 
0x505384b1  # jb 0x384a4; pop edi; pop esi; ret; 
0x5053afd0  # jb 0x3afd2; add byte ptr [ebx], ah; ret 0xc483; 
0x5053d41b  # jb 0x3d408; xor eax, eax; pop ebp; ret; 
0x5053edc2  # jb 0x3edac; pop edi; pop esi; ret; 
0x50540e1c  # jb 0x40e12; pop ebp; ret; 
0x5054191d  # jb 0x4190b; xor eax, eax; pop edi; pop ebx; leave; ret; 
0x505479ff  # jb 0x479e9; xor eax, eax; ret 4; 
0x50547a4d  # jb 0x47a1e; pop edi; pop esi; ret 0xc; 
0x505484f5  # jb 0x48504; push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x5050a601  # jb 0xa680; add al, byte ptr [eax]; leave; ret 0xc; 
0x50514882  # jbe 0x14888; xor eax, eax; inc eax; ret; 
0x505152fa  # jbe 0x152fc; add byte ptr [ebx + 0x5e5f1cc4], al; ret; 
0x505168f9  # jbe 0x1695b; add byte ptr [eax], al; pop ecx; mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x50519745  # jbe 0x19777; call 0x26694; pop ecx; ret; 
0x5051974f  # jbe 0x19781; call 0x2727f; pop ecx; ret; 
0x5051c919  # jbe 0x1c91e; xor eax, eax; ret; 
0x5051c942  # jbe 0x1c948; xor eax, eax; pop ebp; ret; 
0x5051d0e4  # jbe 0x1d0ea; or eax, 0xffffffff; ret; 
0x5051e86b  # jbe 0x1e871; or eax, 0xffffffff; ret; 
0x50520e80  # jbe 0x20ed6; xor dl, byte ptr [eax]; ret; 
0x50526e17  # jbe 0x26e1e; xor eax, eax; inc eax; pop esi; ret; 
0x50527838  # jbe 0x2783e; or eax, 0xffffffff; ret; 
0x5052f3d0  # jbe 0x2f3da; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x5052f50e  # jbe 0x2f514; or eax, 0xffffffff; ret; 
0x5052f528  # jbe 0x2f52e; or eax, 0xffffffff; ret; 
0x505364aa  # jbe 0x364d3; add byte ptr [eax], al; pop ecx; ret; 
0x505096ff  # jbe 0x9755; xor dl, byte ptr [eax]; ret; 
0x50509b91  # jbe 0x9b92; dec dword ptr [ebx + 0x5b5e5fc6]; pop ebp; ret 0x10; 
0x5051132f  # je 0x11355; or byte ptr [edx - 0x20], dh; xor eax, eax; pop esi; ret 4; 
0x50511372  # je 0x11398; or al, ch; adc eax, 0x59000058; pop ecx; ret 8; 
0x50511584  # je 0x11589; lea esi, [eax + 1]; mov eax, esi; pop esi; ret; 
0x5050119a  # je 0x11a4; push eax; call dword ptr [0x5054a030]; ret; 
0x50515188  # je 0x1518f; add eax, edi; mov dword ptr [esi + 0x14], eax; pop edi; pop ebx; ret; 
0x5051567b  # je 0x15689; push dword ptr [esp + 8]; call 0x1562b; pop ecx; pop esi; ret; 
0x5051568c  # je 0x156b2; or al, 0x56; call 0x1557b; add esp, 0xc; pop esi; ret; 
0x50515d23  # je 0x15cbf; pop esi; pop ebx; pop edi; leave; ret; 
0x50515e66  # je 0x15e6f; xor edi, edi; call 0x15d2a; pop edi; pop esi; ret; 
0x50516458  # je 0x16495; ret; 
0x50516785  # je 0x1678b; or eax, 0xffffffff; ret; 
0x505167a1  # je 0x167aa; mov eax, dword ptr [eax + 0x1ac]; ret; 
0x505167c5  # je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x505167d5  # je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x50516822  # je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x50516831  # je 0x1683a; mov eax, dword ptr [eax + 0x90]; ret; 
0x50516843  # je 0x1684f; push dword ptr [eax + 0x10]; call 0x1f32c; pop ecx; ret; 
0x50516859  # je 0x16862; mov eax, dword ptr [eax + 0xe0]; ret; 
0x50516867  # je 0x1688d; or byte ptr [ebp - 0x74f98a0a], al; inc esp; and al, 0xc; pop esi; ret; 
0x505168b3  # je 0x168bc; mov eax, dword ptr [eax + 0xe4]; ret; 
0x505168c1  # je 0x168e7; or byte ptr [ebp - 0x74f98a0a], al; inc esp; and al, 0xc; pop esi; ret; 
0x50516915  # je 0x1691f; mov edx, dword ptr [eax + 0xe8]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0xec]; ret; 
0x505169e7  # je 0x169f0; mov eax, dword ptr [eax + 0xd4]; ret; 
0x505169fa  # je 0x16a06; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0xd8], ecx; ret; 
0x50516abd  # je 0x16ac9; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516adb  # je 0x16ae0; and dword ptr [ecx], 0; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16ae9; ret; 
0x50516af9  # je 0x16b03; mov edx, dword ptr [eax + 0x120]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x50516b47  # je 0x16b53; mov ecx, dword ptr [esp + 8]; add dword ptr [eax + 0x124], ecx; ret; 
0x50516b6d  # je 0x16b79; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x128], ecx; ret; 
0x50516bab  # je 0x16bb3; mov dword ptr [ecx + 0xdc], eax; push eax; call dword ptr [0x5054a028]; ret; 
0x50516c07  # je 0x16c2d; adc byte ptr [edx + 0x50], dl; call ecx; ret; 
0x5051cb91  # je 0x1cbb7; or al, ch; cmp esi, 0x5959ffff; ret; 
0x5051cd86  # je 0x1cdac; or al, ch; cmp eax, 0x59ffffff; pop esi; ret; 
0x5051d773  # je 0x1d77e; cmp dword ptr [eax + 0x30], ecx; jne 0x1d77e; xor eax, eax; inc eax; ret; 
0x5051e1e5  # je 0x1e1ef; sbb eax, eax; and eax, 0xfffffffe; inc eax; pop ebp; ret; 
0x5051e3a3  # je 0x1e3a9; or eax, 0xffffffff; ret; 
0x5051e3a0  # je 0x1e3ae; dec eax; je 0x1e3a9; or eax, 0xffffffff; ret; 
0x5051f2dd  # je 0x1f2e3; mov eax, dword ptr [eax + 8]; ret; 
0x5051f302  # je 0x1f308; mov eax, dword ptr [eax + 8]; ret; 
0x5051f319  # je 0x1f329; movzx eax, word ptr [eax + 8]; push eax; call 0x4700e; movzx eax, ax; ret; 
0x5051f332  # je 0x1f338; mov eax, dword ptr [eax + 8]; ret; 
0x505223ff  # je 0x223ca; ret; 
0x50522907  # je 0x22911; cmp eax, edx; je 0x22911; mov eax, esi; pop esi; ret; 
0x50522f38  # je 0x22f5e; or al, 0xe8; mov byte ptr [edx], ch; add byte ptr [eax], al; add esp, 0xc; ret; 
0x505232d8  # je 0x232a3; ret; 
0x505235c2  # je 0x235cb; push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x50523a1a  # je 0x23a24; cmp eax, edx; je 0x23a24; mov eax, esi; pop esi; ret; 
0x50523a1e  # je 0x23a24; mov eax, esi; pop esi; ret; 
0x50523f33  # je 0x23efe; ret; 
0x5052428c  # je 0x2428f; inc eax; add ecx, 4; dec edx; jne 0x24289; ret; 
0x5052478b  # je 0x247b1; or al, 0xe8; adc eax, 0x59fffffb; pop ecx; ret; 
0x50524e53  # je 0x24e79; or byte ptr [edx], ch; call 0x24e19; add esp, 0xc; ret; 
0x50524e97  # je 0x24ebd; or bh, bh; call 0x24e19; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x50525b0e  # je 0x25b14; or dword ptr [eax], edx; pop esi; ret; 
0x50528263  # je 0x28278; xor eax, eax; pop edi; pop esi; leave; ret; 
0x505028fc  # je 0x28c7; ret 4; 
0x50502ae8  # je 0x2af0; mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x50502afe  # je 0x2b06; mov eax, dword ptr [eax + 0xac]; ret 4; 
0x5052d3d0  # je 0x2d3f6; add al, 0x50; call dword ptr [eax + 0x3c0]; pop ecx; pop ecx; ret; 
0x5052d3de  # je 0x2d404; add al, 0x50; call dword ptr [eax + 0x3c4]; pop ecx; pop ecx; ret; 
0x5052da4a  # je 0x2da4f; mov dword ptr [ecx + 0xc], edx; ret; 
0x5052dafd  # je 0x2db07; mov dword ptr [eax + 0x30], 1; ret; 
0x50502e76  # je 0x2e80; mov eax, dword ptr [eax + 0x110]; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x5052f3a8  # je 0x2f3ce; sbb bh, bh; adc eax, 0x5054a060; xor eax, eax; add esp, 0x14; ret 4; 
0x5052f747  # je 0x2f752; mov dword ptr [esi + 0x10], 1; pop esi; ret; 
0x5052f756  # je 0x2f75f; call 0x2f707; pop esi; ret; 
0x5052f7a3  # je 0x2f7ac; call 0x2f707; pop esi; ret; 
0x50531753  # je 0x31758; mov dword ptr [ecx + 0x18], edx; ret; 
0x50531794  # je 0x317ba; or al, 0xff; jo 0x317a6; call 0x2f672; add esp, 0xc; ret; 
0x505317d5  # je 0x317db; xor eax, eax; leave; ret; 
0x50532b67  # je 0x32b70; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50532be8  # je 0x32bf1; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50532c6c  # je 0x32c75; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50532ced  # je 0x32cf6; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50532d71  # je 0x32d7a; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50533110  # je 0x33119; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50533390  # je 0x33397; cmp byte ptr [eax + 1], dl; jne 0x3339b; xor eax, eax; inc eax; ret; 
0x50533ab4  # je 0x33a92; mov eax, dword ptr [esi + 0x44]; pop esi; ret; 
0x50535e6c  # je 0x35e71; mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x50535fa8  # je 0x35f8c; push ebp; push eax; call 0x36451; pop ecx; ret; 
0x50535f9f  # je 0x35fa6; call 0x3c2cb; push dword ptr [0x5055e274]; call 0x36451; pop ecx; ret; 
0x5053669f  # je 0x366a6; call 0x3edc7; fnclex; pop ebp; ret; 
0x50536bcb  # je 0x36bd9; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5050372f  # je 0x3755; or bh, bh; je 0x3759; or byte ptr [edx], ch; call 0x33e8; ret 8; 
0x50503733  # je 0x3759; or byte ptr [edx], ch; call 0x33e8; ret 8; 
0x50503741  # je 0x3767; or bh, bh; je 0x376b; or byte ptr [edx], ch; call 0x35ee; ret 8; 
0x50503745  # je 0x376b; or byte ptr [edx], ch; call 0x35ee; ret 8; 
0x50537780  # je 0x3778b; push 0; push eax; call dword ptr [0x5054a02c]; pop ebp; ret; 
0x50537a76  # je 0x37a56; pop edi; pop ebp; ret; 
0x50537ac6  # je 0x37acd; push dword ptr [ebp + 8]; call eax; pop ebp; ret; 
0x50537cda  # je 0x37ce4; push 8; call 0x38c24; pop ecx; ret; 
0x5053826f  # je 0x38274; and dword ptr [eax], 0; inc dword ptr [ecx]; leave; ret; 
0x50539114  # je 0x39119; xor eax, eax; ret; 
0x505391b5  # je 0x391ba; xor eax, eax; ret; 
0x505391b2  # je 0x391c0; dec eax; je 0x391ba; xor eax, eax; ret; 
0x50539c57  # je 0x39c60; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5053a148  # je 0x3a151; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5053b289  # je 0x3b28e; or dword ptr [edi], 0xffffffff; call 0x38721; ret; 
0x5053b650  # je 0x3b659; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5053e0c5  # je 0x3e0cc; xor eax, eax; inc eax; pop ebp; ret; 
0x5053e333  # je 0x3e33c; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5053e3b5  # je 0x3e3be; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5053ee4d  # je 0x3ee54; push 0; call eax; ret; 
0x5053fce2  # je 0x3fce6; xor eax, eax; pop ebp; ret; 
0x5053fe6d  # je 0x3fe77; push 0; call 0x38c24; pop ecx; ret; 
0x50541110  # je 0x41116; xor eax, eax; pop ebp; ret; 
0x5054136c  # je 0x41375; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50541588  # je 0x41591; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50541b9e  # je 0x41b7a; pop edi; sub eax, ecx; pop esi; pop ebp; ret; 
0x50541ca9  # je 0x41cb0; cmp eax, 1; jne 0x41c87; xor eax, eax; pop ebp; ret; 
0x50543a18  # je 0x43a21; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5054404c  # je 0x44051; push eax; call esi; pop esi; ret; 
0x50545b7d  # je 0x45b84; or eax, 0x1000; ret; 
0x50545c0f  # je 0x45c1b; cmp edx, ecx; jne 0x45c24; or eax, 0x8000; ret; 
0x505462c8  # je 0x462d4; cmp eax, 0xc000001d; je 0x462d4; xor eax, eax; ret; 
0x505462cf  # je 0x462d4; xor eax, eax; ret; 
0x5054755b  # je 0x47566; test eax, eax; jne 0x47551; xor eax, eax; ret 8; 
0x50547ee5  # je 0x47eb0; ret 4; 
0x50548818  # je 0x4881c; mov dword ptr [esi], eax; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x50549329  # je 0x4935e; int 0x5b; call 0x32377; add ebp, 0x78; leave; ret; 
0x50549992  # je 0x4999b; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x50549bae  # je 0x49bb7; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x505064cd  # je 0x64da; push eax; call dword ptr [0x5054a078]; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x505064f0  # je 0x64e7; push dword ptr [esp + 4]; push 8; push eax; call dword ptr [0x5054a07c]; ret 4; 
0x505064f3  # je 0x6519; add al, 0x6a; or byte ptr [eax - 1], dl; adc eax, 0x5054a07c; ret 4; 
0x50506510  # je 0x651f; push dword ptr [esp + 4]; push 0; push eax; call dword ptr [0x5054a084]; ret 4; 
0x50506538  # je 0x652f; push dword ptr [esp + 8]; push 8; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x50506513  # je 0x6539; add al, 0x6a; add byte ptr [eax - 1], dl; adc eax, 0x5054a084; ret 4; 
0x5050653b  # je 0x6561; or byte ptr [edx + 8], ch; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x5050655c  # je 0x656b; push dword ptr [esp + 8]; push 0; push eax; call dword ptr [0x5054a084]; ret 8; 
0x5050655f  # je 0x6585; or byte ptr [edx], ch; push eax; call dword ptr [0x5054a084]; ret 8; 
0x5050684b  # je 0x6880; int 0x5f; call 0x32377; add ebp, 0x78; leave; ret; 
0x50506f5f  # je 0x6f6a; push eax; call 0x6502; and dword ptr [esi], 0; pop esi; ret 4; 
0x505087ba  # je 0x8747; xchg byte ptr [eax], cl; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x5050d4c5  # je 0xd4d4; push 0; call 0x11aa; mov eax, dword ptr [esi + 0xd8]; pop esi; ret 4; 
0x5050d4b9  # je 0xd4df; or al, ch; ret; 
0x50522fa5  # jecxz 0x22f32; inc esi; add al, 0x2b; ret; 
0x50502de2  # jecxz 0x2de3; dec dword ptr [ebx + 0x5e5b5fc3]; pop ebp; ret 8; 
0x50548861  # jecxz 0x4888e; sal dword ptr [ebx], 0xd2; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x50514986  # jg 0x14988; add byte ptr [esi - 0x18], dl; xlatb; jg 0x1498e; add byte ptr [ecx + 0x59], bl; ret; 
0x5051498c  # jg 0x1498e; add byte ptr [ecx + 0x59], bl; ret; 
0x5051c901  # jg 0x1c8d7; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5051cb3f  # jg 0x1caec; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5051cb85  # jg 0x1cb55; pop edi; pop esi; pop ebx; ret; 
0x5051eb38  # jg 0x1ebaf; add eax, 0xc940c033; ret; 
0x5051fa86  # jg 0x1f820; pop edi; pop esi; pop ebx; leave; ret; 
0x5051fc3d  # jg 0x1fb39; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50525e34  # jg 0x25e2d; pop esi; ret; 
0x5052811a  # jg 0x280f2; xor eax, eax; pop edi; pop esi; ret; 
0x5052e2f4  # jg 0x2e336; add byte ptr [eax], al; add ebp, 0x450; leave; ret; 
0x50536076  # jg 0x36077; inc dword ptr [ebx - 0x17aeef3f]; mov byte ptr [0x5900002b], al; pop ebp; ret; 
0x5053f011  # jg 0x3effa; pop esi; pop ebp; ret; 
0x5053f05d  # jg 0x3f034; pop esi; pop ebx; pop ebp; ret; 
0x50542d39  # jg 0x42d3b; add bl, ch; and al, 0x33; fstp xword ptr [ebx]; ret; 
0x5050a3a0  # jg 0xa3a4; add cl, cl; ret 8; 
0x5050a473  # jg 0xa477; add cl, cl; ret 8; 
0x505156d2  # jge 0x156d8; xor eax, eax; pop esi; ret; 
0x50515710  # jge 0x15715; xor eax, eax; ret; 
0x5051578b  # jge 0x15790; xor eax, eax; ret; 
0x505157bf  # jge 0x157c4; xor eax, eax; ret; 
0x505157eb  # jge 0x157f1; xor eax, eax; leave; ret; 
0x50516156  # jge 0x16150; call 0x15729; pop edi; pop esi; leave; ret; 
0x50516793  # jge 0x1679a; mov eax, 0x7fffffff; ret; 
0x5051eabc  # jge 0x1eac5; mov dword ptr [eax + 0x10], ecx; xor eax, eax; inc eax; ret; 
0x5051f2b8  # jge 0x1f2bc; add byte ptr [ebx + 0x5e002c66], al; pop ebp; ret; 
0x5051fade  # jge 0x1faa7; ret; 
0x50522bbd  # jge 0x22bc7; add byte ptr [ecx + 0x75], bl; in al, 0x8b; ret; 
0x50523d5d  # jge 0x23d67; add byte ptr [ecx + 0x75], bl; in al, 0x8b; ret; 
0x50524e44  # jge 0x24e56; add byte ptr [ebp - 0x28], dh; mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x5052523d  # jge 0x251d4; pop esi; pop edi; pop ebx; leave; ret; 
0x50525805  # jge 0x25803; add byte ptr [edi], cl; test byte ptr [esi - 0x75000000], bl; ret; 
0x50527968  # jge 0x27974; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], 1; pop esi; ret; 
0x505028f6  # jge 0x28f2; add al, byte ptr [eax]; add ebp, 0x74; leave; ret 4; 
0x5052de30  # jge 0x2dde2; add byte ptr [edx + ebp - 0x75], dh; ret; 
0x5052f3cd  # jge 0x2f3df; push dword ptr [esi + 8]; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x50534401  # jge 0x34417; add bh, byte ptr [ecx + ecx*8 - 0x7d]; jge 0x3441d; and al, 0x7f; ret; 
0x50534407  # jge 0x3441d; and al, 0x7f; ret; 
0x50535e66  # jge 0x35e70; add dword ptr [ebx + 0x374e445], ecx; mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x505364d2  # jge 0x36510; add byte ptr [eax], al; mov dword ptr [esi], eax; pop ecx; call 0x38721; ret; 
0x505367f0  # jge 0x367f4; neg eax; pop ebp; ret; 
0x50538ffb  # jge 0x38ff9; mov esp, ebp; pop ebp; ret; 
0x505390de  # jge 0x390d4; mov esp, ebp; pop ebp; ret; 
0x50539cb4  # jge 0x39cb2; mov esp, ebp; pop ebp; ret; 
0x50539d43  # jge 0x39d41; mov esp, ebp; pop ebp; ret; 
0x5053f00e  # jge 0x3f01c; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x5053f05a  # jge 0x3f064; add byte ptr [edi - 0x2b], bh; pop esi; pop ebx; pop ebp; ret; 
0x50542147  # jge 0x42121; mov esi, dword ptr [ebp - 0x20]; push 0xa; call 0x38c24; pop ecx; ret; 
0x5054243b  # jge 0x4243c; dec dword ptr [ebx + 0x5b5e5f00]; leave; ret; 
0x50546735  # jge 0x4673b; or eax, 0xffffffff; ret; 
0x50504888  # jge 0x487e; call 0x72004892; ret; 
0x5050a602  # jge 0xa606; add cl, cl; ret 0xc; 
0x5051488c  # jl 0x148b2; add al, 0; jne 0x14897; neg eax; sbb eax, eax; ret; 
0x5051566c  # jl 0x1566f; add byte ptr [eax], al; ret; 
0x5051698d  # jl 0x16992; lea eax, [ecx - 1]; mov dword ptr [edx + 0xf0], eax; ret; 
0x5051d844  # jl 0x1d79e; pop edi; pop ebx; pop esi; ret; 
0x5051eba9  # jl 0x1eb9c; xor eax, eax; pop esi; leave; ret; 
0x5051f322  # jl 0x1f326; add byte ptr [edi], cl; mov bh, 0xc0; ret; 
0x5052592a  # jl 0x2591d; lea eax, [ecx + eax*4]; dec dword ptr [eax]; ret; 
0x50525aa2  # jl 0x25aa8; xor eax, eax; pop esi; ret; 
0x5052658d  # jl 0x26581; pop edi; pop esi; mov dword ptr [0x5055d3e8], eax; pop ebx; ret; 
0x5052878e  # jl 0x287c0; add al, 0x8b; ret; 
0x505287b9  # jl 0x287da; add al, 0x8b; popfd; push 0x8bffffff; ret; 
0x5052b9f4  # jl 0x2b9c8; pop edi; pop ebx; leave; ret; 
0x5052dfe1  # jl 0x2dfb8; or eax, 0xffffffff; ret; 
0x50535f8c  # jl 0x35f5c; pop edi; xor eax, eax; pop esi; ret; 
0x50537ffb  # jl 0x37fbb; pop edi; pop esi; ret; 
0x50538bb9  # jl 0x38b8d; xor eax, eax; inc eax; pop edi; pop esi; ret; 
0x50538c1f  # jl 0x38c07; pop esi; pop ebx; ret; 
0x5053e0a2  # jl 0x3e082; push ebp; push eax; pop ebp; ret; 
0x505064fb  # jl 0x649d; push esp; push eax; ret 4; 
0x50506543  # jl 0x64e5; push esp; push eax; ret 8; 
0x5050a6eb  # jl 0xa6ef; add cl, cl; ret 0xc; 
0x505112e8  # jle 0x112f5; push 0x5055ca4c; call dword ptr [0x5054a020]; ret; 
0x50501128  # jle 0x1135; push 0x5055c948; call dword ptr [0x5054a020]; ret; 
0x50511352  # jle 0x1135f; push 0x5055ca4c; call dword ptr [0x5054a024]; ret; 
0x50501149  # jle 0x1156; push 0x5055c948; call dword ptr [0x5054a024]; ret; 
0x5051979b  # jle 0x197c9; pop ebx; leave; ret; 
0x5051c872  # jle 0x1c881; and eax, 0x3f; mov al, byte ptr [eax + 0x5054b5c0]; mov byte ptr [ecx + 3], al; ret; 
0x5051fadb  # jle 0x1faed; or byte ptr [ebp - 0x39], bh; ret; 
0x50520186  # jle 0x20165; or eax, 0xffffffff; pop esi; ret; 
0x505219e9  # jle 0x21a3b; pop edi; pop esi; leave; ret; 
0x50525448  # jle 0x252c7; pop edi; pop esi; pop ebx; leave; ret; 
0x5052d3c4  # jle 0x2d311; pop edi; pop esi; pop ebx; leave; ret; 
0x505312a4  # jle 0x31306; pop edi; pop esi; leave; ret; 
0x50536bce  # jle 0x36bdc; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x5053e2c2  # jle 0x3e2c8; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x50508fb9  # jle 0x8fdf; mov dword ptr [esi + 0x28], edi; xor eax, eax; pop edi; pop esi; ret 4; 
0x50508fbc  # jle 0x8fe6; xor eax, eax; pop edi; pop esi; ret 4; 
0x5050912f  # jle 0x9141; push dword ptr [edx + ebx - 0xa]; ret; 
0x5050a512  # jle 0xa516; add cl, cl; ret 8; 
0x5050ab67  # jle 0xab6b; mov edx, ecx; mov dword ptr [eax + 0x108], edx; xor eax, eax; ret 8; 
0x50511544  # jne 0x11548; pop esi; ret; 
0x50513c14  # jne 0x13c18; pop esi; ret; 
0x50514334  # jne 0x14342; call dword ptr [0x5054a04c]; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x5051433d  # jne 0x1434b; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x50514890  # jne 0x14897; neg eax; sbb eax, eax; ret; 
0x50514899  # jne 0x1489d; inc eax; ret; 
0x505150e2  # jne 0x150a1; xor eax, eax; pop esi; leave; ret; 
0x50515119  # jne 0x15123; call dword ptr [esi + 4]; add esp, 0x18; leave; ret; 
0x50515116  # jne 0x15124; push dword ptr [ebp + 8]; call dword ptr [esi + 4]; add esp, 0x18; leave; ret; 
0x50515812  # jne 0x15818; xor eax, eax; leave; ret; 
0x50515c59  # jne 0x15c46; ret; 
0x50515c50  # jne 0x15c55; mov byte ptr [eax], 0x5f; inc eax; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x50515e41  # jne 0x15dee; pop edi; mov eax, ebp; pop ebp; pop ebx; ret; 
0x50515eca  # jne 0x15e99; pop ebx; ret; 
0x5050161d  # jne 0x161b; call 0x11aa; pop edi; pop esi; leave; ret 4; 
0x505166e7  # jne 0x166ed; mov eax, esi; pop esi; ret; 
0x505167be  # jne 0x167cb; mov eax, dword ptr [eax + 0x4c]; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x505167ce  # jne 0x167db; mov eax, dword ptr [eax + 0x58]; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051681b  # jne 0x16828; mov eax, dword ptr [eax + 0x58]; test eax, eax; je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x50516806  # jne 0x16828; push 0x38; pop eax; ret; 
0x5051686c  # jne 0x16874; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x505168c6  # jne 0x168ce; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x50516963  # jne 0x16969; or eax, 0xffffffff; ret; 
0x5051699f  # jne 0x169a2; ret; 
0x50516a1f  # jne 0x16a22; ret; 
0x50516a53  # jne 0x16a56; ret; 
0x50516a9a  # jne 0x16aa0; or eax, 0xffffffff; ret; 
0x50516aad  # jne 0x16ab0; ret; 
0x50516ae6  # jne 0x16ae9; ret; 
0x50516b37  # jne 0x16b3a; ret; 
0x50516b5a  # jne 0x16b60; or eax, 0xffffffff; ret; 
0x50516c7a  # jne 0x16c7d; ret; 
0x50518fd5  # jne 0x18fda; mov dword ptr [esi + 0x30], ebx; pop ebx; pop edi; pop esi; ret; 
0x50519742  # jne 0x19757; push dword ptr [esi + 0x30]; call 0x26694; pop ecx; ret; 
0x5051a6d8  # jne 0x1a6df; xor eax, eax; pop esi; pop ebp; ret; 
0x5051c78b  # jne 0x1c794; call 0x26598; xor eax, eax; pop ebp; ret; 
0x5051c925  # jne 0x1c928; inc ecx; push ecx; call 0x3616c; pop ecx; ret; 
0x5051ca80  # jne 0x1ca70; and dword ptr [esi + 4], 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x5051ced9  # jne 0x1cedf; xor eax, eax; leave; ret; 
0x5051cfc0  # jne 0x1cf9d; xor eax, eax; inc eax; pop edi; leave; ret; 
0x5051d05b  # jne 0x1d05f; leave; ret; 
0x5051d778  # jne 0x1d77e; xor eax, eax; inc eax; ret; 
0x5051e1f5  # jne 0x1e1e7; xor eax, eax; pop ebp; ret; 
0x5051e2c3  # jne 0x1e2ca; or eax, 0xffffffff; leave; ret; 
0x5051e2f0  # jne 0x1e2f6; xor eax, eax; pop esi; ret; 
0x5051e323  # jne 0x1e329; xor eax, eax; pop esi; ret; 
0x5051e370  # jne 0x1e377; or eax, 0xffffffff; leave; ret; 
0x5051e834  # jne 0x1e84d; xor eax, eax; mov byte ptr [edx], 0; inc eax; ret; 
0x5051eb39  # jne 0x1eb40; xor eax, eax; inc eax; leave; ret; 
0x5051f2b7  # jne 0x1f336; add al, byte ptr [eax]; and dword ptr [esi + 0x2c], 0; pop esi; pop ebp; ret; 
0x5051f46b  # jne 0x1f457; pop edi; mov eax, esi; pop esi; pop ebp; ret; 
0x5051f632  # jne 0x1f635; ret; 
0x5051fff3  # jne 0x1fffa; or eax, 0xffffffff; pop ebx; ret; 
0x50521e4f  # jne 0x21e55; xor eax, eax; leave; ret; 
0x50521f49  # jne 0x21f4d; pop esi; ret; 
0x505235ea  # jne 0x235f0; xor eax, eax; leave; ret; 
0x505235f4  # jne 0x235f2; call 0x25932; pop ecx; pop ecx; leave; ret; 
0x50524270  # jne 0x24273; ret; 
0x50524293  # jne 0x24289; ret; 
0x50524783  # jne 0x24788; xor eax, eax; ret; 
0x5052479c  # jne 0x2479f; ret; 
0x505247a4  # jne 0x247aa; xor eax, eax; pop esi; ret; 
0x50524804  # jne 0x247c0; xor eax, eax; pop edi; pop esi; ret; 
0x50524829  # jne 0x2482f; xor eax, eax; leave; ret; 
0x50524e06  # jne 0x24e0a; leave; ret; 
0x50524e0e  # jne 0x24e18; call 0x24939; pop ecx; pop ecx; leave; ret; 
0x50524e47  # jne 0x24e21; mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x5052528c  # jne 0x25278; pop esi; ret; 
0x505266f6  # jne 0x266f9; ret; 
0x505271cb  # jne 0x271d1; xor eax, eax; pop esi; ret; 
0x50527943  # jne 0x2794a; and dword ptr [esi + 4], eax; pop esi; ret; 
0x50528388  # jne 0x28390; mov eax, 0x5054bcd4; ret; 
0x50528e19  # jne 0x28ddf; mov eax, edi; pop edi; pop esi; ret; 
0x5052d597  # jne 0x2d58d; call 0x323c0; add esp, 0xc; pop edi; leave; ret; 
0x5052d68b  # jne 0x2d681; call 0x323c0; add esp, 0xc; pop edi; leave; ret; 
0x5052d722  # jne 0x2d6fb; pop edi; pop esi; ret; 
0x5052dc4a  # jne 0x2dc58; push eax; call dword ptr [ecx]; add esp, 0x18; pop ebp; ret; 
0x5052dfa1  # jne 0x2dfab; call 0x1f473; add esp, 0x14; pop ebp; ret; 
0x5052df9e  # jne 0x2dfac; push dword ptr [ebp + 8]; call 0x1f473; add esp, 0x14; pop ebp; ret; 
0x5052ef50  # jne 0x2ef56; xor eax, eax; pop esi; ret; 
0x5052f15d  # jne 0x2f15b; call 0x1c966; add esp, 0xc; leave; ret; 
0x5052f863  # jne 0x2f853; pop esi; ret; 
0x50531e44  # jne 0x31e0a; push 7; call 0x38c24; pop ecx; ret; 
0x50531ed1  # jne 0x31eaf; call 0x38a0d; mov dword ptr [eax], esi; call 0x38721; ret; 
0x50532b97  # jne 0x32ba1; call 0x32b1c; pop ecx; pop ecx; pop ebp; ret; 
0x50532c16  # jne 0x32c20; call 0x32ba2; pop ecx; pop ecx; pop ebp; ret; 
0x50532c9c  # jne 0x32ca6; call 0x32c21; pop ecx; pop ecx; pop ebp; ret; 
0x50532d1b  # jne 0x32d25; call 0x32ca7; pop ecx; pop ecx; pop ebp; ret; 
0x50532da1  # jne 0x32dab; call 0x32d26; pop ecx; pop ecx; pop ebp; ret; 
0x50532db6  # jne 0x32dc0; call 0x345d7; add esp, 0xc; pop ebp; ret; 
0x50532e3d  # jne 0x32e35; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50532ed2  # jne 0x32e98; pop esi; pop edi; pop ebx; xor eax, eax; ret; 
0x50532fb6  # jne 0x32fab; pop esi; pop ebx; pop edi; xor eax, eax; ret; 
0x5053313d  # jne 0x33147; call 0x33006; pop ecx; pop ecx; pop ebp; ret; 
0x5053325b  # jne 0x3326d; call 0x33209; mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x50533395  # jne 0x3339b; xor eax, eax; inc eax; ret; 
0x50533a90  # jne 0x33aa1; call 0x3a195; mov dword ptr [eax], 0xc; xor eax, eax; pop esi; ret; 
0x50533b2c  # jne 0x33b00; mov edi, edi; xor eax, eax; ret; 
0x50533c2d  # jne 0x33c20; pop ebx; pop esi; ret; 
0x505341e4  # jne 0x341d3; mov eax, dword ptr [esp + 0x10]; pop ebx; pop esi; pop edi; ret; 
0x50534296  # jne 0x34213; mov eax, dword ptr [esp + 0x10]; pop ebx; pop esi; pop edi; ret; 
0x5053421b  # jne 0x34213; pop ebx; pop esi; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50535eca  # jne 0x35ed4; call 0x36026; pop ecx; ret; 
0x50535f2b  # jne 0x35f32; push 0x1a; pop eax; pop esi; ret; 
0x50536375  # jne 0x36383; mov ebx, dword ptr [ebp + 8]; push 4; call 0x38c24; pop ecx; ret; 
0x5053661d  # jne 0x365fb; push esi; call 0x36026; pop ecx; ret; 
0x5053676e  # jne 0x36779; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x50536bfc  # jne 0x36c06; push esi; call 0x36026; pop ecx; ret; 
0x50536e9d  # jne 0x36eb7; call 0x36026; pop ecx; ret; 
0x50536eb7  # jne 0x36ec1; call 0x36e10; add esp, 0x14; pop ebp; ret; 
0x50536f7e  # jne 0x36f88; call 0x36026; pop ecx; ret; 
0x50536f92  # jne 0x36f9c; call 0x36ec3; add esp, 0xc; pop ebp; ret; 
0x50536f8f  # jne 0x36f9d; push dword ptr [ebp + 8]; call 0x36ec3; add esp, 0xc; pop ebp; ret; 
0x50537098  # jne 0x370a2; push esi; call 0x36026; pop ecx; ret; 
0x505371fc  # jne 0x3720a; call 0x36026; pop ecx; ret; 
0x5053727c  # jne 0x37251; xor eax, eax; pop edi; pop esi; pop ebp; ret; 
0x50537549  # jne 0x37553; push 0xd; call 0x38c24; pop ecx; ret; 
0x50537708  # jne 0x37712; push 0xd; call 0x38c24; pop ecx; ret; 
0x50537714  # jne 0x3771e; push 0xc; call 0x38c24; pop ecx; ret; 
0x50537957  # jne 0x37923; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x505379f1  # jne 0x379b4; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50537a43  # jne 0x37a02; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50537ac9  # jne 0x37ad3; call eax; pop ebp; ret; 
0x50537b0f  # jne 0x37b19; jb 0x37b03; pop esi; pop ebp; ret; 
0x50537b33  # jne 0x37b41; jb 0x37b23; pop esi; pop ebp; ret; 
0x50503815  # jne 0x3823; push 0x80042ee2; call 0x11aa; xor eax, eax; ret; 
0x505384d8  # jne 0x384dc; pop ebp; ret; 
0x50538e69  # jne 0x38e70; call 0x39b35; mov eax, dword ptr [eax + 4]; ret; 
0x50538ff5  # jne 0x38f9a; mov esi, dword ptr [ebp - 8]; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x50538ff8  # jne 0x38ff2; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x505390db  # jne 0x390d5; mov edi, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x50539231  # jne 0x3922a; pop edi; pop esi; ret; 
0x50539462  # jne 0x39448; push 0xd; call 0x38c24; pop ecx; ret; 
0x50539ba8  # jne 0x39b8e; ret; 
0x50539cb1  # jne 0x39c83; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x50539d5e  # jne 0x39d67; push eax; call 0x36451; pop ecx; pop ebp; ret; 
0x5053a19c  # jne 0x3a1a4; mov eax, 0x505569b8; ret; 
0x5053a1af  # jne 0x3a1b7; mov eax, 0x505569bc; ret; 
0x5053a21e  # jne 0x3a228; call 0x3a1de; pop ecx; pop ecx; pop ebp; ret; 
0x5053a45a  # jne 0x3a464; call 0x3a229; add esp, 0xc; pop ebp; ret; 
0x5053a457  # jne 0x3a465; push dword ptr [ebp + 8]; call 0x3a229; add esp, 0xc; pop ebp; ret; 
0x5053a52d  # jne 0x3a537; call 0x3a466; add esp, 0xc; pop ebp; ret; 
0x5053a52a  # jne 0x3a538; push dword ptr [ebp + 8]; call 0x3a466; add esp, 0xc; pop ebp; ret; 
0x5053a7a3  # jne 0x3a7ad; call 0x42052; pop ecx; ret; 
0x5053aad3  # jne 0x3aadd; call 0x42052; pop ecx; ret; 
0x5053b2db  # jne 0x3b2e9; call 0x3b1fb; add esp, 0x18; pop ebp; ret; 
0x5053b2d8  # jne 0x3b2ea; push dword ptr [ebp + 0xc]; call 0x3b1fb; add esp, 0x18; pop ebp; ret; 
0x5053b664  # jne 0x3b66e; call 0x3b5b6; pop ecx; pop ecx; pop ebp; ret; 
0x5053b747  # jne 0x3b751; call 0x3b66f; add esp, 0xc; pop ebp; ret; 
0x5053b744  # jne 0x3b752; push dword ptr [ebp + 8]; call 0x3b66f; add esp, 0xc; pop ebp; ret; 
0x5053c1af  # jne 0x3c1b9; call 0x42052; pop ecx; ret; 
0x5053c2c2  # jne 0x3c2cc; call 0x42052; pop ecx; ret; 
0x5053c38b  # jne 0x3c391; xor eax, eax; pop ebp; ret; 
0x5053c3d7  # jne 0x3c3df; and eax, 0xffffffdf; sub eax, 7; pop ebp; ret; 
0x5053e194  # jne 0x3e19e; call 0x3e0d0; add esp, 0x14; pop ebp; ret; 
0x5053e191  # jne 0x3e19f; push dword ptr [ebp + 8]; call 0x3e0d0; add esp, 0x14; pop ebp; ret; 
0x5053e42c  # jne 0x3e436; call 0x3e3dc; add esp, 0x10; pop ebp; ret; 
0x5053e429  # jne 0x3e437; push dword ptr [ebp + 8]; call 0x3e3dc; add esp, 0x10; pop ebp; ret; 
0x5053e45f  # jne 0x3e469; call 0x3e2cb; pop ecx; pop ecx; pop ebp; ret; 
0x5053e472  # jne 0x3e47c; call 0x3e33e; pop ecx; pop ecx; pop ebp; ret; 
0x5053e6d0  # jne 0x3e6da; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053e6cd  # jne 0x3e6db; push dword ptr [ebp + 8]; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed1f  # jne 0x3ed29; call 0x3eb46; add esp, 0x14; pop ebp; ret; 
0x5053ed1c  # jne 0x3ed2a; push dword ptr [ebp + 8]; call 0x3eb46; add esp, 0x14; pop ebp; ret; 
0x5053ed77  # jne 0x3ed81; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed74  # jne 0x3ed82; push dword ptr [ebp + 8]; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed9a  # jne 0x3eda4; call 0x3ecfb; add esp, 0x1c; pop ebp; ret; 
0x5053ed97  # jne 0x3eda5; push dword ptr [ebp + 8]; call 0x3ecfb; add esp, 0x1c; pop ebp; ret; 
0x5053efe8  # jne 0x3efed; or dword ptr [esi], eax; ret; 
0x5053fc87  # jne 0x3fc91; call 0x3fbfb; add esp, 0x10; pop ebp; ret; 
0x5053fc84  # jne 0x3fc92; push dword ptr [ebp + 8]; call 0x3fbfb; add esp, 0x10; pop ebp; ret; 
0x5053fe95  # jne 0x3fe9d; mov eax, dword ptr [ebp - 0x30]; mov dword ptr [edi + 0x64], eax; xor eax, eax; call 0x38721; ret; 
0x505405ff  # jne 0x40609; call 0x42052; pop ecx; ret; 
0x50540f1a  # jne 0x40f28; push 4; call 0x38c24; pop ecx; ret; 
0x50541096  # jne 0x4109d; push 0x18; pop eax; pop esi; ret; 
0x50541381  # jne 0x4138b; push 0; call 0x41324; add esp, 0x10; pop ebp; ret; 
0x50541cae  # jne 0x41c87; xor eax, eax; pop ebp; ret; 
0x50541c85  # jne 0x41c8c; xor eax, eax; inc eax; pop ebp; ret; 
0x5054214a  # jne 0x4212c; push 0xa; call 0x38c24; pop ecx; ret; 
0x505423a8  # jne 0x423b2; call 0x42052; pop ecx; ret; 
0x5054267f  # jne 0x42688; mov eax, 0x8000; pop ebp; ret; 
0x505428bb  # jne 0x428c5; call 0x42796; add esp, 0x10; pop ebp; ret; 
0x505428b8  # jne 0x428c6; push dword ptr [ebp + 8]; call 0x42796; add esp, 0x10; pop ebp; ret; 
0x505428d2  # jne 0x428e3; call 0x3a195; mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x50543147  # jne 0x43151; call 0x42fca; add esp, 0x14; pop ebp; ret; 
0x50543144  # jne 0x43152; push dword ptr [ebp + 8]; call 0x42fca; add esp, 0x14; pop ebp; ret; 
0x5054338c  # jne 0x43396; call 0x43153; add esp, 0x10; pop ebp; ret; 
0x50543389  # jne 0x43397; push dword ptr [ebp + 8]; call 0x43153; add esp, 0x10; pop ebp; ret; 
0x50543510  # jne 0x4351a; call 0x43398; add esp, 0x10; pop ebp; ret; 
0x50543eac  # jne 0x43e92; push 4; call 0x38c24; pop ecx; ret; 
0x50543ffa  # jne 0x44004; call 0x43eb7; add esp, 0x10; pop esi; pop ebp; ret; 
0x50545c13  # jne 0x45c24; or eax, 0x8000; ret; 
0x50546050  # jne 0x4605a; call 0x45f89; add esp, 0xc; pop ebp; ret; 
0x5054604d  # jne 0x4605b; push dword ptr [ebp + 8]; call 0x45f89; add esp, 0xc; pop ebp; ret; 
0x50546b41  # jne 0x46b46; ret 0xc; 
0x50546bbd  # jne 0x46bc6; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546bf9  # jne 0x46c02; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546ce7  # jne 0x46cf0; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546d34  # jne 0x46d3d; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546d70  # jne 0x46d79; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x50546fa0  # jne 0x46fa9; or eax, 0xffffffff; pop ebp; ret 8; 
0x5054703a  # jne 0x47043; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x5054742a  # jne 0x47433; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x5054746c  # jne 0x47475; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x505474b4  # jne 0x474bd; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x505474ed  # jne 0x474f2; ret 4; 
0x5054751a  # jne 0x47520; pop ebp; ret 8; 
0x5054755f  # jne 0x47551; xor eax, eax; ret 8; 
0x50547595  # jne 0x4759a; xor eax, eax; ret; 
0x505475b0  # jne 0x475c0; push 0x276d; call 0x4756b; or eax, 0xffffffff; ret; 
0x505475ef  # jne 0x475f8; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x50547631  # jne 0x4763a; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x5054766d  # jne 0x47676; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x505476a9  # jne 0x476b2; or eax, 0xffffffff; pop ebp; ret 0x24; 
0x5054852d  # jne 0x4853b; push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x50505ac0  # jne 0x5aca; call 0x51b3; pop ebp; ret 0x1c; 
0x50505abd  # jne 0x5acb; push dword ptr [ebp + 8]; call 0x51b3; pop ebp; ret 0x1c; 
0x50505aba  # jne 0x5acc; push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x51b3; pop ebp; ret 0x1c; 
0x50505f0e  # jne 0x5f18; call 0x5bb0; pop ebp; ret 0x24; 
0x50505f08  # jne 0x5f1a; push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x5bb0; pop ebp; ret 0x24; 
0x505063c4  # jne 0x63cd; or eax, 0xffffffff; pop esi; ret 4; 
0x5050644a  # jne 0x644c; ret; 
0x50509001  # jne 0x8fe7; pop edi; pop esi; xor eax, eax; pop ebx; ret 0x10; 
0x50509731  # jne 0x9714; pop esi; ret; 
0x5050976a  # jne 0x9743; pop edi; pop esi; ret; 
0x5050ae45  # jne 0xae49; add cl, cl; ret 0x14; 
0x5050e5a7  # jne 0xe5af; or eax, 0xffffffff; ret 8; 
0x5051fe4d  # jno 0x1fdda; inc ebp; or al, 0x8b; dec ebp; sbb byte ptr [ebx], al; ret 0x4589; 
0x5052f20f  # jno 0x2f210; call ptr [ecx + 0x59]; leave; ret; 
0x5052f238  # jno 0x2f239; call ptr [ecx + 0x59]; leave; ret; 
0x50509fd1  # jno 0x9fd2; inc dword ptr [ebx + 0x5b5fffc8]; pop esi; pop ebp; ret 0xc; 
0x5051fcc4  # jnp 0xc0850d0a; or bl, byte ptr [ecx + 0x307e283]; ret 0xf8c1; 
0x50525a57  # jns 0x25a32; pop edi; lea eax, [esi + 1]; pop esi; ret; 
0x50509895  # jns 0x9896; inc dword ptr [ebx + 0x5f5bffc8]; pop esi; pop ebp; ret 8; 
0x50511587  # jo 0x1158a; mov eax, esi; pop esi; ret; 
0x50516449  # jo 0x16486; ret; 
0x50516846  # jo 0x16858; call 0x1f32c; pop ecx; ret; 
0x50519721  # jo 0x19754; add byte ptr [eax], al; pop ecx; pop ebx; leave; ret; 
0x505271ab  # jo 0x271f1; call 0x1a725; pop ecx; pop ecx; ret; 
0x50527b93  # jo 0x27b9d; push dword ptr [eax]; push dword ptr [esp + 0x10]; call 0x2600b; add esp, 0xc; ret; 
0x5052f85d  # jo 0x2f863; add eax, 8; dec edx; jne 0x2f853; pop esi; ret; 
0x505317cd  # jo 0x31752; mov eax, 0x42c; add eax, 0xc0330474; leave; ret; 
0x50531798  # jo 0x317a6; call 0x2f672; add esp, 0xc; ret; 
0x50532b6e  # jo 0x32b6d; leave; ret; 
0x50532bef  # jo 0x32bee; leave; ret; 
0x50532c73  # jo 0x32c72; leave; ret; 
0x50532cf4  # jo 0x32cf3; leave; ret; 
0x50532d78  # jo 0x32d77; leave; ret; 
0x50533117  # jo 0x33116; pop ebx; leave; ret; 
0x5053391f  # jo 0x3391e; pop esi; pop ebx; leave; ret; 
0x50537bb7  # jo 0x37b9b; push ebp; push eax; xor eax, eax; pop ebp; ret; 
0x50537fad  # jo 0x37fb6; add byte ptr [eax], al; ret; 
0x505394e2  # jo 0x394e1; mov eax, esi; pop ebx; leave; ret; 
0x50539c5e  # jo 0x39c5d; pop ebx; leave; ret; 
0x5053a14f  # jo 0x3a14e; leave; ret; 
0x5053a212  # jo 0x3a211; leave; ret; 
0x5053a519  # jo 0x3a518; mov eax, dword ptr [ebp - 4]; pop esi; pop ebx; leave; ret; 
0x5053b657  # jo 0x3b656; pop ebx; leave; ret; 
0x5053b736  # jo 0x3b735; pop esi; pop ebx; leave; ret; 
0x5053e33a  # jo 0x3e339; leave; ret; 
0x5053e3bc  # jo 0x3e3bb; leave; ret; 
0x50541373  # jo 0x41372; leave; ret; 
0x5054158f  # jo 0x4158e; leave; ret; 
0x50541688  # jo 0x41672; ret; 
0x50541c75  # jo 0x41c74; pop edi; pop ebx; leave; ret; 
0x50543076  # jo 0x43075; pop edi; pop esi; pop ebx; leave; ret; 
0x50543a1f  # jo 0x43a1e; leave; ret; 
0x50543b17  # jo 0x43b16; pop esi; pop ebx; leave; ret; 
0x5054603d  # jo 0x4603c; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x50547eda  # jo 0x47f0f; int 0x5e; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x50548201  # jo 0x48236; int 0x5b; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x50549999  # jo 0x49998; leave; ret; 
0x50549bb5  # jo 0x49bb4; leave; ret; 
0x50506444  # jo 0x640f; push ebp; push eax; test eax, eax; jne 0x644c; ret; 
0x505064a4  # jo 0x646f; push ebp; push eax; call dword ptr [0x5054a18c]; ret; 
0x5050a0d2  # jo 0xa0d3; inc dword ptr [ebx + 0x5e5fffc8]; ret 8; 
0x505223f9  # jp 0x223fa; add byte ptr [eax], al; add ebp, 0x74; leave; ret; 
0x50524e67  # jp 0x24e68; inc dword ptr [ebx + 0x59590020]; mov dword ptr [eax + 4], 0x1000; ret; 
0x50524e8d  # jp 0x24e8e; call ptr [ecx + 0x59]; pop esi; ret; 
0x50536417  # jp 0x36456; add byte ptr [eax], al; mov dword ptr [eax], 0xc; xor eax, eax; call 0x38721; ret; 
0x5053e3d1  # jp 0x3e3d8; xor eax, eax; inc eax; pop ebp; ret; 
0x5053ee25  # jp 0x3ee2c; xor eax, eax; inc eax; leave; ret; 
0x5051565f  # js 0x15662; add byte ptr [eax], al; mov edx, dword ptr [esp + 4]; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x505172c9  # js 0x17294; ret; 
0x5051ab6e  # js 0x1ab71; add cl, cl; ret; 
0x50524780  # js 0x24786; add byte ptr [ebp + 3], dh; xor eax, eax; ret; 
0x5052aaaf  # js 0x2aab1; add cl, cl; ret; 
0x5053aad6  # js 0x3ab4d; add byte ptr [eax], al; pop ecx; ret; 
0x5053c3e4  # js 0x3c3ef; mov ecx, dword ptr [edx]; movzx eax, byte ptr [ecx]; inc ecx; mov dword ptr [edx], ecx; ret; 
0x50549334  # js 0x492ff; ret; 
0x505064d2  # js 0x6474; push esp; push eax; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x50506856  # js 0x6821; ret; 
0x5050aad4  # js 0xaad8; add cl, cl; ret 0xc; 
0x5050ab28  # js 0xab2c; add cl, cl; ret 0xc; 
0x5050f6b4  # js 0xf69e; retf 0xff1f; push dword ptr [ebx]; fstp xword ptr [ebx]; ret; 
0x5052a1ec  # lahf; add byte ptr [eax], 0; add byte ptr [ecx + 0x848f], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x505097f0  # lahf; add byte ptr [eax], al; add byte ptr [ebp + 0x19486], cl; add byte ptr [ebx], bh; ret; 
0x5053312f  # lahf; cmp ecx, 0x19; ja 0x33146; add eax, -0x20; pop ebp; ret; 
0x50516589  # lahf; dec esp; add dword ptr [eax], eax; add byte ptr [ebx + 0x16487], cl; add byte ptr [ebx], bh; ret; 
0x50534b1b  # lahf; ret 0x548d; 
0x50534683  # lahf; ret; 
0x50541386  # lcall 0x10c4, 0x83ffffff; pop ebp; ret; 
0x50536f19  # lcall 0x3b08, 0x45890000; ret; 
0x505462f7  # ldmxcsr dword ptr [ebp + 8]; call 0x38721; ret; 
0x505147ea  # lds eax, ptr [eax + 0x26]; add byte ptr [eax], al; leave; ret 0x20; 
0x505116b3  # lds eax, ptr [eax]; add byte ptr [ebx + 0x458928c4], al; adc byte ptr [ebx], bh; ret; 
0x505116b2  # lds eax, ptr ds:[eax]; add byte ptr [ebx + 0x458928c4], al; adc byte ptr [ebx], bh; ret; 
0x50517bb4  # lds ebp, ptr [eax - 0x37000000]; ret; 
0x5050f93c  # lds ebp, ptr [eax - 0x37]; ret 0x10; 
0x50522e4c  # lds ebp, ptr [eax - 0x37]; ret; 
0x5052e8dd  # lds ebx, ptr [eax - 0x36ffffff]; ret; 
0x50515e45  # lds ebx, ptr [ebp + 0x5b]; ret; 
0x5051e07b  # lds ebx, ptr [ebp + 0x5f]; pop esi; ret; 
0x50527ebe  # lds ecx, ptr [eax + eax*2]; add byte ptr [eax], al; leave; ret; 
0x505316ed  # lds ecx, ptr [eax - 0x36ffffff]; ret; 
0x50506855  # lds edi, ptr [eax - 0x37]; ret; 
0x5052aaae  # lds edi, ptr [eax]; add cl, cl; ret; 
0x5052e2f9  # lds edx, ptr [eax + 4]; add byte ptr [eax], al; leave; ret; 
0x505128cf  # lds edx, ptr [eax + edx]; add byte ptr [eax], al; leave; ret 0x10; 
0x5051ea6d  # lds edx, ptr [eax - 0x36ffffe1]; ret; 
0x505130df  # lds edx, ptr [eax - 0x36fffff1]; ret 0xc; 
0x505484cf  # lds edx, ptr [eax - 0x36ffffff]; ret 8; 
0x50538c2e  # lds esi, ptr [eax - 0xafaaa0]; adc eax, 0x5054a024; pop ebp; ret; 
0x5051f259  # lds esp, ptr [eax - 0x36ffffb1]; ret; 
0x50519652  # lds esp, ptr [eax - 0x36fffffd]; ret; 
0x5051ebe5  # lea eax, [eax + eax + 1]; ret; 
0x5051e0e7  # lea eax, [eax + eax - 1]; pop edi; pop esi; ret; 
0x50523321  # lea eax, [eax*4 + 0x14]; pop esi; ret; 
0x50538717  # lea eax, [ebp - 0x10]; mov dword ptr fs:[0], eax; ret; 
0x50514979  # lea eax, [ebx + 0x101]; pop ebx; ret; 
0x50516ddd  # lea eax, [ebx + 4]; pop ebx; leave; ret; 
0x5051c8b4  # lea eax, [ecx + eax + 0xc]; mov ecx, dword ptr [esp + 8]; mov dword ptr [ecx], eax; ret; 
0x5052592c  # lea eax, [ecx + eax*4]; dec dword ptr [eax]; ret; 
0x5051698f  # lea eax, [ecx - 1]; mov dword ptr [edx + 0xf0], eax; ret; 
0x50533be3  # lea eax, [ecx - 1]; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50533bed  # lea eax, [ecx - 2]; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50533bf7  # lea eax, [ecx - 3]; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50533c01  # lea eax, [ecx - 4]; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x5051964e  # lea eax, [ecx]; add byte ptr [ecx + 0x3a0c5], al; add cl, cl; ret; 
0x50532ff9  # lea eax, [edi - 1]; pop esi; pop ebx; pop edi; ret; 
0x5053dead  # lea eax, [edx + 4]; pop edi; pop esi; pop ebx; leave; ret; 
0x50532e50  # lea eax, [edx - 1]; pop ebx; ret; 
0x50532f10  # lea eax, [edx - 3]; pop esi; pop edi; pop ebx; ret; 
0x50532f17  # lea eax, [edx - 4]; pop esi; pop edi; pop ebx; ret; 
0x505095be  # lea eax, [edx]; add cl, cl; ret 0xc; 
0x50525a5a  # lea eax, [esi + 1]; pop esi; ret; 
0x50541967  # lea eax, [esi - 1]; add esp, 0x20; pop esi; leave; ret; 
0x5051964d  # lea eax, es:[ecx]; add byte ptr [ecx + 0x3a0c5], al; add cl, cl; ret; 
0x5050d562  # lea ecx, [eax + 0xab4]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x50533936  # lea ecx, [eax - 0x41]; cmp ecx, 0x19; ja 0x3394f; add eax, 0x20; pop ebp; ret; 
0x5050d4f3  # lea ecx, [esi + 0xd8]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; pop esi; ret 8; 
0x50516155  # lea edi, [ebp - 8]; call 0x15729; pop edi; pop esi; leave; ret; 
0x50511586  # lea esi, [eax + 1]; mov eax, esi; pop esi; ret; 
0x505165d5  # lea esp, [ebx]; add byte ptr [ebx + 0x1a887], cl; add byte ptr [ecx + 0x3b], bl; ret; 
0x505059b8  # leave; add al, byte ptr [eax]; leave; ret 0x24; 
0x50542fbd  # leave; cmp dword ptr [0x5055ded0], eax; sete cl; mov eax, ecx; ret; 
0x505412f0  # leave; cmp eax, 0xc0000017; sete cl; mov eax, ecx; ret; 
0x505488c1  # leave; inc ecx; mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x50516914  # leave; je 0x1691f; mov edx, dword ptr [eax + 0xe8]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0xec]; ret; 
0x50516af8  # leave; je 0x16b03; mov edx, dword ptr [eax + 0x120]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x50516baa  # leave; je 0x16bb3; mov dword ptr [ecx + 0xdc], eax; push eax; call dword ptr [0x5054a028]; ret; 
0x50502e75  # leave; je 0x2e80; mov eax, dword ptr [eax + 0x110]; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50525e33  # leave; jg 0x25e2d; pop esi; ret; 
0x50521912  # leave; mov dword ptr [eax + 0x50], ecx; mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x5051c88b  # leave; mov dword ptr [eax + 4], ecx; mov dword ptr [eax], ecx; mov dword ptr [eax + 8], ecx; ret; 
0x5051e1ba  # leave; neg ecx; add ecx, dword ptr [ebp + 0x10]; add eax, ecx; pop ebp; ret; 
0x50521c97  # leave; push dword ptr [esp + 0x18]; call 0x21bf3; add esp, 0x10; pop ebx; ret; 
0x5050112c  # leave; push ebp; push eax; call dword ptr [0x5054a020]; ret; 
0x5050114d  # leave; push ebp; push eax; call dword ptr [0x5054a024]; ret; 
0x505064a5  # leave; push ebp; push eax; call dword ptr [0x5054a18c]; ret; 
0x505011a6  # leave; push ebp; push eax; ret; 
0x50506445  # leave; push ebp; push eax; test eax, eax; jne 0x644c; ret; 
0x50537557  # leave; push ss; add byte ptr [eax], al; pop ecx; ret; 
0x505019c1  # leave; ret 0x10; 
0x5050adee  # leave; ret 0x14; 
0x505124b5  # leave; ret 0x18; 
0x50505bac  # leave; ret 0x1c; 
0x50508596  # leave; ret 0x20; 
0x505059bb  # leave; ret 0x24; 
0x50505eea  # leave; ret 0x2c; 
0x50501275  # leave; ret 0xc; 
0x50501626  # leave; ret 4; 
0x50501344  # leave; ret 8; 
0x50506857  # leave; ret; 
0x5053ee23  # les eax, ptr [0xc033057a]; inc eax; leave; ret; 
0x5051173c  # les eax, ptr [eax]; add byte ptr [ebx + 0x458928c4], al; adc byte ptr [ebx], bh; ret; 
0x5052d3e4  # les eax, ptr [ebx]; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x5053e3cf  # les eax, ptr [ecx + 0x7a]; add eax, 0x5d40c033; ret; 
0x505311be  # les eax, ptr [ecx + ecx*4]; inc ecx; pushal; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x50505ee7  # les eax, ptr [edx]; add cl, cl; ret 0x2c; 
0x50521e4a  # les eax, ptr [esi + ebx*2]; test eax, eax; jne 0x21e55; xor eax, eax; leave; ret; 
0x5052d7b2  # les ebp, ptr [eax]; leave; ret; 
0x50517a67  # les ebp, ptr [eax]; pop esi; pop edi; pop ebx; leave; ret; 
0x505145f8  # les ebp, ptr [ebx + edi]; ret; 
0x5052a9e8  # les ebp, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x50531e45  # les ebp, ptr [edx + 7]; call 0x38c24; pop ecx; ret; 
0x50541723  # les ebp, ptr [esi + ebx*2]; pop ebp; ret; 
0x50513ff4  # les ebx, ptr [eax + eax*2]; pop ebp; ret 0x10; 
0x5051511f  # les ebx, ptr [eax]; leave; ret; 
0x5051d29d  # les ebx, ptr [eax]; mov eax, edi; pop edi; pop esi; ret; 
0x5052dc50  # les ebx, ptr [eax]; pop ebp; ret; 
0x50514392  # les ebx, ptr [eax]; pop ecx; ret; 
0x5051675e  # les ebx, ptr [eax]; pop edi; mov eax, esi; pop esi; ret; 
0x5051ffe6  # les ebx, ptr [eax]; pop edi; pop esi; leave; ret; 
0x505435ff  # les ebx, ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x5052a7c7  # les ebx, ptr [eax]; pop edi; pop esi; ret; 
0x50519685  # les ebx, ptr [eax]; pop esi; ret; 
0x5050c19e  # les ebx, ptr [eax]; ret 8; 
0x5052293e  # les ebx, ptr [eax]; xor eax, eax; pop esi; ret; 
0x50514705  # les ebx, ptr [ebx + edi]; ret; 
0x50526de0  # les ebx, ptr [ecx + ecx*4]; inc ebp; or byte ptr [esi + 0x3b], dl; ret; 
0x5051d3c0  # les ebx, ptr [edi + ebx*2]; mov eax, esi; pop esi; ret; 
0x5052f13a  # les ebx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x505152fe  # les ebx, ptr [edi + ebx*2]; pop esi; ret; 
0x50521c7a  # les ebx, ptr [edi + ebx*2]; xor ecx, ebp; pop esi; call 0x32377; leave; ret; 
0x50532ed3  # les ebx, ptr [esi + 0x5f]; pop ebx; xor eax, eax; ret; 
0x50527a7b  # les ebx, ptr [esi + ebx*2]; ret; 
0x50513e15  # les ecx, ptr [eax + eax*2]; ret; 
0x5050f4d7  # les ecx, ptr [eax + ebp*8]; cdq; add al, byte ptr cs:[eax]; leave; ret; 
0x5051d057  # les ecx, ptr [eax*4 - 0x36fd8a40]; ret; 
0x5050e316  # les ecx, ptr [ebp - 0x3056f464]; fimul word ptr [ebx - 0x3f]; ret; 
0x50516390  # les ecx, ptr [ebx + ebx*2]; leave; ret; 
0x505499fd  # les ecx, ptr [ebx + ebx*2]; pop ebp; ret; 
0x5051561e  # les ecx, ptr [ebx + ecx*4]; call 0x14981; pop edi; pop esi; pop ebx; ret; 
0x50516e8c  # les ecx, ptr [ebx + ecx*4]; call 0x14981; pop esi; pop ebx; leave; ret; 
0x50539d3d  # les ecx, ptr [ebx + ecx*4]; inc ebp; or byte ptr [ebx - 0x1a740383], cl; pop ebp; ret; 
0x5053139e  # les ecx, ptr [ebx + ecx*4]; ret 0xe9c3; 
0x5050ca2a  # les ecx, ptr [ebx + edi]; ret; 
0x5052642c  # les ecx, ptr [ebx]; sbb cl, ah; push ebp; push eax; ret; 
0x505263f2  # les ecx, ptr [ecx + eax]; xor eax, 0x5055d440; pop esi; pop ebx; ret; 
0x5052513f  # les ecx, ptr [ecx + ecx*4]; aaa; mov eax, edi; pop edi; ret; 
0x505333f6  # les ecx, ptr [ecx + ecx*4]; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x505219e6  # les ecx, ptr [ecx + ecx*4]; jle 0x21a3b; pop edi; pop esi; leave; ret; 
0x505312a1  # les ecx, ptr [ecx + ecx*4]; jle 0x31306; pop edi; pop esi; leave; ret; 
0x5051cbb4  # les ecx, ptr [ecx + ecx*4]; push es; ret; 
0x50515152  # les ecx, ptr [ecx + ecx*8]; ret; 
0x5052d512  # les ecx, ptr [ecx - 0x7c1beabc]; ret 0x8304; 
0x5052d59f  # les ecx, ptr [edi + ebx*2]; leave; ret; 
0x50525e56  # les ecx, ptr [edi + ebx*2]; mov eax, esi; pop esi; ret; 
0x5050e596  # les ecx, ptr [edi + ebx*2]; pop ebx; leave; ret; 
0x5051bfcd  # les ecx, ptr [edi + ebx*2]; pop ebx; pop esi; pop ebp; ret; 
0x5052df8b  # les ecx, ptr [edi + ebx*2]; pop esi; pop ebp; ret; 
0x5050f462  # les ecx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret 4; 
0x505199f9  # les ecx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x5051a61e  # les ecx, ptr [edi + ebx*2]; pop esi; pop ebx; pop ebp; ret; 
0x5052f73a  # les ecx, ptr [edi + ebx*2]; ret; 
0x5050d4af  # les ecx, ptr [esi + 2]; add cl, cl; ret 0xc; 
0x5052d4ab  # les ecx, ptr [esi + ebx*2]; leave; ret; 
0x5052daf0  # les ecx, ptr [esi + ebx*2]; pop ebp; ret; 
0x50517cf4  # les ecx, ptr [esi + ebx*2]; pop ebx; leave; ret; 
0x505151b1  # les ecx, ptr [esi + ebx*2]; ret; 
0x50513c58  # les edi, ptr [eax]; xor eax, eax; pop edi; inc eax; pop esi; ret; 
0x50539e64  # les edi, ptr [ebx]; ret; 
0x50524e02  # les edx, ptr [eax*4 - 0x36fd8a40]; ret; 
0x5052675e  # les edx, ptr [eax]; and dword ptr [esi + 0x12c], 0; pop esi; pop edi; ret; 
0x50515c82  # les edx, ptr [eax]; call 0x14981; pop esi; ret; 
0x505119f0  # les edx, ptr [eax]; inc eax; pop edi; pop esi; ret 4; 
0x50527a32  # les edx, ptr [eax]; mov dword ptr [esi + 0x14], eax; call 0x279b5; mov eax, esi; pop esi; ret; 
0x50519798  # les edx, ptr [eax]; mov dword ptr [esi + 0x2c], edi; pop ebx; leave; ret; 
0x50522beb  # les edx, ptr [eax]; mov eax, edi; pop edi; pop esi; ret; 
0x5051cc18  # les edx, ptr [eax]; mov eax, esi; pop esi; ret; 
0x50518e89  # les edx, ptr [eax]; mov esi, ebx; call 0x14981; pop ebx; pop esi; ret; 
0x50531728  # les edx, ptr [eax]; pop ebp; ret; 
0x50521ca2  # les edx, ptr [eax]; pop ebx; ret; 
0x505360f6  # les edx, ptr [eax]; pop edi; leave; ret; 
0x50518f61  # les edx, ptr [eax]; pop edi; pop ebx; leave; ret; 
0x505160b7  # les edx, ptr [eax]; pop edi; pop esi; leave; ret; 
0x505153b7  # les edx, ptr [eax]; pop edi; pop esi; pop ebx; leave; ret; 
0x50515f56  # les edx, ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x5052668a  # les edx, ptr [eax]; pop edi; pop esi; ret; 
0x5052da94  # les edx, ptr [eax]; pop esi; pop ebp; ret; 
0x5051a1e4  # les edx, ptr [eax]; pop esi; ret; 
0x5051640f  # les edx, ptr [eax]; ret; 
0x50521cec  # les edx, ptr [eax]; xor ecx, ebp; pop ebx; call 0x32377; leave; ret; 
0x5054233d  # les edx, ptr [ebx + eax*4]; retf 0x8bff; ret 0x5beb; 
0x505229d0  # les edx, ptr [ebx + ebp]; ret; 
0x50536b3d  # les edx, ptr [ebx + ecx]; ret; 
0x5051669f  # les edx, ptr [ebx + edi]; ret; 
0x5053142a  # les edx, ptr [ebx + esi]; int 0x5f; call 0x32377; leave; ret; 
0x50536c43  # les edx, ptr [ebx + esi]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5051f357  # les edx, ptr [edi + ebx*2]; mov dword ptr [esi], 0x2736; mov eax, esi; pop esi; ret; 
0x5051c998  # les edx, ptr [edi + ebx*2]; mov eax, esi; pop esi; ret; 
0x505156c1  # les edx, ptr [edi + ebx*2]; pop ebx; leave; ret; 
0x50517c2b  # les edx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x50533d37  # les edx, ptr [edi + ebx*2]; pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x5052e205  # les edx, ptr [edx + ebp*2]; add bl, byte ptr [ebx + 0x3b]; ret; 
0x50533d06  # les edx, ptr [esi + ebx*2]; pop ebx; mov esp, ebp; pop ebp; ret; 
0x50516c70  # les edx, ptr [esi + ebx*2]; ret; 
0x5051d9af  # les esi, ptr [eax]; pop edi; pop esi; ret; 
0x50527dc2  # les esi, ptr [ebx + ecx*4]; ret; 
0x505063bc  # les esi, ptr [edx - 0xf740001]; test esi, esi; jne 0x63cd; or eax, 0xffffffff; pop esi; ret 4; 
0x5051d2ea  # les esp, ptr [eax]; mov eax, edi; pop edi; pop esi; ret; 
0x5051d37d  # les esp, ptr [eax]; pop edi; pop esi; pop ebx; leave; ret; 
0x50535cf1  # les esp, ptr [eax]; pop esi; leave; ret; 
0x505162b8  # les esp, ptr [eax]; pop esi; pop ebx; pop ebp; ret; 
0x50537d55  # les esp, ptr [ebx]; mov eax, 0x5e50555f; ret; 
0x50512d5f  # les esp, ptr [ecx + ecx*4]; inc ebp; in al, 0x3b; ret; 
0x50531910  # les esp, ptr [edi + ebx*2]; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x5051a6c1  # les esp, ptr [edi + ebx*2]; pop ebx; pop esi; pop ebp; ret; 
0x50517baf  # les esp, ptr [edi - 0x3a7effff]; test al, 0; add byte ptr [eax], al; leave; ret; 
0x505491a0  # ljmp 0x5d5e:0xc033ffff; ret 0xc; 
0x50548389  # ljmp 0x68c5:0x83fffe9f; leave; ret 0x10; 
0x50546dc6  # ljmp 0xb60f:0xc0b70f08; ror byte ptr [ebx], cl; ret 0xe9c1; 
0x50509db0  # lock add byte ptr [eax], al; add byte ptr [edi + 0x5e], bl; ret 8; 
0x505232d3  # lock add byte ptr [eax], al; add ebp, 0x74; leave; ret; 
0x5052d699  # lock add eax, dword ptr [eax]; add byte ptr [edx + 1], ch; call 0x1c908; pop ecx; pop ecx; ret; 
0x50533114  # lock and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5053391c  # lock and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x505166e0  # lodsb al, byte ptr [esi]; add dword ptr [eax], eax; add byte ptr [ebx + 0x47501f9], al; mov eax, esi; pop esi; ret; 
0x50539df3  # lodsb al, byte ptr [esi]; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50507d6f  # lodsb al, byte ptr [esi]; cmp byte ptr [eax], al; add byte ptr [ebx], al; ret; 
0x505412be  # lodsb al, byte ptr [esi]; ficom word ptr [ebp + 0x50]; pop ebp; ret; 
0x5051ebc9  # loope 0x1eb4c; add al, byte ptr [eax]; push eax; call 0x1eb23; pop ecx; ret; 
0x505207d8  # loope 0x207ac; ret; 
0x50524092  # loope 0x24076; add byte ptr [eax], al; leave; ret; 
0x50524207  # loope 0x24209; add cl, cl; ret; 
0x50525ac5  # loope 0x25aca; shr eax, cl; pop esi; and eax, 0xff; ret; 
0x50526430  # loope 0x26487; push eax; ret; 
0x505265d8  # loope 0x2662f; push eax; pop esi; inc dword ptr [0x5055d448]; ret; 
0x50534367  # loope 0x342ed; sal byte ptr [esp + esi - 0x7c], cl; div byte ptr [edi - 9]; ret 0; 
0x505369a5  # loope 0x369c6; shl edx, cl; ret; 
0x505384e1  # loope 0x38538; push eax; pop ebp; ret; 
0x5053919d  # loope 0x391f4; push eax; xor eax, eax; ret; 
0x5053c42e  # loope 0x3c3bb; ret; 
0x50542f35  # loope 0x42f56; shr eax, cl; ret; 
0x50546b3c  # loope 0x46b93; push eax; test eax, eax; jne 0x46b46; ret 0xc; 
0x50547027  # loope 0x47031; or eax, ecx; ret 4; 
0x50547c7d  # loope 0x47cd4; push eax; ret; 
0x50547c87  # loope 0x47cde; push eax; call dword ptr [0x5054a18c]; ret 4; 
0x50508592  # loope 0x8531; add al, byte ptr [eax]; leave; ret 0x20; 
0x50509732  # loope 0x9792; ret; 
0x5051a1bc  # mov ah, 0; add byte ptr [eax], al; leave; ret; 
0x50528735  # mov ah, 0; add byte ptr [ebx - 0xa773], cl; dec dword ptr [ecx - 0x977b]; inc dword ptr [ebx]; ret; 
0x50526f3f  # mov ah, 0; add cl, cl; ret; 
0x50544c63  # mov ah, 0x2a; ret; 
0x50532369  # mov ah, 0x63; add byte ptr [eax], al; ret; 
0x5050d564  # mov ah, 0xa; add byte ptr [eax], al; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x5050d545  # mov ah, 0xa; add byte ptr [eax], al; ret 4; 
0x50511fe2  # mov ah, 3; ret; 
0x50507d68  # mov ah, 7; add byte ptr [eax], al; add byte ptr [ebx + 0x38ac86], cl; add byte ptr [ebx], al; ret; 
0x5054774e  # mov al, 0x3b; ret; 
0x50535e4f  # mov al, 0x56; call 0x36062; pop ecx; pop ecx; ret; 
0x50538c2f  # mov al, 0x60; push ebp; push eax; call dword ptr [0x5054a024]; pop ebp; ret; 
0x50544c6d  # mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x505172c3  # mov al, 0xb0; add dword ptr [eax], eax; add ebp, 0x78; leave; ret; 
0x50534021  # mov al, 0xeb; or byte ptr [ebx], bh; ret; 
0x50506192  # mov al, 0xff; inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0xc; 
0x50547749  # mov al, byte ptr [0x458b5054]; mov al, 0x3b; ret; 
0x505473d4  # mov al, byte ptr [0x458b5054]; or al, 0x33; fstp xword ptr [ebx]; ret; 
0x50535fad  # mov al, byte ptr [0x59000004]; ret; 
0x50538a2e  # mov al, byte ptr [0x5d5055d6]; ret; 
0x50535fee  # mov al, byte ptr [0x5d5e5054]; ret; 
0x505064d3  # mov al, byte ptr [0x66835054]; xor al, 0; pop esi; ret 4; 
0x5050649e  # mov al, byte ptr [0x6a5054]; push 0x5055c970; call dword ptr [0x5054a18c]; ret; 
0x50514339  # mov al, byte ptr [0x75ff5054]; or al, 0xff; adc eax, 0x5054a03c; pop ebp; ret 0xc; 
0x50516b85  # mov al, byte ptr [0x808b5054]; fadd qword ptr [eax]; add byte ptr [eax], al; ret; 
0x505201f2  # mov al, byte ptr [0x88000081]; sbb al, 8; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x50503623  # mov al, byte ptr [0x8b000000]; ret; 
0x5052f3ae  # mov al, byte ptr [0xc0335054]; add esp, 0x14; ret 4; 
0x5050c8dc  # mov al, byte ptr [0xc0335054]; ret 8; 
0x505475df  # mov al, byte ptr [0xc0335054]; ret; 
0x50546730  # mov al, byte ptr [0xc0855054]; jge 0x4673b; or eax, 0xffffffff; ret; 
0x5050118b  # mov al, byte ptr [0xc68b5054]; pop esi; ret; 
0x50519653  # mov al, byte ptr [0xc9000003]; ret; 
0x5051f25a  # mov al, byte ptr [0xc900004f]; ret; 
0x5050aad3  # mov al, byte ptr [0xc9000278]; ret 0xc; 
0x5051e3ef  # mov al, byte ptr [0xd08b5054]; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x5051e3ce  # mov al, byte ptr [0xd8f75054]; sbb eax, eax; ret; 
0x5054401d  # mov al, byte ptr [0xe4a35054]; insb byte ptr es:[edi], dx; push ebp; push eax; ret; 
0x5051c877  # mov al, byte ptr [eax + 0x5054b5c0]; mov byte ptr [ecx + 3], al; ret; 
0x505265f9  # mov al, byte ptr [eax + 0x5055cf38]; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x505098ec  # mov al, byte ptr [edx]; add cl, cl; ret 8; 
0x505152a8  # mov al, byte ptr [esi]; sub al, byte ptr [esi + 0x18]; mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; ret; 
0x5051e980  # mov al, ch; sbb bh, 0xff; dec dword ptr [ecx + 0x458b0846]; mov byte ptr [ebx], bh; ret; 
0x50526bc1  # mov bh, 0; add cl, cl; ret; 
0x50513e0e  # mov bh, 0x4f; add byte ptr [eax], al; xor eax, eax; add esp, 0xc; inc eax; ret; 
0x5051792b  # mov bh, 0xa4; sbb byte ptr [eax], al; add byte ptr [esi - 0x18], dl; dec edx; ret 1; 
0x5051f326  # mov bh, 0xc0; ret; 
0x50546bae  # mov bh, 0xfe; dec ecx; ret; 
0x50519a82  # mov bh, 0xff; call dword ptr [edi - 0x75]; ret; 
0x50506b96  # mov bh, 2; add cl, cl; ret 8; 
0x50532b8a  # mov bh, 4; inc ecx; and eax, 0x103; pop ebp; ret; 
0x50532d94  # mov bh, 4; inc ecx; and eax, 0x107; pop ebp; ret; 
0x50532c8f  # mov bh, 4; inc ecx; and eax, 0x80; pop ebp; ret; 
0x50532d10  # mov bh, 4; inc ecx; and eax, 8; pop ebp; ret; 
0x50525e2f  # mov bh, bh; dec ecx; test ecx, ecx; jg 0x25e2d; pop esi; ret; 
0x50549963  # mov bh, dh; dec ecx; ret; 
0x50526bc0  # mov bl, 0xb7; add byte ptr [eax], al; leave; ret; 
0x5054781b  # mov byte ptr [0x3b000002], al; ret; 
0x5053607e  # mov byte ptr [0x5900002b], al; pop ebp; ret; 
0x50514922  # mov byte ptr [0x5e5fc033], al; ret; 
0x5050984d  # mov byte ptr [0xc4835054], al; adc byte ptr [edi + 0x68], dl; dec eax; mov dword ptr [0x75ff5054], eax; or al, ch; ret; 
0x50546f82  # mov byte ptr [0xc4835054], al; sbb byte ptr [ebx + 0x6eb5ec6], cl; push dword ptr [esp + 4]; call eax; ret 4; 
0x5052d819  # mov byte ptr [eax + 1], cl; pop edi; leave; ret; 
0x5052a55e  # mov byte ptr [eax + eax - 0x36a20000], al; ret; 
0x505201f6  # mov byte ptr [eax + ecx], bl; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x5052b4f7  # mov byte ptr [eax + edx], cl; add byte ptr [ebx - 0x37], bl; ret; 
0x5052b7bf  # mov byte ptr [eax + edx], cl; add byte ptr [esi - 0x37], bl; ret; 
0x50515c52  # mov byte ptr [eax], 0x5f; inc eax; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x5051f73a  # mov byte ptr [eax], al; add byte ptr [ebx], 0; inc ecx; and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x5051f747  # mov byte ptr [eax], al; add byte ptr [ebx], 0; ret; 
0x5052d814  # mov byte ptr [eax], cl; mov cl, byte ptr [ebp - 1]; mov byte ptr [eax + 1], cl; pop edi; leave; ret; 
0x50516a84  # mov byte ptr [eax], dl; add dword ptr [eax], eax; add byte ptr [ebx - 0x76efdbb4], cl; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x505151f1  # mov byte ptr [ebp - 2], cl; call 0x15192; pop ecx; pop edi; leave; ret; 
0x5051cc45  # mov byte ptr [ebp - 2], cl; call 0x1cbb9; pop ecx; pop edi; leave; ret; 
0x5051514b  # mov byte ptr [ebp - 2], cl; call dword ptr [eax + 4]; add esp, 0xc; leave; ret; 
0x50537b30  # mov byte ptr [ebx + edi], 0x75; or al, 0x72; in al, dx; pop esi; pop ebp; ret; 
0x5051e98b  # mov byte ptr [ebx], bh; ret; 
0x50511642  # mov byte ptr [ecx + 0x45895054], ah; ror byte ptr [ebx + 0x5d891045], 1; aam 0x3b; ret; 
0x5052786f  # mov byte ptr [ecx + 0x54a35054], ah; aam 0x55; push eax; ret; 
0x5051c881  # mov byte ptr [ecx + 3], 0x3d; ret; 
0x5051c87d  # mov byte ptr [ecx + 3], al; ret; 
0x505166df  # mov byte ptr [ecx + eax - 0x67d0000], ch; add dword ptr [ebp + 4], esi; mov eax, esi; pop esi; ret; 
0x505215c4  # mov byte ptr [ecx + eax*4], al; ret; 
0x505156f9  # mov byte ptr [ecx + eax*8], 0xe0; or byte ptr [edi - 0x77], bl; jb 0x1571a; or eax, ecx; pop esi; ret; 
0x50516a8e  # mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x505169db  # mov byte ptr [ecx + eax], al; add byte ptr [eax], al; ret; 
0x50516b21  # mov byte ptr [ecx + eax], bl; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516bd2  # mov byte ptr [ecx + eax], dh; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x50516ac4  # mov byte ptr [ecx + eax], dl; add byte ptr [eax], al; ret; 
0x50534240  # mov byte ptr [ecx + ebp*4], 0; add dword ptr [ecx], eax; xor dword ptr [esp + ebx*8 - 0x7c], 0x842c74d2; div byte ptr [esi + ebx - 9]; ret 0; 
0x50515263  # mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x505152b3  # mov byte ptr [ecx + edx - 1], al; ret; 
0x50532fa1  # mov byte ptr [ecx], 0x3a; ret 0x1774; 
0x50532fae  # mov byte ptr [ecx], 0x3a; ret 0xa74; 
0x505316ee  # mov byte ptr [ecx], al; add byte ptr [eax], al; leave; ret; 
0x5053255f  # mov byte ptr [edi + 1], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x50534391  # mov byte ptr [edi + 2], 0; pop edi; ret; 
0x50532579  # mov byte ptr [edi + 2], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x505326eb  # mov byte ptr [edi + 3], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x50524dab  # mov byte ptr [edi + edi*8], dl; or byte ptr [ebx + 0x3b078b3f], cl; ret 0xde75; 
0x5051d1a8  # mov byte ptr [edi + esi], 0; mov eax, edi; pop edi; ret; 
0x5053d3eb  # mov byte ptr [edi - 1], cl; dec ecx; ret; 
0x50522644  # mov byte ptr [edi], 0x8b; ret; 
0x5053254e  # mov byte ptr [edi], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x505343a0  # mov byte ptr [edi], dl; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5050d563  # mov byte ptr [edx + ecx + 0x18b0000], dh; mov dword ptr [ecx], edx; ret 8; 
0x50531440  # mov byte ptr [edx + ecx], 3; inc dword ptr [eax]; ret; 
0x5051e838  # mov byte ptr [edx], 0; inc eax; ret; 
0x50509ac2  # mov byte ptr [edx], al; add cl, cl; ret 8; 
0x50522f3c  # mov byte ptr [edx], ch; add byte ptr [eax], al; add esp, 0xc; ret; 
0x5051ce17  # mov byte ptr [edx], cl; inc dword ptr [eax + 0xc]; xor eax, eax; inc eax; ret; 
0x50523415  # mov byte ptr [esi + edi], 0; pop edi; pop esi; pop ebp; pop ebx; ret; 
0x50513c72  # mov ch, 0x2f; add eax, dword ptr [eax]; push esi; call 0x16412; pop ecx; ret; 
0x50541867  # mov ch, 0x33; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x5051c87a  # mov ch, 0x54; push eax; mov byte ptr [ecx + 3], al; ret; 
0x5051a2c5  # mov ch, 0x63; push ecx; push eax; pop edi; ret; 
0x50506df3  # mov ch, 2; add cl, cl; ret 8; 
0x5052d8c2  # mov cl, 0x4a; add byte ptr [eax], al; add ebp, 0x8c; leave; ret; 
0x50516405  # mov cl, 0x54; push eax; push eax; call 0x17cfa; add esp, 0x10; ret; 
0x50531784  # mov cl, 0xfe; call ptr [ecx + 0x5f]; pop esi; ret; 
0x50507260  # mov cl, 2; add cl, cl; ret 8; 
0x505061eb  # mov cl, al; add al, byte ptr [eax]; leave; ret 0xc; 
0x5052d816  # mov cl, byte ptr [ebp - 1]; mov byte ptr [eax + 1], cl; pop edi; leave; ret; 
0x50501df6  # mov cs, eax; xor al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 8; 
0x50539460  # mov cs, word ptr [ebx + 0xd6ae475]; call 0x38c24; pop ecx; ret; 
0x50525745  # mov cs, word ptr [ecx + 0x3b40870c]; ret; 
0x505025e0  # mov cs, word ptr [edx + 4]; add byte ptr [ebx], bh; ret; 
0x5052a825  # mov dh, 0x41; add al, 0xf; mov dh, 0x51; add eax, 0xb08e0c1; ret 0xb60f; 
0x50535b5f  # mov dh, 0x41; add cl, byte ptr [edi]; mov dh, 0x56; add ch, byte ptr [ebx]; ret 0x1574; 
0x50535bc3  # mov dh, 0x41; add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1174; 
0x50535b3e  # mov dh, 0x41; add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1574; 
0x5051d0cb  # mov dh, 0x45; dec dword ptr [ecx - 0x3974efba]; pop esi; leave; ret; 
0x5052a152  # mov dh, 0x46; add al, 0xf; mov dh, 0x56; add eax, 0xb08e0c1; ret 0xb60f; 
0x5052a829  # mov dh, 0x51; add eax, 0xb08e0c1; ret 0xb60f; 
0x50535b63  # mov dh, 0x56; add ch, byte ptr [ebx]; ret 0x1574; 
0x50535bc7  # mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1174; 
0x50535b42  # mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1574; 
0x5052a156  # mov dh, 0x56; add eax, 0xb08e0c1; ret 0xb60f; 
0x505095bd  # mov dh, 0x8d; add al, byte ptr [eax]; leave; ret 0xc; 
0x505475a2  # mov dh, 0xc0; and eax, 1; ret; 
0x50526606  # mov dh, 0xc0; ret; 
0x50546e06  # mov dh, 0xc0; shl ecx, 8; or eax, ecx; ret 4; 
0x5053c3e9  # mov dh, 1; inc ecx; mov dword ptr [edx], ecx; ret; 
0x50520182  # mov dh, 8; cmp ecx, esi; jle 0x20165; or eax, 0xffffffff; pop esi; ret; 
0x50509ac1  # mov dl, 0x88; add al, byte ptr [eax]; leave; ret 8; 
0x505063bd  # mov dl, 0xff; dec dword ptr [ebx + 0x75f685f0]; pop es; or eax, 0xffffffff; pop esi; ret 4; 
0x5050d4f4  # mov ds, eax; add byte ptr [eax], al; add byte ptr [ebx + 0x5e118901], cl; ret 8; 
0x505147e5  # mov ds, ebx; add dword ptr [eax], eax; add ebp, 0x2640; leave; ret 0x20; 
0x5053871b  # mov dword ptr [0], eax; ret; 
0x50537d57  # mov dword ptr [0x50555fb8], eax; pop esi; ret; 
0x50506443  # mov dword ptr [0x5055c970], eax; test eax, eax; jne 0x644c; ret; 
0x50508e8d  # mov dword ptr [0x5055ca40], edi; pop edi; pop esi; ret; 
0x5051e881  # mov dword ptr [0x5055cf2c], eax; ret; 
0x50526591  # mov dword ptr [0x5055d3e8], eax; pop ebx; ret; 
0x50526512  # mov dword ptr [0x5055d3e8], esi; pop esi; pop ebx; leave; ret; 
0x50527868  # mov dword ptr [0x5055d450], eax; call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x50527873  # mov dword ptr [0x5055d454], eax; ret; 
0x50538a2d  # mov dword ptr [0x5055d6a0], eax; pop ebp; ret; 
0x5053e0a1  # mov dword ptr [0x5055de7c], eax; pop ebp; ret; 
0x5053fca5  # mov dword ptr [0x5055de8c], eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x5053fcaa  # mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x50541291  # mov dword ptr [0x5055de98], eax; ret; 
0x5054129f  # mov dword ptr [0x5055de9c], eax; pop ebp; ret; 
0x505412ae  # mov dword ptr [0x5055dea8], eax; pop ebp; ret; 
0x505412bd  # mov dword ptr [0x5055deac], eax; pop ebp; ret; 
0x505265d6  # mov dword ptr [0x5055e118], eax; pop esi; inc dword ptr [0x5055d448]; ret; 
0x5052642e  # mov dword ptr [0x5055e118], eax; ret; 
0x5053919b  # mov dword ptr [0x5055e138], eax; xor eax, eax; ret; 
0x505384df  # mov dword ptr [0x5055e140], eax; pop ebp; ret; 
0x50539879  # mov dword ptr [0x5055e26c], 1; xor eax, eax; ret; 
0x5053637d  # mov dword ptr [0x59000028], eax; ret; 
0x505423ab  # mov dword ptr [0x59fffffc], eax; ret; 
0x50509856  # mov dword ptr [0x75ff5054], eax; or al, ch; ret; 
0x50538ff6  # mov dword ptr [0x8bf8758b], eax; jge 0x38ff9; mov esp, ebp; pop ebp; ret; 
0x505169d1  # mov dword ptr [eax + 0x100], edx; mov ecx, dword ptr [ecx + 0x10]; mov dword ptr [eax + 0x104], ecx; ret; 
0x5052b4f0  # mov dword ptr [eax + 0x1048], ebx; mov dword ptr [eax + 0x104c], ecx; pop ebx; leave; ret; 
0x505169da  # mov dword ptr [eax + 0x104], ecx; ret; 
0x5052b4f6  # mov dword ptr [eax + 0x104c], ecx; pop ebx; leave; ret; 
0x5052b7be  # mov dword ptr [eax + 0x104c], ecx; pop esi; leave; ret; 
0x5050ab6b  # mov dword ptr [eax + 0x108], edx; xor eax, eax; ret 8; 
0x5051499f  # mov dword ptr [eax + 0x10], ecx; mov dword ptr [eax + 0x14], ecx; mov dword ptr [eax + 0x1c], ecx; mov dword ptr [eax + 0x28], ecx; mov dword ptr [eax + 0x2c], ecx; ret; 
0x5051eabe  # mov dword ptr [eax + 0x10], ecx; xor eax, eax; inc eax; ret; 
0x50502efb  # mov dword ptr [eax + 0x10c], esi; mov dword ptr [eax + 0x110], edx; pop esi; or eax, 0xffffffff; ret 0xc; 
0x50516a83  # mov dword ptr [eax + 0x110], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x124], ecx; ret; 
0x50502f01  # mov dword ptr [eax + 0x110], edx; pop esi; or eax, 0xffffffff; ret 0xc; 
0x50516ac3  # mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b2a  # mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a8d  # mov dword ptr [eax + 0x124], ecx; ret; 
0x50516b73  # mov dword ptr [eax + 0x128], ecx; ret; 
0x50516bd1  # mov dword ptr [eax + 0x134], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x50516bdb  # mov dword ptr [eax + 0x138], ecx; ret; 
0x505149a2  # mov dword ptr [eax + 0x14], ecx; mov dword ptr [eax + 0x1c], ecx; mov dword ptr [eax + 0x28], ecx; mov dword ptr [eax + 0x2c], ecx; ret; 
0x5052c182  # mov dword ptr [eax + 0x14], ecx; pop ebx; leave; ret; 
0x5051fc80  # mov dword ptr [eax + 0x18], ecx; mov dword ptr [esi + 4], eax; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x50515792  # mov dword ptr [eax + 0x18], ecx; mov eax, dword ptr [eax + 0x14]; sub eax, edx; add eax, ecx; ret; 
0x505149a5  # mov dword ptr [eax + 0x1c], ecx; mov dword ptr [eax + 0x28], ecx; mov dword ptr [eax + 0x2c], ecx; ret; 
0x5052c644  # mov dword ptr [eax + 0x1c], ecx; pop ebx; leave; ret; 
0x5051d87b  # mov dword ptr [eax + 0x28], 1; ret; 
0x505149a8  # mov dword ptr [eax + 0x28], ecx; mov dword ptr [eax + 0x2c], ecx; ret; 
0x505149ab  # mov dword ptr [eax + 0x2c], ecx; ret; 
0x5052daff  # mov dword ptr [eax + 0x30], 1; ret; 
0x505488c3  # mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x5050c7d1  # mov dword ptr [eax + 0x32d8], ecx; xor eax, eax; ret 8; 
0x5051f746  # mov dword ptr [eax + 0x38000], ecx; ret; 
0x50521913  # mov dword ptr [eax + 0x50], ecx; mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x50521919  # mov dword ptr [eax + 0x54], ecx; ret; 
0x50521916  # mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x5052a55d  # mov dword ptr [eax + 0x84], ecx; pop esi; leave; ret; 
0x50526f99  # mov dword ptr [eax + 0x8c], 0x40; ret; 
0x505096fc  # mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x5052bdea  # mov dword ptr [eax + 0xc], ecx; pop ebx; leave; ret; 
0x50524e6f  # mov dword ptr [eax + 4], 0x1000; ret; 
0x5051d184  # mov dword ptr [eax + 4], 1; ret; 
0x5051c88c  # mov dword ptr [eax + 4], ecx; mov dword ptr [eax], ecx; mov dword ptr [eax + 8], ecx; ret; 
0x5052421e  # mov dword ptr [eax + 4], ecx; ret; 
0x5052f85c  # mov dword ptr [eax + 4], esi; add eax, 8; dec edx; jne 0x2f853; pop esi; ret; 
0x505096f5  # mov dword ptr [eax + 8], 0x98badcfe; mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x50542da5  # mov dword ptr [eax + 8], ecx; pop ebx; leave; ret; 
0x5051c891  # mov dword ptr [eax + 8], ecx; ret; 
0x5053641b  # mov dword ptr [eax], 0xc; xor eax, eax; call 0x38721; ret; 
0x5053622b  # mov dword ptr [eax], 0xc; xor eax, eax; pop esi; pop ebp; ret; 
0x50533a97  # mov dword ptr [eax], 0xc; xor eax, eax; pop esi; ret; 
0x50541f55  # mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x505428d9  # mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x50523586  # mov dword ptr [eax], ebx; mov eax, edi; pop edi; pop esi; pop ebx; ret; 
0x5053e417  # mov dword ptr [eax], ecx; add esp, 0xc; leave; ret; 
0x5051c88f  # mov dword ptr [eax], ecx; mov dword ptr [eax + 8], ecx; ret; 
0x5052272d  # mov dword ptr [eax], ecx; mov eax, dword ptr [ebp - 0x10]; pop ebx; leave; ret; 
0x505227a4  # mov dword ptr [eax], ecx; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x50531b74  # mov dword ptr [eax], ecx; pop ebp; ret; 
0x50538994  # mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x505427bc  # mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5051ce57  # mov dword ptr [eax], edx; add dword ptr [ecx + 0xc], 4; xor eax, eax; inc eax; pop esi; ret; 
0x505012ea  # mov dword ptr [eax], edx; add eax, dword ptr [eax]; leave; ret 0xc; 
0x50531ed8  # mov dword ptr [eax], esi; call 0x38721; ret; 
0x50531ece  # mov dword ptr [eax], esi; mov esi, dword ptr [ebp - 0x24]; call 0x38a0d; mov dword ptr [eax], esi; call 0x38721; ret; 
0x5053a1d9  # mov dword ptr [eax], esi; pop esi; pop ebp; ret; 
0x5051e301  # mov dword ptr [eax], esi; pop esi; ret; 
0x50537378  # mov dword ptr [ebp + 8], eax; mov eax, dword ptr [ebp + 8]; pop esi; pop ebp; ret; 
0x50524e40  # mov dword ptr [ebp + 8], ecx; cmp dword ptr [ebp + 0x10], 0; jne 0x24e21; mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x505412ec  # mov dword ptr [ebp - 0x20], eax; xor ecx, ecx; cmp eax, 0xc0000017; sete cl; mov eax, ecx; ret; 
0x5050a41d  # mov dword ptr [ebp - 1], ebp; inc dword ptr [ebx + 0x5e5fffc8]; ret 8; 
0x50537fa2  # mov dword ptr [ebp - 4], 0xfffffffe; or eax, 0xffffffff; call 0x38721; ret; 
0x50531b35  # mov dword ptr [ebp - 4], 0xfffffffe; xor eax, eax; call 0x38721; ret; 
0x50538714  # mov dword ptr [ebp - 8], eax; lea eax, [ebp - 0x10]; mov dword ptr fs:[0], eax; ret; 
0x5052b416  # mov dword ptr [ebx + 0x104c], eax; pop esi; leave; ret; 
0x50520e72  # mov dword ptr [ebx + 0x40c7efcd], ebp; or dh, bh; fdivr qword ptr [edx + 0xc40c798]; jbe 0x20ed6; xor dl, byte ptr [eax]; ret; 
0x505096f1  # mov dword ptr [ebx + 0x40c7efcd], ebp; or dh, bh; fdivr qword ptr [edx + 0xc40c798]; jbe 0x9755; xor dl, byte ptr [eax]; ret; 
0x5051e34a  # mov dword ptr [ebx + 4], eax; mov eax, edi; pop edi; pop ebx; pop esi; ret; 
0x5050e30e  # mov dword ptr [ebx + eax], 0x3df33fa; pop ebp; les ecx, ptr [ebp - 0x3056f464]; fimul word ptr [ebx - 0x3f]; ret; 
0x50538487  # mov dword ptr [ebx + edi], 0x5ff172fe; pop esi; ret; 
0x5050e519  # mov dword ptr [ebx], 0x848dc445; or byte ptr [edx - 0x3e08ac82], al; rol byte ptr [esi], 3; ret; 
0x5051cbcf  # mov dword ptr [ebx], 0xe8500446; out 0x57, eax; add dword ptr [eax], eax; add esp, 0xc; pop esi; ret; 
0x5050ddc2  # mov dword ptr [ebx], edi; pop esi; pop ebx; pop edi; leave; ret 8; 
0x50520192  # mov dword ptr [ebx], edx; mov dword ptr [edi], esi; movsx eax, word ptr [eax + 2]; pop esi; ret; 
0x5052ba8c  # mov dword ptr [ecx + 0x104c], edx; pop esi; ret; 
0x50515fb8  # mov dword ptr [ecx + 0x10], eax; mov dword ptr [esi + 0x2d04], eax; ret; 
0x5051f268  # mov dword ptr [ecx + 0x10], eax; ret; 
0x50531755  # mov dword ptr [ecx + 0x18], edx; ret; 
0x505311ab  # mov dword ptr [ecx + 0x1c], eax; pop ebx; leave; ret; 
0x505317b0  # mov dword ptr [ecx + 0x1c], eax; ret; 
0x505311c0  # mov dword ptr [ecx + 0x60], eax; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x505311c6  # mov dword ptr [ecx + 0x64], eax; ret; 
0x505311c3  # mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x5052a2cd  # mov dword ptr [ecx + 0x80], ebx; mov dword ptr [ecx + 0x84], eax; pop ebx; leave; ret; 
0x5052a2d3  # mov dword ptr [ecx + 0x84], eax; pop ebx; leave; ret; 
0x5052a818  # mov dword ptr [ecx + 0x84], edx; pop esi; ret; 
0x50521902  # mov dword ptr [ecx + 0xc], eax; pop ebx; leave; ret; 
0x5052da4c  # mov dword ptr [ecx + 0xc], edx; ret; 
0x50516bad  # mov dword ptr [ecx + 0xdc], eax; push eax; call dword ptr [0x5054a028]; ret; 
0x505218ff  # mov dword ptr [ecx + 4], edx; mov dword ptr [ecx + 0xc], eax; pop ebx; leave; ret; 
0x50515667  # mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x50536b0f  # mov dword ptr [ecx], eax; leave; ret; 
0x505333f8  # mov dword ptr [ecx], eax; pop edi; pop esi; pop ebp; ret; 
0x50509787  # mov dword ptr [ecx], eax; ret; 
0x5050aefe  # mov dword ptr [ecx], eax; xor eax, eax; inc eax; pop edi; pop esi; ret 8; 
0x50502e7e  # mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50544591  # mov dword ptr [ecx], ebx; pop edi; pop ebx; leave; ret; 
0x50516b01  # mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x5051691d  # mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0xec]; ret; 
0x5052391f  # mov dword ptr [ecx], edx; pop ebx; leave; ret; 
0x50524919  # mov dword ptr [ecx], edx; pop edi; pop ebx; pop esi; leave; ret; 
0x5050d4fb  # mov dword ptr [ecx], edx; pop esi; ret 8; 
0x5050d56a  # mov dword ptr [ecx], edx; ret 8; 
0x5053fe9a  # mov dword ptr [edi + 0x64], eax; xor eax, eax; call 0x38721; ret; 
0x5052a405  # mov dword ptr [edi + 0x80], eax; mov dword ptr [edi + 0x84], ecx; pop ebx; leave; ret; 
0x5052a1eb  # mov dword ptr [edi + 0x80], ebx; mov dword ptr [edi + 0x84], ecx; pop ebx; leave; ret; 
0x5052a698  # mov dword ptr [edi + 0x84], eax; pop esi; leave; ret; 
0x5052a1f1  # mov dword ptr [edi + 0x84], ecx; pop ebx; leave; ret; 
0x50516954  # mov dword ptr [edi + 0xec], eax; pop esi; pop edi; ret; 
0x5052af39  # mov dword ptr [edi + 4], esi; pop esi; mov dword ptr [edi], eax; pop ebx; leave; ret; 
0x5052af3d  # mov dword ptr [edi], eax; pop ebx; leave; ret; 
0x5053c3b8  # mov dword ptr [edi], eax; shl dword ptr [esi], 1; xor eax, eax; inc eax; pop ebp; ret; 
0x5053c387  # mov dword ptr [edi], eax; test eax, eax; jne 0x3c391; xor eax, eax; pop ebp; ret; 
0x5053438b  # mov dword ptr [edi], edx; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x50534382  # mov dword ptr [edi], edx; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50515778  # mov dword ptr [edi], edx; mov ecx, dword ptr [esi]; add dword ptr [eax + 0x18], ecx; ret; 
0x50525141  # mov dword ptr [edi], esi; mov eax, edi; pop edi; ret; 
0x50520194  # mov dword ptr [edi], esi; movsx eax, word ptr [eax + 2]; pop esi; ret; 
0x505156ff  # mov dword ptr [edx + 0x18], esi; or eax, ecx; pop esi; ret; 
0x50516992  # mov dword ptr [edx + 0xf0], eax; ret; 
0x5052a125  # mov dword ptr [edx + 4], eax; pop ebx; leave; ret; 
0x5050a6ea  # mov dword ptr [edx + eax], edi; leave; ret 0xc; 
0x5052b9f0  # mov dword ptr [edx + edi + 4], eax; jl 0x2b9c8; pop edi; pop ebx; leave; ret; 
0x505099dc  # mov dword ptr [edx], eax; add cl, cl; ret 8; 
0x50543579  # mov dword ptr [edx], eax; mov eax, 3; ret; 
0x5051605a  # mov dword ptr [edx], ecx; call 0x15e49; pop edi; pop esi; leave; ret; 
0x5053c3ec  # mov dword ptr [edx], ecx; ret; 
0x5052f749  # mov dword ptr [esi + 0x10], 1; pop esi; ret; 
0x5051d0ce  # mov dword ptr [esi + 0x10], eax; mov eax, esi; pop esi; leave; ret; 
0x505279d2  # mov dword ptr [esi + 0x10], eax; ret; 
0x5051d75e  # mov dword ptr [esi + 0x10], edx; mov eax, esi; pop esi; ret; 
0x50527a34  # mov dword ptr [esi + 0x14], eax; call 0x279b5; mov eax, esi; pop esi; ret; 
0x50527a03  # mov dword ptr [esi + 0x14], eax; call 0x279b5; pop edi; mov eax, esi; pop esi; ret; 
0x505153dc  # mov dword ptr [esi + 0x14], eax; pop ecx; mov eax, esi; pop esi; ret; 
0x5051518c  # mov dword ptr [esi + 0x14], eax; pop edi; pop ebx; ret; 
0x5052f4f4  # mov dword ptr [esi + 0x18], 1; pop edi; leave; ret; 
0x5052f811  # mov dword ptr [esi + 0x18], 1; pop esi; ret; 
0x5052f3d8  # mov dword ptr [esi + 0x18], 1; ret; 
0x50515208  # mov dword ptr [esi + 0x18], eax; ret; 
0x5051613c  # mov dword ptr [esi + 0x18], ecx; call 0x15e49; pop edi; pop esi; leave; ret; 
0x5052f76b  # mov dword ptr [esi + 0x1c], eax; call dword ptr [0x5054a13c]; pop esi; ret; 
0x50508fb8  # mov dword ptr [esi + 0x24], edi; mov dword ptr [esi + 0x28], edi; xor eax, eax; pop edi; pop esi; ret 4; 
0x50508fbb  # mov dword ptr [esi + 0x28], edi; xor eax, eax; pop edi; pop esi; ret 4; 
0x50515d3a  # mov dword ptr [esi + 0x28f0], edi; ret; 
0x5051979a  # mov dword ptr [esi + 0x2c], edi; pop ebx; leave; ret; 
0x50515fbb  # mov dword ptr [esi + 0x2d04], eax; ret; 
0x50518fd7  # mov dword ptr [esi + 0x30], ebx; pop ebx; pop edi; pop esi; ret; 
0x50501df5  # mov dword ptr [esi + 0x32c8], ecx; pop edi; pop esi; pop ebx; leave; ret 8; 
0x505219e8  # mov dword ptr [esi + 0x50], edi; pop edi; pop esi; leave; ret; 
0x505312a3  # mov dword ptr [esi + 0x60], edi; pop edi; pop esi; leave; ret; 
0x50502abd  # mov dword ptr [esi + 0xa4], 1; xor eax, eax; pop esi; ret 4; 
0x505033db  # mov dword ptr [esi + 0xaa4], eax; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x50527997  # mov dword ptr [esi + 0xc], eax; call 0x2793a; add esp, 0xc; mov eax, esi; pop esi; ret; 
0x5051d75a  # mov dword ptr [esi + 0xc], eax; pop edi; mov dword ptr [esi + 0x10], edx; mov eax, esi; pop esi; ret; 
0x5051ccc7  # mov dword ptr [esi + 0xc], eax; ret; 
0x50536bcd  # mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x505168a5  # mov dword ptr [esi + 0xe0], eax; pop esi; ret; 
0x505168fe  # mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x50509dae  # mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e4f  # mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x5052796d  # mov dword ptr [esi + 4], 1; pop esi; ret; 
0x5051fc83  # mov dword ptr [esi + 4], eax; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x50532b12  # mov dword ptr [esi + 4], eax; mov eax, esi; pop esi; pop ebp; ret 4; 
0x5053ff43  # mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x50527b87  # mov dword ptr [esi + 4], eax; pop esi; pop ebx; leave; ret; 
0x5053e2c1  # mov dword ptr [esi + 4], edi; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x5051cbab  # mov dword ptr [esi + 8], eax; call 0x1c930; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x5051cc0f  # mov dword ptr [esi + 8], eax; call 0x1cbde; add esp, 0x10; mov eax, esi; pop esi; ret; 
0x5052796a  # mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], 1; pop esi; ret; 
0x5053ff40  # mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x5051f35a  # mov dword ptr [esi], 0x2736; mov eax, esi; pop esi; ret; 
0x5053edbd  # mov dword ptr [esi], eax; cmp edi, 0x28; jb 0x3edac; pop edi; pop esi; ret; 
0x5053ff3e  # mov dword ptr [esi], eax; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x5051694e  # mov dword ptr [esi], eax; mov eax, dword ptr [esp + 0x14]; mov dword ptr [edi + 0xec], eax; pop esi; pop edi; ret; 
0x505364d6  # mov dword ptr [esi], eax; pop ecx; call 0x38721; ret; 
0x50516a49  # mov dword ptr [esi], eax; pop esi; ret; 
0x5051cbb6  # mov dword ptr [esi], eax; ret; 
0x50513131  # mov dword ptr [esi], eax; xor eax, eax; inc eax; pop esi; leave; ret 0xc; 
0x5054881a  # mov dword ptr [esi], eax; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x50533a7c  # mov dword ptr [esi], ecx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x50532f3e  # mov dword ptr [esp], eax; ret; 
0x5053871a  # mov dword ptr fs:[0], eax; ret; 
0x5051cbaa  # mov dword ptr ss:[esi + 8], eax; call 0x1c930; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x505167db  # mov eax, 0x1000; ret; 
0x5051a6d2  # mov eax, 0x16c; add al, 0x75; add eax, 0x5d5ec033; ret; 
0x5051427c  # mov eax, 0x1f6; ret 4; 
0x50537f93  # mov eax, 0x335054a1; shr bl, 0x11; xor eax, eax; inc eax; ret; 
0x505164a1  # mov eax, 0x3b000000; ret; 
0x505391ba  # mov eax, 0x404; ret; 
0x505391cc  # mov eax, 0x411; ret; 
0x505391c0  # mov eax, 0x412; ret; 
0x505317cf  # mov eax, 0x42c; add eax, 0xc0330474; leave; ret; 
0x5052838a  # mov eax, 0x5054bcd4; ret; 
0x50535edc  # mov eax, 0x50555d10; ret; 
0x50538a19  # mov eax, 0x50556018; ret; 
0x50538a13  # mov eax, 0x50556020; ret; 
0x50538a1f  # mov eax, 0x505560a8; ret; 
0x5053a19e  # mov eax, 0x505569b8; ret; 
0x5053a1b1  # mov eax, 0x505569bc; ret; 
0x50537d58  # mov eax, 0x5e50555f; ret; 
0x50516795  # mov eax, 0x7fffffff; ret; 
0x50542681  # mov eax, 0x8000; pop ebp; ret; 
0x505391c6  # mov eax, 0x804; ret; 
0x50510371  # mov eax, 0x8900000a; inc ebp; in al, 0x2b; ret; 
0x50534116  # mov eax, 0x8bfffffe; inc edi; and byte ptr [ebx], bh; ret; 
0x50516812  # mov eax, 0xa8; ret; 
0x50505781  # mov eax, 0xe8fffffe; call 0x3b005ba3; ret; 
0x50543622  # mov eax, 1; ret; 
0x5054357b  # mov eax, 3; ret; 
0x50511643  # mov eax, dword ptr [0x45895054]; ror byte ptr [ebx + 0x5d891045], 1; aam 0x3b; ret; 
0x5052f4f1  # mov eax, dword ptr [0x46c75054]; sbb byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [edi - 0x37], bl; ret; 
0x505011a4  # mov eax, dword ptr [0x5055c944]; ret; 
0x505474e6  # mov eax, dword ptr [0x5055df68]; test eax, eax; jne 0x474f2; ret 4; 
0x50547c7b  # mov eax, dword ptr [0x5055e108]; ret; 
0x50546b3a  # mov eax, dword ptr [0x5055e114]; test eax, eax; jne 0x46b46; ret 0xc; 
0x50527870  # mov eax, dword ptr [0x54a35054]; aam 0x55; push eax; ret; 
0x50536f81  # mov eax, dword ptr [0x59fffff0]; ret; 
0x50516f3e  # mov eax, dword ptr [0x5bfffffe]; ret; 
0x505010a6  # mov eax, dword ptr [0x5e5f5054]; ret 4; 
0x5050110f  # mov eax, dword ptr [0x5e5f5054]; ret; 
0x50537ae3  # mov eax, dword ptr [0x6acc5054]; or al, ch; adc byte ptr [edx], dl; add byte ptr [eax], al; pop ecx; ret; 
0x50521830  # mov eax, dword ptr [0x81000001]; ret 0x11a1; 
0x50548207  # mov eax, dword ptr [0xc583fffe]; je 0x481d7; ret 4; 
0x50543e99  # mov eax, dword ptr [0xf08b5054]; mov eax, esi; call 0x38721; ret; 
0x50538f6e  # mov eax, dword ptr [0xff505054]; adc eax, 0x5054a1e4; leave; ret; 
0x505011de  # mov eax, dword ptr [0xff565054]; adc eax, 0x5054a028; pop esi; ret 4; 
0x5050ab41  # mov eax, dword ptr [eax + 0x108]; ret 4; 
0x50516a22  # mov eax, dword ptr [eax + 0x108]; ret; 
0x5053c1e4  # mov eax, dword ptr [eax + 0x10]; pop esi; pop ebp; ret; 
0x5051f270  # mov eax, dword ptr [eax + 0x10]; ret; 
0x50516a56  # mov eax, dword ptr [eax + 0x10c]; ret; 
0x50502e78  # mov eax, dword ptr [eax + 0x110]; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50516aa0  # mov eax, dword ptr [eax + 0x110]; ret; 
0x50516ab0  # mov eax, dword ptr [eax + 0x114]; ret; 
0x50516b03  # mov eax, dword ptr [eax + 0x118]; ret; 
0x50516b3a  # mov eax, dword ptr [eax + 0x124]; ret; 
0x50516b60  # mov eax, dword ptr [eax + 0x128]; ret; 
0x50516c7d  # mov eax, dword ptr [eax + 0x130]; ret; 
0x505167c7  # mov eax, dword ptr [eax + 0x14]; ret; 
0x50515795  # mov eax, dword ptr [eax + 0x14]; sub eax, edx; add eax, ecx; ret; 
0x5051678b  # mov eax, dword ptr [eax + 0x158]; test eax, eax; jge 0x1679a; mov eax, 0x7fffffff; ret; 
0x505167a3  # mov eax, dword ptr [eax + 0x1ac]; ret; 
0x505167d7  # mov eax, dword ptr [eax + 0x1c]; ret; 
0x5052f844  # mov eax, dword ptr [eax + 0x20]; ret; 
0x50516824  # mov eax, dword ptr [eax + 0x24]; ret; 
0x5051d785  # mov eax, dword ptr [eax + 0x2c]; ret; 
0x50502ce7  # mov eax, dword ptr [eax + 0x32cc]; ret 4; 
0x5050c78c  # mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x505167c0  # mov eax, dword ptr [eax + 0x4c]; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x50502ccc  # mov eax, dword ptr [eax + 0x514]; ret 4; 
0x505167d0  # mov eax, dword ptr [eax + 0x58]; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051681d  # mov eax, dword ptr [eax + 0x58]; test eax, eax; je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x50516833  # mov eax, dword ptr [eax + 0x90]; ret; 
0x50502aea  # mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x5050d543  # mov eax, dword ptr [eax + 0xab4]; ret 4; 
0x50516776  # mov eax, dword ptr [eax + 0xc8]; ret; 
0x505169e9  # mov eax, dword ptr [eax + 0xd4]; ret; 
0x50516a0f  # mov eax, dword ptr [eax + 0xd8]; ret; 
0x50516b88  # mov eax, dword ptr [eax + 0xdc]; ret; 
0x5051685b  # mov eax, dword ptr [eax + 0xe0]; ret; 
0x5050dddd  # mov eax, dword ptr [eax + 0xe4]; ret 4; 
0x505168b5  # mov eax, dword ptr [eax + 0xe4]; ret; 
0x5051691f  # mov eax, dword ptr [eax + 0xec]; ret; 
0x50516969  # mov eax, dword ptr [eax + 0xf0]; ret; 
0x50532b0f  # mov eax, dword ptr [eax + 4]; mov dword ptr [esi + 4], eax; mov eax, esi; pop esi; pop ebp; ret 4; 
0x5051f27f  # mov eax, dword ptr [eax + 4]; ret; 
0x5052db07  # mov eax, dword ptr [eax + 8]; mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0x10]; pop ecx; ret; 
0x5052db2a  # mov eax, dword ptr [eax + 8]; mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0x18]; pop ecx; ret; 
0x5052f506  # mov eax, dword ptr [eax + 8]; mov ecx, dword ptr [ecx + 8]; cmp ecx, eax; jbe 0x2f514; or eax, 0xffffffff; ret; 
0x5051c899  # mov eax, dword ptr [eax + 8]; ret; 
0x50502e2c  # mov eax, dword ptr [eax + ecx*4 + 0xf8]; ret 8; 
0x50532f3c  # mov eax, dword ptr [eax]; mov dword ptr [esp], eax; ret; 
0x5052f521  # mov eax, dword ptr [eax]; mov ecx, dword ptr [ecx + 8]; cmp ecx, eax; jbe 0x2f52e; or eax, 0xffffffff; ret; 
0x5051d0de  # mov eax, dword ptr [eax]; mov ecx, dword ptr [ecx]; cmp ecx, eax; jbe 0x1d0ea; or eax, 0xffffffff; ret; 
0x5054243e  # mov eax, dword ptr [eax]; pop edi; pop esi; pop ebx; leave; ret; 
0x50541fad  # mov eax, dword ptr [eax]; pop esi; pop ebp; ret; 
0x50511599  # mov eax, dword ptr [eax]; push dword ptr [eax]; call 0x33af0; pop ecx; pop ecx; ret; 
0x5051f278  # mov eax, dword ptr [eax]; ret; 
0x505106a0  # mov eax, dword ptr [ebp + 0x18]; pop edi; pop esi; pop ebx; leave; ret 0x14; 
0x50536017  # mov eax, dword ptr [ebp + 0xc]; add eax, 0x20; push eax; call dword ptr [0x5054a020]; pop ebp; ret; 
0x5051e1ef  # mov eax, dword ptr [ebp + 0xc]; cmp eax, dword ptr [ebp + 0x14]; jne 0x1e1e7; xor eax, eax; pop ebp; ret; 
0x5053e411  # mov eax, dword ptr [ebp + 0xc]; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; add esp, 0xc; leave; ret; 
0x50533262  # mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x505499f9  # mov eax, dword ptr [ebp + 8]; add esp, 0xc; pop ebx; pop ebp; ret; 
0x50519ed8  # mov eax, dword ptr [ebp + 8]; call 0x18e95; pop ecx; pop ecx; leave; ret; 
0x50538a2a  # mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055d6a0], eax; pop ebp; ret; 
0x5053e09e  # mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de7c], eax; pop ebp; ret; 
0x5054129c  # mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de9c], eax; pop ebp; ret; 
0x505412ab  # mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055dea8], eax; pop ebp; ret; 
0x505412ba  # mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055deac], eax; pop ebp; ret; 
0x50539d3f  # mov eax, dword ptr [ebp + 8]; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x50501045  # mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50524e49  # mov eax, dword ptr [ebp + 8]; pop ebp; ret; 
0x5050a236  # mov eax, dword ptr [ebp + 8]; pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x5050dcc3  # mov eax, dword ptr [ebp + 8]; pop edi; pop esi; pop ebx; pop ebp; ret 8; 
0x5053737b  # mov eax, dword ptr [ebp + 8]; pop esi; pop ebp; ret; 
0x50532544  # mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x50534169  # mov eax, dword ptr [ebp + 8]; push 0; call 0x33f1d; pop ecx; pop ebp; ret; 
0x50543669  # mov eax, dword ptr [ebp + 8]; sub eax, ecx; dec eax; pop ebp; ret; 
0x505367eb  # mov eax, dword ptr [ebp + 8]; test eax, eax; jge 0x367f4; neg eax; pop ebp; ret; 
0x5052272f  # mov eax, dword ptr [ebp - 0x10]; pop ebx; leave; ret; 
0x5052474a  # mov eax, dword ptr [ebp - 0x18]; pop edi; pop esi; pop ebx; leave; ret; 
0x50532365  # mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50535e69  # mov eax, dword ptr [ebp - 0x1c]; je 0x35e71; mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x5053985f  # mov eax, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x5053b284  # mov eax, dword ptr [ebp - 0x20]; cmp eax, esi; je 0x3b28e; or dword ptr [edi], 0xffffffff; call 0x38721; ret; 
0x50535e6e  # mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x5054239b  # mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x5053fe97  # mov eax, dword ptr [ebp - 0x30]; mov dword ptr [edi + 0x64], eax; xor eax, eax; call 0x38721; ret; 
0x505157f4  # mov eax, dword ptr [ebp - 4]; leave; ret; 
0x50516f21  # mov eax, dword ptr [ebp - 4]; pop esi; pop ebx; leave; ret; 
0x50543bc2  # mov eax, dword ptr [ebp - 4]; pop esi; pop edi; leave; ret; 
0x5053e335  # mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5051e3f4  # mov eax, dword ptr [ebp - 8]; leave; ret; 
0x5052a695  # mov eax, dword ptr [ebp - 8]; mov dword ptr [edi + 0x84], eax; pop esi; leave; ret; 
0x5053174e  # mov eax, dword ptr [ecx + 0x18]; test edx, edx; je 0x31758; mov dword ptr [ecx + 0x18], edx; ret; 
0x5052da45  # mov eax, dword ptr [ecx + 0xc]; test edx, edx; je 0x2da4f; mov dword ptr [ecx + 0xc], edx; ret; 
0x5053a179  # mov eax, dword ptr [ecx*8 + 0x50556854]; pop ebp; ret; 
0x5050d4f9  # mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; pop esi; ret 8; 
0x5050d568  # mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x5051c8af  # mov eax, dword ptr [ecx]; mov ecx, dword ptr [eax + 8]; lea eax, [ecx + eax + 0xc]; mov ecx, dword ptr [esp + 8]; mov dword ptr [ecx], eax; ret; 
0x5052dc27  # mov eax, dword ptr [ecx]; push ecx; call dword ptr [eax + 0x20]; pop ecx; ret; 
0x5053d7dc  # mov eax, dword ptr [esi + 0x10]; or dword ptr [eax], 0xffffffff; mov eax, esi; pop edi; pop esi; ret; 
0x5050a7e4  # mov eax, dword ptr [esi + 0x32d4]; pop edi; pop esi; pop ebp; ret 4; 
0x5050648a  # mov eax, dword ptr [esi + 0x34]; pop esi; ret 4; 
0x5051ef76  # mov eax, dword ptr [esi + 0x38]; pop edi; pop esi; ret; 
0x50533ab6  # mov eax, dword ptr [esi + 0x44]; pop esi; ret; 
0x505201f0  # mov eax, dword ptr [esi + 0x81a0]; mov byte ptr [eax + ecx], bl; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x5050d4ce  # mov eax, dword ptr [esi + 0xd8]; pop esi; ret 4; 
0x5051ccc3  # mov eax, dword ptr [esi + 4]; pop ecx; mov dword ptr [esi + 0xc], eax; ret; 
0x50515c9a  # mov eax, dword ptr [esi]; add dword ptr [edi], eax; and dword ptr [esi], 0; add esp, 0xc; ret; 
0x50515205  # mov eax, dword ptr [esi]; pop ecx; mov dword ptr [esi + 0x18], eax; ret; 
0x50521e2a  # mov eax, dword ptr [esi]; sub dword ptr [ecx], eax; pop edi; pop ebx; ret; 
0x50521f45  # mov eax, dword ptr [esi]; test eax, eax; jne 0x21f4d; pop esi; ret; 
0x5052793f  # mov eax, dword ptr [esi]; test eax, eax; jne 0x2794a; and dword ptr [esi + 4], eax; pop esi; ret; 
0x5052ab28  # mov eax, dword ptr [esp + 0x10]; call 0x2a1fa; pop ecx; ret; 
0x5052a903  # mov eax, dword ptr [esp + 0x10]; mov ecx, dword ptr [esp + 0xc]; call 0x2a1fa; pop ecx; ret; 
0x505341e6  # mov eax, dword ptr [esp + 0x10]; pop ebx; pop esi; pop edi; ret; 
0x50516950  # mov eax, dword ptr [esp + 0x14]; mov dword ptr [edi + 0xec], eax; pop esi; pop edi; ret; 
0x5052a8e0  # mov eax, dword ptr [esp + 0xc]; call 0x2a44c; pop ecx; ret; 
0x5052baeb  # mov eax, dword ptr [esp + 0xc]; call 0x2b41f; pop ecx; ret; 
0x5052bb12  # mov eax, dword ptr [esp + 0xc]; call 0x2b5d0; pop ecx; ret; 
0x50516a45  # mov eax, dword ptr [esp + 0xc]; mov dword ptr [esi], eax; pop esi; ret; 
0x50516f38  # mov eax, dword ptr [esp + 0xc]; pop ecx; call 0x16de3; pop ebx; ret; 
0x5051686e  # mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x50526f8e  # mov eax, dword ptr [esp + 4]; and dword ptr [eax + 0x84], 0; mov dword ptr [eax + 0x8c], 0x40; ret; 
0x5051677d  # mov eax, dword ptr [esp + 4]; cmp dword ptr [eax + 0x10], 0; je 0x1678b; or eax, 0xffffffff; ret; 
0x5052daf5  # mov eax, dword ptr [esp + 4]; cmp dword ptr [eax + 0x40], 0; je 0x2db07; mov dword ptr [eax + 0x30], 1; ret; 
0x5052477b  # mov eax, dword ptr [esp + 4]; cmp dword ptr [eax + 4], 0; jne 0x24788; xor eax, eax; ret; 
0x50527830  # mov eax, dword ptr [esp + 4]; cmp dword ptr [esp + 8], eax; jbe 0x2783e; or eax, 0xffffffff; ret; 
0x5051d877  # mov eax, dword ptr [esp + 4]; mov dword ptr [eax + 0x28], 1; ret; 
0x5051d180  # mov eax, dword ptr [esp + 4]; mov dword ptr [eax + 4], 1; ret; 
0x5051f26c  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 0x10]; ret; 
0x505317bd  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 0x14]; ret; 
0x505317b4  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5052f840  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 0x20]; ret; 
0x5051d781  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 0x2c]; ret; 
0x50516772  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 0xc8]; ret; 
0x5051f27b  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 4]; ret; 
0x5051c895  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax + 8]; ret; 
0x5051f274  # mov eax, dword ptr [esp + 4]; mov eax, dword ptr [eax]; ret; 
0x5051e1a1  # mov eax, dword ptr [esp + 4]; mov edx, dword ptr [esp + 8]; ret; 
0x50536770  # mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x50532e45  # mov eax, dword ptr [esp + 4]; ret; 
0x5051679b  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x167aa; mov eax, dword ptr [eax + 0x1ac]; ret; 
0x5051682b  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x1683a; mov eax, dword ptr [eax + 0x90]; ret; 
0x50516853  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x16862; mov eax, dword ptr [eax + 0xe0]; ret; 
0x505168ad  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x168bc; mov eax, dword ptr [eax + 0xe4]; ret; 
0x505169e1  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x169f0; mov eax, dword ptr [eax + 0xd4]; ret; 
0x50516a07  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x16a16; mov eax, dword ptr [eax + 0xd8]; ret; 
0x5051f32c  # mov eax, dword ptr [esp + 4]; test eax, eax; je 0x1f338; mov eax, dword ptr [eax + 8]; ret; 
0x50516906  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x1690f; ret; 
0x5051695d  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16969; or eax, 0xffffffff; ret; 
0x50516999  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x169a2; ret; 
0x50516a19  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16a22; ret; 
0x50516a4d  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16a56; ret; 
0x50516a94  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16aa0; or eax, 0xffffffff; ret; 
0x50516aa7  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16ab0; ret; 
0x50516ae0  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16ae9; ret; 
0x50516b31  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16b3a; ret; 
0x50516b54  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16b60; or eax, 0xffffffff; ret; 
0x50516c74  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x16c7d; ret; 
0x50524796  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x2479f; ret; 
0x505266f0  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x266f9; ret; 
0x5053438d  # mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x5051f260  # mov eax, dword ptr [esp + 8]; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x10], eax; ret; 
0x505317a8  # mov eax, dword ptr [esp + 8]; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5051d6f8  # mov eax, dword ptr [esp + 8]; mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 8], eax; ret; 
0x50543571  # mov eax, dword ptr [esp + 8]; mov edx, dword ptr [esp + 0x10]; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x50536788  # mov eax, dword ptr [esp + 8]; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x50532e3f  # mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50543e98  # mov eax, dword ptr fs:[0xf08b5054]; mov eax, esi; call 0x38721; ret; 
0x50515e44  # mov eax, ebp; pop ebp; pop ebx; ret; 
0x5051e07a  # mov eax, ebp; pop ebp; pop edi; pop esi; ret; 
0x50502de5  # mov eax, ebx; pop edi; pop ebx; pop esi; pop ebp; ret 8; 
0x50501821  # mov eax, ebx; pop edi; pop esi; pop ebx; ret 4; 
0x50504f24  # mov eax, ebx; pop esi; pop edi; pop ebx; leave; ret 0xc; 
0x50535cee  # mov eax, ecx; add esp, 0x20; pop esi; leave; ret; 
0x505163ca  # mov eax, ecx; call 0x15729; pop edi; pop esi; leave; ret; 
0x505488c6  # mov eax, ecx; pop ebp; ret 0xc; 
0x505460ba  # mov eax, ecx; pop ebx; pop esi; pop edi; leave; ret; 
0x50532f38  # mov eax, ecx; pop ecx; xchg esp, eax; mov eax, dword ptr [eax]; mov dword ptr [esp], eax; ret; 
0x505412f9  # mov eax, ecx; ret; 
0x50532f77  # mov eax, edi; cld; pop edi; leave; ret; 
0x50514147  # mov eax, edi; pop ebx; pop edi; pop esi; leave; ret 0xc; 
0x50514219  # mov eax, edi; pop ebx; pop edi; pop esi; leave; ret 8; 
0x50539af2  # mov eax, edi; pop edi; pop ebp; ret; 
0x5050937b  # mov eax, edi; pop edi; pop ebx; leave; ret 4; 
0x5050e9bc  # mov eax, edi; pop edi; pop ebx; pop esi; ret 4; 
0x5051e34d  # mov eax, edi; pop edi; pop ebx; pop esi; ret; 
0x5051e12e  # mov eax, edi; pop edi; pop esi; mov edx, ecx; pop ebx; ret; 
0x5051d03d  # mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50515384  # mov eax, edi; pop edi; pop esi; pop ebx; leave; ret; 
0x5051dcf7  # mov eax, edi; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50523588  # mov eax, edi; pop edi; pop esi; pop ebx; ret; 
0x505016dc  # mov eax, edi; pop edi; pop esi; ret 4; 
0x50501742  # mov eax, edi; pop edi; pop esi; ret 8; 
0x5051d29f  # mov eax, edi; pop edi; pop esi; ret; 
0x5051d1ac  # mov eax, edi; pop edi; ret; 
0x50547bbc  # mov eax, edi; pop esi; pop edi; ret 4; 
0x50539b2e  # mov eax, edi; pop esi; ret; 
0x505163aa  # mov eax, edx; call 0x15729; pop edi; pop esi; leave; ret; 
0x50541131  # mov eax, edx; pop ebp; ret; 
0x5051d922  # mov eax, edx; ret; 
0x50542f30  # mov eax, edx; xor edx, edx; and cl, 0x1f; shr eax, cl; ret; 
0x505393fb  # mov eax, esi; call 0x38721; ret; 
0x505487e1  # mov eax, esi; call 0x484f2; pop esi; ret 4; 
0x505394e4  # mov eax, esi; pop ebx; leave; ret; 
0x505063ad  # mov eax, esi; pop ebx; pop edi; pop esi; pop ebp; ret 4; 
0x505281cf  # mov eax, esi; pop edi; pop esi; pop ebx; leave; ret; 
0x50509b94  # mov eax, esi; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x505017be  # mov eax, esi; pop edi; pop esi; ret 4; 
0x5053d7e2  # mov eax, esi; pop edi; pop esi; ret; 
0x5051d0d1  # mov eax, esi; pop esi; leave; ret; 
0x5051d17a  # mov eax, esi; pop esi; pop ebp; pop ebx; ret; 
0x50506f49  # mov eax, esi; pop esi; pop ebp; pop edi; pop ebx; ret 4; 
0x50548925  # mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x50532b15  # mov eax, esi; pop esi; pop ebp; ret 4; 
0x5051f46e  # mov eax, esi; pop esi; pop ebp; ret; 
0x5051ff1f  # mov eax, esi; pop esi; pop ebx; leave; ret; 
0x5053ff11  # mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x5051eaac  # mov eax, esi; pop esi; pop ebx; ret; 
0x50536abf  # mov eax, esi; pop esi; ret 0x10; 
0x5050118e  # mov eax, esi; pop esi; ret; 
0x50537a44  # mov ebp, 0x5e5fc78b; pop ebp; ret; 
0x5052f7f8  # mov ebp, 0x83fffffb; les edx, ptr [eax]; pop esi; ret; 
0x505150e3  # mov ebp, 0xc95ec033; ret; 
0x5053e6b6  # mov ebp, 0xc9ffff3c; ret; 
0x50531b2b  # mov ebp, dword ptr [ebx]; add byte ptr [ecx + 0x59], bl; ret; 
0x50531b8c  # mov ebp, esp; call 0x38a19; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; pop ebp; ret; 
0x50538a28  # mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055d6a0], eax; pop ebp; ret; 
0x5053e09c  # mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de7c], eax; pop ebp; ret; 
0x5054129a  # mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de9c], eax; pop ebp; ret; 
0x505412a9  # mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055dea8], eax; pop ebp; ret; 
0x505412b8  # mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055deac], eax; pop ebp; ret; 
0x505271e9  # mov ebx, 0x5e590000; ret; 
0x50515e6b  # mov ebx, 0x5ffffffe; pop esi; ret; 
0x505218a2  # mov ebx, 0x81ffffd2; ret; 
0x50537d50  # mov ebx, 0x83fffff5; les esp, ptr [ebx]; mov eax, 0x5e50555f; ret; 
0x505276a7  # mov ebx, 0x8dffff52; inc ebp; fsubr dword ptr [eax + 0x50]; ret; 
0x50517418  # mov ebx, 0xc4830000; or al, 0x85; ror byte ptr [edi], 0x84; ret 0xfffe; 
0x50506851  # mov ebx, 0xc5830002; js 0x6821; ret; 
0x505492b8  # mov ebx, 0xc9fffe90; ret 0xc; 
0x50543ea8  # mov ebx, dword ptr [ebp + 8]; mov esi, dword ptr [ebp - 0x1c]; push 4; call 0x38c24; pop ecx; ret; 
0x50536377  # mov ebx, dword ptr [ebp + 8]; push 4; call 0x38c24; pop ecx; ret; 
0x5052bad2  # mov ebx, dword ptr [esp + 8]; call 0x2b351; pop ebx; ret; 
0x5052baff  # mov ebx, dword ptr [esp + 8]; call 0x2b4ff; pop ebx; ret; 
0x50516f36  # mov ebx, eax; mov eax, dword ptr [esp + 0xc]; pop ecx; call 0x16de3; pop ebx; ret; 
0x50536abb  # mov ebx, ecx; mov ecx, eax; mov eax, esi; pop esi; ret 0x10; 
0x50548866  # mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x50549221  # mov ecx, 0x15180; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x50539467  # mov ecx, 0x59fffff7; ret; 
0x5053a221  # mov ecx, 0x59ffffff; pop ecx; pop ebp; ret; 
0x50543fa1  # mov ecx, 0x5e5fc033; pop ebx; leave; ret; 
0x5051f616  # mov ecx, 0x7f7; idiv ecx; mov eax, edx; ret; 
0x5050f9ba  # mov ecx, 0xc9000229; ret 0x10; 
0x505093ba  # mov ecx, 0xc900028f; ret 4; 
0x50532b83  # mov ecx, dword ptr [0x50556830]; movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d8d  # mov ecx, dword ptr [0x50556830]; movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c88  # mov ecx, dword ptr [0x50556830]; movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532c04  # mov ecx, dword ptr [0x50556830]; movzx eax, word ptr [ecx + eax*2]; and eax, 4; pop ebp; ret; 
0x505166de  # mov ecx, dword ptr [eax + 0x1ac]; cmp ecx, 1; jne 0x166ed; mov eax, esi; pop esi; ret; 
0x5051d917  # mov ecx, dword ptr [eax + 0x1c]; xor edx, edx; cmp ecx, dword ptr [eax + 0x20]; setl dl; mov eax, edx; ret; 
0x5051f739  # mov ecx, dword ptr [eax + 0x38000]; inc ecx; and ecx, 0x7fff; mov dword ptr [eax + 0x38000], ecx; ret; 
0x5051c8b1  # mov ecx, dword ptr [eax + 8]; lea eax, [ecx + eax + 0xc]; mov ecx, dword ptr [esp + 8]; mov dword ptr [ecx], eax; ret; 
0x505316e8  # mov ecx, dword ptr [eax + eax]; add byte ptr [ecx + 0x188c5], al; add cl, cl; ret; 
0x5053143a  # mov ecx, dword ptr [eax]; mov edx, dword ptr [esp + 4]; mov byte ptr [edx + ecx], 3; inc dword ptr [eax]; ret; 
0x505266fd  # mov ecx, dword ptr [eax]; push dword ptr [esp + 0xc]; push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5052dd30  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0x10]; pop ecx; pop ecx; ret; 
0x5052db1d  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0x14]; pop ecx; pop ecx; ret; 
0x5052db2d  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0x18]; pop ecx; ret; 
0x5053173c  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0xc]; add esp, 0xc; ret; 
0x5052dd04  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0xc]; pop ecx; pop ecx; ret; 
0x5052dc82  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 4]; add esp, 0xc; pop ebp; ret; 
0x5052ef42  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 4]; add esp, 0xc; pop esi; ret; 
0x5052daa2  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 8]; add esp, 0xc; pop ebp; ret; 
0x5051506c  # mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x50531b57  # mov ecx, dword ptr [ebp + 0x10]; mov edx, dword ptr [ebp + 0xc]; call 0x31a4e; pop ecx; pop ebp; ret 0xc; 
0x5051c93d  # mov ecx, dword ptr [ebp + 0xc]; cmp ecx, eax; jbe 0x1c948; xor eax, eax; pop ebp; ret; 
0x5054458e  # mov ecx, dword ptr [ebp + 0xc]; mov dword ptr [ecx], ebx; pop edi; pop ebx; leave; ret; 
0x5052a303  # mov ecx, dword ptr [ebp + 8]; add edi, 0x110; call 0x2a12b; pop edi; pop ebp; ret; 
0x5053e414  # mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; add esp, 0xc; leave; ret; 
0x50531b71  # mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; pop ebp; ret; 
0x50536b08  # mov ecx, dword ptr [ebp + 8]; test ecx, ecx; je 0x36b11; mov dword ptr [ecx], eax; leave; ret; 
0x50533112  # mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5053391a  # mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x50504c4e  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x10; 
0x5050ae3e  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x14; 
0x50505ba2  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x1c; 
0x5050858c  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x20; 
0x505059b1  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x24; 
0x50505ee0  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x2c; 
0x5050126b  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0xc; 
0x5050133a  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 8; 
0x5053a102  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret; 
0x50532b69  # mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5052b7bb  # mov ecx, dword ptr [ebp - 8]; mov dword ptr [eax + 0x104c], ecx; pop esi; leave; ret; 
0x5052a55a  # mov ecx, dword ptr [ebp - 8]; mov dword ptr [eax + 0x84], ecx; pop esi; leave; ret; 
0x505169d7  # mov ecx, dword ptr [ecx + 0x10]; mov dword ptr [eax + 0x104], ecx; ret; 
0x5052f523  # mov ecx, dword ptr [ecx + 8]; cmp ecx, eax; jbe 0x2f52e; or eax, 0xffffffff; ret; 
0x5052dc24  # mov ecx, dword ptr [ecx + 8]; mov eax, dword ptr [ecx]; push ecx; call dword ptr [eax + 0x20]; pop ecx; ret; 
0x5051487e  # mov ecx, dword ptr [ecx]; cmp eax, ecx; jbe 0x14888; xor eax, eax; inc eax; ret; 
0x5051d0e0  # mov ecx, dword ptr [ecx]; cmp ecx, eax; jbe 0x1d0ea; or eax, 0xffffffff; ret; 
0x50516985  # mov ecx, dword ptr [edx + 0xec]; cmp eax, ecx; jl 0x16992; lea eax, [ecx - 1]; mov dword ptr [edx + 0xf0], eax; ret; 
0x5051ceb5  # mov ecx, dword ptr [edx]; add dword ptr [eax + 0xc], ecx; xor eax, eax; inc eax; pop esi; ret; 
0x5053c3e6  # mov ecx, dword ptr [edx]; movzx eax, byte ptr [ecx]; inc ecx; mov dword ptr [edx], ecx; ret; 
0x5051525d  # mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x505152ad  # mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; ret; 
0x5051565d  # mov ecx, dword ptr [esi + 0x178]; mov edx, dword ptr [esp + 4]; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x505201ea  # mov ecx, dword ptr [esi + 0x81a4]; mov eax, dword ptr [esi + 0x81a0]; mov byte ptr [eax + ecx], bl; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x5051577a  # mov ecx, dword ptr [esi]; add dword ptr [eax + 0x18], ecx; ret; 
0x5051cd73  # mov ecx, dword ptr [esi]; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; ret; 
0x50516b26  # mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a89  # mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x124], ecx; ret; 
0x50516bd7  # mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x5052a8dc  # mov ecx, dword ptr [esp + 0x10]; mov eax, dword ptr [esp + 0xc]; call 0x2a44c; pop ecx; ret; 
0x5052bb0e  # mov ecx, dword ptr [esp + 0x10]; mov eax, dword ptr [esp + 0xc]; call 0x2b5d0; pop ecx; ret; 
0x5052bb21  # mov ecx, dword ptr [esp + 0x10]; mov edx, dword ptr [esp + 0xc]; call 0x2b6b4; pop ecx; ret; 
0x505232df  # mov ecx, dword ptr [esp + 0xc]; call 0x2307b; pop ecx; ret; 
0x5052a907  # mov ecx, dword ptr [esp + 0xc]; call 0x2a1fa; pop ecx; ret; 
0x5053676a  # mov ecx, dword ptr [esp + 0xc]; jne 0x36779; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x50516b1c  # mov ecx, dword ptr [esp + 0xc]; mov dword ptr [eax + 0x11c], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x5051c913  # mov ecx, dword ptr [esp + 4]; cmp ecx, eax; jbe 0x1c91e; xor eax, eax; ret; 
0x5052421a  # mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x5051f264  # mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x10], eax; ret; 
0x505317ac  # mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 0x1c], eax; ret; 
0x5051d6fc  # mov ecx, dword ptr [esp + 4]; mov dword ptr [ecx + 8], eax; ret; 
0x50533be6  # mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50516765  # mov ecx, dword ptr [esp + 4]; xor eax, eax; cmp dword ptr [ecx + 0x10], eax; setne al; ret; 
0x50516b49  # mov ecx, dword ptr [esp + 8]; add dword ptr [eax + 0x124], ecx; ret; 
0x50516abf  # mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b6f  # mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x128], ecx; ret; 
0x50516bcd  # mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x134], ecx; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x5050c7cd  # mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x32d8], ecx; xor eax, eax; ret 8; 
0x505169fc  # mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0xd8], ecx; ret; 
0x5051c8b8  # mov ecx, dword ptr [esp + 8]; mov dword ptr [ecx], eax; ret; 
0x50536abd  # mov ecx, eax; mov eax, esi; pop esi; ret 0x10; 
0x50501bec  # mov edi, 0x33fffffc; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 4; 
0x5051fca3  # mov edi, 0x83ffffcc; les ecx, ptr [esi + ebx*2]; ret; 
0x505462f6  # mov edi, 0x855ae0f; call 0x38721; ret; 
0x5050f1b4  # mov edi, 0xc9000231; ret 0x14; 
0x50545ab4  # mov edi, 0xc9fffec8; ret; 
0x50542146  # mov edi, dword ptr [ebp - 0x28]; mov esi, dword ptr [ebp - 0x20]; push 0xa; call 0x38c24; pop ecx; ret; 
0x505390dd  # mov edi, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x50538ffa  # mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x5052ab0f  # mov edi, dword ptr [esp + 8]; call 0x2a12b; pop edi; ret;
0x5052a8cd  # mov edi, dword ptr [esp + 8]; call 0x2a314; pop edi; ret; 
0x5052a8f4  # mov edi, dword ptr [esp + 8]; call 0x2a566; pop edi; ret; 
0x50547bb5  # mov edi, eax; call 0x487c5; mov eax, edi; pop esi; pop edi; ret 4; 
0x50546b33  # mov edi, eax; mov eax, edi; pop edi; pop esi; ret; 
0x50533b2e  # mov edi, edi; xor eax, eax; ret; 
0x505497dc  # mov edi, esi; dec ecx; ret 0x10; 
0x50536166  # mov edx, 0x5900002a; ret; 
0x50518e8f  # mov edx, 0x5e5bffff; ret; 
0x50524805  # mov edx, 0x5e5fc033; ret; 
0x505494c8  # mov edx, 0x6c6c033; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x50527eb9  # mov edx, 0x810000a4; lds ecx, ptr [eax + eax*2]; add byte ptr [eax], al; leave; ret; 
0x50505bf7  # mov edx, 0x8b000001; inc ebp; or byte ptr [ebx], bh; ret; 
0x50520e7b  # mov edx, 0xc40c798; jbe 0x20ed6; xor dl, byte ptr [eax]; ret; 
0x505096fa  # mov edx, 0xc40c798; jbe 0x9755; xor dl, byte ptr [eax]; ret; 
0x50516afb  # mov edx, dword ptr [eax + 0x120]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x50515773  # mov edx, dword ptr [eax + 0x14]; add edx, ecx; mov dword ptr [edi], edx; mov ecx, dword ptr [esi]; add dword ptr [eax + 0x18], ecx; ret; 
0x50516917  # mov edx, dword ptr [eax + 0xe8]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0xec]; ret; 
0x5051ce01  # mov edx, dword ptr [eax + 4]; sub edx, ecx; cmp edx, 1; jae 0x1ce0e; xor eax, eax; ret; 
0x50531b5a  # mov edx, dword ptr [ebp + 0xc]; call 0x31a4e; pop ecx; pop ebp; ret 0xc; 
0x5054239e  # mov edx, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x50542291  # mov edx, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x5051ce23  # mov edx, dword ptr [ecx + 4]; sub edx, eax; cmp edx, 4; jae 0x1ce30; xor eax, eax; ret; 
0x5054361a  # mov edx, dword ptr [edx + 0xc]; cmp dword ptr [ecx + 8], edx; jne 0x43627; mov eax, 1; ret; 
0x50515260  # mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x505152b0  # mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; ret; 
0x5051cd22  # mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x5051cd75  # mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; ret; 
0x50537092  # mov edx, dword ptr [esi]; add byte ptr [eax], al; ret; 
0x50543575  # mov edx, dword ptr [esp + 0x10]; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x5052bb25  # mov edx, dword ptr [esp + 0xc]; call 0x2b6b4; pop ecx; ret; 
0x5053143c  # mov edx, dword ptr [esp + 4]; mov byte ptr [edx + ecx], 3; inc dword ptr [eax]; ret; 
0x50515663  # mov edx, dword ptr [esp + 4]; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x5050d55e  # mov edx, dword ptr [esp + 8]; lea ecx, [eax + 0xab4]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x5051e1a5  # mov edx, dword ptr [esp + 8]; ret; 
0x5051e3f2  # mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x5051f62c  # mov edx, eax; pop ecx; pop ecx; test edx, edx; jne 0x1f635; ret; 
0x50531395  # mov edx, eax; push edx; call 0x311b1; add esp, 0xc; mov eax, edx; ret; 
0x505369a0  # mov edx, eax; xor eax, eax; and cl, 0x1f; shl edx, cl; ret; 
0x50536ab9  # mov edx, ebx; mov ebx, ecx; mov ecx, eax; mov eax, esi; pop esi; ret 0x10; 
0x5050ab69  # mov edx, ecx; mov dword ptr [eax + 0x108], edx; xor eax, eax; ret 8; 
0x50502ef9  # mov edx, ecx; mov dword ptr [eax + 0x10c], esi; mov dword ptr [eax + 0x110], edx; pop esi; or eax, 0xffffffff; ret 0xc; 
0x5051e132  # mov edx, ecx; pop ebx; ret; 
0x50513a7a  # mov es, word ptr [eax]; add byte ptr [ecx - 0x75], bl; ret; 
0x50548f2c  # mov esi, 0x2448dc0; ror byte ptr [ecx + 0x458b2045], 1; sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x50515d3b  # mov esi, 0x28f0; ret; 
0x50523414  # mov esi, 0x5f003e04; pop esi; pop ebp; pop ebx; ret; 
0x5051c9be  # mov esi, 0x83000171; ret; 
0x505199f4  # mov esi, 0x83fffff4; les ecx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x50519332  # mov esi, 0x8b57ffff; ret; 
0x5051ccb5  # mov esi, 0xc9000156; ret; 
0x50509d0e  # mov esi, 0xe8; pop edi; pop esi; ret 8; 
0x50509daf  # mov esi, 0xf0; pop edi; pop esi; ret 8; 
0x50509e50  # mov esi, 0xf4; pop edi; pop esi; ret 8; 
0x5053fcea  # mov esi, ds; push ebp; push eax; call 0x3738a; pop ecx; ret; 
0x5053fca6  # mov esi, ds; push ebp; push eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x505247a0  # mov esi, dword ptr [eax]; test esi, esi; jne 0x247aa; xor eax, eax; pop esi; ret; 
0x50536374  # mov esi, dword ptr [ebp + 0xc]; mov ebx, dword ptr [ebp + 8]; push 4; call 0x38c24; pop ecx; ret; 
0x50540f19  # mov esi, dword ptr [ebp + 0xc]; push 4; call 0x38c24; pop ecx; ret; 
0x50537713  # mov esi, dword ptr [ebp + 8]; push 0xc; call 0x38c24; pop ecx; ret; 
0x50537548  # mov esi, dword ptr [ebp + 8]; push 0xd; call 0x38c24; pop ecx; ret; 
0x50536bfb  # mov esi, dword ptr [ebp + 8]; push esi; call 0x36026; pop ecx; ret; 
0x50539461  # mov esi, dword ptr [ebp - 0x1c]; push 0xd; call 0x38c24; pop ecx; ret; 
0x50543eab  # mov esi, dword ptr [ebp - 0x1c]; push 4; call 0x38c24; pop ecx; ret; 
0x50539ba7  # mov esi, dword ptr [ebp - 0x1c]; ret; 
0x50542149  # mov esi, dword ptr [ebp - 0x20]; push 0xa; call 0x38c24; pop ecx; ret; 
0x50531ed0  # mov esi, dword ptr [ebp - 0x24]; call 0x38a0d; mov dword ptr [eax], esi; call 0x38721; ret; 
0x5053661c  # mov esi, dword ptr [ebp - 0x24]; push esi; call 0x36026; pop ecx; ret; 
0x50531e43  # mov esi, dword ptr [ebp - 0x3c]; push 7; call 0x38c24; pop ecx; ret; 
0x505390da  # mov esi, dword ptr [ebp - 8]; mov edi, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x50538ff7  # mov esi, dword ptr [ebp - 8]; mov edi, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x5051dc81  # mov esi, dword ptr [esp + 0xc]; call 0x1cfcc; pop esi; ret; 
0x5052f73f  # mov esi, dword ptr [esp + 8]; cmp dword ptr [esi + 0x1c], 0; je 0x2f752; mov dword ptr [esi + 0x10], 1; pop esi; ret; 
0x50521f41  # mov esi, dword ptr [esp + 8]; mov eax, dword ptr [esi]; test eax, eax; jne 0x21f4d; pop esi; ret; 
0x50516866  # mov esi, dword ptr [esp + 8]; test esi, esi; jne 0x16874; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x505168c0  # mov esi, dword ptr [esp + 8]; test esi, esi; jne 0x168ce; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x50525285  # mov esi, eax; add ecx, 4; or esi, edx; jne 0x25278; pop esi; ret; 
0x5053a1d2  # mov esi, eax; call 0x3a195; mov dword ptr [eax], esi; pop esi; pop ebp; ret; 
0x5051e2eb  # mov esi, eax; cmp esi, -1; jne 0x1e2f6; xor eax, eax; pop esi; ret; 
0x5051e31e  # mov esi, eax; cmp esi, -1; jne 0x1e329; xor eax, eax; pop esi; ret; 
0x50543e9c  # mov esi, eax; mov eax, esi; call 0x38721; ret; 
0x50511540  # mov esi, eax; test esi, esi; jne 0x11548; pop esi; ret; 
0x505063c0  # mov esi, eax; test esi, esi; jne 0x63cd; or eax, 0xffffffff; pop esi; ret 4; 
0x50518e8b  # mov esi, ebx; call 0x14981; pop ebx; pop esi; ret; 
0x50516e1b  # mov esi, ebx; call 0x14981; pop esi; leave; ret; 
0x50516e8e  # mov esi, ebx; call 0x14981; pop esi; pop ebx; leave; ret; 
0x50539892  # mov esp, 0x33000000; fist dword ptr [edi + 0x3b]; ret; 
0x50542a35  # mov esp, 0x3b5055de; ret; 
0x5053c364  # mov esp, 0x59ffffc8; ret; 
0x5053a1d5  # mov esp, 0x89ffffff; xor byte ptr [esi + 0x5d], bl; ret; 
0x5054671e  # mov esp, 0xc583fffe; insb byte ptr es:[edi], dx; leave; ret 0xc; 
0x505059b7  # mov esp, 0xc90002c9; ret 0x24; 
0x50522c36  # mov esp, 0xe8505054; ret 0xde; 
0x50537f9f  # mov esp, dword ptr [ebp - 0x18]; mov dword ptr [ebp - 4], 0xfffffffe; or eax, 0xffffffff; call 0x38721; ret; 
0x50531b32  # mov esp, dword ptr [ebp - 0x18]; mov dword ptr [ebp - 4], 0xfffffffe; xor eax, eax; call 0x38721; ret; 
0x50538730  # mov esp, ebp; pop ebp; push ecx; ret; 
0x50533cbf  # mov esp, ebp; pop ebp; ret; 
0x505201eb  # mov fs, word ptr [ecx + eax*4 - 0x79750000]; mov al, byte ptr [0x88000081]; sbb al, 8; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x5050d2e7  # mov word ptr [eax + 2], ss; add cl, cl; ret 0xc; 
0x50542da4  # mov word ptr [eax + 8], cx; pop ebx; leave; ret; 
0x505427bb  # mov word ptr [eax], cx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5052d8c8  # mov word ptr [eax], es; add byte ptr [eax], al; leave; ret; 
0x5050e466  # mov word ptr [ebx], cs; ret; 
0x5050e1e4  # mov word ptr [ebx], cs; salc; pop es; aaa; ret; 
0x505010a5  # mov word ptr [ecx + 0x5e5f5054], fs; ret 4; 
0x5050110e  # mov word ptr [ecx + 0x5e5f5054], fs; ret; 
0x505011dd  # mov word ptr [ecx - 0xa9afac], fs; adc eax, 0x5054a028; pop esi; ret 4; 
0x5051e87c  # mov word ptr [ecx], ds; add byte ptr [ecx - 0x5d], bl; sub al, 0xcf; push ebp; push eax; ret; 
0x50503268  # mov word ptr [ecx], es; add byte ptr [eax], al; leave; ret 4; 
0x50507389  # mov word ptr [ecx], es; add byte ptr [eax], al; leave; ret 8; 
0x5052dc0e  # mov word ptr [ecx], es; add byte ptr [eax], al; leave; ret; 
0x5051d845  # mov word ptr [edi + edi*8 - 1], ss; call ptr [edi + 0x5b]; pop esi; ret; 
0x5053438a  # mov word ptr [edi], dx; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x50534397  # mov word ptr [edi], dx; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x505096d9  # mov word ptr [edx], es; add cl, cl; ret 0xc; 
0x50520101  # movsb byte ptr es:[edi], byte ptr [esi]; add byte ptr [eax], al; add cl, cl; ret; 
0x50527eba  # movsb byte ptr es:[edi], byte ptr [esi]; add byte ptr [eax], al; add ebp, 0x400c; leave; ret; 
0x50527f71  # movsb byte ptr es:[edi], byte ptr [esi]; add byte ptr [eax], al; leave; ret; 
0x505201ec  # movsb byte ptr es:[edi], byte ptr [esi]; add dword ptr [eax], 0xa0868b00; add dword ptr [eax], 0x81c8800; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x50548c89  # movsb byte ptr es:[edi], byte ptr [esi]; add dword ptr [eax], eax; add cl, cl; ret 4; 
0x505101cf  # movsb byte ptr es:[edi], byte ptr [esi]; and dword ptr [edx], eax; add cl, cl; ret 0x14; 
0x50519580  # movsb byte ptr es:[edi], byte ptr [esi]; fcos; call dword ptr [esi + 0x68]; ret 0x515f; 
0x505033b5  # movsb byte ptr es:[edi], byte ptr [esi]; or al, byte ptr [eax]; add byte ptr [ebx - 0x15], dl; ret 0x1468; 
0x505033dd  # movsb byte ptr es:[edi], byte ptr [esi]; or al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0x10; 
0x5051792c  # movsb byte ptr es:[edi], byte ptr [esi]; sbb byte ptr [eax], al; add byte ptr [esi - 0x18], dl; dec edx; ret 1; 
0x50536f78  # movsd dword ptr es:[edi], dword ptr [esi]; pop ss; add byte ptr [eax], al; ret; 
0x5053699b  # movsd dword ptr es:[edi], dword ptr [esi]; ret 0xe0d3; 
0x50520196  # movsx eax, word ptr [eax + 2]; pop esi; ret; 
0x505475a1  # movzx eax, al; and eax, 1; ret; 
0x50526605  # movzx eax, al; ret; 
0x50546e05  # movzx eax, al; shl ecx, 8; or eax, ecx; ret 4; 
0x5051f325  # movzx eax, ax; ret; 
0x5051d0ca  # movzx eax, byte ptr [ebp - 1]; mov dword ptr [esi + 0x10], eax; mov eax, esi; pop esi; leave; ret; 
0x5053c3e8  # movzx eax, byte ptr [ecx]; inc ecx; mov dword ptr [edx], ecx; ret; 
0x5051f31b  # movzx eax, word ptr [eax + 8]; push eax; call 0x4700e; movzx eax, ax; ret; 
0x50532b89  # movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d93  # movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c8e  # movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532d0f  # movzx eax, word ptr [ecx + eax*2]; and eax, 8; pop ebp; ret; 
0x50520181  # movzx ecx, byte ptr [eax]; cmp ecx, esi; jle 0x20165; or eax, 0xffffffff; pop esi; ret; 
0x5051027c  # mul dword ptr [eax]; add al, byte ptr [eax]; leave; ret 0x14; 
0x5053678c  # mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x50536774  # mul ecx; ret 0x10; 
0x5053421c  # neg byte ptr [ebx + 0x5e]; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50539232  # neg dword ptr [edi + 0x5e]; ret; 
0x505367f2  # neg eax; pop ebp; ret; 
0x505410f1  # neg eax; pop ecx; dec eax; pop ebp; ret; 
0x5051eb1b  # neg eax; pop ecx; sbb eax, eax; pop ecx; inc eax; ret; 
0x5052782b  # neg eax; pop edi; pop esi; ret; 
0x50543b5d  # neg eax; pop esi; pop ebp; ret; 
0x5051d0ec  # neg eax; ret; 
0x50542688  # neg eax; sbb eax, eax; and eax, 0xc000; add eax, 0x4000; pop ebp; ret; 
0x50514892  # neg eax; sbb eax, eax; ret; 
0x50542f14  # neg eax; sbb edx, 0; pop ebp; pop esi; pop edi; ret 0x10; 
0x5053674f  # neg eax; sbb edx, 0; pop ebx; pop esi; pop edi; ret 0x10; 
0x50536a1c  # neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x5051e1bb  # neg ecx; add ecx, dword ptr [ebp + 0x10]; add eax, ecx; pop ebp; ret; 
0x50536a1a  # neg edx; neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x50502f02  # nop; adc byte ptr [ecx], al; add byte ptr [eax], al; pop esi; or eax, 0xffffffff; ret 0xc; 
0x5052e0b1  # nop; add al, byte ptr [eax]; add byte ptr [eax + 0x33], dl; fucomi st(0); ret; 
0x5050ece3  # nop; add al, byte ptr ss:[eax]; leave; ret 0x10; 
0x505169d2  # nop; add byte ptr [ecx], al; add byte ptr [eax], al; mov ecx, dword ptr [ecx + 0x10]; mov dword ptr [eax + 0x104], ecx; ret; 
0x505484d0  # nop; add dword ptr [eax], eax; add cl, cl; ret 8; 
0x50516afc  # nop; and byte ptr [ecx], al; add byte ptr [eax], al; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x5053fcab  # nop; ficom word ptr [ebp + 0x50]; pop ebp; ret; 
0x505035e3  # nop; in eax, dx; add al, byte ptr [eax]; add ebp, 0x6c; leave; ret 0xc; 
0x5052d3e3  # nop; les eax, ptr [ebx]; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x5050ab6c  # nop; or byte ptr [ecx], al; add byte ptr [eax], al; xor eax, eax; ret 8; 
0x5051ea6e  # nop; pop ds; add byte ptr [eax], al; leave; ret; 
0x5052d3d5  # nop; rol byte ptr [ebx], 0; add byte ptr [ecx + 0x59], bl; ret; 
0x50533b33  # nop; sbb eax, eax; shl eax, 1; add eax, 1; ret; 
0x505130e0  # nop; sldt word ptr [eax]; leave; ret 0xc; 
0x505375c9  # not byte ptr [edi - 1]; adc eax, 0x5054a028; pop edi; mov eax, esi; pop esi; ret; 
0x505283a3  # not eax; pop ecx; and eax, 0x5054bc28; ret; 
0x50533ada  # not eax; pop ecx; and eax, esi; pop esi; pop ebp; ret; 
0x5050d521  # not ecx; and dword ptr [eax + 0xd8], ecx; xor eax, eax; inc eax; ret 0xc; 
0x50525b14  # not edx; and dword ptr [eax], edx; pop esi; ret; 
0x50502ce8  # or ah, 0x32; add byte ptr [eax], al; ret 4; 
0x50533b2a  # or ah, ah; jne 0x33b00; mov edi, edi; xor eax, eax; ret; 
0x5053600f  # or al, 0; add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x5053660f  # or al, 0; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50542397  # or al, 0; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x38721; ret; 
0x50516777  # or al, 0; add byte ptr [eax], al; ret; 
0x5053641d  # or al, 0; add byte ptr [eax], al; xor eax, eax; call 0x38721; ret; 
0x5053622d  # or al, 0; add byte ptr [eax], al; xor eax, eax; pop esi; pop ebp; ret; 
0x50533a99  # or al, 0; add byte ptr [eax], al; xor eax, eax; pop esi; ret; 
0x505316e9  # or al, 0; add byte ptr [ecx + 0x188c5], al; add cl, cl; ret; 
0x5053f00f  # or al, 0; jg 0x3effa; pop esi; pop ebp; ret; 
0x50547c79  # or al, 0; mov eax, dword ptr [0x5055e108]; ret; 
0x50519956  # or al, 0x2b; ret; 
0x5052e438  # or al, 0x33; fstp xword ptr [ebx]; ret; 
0x5054361c  # or al, 0x39; push ecx; or byte ptr [ebp + 5], dh; mov eax, 1; ret; 
0x505273e5  # or al, 0x3b; ret 0x1b7d; 
0x50524826  # or al, 0x3b; ret 0x475; 
0x50545cdd  # or al, 0x3b; ret 0x840f; 
0x5050ca2b  # or al, 0x3b; ret; 
0x50527ebf  # or al, 0x40; add byte ptr [eax], al; leave; ret; 
0x50536bc9  # or al, 0x40; je 0x36bd9; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50513e16  # or al, 0x40; ret; 
0x5051e3a1  # or al, 0x48; je 0x1e3a9; or eax, 0xffffffff; ret; 
0x505391b3  # or al, 0x48; je 0x391ba; xor eax, eax; ret; 
0x505386cb  # or al, 0x50; call 0x3855a; pop ecx; pop ecx; pop ebp; ret; 
0x505360f0  # or al, 0x50; call dword ptr [ebp + 8]; add esp, 0x10; pop edi; leave; ret; 
0x50526702  # or al, 0x50; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5052dc4b  # or al, 0x50; call dword ptr [ecx]; add esp, 0x18; pop ebp; ret; 
0x5051568e  # or al, 0x56; call 0x1557b; add esp, 0xc; pop esi; ret; 
0x50524ddb  # or al, 0x56; call 0x24939; pop ecx; pop ecx; pop esi; ret; 
0x5052dcd6  # or al, 0x56; call dword ptr [eax + 8]; add esp, 0x10; pop esi; pop ebp; ret; 
0x50516f3b  # or al, 0x59; call 0x16de3; pop ebx; ret; 
0x50516391  # or al, 0x5b; leave; ret; 
0x505499fe  # or al, 0x5b; pop ebp; ret; 
0x5051ec17  # or al, 0x5d; ret; 
0x5052d4ac  # or al, 0x5e; leave; ret; 
0x5052daf1  # or al, 0x5e; pop ebp; ret; 
0x50517cf5  # or al, 0x5e; pop ebx; leave; ret; 
0x505151b2  # or al, 0x5e; ret; 
0x5052d5a0  # or al, 0x5f; leave; ret; 
0x5051d75c  # or al, 0x5f; mov dword ptr [esi + 0x10], edx; mov eax, esi; pop esi; ret; 
0x50525e57  # or al, 0x5f; mov eax, esi; pop esi; ret; 
0x5050e597  # or al, 0x5f; pop ebx; leave; ret; 
0x5051bfce  # or al, 0x5f; pop ebx; pop esi; pop ebp; ret; 
0x5052df8c  # or al, 0x5f; pop esi; pop ebp; ret; 
0x5050f463  # or al, 0x5f; pop esi; pop ebx; leave; ret 4; 
0x505199fa  # or al, 0x5f; pop esi; pop ebx; leave; ret; 
0x5051a61f  # or al, 0x5f; pop esi; pop ebx; pop ebp; ret; 
0x5052f73b  # or al, 0x5f; ret; 
0x5050a714  # or al, 0x68; ret; 
0x5050103a  # or al, 0x6a; add dword ptr [edx], ebp; call dword ptr [0x5054a240]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50540e1b  # or al, 0x72; hlt; pop ebp; ret; 
0x50537b34  # or al, 0x72; in al, dx; pop esi; pop ebp; ret; 
0x50522906  # or al, 0x74; or byte ptr [ebx], bh; ret 0x474; 
0x505096fe  # or al, 0x76; push esp; xor dl, byte ptr [eax]; ret; 
0x5051eabb  # or al, 0x7d; pop es; mov dword ptr [eax + 0x10], ecx; xor eax, eax; inc eax; ret; 
0x50524351  # or al, 0x7e; push 0x2bffca83; rol dword ptr [ebx], 1; ret 0x463b; 
0x5053e9a6  # or al, 0x7f; add al, 0x3b; ret; 
0x50539393  # or al, 0x80; dec esp; push cs; sbb eax, 0x80d18a10; ret 0xeb20; 
0x50525924  # or al, 0x81; inc dword ptr [eax + 0x3b]; add dword ptr [ecx + esi*8 - 0x73], edi; add al, 0x81; dec dword ptr [eax]; ret; 
0x505343ff  # or al, 0x83; jge 0x34417; add bh, byte ptr [ecx + ecx*8 - 0x7d]; jge 0x3441d; and al, 0x7f; ret; 
0x50533992  # or al, 0x83; les ecx, ptr [ebx + edi]; ret; 
0x5052daee  # or al, 0x83; les ecx, ptr [esi + ebx*2]; pop ebp; ret; 
0x50523b64  # or al, 0x83; ret; 
0x50536019  # or al, 0x83; shl byte ptr [eax], 0x50; call dword ptr [0x5054a020]; pop ebp; ret; 
0x5051741d  # or al, 0x85; ror byte ptr [edi], 0x84; ret 0xfffe; 
0x5051d058  # or al, 0x85; sal byte ptr [ebp + 2], 0xc9; ret; 
0x50526ff9  # or al, 0x85; sal byte ptr [edx + ecx - 0x48], 0xc0; ret 0x5054; 
0x50524c50  # or al, 0x85; sal byte ptr [esp + eax - 0x75], cl; ret 0x9eb; 
0x50525e2e  # or al, 0x88; dec dword ptr [ecx - 0x7b]; leave; jg 0x25e2d; pop esi; ret; 
0x5051cd24  # or al, 0x88; inc esp; adc edi, edi; pop edi; ret; 
0x5051cd77  # or al, 0x88; inc esp; adc edi, edi; ret; 
0x50525140  # or al, 0x89; aaa; mov eax, edi; pop edi; ret; 
0x505333f7  # or al, 0x89; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x5050ddc1  # or al, 0x89; cmp ebx, dword ptr [esi + 0x5b]; pop edi; leave; ret 8; 
0x505219e7  # or al, 0x89; jle 0x21a3b; pop edi; pop esi; leave; ret; 
0x505312a2  # or al, 0x89; jle 0x31306; pop edi; pop esi; leave; ret; 
0x50536bcc  # or al, 0x89; jle 0x36bdc; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50516b1f  # or al, 0x89; mov byte ptr [ecx + eax], bl; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50516a48  # or al, 0x89; push es; pop esi; ret; 
0x5051cbb5  # or al, 0x89; push es; ret; 
0x50544590  # or al, 0x89; sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x5053a869  # or al, 0x8b; add byte ptr [ebx], al; ret; 
0x5051561f  # or al, 0x8b; call 0x14981; pop edi; pop esi; pop ebx; ret; 
0x50516e8d  # or al, 0x8b; call 0x14981; pop esi; pop ebx; leave; ret; 
0x50545ccd  # or al, 0x8b; dec ebp; or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5053e413  # or al, 0x8b; dec ebp; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x5051fe50  # or al, 0x8b; dec ebp; sbb byte ptr [ebx], al; ret 0x4589; 
0x5051c8b7  # or al, 0x8b; dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x50539d3e  # or al, 0x8b; inc ebp; or byte ptr [ebx - 0x1a740383], cl; pop ebp; ret; 
0x5050dcc2  # or al, 0x8b; inc ebp; or byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 8; 
0x50531182  # or al, 0x8b; inc ecx; adc byte ptr [ebx], al; ret 0x558b; 
0x50536376  # or al, 0x8b; pop ebp; or byte ptr [edx + 4], ch; call 0x38c24; pop ecx; ret; 
0x5051cd1f  # or al, 0x8b; push cs; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x5051cd72  # or al, 0x8b; push cs; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; ret; 
0x5051ce22  # or al, 0x8b; push ecx; add al, 0x2b; rol byte ptr [ebx + 0x37304fa], 1; xor eax, eax; ret; 
0x505091a0  # or al, 0x8b; ret 0x708b; 
0x5053139f  # or al, 0x8b; ret 0xe9c3; 
0x50545d91  # or al, 0x8b; ret 0xf633; 
0x50507410  # or al, 0x8b; ret; 
0x5050d4f2  # or al, 0x8d; mov ds, eax; add byte ptr [eax], al; add byte ptr [ebx + 0x5e118901], cl; ret 8; 
0x5052642d  # or al, 0xa3; sbb cl, ah; push ebp; push eax; ret; 
0x5050cd4f  # or al, 0xb; ret; 
0x5053b978  # or al, 0xc7; inc esi; adc byte ptr [ebx], cl; add byte ptr [eax], al; add bl, ch; ret 0xff8b; 
0x50515153  # or al, 0xc9; ret; 
0x50504d67  # or al, 0xd6; add al, byte ptr [eax]; leave; ret 4; 
0x50502715  # or al, 0xe8; adc eax, 0x3b000449; ret; 
0x5052478d  # or al, 0xe8; adc eax, 0x59fffffb; pop ecx; ret; 
0x50502608  # or al, 0xe8; and cl, byte ptr [edx + 4]; add byte ptr [ebx], bh; ret; 
0x5050f4d8  # or al, 0xe8; cdq; add al, byte ptr cs:[eax]; leave; ret; 
0x50537555  # or al, 0xe8; leave; push ss; add byte ptr [eax], al; pop ecx; ret; 
0x50522f3a  # or al, 0xe8; mov byte ptr [edx], ch; add byte ptr [eax], al; add esp, 0xc; ret; 
0x505050bc  # or al, 0xe8; ret 0xffc5; 
0x5052035c  # or al, 0xe9; daa; add dword ptr [eax], eax; add byte ptr [ebx - 0x7af0fd07], al; ret 0xfffe; 
0x5051e077  # or al, 0xeb; add cl, byte ptr [ebx + 0x5e5f5dc5]; ret; 
0x5053d474  # or al, 0xf6; ret 0x7501; 
0x50534258  # or al, 0xf7; ret 0; 
0x5051433e  # or al, 0xff; adc eax, 0x5054a03c; pop ebp; ret 0xc; 
0x50514335  # or al, 0xff; adc eax, 0x5054a04c; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x50536074  # or al, 0xff; jg 0x36077; inc dword ptr [ebx - 0x17aeef3f]; mov byte ptr [0x5900002b], al; pop ebp; ret; 
0x50515117  # or al, 0xff; jne 0x15123; call dword ptr [esi + 4]; add esp, 0x18; leave; ret; 
0x5052df9f  # or al, 0xff; jne 0x2dfab; call 0x1f473; add esp, 0x14; pop ebp; ret; 
0x50536f90  # or al, 0xff; jne 0x36f9c; call 0x36ec3; add esp, 0xc; pop ebp; ret; 
0x5053a458  # or al, 0xff; jne 0x3a464; call 0x3a229; add esp, 0xc; pop ebp; ret; 
0x5053a52b  # or al, 0xff; jne 0x3a537; call 0x3a466; add esp, 0xc; pop ebp; ret; 
0x5053b745  # or al, 0xff; jne 0x3b751; call 0x3b66f; add esp, 0xc; pop ebp; ret; 
0x5053e192  # or al, 0xff; jne 0x3e19e; call 0x3e0d0; add esp, 0x14; pop ebp; ret; 
0x5053e42a  # or al, 0xff; jne 0x3e436; call 0x3e3dc; add esp, 0x10; pop ebp; ret; 
0x5053e6ce  # or al, 0xff; jne 0x3e6da; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed1d  # or al, 0xff; jne 0x3ed29; call 0x3eb46; add esp, 0x14; pop ebp; ret; 
0x5053ed75  # or al, 0xff; jne 0x3ed81; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed98  # or al, 0xff; jne 0x3eda4; call 0x3ecfb; add esp, 0x1c; pop ebp; ret; 
0x5053fc85  # or al, 0xff; jne 0x3fc91; call 0x3fbfb; add esp, 0x10; pop ebp; ret; 
0x505428b9  # or al, 0xff; jne 0x428c5; call 0x42796; add esp, 0x10; pop ebp; ret; 
0x50543145  # or al, 0xff; jne 0x43151; call 0x42fca; add esp, 0x14; pop ebp; ret; 
0x5054338a  # or al, 0xff; jne 0x43396; call 0x43153; add esp, 0x10; pop ebp; ret; 
0x5054350e  # or al, 0xff; jne 0x4351a; call 0x43398; add esp, 0x10; pop ebp; ret; 
0x5054604e  # or al, 0xff; jne 0x4605a; call 0x45f89; add esp, 0xc; pop ebp; ret; 
0x50505abe  # or al, 0xff; jne 0x5aca; call 0x51b3; pop ebp; ret 0x1c; 
0x50531796  # or al, 0xff; jo 0x317a6; call 0x2f672; add esp, 0xc; ret; 
0x50502efd  # or al, 1; add byte ptr [eax], al; mov dword ptr [eax + 0x110], edx; pop esi; or eax, 0xffffffff; ret 0xc; 
0x50516a58  # or al, 1; add byte ptr [eax], al; ret; 
0x50515822  # or al, 1; add dword ptr [eax], eax; pop ecx; pop ecx; leave; ret; 
0x505263f3  # or al, 1; xor eax, 0x5055d440; pop esi; pop ebx; ret; 
0x50535e52  # or al, 2; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x5050e586  # or al, 3; ret 0x4689; 
0x5053117a  # or al, 3; ret 0x558b; 
0x50538594  # or al, 3; ret 0xc83b; 
0x50507d4e  # or al, 3; ret; 
0x5051ce5b  # or al, 4; xor eax, eax; inc eax; pop esi; ret; 
0x5051fad4  # or al, 8; add dword ptr [esi + 0x10], -8; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x5050cd89  # or al, byte ptr [eax]; add byte ptr [eax - 0x17], dl; ret; 
0x5050dd74  # or al, byte ptr [eax]; add byte ptr [eax - 0x797503bb], cl; ret 0xa; 
0x505033b6  # or al, byte ptr [eax]; add byte ptr [ebx - 0x15], dl; ret 0x1468; 
0x505033de  # or al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0x10; 
0x50535fe6  # or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x5054a020; pop esi; pop ebp; ret; 
0x50531442  # or al, byte ptr [ebx]; inc dword ptr [eax]; ret; 
0x50548e3c  # or al, byte ptr [ecx - 0x77]; dec ebp; sbb al, 0x8a; add dword ptr [edx], edi; ret; 
0x50516621  # or al, ch; aas; arpl word ptr [eax], ax; add byte ptr [ebx - 0x3b7cabb9], cl; sbb byte ptr [ebx], bh; ret; 
0x50537ae8  # or al, ch; adc byte ptr [edx], dl; add byte ptr [eax], al; pop ecx; ret; 
0x50511374  # or al, ch; adc eax, 0x59000058; pop ecx; ret 8; 
0x5053e6d1  # or al, ch; adc eax, 0x83ffffff; les ebx, ptr [eax]; pop ebp; ret; 
0x5051cd88  # or al, ch; cmp eax, 0x59ffffff; pop esi; ret; 
0x5051cb93  # or al, ch; cmp esi, 0x5959ffff; ret; 
0x505148a1  # or al, ch; dec ecx; add dword ptr [eax], eax; pop ecx; pop ecx; ret; 
0x50537cdd  # or al, ch; inc ecx; sldt word ptr [eax]; pop ecx; ret; 
0x5053aad4  # or al, ch; js 0x3ab4d; add byte ptr [eax], al; pop ecx; ret; 
0x505423a9  # or al, ch; mov dword ptr [0x59fffffc], eax; ret; 
0x50536f7f  # or al, ch; mov eax, dword ptr [0x59fffff0]; ret; 
0x5053a21f  # or al, ch; mov ecx, 0x59ffffff; pop ecx; pop ebp; ret; 
0x5053c1b0  # or al, ch; pushfd; pop esi; add byte ptr [eax], al; pop ecx; ret; 
0x5051d1b7  # or al, ch; rcr byte ptr [ecx - 0x950001], cl; push dword ptr [esp + 0x10]; call 0x16b67; add esp, 0x10; ret; 
0x50521dc2  # or al, ch; ret 0xffeb; 
0x5050ab17  # or al, ch; ret 0xfffd; 
0x5053313e  # or al, ch; ret 0xfffe; 
0x5050985b  # or al, ch; ret; 
0x50532db7  # or al, ch; sbb bl, byte ptr [eax]; add byte ptr [eax], al; add esp, 0xc; pop ebp; ret; 
0x50537af1  # or al, ch; sub eax, 0x59000011; ret; 
0x5053a7a4  # or al, ch; test al, 0x78; add byte ptr [eax], al; pop ecx; ret; 
0x5053e42d  # or al, ch; test eax, 0x83ffffff; les edx, ptr [eax]; pop ebp; ret; 
0x50514017  # or al, ch; xlatb; sub dword ptr [eax], eax; add byte ptr [ebx], dh; rol byte ptr [eax + 0x59], 0x59; ret 4; 
0x5052f3d1  # or bh, bh; adc eax, 0x5054a13c; mov dword ptr [esi + 0x18], 1; ret; 
0x50524e99  # or bh, bh; call 0x24e19; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x50541b68  # or bh, bh; dec ecx; ret; 
0x50544c60  # or bh, bh; inc ebp; mov ah, 0x2a; ret; 
0x50511370  # or bh, bh; je 0x11398; or al, ch; adc eax, 0x59000058; pop ecx; ret 8; 
0x50524e51  # or bh, bh; je 0x24e79; or byte ptr [edx], ch; call 0x24e19; add esp, 0xc; ret; 
0x505266fe  # or bh, bh; je 0x26726; or al, 0x50; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x50503731  # or bh, bh; je 0x3759; or byte ptr [edx], ch; call 0x33e8; ret 8; 
0x50503743  # or bh, bh; je 0x376b; or byte ptr [edx], ch; call 0x35ee; ret 8; 
0x50516844  # or bh, bh; jo 0x16858; call 0x1f32c; pop ecx; ret; 
0x505271a9  # or bh, bh; jo 0x271f1; call 0x1a725; pop ecx; pop ecx; ret; 
0x5053d7e0  # or bh, bh; mov eax, esi; pop edi; pop esi; ret; 
0x50524370  # or bh, bh; push edi; add al, 0x3b; ret; 
0x5051511a  # or bh, bh; push esi; add al, 0x83; les ebx, ptr [eax]; leave; ret; 
0x50537375  # or bh, bh; ror byte ptr [ecx + 0x458b0845], 1; or byte ptr [esi + 0x5d], bl; ret; 
0x50541a7a  # or bh, bh; ror dword ptr [ebx + 0x75f73bf0], cl; ret; 
0x50514ee3  # or bh, bh; xchg dword ptr [eax], esi; add al, byte ptr [eax]; add bl, ch; ret 0x87c7; 
0x5053910e  # or bh, byte ptr [0xc000001d]; je 0x39119; xor eax, eax; ret; 
0x505462c9  # or bh, byte ptr [0xc000001d]; je 0x462d4; xor eax, eax; ret; 
0x505454cb  # or bh, byte ptr [ebx]; ret 0x472; 
0x50534019  # or bh, byte ptr [ebx]; ret; 
0x50545c10  # or bh, byte ptr [ebx]; sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x50532e6f  # or bh, dh; ret 3; 
0x505490ed  # or bl, byte ptr [ebx + 0x2b]; ret 0xf799; 
0x50548f6a  # or bl, byte ptr [ecx + 0x2b]; ret 0xf799; 
0x5051fcca  # or bl, byte ptr [ecx + 0x307e283]; ret 0xf8c1; 
0x505364a4  # or bl, ch; or ch, byte ptr [edx + 4]; call 0x38c24; pop ecx; ret; 
0x5051716e  # or byte ptr [0x840f0000], al; xor eax, 0x33000004; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x50548e68  # or byte ptr [eax + 0x3b484919], cl; ret; 
0x50516803  # or byte ptr [eax + 0x48], cl; jne 0x16828; push 0x38; pop eax; ret; 
0x5051514a  # or byte ptr [eax + 0x50fffe4d], cl; add al, 0x83; les ecx, ptr [ecx + ecx*8]; ret; 
0x50523556  # or byte ptr [eax + 0x76ff0247], cl; or al, ch; ret; 
0x505287b4  # or byte ptr [eax + eax + 0x1f7c8d00], bl; add al, 0x8b; popfd; push 0x8bffffff; ret; 
0x505074a9  # or byte ptr [eax - 0x75000000], al; xchg byte ptr [eax + 0x33000038], cl; sar byte ptr [ebx], cl; ret 0x1674; 
0x50541d34  # or byte ptr [eax - 0x76fc14e1], cl; pop ebp; or byte ptr [ebx], bh; ret; 
0x5050119b  # or byte ptr [eax - 1], dl; adc eax, 0x5054a030; ret; 
0x505064f7  # or byte ptr [eax - 1], dl; adc eax, 0x5054a07c; ret 4; 
0x5050653f  # or byte ptr [eax - 1], dl; adc eax, 0x5054a07c; ret 8; 
0x5051cb8e  # or byte ptr [eax - 1], dl; je 0x1cbb7; or al, ch; cmp esi, 0x5959ffff; ret; 
0x5052f19a  # or byte ptr [eax - 1], dl; push ebp; or byte ptr [ecx + 0x59], bl; leave; ret; 
0x5052db1e  # or byte ptr [eax - 1], dl; push ecx; adc al, 0x59; pop ecx; ret; 
0x5052ef62  # or byte ptr [eax - 1], dl; push ecx; adc byte ptr [ecx + 0x59], bl; pop esi; ret; 
0x5052dd31  # or byte ptr [eax - 1], dl; push ecx; adc byte ptr [ecx + 0x59], bl; ret; 
0x5052ef43  # or byte ptr [eax - 1], dl; push ecx; add al, 0x83; les ecx, ptr [esi + ebx*2]; ret; 
0x5052dd05  # or byte ptr [eax - 1], dl; push ecx; or al, 0x59; pop ecx; ret; 
0x5050ab42  # or byte ptr [eax], 1; add byte ptr [eax], al; ret 4; 
0x50516a23  # or byte ptr [eax], 1; add byte ptr [eax], al; ret; 
0x505421a9  # or byte ptr [eax], al; add byte ptr [ebx], bh; ret 0x1773; 
0x50545bb1  # or byte ptr [eax], al; add dh, dh; ret 0x7401; 
0x5053f05b  # or byte ptr [eax], al; jg 0x3f034; pop esi; pop ebx; pop ebp; ret; 
0x5051ca88  # or byte ptr [eax], al; pop esi; ret; 
0x5053deac  # or byte ptr [ebp + 0x5e5f0442], cl; pop ebx; leave; ret; 
0x50527967  # or byte ptr [ebp + 0xa], bh; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], 1; pop esi; ret; 
0x5054361f  # or byte ptr [ebp + 5], dh; mov eax, 1; ret; 
0x5053fe94  # or byte ptr [ebp + 6], dh; mov eax, dword ptr [ebp - 0x30]; mov dword ptr [edi + 0x64], eax; xor eax, eax; call 0x38721; ret; 
0x50522901  # or byte ptr [ebp + ecx + 0x39], dh; push esi; or al, 0x74; or byte ptr [ebx], bh; ret 0x474; 
0x5051fadd  # or byte ptr [ebp - 0x39], bh; ret; 
0x50533935  # or byte ptr [ebp - 0x67c40b8], cl; sbb dword ptr [edi + 0x11], esi; add eax, 0x20; pop ebp; ret; 
0x5051a4be  # or byte ptr [ebp - 0x74a80001], ch; ret; 
0x5051c8b3  # or byte ptr [ebp - 0x74f3febc], cl; dec esp; and al, 8; mov dword ptr [ecx], eax; ret; 
0x50516869  # or byte ptr [ebp - 0x74f98a0a], al; inc esp; and al, 0xc; pop esi; ret; 
0x50545cd0  # or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5053145f  # or byte ptr [ebx + 0x270c87], cl; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x50522f63  # or byte ptr [ebx + 0x2b], dl; ret; 
0x50541863  # or byte ptr [ebx + 0x33b5ebf1], cl; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50538e42  # or byte ptr [ebx + 0x33c1ebf1], cl; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50544048  # or byte ptr [ebx + 0x374fef8], al; push eax; call esi; pop esi; ret; 
0x50524dae  # or byte ptr [ebx + 0x3b078b3f], cl; ret 0xde75; 
0x5054121f  # or byte ptr [ebx + 0x3dd23301], cl; add eax, 0xfc00000; xchg esp, eax; ret 0xc28b; 
0x5053ab4b  # or byte ptr [ebx + 0x3e083c1], 0x2b; ret; 
0x50543eaa  # or byte ptr [ebx + 0x46ae475], cl; call 0x38c24; pop ecx; ret; 
0x5050ab96  # or byte ptr [ebx + 0x4de9ffc8], al; add al, byte ptr [eax]; add byte ptr [ebx + 0x3b571045], cl; ret; 
0x50538a2c  # or byte ptr [ebx + 0x5055d6a0], ah; pop ebp; ret; 
0x5053e0a0  # or byte ptr [ebx + 0x5055de7c], ah; pop ebp; ret; 
0x5054129e  # or byte ptr [ebx + 0x5055de9c], ah; pop ebp; ret; 
0x505412ad  # or byte ptr [ebx + 0x5055dea8], ah; pop ebp; ret; 
0x505412bc  # or byte ptr [ebx + 0x5055deac], ah; pop ebp; ret; 
0x5052db1c  # or byte ptr [ebx + 0x51ff5008], cl; adc al, 0x59; pop ecx; ret; 
0x5052dd2f  # or byte ptr [ebx + 0x51ff5008], cl; adc byte ptr [ecx + 0x59], bl; ret; 
0x5052dd03  # or byte ptr [ebx + 0x51ff5008], cl; or al, 0x59; pop ecx; ret; 
0x50532b82  # or byte ptr [ebx + 0x5568300d], cl; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d8c  # or byte ptr [ebx + 0x5568300d], cl; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c87  # or byte ptr [ebx + 0x5568300d], cl; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532c03  # or byte ptr [ebx + 0x5568300d], cl; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 4; pop ebp; ret; 
0x50532d08  # or byte ptr [ebx + 0x5568300d], cl; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 8; pop ebp; ret; 
0x505162b6  # or byte ptr [ebx + 0x5b5e20c4], al; pop ebp; ret; 
0x505237a1  # or byte ptr [ebx + 0x5b5e5fc7], cl; leave; ret; 
0x505499fb  # or byte ptr [ebx + 0x5d5b0cc4], al; ret; 
0x5053737a  # or byte ptr [ebx + 0x5d5e0845], cl; ret; 
0x5052dcda  # or byte ptr [ebx + 0x5d5e10c4], al; ret; 
0x505162c1  # or byte ptr [ebx + 0x74ff18c0], al; and al, 8; push eax; call 0x1ca8c; add esp, 0xc; ret; 
0x50542145  # or byte ptr [ebx + 0x758bd87d], 0xe0; push 0xa; call 0x38c24; pop ecx; ret; 
0x5052793e  # or byte ptr [ebx + 0x75c08506], cl; add eax, 0x5e044621; ret; 
0x5053988f  # or byte ptr [ebx + 0xbc86], cl; add byte ptr [ebx], dh; fist dword ptr [edi + 0x3b]; ret; 
0x50545c4b  # or byte ptr [ebx + eax - 0x7d], dh; retf 0xf604; ret; 
0x50511598  # or byte ptr [ebx - 0x17cf0100], cl; dec esi; and eax, 0x59590002; ret; 
0x50539d41  # or byte ptr [ebx - 0x1a740383], cl; pop ebp; ret; 
0x505360f4  # or byte ptr [ebx - 0x36a0ef3c], al; ret; 
0x5052272e  # or byte ptr [ebx - 0x36a40fbb], cl; ret; 
0x505227a5  # or byte ptr [ebx - 0x36a4a13a], cl; ret; 
0x50542da7  # or byte ptr [ebx - 0x37], bl; ret; 
0x5052f508  # or byte ptr [ebx - 0x37c4f7b7], cl; jbe 0x2f514; or eax, 0xffffffff; ret; 
0x5053fd58  # or byte ptr [ebx - 0x74a514fa], cl; ret; 
0x5052bad0  # or byte ptr [ebx - 0x75], dl; pop esp; and al, 8; call 0x2b351; pop ebx; ret; 
0x5052bafd  # or byte ptr [ebx - 0x75], dl; pop esp; and al, 8; call 0x2b4ff; pop ebx; ret; 
0x505218f5  # or byte ptr [ebx - 0x76a0f3bf], cl; xor dword ptr [ebx], eax; ret; 
0x50543574  # or byte ptr [ebx - 0x76efdbac], cl; add bh, byte ptr [eax + 3]; ret; 
0x5051fad5  # or byte ptr [ebx - 0x7c07efba], al; jle 0x1faed; or byte ptr [ebp - 0x39], bh; ret; 
0x5052481f  # or byte ptr [ebx - 0x7c2dccff], cl; in al, dx; or al, 0x3b; ret 0x475; 
0x50532e6b  # or byte ptr [ebx - 0x8f7dbac], cl; ret 3; 
0x505259e3  # or byte ptr [ebx], al; ret 0x4943; 
0x5053116f  # or byte ptr [ebx], al; ret 0x558b; 
0x50524ff5  # or byte ptr [ebx], al; ret; 
0x5051e866  # or byte ptr [ebx], bh; inc esp; and al, 4; jbe 0x1e871; or eax, 0xffffffff; ret; 
0x50520183  # or byte ptr [ebx], bh; into; jle 0x20165; or eax, 0xffffffff; pop esi; ret; 
0x50522908  # or byte ptr [ebx], bh; ret 0x474; 
0x5053e89a  # or byte ptr [ebx], bh; ret 0x860f; 
0x50505bfd  # or byte ptr [ebx], bh; ret; 
0x50509342  # or byte ptr [ebx], ch; ret; 
0x5052a261  # or byte ptr [ebx], cl; ret 0x558d; 
0x5052a15b  # or byte ptr [ebx], cl; ret 0xb60f; 
0x50527377  # or byte ptr [ebx], cl; ret 0xc183; 
0x5052d2a4  # or byte ptr [ebx], cl; ret 0xd68b; 
0x5052d235  # or byte ptr [ebx], cl; ret 0xe0c1; 
0x5052d2cd  # or byte ptr [ebx], cl; ret 0xf08b; 
0x5051c81f  # or byte ptr [ebx], cl; ret 0xff83; 
0x505202a3  # or byte ptr [ebx], cl; ret; 
0x50545f9f  # or byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x505427bd  # or byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x505297b5  # or byte ptr [ebx], dh; ret 0xff25; 
0x50528f48  # or byte ptr [ebx], dh; ret; 
0x5052d139  # or byte ptr [ecx + 0x303e283], bl; ret 0xf8c1; 
0x50521d73  # or byte ptr [ecx + 0x307e283], bl; ret 0xd88b; 
0x505236e6  # or byte ptr [ecx + 0x307e283], bl; ret 0xf8c1; 
0x505364ed  # or byte ptr [ecx + 0x4589e045], cl; in al, 0x33; fstp xword ptr [ebx]; ret; 
0x5052f269  # or byte ptr [ecx + 0x59], bl; call 0x2f141; leave; ret; 
0x5052f19e  # or byte ptr [ecx + 0x59], bl; leave; ret; 
0x5053ff42  # or byte ptr [ecx + 0x5d5e0446], cl; ret; 
0x5053c3d5  # or byte ptr [ecx + 0x75], bl; push es; and eax, 0xffffffdf; sub eax, 7; pop ebp; ret; 
0x5053e416  # or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x5052d2bb  # or byte ptr [ecx + 0xffe6], al; add byte ptr [ebx], cl; ret 0xb60f; 
0x50541068  # or byte ptr [ecx - 0x15], bl; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5050ab43  # or byte ptr [ecx], al; add byte ptr [eax], al; ret 4; 
0x50516a24  # or byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x5050ab6d  # or byte ptr [ecx], al; add byte ptr [eax], al; xor eax, eax; ret 8; 
0x50521aca  # or byte ptr [ecx], al; add cl, cl; ret; 
0x50516b4c  # or byte ptr [ecx], al; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x50535e67  # or byte ptr [ecx], al; mov eax, dword ptr [ebp - 0x1c]; je 0x35e71; mov eax, dword ptr [ebp - 0x24]; call 0x38721; ret; 
0x5050a238  # or byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0xc; 
0x5050dcc5  # or byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 8; 
0x505462f5  # or byte ptr [edi + 0x855ae0f], bh; call 0x38721; ret; 
0x505156fd  # or byte ptr [edi - 0x77], bl; jb 0x1571a; or eax, ecx; pop esi; ret; 
0x5052a823  # or byte ptr [edi], cl; mov dh, 0x41; add al, 0xf; mov dh, 0x51; add eax, 0xb08e0c1; ret 0xb60f; 
0x50546e04  # or byte ptr [edi], cl; mov dh, 0xc0; shl ecx, 8; or eax, ecx; ret 4; 
0x505375e3  # or byte ptr [edx + 0x10], ch; call 0x37a7b; pop ecx; mov eax, esi; pop esi; ret; 
0x505393f2  # or byte ptr [edx + 0x20], ch; call 0x37a7b; pop ecx; mov eax, esi; call 0x38721; ret; 
0x5052d815  # or byte ptr [edx + 0x4888ff4d], cl; add dword ptr [edi - 0x37], ebx; ret; 
0x5052f861  # or byte ptr [edx + 0x75], cl; out dx, al; pop esi; ret; 
0x50537715  # or byte ptr [edx + 0xc], ch; call 0x38c24; pop ecx; ret; 
0x5053754a  # or byte ptr [edx + 0xd], ch; call 0x38c24; pop ecx; ret; 
0x50536379  # or byte ptr [edx + 4], ch; call 0x38c24; pop ecx; ret; 
0x50537cdb  # or byte ptr [edx + 8], ch; call 0x38c24; pop ecx; ret; 
0x5050653d  # or byte ptr [edx + 8], ch; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x50545b9b  # or byte ptr [edx + eax + 0xb], dh; ret; 
0x50537b10  # or byte ptr [edx - 0x10], dh; pop esi; pop ebp; ret; 
0x50511331  # or byte ptr [edx - 0x20], dh; xor eax, eax; pop esi; ret 4; 
0x5050e51f  # or byte ptr [edx - 0x3e08ac82], al; rol byte ptr [esi], 3; ret; 
0x50524e55  # or byte ptr [edx], ch; call 0x24e19; add esp, 0xc; ret; 
0x50503735  # or byte ptr [edx], ch; call 0x33e8; ret 8; 
0x5053416b  # or byte ptr [edx], ch; call 0x33f1d; pop ecx; pop ebp; ret; 
0x50503747  # or byte ptr [edx], ch; call 0x35ee; ret 8; 
0x5053fe6e  # or byte ptr [edx], ch; call 0x38c24; pop ecx; ret; 
0x50541382  # or byte ptr [edx], ch; call 0x41324; add esp, 0x10; pop ebp; ret; 
0x50533257  # or byte ptr [edx], ch; push dword ptr [ebp + 0x10]; call 0x33209; mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x50506561  # or byte ptr [edx], ch; push eax; call dword ptr [0x5054a084]; ret 8; 
0x50526de4  # or byte ptr [esi + 0x3b], dl; ret; 
0x5053737d  # or byte ptr [esi + 0x5d], bl; ret; 
0x50532546  # or byte ptr [esi + 0x5f], bl; leave; ret; 
0x505434d1  # or byte ptr [esi + 0xb], ah; ret 0xf46; 
0x50527837  # or byte ptr [esi + 4], dh; or eax, 0xffffffff; ret; 
0x505117fc  # or byte ptr [esi - 0x18], dl; int1; ret; 
0x505116af  # or byte ptr [esi - 0x18], dl; lds eax, ptr ds:[eax]; add byte ptr [ebx + 0x458928c4], al; adc byte ptr [ebx], bh; ret; 
0x505462f4  # or byte ptr gs:[edi + 0x855ae0f], bh; call 0x38721; ret; 
0x5051605b  # or ch, al; call 0x6001605f; pop esi; leave; ret; 
0x5051a9f6  # or ch, al; ret 0xffa9; 
0x50543c34  # or ch, al; xor eax, 0xa3ffffff; push 0x3b5055d5; ret; 
0x505364a6  # or ch, byte ptr [edx + 4]; call 0x38c24; pop ecx; ret; 
0x50532db2  # or ch, byte ptr [edx]; push dword ptr [ebp + 8]; call 0x345d7; add esp, 0xc; pop ebp; ret; 
0x50547c86  # or cl, ah; push ebp; push eax; call dword ptr [0x5054a18c]; ret 4; 
0x50547c7c  # or cl, ah; push ebp; push eax; ret; 
0x50546dc4  # or cl, al; ljmp 0xb60f:0xc0b70f08; ror byte ptr [ebx], cl; ret 0xe9c1; 
0x50516b48  # or cl, byte ptr [ebx + 0x108244c]; mov byte ptr [ecx + eax], ah; add byte ptr [eax], al; ret; 
0x5052dc23  # or cl, byte ptr [ebx + 0x18b0849]; push ecx; call dword ptr [eax + 0x20]; pop ecx; ret; 
0x50516abe  # or cl, byte ptr [ebx - 0x76f7dbb4]; mov byte ptr [ecx + eax], dl; add byte ptr [eax], al; ret; 
0x5053c3e7  # or cl, byte ptr [edi]; mov dh, 1; inc ecx; mov dword ptr [edx], ecx; ret; 
0x50548f2a  # or cl, byte ptr [edi]; mov esi, 0x2448dc0; ror byte ptr [ecx + 0x458b2045], 1; sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x50534390  # or dh, al; inc edi; add al, byte ptr [eax]; pop edi; ret; 
0x50520e78  # or dh, bh; fdivr qword ptr [edx + 0xc40c798]; jbe 0x20ed6; xor dl, byte ptr [eax]; ret; 
0x505096f7  # or dh, bh; fdivr qword ptr [edx + 0xc40c798]; jbe 0x9755; xor dl, byte ptr [eax]; ret; 
0x50524f99  # or dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x50545b0e  # or dh, dh; ret; 
0x5050e9a3  # or dl, byte ptr [esi - 0x18]; fisubr dword ptr [edi + edi*8]; inc dword ptr [ebp - 0x74fb8a40]; ret; 
0x50531b27  # or dword ptr [eax + 0x51], edx; call 0x386ba; pop ecx; pop ecx; ret; 
0x50538f67  # or dword ptr [eax + eax], eax; sar bh, 0x15; sub byte ptr [ecx - 0xafafac], ah; adc eax, 0x5054a1e4; leave; ret; 
0x50525e2d  # or dword ptr [eax + ecx*4], 0xffffffff; dec ecx; test ecx, ecx; jg 0x25e2d; pop esi; ret; 
0x5052b417  # or dword ptr [eax + edx], 0; pop esi; leave; ret; 
0x5053d7df  # or dword ptr [eax], 0xffffffff; mov eax, esi; pop edi; pop esi; ret; 
0x50532361  # or dword ptr [eax], eax; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0x38721; ret; 
0x50541f57  # or dword ptr [eax], eax; add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x505428db  # or dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x50525b10  # or dword ptr [eax], edx; pop esi; ret; 
0x5053c3e5  # or dword ptr [ebx + 0x1b60f0a], ecx; inc ecx; mov dword ptr [edx], ecx; ret; 
0x5053d415  # or dword ptr [ebx - 0x3ec4eb40], eax; jb 0x3d408; xor eax, eax; pop ebp; ret; 
0x505260e4  # or dword ptr [ecx + 0x41038b02], 0xffffff83; ret 0x3b04; 
0x5051d774  # or dword ptr [ecx], edi; dec eax; xor byte ptr [ebp + 4], dh; xor eax, eax; inc eax; ret; 
0x5053b28b  # or dword ptr [edi], 0xffffffff; call 0x38721; ret; 
0x5051d0c9  # or dword ptr [edi], ecx; mov dh, 0x45; dec dword ptr [ecx - 0x3974efba]; pop esi; leave; ret; 
0x50501108  # or dword ptr [edx - 1], ebp; push esi; call dword ptr [0x5054a18c]; pop edi; pop esi; ret; 
0x50526759  # or dword ptr [edx - 1], esp; inc dword ptr [ebx - 0x597cef3c]; sub al, 1; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x50537781  # or dword ptr [edx], ebp; push eax; call dword ptr [0x5054a02c]; pop ebp; ret; 
0x5050af8c  # or dword ptr [esi + 0x24], 0x49; pop ebx; pop esi; pop edi; ret 8; 
0x50515c2c  # or dword ptr [esi + 0x48], 0x40; pop edi; pop ebp; ret; 
0x5053efea  # or dword ptr [esi], eax; ret; 
0x50545b7f  # or eax, 0x1000; ret; 
0x50516552  # or eax, 0x3b30468b; ret; 
0x50519972  # or eax, 0x3b30478b; ret; 
0x50545c1b  # or eax, 0x40; ret; 
0x50506511  # or eax, 0x42474ff; push 0; push eax; call dword ptr [0x5054a084]; ret 4; 
0x50532b84  # or eax, 0x50556830; movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d8e  # or eax, 0x50556830; movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c89  # or eax, 0x50556830; movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532c05  # or eax, 0x50556830; movzx eax, word ptr [ecx + eax*2]; and eax, 4; pop ebp; ret; 
0x50526435  # or eax, 0x5055d448; ret; 
0x50522903  # or eax, 0x740c5639; or byte ptr [ebx], bh; ret 0x474; 
0x50523a16  # or eax, 0x74145639; or byte ptr [ebx], bh; ret 0x474; 
0x50545f2a  # or eax, 0x80000000; pop edi; pop esi; pop ebx; leave; ret; 
0x50545c15  # or eax, 0x8000; ret; 
0x50545c1f  # or eax, 0x8040; ret; 
0x5050655d  # or eax, 0x82474ff; push 0; push eax; call dword ptr [0x5054a084]; ret 8; 
0x50520155  # or eax, 0x83ffffc8; les ecx, ptr [esi + ebx*2]; ret; 
0x5051c873  # or eax, 0x8a3fe083; add al, 0xb5; push esp; push eax; mov byte ptr [ecx + 3], al; ret; 
0x50532faa  # or eax, 0xc683068a; add dword ptr [edx], edi; ret 0xa74; 
0x50537fa9  # or eax, 0xffffffff; call 0x38721; ret; 
0x5051e2c5  # or eax, 0xffffffff; leave; ret; 
0x5054703c  # or eax, 0xffffffff; pop ebp; ret 0x10; 
0x50546d72  # or eax, 0xffffffff; pop ebp; ret 0x14; 
0x505476ab  # or eax, 0xffffffff; pop ebp; ret 0x24; 
0x5050c81e  # or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546fa2  # or eax, 0xffffffff; pop ebp; ret 8; 
0x5050136c  # or eax, 0xffffffff; pop ebp; ret; 
0x505024ce  # or eax, 0xffffffff; pop ebx; pop edi; pop esi; leave; ret 0xc; 
0x505386b2  # or eax, 0xffffffff; pop ebx; pop edi; pop esi; leave; ret; 
0x50509898  # or eax, 0xffffffff; pop ebx; pop edi; pop esi; pop ebp; ret 8; 
0x50537171  # or eax, 0xffffffff; pop ebx; pop edi; pop esi; pop ebp; ret; 
0x50501abb  # or eax, 0xffffffff; pop ebx; pop esi; pop ebp; ret 0xc; 
0x5051fff5  # or eax, 0xffffffff; pop ebx; ret; 
0x5051daea  # or eax, 0xffffffff; pop edi; leave; ret; 
0x50509fd4  # or eax, 0xffffffff; pop edi; pop ebx; pop esi; pop ebp; ret 0xc; 
0x5050a58f  # or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret 0xc; 
0x5053e2c4  # or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x50504bfb  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret 0x10; 
0x5050ade8  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret 0x14; 
0x50506195  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret 0xc; 
0x50546f3b  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret 4; 
0x5051dd4f  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret; 
0x50509168  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x50541f33  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50502f8b  # or eax, 0xffffffff; pop edi; pop esi; ret 8; 
0x505170fb  # or eax, 0xffffffff; pop edi; pop esi; ret; 
0x5050a677  # or eax, 0xffffffff; pop esi; pop ebp; ret 0xc; 
0x50542ad9  # or eax, 0xffffffff; pop esi; pop ebp; ret; 
0x50507f51  # or eax, 0xffffffff; pop esi; pop ebx; pop edi; leave; ret 0x10; 
0x50548d9f  # or eax, 0xffffffff; pop esi; pop ebx; pop edi; leave; ret 8; 
0x505489db  # or eax, 0xffffffff; pop esi; pop ebx; pop edi; pop ebp; ret 4; 
0x50533fdd  # or eax, 0xffffffff; pop esi; pop edi; pop ebx; leave; ret; 
0x50522f23  # or eax, 0xffffffff; pop esi; pop edi; pop ebx; pop ebp; ret; 
0x505063c6  # or eax, 0xffffffff; pop esi; ret 4; 
0x5050167d  # or eax, 0xffffffff; pop esi; ret 8; 
0x50520188  # or eax, 0xffffffff; pop esi; ret; 
0x50502f08  # or eax, 0xffffffff; ret 0xc; 
0x50501a19  # or eax, 0xffffffff; ret 8; 
0x50516787  # or eax, 0xffffffff; ret; 
0x50542fb9  # or eax, 1; xor ecx, ecx; cmp dword ptr [0x5055ded0], eax; sete cl; mov eax, ecx; ret; 
0x5051c3e5  # or eax, dword ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebp; ret; 
0x5050e50f  # or eax, dword ptr [ebx]; fisttp word ptr [ebx + 0xbd0f7c2]; ret; 
0x50515702  # or eax, ecx; pop esi; ret; 
0x50546de9  # or eax, ecx; ret 4; 
0x5053331e  # or eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50501129  # or ebp, dword ptr [eax + 0x48]; leave; push ebp; push eax; call dword ptr [0x5054a020]; ret; 
0x5050114a  # or ebp, dword ptr [eax + 0x48]; leave; push ebp; push eax; call dword ptr [0x5054a024]; ret; 
0x505112e9  # or ebp, dword ptr [eax + 0x4c]; retf 0x5055; call dword ptr [0x5054a020]; ret; 
0x50511353  # or ebp, dword ptr [eax + 0x4c]; retf 0x5055; call dword ptr [0x5054a024]; ret; 
0x5050e319  # or ebp, dword ptr [ecx - 0x3eb42131]; ret; 
0x5052d813  # or ecx, dword ptr [eax - 0xb275f8]; mov byte ptr [eax + 1], cl; pop edi; leave; ret; 
0x505167cf  # or ecx, dword ptr [ebx - 0x3f7aa7c0]; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051681c  # or ecx, dword ptr [ebx - 0x3f7aa7c0]; je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x505167bf  # or ecx, dword ptr [ebx - 0x3f7ab3c0]; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x50548921  # or ecx, dword ptr [ecx]; add byte ptr [eax], al; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x50536768  # or ecx, eax; mov ecx, dword ptr [esp + 0xc]; jne 0x36779; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x50519c99  # or edi, dword ptr [ebx]; ret 0x775; 
0x5051ea68  # or edi, dword ptr [ecx]; add dword ptr [eax], eax; add ebp, 0x1f90; leave; ret; 
0x505419b4  # or edi, edi; dec ecx; ret; 
0x5052df87  # or edi, edi; inc dword ptr [ebx + 0x5e5f0cc4]; pop ebp; ret; 
0x50544cba  # or edi, edi; inc ebp; mov ah, 0x2a; ret; 
0x505064ce  # or edx, dword ptr [eax - 1]; adc eax, 0x5054a078; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x5052ba8a  # or edx, eax; mov dword ptr [ecx + 0x104c], edx; pop esi; ret; 
0x5052a816  # or edx, eax; mov dword ptr [ecx + 0x84], edx; pop esi; ret; 
0x5050e1e5  # or edx, esi; pop es; aaa; ret; 
0x5052ba85  # or edx, esi; shl edx, 8; or edx, eax; mov dword ptr [ecx + 0x104c], edx; pop esi; ret; 
0x5052a811  # or edx, esi; shl edx, 8; or edx, eax; mov dword ptr [ecx + 0x84], edx; pop esi; ret; 
0x5052528a  # or esi, edx; jne 0x25278; pop esi; ret; 
0x5051c7fe  # out 0x1e, al; mov eax, esi; pop esi; leave; ret; 
0x5050e4dc  # out 0x2c, al; dec byte ptr [ebx - 0x3e2c0828]; ret 0x30a; 
0x5050ec8c  # out 0x36, eax; add al, byte ptr [eax]; leave; ret 0x10; 
0x5051cbd5  # out 0x57, eax; add dword ptr [eax], eax; add esp, 0xc; pop esi; ret; 
0x5053f012  # out 0x5e, eax; pop ebp; ret; 
0x5050e3ce  # out 0xc1, al; ret 0x30b; 
0x5052e0ea  # out 0xfe, eax; inc dword ptr [ebx - 0x7cfc7393]; ret; 
0x5052d2bd  # out 0xff, al; add byte ptr [eax], al; add byte ptr [ebx], cl; ret 0xb60f; 
0x5051e2fc  # out 0xff, al; call ptr [ecx + 0x59]; mov dword ptr [eax], esi; pop esi; ret; 
0x5052a7c3  # out 0xff, al; inc dword ptr [ebx + 0x5e5f18c4]; ret; 
0x505050b6  # out 0xff, eax; call dword ptr [edi - 0x77]; inc ebp; or al, 0xe8; ret 0xffc5; 
0x5051a6bd  # out 0xff, eax; inc dword ptr [ebx + 0x5b5f24c4]; pop esi; pop ebp; ret; 
0x5051a61a  # out 0xff, eax; inc dword ptr [ebx + 0x5e5f0cc4]; pop ebx; pop ebp; ret; 
0x50508855  # out 3, eax; add byte ptr [ebx - 0x7bf00008], al; sti; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x5051ca81  # out dx, al; and dword ptr [esi + 4], 0; and dword ptr [esi + 8], 0; pop esi; ret; 
0x50535ced  # out dx, al; mov eax, ecx; add esp, 0x20; pop esi; leave; ret; 
0x5052f864  # out dx, al; pop esi; ret; 
0x50501ab7  # out dx, eax; idiv bh; inc dword ptr [ebx + 0x5e5bffc8]; pop ebp; ret 0xc; 
0x505096f4  # out dx, eax; mov dword ptr [eax + 8], 0x98badcfe; mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x5050e9bb  # out dx, eax; mov eax, edi; pop edi; pop ebx; pop esi; ret 4; 
0x50518e8e  # out dx, eax; mov edx, 0x5e5bffff; ret; 
0x50531b6e  # outsb dx, byte ptr [esi]; add byte ptr [eax], al; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; pop ebp; ret; 
0x5051fad3  # outsb dx, byte ptr [esi]; or al, 8; add dword ptr [esi + 0x10], -8; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x50504fcd  # outsb dx, byte ptr [esi]; ret; 
0x505475d9  # outsd dx, dword ptr [esi]; push ebp; push eax; call dword ptr [0x5054a02c]; xor eax, eax; ret; 
0x5051aa70  # outsd dx, dword ptr [esi]; ret; 
0x505287ba  # pop ds; add al, 0x8b; popfd; push 0x8bffffff; ret; 
0x5050f68d  # pop ds; add byte ptr [eax], al; leave; ret 0xc; 
0x5051ea6f  # pop ds; add byte ptr [eax], al; leave; ret; 
0x5050ef74  # pop ds; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x5052d7ad  # pop ds; push esi; add byte ptr [eax], al; add esp, 0x28; leave; ret; 
0x505369a6  # pop ds; shl edx, cl; ret; 
0x50542f36  # pop ds; shr eax, cl; ret; 
0x50504c54  # pop ds; xlatb; add al, byte ptr [eax]; leave; ret 0x10; 
0x5051f254  # pop ds; xor dword ptr [ecx], eax; add byte ptr [ecx + 0x4fa0c5], al; add cl, cl; ret; 
0x5052a1f2  # pop dword ptr [eax + eax - 0x36a50000]; ret; 
0x50548f3d  # pop dword ptr [ebx - 0x7af0fd07]; ret; 
0x505093bb  # pop dword ptr [edx]; add cl, cl; ret 4; 
0x50511377  # pop eax; add byte ptr [eax], al; pop ecx; pop ecx; ret 8; 
0x50511366  # pop eax; add byte ptr [eax], al; pop ecx; ret 4; 
0x5052aad8  # pop eax; call 0x2a1fa; pop ecx; pop ecx; leave; ret; 
0x5052d6c7  # pop eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x50521918  # pop eax; mov dword ptr [eax + 0x54], ecx; ret; 
0x5053a176  # pop eax; pop ebp; ret; 
0x50543648  # pop eax; pop ecx; pop ebp; pop ecx; pop ebx; ret 4; 
0x50540680  # pop eax; pop edi; pop esi; pop ebp; ret; 
0x5052018f  # pop eax; pop esi; ret; 
0x5052d6b1  # pop eax; push eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x50509784  # pop eax; push ebp; push eax; mov dword ptr [ecx], eax; ret; 
0x5052702b  # pop eax; ret 0x5054; 
0x5053a0f5  # pop eax; ret; 
0x505167d2  # pop eax; test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051681f  # pop eax; test eax, eax; je 0x16828; mov eax, dword ptr [eax + 0x24]; ret; 
0x5051164d  # pop ebp; aam 0x3b; ret; 
0x5050912a  # pop ebp; adc al, 0x75; and byte ptr [ebx + 0x74ff107e], al; sbb dh, dh; ret; 
0x5053c2c6  # pop ebp; add byte ptr [eax], al; pop ecx; ret; 
0x5050e045  # pop ebp; in al, 0x8b; ret 0xbc8d; 
0x5050e463  # pop ebp; in al, 0x8d; mov word ptr [ebx], cs; ret; 
0x50514978  # pop ebp; lea eax, [ebx + 0x101]; pop ebx; ret; 
0x5050e315  # pop ebp; les ecx, ptr [ebp - 0x3056f464]; fimul word ptr [ebx - 0x3f]; ret; 
0x50543570  # pop ebp; mov eax, dword ptr [esp + 8]; mov edx, dword ptr [esp + 0x10]; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x5050740f  # pop ebp; or al, 0x8b; ret; 
0x5053d473  # pop ebp; or al, 0xf6; ret 0x7501; 
0x50543ea9  # pop ebp; or byte ptr [ebx + 0x46ae475], cl; call 0x38c24; pop ecx; ret; 
0x50541d3a  # pop ebp; or byte ptr [ebx], bh; ret; 
0x5054281f  # pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x50536378  # pop ebp; or byte ptr [edx + 4], ch; call 0x38c24; pop ecx; ret; 
0x50515e46  # pop ebp; pop ebx; ret; 
0x5054364a  # pop ebp; pop ecx; pop ebx; ret 4; 
0x50522193  # pop ebp; pop edi; pop ebx; pop esi; ret; 
0x50506f4c  # pop ebp; pop edi; pop ebx; ret 4; 
0x5050a8d8  # pop ebp; pop edi; pop esi; pop ebx; ret 4; 
0x5051e07c  # pop ebp; pop edi; pop esi; ret; 
0x5050c19a  # pop ebp; pop esi; pop ebx; add esp, 0x18; ret 8; 
0x50510fa6  # pop ebp; pop esi; pop ebx; ret 4; 
0x50542f19  # pop ebp; pop esi; pop edi; ret 0x10; 
0x50535ede  # pop ebp; push ebp; push eax; ret; 
0x50538732  # pop ebp; push ecx; ret; 
0x50511f40  # pop ebp; ret 0; 
0x505033e4  # pop ebp; ret 0x10; 
0x50546d75  # pop ebp; ret 0x14; 
0x50505ac7  # pop ebp; ret 0x1c; 
0x50508476  # pop ebp; ret 0x20; 
0x50505f15  # pop ebp; ret 0x24; 
0x50505dda  # pop ebp; ret 0x2c; 
0x50501048  # pop ebp; ret 0xc; 
0x505063b2  # pop ebp; ret 4; 
0x50502dea  # pop ebp; ret 8; 
0x5050136f  # pop ebp; ret; 
0x5050e41e  # pop ebp; ror byte ptr [ebp - 0x68ec6c], 1; sub al, byte ptr [ebx - 0x3f]; ret 0x8b0a; 
0x505056dd  # pop ebp; sbb byte ptr [ebp - 0x74fb8b25], al; ret; 
0x5052f4aa  # pop ebp; xor eax, eax; pop ebx; add esp, 0x14; ret 4; 
0x5052f4ad  # pop ebx; add esp, 0x14; ret 4; 
0x5050c19c  # pop ebx; add esp, 0x18; ret 8; 
0x5052a6a9  # pop ebx; and bh, bh; call ptr [ecx + 0x59]; ret; 
0x505128c8  # pop ebx; call 0x32377; add ebp, 0x1014; leave; ret 0x10; 
0x50503260  # pop ebx; call 0x32377; add ebp, 0x18c; leave; ret 4; 
0x505484c8  # pop ebx; call 0x32377; add ebp, 0x190; leave; ret 8; 
0x5052eedc  # pop ebx; call 0x32377; add ebp, 0x1e0; leave; ret; 
0x5051ea66  # pop ebx; call 0x32377; add ebp, 0x1f90; leave; ret; 
0x5050f684  # pop ebx; call 0x32377; add ebp, 0x1ffc; leave; ret 0xc; 
0x505147e3  # pop ebx; call 0x32377; add ebp, 0x2640; leave; ret 0x20; 
0x5051964b  # pop ebx; call 0x32377; add ebp, 0x3a0; leave; ret; 
0x50527eb7  # pop ebx; call 0x32377; add ebp, 0x400c; leave; ret; 
0x5052e2f2  # pop ebx; call 0x32377; add ebp, 0x450; leave; ret; 
0x505277e0  # pop ebx; call 0x32377; add ebp, 0x5c; leave; ret; 
0x50512c04  # pop ebx; call 0x32377; add ebp, 0x64; leave; ret 0x14; 
0x5050f935  # pop ebx; call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50522e45  # pop ebx; call 0x32377; add ebp, 0x68; leave; ret; 
0x505035e1  # pop ebx; call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50528a26  # pop ebx; call 0x32377; add ebp, 0x6c; leave; ret; 
0x505028f4  # pop ebx; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x505223f7  # pop ebx; call 0x32377; add ebp, 0x74; leave; ret; 
0x505172c1  # pop ebx; call 0x32377; add ebp, 0x78; leave; ret; 
0x5052d8c0  # pop ebx; call 0x32377; add ebp, 0x8c; leave; ret; 
0x50517bad  # pop ebx; call 0x32377; add ebp, 0xa8; leave; ret; 
0x5051a1b4  # pop ebx; call 0x32377; add ebp, 0xb4; leave; ret; 
0x50549443  # pop ebx; call 0x32377; add ebp, 0xd0; leave; ret; 
0x505130d8  # pop ebx; call 0x32377; add ebp, 0xf90; leave; ret 0xc; 
0x5050d928  # pop ebx; call 0x32377; add ebp, 0xf94; leave; ret 0xc; 
0x5050ec8a  # pop ebx; call 0x32377; leave; ret 0x10; 
0x505101cd  # pop ebx; call 0x32377; leave; ret 0x14; 
0x5050c75f  # pop ebx; call 0x32377; leave; ret 0xc; 
0x5050437c  # pop ebx; call 0x32377; leave; ret 4; 
0x50518346  # pop ebx; call 0x32377; leave; ret; 
0x5054267e  # pop ebx; jne 0x42688; mov eax, 0x8000; pop ebp; ret; 
0x5051e0e6  # pop ebx; lea eax, [eax + eax - 1]; pop edi; pop esi; ret; 
0x50508a80  # pop ebx; leave; ret 0x10; 
0x5050aded  # pop ebx; leave; ret 0x14; 
0x505124b4  # pop ebx; leave; ret 0x18; 
0x50502281  # pop ebx; leave; ret 0xc; 
0x50501bf4  # pop ebx; leave; ret 4; 
0x50501dfd  # pop ebx; leave; ret 8; 
0x5050e599  # pop ebx; leave; ret; 
0x50539af1  # pop ebx; mov eax, edi; pop edi; pop ebp; ret; 
0x50509c38  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x10; 
0x5050ff2e  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x14; 
0x50505ba1  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x1c; 
0x5050858b  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x20; 
0x505059b0  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x24; 
0x50505edf  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x2c; 
0x505012e3  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0xc; 
0x50506b8e  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 8; 
0x5053a101  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret; 
0x5053872f  # pop ebx; mov esp, ebp; pop ebp; push ecx; ret; 
0x50533d3b  # pop ebx; mov esp, ebp; pop ebp; ret; 
0x505033e3  # pop ebx; pop ebp; ret 0x10; 
0x505495e8  # pop ebx; pop ebp; ret 0x14; 
0x50508475  # pop ebx; pop ebp; ret 0x20; 
0x50505dd9  # pop ebx; pop ebp; ret 0x2c; 
0x5050a23b  # pop ebx; pop ebp; ret 0xc; 
0x50503dd2  # pop ebx; pop ebp; ret 8; 
0x5050140f  # pop ebx; pop ebp; ret; 
0x50507f55  # pop ebx; pop edi; leave; ret 0x10; 
0x5050ddc5  # pop ebx; pop edi; leave; ret 8; 
0x50515d26  # pop ebx; pop edi; leave; ret; 
0x50533cbd  # pop ebx; pop edi; mov esp, ebp; pop ebp; ret; 
0x5050dac8  # pop ebx; pop edi; pop ebp; ret 0xc; 
0x505489df  # pop ebx; pop edi; pop ebp; ret 4; 
0x5050feb3  # pop ebx; pop edi; pop esi; leave; ret 0x14; 
0x505024d1  # pop ebx; pop edi; pop esi; leave; ret 0xc; 
0x50502cb3  # pop ebx; pop edi; pop esi; leave; ret 8; 
0x50526c7c  # pop ebx; pop edi; pop esi; leave; ret; 
0x505063af  # pop ebx; pop edi; pop esi; pop ebp; ret 4; 
0x5050515b  # pop ebx; pop edi; pop esi; pop ebp; ret 8; 
0x50522bc5  # pop ebx; pop edi; pop esi; pop ebp; ret; 
0x50518fda  # pop ebx; pop edi; pop esi; ret; 
0x50532ffd  # pop ebx; pop edi; ret; 
0x50532fb9  # pop ebx; pop edi; xor eax, eax; ret; 
0x505019bf  # pop ebx; pop esi; leave; ret 0x10; 
0x505090e1  # pop ebx; pop esi; leave; ret 0xc; 
0x5052491c  # pop ebx; pop esi; leave; ret; 
0x5053421d  # pop ebx; pop esi; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50501abe  # pop ebx; pop esi; pop ebp; ret 0xc; 
0x50502de8  # pop ebx; pop esi; pop ebp; ret 8; 
0x5051a6c4  # pop ebx; pop esi; pop ebp; ret; 
0x505460bc  # pop ebx; pop esi; pop edi; leave; ret; 
0x50536754  # pop ebx; pop esi; pop edi; ret 0x10; 
0x5050af90  # pop ebx; pop esi; pop edi; ret 8; 
0x505341ea  # pop ebx; pop esi; pop edi; ret; 
0x5050e9bf  # pop ebx; pop esi; ret 4; 
0x5050998d  # pop ebx; pop esi; ret 8; 
0x50518e92  # pop ebx; pop esi; ret; 
0x50509007  # pop ebx; ret 0x10; 
0x50501825  # pop ebx; ret 4; 
0x5050deb9  # pop ebx; ret 8; 
0x5051497f  # pop ebx; ret; 
0x50502a18  # pop ebx; stc; add al, byte ptr [eax]; leave; ret 0xc; 
0x50532ed6  # pop ebx; xor eax, eax; ret; 
0x5051e8ba  # pop ecx; add byte ptr [eax], al; and dword ptr [0x5055cf2c], 0; pop ecx; pop esi; ret; 
0x5051e87d  # pop ecx; add byte ptr [eax], al; pop ecx; mov dword ptr [0x5055cf2c], eax; ret; 
0x50525a8d  # pop ecx; add eax, 4; ret; 
0x505283a5  # pop ecx; and eax, 0x5054bc28; ret; 
0x50533adc  # pop ecx; and eax, esi; pop esi; pop ebp; ret; 
0x50516f3c  # pop ecx; call 0x16de3; pop ebx; ret; 
0x5052f26b  # pop ecx; call 0x2f141; leave; ret; 
0x505376fe  # pop ecx; call 0x38721; ret 4; 
0x505364d8  # pop ecx; call 0x38721; ret; 
0x50536415  # pop ecx; call 0x3a195; mov dword ptr [eax], 0xc; xor eax, eax; call 0x38721; ret; 
0x5053efe4  # pop ecx; cmp eax, -1; jne 0x3efed; or dword ptr [esi], eax; ret; 
0x5050db1a  # pop ecx; dec eax; add al, byte ptr [eax]; leave; ret 0xc; 
0x505410f3  # pop ecx; dec eax; pop ebp; ret; 
0x50525a75  # pop ecx; inc eax; ret; 
0x505271ca  # pop ecx; jne 0x271d1; xor eax, eax; pop esi; ret; 
0x5053c3d6  # pop ecx; jne 0x3c3df; and eax, 0xffffffdf; sub eax, 7; pop ebp; ret; 
0x50515827  # pop ecx; leave; ret; 
0x5051e880  # pop ecx; mov dword ptr [0x5055cf2c], eax; ret; 
0x50527867  # pop ecx; mov dword ptr [0x5055d450], eax; call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x50541290  # pop ecx; mov dword ptr [0x5055de98], eax; ret; 
0x50539878  # pop ecx; mov dword ptr [0x5055e26c], 1; xor eax, eax; ret; 
0x50524e6e  # pop ecx; mov dword ptr [eax + 4], 0x1000; ret; 
0x505153db  # pop ecx; mov dword ptr [esi + 0x14], eax; pop ecx; mov eax, esi; pop esi; ret; 
0x5052f810  # pop ecx; mov dword ptr [esi + 0x18], 1; pop esi; ret; 
0x50515207  # pop ecx; mov dword ptr [esi + 0x18], eax; ret; 
0x50515d39  # pop ecx; mov dword ptr [esi + 0x28f0], edi; ret; 
0x5051ccc6  # pop ecx; mov dword ptr [esi + 0xc], eax; ret; 
0x505168a4  # pop ecx; mov dword ptr [esi + 0xe0], eax; pop esi; ret; 
0x505168fd  # pop ecx; mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x5051ef75  # pop ecx; mov eax, dword ptr [esi + 0x38]; pop edi; pop esi; ret; 
0x50516a44  # pop ecx; mov eax, dword ptr [esp + 0xc]; mov dword ptr [esi], eax; pop esi; ret; 
0x505278f0  # pop ecx; mov eax, edi; pop edi; pop esi; ret; 
0x50539b2d  # pop ecx; mov eax, edi; pop esi; ret; 
0x505393fa  # pop ecx; mov eax, esi; call 0x38721; ret; 
0x5053686c  # pop ecx; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x505153df  # pop ecx; mov eax, esi; pop esi; ret; 
0x505419ac  # pop ecx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret; 
0x50524219  # pop ecx; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x50539ba6  # pop ecx; mov esi, dword ptr [ebp - 0x1c]; ret; 
0x505283a2  # pop ecx; not eax; pop ecx; and eax, 0x5054bc28; ret; 
0x5051dae9  # pop ecx; or eax, 0xffffffff; pop edi; leave; ret; 
0x505170fa  # pop ecx; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x50543649  # pop ecx; pop ebp; pop ecx; pop ebx; ret 4; 
0x50531b62  # pop ecx; pop ebp; ret 0xc; 
0x5051c963  # pop ecx; pop ebp; ret; 
0x5051e0e5  # pop ecx; pop ebx; lea eax, [eax + eax - 1]; pop edi; pop esi; ret; 
0x50519725  # pop ecx; pop ebx; leave; ret; 
0x50511b99  # pop ecx; pop ebx; pop edi; pop esi; leave; ret 0xc; 
0x50526c7b  # pop ecx; pop ebx; pop edi; pop esi; leave; ret; 
0x505380c2  # pop ecx; pop ebx; pop edi; pop esi; ret; 
0x5054364b  # pop ecx; pop ebx; ret 4; 
0x5052f26a  # pop ecx; pop ecx; call 0x2f141; leave; ret; 
0x5053efe3  # pop ecx; pop ecx; cmp eax, -1; jne 0x3efed; or dword ptr [esi], eax; ret; 
0x505271c9  # pop ecx; pop ecx; jne 0x271d1; xor eax, eax; pop esi; ret; 
0x50515826  # pop ecx; pop ecx; leave; ret; 
0x50524e6d  # pop ecx; pop ecx; mov dword ptr [eax + 4], 0x1000; ret; 
0x5051e2ff  # pop ecx; pop ecx; mov dword ptr [eax], esi; pop esi; ret; 
0x5052f80f  # pop ecx; pop ecx; mov dword ptr [esi + 0x18], 1; pop esi; ret; 
0x50515d38  # pop ecx; pop ecx; mov dword ptr [esi + 0x28f0], edi; ret; 
0x505278ef  # pop ecx; pop ecx; mov eax, edi; pop edi; pop esi; ret; 
0x50524218  # pop ecx; pop ecx; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x5051dae8  # pop ecx; pop ecx; or eax, 0xffffffff; pop edi; leave; ret; 
0x505170f9  # pop ecx; pop ecx; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x5051c962  # pop ecx; pop ecx; pop ebp; ret; 
0x5052a447  # pop ecx; pop ecx; pop edi; pop ebp; ret; 
0x5051abd0  # pop ecx; pop ecx; pop edi; pop ebx; pop esi; ret; 
0x50511d0f  # pop ecx; pop ecx; pop edi; pop esi; ret 4; 
0x50521d13  # pop ecx; pop ecx; pop edi; pop esi; ret; 
0x5051990e  # pop ecx; pop ecx; pop esi; leave; ret; 
0x5051d69a  # pop ecx; pop ecx; pop esi; pop ebx; ret; 
0x50518eb2  # pop ecx; pop ecx; pop esi; ret; 
0x5051137a  # pop ecx; pop ecx; ret 8; 
0x505115a2  # pop ecx; pop ecx; ret; 
0x5051f2d9  # pop ecx; pop ecx; test eax, eax; je 0x1f2e3; mov eax, dword ptr [eax + 8]; ret; 
0x5051f2fe  # pop ecx; pop ecx; test eax, eax; je 0x1f308; mov eax, dword ptr [eax + 8]; ret; 
0x50515ec6  # pop ecx; pop ecx; test eax, eax; jne 0x15e99; pop ebx; ret; 
0x50528384  # pop ecx; pop ecx; test eax, eax; jne 0x28390; mov eax, 0x5054bcd4; ret; 
0x5051f62e  # pop ecx; pop ecx; test edx, edx; jne 0x1f635; ret; 
0x5052719b  # pop ecx; pop ecx; xor eax, eax; inc eax; pop esi; ret; 
0x5051d9ff  # pop ecx; pop ecx; xor eax, eax; leave; ret; 
0x50513194  # pop ecx; pop ecx; xor eax, eax; pop ebx; pop esi; ret 8; 
0x505132a2  # pop ecx; pop ecx; xor eax, eax; pop edi; pop esi; ret 8; 
0x50542fad  # pop ecx; pop ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x505151f9  # pop ecx; pop edi; leave; ret; 
0x5051f3e0  # pop ecx; pop edi; mov eax, esi; pop esi; pop ebx; ret; 
0x5052a448  # pop ecx; pop edi; pop ebp; ret; 
0x5051abd1  # pop ecx; pop edi; pop ebx; pop esi; ret; 
0x50515971  # pop ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x50513dfb  # pop ecx; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50511d10  # pop ecx; pop edi; pop esi; ret 4; 
0x5051711c  # pop ecx; pop edi; pop esi; ret; 
0x505151c7  # pop ecx; pop edi; ret; 
0x5051990f  # pop ecx; pop esi; leave; ret; 
0x5051fb1c  # pop ecx; pop esi; pop ebp; ret; 
0x5051d69b  # pop ecx; pop esi; pop ebx; ret; 
0x50513690  # pop ecx; pop esi; pop edi; pop ebx; leave; ret 0xc; 
0x50512f5c  # pop ecx; pop esi; pop edi; pop ebx; leave; ret 8; 
0x505152c9  # pop ecx; pop esi; ret; 
0x50538d25  # pop ecx; push dword ptr [esi]; call dword ptr [0x5054a020]; pop esi; pop ebp; ret; 
0x50516002  # pop ecx; push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x5051cfd8  # pop ecx; push esi; call 0x1c966; pop ecx; ret; 
0x50511369  # pop ecx; ret 4; 
0x5051137b  # pop ecx; ret 8; 
0x505115a3  # pop ecx; ret; 
0x5051df57  # pop ecx; sbb eax, eax; inc eax; pop esi; pop ebp; ret; 
0x5051eb1d  # pop ecx; sbb eax, eax; pop ecx; inc eax; ret; 
0x5051f2da  # pop ecx; test eax, eax; je 0x1f2e3; mov eax, dword ptr [eax + 8]; ret; 
0x5051f2ff  # pop ecx; test eax, eax; je 0x1f308; mov eax, dword ptr [eax + 8]; ret; 
0x50513c11  # pop ecx; test eax, eax; jne 0x13c18; pop esi; ret; 
0x50515ec7  # pop ecx; test eax, eax; jne 0x15e99; pop ebx; ret; 
0x50528385  # pop ecx; test eax, eax; jne 0x28390; mov eax, 0x5054bcd4; ret; 
0x5051f62f  # pop ecx; test edx, edx; jne 0x1f635; ret; 
0x50532f3a  # pop ecx; xchg esp, eax; mov eax, dword ptr [eax]; mov dword ptr [esp], eax; ret; 
0x50526785  # pop ecx; xor eax, eax; inc eax; pop esi; ret; 
0x50513195  # pop ecx; xor eax, eax; pop ebx; pop esi; ret 8; 
0x50523681  # pop ecx; xor eax, eax; pop edi; leave; ret; 
0x50513fb0  # pop ecx; xor eax, eax; pop edi; pop esi; pop ebx; ret 8; 
0x505132a3  # pop ecx; xor eax, eax; pop edi; pop esi; ret 8; 
0x50542fae  # pop ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x5051994c  # pop edi; adc byte ptr [edi], cl; test dword ptr [edi - 0x75000000], esp; inc edi; or al, 0x2b; ret; 
0x5051f252  # pop edi; call 0x32377; add ebp, 0x4fa0; leave; ret; 
0x5050684e  # pop edi; call 0x32377; add ebp, 0x78; leave; ret; 
0x5051ccb3  # pop edi; call 0x32377; leave; ret; 
0x50515c54  # pop edi; inc eax; cmp byte ptr [eax], 0; jne 0x15c46; ret; 
0x50513c5c  # pop edi; inc eax; pop esi; ret; 
0x50549991  # pop edi; je 0x4999b; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5051c871  # pop edi; jle 0x1c881; and eax, 0x3f; mov al, byte ptr [eax + 0x5054b5c0]; mov byte ptr [ecx + 3], al; ret; 
0x50532f03  # pop edi; lea eax, [edx - 1]; pop ebx; ret; 
0x50525a59  # pop edi; lea eax, [esi + 1]; pop esi; ret; 
0x50507f56  # pop edi; leave; ret 0x10; 
0x50510e99  # pop edi; leave; ret 0x1c; 
0x5050ddc6  # pop edi; leave; ret 8; 
0x505151fa  # pop edi; leave; ret; 
0x50526511  # pop edi; mov dword ptr [0x5055d3e8], esi; pop esi; pop ebx; leave; ret; 
0x5052b415  # pop edi; mov dword ptr [ebx + 0x104c], eax; pop esi; leave; ret; 
0x505156fe  # pop edi; mov dword ptr [edx + 0x18], esi; or eax, ecx; pop esi; ret; 
0x5051d75d  # pop edi; mov dword ptr [esi + 0x10], edx; mov eax, esi; pop esi; ret; 
0x50527b86  # pop edi; mov dword ptr [esi + 4], eax; pop esi; pop ebx; leave; ret; 
0x5051f359  # pop edi; mov dword ptr [esi], 0x2736; mov eax, esi; pop esi; ret; 
0x50515e43  # pop edi; mov eax, ebp; pop ebp; pop ebx; ret; 
0x5051d179  # pop edi; mov eax, esi; pop esi; pop ebp; pop ebx; ret; 
0x5051f46d  # pop edi; mov eax, esi; pop esi; pop ebp; ret; 
0x5051ff1e  # pop edi; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x5051f3e1  # pop edi; mov eax, esi; pop esi; pop ebx; ret; 
0x50516760  # pop edi; mov eax, esi; pop esi; ret; 
0x50516e1a  # pop edi; mov esi, ebx; call 0x14981; pop esi; leave; ret; 
0x50533cbe  # pop edi; mov esp, ebp; pop ebp; ret; 
0x50514977  # pop edi; pop ebp; lea eax, [ebx + 0x101]; pop ebx; ret; 
0x5050c199  # pop edi; pop ebp; pop esi; pop ebx; add esp, 0x18; ret 8; 
0x50510fa5  # pop edi; pop ebp; pop esi; pop ebx; ret 4; 
0x5050dac9  # pop edi; pop ebp; ret 0xc; 
0x505489e0  # pop edi; pop ebp; ret 4; 
0x50515c30  # pop edi; pop ebp; ret; 
0x50513a92  # pop edi; pop ebx; leave; ret 0x10; 
0x50504f27  # pop edi; pop ebx; leave; ret 0xc; 
0x5050937d  # pop edi; pop ebx; leave; ret 4; 
0x50512f5e  # pop edi; pop ebx; leave; ret 8; 
0x5050e598  # pop edi; pop ebx; leave; ret; 
0x50503dd1  # pop edi; pop ebx; pop ebp; ret 8; 
0x50522f27  # pop edi; pop ebx; pop ebp; ret; 
0x505019be  # pop edi; pop ebx; pop esi; leave; ret 0x10; 
0x505090e0  # pop edi; pop ebx; pop esi; leave; ret 0xc; 
0x5052491b  # pop edi; pop ebx; pop esi; leave; ret; 
0x50509fd7  # pop edi; pop ebx; pop esi; pop ebp; ret 0xc; 
0x50502de7  # pop edi; pop ebx; pop esi; pop ebp; ret 8; 
0x5051a6c3  # pop edi; pop ebx; pop esi; pop ebp; ret; 
0x5050e9be  # pop edi; pop ebx; pop esi; ret 4; 
0x5050998c  # pop edi; pop ebx; pop esi; ret 8; 
0x5051abd2  # pop edi; pop ebx; pop esi; ret; 
0x50506f4d  # pop edi; pop ebx; ret 4; 
0x5051518f  # pop edi; pop ebx; ret; 
0x50532ed5  # pop edi; pop ebx; xor eax, eax; ret; 
0x50535c4a  # pop edi; pop edx; push ebx; push eax; ret; 
0x50516ddb  # pop edi; pop esi; lea eax, [ebx + 4]; pop ebx; leave; ret; 
0x5050feb4  # pop edi; pop esi; leave; ret 0x14; 
0x505024d2  # pop edi; pop esi; leave; ret 0xc; 
0x50501624  # pop edi; pop esi; leave; ret 4; 
0x50502cb4  # pop edi; pop esi; leave; ret 8; 
0x50516061  # pop edi; pop esi; leave; ret; 
0x5052658f  # pop edi; pop esi; mov dword ptr [0x5055d3e8], eax; pop ebx; ret; 
0x5052c180  # pop edi; pop esi; mov dword ptr [eax + 0x14], ecx; pop ebx; leave; ret; 
0x5052c642  # pop edi; pop esi; mov dword ptr [eax + 0x1c], ecx; pop ebx; leave; ret; 
0x5052bde8  # pop edi; pop esi; mov dword ptr [eax + 0xc], ecx; pop ebx; leave; ret; 
0x5052391d  # pop edi; pop esi; mov dword ptr [ecx], edx; pop ebx; leave; ret; 
0x5051e130  # pop edi; pop esi; mov edx, ecx; pop ebx; ret; 
0x50542da2  # pop edi; pop esi; mov word ptr [eax + 8], cx; pop ebx; leave; ret; 
0x50523419  # pop edi; pop esi; pop ebp; pop ebx; ret; 
0x505029a8  # pop edi; pop esi; pop ebp; ret 0xc; 
0x505063b0  # pop edi; pop esi; pop ebp; ret 4; 
0x5050515c  # pop edi; pop esi; pop ebp; ret 8; 
0x5051c3e8  # pop edi; pop esi; pop ebp; ret; 
0x50504bfe  # pop edi; pop esi; pop ebx; leave; ret 0x10; 
0x5050adeb  # pop edi; pop esi; pop ebx; leave; ret 0x14; 
0x505124b2  # pop edi; pop esi; pop ebx; leave; ret 0x18; 
0x5050227f  # pop edi; pop esi; pop ebx; leave; ret 0xc; 
0x50501bf2  # pop edi; pop esi; pop ebx; leave; ret 4; 
0x50501dfb  # pop edi; pop esi; pop ebx; leave; ret 8; 
0x5051153a  # pop edi; pop esi; pop ebx; leave; ret; 
0x50533d39  # pop edi; pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x505033e1  # pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x505495e6  # pop edi; pop esi; pop ebx; pop ebp; ret 0x14; 
0x50508473  # pop edi; pop esi; pop ebx; pop ebp; ret 0x20; 
0x50505dd7  # pop edi; pop esi; pop ebx; pop ebp; ret 0x2c; 
0x5050a239  # pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x50508e2f  # pop edi; pop esi; pop ebx; pop ebp; ret 8; 
0x50513dfc  # pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50501823  # pop edi; pop esi; pop ebx; ret 4; 
0x5050deb7  # pop edi; pop esi; pop ebx; ret 8; 
0x50515627  # pop edi; pop esi; pop ebx; ret; 
0x50547a4f  # pop edi; pop esi; ret 0xc; 
0x505010a9  # pop edi; pop esi; ret 4; 
0x50501744  # pop edi; pop esi; ret 8; 
0x50501112  # pop edi; pop esi; ret; 
0x50524f2e  # pop edi; pop esi; sete al; pop ebx; leave; ret; 
0x50509003  # pop edi; pop esi; xor eax, eax; pop ebx; ret 0x10; 
0x50537d59  # pop edi; push ebp; push eax; pop esi; ret; 
0x5051d9de  # pop edi; push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x50536756  # pop edi; ret 0x10; 
0x5050aea4  # pop edi; ret 4; 
0x5050af92  # pop edi; ret 8; 
0x505151c8  # pop edi; ret; 
0x5051dcb5  # pop edi; sete al; pop esi; ret; 
0x50541ba0  # pop edi; sub eax, ecx; pop esi; pop ebp; ret; 
0x50513d21  # pop edi; xor eax, eax; pop ebx; pop ebp; ret; 
0x50508f71  # pop edi; xor eax, eax; pop ebx; pop esi; pop ebp; ret 8; 
0x50535f8e  # pop edi; xor eax, eax; pop esi; ret; 
0x50532fba  # pop edi; xor eax, eax; ret; 
0x505101ca  # pop edi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0x14; 
0x5054814b  # pop edi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0xc; 
0x5051edc9  # pop edi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret; 
0x50547d93  # pop edi; xor ecx, ebp; pop esi; call 0x32377; leave; ret 0x14; 
0x505093b5  # pop edi; xor ecx, ebp; pop esi; call 0x32377; leave; ret 4; 
0x50506934  # pop edi; xor ecx, ebp; pop esi; call 0x32377; leave; ret; 
0x5050c8a1  # pop edx; add al, byte ptr [eax]; leave; ret 0xc; 
0x5050c92e  # pop edx; add al, byte ptr [eax]; leave; ret 8; 
0x5052a7c2  # pop edx; out 0xff, al; inc dword ptr [ebx + 0x5e5f18c4]; ret; 
0x50535c4b  # pop edx; push ebx; push eax; ret; 
0x505212fd  # pop es; aaa; add byte ptr [ecx + 0x3707d6c6], al; ret; 
0x5050e1e7  # pop es; aaa; ret; 
0x50507d69  # pop es; add byte ptr [eax], al; add byte ptr [ebx + 0x38ac86], cl; add byte ptr [ebx], al; ret; 
0x5051f618  # pop es; add byte ptr [eax], al; idiv ecx; mov eax, edx; ret; 
0x50537fae  # pop es; add byte ptr [eax], al; ret; 
0x50521bdb  # pop es; add dword ptr [eax], eax; leave; ret; 
0x5051fcce  # pop es; add eax, edx; sar eax, 3; add eax, 4; ret; 
0x50525a87  # pop es; add eax, edx; sar eax, 3; pop ecx; add eax, 4; ret; 
0x50509e82  # pop es; and dword ptr [eax + 0xdc], 0xfffffffe; xor eax, eax; ret 8; 
0x50515c9d  # pop es; and dword ptr [esi], 0; add esp, 0xc; ret; 
0x5051c78c  # pop es; call 0x26598; xor eax, eax; pop ebp; ret; 
0x5052f757  # pop es; call 0x2f707; pop esi; ret; 
0x5053790f  # pop es; call 0x37439; xor eax, eax; pop edi; pop esi; ret; 
0x50531e47  # pop es; call 0x38c24; pop ecx; ret; 
0x50521e74  # pop es; in al, dx; pop ecx; pop ecx; ret; 
0x5051eabd  # pop es; mov dword ptr [eax + 0x10], ecx; xor eax, eax; inc eax; ret; 
0x50542680  # pop es; mov eax, 0x8000; pop ebp; ret; 
0x505167a2  # pop es; mov eax, dword ptr [eax + 0x1ac]; ret; 
0x50516832  # pop es; mov eax, dword ptr [eax + 0x90]; ret; 
0x505169e8  # pop es; mov eax, dword ptr [eax + 0xd4]; ret; 
0x50516a0e  # pop es; mov eax, dword ptr [eax + 0xd8]; ret; 
0x5051685a  # pop es; mov eax, dword ptr [eax + 0xe0]; ret; 
0x505168b4  # pop es; mov eax, dword ptr [eax + 0xe4]; ret; 
0x5053254f  # pop es; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x5053e334  # pop es; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50533111  # pop es; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50532b68  # pop es; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x5054703b  # pop es; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x50546d71  # pop es; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x505476aa  # pop es; or eax, 0xffffffff; pop ebp; ret 0x24; 
0x50546bbe  # pop es; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546fa1  # pop es; or eax, 0xffffffff; pop ebp; ret 8; 
0x505063c5  # pop es; or eax, 0xffffffff; pop esi; ret 4; 
0x5053331d  # pop es; or eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5053c3de  # pop es; pop ebp; ret; 
0x5052af3e  # pop es; pop ebx; leave; ret; 
0x50539d5f  # pop es; push eax; call 0x36451; pop ecx; pop ebp; ret; 
0x505235c3  # pop es; push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x5053c3b9  # pop es; shl dword ptr [esi], 1; xor eax, eax; inc eax; pop ebp; ret; 
0x5053c388  # pop es; test eax, eax; jne 0x3c391; xor eax, eax; pop ebp; ret; 
0x5054126c  # pop es; xor eax, eax; inc eax; ret; 
0x50515e67  # pop es; xor edi, edi; call 0x15d2a; pop edi; pop esi; ret; 
0x50515d68  # pop esi; adc byte ptr [ebp - 0x75], al; xchg byte ptr [ecx + eax], cl; add byte ptr [ebx], bh; ret; 
0x5053c1b3  # pop esi; add byte ptr [eax], al; pop ecx; ret; 
0x50525ac9  # pop esi; and eax, 0xff; ret; 
0x505316e6  # pop esi; call 0x32377; add ebp, 0x188; leave; ret; 
0x5052dc06  # pop esi; call 0x32377; add ebp, 0x18c; leave; ret; 
0x5052e8d6  # pop esi; call 0x32377; add ebp, 0x198; leave; ret; 
0x505487b5  # pop esi; call 0x32377; add ebp, 0x19c; leave; ret 4; 
0x50548c81  # pop esi; call 0x32377; add ebp, 0x1a4; leave; ret 4; 
0x50548387  # pop esi; call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50504823  # pop esi; call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50547edd  # pop esi; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x50547d96  # pop esi; call 0x32377; leave; ret 0x14; 
0x505492b6  # pop esi; call 0x32377; leave; ret 0xc; 
0x505093b8  # pop esi; call 0x32377; leave; ret 4; 
0x50506937  # pop esi; call 0x32377; leave; ret; 
0x505265db  # pop esi; inc dword ptr [0x5055d448]; ret; 
0x5051fde5  # pop esi; inc eax; pop ebx; pop ebp; ret; 
0x5053e3b4  # pop esi; je 0x3e3be; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5051578a  # pop esi; jge 0x15790; xor eax, eax; ret; 
0x5051c78a  # pop esi; jne 0x1c794; call 0x26598; xor eax, eax; pop ebp; ret; 
0x505235e9  # pop esi; jne 0x235f0; xor eax, eax; leave; ret; 
0x50516ddc  # pop esi; lea eax, [ebx + 4]; pop ebx; leave; ret; 
0x505019c0  # pop esi; leave; ret 0x10; 
0x5050feb5  # pop esi; leave; ret 0x14; 
0x505024d3  # pop esi; leave; ret 0xc; 
0x50501625  # pop esi; leave; ret 4; 
0x50502cb5  # pop esi; leave; ret 8; 
0x505150e6  # pop esi; leave; ret; 
0x50526590  # pop esi; mov dword ptr [0x5055d3e8], eax; pop ebx; ret; 
0x5052b4ef  # pop esi; mov dword ptr [eax + 0x1048], ebx; mov dword ptr [eax + 0x104c], ecx; pop ebx; leave; ret; 
0x5052c181  # pop esi; mov dword ptr [eax + 0x14], ecx; pop ebx; leave; ret; 
0x5052c643  # pop esi; mov dword ptr [eax + 0x1c], ecx; pop ebx; leave; ret; 
0x5052bde9  # pop esi; mov dword ptr [eax + 0xc], ecx; pop ebx; leave; ret; 
0x5052272c  # pop esi; mov dword ptr [eax], ecx; mov eax, dword ptr [ebp - 0x10]; pop ebx; leave; ret; 
0x505311aa  # pop esi; mov dword ptr [ecx + 0x1c], eax; pop ebx; leave; ret; 
0x5052a2cc  # pop esi; mov dword ptr [ecx + 0x80], ebx; mov dword ptr [ecx + 0x84], eax; pop ebx; leave; ret; 
0x505218fe  # pop esi; mov dword ptr [ecx + 4], edx; mov dword ptr [ecx + 0xc], eax; pop ebx; leave; ret; 
0x5052391e  # pop esi; mov dword ptr [ecx], edx; pop ebx; leave; ret; 
0x5052a404  # pop esi; mov dword ptr [edi + 0x80], eax; mov dword ptr [edi + 0x84], ecx; pop ebx; leave; ret; 
0x5052a1ea  # pop esi; mov dword ptr [edi + 0x80], ebx; mov dword ptr [edi + 0x84], ecx; pop ebx; leave; ret; 
0x5052af3c  # pop esi; mov dword ptr [edi], eax; pop ebx; leave; ret; 
0x5052a124  # pop esi; mov dword ptr [edx + 4], eax; pop ebx; leave; ret; 
0x5053421e  # pop esi; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5050937a  # pop esi; mov eax, edi; pop edi; pop ebx; leave; ret 4; 
0x50504c4d  # pop esi; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x10; 
0x5050ae3d  # pop esi; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0x14; 
0x5050126a  # pop esi; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 0xc; 
0x50501339  # pop esi; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret 8; 
0x5051e131  # pop esi; mov edx, ecx; pop ebx; ret; 
0x50542da3  # pop esi; mov word ptr [eax + 8], cx; pop ebx; leave; ret; 
0x50502f07  # pop esi; or eax, 0xffffffff; ret 0xc; 
0x50516fe3  # pop esi; pop ebp; pop ebx; ret; 
0x50506f4b  # pop esi; pop ebp; pop edi; pop ebx; ret 4; 
0x50548927  # pop esi; pop ebp; ret 0x10; 
0x50501abf  # pop esi; pop ebp; ret 0xc; 
0x505063b1  # pop esi; pop ebp; ret 4; 
0x50502de9  # pop esi; pop ebp; ret 8; 
0x5051622e  # pop esi; pop ebp; ret; 
0x5052f4a9  # pop esi; pop ebp; xor eax, eax; pop ebx; add esp, 0x14; ret 4; 
0x5050c19b  # pop esi; pop ebx; add esp, 0x18; ret 8; 
0x5054267d  # pop esi; pop ebx; jne 0x42688; mov eax, 0x8000; pop ebp; ret; 
0x50504bff  # pop esi; pop ebx; leave; ret 0x10; 
0x5050adec  # pop esi; pop ebx; leave; ret 0x14; 
0x505124b3  # pop esi; pop ebx; leave; ret 0x18; 
0x50502280  # pop esi; pop ebx; leave; ret 0xc; 
0x50501bf3  # pop esi; pop ebx; leave; ret 4; 
0x50501dfc  # pop esi; pop ebx; leave; ret 8; 
0x5051153b  # pop esi; pop ebx; leave; ret; 
0x50539af0  # pop esi; pop ebx; mov eax, edi; pop edi; pop ebp; ret; 
0x5053872e  # pop esi; pop ebx; mov esp, ebp; pop ebp; push ecx; ret; 
0x50533d08  # pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x505033e2  # pop esi; pop ebx; pop ebp; ret 0x10; 
0x505495e7  # pop esi; pop ebx; pop ebp; ret 0x14; 
0x50508474  # pop esi; pop ebx; pop ebp; ret 0x20; 
0x50505dd8  # pop esi; pop ebx; pop ebp; ret 0x2c; 
0x5050a23a  # pop esi; pop ebx; pop ebp; ret 0xc; 
0x50508e30  # pop esi; pop ebx; pop ebp; ret 8; 
0x5050140e  # pop esi; pop ebx; pop ebp; ret; 
0x50507f54  # pop esi; pop ebx; pop edi; leave; ret 0x10; 
0x5050ddc4  # pop esi; pop ebx; pop edi; leave; ret 8; 
0x50515d25  # pop esi; pop ebx; pop edi; leave; ret; 
0x50533cbc  # pop esi; pop ebx; pop edi; mov esp, ebp; pop ebp; ret; 
0x5050dac7  # pop esi; pop ebx; pop edi; pop ebp; ret 0xc; 
0x505489de  # pop esi; pop ebx; pop edi; pop ebp; ret 4; 
0x50532ffc  # pop esi; pop ebx; pop edi; ret; 
0x50532fb8  # pop esi; pop ebx; pop edi; xor eax, eax; ret; 
0x5053ff13  # pop esi; pop ebx; ret 0x10; 
0x50501824  # pop esi; pop ebx; ret 4; 
0x5050deb8  # pop esi; pop ebx; ret 8; 
0x50515628  # pop esi; pop ebx; ret; 
0x50532f02  # pop esi; pop edi; lea eax, [edx - 1]; pop ebx; ret; 
0x50510e98  # pop esi; pop edi; leave; ret 0x1c; 
0x50532547  # pop esi; pop edi; leave; ret; 
0x50514976  # pop esi; pop edi; pop ebp; lea eax, [ebx + 0x101]; pop ebx; ret; 
0x50513a91  # pop esi; pop edi; pop ebx; leave; ret 0x10; 
0x50504f26  # pop esi; pop edi; pop ebx; leave; ret 0xc; 
0x50512f5d  # pop esi; pop edi; pop ebx; leave; ret 8; 
0x50517a69  # pop esi; pop edi; pop ebx; leave; ret; 
0x50503dd0  # pop esi; pop edi; pop ebx; pop ebp; ret 8; 
0x50522f26  # pop esi; pop edi; pop ebx; pop ebp; ret; 
0x50532f13  # pop esi; pop edi; pop ebx; ret; 
0x50532ed4  # pop esi; pop edi; pop ebx; xor eax, eax; ret; 
0x50536755  # pop esi; pop edi; ret 0x10; 
0x5050aea3  # pop esi; pop edi; ret 4; 
0x5050af91  # pop esi; pop edi; ret 8; 
0x5051695a  # pop esi; pop edi; ret; 
0x50536ac1  # pop esi; ret 0x10; 
0x50547a50  # pop esi; ret 0xc; 
0x505010aa  # pop esi; ret 4; 
0x50501680  # pop esi; ret 8; 
0x50501113  # pop esi; ret; 
0x50524f2f  # pop esi; sete al; pop ebx; leave; ret; 
0x5051580f  # pop esi; test eax, eax; jne 0x15818; xor eax, eax; leave; ret; 
0x50521e4c  # pop esi; test eax, eax; jne 0x21e55; xor eax, eax; leave; ret; 
0x50518fd8  # pop esi; xor byte ptr [ebx + 0x5f], bl; pop esi; ret; 
0x50509004  # pop esi; xor eax, eax; pop ebx; ret 0x10; 
0x5050ec87  # pop esi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0x10; 
0x5050c75c  # pop esi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0xc; 
0x50504379  # pop esi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret 4; 
0x50518343  # pop esi; xor ecx, ebp; pop ebx; call 0x32377; leave; ret; 
0x5050c762  # pop esp; add al, byte ptr [eax]; leave; ret 0xc; 
0x5052bad3  # pop esp; and al, 8; call 0x2b351; pop ebx; ret; 
0x505277e8  # pop esp; leave; ret; 
0x50521b17  # pop esp; push 2; call 0x1c908; pop ecx; pop ecx; ret; 
0x50536f79  # pop ss; add byte ptr [eax], al; ret; 
0x5053438c  # pop ss; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x50534383  # pop ss; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50515779  # pop ss; mov ecx, dword ptr [esi]; add dword ptr [eax + 0x18], ecx; ret; 
0x5051e835  # pop ss; xor eax, eax; mov byte ptr [edx], 0; inc eax; ret; 
0x50516707  # popal; add byte ptr [eax], al; pop ecx; add eax, esi; pop esi; ret; 
0x50532b6d  # popal; jo 0x32b6d; leave; ret; 
0x50532bee  # popal; jo 0x32bee; leave; ret; 
0x50532c72  # popal; jo 0x32c72; leave; ret; 
0x50532cf3  # popal; jo 0x32cf3; leave; ret; 
0x50532d77  # popal; jo 0x32d77; leave; ret; 
0x50533116  # popal; jo 0x33116; pop ebx; leave; ret; 
0x5053391e  # popal; jo 0x3391e; pop esi; pop ebx; leave; ret; 
0x50539c5d  # popal; jo 0x39c5d; pop ebx; leave; ret; 
0x5053a14e  # popal; jo 0x3a14e; leave; ret; 
0x5053a211  # popal; jo 0x3a211; leave; ret; 
0x5053b656  # popal; jo 0x3b656; pop ebx; leave; ret; 
0x5053b735  # popal; jo 0x3b735; pop esi; pop ebx; leave; ret; 
0x50541372  # popal; jo 0x41372; leave; ret; 
0x5054158e  # popal; jo 0x4158e; leave; ret; 
0x50541c74  # popal; jo 0x41c74; pop edi; pop ebx; leave; ret; 
0x50543a1e  # popal; jo 0x43a1e; leave; ret; 
0x50543b16  # popal; jo 0x43b16; pop esi; pop ebx; leave; ret; 
0x50549998  # popal; jo 0x49998; leave; ret; 
0x50549bb4  # popal; jo 0x49bb4; leave; ret; 
0x5051618c  # popal; push ecx; push eax; pop edi; ret; 
0x50512952  # popfd; add al, byte ptr [eax]; add byte ptr [esi - 0x75], dl; ret; 
0x50508593  # popfd; add al, byte ptr [eax]; leave; ret 0x20; 
0x50505780  # popfd; mov eax, 0xe8fffffe; call 0x3b005ba3; ret; 
0x505017bd  # popfd; mov eax, esi; pop edi; pop esi; ret 4; 
0x505287bd  # popfd; push 0x8bffffff; ret; 
0x50545c14  # prefetch byte ptr [eax]; add byte ptr [eax], 0; ret; 
0x50533a91  # psubsb mm7, mm6; add byte ptr [eax], al; mov dword ptr [eax], 0xc; xor eax, eax; pop esi; ret; 
0x505428d3  # psubsb mm7, qword ptr [eax + edi*2 + 0xc7ffff]; or dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x5050ab8e  # push -1; dec dword ptr [ebx + 0x75f33bf0]; or byte ptr [ebx + 0x4de9ffc8], al; add al, byte ptr [eax]; add byte ptr [ebx + 0x3b571045], cl; ret; 
0x50536eb4  # push -1; push dword ptr [ebp + 8]; call 0x36e10; add esp, 0x14; pop ebp; ret; 
0x5051d1bd  # push -1; push dword ptr [esp + 0x10]; call 0x16b67; add esp, 0x10; ret; 
0x505092d6  # push -1; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x50524788  # push -1; push dword ptr [esp + 0xc]; call 0x242a8; pop ecx; pop ecx; ret; 
0x5052018d  # push -2; pop eax; pop esi; ret; 
0x50539871  # push -3; call 0x396ce; pop ecx; mov dword ptr [0x5055e26c], 1; xor eax, eax; ret; 
0x50515f52  # push 0; add byte ptr [ebx + 0x5e5f10c4], al; pop ebx; ret; 
0x50501ce0  # push 0; add cl, ch; retf 0; add byte ptr [ebx + 0x10886], cl; add byte ptr [ebx], bh; ret; 
0x5050d4c7  # push 0; call 0x11aa; mov eax, dword ptr [esi + 0xd8]; pop esi; ret 4; 
0x50524e56  # push 0; call 0x24e19; add esp, 0xc; ret; 
0x50503736  # push 0; call 0x33e8; ret 8; 
0x5053416c  # push 0; call 0x33f1d; pop ecx; pop ebp; ret; 
0x50534622  # push 0; call 0x343a8; add esp, 0x14; pop ebp; ret; 
0x50503748  # push 0; call 0x35ee; ret 8; 
0x50537381  # push 0; call 0x3730f; pop ecx; ret; 
0x50537d05  # push 0; call 0x37bbf; add esp, 0xc; ret; 
0x5053fe6f  # push 0; call 0x38c24; pop ecx; ret; 
0x50541383  # push 0; call 0x41324; add esp, 0x10; pop ebp; ret; 
0x5050103d  # push 0; call dword ptr [0x5054a240]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50537bb3  # push 0; call dword ptr [0x5055e270]; xor eax, eax; pop ebp; ret; 
0x5053ee4f  # push 0; call eax; ret; 
0x50537d03  # push 0; push 0; call 0x37bbf; add esp, 0xc; ret; 
0x505064a1  # push 0; push 0x5055c970; call dword ptr [0x5054a18c]; ret; 
0x50533258  # push 0; push dword ptr [ebp + 0x10]; call 0x33209; mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x50532db3  # push 0; push dword ptr [ebp + 8]; call 0x345d7; add esp, 0xc; pop ebp; ret; 
0x50525de4  # push 0; push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x25c6e; add esp, 0xc; ret; 
0x5054853c  # push 0; push dword ptr [esp + 8]; call 0x48394; ret 4; 
0x50537782  # push 0; push eax; call dword ptr [0x5054a02c]; pop ebp; ret; 
0x50506516  # push 0; push eax; call dword ptr [0x5054a084]; ret 4; 
0x50506562  # push 0; push eax; call dword ptr [0x5054a084]; ret 8; 
0x5051967b  # push 0; xor eax, eax; call 0x18eb6; add esp, 0x18; pop esi; ret; 
0x505375e4  # push 0x10; call 0x37a7b; pop ecx; mov eax, esi; pop esi; ret; 
0x50521be0  # push 0x10; push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x21b22; add esp, 0xc; ret; 
0x5054067e  # push 0x16; pop eax; pop edi; pop esi; pop ebp; ret; 
0x5052d6c5  # push 0x18; pop eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x50541098  # push 0x18; pop eax; pop esi; ret; 
0x50535f2d  # push 0x1a; pop eax; pop esi; ret; 
0x505345f2  # push 0x1eb5055; push eax; call 0x343a8; add esp, 0x14; pop ebp; ret; 
0x505393f3  # push 0x20; call 0x37a7b; pop ecx; mov eax, esi; call 0x38721; ret; 
0x5052d6da  # push 0x20; pop eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x505475b2  # push 0x276d; call 0x4756b; or eax, 0xffffffff; ret; 
0x50524353  # push 0x2bffca83; rol dword ptr [ebx], 1; ret 0x463b; 
0x5053461d  # push 0x2eb5055; push 0; call 0x343a8; add esp, 0x14; pop ebp; ret; 
0x50516808  # push 0x38; pop eax; ret; 
0x50515ddb  # push 0x3b000001; ret; 
0x50543c3b  # push 0x3b5055d5; ret; 
0x505484f7  # push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x5052d698  # push 0x3f0; push 1; call 0x1c908; pop ecx; pop ecx; ret; 
0x50549199  # push 0x3f8; call 0x47c81; xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x50528740  # push 0x3ffffff; ret; 
0x50541286  # push 0x5054124d; call 0x3730f; pop ecx; mov dword ptr [0x5055de98], eax; ret; 
0x50544015  # push 0x50552104; call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x5050112a  # push 0x5055c948; call dword ptr [0x5054a020]; ret; 
0x5050114b  # push 0x5055c948; call dword ptr [0x5054a024]; ret; 
0x505064a3  # push 0x5055c970; call dword ptr [0x5054a18c]; ret; 
0x505112ea  # push 0x5055ca4c; call dword ptr [0x5054a020]; ret; 
0x50511354  # push 0x5055ca4c; call dword ptr [0x5054a024]; ret; 
0x50547c85  # push 0x5055e108; call dword ptr [0x5054a18c]; ret 4; 
0x50521b16  # push 0x5c; push 2; call 0x1c908; pop ecx; pop ecx; ret; 
0x5050a4b8  # push 0x8004271e; call 0x11aa; or eax, 0xffffffff; ret 8; 
0x50501673  # push 0x80042736; call 0x11aa; or eax, 0xffffffff; pop esi; ret 8; 
0x50501a0f  # push 0x80042749; call 0x11aa; or eax, 0xffffffff; ret 8; 
0x5050135d  # push 0x80042ee2; call 0x11aa; call 0x1136; or eax, 0xffffffff; pop ebp; ret; 
0x50503817  # push 0x80042ee2; call 0x11aa; xor eax, eax; ret; 
0x5053c427  # push 0x8559ffff; sal byte ptr [ebp - 0x1f], 0x8b; ret; 
0x505287be  # push 0x8bffffff; ret; 
0x50538cf5  # push 0xa; call 0x38c24; pop ecx; ret; 
0x50532b86  # push 0xb70f5055; add al, 0x41; and eax, 0x103; pop ebp; ret; 
0x50532d90  # push 0xb70f5055; add al, 0x41; and eax, 0x107; pop ebp; ret; 
0x50532c8b  # push 0xb70f5055; add al, 0x41; and eax, 0x80; pop ebp; ret; 
0x50532c07  # push 0xb70f5055; add al, 0x41; and eax, 4; pop ebp; ret; 
0x50538f66  # push 0xc0000409; call dword ptr [0x5054a128]; push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x5052bac1  # push 0xc4830000; adc al, 0x5e; ret; 
0x505160b3  # push 0xc4830000; adc byte ptr [edi + 0x5e], bl; leave; ret; 
0x50542339  # push 0xc483ffff; adc al, 0x83; retf 0x8bff; ret 0x5beb; 
0x50539b9f  # push 0xc; call 0x38c24; pop ecx; mov esi, dword ptr [ebp - 0x1c]; ret; 
0x50537554  # push 0xc; call 0x38c24; pop ecx; ret; 
0x5053754b  # push 0xd; call 0x38c24; pop ecx; ret; 
0x5053a174  # push 0xd; pop eax; pop ebp; ret; 
0x5053e08c  # push 0xff; call 0x3deb5; pop ecx; pop ecx; ret; 
0x50537a98  # push 0xff; call eax; add esp, 0xc; pop ebp; ret; 
0x5052a6c4  # push 1; call 0x1c908; pop ecx; pop ecx; ret; 
0x50535ed3  # push 1; call 0x35da6; pop ecx; ret; 
0x50535e77  # push 1; call 0x38c24; pop ecx; ret; 
0x5050103b  # push 1; push 0; call dword ptr [0x5054a240]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50537d01  # push 1; push 0; push 0; call 0x37bbf; add esp, 0xc; ret; 
0x50531721  # push 1; push eax; call dword ptr [ecx + 8]; add esp, 0x10; pop ebp; ret; 
0x50521b18  # push 2; call 0x1c908; pop ecx; pop ecx; ret; 
0x50542f3f  # push 2; call 0x37a7b; pop ecx; ret; 
0x50537bb1  # push 2; push 0; call dword ptr [0x5055e270]; xor eax, eax; pop ebp; ret; 
0x5052a6a6  # push 3; call 0x1c908; pop ecx; pop ecx; ret; 
0x50536163  # push 4; call 0x38c24; pop ecx; ret; 
0x5052a6b5  # push 6; call 0x1c908; pop ecx; pop ecx; ret; 
0x505322f5  # push 6; call 0x38c24; pop ecx; ret; 
0x50531e46  # push 7; call 0x38c24; pop ecx; ret; 
0x50537af0  # push 8; call 0x38c24; pop ecx; ret; 
0x50537ae7  # push 8; call 0x38cfe; pop ecx; ret; 
0x505064f6  # push 8; push eax; call dword ptr [0x5054a07c]; ret 4; 
0x5050653e  # push 8; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x50547c6f  # push cs; add byte ptr [eax], al; add byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x50531573  # push cs; add byte ptr [eax], al; leave; ret; 
0x5050d65f  # push cs; add byte ptr [eax], al; xor eax, eax; pop esi; pop edi; ret 8; 
0x5051577b  # push cs; add dword ptr [eax + 0x18], ecx; ret; 
0x5051cd21  # push cs; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x5051cd74  # push cs; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; ret; 
0x5050d55d  # push cs; mov edx, dword ptr [esp + 8]; lea ecx, [eax + 0xab4]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x5051f31a  # push cs; movzx eax, word ptr [eax + 8]; push eax; call 0x4700e; movzx eax, ax; ret; 
0x505475b1  # push cs; push 0x276d; call 0x4756b; or eax, 0xffffffff; ret; 
0x5053a173  # push cs; push 0xd; pop eax; pop ebp; ret; 
0x50539396  # push cs; sbb eax, 0x80d18a10; ret 0xeb20; 
0x50533a7d  # push cs; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5050a4b9  # push ds; daa; add al, 0x80; call 0x11aa; or eax, 0xffffffff; ret 8; 
0x5051c7ff  # push ds; mov eax, esi; pop esi; leave; ret; 
0x5053fce8  # push dword ptr [0x5055de8c]; call 0x3738a; pop ecx; ret; 
0x50535fa6  # push dword ptr [0x5055e274]; call 0x36451; pop ecx; ret; 
0x50516845  # push dword ptr [eax + 0x10]; call 0x1f32c; pop ecx; ret; 
0x505271aa  # push dword ptr [eax + 0x44]; call 0x1a725; pop ecx; pop ecx; ret; 
0x50531797  # push dword ptr [eax + 0xc]; call 0x2f672; add esp, 0xc; ret; 
0x50527b92  # push dword ptr [eax + 8]; push dword ptr [eax]; push dword ptr [esp + 0x10]; call 0x2600b; add esp, 0xc; ret; 
0x50501199  # push dword ptr [eax + ecx + 0x50]; call dword ptr [0x5054a030]; ret; 
0x50535e4d  # push dword ptr [eax + esi*4]; push esi; call 0x36062; pop ecx; pop ecx; ret; 
0x5051159b  # push dword ptr [eax]; call 0x33af0; pop ecx; pop ecx; ret; 
0x5051e3ea  # push dword ptr [eax]; call dword ptr [0x5054a0ec]; mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50527b95  # push dword ptr [eax]; push dword ptr [esp + 0x10]; call 0x2600b; add esp, 0xc; ret; 
0x5053325a  # push dword ptr [ebp + 0x10]; call 0x33209; mov eax, dword ptr [ebp + 0xc]; pop ebp; ret; 
0x5053b2d7  # push dword ptr [ebp + 0x10]; push dword ptr [ebp + 0xc]; call 0x3b1fb; add esp, 0x18; pop ebp; ret; 
0x50505ab9  # push dword ptr [ebp + 0x10]; push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x51b3; pop ebp; ret 0x1c; 
0x50505f07  # push dword ptr [ebp + 0x10]; push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x5bb0; pop ebp; ret 0x24; 
0x50536e9c  # push dword ptr [ebp + 0x18]; call 0x36026; pop ecx; ret; 
0x505371fb  # push dword ptr [ebp + 0xc]; call 0x36026; pop ecx; ret; 
0x5053b2da  # push dword ptr [ebp + 0xc]; call 0x3b1fb; add esp, 0x18; pop ebp; ret; 
0x5051433c  # push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x50514333  # push dword ptr [ebp + 0xc]; call dword ptr [0x5054a04c]; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x5052df9d  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1f473; add esp, 0x14; pop ebp; ret; 
0x50536f8e  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x36ec3; add esp, 0xc; pop ebp; ret; 
0x5053a456  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3a229; add esp, 0xc; pop ebp; ret; 
0x5053a529  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3a466; add esp, 0xc; pop ebp; ret; 
0x5053b743  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3b66f; add esp, 0xc; pop ebp; ret; 
0x5053e190  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3e0d0; add esp, 0x14; pop ebp; ret; 
0x5053e428  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3e3dc; add esp, 0x10; pop ebp; ret; 
0x5053e6cc  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed1b  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3eb46; add esp, 0x14; pop ebp; ret; 
0x5053ed96  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3ecfb; add esp, 0x1c; pop ebp; ret; 
0x5053fc83  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x3fbfb; add esp, 0x10; pop ebp; ret; 
0x505428b7  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x42796; add esp, 0x10; pop ebp; ret; 
0x50543143  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x42fca; add esp, 0x14; pop ebp; ret; 
0x50543388  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x43153; add esp, 0x10; pop ebp; ret; 
0x5054604c  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x45f89; add esp, 0xc; pop ebp; ret; 
0x50505abc  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x51b3; pop ebp; ret 0x1c; 
0x50515115  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call dword ptr [esi + 4]; add esp, 0x18; leave; ret; 
0x5052dc49  # push dword ptr [ebp + 0xc]; push eax; call dword ptr [ecx]; add esp, 0x18; pop ebp; ret; 
0x505475af  # push dword ptr [ebp + 0xe]; push 0x276d; call 0x4756b; or eax, 0xffffffff; ret; 
0x5053efe7  # push dword ptr [ebp + 3]; or dword ptr [esi], eax; ret; 
0x50547594  # push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x5051e2ef  # push dword ptr [ebp + 4]; xor eax, eax; pop esi; ret; 
0x5052dfa0  # push dword ptr [ebp + 8]; call 0x1f473; add esp, 0x14; pop ebp; ret; 
0x50532b96  # push dword ptr [ebp + 8]; call 0x32b1c; pop ecx; pop ecx; pop ebp; ret; 
0x50532c15  # push dword ptr [ebp + 8]; call 0x32ba2; pop ecx; pop ecx; pop ebp; ret; 
0x50532c9b  # push dword ptr [ebp + 8]; call 0x32c21; pop ecx; pop ecx; pop ebp; ret; 
0x50532d1a  # push dword ptr [ebp + 8]; call 0x32ca7; pop ecx; pop ecx; pop ebp; ret; 
0x50532da0  # push dword ptr [ebp + 8]; call 0x32d26; pop ecx; pop ecx; pop ebp; ret; 
0x5053313c  # push dword ptr [ebp + 8]; call 0x33006; pop ecx; pop ecx; pop ebp; ret; 
0x50532db5  # push dword ptr [ebp + 8]; call 0x345d7; add esp, 0xc; pop ebp; ret; 
0x50535ec9  # push dword ptr [ebp + 8]; call 0x36026; pop ecx; ret; 
0x50536eb6  # push dword ptr [ebp + 8]; call 0x36e10; add esp, 0x14; pop ebp; ret; 
0x50536f91  # push dword ptr [ebp + 8]; call 0x36ec3; add esp, 0xc; pop ebp; ret; 
0x5053a21d  # push dword ptr [ebp + 8]; call 0x3a1de; pop ecx; pop ecx; pop ebp; ret; 
0x5053a459  # push dword ptr [ebp + 8]; call 0x3a229; add esp, 0xc; pop ebp; ret; 
0x5053a52c  # push dword ptr [ebp + 8]; call 0x3a466; add esp, 0xc; pop ebp; ret; 
0x5053b663  # push dword ptr [ebp + 8]; call 0x3b5b6; pop ecx; pop ecx; pop ebp; ret; 
0x5053b746  # push dword ptr [ebp + 8]; call 0x3b66f; add esp, 0xc; pop ebp; ret; 
0x5053e193  # push dword ptr [ebp + 8]; call 0x3e0d0; add esp, 0x14; pop ebp; ret; 
0x5053e45e  # push dword ptr [ebp + 8]; call 0x3e2cb; pop ecx; pop ecx; pop ebp; ret; 
0x5053e471  # push dword ptr [ebp + 8]; call 0x3e33e; pop ecx; pop ecx; pop ebp; ret; 
0x5053e42b  # push dword ptr [ebp + 8]; call 0x3e3dc; add esp, 0x10; pop ebp; ret; 
0x5053e6cf  # push dword ptr [ebp + 8]; call 0x3e5ec; add esp, 0x18; pop ebp; ret; 
0x5053ed1e  # push dword ptr [ebp + 8]; call 0x3eb46; add esp, 0x14; pop ebp; ret; 
0x5053ed99  # push dword ptr [ebp + 8]; call 0x3ecfb; add esp, 0x1c; pop ebp; ret; 
0x5053fc86  # push dword ptr [ebp + 8]; call 0x3fbfb; add esp, 0x10; pop ebp; ret; 
0x5053a7a2  # push dword ptr [ebp + 8]; call 0x42052; pop ecx; ret; 
0x505428ba  # push dword ptr [ebp + 8]; call 0x42796; add esp, 0x10; pop ebp; ret; 
0x50543146  # push dword ptr [ebp + 8]; call 0x42fca; add esp, 0x14; pop ebp; ret; 
0x5054338b  # push dword ptr [ebp + 8]; call 0x43153; add esp, 0x10; pop ebp; ret; 
0x5054350f  # push dword ptr [ebp + 8]; call 0x43398; add esp, 0x10; pop ebp; ret; 
0x50543ff9  # push dword ptr [ebp + 8]; call 0x43eb7; add esp, 0x10; pop esi; pop ebp; ret; 
0x5054604f  # push dword ptr [ebp + 8]; call 0x45f89; add esp, 0xc; pop ebp; ret; 
0x50505abf  # push dword ptr [ebp + 8]; call 0x51b3; pop ebp; ret 0x1c; 
0x50515118  # push dword ptr [ebp + 8]; call dword ptr [esi + 4]; add esp, 0x18; leave; ret; 
0x50537ac8  # push dword ptr [ebp + 8]; call eax; pop ebp; ret; 
0x50541380  # push dword ptr [ebp + 8]; push 0; call 0x41324; add esp, 0x10; pop ebp; ret; 
0x50537956  # push dword ptr [ebp - 0x36]; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x505379f0  # push dword ptr [ebp - 0x3f]; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50537a42  # push dword ptr [ebp - 0x43]; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5052d596  # push dword ptr [ebp - 0xc]; call 0x323c0; add esp, 0xc; pop edi; leave; ret; 
0x5050161c  # push dword ptr [ebp - 4]; call 0x11aa; pop edi; pop esi; leave; ret 4; 
0x5052f15c  # push dword ptr [ebp - 4]; call 0x1c966; add esp, 0xc; leave; ret; 
0x505235f3  # push dword ptr [ebp - 4]; call 0x25932; pop ecx; pop ecx; leave; ret; 
0x50540f16  # push dword ptr [ebx]; dec dword ptr [ebx + 0x46a0c75]; call 0x38c24; pop ecx; ret; 
0x50501ad5  # push dword ptr [ebx]; fstp xword ptr [ebx]; ret; 
0x50521910  # push dword ptr [ebx]; leave; mov dword ptr [eax + 0x50], ecx; mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x50502be7  # push dword ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 0xc; 
0x50502cb0  # push dword ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 8; 
0x50540503  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5b], 0x5e; leave; ret; 
0x50501bef  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 4; 
0x50507910  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 8; 
0x50511537  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x50508470  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x20; 
0x505029a5  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5d; ret 0xc; 
0x50535c27  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x5051da67  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0xc9; ret; 
0x50510e95  # push dword ptr [ebx]; rcr byte ptr [esi + 0x5f], 0xc9; ret 0x1c; 
0x50534359  # push dword ptr [ebx]; ret 0x118b; 
0x5053423a  # push dword ptr [ebx]; ret 0x168b; 
0x50533bbb  # push dword ptr [ebx]; ret 0xc183; 
0x50514828  # push dword ptr [ebx]; rol byte ptr [eax + 0x5e], 0x5d; ret 4; 
0x505311ba  # push dword ptr [ebx]; rol byte ptr [ebx + 0x418904c4], 0x60; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x50531b3b  # push dword ptr [ebx]; shr al, 0xde; imul eax, dword ptr [eax], 0; ret; 
0x5053777f  # push dword ptr [ecx + ecx + 0x6a]; add byte ptr [eax - 1], dl; adc eax, 0x5054a02c; pop ebp; ret; 
0x505056d9  # push dword ptr [edi + ecx*8 - 0x75]; pop ebp; sbb byte ptr [ebp - 0x74fb8b25], al; ret; 
0x5053b2be  # push dword ptr [edi]; call 0x42052; pop ecx; ret; 
0x50509131  # push dword ptr [edx + ebx - 0xa]; ret; 
0x50519744  # push dword ptr [esi + 0x30]; call 0x26694; pop ecx; ret; 
0x5051974e  # push dword ptr [esi + 0x30]; call 0x2727f; pop ecx; ret; 
0x5052f3cf  # push dword ptr [esi + 8]; call dword ptr [0x5054a13c]; mov dword ptr [esi + 0x18], 1; ret; 
0x50524e9a  # push dword ptr [esi]; call 0x24e19; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x50538d26  # push dword ptr [esi]; call dword ptr [0x5054a020]; pop esi; pop ebp; ret; 
0x5051cba9  # push dword ptr [esi]; mov dword ptr [esi + 8], eax; call 0x1c930; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x5051d1bf  # push dword ptr [esp + 0x10]; call 0x16b67; add esp, 0x10; ret; 
0x5051d8ff  # push dword ptr [esp + 0x10]; call 0x1d704; add esp, 0x10; mov dword ptr [eax + 0x24], 1; ret; 
0x5051e1cf  # push dword ptr [esp + 0x10]; call 0x1e1aa; add esp, 0x10; ret; 
0x50527b97  # push dword ptr [esp + 0x10]; call 0x2600b; add esp, 0xc; ret; 
0x5052ba1f  # push dword ptr [esp + 0x10]; call 0x2b7c7; pop ecx; pop ecx; pop esi; ret; 
0x5052d926  # push dword ptr [esp + 0x10]; call 0x2d8dd; add esp, 0x10; ret; 
0x50547a6d  # push dword ptr [esp + 0x10]; call 0x323c0; add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x505092e0  # push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x5051d8fb  # push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x1d704; add esp, 0x10; mov dword ptr [eax + 0x24], 1; ret; 
0x5051e1cb  # push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x1e1aa; add esp, 0x10; ret; 
0x505092dc  # push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x505092d8  # push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x90e7; ret 0xc; 
0x50516c06  # push dword ptr [esp + 0x10]; push edx; push eax; call ecx; ret; 
0x5051a1da  # push dword ptr [esp + 0x14]; call 0x18dfe; add esp, 0x10; pop esi; ret; 
0x5052492c  # push dword ptr [esp + 0x14]; call 0x2481a; add esp, 0x14; ret; 
0x50524928  # push dword ptr [esp + 0x14]; push dword ptr [esp + 0x14]; call 0x2481a; add esp, 0x14; ret; 
0x50524924  # push dword ptr [esp + 0x14]; push dword ptr [esp + 0x14]; push dword ptr [esp + 0x14]; call 0x2481a; add esp, 0x14; ret; 
0x50521c98  # push dword ptr [esp + 0x18]; call 0x21bf3; add esp, 0x10; pop ebx; ret; 
0x5052f3a7  # push dword ptr [esp + 0x18]; call dword ptr [0x5054a060]; xor eax, eax; add esp, 0x14; ret 4; 
0x505313b5  # push dword ptr [esp + 0xc]; call 0x1c966; add esp, 0xc; ret; 
0x50521be6  # push dword ptr [esp + 0xc]; call 0x21b22; add esp, 0xc; ret; 
0x5052478a  # push dword ptr [esp + 0xc]; call 0x242a8; pop ecx; pop ecx; ret; 
0x50522f37  # push dword ptr [esp + 0xc]; call 0x259c8; add esp, 0xc; ret; 
0x50525dea  # push dword ptr [esp + 0xc]; call 0x25c6e; add esp, 0xc; ret; 
0x5052a89c  # push dword ptr [esp + 0xc]; call 0x2a2dc; pop ecx; pop ecx; ret; 
0x5052d72f  # push dword ptr [esp + 0xc]; call 0x2d3eb; pop ecx; pop ecx; ret; 
0x5052d743  # push dword ptr [esp + 0xc]; call 0x2d4b0; pop ecx; pop ecx; ret; 
0x5052d757  # push dword ptr [esp + 0xc]; call 0x2d5a4; pop ecx; pop ecx; ret; 
0x5052d91d  # push dword ptr [esp + 0xc]; call 0x2d81f; push dword ptr [esp + 0x10]; call 0x2d8dd; add esp, 0x10; ret; 
0x50509c7f  # push dword ptr [esp + 0xc]; call 0x3824; ret 4; 
0x50531738  # push dword ptr [esp + 0xc]; mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 0xc]; add esp, 0xc; ret; 
0x50531793  # push dword ptr [esp + 0xc]; push dword ptr [eax + 0xc]; call 0x2f672; add esp, 0xc; ret; 
0x50521be2  # push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x21b22; add esp, 0xc; ret; 
0x50525de6  # push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x25c6e; add esp, 0xc; ret; 
0x505266ff  # push dword ptr [esp + 0xc]; push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5051568b  # push dword ptr [esp + 0xc]; push esi; call 0x1557b; add esp, 0xc; pop esi; ret; 
0x50502af3  # push dword ptr [esp + 4]; call 0x1684; test eax, eax; je 0x2b06; mov eax, dword ptr [eax + 0xac]; ret 4; 
0x5050e59c  # push dword ptr [esp + 4]; call 0x1684; test eax, eax; jne 0xe5af; or eax, 0xffffffff; ret 8; 
0x50513e82  # push dword ptr [esp + 4]; call 0x16853; pop ecx; ret 4; 
0x50511360  # push dword ptr [esp + 4]; call 0x16b7a; pop ecx; ret 4; 
0x50546f8d  # push dword ptr [esp + 4]; call eax; ret 4; 
0x50506512  # push dword ptr [esp + 4]; push 0; push eax; call dword ptr [0x5054a084]; ret 4; 
0x505064f2  # push dword ptr [esp + 4]; push 8; push eax; call dword ptr [0x5054a07c]; ret 4; 
0x5052d3cf  # push dword ptr [esp + 4]; push eax; call dword ptr [eax + 0x3c0]; pop ecx; pop ecx; ret; 
0x5052d3dd  # push dword ptr [esp + 4]; push eax; call dword ptr [eax + 0x3c4]; pop ecx; pop ecx; ret; 
0x505152c0  # push dword ptr [esp + 8]; call 0x1520c; pop ecx; pop esi; ret; 
0x5051567d  # push dword ptr [esp + 8]; call 0x1562b; pop ecx; pop esi; ret; 
0x50511371  # push dword ptr [esp + 8]; call 0x16b8f; pop ecx; pop ecx; ret 8; 
0x50502add  # push dword ptr [esp + 8]; call 0x16e3; test eax, eax; je 0x2af0; mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x5051cb90  # push dword ptr [esp + 8]; call 0x1ca1a; pop ecx; pop ecx; ret; 
0x5051cd85  # push dword ptr [esp + 8]; call 0x1cccb; pop ecx; pop esi; ret; 
0x505313ac  # push dword ptr [esp + 8]; call 0x312aa; push dword ptr [esp + 0xc]; call 0x1c966; add esp, 0xc; ret; 
0x5054853e  # push dword ptr [esp + 8]; call 0x48394; ret 4; 
0x50515068  # push dword ptr [esp + 8]; mov ecx, dword ptr [eax]; push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x50524e52  # push dword ptr [esp + 8]; push 0; call 0x24e19; add esp, 0xc; ret; 
0x50503732  # push dword ptr [esp + 8]; push 0; call 0x33e8; ret 8; 
0x50503744  # push dword ptr [esp + 8]; push 0; call 0x35ee; ret 8; 
0x5050655e  # push dword ptr [esp + 8]; push 0; push eax; call dword ptr [0x5054a084]; ret 8; 
0x5050653a  # push dword ptr [esp + 8]; push 8; push eax; call dword ptr [0x5054a07c]; ret 8; 
0x50524e96  # push dword ptr [esp + 8]; push dword ptr [esi]; call 0x24e19; add esp, 0xc; mov dword ptr [esi], eax; ret; 
0x5050372e  # push dword ptr [esp + 8]; push dword ptr [esp + 8]; push 0; call 0x33e8; ret 8; 
0x50503740  # push dword ptr [esp + 8]; push dword ptr [esp + 8]; push 0; call 0x35ee; ret 8; 
0x50526653  # push dword ptr [esp + 8]; push eax; call 0x1a725; pop ecx; pop ecx; ret; 
0x505162c5  # push dword ptr [esp + 8]; push eax; call 0x1ca8c; add esp, 0xc; ret; 
0x50527869  # push eax; aam 0x55; push eax; call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x50516495  # push eax; adc al, 0xeb; add eax, 0x9c69e8; add byte ptr [ecx - 0x75], bl; xchg dword ptr [eax + 0x3b000000], edi; ret; 
0x50524c48  # push eax; adc byte ptr [ebp - 0x74f88a2e], al; push eax; or al, 0x85; sal byte ptr [esp + eax - 0x75], cl; ret 0x9eb; 
0x5052e2fa  # push eax; add al, 0; add cl, cl; ret; 
0x5051ce02  # push eax; add al, 0x2b; rol dword ptr [ebx + 0x37301fa], 1; xor eax, eax; ret; 
0x50527278  # push eax; add al, 0x59; pop ecx; pop edi; pop esi; ret; 
0x5051514f  # push eax; add al, 0x83; les ecx, ptr [ecx + ecx*8]; ret; 
0x50526687  # push eax; add al, 0x83; les edx, ptr [eax]; pop edi; pop esi; ret; 
0x5050d294  # push eax; add al, byte ptr [eax]; leave; ret 0xc; 
0x50503813  # push eax; add byte ptr [ebp + 0xc], dh; push 0x80042ee2; call 0x11aa; xor eax, eax; ret; 
0x5051e8c2  # push eax; add byte ptr [ecx + 0x5e], bl; ret; 
0x5053987e  # push eax; add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; ret; 
0x505166f4  # push eax; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret 0xed74; 
0x5053b6f7  # push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50533393  # push eax; add dword ptr [ebp + 4], esi; xor eax, eax; inc eax; ret; 
0x5052f7f3  # push eax; add esi, 4; call 0x2f3b9; add esp, 0x10; pop esi; ret; 
0x50526ddd  # push eax; and byte ptr [ebx + 0x45891cc4], al; or byte ptr [esi + 0x3b], dl; ret; 
0x505064d5  # push eax; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x50516f51  # push eax; call 0x16e25; pop ecx; pop ecx; ret; 
0x50516408  # push eax; call 0x17cfa; add esp, 0x10; ret; 
0x50526657  # push eax; call 0x1a725; pop ecx; pop ecx; ret; 
0x50516704  # push eax; call 0x1c895; pop ecx; add eax, esi; pop esi; ret; 
0x505168f7  # push eax; call 0x1c973; pop ecx; mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x5052bb3a  # push eax; call 0x1c973; pop ecx; pop ecx; ret; 
0x505162c9  # push eax; call 0x1ca8c; add esp, 0xc; ret; 
0x5051ebcd  # push eax; call 0x1eb23; pop ecx; ret; 
0x5051e87a  # push eax; call 0x2420c; pop ecx; mov dword ptr [0x5055cf2c], eax; ret; 
0x50527904  # push eax; call 0x24dea; pop ecx; pop ecx; ret; 
0x50521e5d  # push eax; call 0x25932; pop ecx; pop ecx; leave; ret; 
0x5052f235  # push eax; call 0x26341; pop ecx; pop ecx; leave; ret; 
0x5052d6b2  # push eax; call 0x2d127; pop ecx; pop ecx; ret; 
0x50516c69  # push eax; call 0x323c0; add esp, 0x14; pop esi; ret; 
0x505151aa  # push eax; call 0x323c0; add esp, 0xc; pop esi; ret; 
0x505271e6  # push eax; call 0x32dc2; pop ecx; pop esi; ret; 
0x5052d7ab  # push eax; call 0x32dd0; add esp, 0x28; leave; ret; 
0x50521dd6  # push eax; call 0x32dd0; add esp, 0xc; pop ebx; leave; ret; 
0x505345f7  # push eax; call 0x343a8; add esp, 0x14; pop ebp; ret; 
0x50526e2e  # push eax; call 0x3462e; add esp, 0xc; pop esi; ret; 
0x50536111  # push eax; call 0x36091; add esp, 0x10; pop esi; pop ebp; ret; 
0x50539d60  # push eax; call 0x36451; pop ecx; pop ebp; ret; 
0x50535fab  # push eax; call 0x36451; pop ecx; ret; 
0x50537d4e  # push eax; call 0x3730f; add esp, 0x24; mov dword ptr [0x50555fb8], eax; pop esi; ret; 
0x5054128a  # push eax; call 0x3730f; pop ecx; mov dword ptr [0x5055de98], eax; ret; 
0x5053fced  # push eax; call 0x3738a; pop ecx; ret; 
0x505386cc  # push eax; call 0x3855a; pop ecx; pop ecx; pop ebp; ret; 
0x5053604d  # push eax; call 0x38c24; pop ecx; pop ebp; ret; 
0x505364d0  # push eax; call 0x3a153; mov dword ptr [esi], eax; pop ecx; call 0x38721; ret; 
0x50513c70  # push eax; call 0x46c2b; push esi; call 0x16412; pop ecx; ret; 
0x5051f31f  # push eax; call 0x4700e; movzx eax, ax; ret; 
0x50506f61  # push eax; call 0x6502; and dword ptr [esi], 0; pop esi; ret 4; 
0x5053601d  # push eax; call dword ptr [0x5054a020]; pop ebp; ret; 
0x5050112e  # push eax; call dword ptr [0x5054a020]; ret; 
0x50536059  # push eax; call dword ptr [0x5054a024]; pop ebp; ret; 
0x5050114f  # push eax; call dword ptr [0x5054a024]; ret; 
0x50516bb3  # push eax; call dword ptr [0x5054a028]; ret; 
0x5053742e  # push eax; call dword ptr [0x5054a02c]; mov eax, esi; pop esi; ret; 
0x50537784  # push eax; call dword ptr [0x5054a02c]; pop ebp; ret; 
0x505475db  # push eax; call dword ptr [0x5054a02c]; xor eax, eax; ret; 
0x5054759a  # push eax; call dword ptr [0x5054a030]; movzx eax, al; and eax, 1; ret; 
0x5050119c  # push eax; call dword ptr [0x5054a030]; ret; 
0x5050c8d8  # push eax; call dword ptr [0x5054a04c]; xor eax, eax; ret 8; 
0x505064cf  # push eax; call dword ptr [0x5054a078]; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x505064f8  # push eax; call dword ptr [0x5054a07c]; ret 4; 
0x50506540  # push eax; call dword ptr [0x5054a07c]; ret 8; 
0x50506518  # push eax; call dword ptr [0x5054a084]; ret 4; 
0x50506564  # push eax; call dword ptr [0x5054a084]; ret 8; 
0x50544019  # push eax; call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x5051e3ca  # push eax; call dword ptr [0x5054a0e4]; neg eax; sbb eax, eax; ret; 
0x50543e95  # push eax; call dword ptr [0x5054a164]; mov esi, eax; mov eax, esi; call 0x38721; ret; 
0x5052786c  # push eax; call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x505010a2  # push eax; call dword ptr [0x5054a18c]; pop edi; pop esi; ret 4; 
0x505011da  # push eax; call dword ptr [0x5054a18c]; push esi; call dword ptr [0x5054a028]; pop esi; ret 4; 
0x50547c89  # push eax; call dword ptr [0x5054a18c]; ret 4; 
0x505064a7  # push eax; call dword ptr [0x5054a18c]; ret; 
0x50506586  # push eax; call dword ptr [0x5054a190]; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50538f71  # push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x5052d3d3  # push eax; call dword ptr [eax + 0x3c0]; pop ecx; pop ecx; ret; 
0x5052d3e1  # push eax; call dword ptr [eax + 0x3c4]; pop ecx; pop ecx; ret; 
0x5052dc71  # push eax; call dword ptr [eax + 0x48]; pop ecx; pop ecx; pop ebp; ret; 
0x505360f1  # push eax; call dword ptr [ebp + 8]; add esp, 0x10; pop edi; leave; ret; 
0x5052f19b  # push eax; call dword ptr [ebp + 8]; pop ecx; pop ecx; leave; ret; 
0x5052ef63  # push eax; call dword ptr [ecx + 0x10]; pop ecx; pop ecx; pop esi; ret; 
0x5052dd32  # push eax; call dword ptr [ecx + 0x10]; pop ecx; pop ecx; ret; 
0x5052db1f  # push eax; call dword ptr [ecx + 0x14]; pop ecx; pop ecx; ret; 
0x5052db2f  # push eax; call dword ptr [ecx + 0x18]; pop ecx; ret; 
0x50515d34  # push eax; call dword ptr [ecx + 0x1c]; pop ecx; pop ecx; mov dword ptr [esi + 0x28f0], edi; ret; 
0x5053173e  # push eax; call dword ptr [ecx + 0xc]; add esp, 0xc; ret; 
0x5052dd06  # push eax; call dword ptr [ecx + 0xc]; pop ecx; pop ecx; ret; 
0x5052dc84  # push eax; call dword ptr [ecx + 4]; add esp, 0xc; pop ebp; ret; 
0x5052ef44  # push eax; call dword ptr [ecx + 4]; add esp, 0xc; pop esi; ret; 
0x50531723  # push eax; call dword ptr [ecx + 8]; add esp, 0x10; pop ebp; ret; 
0x5052daa4  # push eax; call dword ptr [ecx + 8]; add esp, 0xc; pop ebp; ret; 
0x5051506e  # push eax; call dword ptr [ecx + 8]; add esp, 0xc; ret; 
0x5052dc4c  # push eax; call dword ptr [ecx]; add esp, 0x18; pop ebp; ret; 
0x5053170e  # push eax; call dword ptr [edx + 4]; add esp, 0xc; pop ebp; ret; 
0x5054404e  # push eax; call esi; pop esi; ret; 
0x50501196  # push eax; cmp eax, -1; je 0x11a4; push eax; call dword ptr [0x5054a030]; ret; 
0x50547591  # push eax; cmp eax, -1; jne 0x4759a; xor eax, eax; ret; 
0x5052dc73  # push eax; dec eax; pop ecx; pop ecx; pop ebp; ret; 
0x505265fe  # push eax; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x5053669e  # push eax; je 0x366a6; call 0x3edc7; fnclex; pop ebp; ret; 
0x50535f8b  # push eax; jl 0x35f5c; pop edi; xor eax, eax; pop esi; ret; 
0x50537ffa  # push eax; jl 0x37fbb; pop edi; pop esi; ret; 
0x50538c1e  # push eax; jl 0x38c07; pop esi; pop ebx; ret; 
0x50538f77  # push eax; leave; ret; 
0x505265f8  # push eax; mov al, byte ptr [eax + 0x5055cf38]; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x5051c87c  # push eax; mov byte ptr [ecx + 3], al; ret; 
0x5054401f  # push eax; mov dword ptr [0x50556ce4], eax; ret; 
0x50506442  # push eax; mov dword ptr [0x5055c970], eax; test eax, eax; jne 0x644c; ret; 
0x50508e8c  # push eax; mov dword ptr [0x5055ca40], edi; pop edi; pop esi; ret; 
0x50527872  # push eax; mov dword ptr [0x5055d454], eax; ret; 
0x5053fca4  # push eax; mov dword ptr [0x5055de8c], eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x5053fca9  # push eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x50521915  # push eax; mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x50538993  # push eax; mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x50509786  # push eax; mov dword ptr [ecx], eax; ret; 
0x5052f4f3  # push eax; mov dword ptr [esi + 0x18], 1; pop edi; leave; ret; 
0x5052f3d7  # push eax; mov dword ptr [esi + 0x18], 1; ret; 
0x50516b87  # push eax; mov eax, dword ptr [eax + 0xdc]; ret; 
0x50501044  # push eax; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x50532543  # push eax; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x5052ab27  # push eax; mov eax, dword ptr [esp + 0x10]; call 0x2a1fa; pop ecx; ret; 
0x5052baea  # push eax; mov eax, dword ptr [esp + 0xc]; call 0x2b41f; pop ecx; ret; 
0x5050118d  # push eax; mov eax, esi; pop esi; ret; 
0x5051e3f1  # push eax; mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50543e9b  # push eax; mov esi, eax; mov eax, esi; call 0x38721; ret; 
0x505475a0  # push eax; movzx eax, al; and eax, 1; ret; 
0x50526604  # push eax; movzx eax, al; ret; 
0x50532b88  # push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d92  # push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c8d  # push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532d0e  # push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 8; pop ebp; ret; 
0x5051e3d0  # push eax; neg eax; sbb eax, eax; ret; 
0x5052daed  # push eax; or al, 0x83; les ecx, ptr [esi + ebx*2]; pop ebp; ret; 
0x50524c4f  # push eax; or al, 0x85; sal byte ptr [esp + eax - 0x75], cl; ret 0x9eb; 
0x5052dcd9  # push eax; or byte ptr [ebx + 0x5d5e10c4], al; ret; 
0x50514344  # push eax; pop ebp; ret 0xc; 
0x50536023  # push eax; pop ebp; ret; 
0x5053d731  # push eax; pop ebx; pop edi; pop esi; leave; ret; 
0x50526595  # push eax; pop ebx; ret; 
0x505375d0  # push eax; pop edi; mov eax, esi; pop esi; ret; 
0x50535c49  # push eax; pop edi; pop edx; push ebx; push eax; ret; 
0x505219ea  # push eax; pop edi; pop esi; leave; ret; 
0x505092ce  # push eax; pop edi; pop esi; pop ebx; leave; ret 0x10; 
0x5053e05a  # push eax; pop edi; pop esi; pop ebx; leave; ret; 
0x505010a8  # push eax; pop edi; pop esi; ret 4; 
0x50501111  # push eax; pop edi; pop esi; ret; 
0x5051618e  # push eax; pop edi; ret; 
0x505265da  # push eax; pop esi; inc dword ptr [0x5055d448]; ret; 
0x50546cd7  # push eax; pop esi; leave; ret 4; 
0x50535ff0  # push eax; pop esi; pop ebp; ret; 
0x50526517  # push eax; pop esi; pop ebx; leave; ret; 
0x50546ae4  # push eax; pop esi; pop ebx; pop edi; leave; ret 8; 
0x505263f9  # push eax; pop esi; pop ebx; ret; 
0x5053895c  # push eax; pop esi; pop edi; pop ebx; leave; ret; 
0x505011e7  # push eax; pop esi; ret 4; 
0x5052f773  # push eax; pop esi; ret; 
0x505064a0  # push eax; push 0; push 0x5055c970; call dword ptr [0x5054a18c]; ret; 
0x5051433b  # push eax; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x5051e1ca  # push eax; push dword ptr [esp + 0x10]; push dword ptr [esp + 0x10]; call 0x1e1aa; add esp, 0x10; ret; 
0x50509c7e  # push eax; push dword ptr [esp + 0xc]; call 0x3824; ret 4; 
0x5051cb8f  # push eax; push dword ptr [esp + 8]; call 0x1ca1a; pop ecx; pop ecx; ret; 
0x50516407  # push eax; push eax; call 0x17cfa; add esp, 0x10; ret; 
0x50538f70  # push eax; push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x50531b28  # push eax; push ecx; call 0x386ba; pop ecx; pop ecx; ret; 
0x5051e38c  # push eax; push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x50501186  # push eax; push esi; call dword ptr [0x5054a028]; mov eax, esi; pop esi; ret; 
0x505011e0  # push eax; push esi; call dword ptr [0x5054a028]; pop esi; ret 4; 
0x505266b3  # push eax; push esi; call dword ptr [ecx + 0x1c]; add esp, 0xc; pop esi; ret; 
0x505064fe  # push eax; ret 4; 
0x50506546  # push eax; ret 8; 
0x50501134  # push eax; ret; 
0x50543b59  # push eax; sar eax, 2; neg eax; pop esi; pop ebp; ret; 
0x50542fc3  # push eax; sete cl; mov eax, ecx; ret; 
0x50538e65  # push eax; test dword ptr [ecx + 0x70], edx; jne 0x38e70; call 0x39b35; mov eax, dword ptr [eax + 4]; ret; 
0x5053ee4a  # push eax; test eax, eax; je 0x3ee54; push 0; call eax; ret; 
0x50546732  # push eax; test eax, eax; jge 0x4673b; or eax, 0xffffffff; ret; 
0x505112e5  # push eax; test eax, eax; jle 0x112f5; push 0x5055ca4c; call dword ptr [0x5054a020]; ret; 
0x5051134f  # push eax; test eax, eax; jle 0x1135f; push 0x5055ca4c; call dword ptr [0x5054a024]; ret; 
0x5051e2c0  # push eax; test eax, eax; jne 0x1e2ca; or eax, 0xffffffff; leave; ret; 
0x5051e36d  # push eax; test eax, eax; jne 0x1e377; or eax, 0xffffffff; leave; ret; 
0x505384d5  # push eax; test eax, eax; jne 0x384dc; pop ebp; ret; 
0x50546b3e  # push eax; test eax, eax; jne 0x46b46; ret 0xc; 
0x50546bba  # push eax; test eax, eax; jne 0x46bc6; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546bf6  # push eax; test eax, eax; jne 0x46c02; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546ce4  # push eax; test eax, eax; jne 0x46cf0; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546d1d  # push eax; test eax, eax; jne 0x46d28; or eax, 0xffffffff; ret 0xc; 
0x50546d31  # push eax; test eax, eax; jne 0x46d3d; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546d6d  # push eax; test eax, eax; jne 0x46d79; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x50546f9d  # push eax; test eax, eax; jne 0x46fa9; or eax, 0xffffffff; pop ebp; ret 8; 
0x50547037  # push eax; test eax, eax; jne 0x47043; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x50547427  # push eax; test eax, eax; jne 0x47433; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x50547469  # push eax; test eax, eax; jne 0x47475; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x505474b1  # push eax; test eax, eax; jne 0x474bd; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x505474ea  # push eax; test eax, eax; jne 0x474f2; ret 4; 
0x50547517  # push eax; test eax, eax; jne 0x47520; pop ebp; ret 8; 
0x505475ec  # push eax; test eax, eax; jne 0x475f8; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x5054762e  # push eax; test eax, eax; jne 0x4763a; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x5054766a  # push eax; test eax, eax; jne 0x47676; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x505476a6  # push eax; test eax, eax; jne 0x476b2; or eax, 0xffffffff; pop ebp; ret 0x24; 
0x50506447  # push eax; test eax, eax; jne 0x644c; ret; 
0x5052f3b0  # push eax; xor eax, eax; add esp, 0x14; ret 4; 
0x50537bba  # push eax; xor eax, eax; pop ebp; ret; 
0x50513e7b  # push eax; xor eax, eax; pop edi; inc eax; pop esi; ret; 
0x5050c8de  # push eax; xor eax, eax; ret 8; 
0x5053919f  # push eax; xor eax, eax; ret; 
0x50542c6a  # push ebp; adc byte ptr [ebx], bh; ror dword ptr [eax - 0x74fb81e2], cl; ret 0x2eb; 
0x5053d93a  # push ebp; add dword ptr [eax], eax; add dh, dh; ret; 
0x50531189  # push ebp; call 0x8b135318; inc ecx; adc al, 3; ret 0x558b; 
0x50542292  # push ebp; cld; pop edi; pop esi; leave; ret; 
0x50538a27  # push ebp; mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055d6a0], eax; pop ebp; ret; 
0x5053e09b  # push ebp; mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de7c], eax; pop ebp; ret; 
0x50541299  # push ebp; mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055de9c], eax; pop ebp; ret; 
0x505412a8  # push ebp; mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055dea8], eax; pop ebp; ret; 
0x505412b7  # push ebp; mov ebp, esp; mov eax, dword ptr [ebp + 8]; mov dword ptr [0x5055deac], eax; pop ebp; ret; 
0x50545d90  # push ebp; or al, 0x8b; ret 0xf633; 
0x505360f3  # push ebp; or byte ptr [ebx - 0x36a0ef3c], al; ret; 
0x5052f268  # push ebp; or byte ptr [ecx + 0x59], bl; call 0x2f141; leave; ret; 
0x5052f19d  # push ebp; or byte ptr [ecx + 0x59], bl; leave; ret; 
0x5051e8c1  # push ebp; push eax; add byte ptr [ecx + 0x5e], bl; ret; 
0x5053987d  # push ebp; push eax; add dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; ret; 
0x50527903  # push ebp; push eax; call 0x24dea; pop ecx; pop ecx; ret; 
0x50535faa  # push ebp; push eax; call 0x36451; pop ecx; ret; 
0x5053fcec  # push ebp; push eax; call 0x3738a; pop ecx; ret; 
0x5050112d  # push ebp; push eax; call dword ptr [0x5054a020]; ret; 
0x50538c31  # push ebp; push eax; call dword ptr [0x5054a024]; pop ebp; ret; 
0x5050114e  # push ebp; push eax; call dword ptr [0x5054a024]; ret; 
0x5053742d  # push ebp; push eax; call dword ptr [0x5054a02c]; mov eax, esi; pop esi; ret; 
0x505475da  # push ebp; push eax; call dword ptr [0x5054a02c]; xor eax, eax; ret; 
0x50544018  # push ebp; push eax; call dword ptr [0x5054a0a8]; mov dword ptr [0x50556ce4], eax; ret; 
0x5052786b  # push ebp; push eax; call dword ptr [0x5054a188]; mov dword ptr [0x5055d454], eax; ret; 
0x505010a1  # push ebp; push eax; call dword ptr [0x5054a18c]; pop edi; pop esi; ret 4; 
0x50547c88  # push ebp; push eax; call dword ptr [0x5054a18c]; ret 4; 
0x505064a6  # push ebp; push eax; call dword ptr [0x5054a18c]; ret; 
0x50547590  # push ebp; push eax; cmp eax, -1; jne 0x4759a; xor eax, eax; ret; 
0x505265fd  # push ebp; push eax; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x50537ff9  # push ebp; push eax; jl 0x37fbb; pop edi; pop esi; ret; 
0x50538c1d  # push ebp; push eax; jl 0x38c07; pop esi; pop ebx; ret; 
0x505265f7  # push ebp; push eax; mov al, byte ptr [eax + 0x5055cf38]; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x50508e8b  # push ebp; push eax; mov dword ptr [0x5055ca40], edi; pop edi; pop esi; ret; 
0x5053fca3  # push ebp; push eax; mov dword ptr [0x5055de8c], eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x5053fca8  # push ebp; push eax; mov dword ptr [0x5055de90], eax; pop ebp; ret; 
0x50509785  # push ebp; push eax; mov dword ptr [ecx], eax; ret; 
0x50526603  # push ebp; push eax; movzx eax, al; ret; 
0x50532b87  # push ebp; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d91  # push ebp; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c8c  # push ebp; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532c08  # push ebp; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 4; pop ebp; ret; 
0x505384e2  # push ebp; push eax; pop ebp; ret; 
0x50526594  # push ebp; push eax; pop ebx; ret; 
0x50508e91  # push ebp; push eax; pop edi; pop esi; ret; 
0x505265d9  # push ebp; push eax; pop esi; inc dword ptr [0x5055d448]; ret; 
0x50546cd6  # push ebp; push eax; pop esi; leave; ret 4; 
0x50526516  # push ebp; push eax; pop esi; pop ebx; leave; ret; 
0x505263f8  # push ebp; push eax; pop esi; pop ebx; ret; 
0x50537d5a  # push ebp; push eax; pop esi; ret; 
0x505011a7  # push ebp; push eax; ret; 
0x50542fc2  # push ebp; push eax; sete cl; mov eax, ecx; ret; 
0x505384d4  # push ebp; push eax; test eax, eax; jne 0x384dc; pop ebp; ret; 
0x50546b3d  # push ebp; push eax; test eax, eax; jne 0x46b46; ret 0xc; 
0x50546d1c  # push ebp; push eax; test eax, eax; jne 0x46d28; or eax, 0xffffffff; ret 0xc; 
0x505474e9  # push ebp; push eax; test eax, eax; jne 0x474f2; ret 4; 
0x50547516  # push ebp; push eax; test eax, eax; jne 0x47520; pop ebp; ret 8; 
0x50506446  # push ebp; push eax; test eax, eax; jne 0x644c; ret; 
0x50537bb9  # push ebp; push eax; xor eax, eax; pop ebp; ret; 
0x5053919e  # push ebp; push eax; xor eax, eax; ret; 
0x5051971f  # push ebx; call 0x1c895; pop ecx; pop ebx; leave; ret; 
0x50516389  # push ebx; call 0x1ca8c; add esp, 0xc; pop ebx; leave; ret; 
0x5052bad1  # push ebx; mov ebx, dword ptr [esp + 8]; call 0x2b351; pop ebx; ret; 
0x5052bafe  # push ebx; mov ebx, dword ptr [esp + 8]; call 0x2b4ff; pop ebx; ret; 
0x50535c4c  # push ebx; push eax; ret; 
0x5052db21  # push ecx; adc al, 0x59; pop ecx; ret; 
0x5052ef65  # push ecx; adc byte ptr [ecx + 0x59], bl; pop esi; ret; 
0x5052dd34  # push ecx; adc byte ptr [ecx + 0x59], bl; ret; 
0x5051ce24  # push ecx; add al, 0x2b; rol byte ptr [ebx + 0x37304fa], 1; xor eax, eax; ret; 
0x5052ef46  # push ecx; add al, 0x83; les ecx, ptr [esi + ebx*2]; ret; 
0x5050d1b1  # push ecx; add al, byte ptr [eax]; leave; ret 0xc; 
0x50509728  # push ecx; add al, byte ptr [ebx - 0x3e7cfb40]; add al, 0x4e; jne 0x9714; pop esi; ret; 
0x50548868  # push ecx; add dword ptr [eax], eax; div ecx; pop esi; ret 4; 
0x50549223  # push ecx; add dword ptr [eax], eax; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x5054922b  # push ecx; add dword ptr [eax], eax; leave; ret; 
0x5053b6f2  # push ecx; add dword ptr [esp + edx - 0x73], esi; push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x5052a82a  # push ecx; add eax, 0xb08e0c1; ret 0xb60f; 
0x50518ce1  # push ecx; and al, 0x3b; ret 0x27e; 
0x5052a7c0  # push ecx; call 0x28e20; add esp, 0x18; pop edi; pop esi; ret; 
0x5051c928  # push ecx; call 0x3616c; pop ecx; ret; 
0x50548514  # push ecx; call 0x36451; xor eax, eax; pop ecx; inc eax; ret; 
0x50531b29  # push ecx; call 0x386ba; pop ecx; pop ecx; ret; 
0x5053607c  # push ecx; call 0x38c24; pop ecx; pop ebp; ret; 
0x5052dc29  # push ecx; call dword ptr [eax + 0x20]; pop ecx; ret; 
0x50502de1  # push ecx; jecxz 0x2de3; dec dword ptr [ebx + 0x5e5b5fc3]; pop ebp; ret 8; 
0x5052dd08  # push ecx; or al, 0x59; pop ecx; ret; 
0x5054361e  # push ecx; or byte ptr [ebp + 5], dh; mov eax, 1; ret; 
0x5051618d  # push ecx; push eax; pop edi; ret; 
0x50538733  # push ecx; ret; 
0x50515d36  # push ecx; sbb al, 0x59; pop ecx; mov dword ptr [esi + 0x28f0], edi; ret; 
0x505266ea  # push ecx; sbb al, 0x59; pop ecx; pop esi; ret; 
0x505266b6  # push ecx; sbb al, 0x83; les ecx, ptr [esi + ebx*2]; ret; 
0x50515707  # push ecx; sbb byte ptr [ebx - 0x7c3dd4ff], cl; clc; add dword ptr [ebp + 3], edi; xor eax, eax; ret; 
0x50524372  # push edi; add al, 0x3b; ret; 
0x5051cbd6  # push edi; add dword ptr [eax], eax; add esp, 0xc; pop esi; ret; 
0x505018a2  # push edi; call 0x11aa; xor eax, eax; pop edi; pop esi; ret 8; 
0x50503e35  # push edi; call 0x1521; xor eax, eax; pop edi; pop esi; ret 4; 
0x5052f691  # push edi; call 0x1c895; add esp, 0x10; pop edi; pop esi; ret; 
0x5051ef38  # push edi; call 0x1c895; pop ecx; pop edi; pop esi; ret; 
0x505375ca  # push edi; call dword ptr [0x5054a028]; pop edi; mov eax, esi; pop esi; ret; 
0x50515c7a  # push edi; call dword ptr [edi + 0x244]; add esp, 0x10; call 0x14981; pop esi; ret; 
0x5051ef3a  # push edi; fcos; call ptr [ecx + 0x5f]; pop esi; ret; 
0x5054243a  # push edi; jge 0x4243c; dec dword ptr [ebx + 0x5b5e5f00]; leave; ret; 
0x5052ab0e  # push edi; mov edi, dword ptr [esp + 8]; call 0x2a12b; pop edi; ret; 
0x5052a8cc  # push edi; mov edi, dword ptr [esp + 8]; call 0x2a314; pop edi; ret; 
0x5052a8f3  # push edi; mov edi, dword ptr [esp + 8]; call 0x2a566; pop edi; ret; 
0x50523fca  # push edi; sbb al, byte ptr [eax]; add byte ptr [ebx], al; ret; 
0x5050f154  # push edx; and bh, bh; inc dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 0x14; 
0x5052a866  # push edx; call 0x28e20; pop ecx; pop ecx; pop esi; ret; 
0x50531397  # push edx; call 0x311b1; add esp, 0xc; mov eax, edx; ret; 
0x5053c3ef  # push edx; call 0x3e1a0; pop ecx; ret; 
0x5054361b  # push edx; or al, 0x39; push ecx; or byte ptr [ebp + 5], dh; mov eax, 1; ret; 
0x5051e879  # push edx; push eax; call 0x2420c; pop ecx; mov dword ptr [0x5055cf2c], eax; ret; 
0x505494cc  # push es; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x505495df  # push es; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x50521c82  # push es; add dword ptr [eax], eax; leave; ret; 
0x50515c9b  # push es; add dword ptr [edi], eax; and dword ptr [esi], 0; add esp, 0xc; ret; 
0x5053c3d8  # push es; and eax, 0xffffffdf; sub eax, 7; pop ebp; ret; 
0x5052a6b6  # push es; call 0x1c908; pop ecx; pop ecx; ret; 
0x505322f6  # push es; call 0x38c24; pop ecx; ret; 
0x50546cd1  # push es; call dword ptr [0x5055df10]; pop esi; leave; ret 4; 
0x50518f5c  # push es; cmp al, byte ptr [eax]; add byte ptr [ebx + 0x5b5f10c4], al; leave; ret; 
0x5053edbe  # push es; cmp edi, 0x28; jb 0x3edac; pop edi; pop esi; ret; 
0x5051f35b  # push es; daa; add byte ptr [eax], al; mov eax, esi; pop esi; ret; 
0x5052f237  # push es; jno 0x2f239; call ptr [ecx + 0x59]; leave; ret; 
0x5051ab6d  # push es; js 0x1ab71; add cl, cl; ret; 
0x50516bac  # push es; mov dword ptr [ecx + 0xdc], eax; push eax; call dword ptr [0x5054a028]; ret; 
0x50509dad  # push es; mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e4e  # push es; mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x5053ff3f  # push es; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x50528389  # push es; mov eax, 0x5054bcd4; ret; 
0x5053a19d  # push es; mov eax, 0x505569b8; ret; 
0x5053a1b0  # push es; mov eax, 0x505569bc; ret; 
0x5050ab40  # push es; mov eax, dword ptr [eax + 0x108]; ret 4; 
0x50502ce6  # push es; mov eax, dword ptr [eax + 0x32cc]; ret 4; 
0x5050c78b  # push es; mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x50502ccb  # push es; mov eax, dword ptr [eax + 0x514]; ret 4; 
0x50502ae9  # push es; mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x5050d542  # push es; mov eax, dword ptr [eax + 0xab4]; ret 4; 
0x50502f1f  # push es; mov eax, dword ptr [eax + 0xab8]; ret 4; 
0x50502aff  # push es; mov eax, dword ptr [eax + 0xac]; ret 4; 
0x5050dddc  # push es; mov eax, dword ptr [eax + 0xe4]; ret 4; 
0x5053fe96  # push es; mov eax, dword ptr [ebp - 0x30]; mov dword ptr [edi + 0x64], eax; xor eax, eax; call 0x38721; ret; 
0x50543bc1  # push es; mov eax, dword ptr [ebp - 4]; pop esi; pop edi; leave; ret; 
0x5050a7e3  # push es; mov eax, dword ptr [esi + 0x32d4]; pop edi; pop esi; pop ebp; ret 4; 
0x5051694f  # push es; mov eax, dword ptr [esp + 0x14]; mov dword ptr [edi + 0xec], eax; pop esi; pop edi; ret; 
0x5051686d  # push es; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x5054291f  # push es; movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x50546d21  # push es; or eax, 0xffffffff; ret 0xc; 
0x5050e5a8  # push es; or eax, 0xffffffff; ret 8; 
0x505364d7  # push es; pop ecx; call 0x38721; ret; 
0x50515206  # push es; pop ecx; mov dword ptr [esi + 0x18], eax; ret; 
0x50516a4a  # push es; pop esi; ret; 
0x50546f8c  # push es; push dword ptr [esp + 4]; call eax; ret 4; 
0x505151a9  # push es; push eax; call 0x323c0; add esp, 0xc; pop esi; ret; 
0x5051cbb7  # push es; ret; 
0x5051c78e  # push es; sahf; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x50536999  # push es; shld edx, eax, cl; shl eax, cl; ret; 
0x50542f29  # push es; shrd eax, edx, cl; shr edx, cl; ret; 
0x505152a9  # push es; sub al, byte ptr [esi + 0x18]; mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; ret; 
0x50521e2b  # push es; sub dword ptr [ecx], eax; pop edi; pop ebx; ret; 
0x50521f46  # push es; test eax, eax; jne 0x21f4d; pop esi; ret; 
0x50527940  # push es; test eax, eax; jne 0x2794a; and dword ptr [esi + 4], eax; pop esi; ret; 
0x50513132  # push es; xor eax, eax; inc eax; pop esi; leave; ret 0xc; 
0x5054881b  # push es; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x50523a18  # push esi; adc al, 0x74; or byte ptr [ebx], bh; ret 0x474; 
0x5051511c  # push esi; add al, 0x83; les ebx, ptr [eax]; leave; ret; 
0x5050cc76  # push esi; add al, byte ptr [eax]; leave; ret 8; 
0x5052d7ae  # push esi; add byte ptr [eax], al; add esp, 0x28; leave; ret; 
0x50535b64  # push esi; add ch, byte ptr [ebx]; ret 0x1574; 
0x5051ccb6  # push esi; add dword ptr [eax], eax; leave; ret; 
0x50535bc8  # push esi; add dword ptr [ebx], ebp; ret 0x1174; 
0x50535b43  # push esi; add dword ptr [ebx], ebp; ret 0x1574; 
0x5052a157  # push esi; add eax, 0xb08e0c1; ret 0xb60f; 
0x5051568f  # push esi; call 0x1557b; add esp, 0xc; pop esi; ret; 
0x5051438b  # push esi; call 0x16412; add esp, 0x18; pop ecx; ret; 
0x50513c76  # push esi; call 0x16412; pop ecx; ret; 
0x50518eac  # push esi; call 0x18dfe; pop ecx; pop ecx; pop esi; ret; 
0x5052da8d  # push esi; call 0x1c895; add esp, 0x10; pop esi; pop ebp; ret; 
0x50525195  # push esi; call 0x1c966; add esp, 0x10; pop esi; ret; 
0x50521f35  # push esi; call 0x1c966; add esp, 0x14; pop esi; ret; 
0x50522937  # push esi; call 0x1c966; add esp, 0x18; xor eax, eax; pop esi; ret; 
0x505152f7  # push esi; call 0x1c966; add esp, 0x1c; pop edi; pop esi; ret; 
0x50527a74  # push esi; call 0x1c966; add esp, 0x1c; pop esi; ret; 
0x50523a52  # push esi; call 0x1c966; add esp, 0x1c; xor eax, eax; pop esi; ret; 
0x5052f733  # push esi; call 0x1c966; add esp, 0xc; pop edi; ret; 
0x5051d6ed  # push esi; call 0x1c966; add esp, 0xc; pop esi; ret; 
0x50524262  # push esi; call 0x1c966; pop ecx; pop ecx; pop esi; ret; 
0x50514989  # push esi; call 0x1c966; pop ecx; pop ecx; ret; 
0x50531781  # push esi; call 0x1c966; pop ecx; pop edi; pop esi; ret; 
0x50516003  # push esi; call 0x1c966; pop ecx; pop esi; ret; 
0x5051cfd9  # push esi; call 0x1c966; pop ecx; ret; 
0x5051cdf4  # push esi; call 0x1cc1e; pop ecx; pop ecx; pop ebp; ret; 
0x5051d86a  # push esi; call 0x1d789; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x505236ae  # push esi; call 0x2332a; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x50524ddc  # push esi; call 0x24939; pop ecx; pop ecx; pop esi; ret; 
0x50525ffe  # push esi; call 0x25ad0; add esp, 0xc; mov eax, esi; pop esi; ret; 
0x5052792f  # push esi; call 0x2793a; add esp, 0xc; pop esi; ret; 
0x5052a889  # push esi; call 0x2a6e2; add esp, 0x10; pop esi; ret; 
0x5052aafb  # push esi; call 0x2a820; add esp, 0x10; pop esi; ret; 
0x5052babe  # push esi; call 0x323c0; add esp, 0x14; pop esi; ret; 
0x5053e44c  # push esi; call 0x32730; add esp, 0x10; pop esi; ret; 
0x5053661f  # push esi; call 0x36026; pop ecx; ret; 
0x50535e50  # push esi; call 0x36062; pop ecx; pop ecx; ret; 
0x505376f8  # push esi; call 0x36451; pop ecx; call 0x38721; ret 4; 
0x50541763  # push esi; call 0x36451; pop ecx; pop esi; pop ebp; ret; 
0x5053ede7  # push esi; call 0x38a34; add esp, 0x14; pop esi; ret; 
0x50536e54  # push esi; call 0x38b5c; add esp, 0x14; xor eax, eax; call 0x38721; ret; 
0x50539b27  # push esi; call 0x39886; pop ecx; mov eax, edi; pop esi; ret; 
0x505487db  # push esi; call 0x4854a; mov eax, esi; call 0x484f2; pop esi; ret 4; 
0x5054891f  # push esi; call 0x49230; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x50535fea  # push esi; call dword ptr [0x5054a020]; pop esi; pop ebp; ret; 
0x50501187  # push esi; call dword ptr [0x5054a028]; mov eax, esi; pop esi; ret; 
0x505011e1  # push esi; call dword ptr [0x5054a028]; pop esi; ret 4; 
0x5052daeb  # push esi; call dword ptr [eax + 0xc]; add esp, 0xc; pop esi; pop ebp; ret; 
0x50526685  # push esi; call dword ptr [eax + 4]; add esp, 0x10; pop edi; pop esi; ret; 
0x5052dcd7  # push esi; call dword ptr [eax + 8]; add esp, 0x10; pop esi; pop ebp; ret; 
0x505266b4  # push esi; call dword ptr [ecx + 0x1c]; add esp, 0xc; pop esi; ret; 
0x505266e8  # push esi; call dword ptr [ecx + 0x1c]; pop ecx; pop ecx; pop esi; ret; 
0x5051153f  # push esi; mov esi, eax; test esi, esi; jne 0x11548; pop esi; ret; 
0x5054671d  # push esi; mov esp, 0xc583fffe; insb byte ptr es:[edi], dx; leave; ret 0xc; 
0x50522905  # push esi; or al, 0x74; or byte ptr [ebx], bh; ret 0x474; 
0x5051cd23  # push esi; or al, 0x88; inc esp; adc edi, edi; pop edi; ret; 
0x5051cd76  # push esi; or al, 0x88; inc esp; adc edi, edi; ret; 
0x505162b5  # push esi; or byte ptr [ebx + 0x5b5e20c4], al; pop ebp; ret; 
0x5051a1d9  # push esi; push dword ptr [esp + 0x14]; call 0x18dfe; add esp, 0x10; pop esi; ret; 
0x5053ede6  # push esi; push esi; call 0x38a34; add esp, 0x14; pop esi; ret; 
0x5050f88a  # push esi; ret 0xf01; 
0x50523a13  # push esi; sbb al, 0x74; or eax, 0x74145639; or byte ptr [ebx], bh; ret 0x474; 
0x50515261  # push esi; sbb byte ptr [eax + 0x5fff1144], cl; ret; 
0x50527874  # push esp; aam 0x55; push eax; ret; 
0x50510f1f  # push esp; adc al, 2; add cl, cl; ret 0x1c; 
0x505273e3  # push esp; adc dword ptr [ebx + edi], ecx; ret 0x1b7d; 
0x50543576  # push esp; and al, 0x10; mov dword ptr [edx], eax; mov eax, 3; ret; 
0x5052bb26  # push esp; and al, 0xc; call 0x2b6b4; pop ecx; ret; 
0x5053143d  # push esp; and al, 4; mov byte ptr [edx + ecx], 3; inc dword ptr [eax]; ret; 
0x50515664  # push esp; and al, 4; mov dword ptr [ecx + eax*4], edx; inc dword ptr [esi + 0x17c]; ret; 
0x5050d55f  # push esp; and al, 8; lea ecx, [eax + 0xab4]; mov eax, dword ptr [ecx]; mov dword ptr [ecx], edx; ret 8; 
0x5051e1a6  # push esp; and al, 8; ret; 
0x505064d4  # push esp; push eax; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x50541289  # push esp; push eax; call 0x3730f; pop ecx; mov dword ptr [0x5055de98], eax; ret; 
0x5051e3c9  # push esp; push eax; call dword ptr [0x5054a0e4]; neg eax; sbb eax, eax; ret; 
0x50538f76  # push esp; push eax; leave; ret; 
0x5051c87b  # push esp; push eax; mov byte ptr [ecx + 3], al; ret; 
0x5054401e  # push esp; push eax; mov dword ptr [0x50556ce4], eax; ret; 
0x50506441  # push esp; push eax; mov dword ptr [0x5055c970], eax; test eax, eax; jne 0x644c; ret; 
0x50527871  # push esp; push eax; mov dword ptr [0x5055d454], eax; ret; 
0x5052f4f2  # push esp; push eax; mov dword ptr [esi + 0x18], 1; pop edi; leave; ret; 
0x5052f3d6  # push esp; push eax; mov dword ptr [esi + 0x18], 1; ret; 
0x50516b86  # push esp; push eax; mov eax, dword ptr [eax + 0xdc]; ret; 
0x50501043  # push esp; push eax; mov eax, dword ptr [ebp + 8]; pop ebp; ret 0xc; 
0x5050118c  # push esp; push eax; mov eax, esi; pop esi; ret; 
0x5051e3f0  # push esp; push eax; mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50543e9a  # push esp; push eax; mov esi, eax; mov eax, esi; call 0x38721; ret; 
0x5054759f  # push esp; push eax; movzx eax, al; and eax, 1; ret; 
0x5051e3cf  # push esp; push eax; neg eax; sbb eax, eax; ret; 
0x50514343  # push esp; push eax; pop ebp; ret 0xc; 
0x50536022  # push esp; push eax; pop ebp; ret; 
0x505375cf  # push esp; push eax; pop edi; mov eax, esi; pop esi; ret; 
0x505010a7  # push esp; push eax; pop edi; pop esi; ret 4; 
0x50501110  # push esp; push eax; pop edi; pop esi; ret; 
0x50535fef  # push esp; push eax; pop esi; pop ebp; ret; 
0x505011e6  # push esp; push eax; pop esi; ret 4; 
0x5052f772  # push esp; push eax; pop esi; ret; 
0x5050649f  # push esp; push eax; push 0; push 0x5055c970; call dword ptr [0x5054a18c]; ret; 
0x5051433a  # push esp; push eax; push dword ptr [ebp + 0xc]; call dword ptr [0x5054a03c]; pop ebp; ret 0xc; 
0x50509c7d  # push esp; push eax; push dword ptr [esp + 0xc]; call 0x3824; ret 4; 
0x50516406  # push esp; push eax; push eax; call 0x17cfa; add esp, 0x10; ret; 
0x50538f6f  # push esp; push eax; push eax; call dword ptr [0x5054a1e4]; leave; ret; 
0x505011df  # push esp; push eax; push esi; call dword ptr [0x5054a028]; pop esi; ret 4; 
0x505064fd  # push esp; push eax; ret 4; 
0x50506545  # push esp; push eax; ret 8; 
0x50501133  # push esp; push eax; ret; 
0x50546731  # push esp; push eax; test eax, eax; jge 0x4673b; or eax, 0xffffffff; ret; 
0x5052f3af  # push esp; push eax; xor eax, eax; add esp, 0x14; ret 4; 
0x5050c8dd  # push esp; push eax; xor eax, eax; ret 8; 
0x505475e0  # push esp; push eax; xor eax, eax; ret; 
0x5050601f  # push esp; ret; 
0x50520e81  # push esp; xor dl, byte ptr [eax]; ret; 
0x5053754f  # push ss; add byte ptr [eax], al; pop ecx; ret; 
0x50537093  # push ss; add byte ptr [eax], al; ret; 
0x50509b90  # push ss; jbe 0x9b92; dec dword ptr [ebx + 0x5b5e5fc6]; pop ebp; ret 0x10; 
0x5054067f  # push ss; pop eax; pop edi; pop esi; pop ebp; ret; 
0x505168a1  # pushal; add byte ptr [eax], al; pop ecx; mov dword ptr [esi + 0xe0], eax; pop esi; ret; 
0x505168fa  # pushal; add byte ptr [eax], al; pop ecx; mov dword ptr [esi + 0xe4], eax; pop esi; ret; 
0x505394e1  # pushal; jo 0x394e1; mov eax, esi; pop ebx; leave; ret; 
0x5053e339  # pushal; jo 0x3e339; leave; ret; 
0x5053e3bb  # pushal; jo 0x3e3bb; leave; ret; 
0x5052f3ad  # pushal; mov al, byte ptr [0xc0335054]; add esp, 0x14; ret 4; 
0x50546f81  # pushal; mov byte ptr [0xc4835054], al; sbb byte ptr [ebx + 0x6eb5ec6], cl; push dword ptr [esp + 4]; call eax; ret 4; 
0x505311c2  # pushal; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x505312a5  # pushal; pop edi; pop esi; leave; ret; 
0x50538c30  # pushal; push ebp; push eax; call dword ptr [0x5054a024]; pop ebp; ret; 
0x50538a0f  # pushal; push ebp; push eax; ret; 
0x50506125  # pushal; xchg byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x505487bd  # pushfd; add dword ptr [eax], eax; add cl, cl; ret 4; 
0x5050e507  # pushfd; add esp, dword ptr [ecx - 0x3eb1f7ef]; retf; or eax, dword ptr [ebx]; fisttp word ptr [ebx + 0xbd0f7c2]; ret; 
0x505412a0  # pushfd; ficom word ptr [ebp + 0x50]; pop ebp; ret; 
0x5050e318  # pushfd; or ebp, dword ptr [ecx - 0x3eb42131]; ret; 
0x5053c1b2  # pushfd; pop esi; add byte ptr [eax], al; pop ecx; ret; 
0x50504ef2  # pushfd; ret 0xffff; 
0x5051e1c9  # rcl byte ptr [eax - 1], 0x74; and al, 0x10; push dword ptr [esp + 0x10]; call 0x1e1aa; add esp, 0x10; ret; 
0x5053604b  # rcl byte ptr [eax], 0x50; call 0x38c24; pop ecx; pop ebp; ret; 
0x5050e334  # rcl byte ptr [eax], 3; ret; 
0x5053d417  # rcl byte ptr [ebx + edi], 0xc1; jb 0x3d408; xor eax, eax; pop ebp; ret; 
0x505166bb  # rcl byte ptr [esi + 0x3b], cl; ret 0x4e74; 
0x5053754e  # rcl byte ptr [esi], cl; add byte ptr [eax], al; pop ecx; ret; 
0x50533b35  # rcl cl, 0xe0; add eax, 1; ret; 
0x5053607a  # rcl dword ptr [eax], 0x51; call 0x38c24; pop ecx; pop ebp; ret; 
0x505265f6  # rcl dword ptr [ebp + 0x50], cl; mov al, byte ptr [eax + 0x5055cf38]; inc dword ptr [0x5055d3e8]; movzx eax, al; ret; 
0x50526602  # rcl dword ptr [ebp + 0x50], cl; movzx eax, al; ret; 
0x50526593  # rcl dword ptr [ebp + 0x50], cl; pop ebx; ret; 
0x50526515  # rcl dword ptr [ebp + 0x50], cl; pop esi; pop ebx; leave; ret; 
0x5050e8ba  # rcl dword ptr [edi - 0x18], cl; ret; 
0x50516702  # rcr byte ptr [eax], 0x50; call 0x1c895; pop ecx; add eax, esi; pop esi; ret; 
0x50508f73  # rcr byte ptr [ebx + 0x5e], 0x5d; ret 8; 
0x50502be9  # rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 0xc; 
0x50502cb2  # rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 8; 
0x505345d1  # rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret; 
0x5050325f  # rcr byte ptr [ebx - 0x18], 0x11; int1; add al, byte ptr [eax]; add ebp, 0x18c; leave; ret 4; 
0x50511d0e  # rcr byte ptr [ecx + 0x59], 0x5f; pop esi; ret 4; 
0x5051f62d  # rcr byte ptr [ecx + 0x59], 1; test edx, edx; jne 0x1f635; ret; 
0x50513922  # rcr byte ptr [ecx + 0x5b], 0x5f; pop esi; leave; ret 0xc; 
0x50526c7a  # rcr byte ptr [ecx + 0x5b], 0x5f; pop esi; leave; ret; 
0x505380c1  # rcr byte ptr [ecx + 0x5b], 0x5f; pop esi; ret; 
0x5051e0e4  # rcr byte ptr [ecx + 0x5b], 0x8d; inc esp; add bh, bh; pop edi; pop esi; ret; 
0x5051368f  # rcr byte ptr [ecx + 0x5e], 0x5f; pop ebx; leave; ret 0xc; 
0x50512f5b  # rcr byte ptr [ecx + 0x5e], 0x5f; pop ebx; leave; ret 8; 
0x50526e01  # rcr byte ptr [ecx + 0x5f], 0x5e; pop ebx; pop ebp; ret; 
0x5051d1b9  # rcr byte ptr [ecx - 0x950001], cl; push dword ptr [esp + 0x10]; call 0x16b67; add esp, 0x10; ret; 
0x505283a1  # rcr byte ptr [ecx - 9], 0xd0; pop ecx; and eax, 0x5054bc28; ret; 
0x5052bb73  # rcr byte ptr [edi + 0x33], 0xcd; pop esi; call 0x32377; leave; ret; 
0x50513c5b  # rcr byte ptr [edi + 0x40], 0x5e; ret; 
0x505019bd  # rcr byte ptr [edi + 0x5b], 0x5e; leave; ret 0x10; 
0x5053a449  # rcr byte ptr [edi + 0x5b], 0x5e; leave; ret; 
0x5051c4c6  # rcr byte ptr [edi + 0x5b], 0xc9; ret; 
0x5052b9f5  # rcr byte ptr [edi + 0x5b], cl; leave; ret; 
0x50510fa4  # rcr byte ptr [edi + 0x5d], 0x5e; pop ebx; ret 4; 
0x50508a7d  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0x10; 
0x505124b1  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0x18; 
0x5051109d  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0xc; 
0x50501bf1  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 4; 
0x50507912  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 8; 
0x50511539  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x505494d2  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x505495e5  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x50508472  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x20; 
0x5051349b  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0xc; 
0x5051e81b  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x5050deb6  # rcr byte ptr [edi + 0x5e], 0x5b; ret 8; 
0x505161e8  # rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x505029a7  # rcr byte ptr [edi + 0x5e], 0x5d; ret 0xc; 
0x50535c29  # rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x5051da69  # rcr byte ptr [edi + 0x5e], 0xc9; ret; 
0x5051fde4  # rcr byte ptr [esi + 0x40], 0x5b; pop ebp; ret; 
0x50547c74  # rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x50527168  # rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x50513a90  # rcr byte ptr [esi + 0x5f], 0x5b; leave; ret 0x10; 
0x50541de5  # rcr byte ptr [esi + 0x5f], 0x5b; leave; ret; 
0x50503dcf  # rcr byte ptr [esi + 0x5f], 0x5b; pop ebp; ret 8; 
0x50510e97  # rcr byte ptr [esi + 0x5f], 0xc9; ret 0x1c; 
0x50542fc0  # rcr dh, 1; push ebp; push eax; sete cl; mov eax, ecx; ret; 
0x505460bb  # rcr dword ptr [ebx + 0x5e], 0x5f; leave; ret; 
0x5051f614  # rcr dword ptr [ecx + 0x7f7b9], 0; idiv ecx; mov eax, edx; ret; 
0x50534036  # rcr dword ptr [ecx - 0x2dcc0109], 0x83; clc; cmp al, 0xf; xchg ebp, eax; ret 0xc28b; 
0x50533ff7  # rcr dword ptr [ecx - 0x2dcc0109], 0x83; clc; sbb byte ptr [edi], cl; xchg ebp, eax; ret 0xc28b; 
0x5050c8a0  # rcr dword ptr [edx + 2], cl; add cl, cl; ret 0xc; 
0x50514975  # rcr dword ptr [esi + 0x5f], cl; pop ebp; lea eax, [ebx + 0x101]; pop ebx; ret; 
0x5052a123  # rcr dword ptr [esi - 0x77], 0x42; add al, 0x5b; leave; ret; 
0x505089b6  # ret 0; 
0x50520386  # ret 0x101; 
0x505019c2  # ret 0x10; 
0x505210b4  # ret 0x1122; 
0x50508149  # ret 0x1174; 
0x5053435b  # ret 0x118b; 
0x50521835  # ret 0x11a1; 
0x505033bb  # ret 0x1468; 
0x5050adef  # ret 0x14; 
0x50535b25  # ret 0x1574; 
0x505074b7  # ret 0x1674; 
0x5053423c  # ret 0x168b; 
0x505421ad  # ret 0x1773; 
0x50532fa4  # ret 0x1774; 
0x505124b6  # ret 0x18; 
0x505273e7  # ret 0x1b7d; 
0x505235b8  # ret 0x1b; 
0x50505ac8  # ret 0x1c; 
0x50534eab  # ret 0x1deb; 
0x5053f1a8  # ret 0x202c; 
0x50508477  # ret 0x20; 
0x505059bc  # ret 0x24; 
0x5051c12e  # ret 0x2674; 
0x50524b7c  # ret 0x274; 
0x50518ce4  # ret 0x27e; 
0x50521579  # ret 0x27fa; 
0x50508036  # ret 0x2b74; 
0x50505ddb  # ret 0x2c; 
0x50534004  # ret 0x2eb; 
0x5050e488  # ret 0x30a; 
0x5050e3d0  # ret 0x30b; 
0x505297cc  # ret 0x3325; 
0x505193a0  # ret 0x35; 
0x50525541  # ret 0x3904; 
0x50532e7b  # ret 0x3a01; 
0x50533b60  # ret 0x3a02; 
0x50521e6c  # ret 0x3a; 
0x5051ffbe  # ret 0x3b04; 
0x505418d8  # ret 0x3feb; 
0x50546ebe  # ret 0x4004; 
0x50537105  # ret 0x40f6; 
0x50508cfa  # ret 0x4473; 
0x5050e564  # ret 0x4503; 
0x5050df6a  # ret 0x4589; 
0x50531880  # ret 0x458b; 
0x5053e5b7  # ret 0x4600; 
0x5052435a  # ret 0x463b; 
0x5050e588  # ret 0x4689; 
0x505454cd  # ret 0x472; 
0x50523a1d  # ret 0x474; 
0x50524828  # ret 0x475; 
0x50544d5f  # ret 0x4848; 
0x505259e5  # ret 0x4943; 
0x505160d7  # ret 0x4ce8; 
0x505393ba  # ret 0x4d8b; 
0x505166be  # ret 0x4e74; 
0x5053b6fe  # ret 0x4eb; 
0x50526fe7  # ret 0x5054; 
0x505491bb  # ret 0x5055; 
0x5052080f  # ret 0x5089; 
0x50519586  # ret 0x515f; 
0x5051a1ea  # ret 0x51a1; 
0x50534b1c  # ret 0x548d; 
0x50542511  # ret 0x5589; 
0x50525bf1  # ret 0x558b; 
0x5052a263  # ret 0x558d; 
0x5052d131  # ret 0x5653; 
0x5051d923  # ret 0x56c3; 
0x5051e706  # ret 0x575; 
0x5052171a  # ret 0x59c3; 
0x505211ce  # ret 0x5a51; 
0x50542343  # ret 0x5beb; 
0x5051c128  # ret 0x675; 
0x50504fd2  # ret 0x67e8; 
0x505491ee  # ret 0x688; 
0x5051f61e  # ret 0x68c3; 
0x50517abb  # ret 0x68e8; 
0x50532ff3  # ret 0x6de9; 
0x505091a2  # ret 0x708b; 
0x50545bb5  # ret 0x7401; 
0x50545bab  # ret 0x7402; 
0x50545ba1  # ret 0x7404; 
0x50545b9a  # ret 0x7408; 
0x50545b88  # ret 0x7410; 
0x5053d476  # ret 0x7501; 
0x5053b257  # ret 0x7589; 
0x505183f5  # ret 0x7674; 
0x5051307b  # ret 0x76c; 
0x50519c9b  # ret 0x775; 
0x50524abc  # ret 0x7883; 
0x505163ab  # ret 0x78e8; 
0x5051631c  # ret 0x7e8; 
0x50521555  # ret 0x7ec6; 
0x50531345  # ret 0x7fe8; 
0x505421a7  # ret 0x800; 
0x50532eb4  # ret 0x8104; 
0x505202af  # ret 0x81f0; 
0x50509764  # ret 0x8304; 
0x5053e5a7  # ret 0x8346; 
0x5051217d  # ret 0x840f; 
0x50533fb5  # ret 0x848d; 
0x5053ac4f  # ret 0x850f; 
0x5051f9c5  # ret 0x8589; 
0x5053e89c  # ret 0x860f; 
0x50514eeb  # ret 0x87c7; 
0x50545ae6  # ret 0x8820; 
0x5053322d  # ret 0x8830; 
0x5052d155  # ret 0x8906; 
0x5053f3ef  # ret 0x8950; 
0x505311a9  # ret 0x895e; 
0x5050e428  # ret 0x8b0a; 
0x5052524b  # ret 0x8b56; 
0x505441fb  # ret 0x8ba5; 
0x5054122d  # ret 0x8bc3; 
0x50536d45  # ret 0x97; 
0x50524c56  # ret 0x9eb; 
0x50533b28  # ret 0xa04; 
0x50532fb1  # ret 0xa74; 
0x5050dd7c  # ret 0xa; 
0x5053f78a  # ret 0xb5ff; 
0x5051ce33  # ret 0xb60f; 
0x5053abf6  # ret 0xb9; 
0x50535b12  # ret 0xb9e9; 
0x5050e048  # ret 0xbc8d; 
0x50511ac3  # ret 0xbc; 
0x5053f1b1  # ret 0xbe0f; 
0x50536d21  # ret 0xbeb; 
0x50544fea  # ret 0xc002; 
0x50535b34  # ret 0xc085; 
0x5053ce19  # ret 0xc0fe; 
0x50515799  # ret 0xc103; 
0x50546de8  # ret 0xc10b; 
0x5052433b  # ret 0xc13b; 
0x50523319  # ret 0xc159; 
0x50527379  # ret 0xc183; 
0x50520706  # ret 0xc1f0; 
0x5051d921  # ret 0xc28b; 
0x50541132  # ret 0xc35d; 
0x50521a5a  # ret 0xc38b; 
0x5053afd4  # ret 0xc483; 
0x50520fb1  # ret 0xc613; 
0x505457c8  # ret 0xc681; 
0x5050df92  # ret 0xc70b; 
0x5053f477  # ret 0xc720; 
0x5053afc6  # ret 0xc774; 
0x5054553b  # ret 0xc781; 
0x5051717b  # ret 0xc7b9; 
0x50538596  # ret 0xc83b; 
0x50518d19  # ret 0xc88b; 
0x50501029  # ret 0xc; 
0x50534adb  # ret 0xca03; 
0x50544ed3  # ret 0xca23; 
0x50527802  # ret 0xca2b; 
0x50546dbe  # ret 0xca8b; 
0x50545adf  # ret 0xcafe; 
0x50525a39  # ret 0xce8b; 
0x50545cd6  # ret 0xcf23; 
0x5050e174  # ret 0xd0f7; 
0x5053ce11  # ret 0xd18a; 
0x5054436e  # ret 0xd18b; 
0x5050d651  # ret 0xd233; 
0x50537e65  # ret 0xd272; 
0x5052d2a6  # ret 0xd68b; 
0x50521089  # ret 0xd7be; 
0x50521d79  # ret 0xd88b; 
0x505331f6  # ret 0xd8f7; 
0x5050e03b  # ret 0xda8b; 
0x50524db4  # ret 0xde75; 
0x50522c3b  # ret 0xde; 
0x5050e15b  # ret 0xdf8b; 
0x5052d237  # ret 0xe0c1; 
0x5053699c  # ret 0xe0d3; 
0x5051a043  # ret 0xe0e8; 
0x5053f219  # ret 0xe883; 
0x505297dc  # ret 0xe8c1; 
0x505297a0  # ret 0xe8d1; 
0x50546dcf  # ret 0xe9c1; 
0x505313a1  # ret 0xe9c3; 
0x50508cf6  # ret 0xea72; 
0x5053939c  # ret 0xeb20; 
0x50533228  # ret 0xeb57; 
0x505166f9  # ret 0xed74; 
0x5050f88c  # ret 0xf01; 
0x5050f7c2  # ret 0xf02; 
0x5050f6df  # ret 0xf04; 
0x5051531a  # ret 0xf08b; 
0x505434d4  # ret 0xf46; 
0x50545d93  # ret 0xf633; 
0x50545b75  # ret 0xf75e; 
0x505154a5  # ret 0xf799; 
0x50528fde  # ret 0xf823; 
0x5051fee6  # ret 0xf883; 
0x5051f875  # ret 0xf88b; 
0x5050b42f  # ret 0xf8c1; 
0x5051fb66  # ret 0xf8d1; 
0x50520f58  # ret 0xfaf; 
0x505212aa  # ret 0xfbc8; 
0x5052f542  # ret 0xfed3; 
0x5052aa30  # ret 0xff08; 
0x505297b7  # ret 0xff25; 
0x50542823  # ret 0xff52; 
0x5050ade4  # ret 0xff63; 
0x5051c821  # ret 0xff83; 
0x5053b981  # ret 0xff8b; 
0x5051a9f8  # ret 0xffa9; 
0x5053f0cf  # ret 0xffb0; 
0x505050be  # ret 0xffc5; 
0x50506038  # ret 0xffd7; 
0x50502be4  # ret 0xffe5; 
0x50521dc4  # ret 0xffeb; 
0x5051dc42  # ret 0xffec; 
0x50535a36  # ret 0xfff0; 
0x50517a62  # ret 0xfff4; 
0x5051dbc6  # ret 0xfff5; 
0x50548d2c  # ret 0xfff7; 
0x5050134f  # ret 0xfffd; 
0x50504949  # ret 0xfffe; 
0x50504eb7  # ret 0xffff; 
0x5050a8fe  # ret 1; 
0x50511e64  # ret 2; 
0x5050c38b  # ret 3; 
0x505010ab  # ret 4; 
0x50501345  # ret 8; 
0x50501114  # ret; 
0x50501ce4  # retf 0; add byte ptr [ebx + 0x10886], cl; add byte ptr [ebx], bh; ret; 
0x50524355  # retf 0x2bff; rol dword ptr [ebx], 1; ret 0x463b; 
0x50515791  # retf 0x4889; sbb byte ptr [ebx - 0x3dd4ebc0], cl; add eax, ecx; ret; 
0x505112ec  # retf 0x5055; call dword ptr [0x5054a020]; ret; 
0x50511356  # retf 0x5055; call dword ptr [0x5054a024]; ret; 
0x50508e8a  # retf 0x5055; mov dword ptr [0x5055ca40], edi; pop edi; pop esi; ret; 
0x50508e90  # retf 0x5055; pop edi; pop esi; ret; 
0x50530ef2  # retf 0x8b0b; ffreep st(1); ret; 
0x50542340  # retf 0x8bff; ret 0x5beb; 
0x50537958  # retf 0xc78b; pop edi; pop esi; pop ebp; ret; 
0x50536ab8  # retf 0xd38b; mov ebx, ecx; mov ecx, eax; mov eax, esi; pop esi; ret 0x10; 
0x50545c5f  # retf 0xf601; ret; 
0x50545c57  # retf 0xf602; ret; 
0x50545c4f  # retf 0xf604; ret; 
0x50545c47  # retf 0xf608; ret; 
0x5050f6b6  # retf 0xff1f; push dword ptr [ebx]; fstp xword ptr [ebx]; ret; 
0x5053f0c6  # retf; cmp edi, edi; inc dword ptr [ebp - 0x17ca8a0a]; ret 0xffb0; 
0x5050e50e  # retf; or eax, dword ptr [ebx]; fisttp word ptr [ebx + 0xbd0f7c2]; ret; 
0x5051ce2e  # rol bl, 0x8b; adc dword ptr [ebx], eax; ret 0xb60f; 
0x5051401e  # rol byte ptr [eax + 0x59], 0x59; ret 4; 
0x50507517  # rol byte ptr [eax + 0x5b], 0x5f; pop esi; leave; ret 8; 
0x5050dac5  # rol byte ptr [eax + 0x5e], 0x5b; pop edi; pop ebp; ret 0xc; 
0x5051c416  # rol byte ptr [eax + 0x5e], 0x5b; ret; 
0x5051482a  # rol byte ptr [eax + 0x5e], 0x5d; ret 4; 
0x5051df59  # rol byte ptr [eax + 0x5e], 0x5d; ret; 
0x50513134  # rol byte ptr [eax + 0x5e], 0xc9; ret 0xc; 
0x50531a46  # rol byte ptr [eax + 0x5f], 0x5e; pop ebp; ret 0xc; 
0x50512fc1  # rol byte ptr [eax + 0x5f], 0x5e; pop ebx; leave; ret 4; 
0x505077ab  # rol byte ptr [eax + 0x5f], 0x5e; pop ebx; leave; ret 8; 
0x5051c32a  # rol byte ptr [eax + 0x5f], 0x5e; pop ebx; leave; ret; 
0x50508e2d  # rol byte ptr [eax + 0x5f], 0x5e; pop ebx; pop ebp; ret 8; 
0x50522ff6  # rol byte ptr [eax + 0x5f], 0x5e; pop ebx; pop ebp; ret; 
0x5050af01  # rol byte ptr [eax + 0x5f], 0x5e; ret 8; 
0x50538bbc  # rol byte ptr [eax + 0x5f], 0x5e; ret; 
0x5051cfc3  # rol byte ptr [eax + 0x5f], 0xc9; ret; 
0x5051486b  # rol byte ptr [eax - 0x15], 2; sbb eax, eax; pop edi; pop esi; ret; 
0x5053918d  # rol byte ptr [eax - 0x15], 2; xor eax, eax; pop ebx; leave; ret; 
0x50516228  # rol byte ptr [eax - 0x15], 2; xor eax, eax; pop esi; pop ebp; ret; 
0x5050c788  # rol byte ptr [eax - 0x15], 6; mov eax, dword ptr [eax + 0x32d8]; ret 4; 
0x50542f33  # rol byte ptr [eax - 0x172ce01f], cl; ret; 
0x505384dd  # rol byte ptr [eax - 0x5d], 0x40; loope 0x38538; push eax; pop ebp; ret; 
0x5053990e  # rol byte ptr [eax], 0; add byte ptr [ebx], bh; ret; 
0x5054268e  # rol byte ptr [eax], 0; add eax, 0x4000; pop ebp; ret; 
0x5054944b  # rol byte ptr [eax], 1; add byte ptr [eax], al; leave; ret; 
0x50525173  # rol byte ptr [eax], cl; add byte ptr [ebx - 0x3874f33c], al; pop edi; pop esi; ret; 
0x5051ce27  # rol byte ptr [ebx + 0x37304fa], 1; xor eax, eax; ret; 
0x505311bc  # rol byte ptr [ebx + 0x418904c4], 0x60; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x505119ee  # rol byte ptr [ebx + 0x5f4010c4], 0x5e; ret 4; 
0x5052d71c  # rol byte ptr [ebx + eax*4], 0xc1; add al, 0x4a; jne 0x2d6fb; pop edi; pop esi; ret; 
0x5050972b  # rol byte ptr [ebx + eax*4], 0xc1; add al, 0x4e; jne 0x9714; pop esi; ret; 
0x50538485  # rol byte ptr [ebx - 0x1c4fb39], 1; jb 0x3847e; pop edi; pop esi; ret; 
0x505384ab  # rol byte ptr [ebx - 0x1c4fb39], 1; jb 0x384a4; pop edi; pop esi; ret; 
0x50524823  # rol byte ptr [ebx - 0x3dc4f314], cl; jne 0x2482f; xor eax, eax; leave; ret; 
0x5053403b  # rol byte ptr [ebx - 0x6af0c308], cl; ret 0xc28b; 
0x50533ffc  # rol byte ptr [ebx - 0x6af0e708], cl; ret 0xc28b; 
0x5052d3d6  # rol byte ptr [ebx], 0; add byte ptr [ecx + 0x59], bl; ret; 
0x50509767  # rol byte ptr [ecx + ecx*2], 0x75; xlatb; pop edi; pop esi; ret; 
0x50531f9a  # rol byte ptr [edi], 0x2b; ret 0x4503; 
0x5050df67  # rol byte ptr [edi], 3; ret 0x4589; 
0x5050e525  # rol byte ptr [esi], 3; ret; 
0x50546ee0  # rol cl, 1; cli; add al, byte ptr [edx - 0x75]; ret 0x4848; 
0x505494ca  # rol dh, 6; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x505495dd  # rol dh, 6; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x5051ce05  # rol dword ptr [ebx + 0x37301fa], 1; xor eax, eax; ret; 
0x50537b2e  # rol dword ptr [ebx + 0x753b04c6], 1; or al, 0x72; in al, dx; pop esi; pop ebp; ret; 
0x50525288  # rol dword ptr [ebx + ecx], 0xf2; jne 0x25278; pop esi; ret; 
0x50524358  # rol dword ptr [ebx], 1; ret 0x463b; 
0x50544136  # rol dword ptr [ebx], 1; ret 0xf8c1; 
0x50521f64  # rol dword ptr [ebx], cl; ret 0xf88b; 
0x50521f80  # rol dword ptr [ebx], cl; ret 0xf8c1; 
0x50524da6  # rol dword ptr [ecx + 0x41], 0x8d; inc esp; mov byte ptr [edi + edi*8], dl; or byte ptr [ebx + 0x3b078b3f], cl; ret 0xde75; 
0x5053435f  # rol dword ptr [ecx + ebp*4], 0; add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x50524290  # rol dword ptr [edx + ecx*2], 0x75; hlt; ret; 
0x5052d71f  # rol dword ptr [edx + ecx*2], 0x75; xlatb; pop edi; pop esi; ret; 
0x505061ec  # rol dword ptr [edx], 0; leave; ret 0xc; 
0x505051ac  # rol dword ptr [edx], 1; add cl, cl; ret 8; 
0x50504f7a  # rol dword ptr [edx], cl; add cl, cl; ret 0xc; 
0x5050972e  # rol dword ptr [esi + ecx*2], 0x75; loope 0x9792; ret; 
0x505297c7  # rol ecx, 0xe8; add dh, byte ptr [ebx]; ret 0x3325; 
0x505297b2  # rol ecx, 0xe8; or byte ptr [ebx], dh; ret 0xff25; 
0x5050e486  # rol ecx, cl; ret 0x30a; 
0x505183ee  # ror byte ptr [0x18b0000], 0x2b; ret 0x7674; 
0x505276a1  # ror byte ptr [eax - 0x1727caa4], 1; mov ebx, 0x8dffff52; inc ebp; fsubr dword ptr [eax + 0x50]; ret; 
0x5052f860  # ror byte ptr [eax], 0x4a; jne 0x2f853; pop esi; ret; 
0x5053a191  # ror byte ptr [eax], 0x5d; ret; 
0x5050e41f  # ror byte ptr [ebp - 0x68ec6c], 1; sub al, byte ptr [ebx - 0x3f]; ret 0x8b0a; 
0x50525284  # ror byte ptr [ebx + 0x4c183f0], cl; or esi, edx; jne 0x25278; pop esi; ret; 
0x50511648  # ror byte ptr [ebx + 0x5d891045], 1; aam 0x3b; ret; 
0x50546b32  # ror byte ptr [ebx + 0x5fc78bf8], 1; pop esi; ret; 
0x50539cb2  # ror byte ptr [ebx - 0x1a740383], 1; pop ebp; ret; 
0x5050e515  # ror byte ptr [ebx], 1; ret; 
0x50546dcd  # ror byte ptr [ebx], cl; ret 0xe9c1; 
0x50537377  # ror byte ptr [ecx + 0x458b0845], 1; or byte ptr [esi + 0x5d], bl; ret; 
0x50548f31  # ror byte ptr [ecx + 0x458b2045], 1; sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x5053fe99  # ror byte ptr [ecx - 0x3fcc9bb9], 1; call 0x38721; ret; 
0x505419b3  # ror byte ptr [ecx], 0xff; dec ecx; ret; 
0x5051741f  # ror byte ptr [edi], 0x84; ret 0xfffe; 
0x50534113  # ror byte ptr [edi], 0x85; mov eax, 0x8bfffffe; inc edi; and byte ptr [ebx], bh; ret; 
0x50541228  # ror byte ptr [edi], 0x94; ret 0xc28b; 
0x50535b2b  # ror byte ptr [edi], 0x9f; ret 0x548d; 
0x50546dca  # ror byte ptr [edi], 0xb6; ror byte ptr [ebx], cl; ret 0xe9c1; 
0x5050cd88  # ror byte ptr [edx], 0; add byte ptr [eax - 0x17], dl; ret; 
0x5051fcc9  # ror byte ptr [edx], 0x99; and edx, 7; add eax, edx; sar eax, 3; add eax, 4; ret; 
0x50542c6d  # ror dword ptr [eax - 0x74fb81e2], cl; ret 0x2eb; 
0x505260e1  # ror dword ptr [ebx + 0x2898304], 0x8b; add eax, dword ptr [ecx - 0x7d]; ret 0x3b04; 
0x50541a7c  # ror dword ptr [ebx + 0x75f73bf0], cl; ret; 
0x5052434e  # ror dword ptr [ecx + 0x687e0c45], 0x83; retf 0x2bff; rol dword ptr [ebx], 1; ret 0x463b; 
0x5051716b  # ror dword ptr [edi], 0x8f; or byte ptr [0x840f0000], al; xor eax, 0x33000004; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x50508912  # ror dword ptr [edx + ecx*2], 0x75; fnstsw word ptr [ebx]; ret; 
0x5050dd73  # ror dword ptr [edx], 0; add byte ptr [eax - 0x797503bb], cl; ret 0xa; 
0x5051c78f  # sahf; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x50543c78  # sahf; cmp al, 0xff; call ptr [ecx - 0x5d]; push 0x3b5055d5; ret; 
0x50524e66  # sahf; jp 0x24e68; inc dword ptr [ebx + 0x59590020]; mov dword ptr [eax + 4], 0x1000; ret; 
0x50515d54  # sahf; sbb eax, dword ptr [ecx]; add byte ptr [ebx + 0x3b591046], cl; ret; 
0x505410f0  # sal bh, 0xd8; pop ecx; dec eax; pop ebp; ret; 
0x5052782a  # sal bh, 0xd8; pop edi; pop esi; ret; 
0x5051d0eb  # sal bh, 0xd8; ret; 
0x50504ee5  # sal byte ptr [eax + ebx - 0x18], 0xc7; sub byte ptr [eax], al; add byte ptr [ebp - 0x17e68a40], al; pushfd; ret 0xffff; 
0x50504eee  # sal byte ptr [ebp + 0x19], 0xe8; pushfd; ret 0xffff; 
0x5051c879  # sal byte ptr [ebp + 0x41885054], 3; ret; 
0x50535bbf  # sal byte ptr [ebp + 0x68], 0xf; mov dh, 0x41; add dword ptr [edi], ecx; mov dh, 0x56; add dword ptr [ebx], ebp; ret 0x1174; 
0x5051f631  # sal byte ptr [ebp + 1], cl; ret; 
0x50514898  # sal byte ptr [ebp + 2], 0x40; ret; 
0x505384d7  # sal byte ptr [ebp + 2], 0x5d; ret; 
0x50513c13  # sal byte ptr [ebp + 2], 0x5e; ret; 
0x5051d05a  # sal byte ptr [ebp + 2], 0xc9; ret; 
0x50506483  # sal byte ptr [ebp + 4], 0x33; shr bl, 3; mov eax, dword ptr [esi + 0x34]; pop esi; ret 4; 
0x50547519  # sal byte ptr [ebp + 4], 0x5d; ret 8; 
0x5050e9ab  # sal byte ptr [ebp + 4], 0x8b; ret; 
0x50527942  # sal byte ptr [ebp + 5], 0x21; inc esi; add al, 0x5e; ret; 
0x50535f2a  # sal byte ptr [ebp + 5], 0x6a; sbb bl, byte ptr [eax + 0x5e]; ret; 
0x50528387  # sal byte ptr [ebp + 6], 0xb8; aam 0xbc; push esp; push eax; ret; 
0x50516b7f  # sal byte ptr [ebp + 6], 0xff; and eax, 0x5054a0e4; mov eax, dword ptr [eax + 0xdc]; ret; 
0x5053e0c4  # sal byte ptr [ebp + eax + 0x33], 0xc0; inc eax; pop ebp; ret; 
0x5053ee4c  # sal byte ptr [ebp + eax + 0x6a], 0; call eax; ret; 
0x50541ca8  # sal byte ptr [ebp + eax - 0x7d], 0xf8; add dword ptr [ebp - 0x29], esi; xor eax, eax; pop ebp; ret; 
0x50539cfa  # sal byte ptr [ebp + eax*2 + 3], cl; inc ebp; adc byte ptr [ebx], ch; ret 0x4589; 
0x5051f46a  # sal byte ptr [ebp - 0x16], 0x5f; mov eax, esi; pop esi; pop ebp; ret; 
0x5053c42c  # sal byte ptr [ebp - 0x1f], 0x8b; ret; 
0x5053727b  # sal byte ptr [ebp - 0x2d], 0x33; rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x50515ec9  # sal byte ptr [ebp - 0x33], 0x5b; ret; 
0x50532fb5  # sal byte ptr [ebp - 0xd], 0x5e; pop ebx; pop edi; xor eax, eax; ret; 
0x50539113  # sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x5053826e  # sal byte ptr [ebx + eax - 0x7d], 0x20; add bh, bh; add ecx, ecx; ret; 
0x505064cc  # sal byte ptr [ebx + ecx + 0x50], 0xff; adc eax, 0x5054a078; and dword ptr [esi + 0x34], 0; pop esi; ret 4; 
0x50510fa2  # sal byte ptr [ebx], 0xc0; pop edi; pop ebp; pop esi; pop ebx; ret 4; 
0x505369ab  # sal byte ptr [ebx], 0xd2; ret; 
0x5052d273  # sal byte ptr [ebx], cl; ret 0x4589; 
0x50538bba  # sal byte ptr [ebx], cl; rol byte ptr [eax + 0x5f], 0x5e; ret; 
0x505233d9  # sal byte ptr [ecx + edi + 0x4b], 0x8b; ret; 
0x50522f95  # sal byte ptr [ecx + esi*8 - 0x75], 0x46; add al, 0xff; inc ebp; adc byte ptr [ebx], ch; ret; 
0x505235b3  # sal byte ptr [edi + eax + 0x50], 0xe8; ret 0x1b; 
0x505169e6  # sal byte ptr [edi + eax - 0x75], 0x80; aam 0; add byte ptr [eax], al; ret; 
0x505168b2  # sal byte ptr [edi + eax - 0x75], 0x80; in al, 0; add byte ptr [eax], al; ret; 
0x505462c7  # sal byte ptr [edx + ecx + 0x3d], 0x1d; add byte ptr [eax], al; sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x50526fc7  # sal byte ptr [edx + ecx - 0x48], 0x14; ret; 
0x5052704d  # sal byte ptr [edx + ecx - 0x48], 0x30; ret 0x5054; 
0x50526ffb  # sal byte ptr [edx + ecx - 0x48], 0xc0; ret 0x5054; 
0x50516b46  # sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; add dword ptr [eax + 0x124], ecx; ret; 
0x50516abc  # sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b6c  # sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; mov dword ptr [eax + 0x128], ecx; ret; 
0x505169f9  # sal byte ptr [edx + ecx - 0x75], 0x4c; and al, 8; mov dword ptr [eax + 0xd8], ecx; ret; 
0x50537a75  # sal byte ptr [esi + ebx*8 + 0x5f], 0x5d; ret; 
0x50527cee  # sal byte ptr [esi + edx + 0x57], 0x8d; dec esp; xor eax, 0xe85051f8; ret; 
0x5052336d  # sal byte ptr [esi + esi + 0x4b], 0x8b; ret; 
0x50534ea7  # sal byte ptr [esp + eax - 0x75], cl; ret 0x1deb; 
0x50524c52  # sal byte ptr [esp + eax - 0x75], cl; ret 0x9eb; 
0x5053424a  # sal byte ptr [esp + ebp - 0x7c], cl; div byte ptr [esi + ebx - 9]; ret 0; 
0x50533ab3  # sal byte ptr [esp + ebx*8 - 0x75], 0x46; inc esp; pop esi; ret; 
0x50534369  # sal byte ptr [esp + esi - 0x7c], cl; div byte ptr [edi - 9]; ret 0; 
0x50545c38  # sal dh, cl; ret; 
0x50503ccd  # sal dword ptr [eax + edi + 0x68], cl; test eax, 0xeb80042f; and dword ptr [ebx], edi; ret; 
0x50545c12  # sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x50538e46  # sal dword ptr [ebx], 0xc0; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50548863  # sal dword ptr [ebx], 0xd2; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x5053727d  # sal dword ptr [ebx], cl; rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x5053187a  # sal dword ptr [ebx], cl; shl byte ptr [esi - 0x77], 0x45; ret 0x458b; 
0x50504d68  # salc; add al, byte ptr [eax]; leave; ret 4; 
0x50526e16  # salc; jbe 0x26e1e; xor eax, eax; inc eax; pop esi; ret; 
0x50509fd0  # salc; jno 0x9fd2; inc dword ptr [ebx + 0x5b5fffc8]; pop esi; pop ebp; ret 0xc; 
0x50524e8c  # salc; jp 0x24e8e; call ptr [ecx + 0x59]; pop esi; ret; 
0x505271e8  # salc; mov ebx, 0x5e590000; ret; 
0x50539a58  # salc; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x505212fc  # salc; pop es; aaa; add byte ptr [ecx + 0x3707d6c6], al; ret; 
0x5050e1e6  # salc; pop es; aaa; ret; 
0x50544050  # salc; pop esi; ret; 
0x50538a2f  # salc; push ebp; push eax; pop ebp; ret; 
0x5052ba86  # salc; shl edx, 8; or edx, eax; mov dword ptr [ecx + 0x104c], edx; pop esi; ret; 
0x5052a812  # salc; shl edx, 8; or edx, eax; mov dword ptr [ecx + 0x84], edx; pop esi; ret; 
0x5052811b  # salc; xor eax, eax; pop edi; pop esi; ret; 
0x50538f6a  # sar bh, 0x15; sub byte ptr [ecx - 0xafafac], ah; adc eax, 0x5054a1e4; leave; ret; 
0x5052425e  # sar bh, 0xff; call dword ptr [esi - 0x18]; inc byte ptr [esi + 0x5959ffff]; pop esi; ret; 
0x50526f81  # sar bh, cl; call ptr [ecx + 0x56]; call 0x1c966; pop ecx; pop esi; ret; 
0x5051f629  # sar bh, cl; dec dword ptr [ebx - 0x7aa6a630]; sal byte ptr [ebp + 1], cl; ret; 
0x50541223  # sar byte ptr [0xc0000005], cl; sete dl; mov eax, edx; ret; 
0x5053d802  # sar byte ptr [ebp - 7], 0x8b; ret; 
0x50531d18  # sar byte ptr [ebx + eax], cl; ret 0x4589; 
0x5051d91b  # sar byte ptr [ebx], cl; dec eax; and byte ptr [edi], cl; pushfd; ret 0xc28b; 
0x505074b5  # sar byte ptr [ebx], cl; ret 0x1674; 
0x50548865  # sar byte ptr [ecx + 0x15180], cl; div ecx; pop esi; ret 4; 
0x5054281d  # sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x50549639  # sar byte ptr [edi + 0x4d], 0x8b; ret; 
0x5051c3a1  # sar byte ptr [esi + 0x11], 0x8b; ret; 
0x50511fda  # sar byte ptr [esi + 0x51], 0x2b; ret; 
0x505112e7  # sar byte ptr [esi + 0xb], 0x68; dec esp; retf 0x5055; call dword ptr [0x5054a020]; ret; 
0x50511351  # sar byte ptr [esi + 0xb], 0x68; dec esp; retf 0x5055; call dword ptr [0x5054a024]; ret; 
0x5054628a  # sar dh, 0xff; leave; ret; 
0x5050ab66  # sar dword ptr [esi + 2], 1; mov edx, ecx; mov dword ptr [eax + 0x108], edx; xor eax, eax; ret 8; 
0x50543b5a  # sar eax, 2; neg eax; pop esi; pop ebp; ret; 
0x5051fcd1  # sar eax, 3; add eax, 4; ret; 
0x50525a71  # sar eax, 3; inc eax; pop ecx; inc eax; ret; 
0x50525a8a  # sar eax, 3; pop ecx; add eax, 4; ret; 
0x5052331b  # sar eax, 4; add eax, esi; pop edi; lea eax, [eax*4 + 0x14]; pop esi; ret; 
0x5054519d  # sar esi, 1; dec ecx; ret; 
0x5052f694  # sar esi, 1; inc dword ptr [ebx + 0x5e5f10c4]; ret; 
0x50516b89  # sbb ah, 0; add byte ptr [eax], al; ret; 
0x50516a10  # sbb al, 0; add byte ptr [eax], al; ret; 
0x5052f745  # sbb al, 0; je 0x2f752; mov dword ptr [esi + 0x10], 1; pop esi; ret; 
0x50537301  # sbb al, 0x14; add byte ptr [eax], al; ret; 
0x5050c78d  # sbb al, 0x32; add byte ptr [eax], al; ret 4; 
0x5053b943  # sbb al, 0x33; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret; 
0x5051d919  # sbb al, 0x33; sar byte ptr [ebx], cl; dec eax; and byte ptr [edi], cl; pushfd; ret 0xc28b; 
0x50514706  # sbb al, 0x3b; ret; 
0x50513ff5  # sbb al, 0x40; pop ebp; ret 0x10; 
0x50515d37  # sbb al, 0x59; pop ecx; mov dword ptr [esi + 0x28f0], edi; ret; 
0x505266eb  # sbb al, 0x59; pop ecx; pop esi; ret; 
0x5052719a  # sbb al, 0x59; pop ecx; xor eax, eax; inc eax; pop esi; ret; 
0x5052c646  # sbb al, 0x5b; leave; ret; 
0x5053eda3  # sbb al, 0x5d; ret; 
0x50527a7c  # sbb al, 0x5e; ret; 
0x5051d3c1  # sbb al, 0x5f; mov eax, esi; pop esi; ret; 
0x5052f13b  # sbb al, 0x5f; pop esi; pop ebx; leave; ret; 
0x505152ff  # sbb al, 0x5f; pop esi; ret; 
0x50521c7b  # sbb al, 0x5f; xor ecx, ebp; pop esi; call 0x32377; leave; ret; 
0x50538a0e  # sbb al, 0x60; push ebp; push eax; ret; 
0x50523a14  # sbb al, 0x74; or eax, 0x74145639; or byte ptr [ebx], bh; ret 0x474; 
0x505266b7  # sbb al, 0x83; les ecx, ptr [esi + ebx*2]; ret; 
0x5051d9ad  # sbb al, 0x83; les esi, ptr [eax]; pop edi; pop esi; ret; 
0x50523c4c  # sbb al, 0x83; ret; 
0x50526de1  # sbb al, 0x89; inc ebp; or byte ptr [esi + 0x3b], dl; ret; 
0x50548ec2  # sbb al, 0x8a; add byte ptr [edx], bh; ret; 
0x50548e40  # sbb al, 0x8a; add dword ptr [edx], edi; ret; 
0x505273e1  # sbb al, 0x8d; push esp; adc dword ptr [ebx + edi], ecx; ret 0x1b7d; 
0x5051939e  # sbb al, 0xe8; ret 0x35; 
0x5052f76d  # sbb al, 0xff; adc eax, 0x5054a13c; pop esi; ret; 
0x50516b22  # sbb al, 1; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x120], ecx; ret; 
0x50510726  # sbb al, 2; add cl, cl; ret 0x14; 
0x5052434a  # sbb al, 3; ret 0xc13b; 
0x505201f7  # sbb al, 8; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x50523fcb  # sbb al, byte ptr [eax]; add byte ptr [ebx], al; ret; 
0x50544c5a  # sbb al, byte ptr [ebx + 0x7319b47d]; or bh, bh; inc ebp; mov ah, 0x2a; ret; 
0x5051613e  # sbb al, ch; add eax, 0x5ffffffd; pop esi; leave; ret; 
0x505238c9  # sbb al, ch; ret; 
0x5051e982  # sbb bh, 0xff; dec dword ptr [ecx + 0x458b0846]; mov byte ptr [ebx], bh; ret; 
0x5052f3aa  # sbb bh, bh; adc eax, 0x5054a060; xor eax, eax; add esp, 0x14; ret 4; 
0x50535f2e  # sbb bl, byte ptr [eax + 0x5e]; ret; 
0x50532db9  # sbb bl, byte ptr [eax]; add byte ptr [eax], al; add esp, 0xc; pop ebp; ret; 
0x50538a1a  # sbb byte ptr [eax + 0x55], ah; push eax; ret; 
0x50541099  # sbb byte ptr [eax + 0x5e], bl; ret; 
0x50515262  # sbb byte ptr [eax + 0x5fff1144], cl; ret; 
0x50527e2b  # sbb byte ptr [eax - 0x75], dl; ret; 
0x50516b04  # sbb byte ptr [eax], 1; add byte ptr [eax], al; ret; 
0x5051792d  # sbb byte ptr [eax], al; add byte ptr [esi - 0x18], dl; dec edx; ret 1; 
0x5052f754  # sbb byte ptr [eax], al; je 0x2f75f; call 0x2f707; pop esi; ret; 
0x505056de  # sbb byte ptr [ebp - 0x74fb8b25], al; ret; 
0x505311a3  # sbb byte ptr [ebx + 0x35f1c41], cl; ret 0x895e; 
0x5051525c  # sbb byte ptr [ebx + 0x568b104e], cl; sbb byte ptr [eax + 0x5fff1144], cl; ret; 
0x50523587  # sbb byte ptr [ebx + 0x5b5e5fc7], cl; ret; 
0x50541f32  # sbb byte ptr [ebx + 0x5e5fffc8], al; pop ebx; pop ebp; ret; 
0x50546f87  # sbb byte ptr [ebx + 0x6eb5ec6], cl; push dword ptr [esp + 4]; call eax; ret 4; 
0x50525803  # sbb byte ptr [ebx + 0xf00fc7d], al; test byte ptr [esi - 0x75000000], bl; ret; 
0x50515794  # sbb byte ptr [ebx - 0x3dd4ebc0], cl; add eax, ecx; ret; 
0x50507c60  # sbb byte ptr [ebx - 0x4b76f3bb], cl; ret; 
0x50510f93  # sbb byte ptr [ebx - 0x75], al; ret; 
0x50515708  # sbb byte ptr [ebx - 0x7c3dd4ff], cl; clc; add dword ptr [ebp + 3], edi; xor eax, eax; ret; 
0x5051fe53  # sbb byte ptr [ebx], al; ret 0x4589; 
0x5053119b  # sbb byte ptr [ebx], al; ret 0x558b; 
0x50524339  # sbb byte ptr [ebx], al; ret 0xc13b; 
0x50510350  # sbb byte ptr [ebx], bh; ret; 
0x5052f4f6  # sbb byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [edi - 0x37], bl; ret; 
0x50516b05  # sbb byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x50545f2e  # sbb byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5051ffe7  # sbb byte ptr [edi + 0x5e], bl; leave; ret; 
0x505106a2  # sbb byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 0x14; 
0x5052a7c8  # sbb byte ptr [edi + 0x5e], bl; ret; 
0x5050d45b  # sbb byte ptr [edi + 2], cl; add cl, cl; ret 0xc; 
0x505479fb  # sbb byte ptr [edi], cl; add byte ptr [eax], al; jb 0x479e9; xor eax, eax; ret 4; 
0x50547a49  # sbb byte ptr [edi], cl; add byte ptr [eax], al; jb 0x47a1e; pop edi; pop esi; ret 0xc; 
0x50533fff  # sbb byte ptr [edi], cl; xchg ebp, eax; ret 0xc28b; 
0x5054112d  # sbb byte ptr [edi], cl; xchg esp, eax; ret 0xc28b; 
0x50527017  # sbb byte ptr [edx + ecx - 0x48], dh; xchg esp, eax; ret 0x5054; 
0x50508147  # sbb ch, byte ptr [ebx]; ret 0x1174; 
0x505265d7  # sbb cl, ah; push ebp; push eax; pop esi; inc dword ptr [0x5055d448]; ret; 
0x5052642f  # sbb cl, ah; push ebp; push eax; ret; 
0x5053b6fa  # sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50509133  # sbb dh, dh; ret; 
0x50533132  # sbb dword ptr [edi + 0x11], esi; add eax, -0x20; pop ebp; ret; 
0x5053393b  # sbb dword ptr [edi + 0x11], esi; add eax, 0x20; pop ebp; ret; 
0x50544592  # sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x5051e818  # sbb dword ptr [edi], ecx; xchg esp, eax; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50516543  # sbb eax, 0x3b30468b; ret; 
0x50539397  # sbb eax, 0x80d18a10; ret 0xeb20; 
0x50538b56  # sbb eax, 0xc9ffff98; ret; 
0x5052d271  # sbb eax, dword ptr [ebx]; sal byte ptr [ebx], cl; ret 0x4589; 
0x50515d55  # sbb eax, dword ptr [ecx]; add byte ptr [ebx + 0x3b591046], cl; ret; 
0x5054268a  # sbb eax, eax; and eax, 0xc000; add eax, 0x4000; pop ebp; ret; 
0x5051e1e7  # sbb eax, eax; and eax, 0xfffffffe; inc eax; pop ebp; ret; 
0x5053a18c  # sbb eax, eax; and eax, ecx; add eax, 8; pop ebp; ret; 
0x5051df58  # sbb eax, eax; inc eax; pop esi; pop ebp; ret; 
0x505410ef  # sbb eax, eax; neg eax; pop ecx; dec eax; pop ebp; ret; 
0x50527829  # sbb eax, eax; neg eax; pop edi; pop esi; ret; 
0x5051d0ea  # sbb eax, eax; neg eax; ret; 
0x5051eb1e  # sbb eax, eax; pop ecx; inc eax; ret; 
0x505283a0  # sbb eax, eax; pop ecx; not eax; pop ecx; and eax, 0x5054bc28; ret; 
0x5051486f  # sbb eax, eax; pop edi; pop esi; ret; 
0x50514888  # sbb eax, eax; ret; 
0x50533b34  # sbb eax, eax; shl eax, 1; add eax, 1; ret; 
0x50504ef0  # sbb eax, ebp; pushfd; ret 0xffff; 
0x5050a58b  # sbb ebp, dword ptr [edi + edi*8 - 1]; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret 0xc; 
0x5051e1b9  # sbb ecx, ecx; neg ecx; add ecx, dword ptr [ebp + 0x10]; add eax, ecx; pop ebp; ret; 
0x50542f16  # sbb edx, 0; pop ebp; pop esi; pop edi; ret 0x10; 
0x50536751  # sbb edx, 0; pop ebx; pop esi; pop edi; ret 0x10; 
0x50536a1e  # sbb edx, 0; pop ebx; ret 0x10; 
0x50516bae  # sbb esp, 0x50000000; call dword ptr [0x5054a028]; ret; 
0x5052f135  # scasb al, byte ptr es:[edi]; add bh, bh; inc dword ptr [ebx + 0x5e5f1cc4]; pop ebx; leave; ret; 
0x50507384  # scasd eax, dword ptr es:[edi]; add al, byte ptr [eax]; add ebp, 0x18c; leave; ret 8; 
0x50524f30  # sete al; pop ebx; leave; ret; 
0x5051e819  # sete al; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50523503  # sete al; pop edi; pop esi; pop ebx; ret; 
0x5051dcb6  # sete al; pop esi; ret; 
0x505412f6  # sete cl; mov eax, ecx; ret; 
0x5054112e  # sete dl; mov eax, edx; pop ebp; ret; 
0x50541229  # sete dl; mov eax, edx; ret; 
0x5051d91f  # setl dl; mov eax, edx; ret; 
0x5051ebe2  # setne al; lea eax, [eax + eax + 1]; ret; 
0x5051676e  # setne al; ret; 
0x50521dd9  # sgdt [eax]; add esp, 0xc; pop ebx; leave; ret; 
0x5051654d  # sgdt [ecx]; add bl, ch; or eax, 0x3b30468b; ret; 
0x50533136  # shl al, 0x5d; ret; 
0x5053601b  # shl byte ptr [eax], 0x50; call dword ptr [0x5054a020]; pop ebp; ret; 
0x50536057  # shl byte ptr [eax], 0x50; call dword ptr [0x5054a024]; pop ebp; ret; 
0x5053393f  # shl byte ptr [eax], 0x5d; ret; 
0x5053a18d  # shl byte ptr [ebx], 0xc1; add eax, 8; pop ebp; ret; 
0x50545cd4  # shl byte ptr [ebx], 1; ret 0xcf23; 
0x5050e159  # shl byte ptr [ebx], 1; ret 0xdf8b; 
0x5053187c  # shl byte ptr [esi - 0x77], 0x45; ret 0x458b; 
0x50523550  # shl dword ptr [eax + eax], 1; add cl, al; clc; or byte ptr [eax + 0x76ff0247], cl; or al, ch; ret; 
0x50535f44  # shl dword ptr [eax], 0x83; ret 0x8104; 
0x5053c3ba  # shl dword ptr [esi], 1; xor eax, eax; inc eax; pop ebp; ret; 
0x50533b36  # shl eax, 1; add eax, 1; ret; 
0x50525a9d  # shl eax, 2; cmp ecx, eax; jl 0x25aa8; xor eax, eax; pop esi; ret; 
0x5054291d  # shl eax, 6; movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x505156fb  # shl eax, 8; pop edi; mov dword ptr [edx + 0x18], esi; or eax, ecx; pop esi; ret; 
0x5053699d  # shl eax, cl; ret; 
0x50525ac4  # shl ecx, 3; shr eax, cl; pop esi; and eax, 0xff; ret; 
0x50546e08  # shl ecx, 8; or eax, ecx; ret 4; 
0x5052ba87  # shl edx, 8; or edx, eax; mov dword ptr [ecx + 0x104c], edx; pop esi; ret; 
0x5052a813  # shl edx, 8; or edx, eax; mov dword ptr [ecx + 0x84], edx; pop esi; ret; 
0x505369a7  # shl edx, cl; ret; 
0x5051c7fd  # shl esi, 0x1e; mov eax, esi; pop esi; leave; ret; 
0x5053699a  # shld edx, eax, cl; shl eax, cl; ret; 
0x50511fe8  # shr al, 0x65; ret; 
0x50517805  # shr al, 0x75; ret; 
0x50531b3d  # shr al, 0xde; imul eax, dword ptr [eax], 0; ret; 
0x50537f98  # shr bl, 0x11; xor eax, eax; inc eax; ret; 
0x50542a8a  # shr bl, 1; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5054126a  # shr bl, 1; pop es; xor eax, eax; inc eax; ret; 
0x50532f74  # shr bl, 2; mov eax, edi; cld; pop edi; leave; ret; 
0x5052398c  # shr bl, 2; mov eax, esi; pop esi; pop ebp; ret; 
0x50535d9e  # shr bl, 2; xor eax, eax; pop esi; pop ebp; ret; 
0x50506487  # shr bl, 3; mov eax, dword ptr [esi + 0x34]; pop esi; ret 4; 
0x5051c412  # shr bl, 3; xor eax, eax; inc eax; pop esi; pop ebx; ret; 
0x50517179  # shr byte ptr [ebx], cl; ret 0xc7b9; 
0x5053604f  # shr dword ptr [ebx], 1; add byte ptr [eax], al; pop ecx; pop ebp; ret; 
0x5051d052  # shr dword ptr [edi + edi*8 - 1], 1; add esp, 0xc; test eax, eax; jne 0x1d05f; leave; ret; 
0x5051fad2  # shr dword ptr [esi + 0xc], 8; add dword ptr [esi + 0x10], -8; cmp dword ptr [esi + 0x10], 8; jge 0x1faa7; ret; 
0x50509777  # shr eax, 8; and edx, 0xff; xor eax, dword ptr [edx*4 + 0x50555868]; mov dword ptr [ecx], eax; ret; 
0x50546e02  # shr eax, 8; movzx eax, al; shl ecx, 8; or eax, ecx; ret 4; 
0x50525ac7  # shr eax, cl; pop esi; and eax, 0xff; ret; 
0x50542f37  # shr eax, cl; ret; 
0x50515148  # shr ecx, 8; mov byte ptr [ebp - 2], cl; call dword ptr [eax + 4]; add esp, 0xc; leave; ret; 
0x50542f2d  # shr edx, cl; ret; 
0x50542f2a  # shrd eax, edx, cl; shr edx, cl; ret; 
0x505479fc  # sldt word ptr [eax]; jb 0x479e9; xor eax, eax; ret 4; 
0x50547a4a  # sldt word ptr [eax]; jb 0x47a1e; pop edi; pop esi; ret 0xc; 
0x5050d931  # sldt word ptr [eax]; leave; ret 0xc; 
0x50531387  # sldt word ptr [eax]; leave; ret; 
0x50537ce0  # sldt word ptr [eax]; pop ecx; ret; 
0x5053a170  # stc; adc dword ptr [edi + 0xe], esi; push 0xd; pop eax; pop ebp; ret; 
0x50502a19  # stc; add al, byte ptr [eax]; leave; ret 0xc; 
0x505166e5  # stc; add dword ptr [ebp + 4], esi; mov eax, esi; pop esi; ret; 
0x50536996  # stc; and byte ptr [ebx + 6], dh; shld edx, eax, cl; shl eax, cl; ret; 
0x50542f26  # stc; and byte ptr [ebx + 6], dh; shrd eax, edx, cl; shr edx, cl; ret; 
0x50509daa  # stc; arpl word ptr [edi + 6], si; mov dword ptr [esi + 0xf0], edi; pop edi; pop esi; ret 8; 
0x50509e4b  # stc; arpl word ptr [edi + 6], si; mov dword ptr [esi + 0xf4], edi; pop edi; pop esi; ret 8; 
0x50549227  # stc; imul eax, eax, 0x15180; leave; ret; 
0x50502cad  # stc; in al, 0xff; push dword ptr [ebx]; rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret 8; 
0x5051f61c  # stc; mov eax, edx; ret; 
0x505479fa  # stc; sbb byte ptr [edi], cl; add byte ptr [eax], al; jb 0x479e9; xor eax, eax; ret 4; 
0x50533131  # stc; sbb dword ptr [edi + 0x11], esi; add eax, -0x20; pop ebp; ret; 
0x5053393a  # stc; sbb dword ptr [edi + 0x11], esi; add eax, 0x20; pop ebp; ret; 
0x5051638b  # std; add byte ptr [eax], al; add esp, 0xc; pop ebx; leave; ret; 
0x505225a0  # std; add byte ptr [eax], al; leave; ret; 
0x50539872  # std; call 0x396ce; pop ecx; mov dword ptr [0x5055e26c], 1; xor eax, eax; ret; 
0x50532b6f  # std; leave; ret; 
0x5053a51a  # std; mov eax, dword ptr [ebp - 4]; pop esi; pop ebx; leave; ret; 
0x505425d5  # std; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x505394e3  # std; mov eax, esi; pop ebx; leave; ret; 
0x50533bf9  # std; mov ecx, dword ptr [esp + 4]; sub eax, ecx; ret; 
0x50533118  # std; pop ebx; leave; ret; 
0x50541c76  # std; pop edi; pop ebx; leave; ret; 
0x50543077  # std; pop edi; pop esi; pop ebx; leave; ret; 
0x5053b737  # std; pop esi; pop ebx; leave; ret; 
0x50532f12  # std; pop esi; pop edi; pop ebx; ret; 
0x5054603e  # std; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5050885d  # sti; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50527016  # sti; sbb byte ptr [edx + ecx - 0x48], dh; xchg esp, eax; ret 0x5054; 
0x50521ac9  # stosb byte ptr es:[edi], al; or byte ptr [ecx], al; add cl, cl; ret; 
0x50509c7c  # stosb byte ptr es:[edi], al; push esp; push eax; push dword ptr [esp + 0xc]; call 0x3824; ret 4; 
0x5050e7fc  # stosb byte ptr es:[edi], al; sub edi, edi; inc dword ptr [ebx + 0x37e8ffce]; sub eax, dword ptr [eax]; add cl, ch; ret 0; 
0x5051ec11  # stosd dword ptr es:[edi], eax; aaa; add dword ptr [eax], eax; add esp, 0xc; pop ebp; ret; 
0x505277e3  # stosd dword ptr es:[edi], eax; add byte ptr [eax], al; add ebp, 0x5c; leave; ret; 
0x505096f2  # stosd dword ptr es:[edi], eax; int 0xef; mov dword ptr [eax + 8], 0x98badcfe; mov dword ptr [eax + 0xc], 0x10325476; ret; 
0x50515e42  # stosd dword ptr es:[edi], eax; pop edi; mov eax, ebp; pop ebp; pop ebx; ret; 
0x5051cb40  # stosd dword ptr es:[edi], eax; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50518f1b  # stosd dword ptr es:[edi], eax; ret 0xffff; 
0x5051f2bd  # sub al, 0; pop esi; pop ebp; ret; 
0x50510e90  # sub al, 0x14; add edi, edi; push dword ptr [ebx]; rcr byte ptr [esi + 0x5f], 0xc9; ret 0x1c; 
0x5050a671  # sub al, 0x33; imul edi, edi, -1; or eax, 0xffffffff; pop esi; pop ebp; ret 0xc; 
0x505145f9  # sub al, 0x3b; ret; 
0x50504e54  # sub al, 0x50; ret; 
0x5051979c  # sub al, 0x5b; leave; ret; 
0x50541724  # sub al, 0x5e; pop ebp; ret; 
0x5052a9e9  # sub al, 0x5f; pop esi; pop ebx; leave; ret; 
0x5053424c  # sub al, 0x84; div byte ptr [esi + ebx - 9]; ret 0; 
0x50519963  # sub al, 0x8b; inc edi; xor byte ptr [ebx], bh; ret; 
0x505273de  # sub al, 0x8b; inc esi; sbb al, 0x8d; push esp; adc dword ptr [ebx + edi], ecx; ret 0x1b7d; 
0x50537431  # sub al, 0xa0; push esp; push eax; mov eax, esi; pop esi; ret; 
0x50537787  # sub al, 0xa0; push esp; push eax; pop ebp; ret; 
0x505475de  # sub al, 0xa0; push esp; push eax; xor eax, eax; ret; 
0x5051e8bf  # sub al, 0xcf; push ebp; push eax; add byte ptr [ecx + 0x5e], bl; ret; 
0x5051e882  # sub al, 0xcf; push ebp; push eax; ret; 
0x5050a0cf  # sub al, 0xd5; jo 0xa0d3; inc dword ptr [ebx + 0x5e5fffc8]; ret 8; 
0x50501ab5  # sub al, 0xef; idiv bh; inc dword ptr [ebx + 0x5e5bffc8]; pop ebp; ret 0xc; 
0x50504eb4  # sub al, 0xf0; ret 0xffff; 
0x50522e47  # sub al, 0xf5; add byte ptr [eax], al; add ebp, 0x68; leave; ret; 
0x5050e9a7  # sub al, 0xff; inc dword ptr [ebp - 0x74fb8a40]; ret; 
0x50526762  # sub al, 1; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x5050f687  # sub al, 2; add byte ptr [ecx + 0x1ffcc5], al; add cl, cl; ret 0xc; 
0x505317d0  # sub al, 4; add byte ptr [eax], al; add eax, 0xc0330474; leave; ret; 
0x505029a0  # sub al, 4; call 0xc03429a7; pop edi; pop esi; pop ebp; ret 0xc; 
0x5050e425  # sub al, byte ptr [ebx - 0x3f]; ret 0x8b0a; 
0x505216a0  # sub al, byte ptr [ebx - 0x7f]; ret; 
0x5051525a  # sub al, byte ptr [esi + 0x18]; mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; pop edi; ret; 
0x505152aa  # sub al, byte ptr [esi + 0x18]; mov ecx, dword ptr [esi + 0x10]; mov edx, dword ptr [esi + 0x18]; mov byte ptr [ecx + edx - 1], al; ret; 
0x5051cd70  # sub al, byte ptr [esi + 0xc]; mov ecx, dword ptr [esi]; mov edx, dword ptr [esi + 0xc]; mov byte ptr [ecx + edx - 1], al; ret; 
0x50527928  # sub bh, bh; inc dword ptr [ebx + 0x56000466]; call 0x2793a; add esp, 0xc; pop esi; ret; 
0x50531878  # sub bh, bh; sal dword ptr [ebx], cl; shl byte ptr [esi - 0x77], 0x45; ret 0x458b; 
0x505017bb  # sub bl, 0x9d; mov eax, esi; pop edi; pop esi; ret 4; 
0x5050173f  # sub bl, 0xd2; mov eax, edi; pop edi; pop esi; ret 8; 
0x505016d9  # sub bl, 0xd9; mov eax, edi; pop edi; pop esi; ret 4; 
0x50502e29  # sub bl, 0xe5; mov eax, dword ptr [eax + ecx*4 + 0xf8]; ret 8; 
0x5050118a  # sub byte ptr [eax - 0x3974afac], ah; pop esi; ret; 
0x50516b61  # sub byte ptr [eax], 1; add byte ptr [eax], al; ret; 
0x50504eea  # sub byte ptr [eax], al; add byte ptr [ebp - 0x17e68a40], al; pushfd; ret 0xffff; 
0x505317ca  # sub byte ptr [ebx - 0x477c8f14], al; sub al, 4; add byte ptr [eax], al; add eax, 0xc0330474; leave; ret; 
0x50515df0  # sub byte ptr [ebx], bh; ret; 
0x5051d772  # sub byte ptr [ecx + ecx + 0x39], dh; dec eax; xor byte ptr [ebp + 4], dh; xor eax, eax; inc eax; ret; 
0x50538f6d  # sub byte ptr [ecx - 0xafafac], ah; adc eax, 0x5054a1e4; leave; ret; 
0x50516b62  # sub byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x5053edc1  # sub byte ptr [edx - 0x18], dh; pop edi; pop esi; ret; 
0x50517a68  # sub byte ptr [esi + 0x5f], bl; pop ebx; leave; ret; 
0x5050f7bb  # sub cl, 0x66; add dword ptr [eax], eax; add dh, dh; ret 0xf02; 
0x50512950  # sub cl, 0x9d; add al, byte ptr [eax]; add byte ptr [esi - 0x75], dl; ret; 
0x505097ee  # sub cl, 0x9f; add byte ptr [eax], al; add byte ptr [ebp + 0x19486], cl; add byte ptr [ebx], bh; ret; 
0x5052d7b3  # sub cl, cl; ret; 
0x50515fb3  # sub dword ptr [eax], eax; add bl, ch; add ecx, dword ptr [ecx - 0x7976efbf]; add al, 0x2d; add byte ptr [eax], al; ret; 
0x5051a2c2  # sub dword ptr [eax], eax; add byte ptr [ebp + 0x5f505163], dh; ret; 
0x5051401a  # sub dword ptr [eax], eax; add byte ptr [ebx], dh; rol byte ptr [eax + 0x59], 0x59; ret 4; 
0x5050c2e4  # sub dword ptr [ebx + 0x32d486], ecx; add byte ptr [ebx], bh; ret; 
0x50517417  # sub dword ptr [ebx - 0x3b7d0000], edi; or al, 0x85; ror byte ptr [edi], 0x84; ret 0xfffe; 
0x50521e2c  # sub dword ptr [ecx], eax; pop edi; pop ebx; ret; 
0x50524397  # sub dword ptr [edi], ecx; test byte ptr [esi - 0x75000000], dh; inc esi; sub al, 0x3b; ret; 
0x5050f9bb  # sub dword ptr [edx], eax; add cl, cl; ret 0x10; 
0x50537af3  # sub eax, 0x59000011; ret; 
0x50516fe0  # sub eax, 0x5d5e0000; pop ebx; ret; 
0x5052f735  # sub eax, 0x83fffed2; les ecx, ptr [edi + ebx*2]; ret; 
0x5054145f  # sub eax, 0x8bffff0f; les edi, ptr [ebx]; ret; 
0x50539e5f  # sub eax, 0x8bffff85; les edi, ptr [ebx]; ret; 
0x505391af  # sub eax, 0xd; je 0x391c0; dec eax; je 0x391ba; xor eax, eax; ret; 
0x5053c3dc  # sub eax, 7; pop ebp; ret; 
0x50536050  # sub eax, dword ptr [eax]; add byte ptr [ecx + 0x5d], bl; ret; 
0x5050e805  # sub eax, dword ptr [eax]; add cl, ch; ret 0; 
0x5054366c  # sub eax, ecx; dec eax; pop ebp; ret; 
0x50541ba1  # sub eax, ecx; pop esi; pop ebp; ret; 
0x50533bea  # sub eax, ecx; ret; 
0x50548862  # sub eax, ecx; xor edx, edx; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x50515798  # sub eax, edx; add eax, ecx; ret; 
0x505156cd  # sub eax, esi; cmp eax, 4; jge 0x156d8; xor eax, eax; pop esi; ret; 
0x50521f37  # sub ebp, dword ptr [edx - 0x3b7c0001]; adc al, 0x5e; ret; 
0x50519752  # sub ebx, ebx; add byte ptr [eax], al; pop ecx; ret; 
0x5051d9e1  # sub edi, 0x5e59ffff; ret; 
0x5051a761  # sub edi, dword ptr [esp + 0x10]; call 0x19758; pop edi; pop esi; ret; 
0x5050e7fd  # sub edi, edi; inc dword ptr [ebx + 0x37e8ffce]; sub eax, dword ptr [eax]; add cl, ch; ret 0; 
0x50532e3a  # sub edx, 1; jne 0x32e35; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5051ce26  # sub edx, eax; cmp edx, 4; jae 0x1ce30; xor eax, eax; ret; 
0x5051ce04  # sub edx, ecx; cmp edx, 1; jae 0x1ce0e; xor eax, eax; ret; 
0x50515786  # sub esi, ecx; cmp esi, edx; pop esi; jge 0x15790; xor eax, eax; ret; 
0x505317cb  # sub esp, 0x70; cmp dword ptr [eax + 0x42c], 5; je 0x317db; xor eax, eax; leave; ret; 
0x50524824  # sub esp, 0xc; cmp eax, edx; jne 0x2482f; xor eax, eax; leave; ret; 
0x5053e3ce  # test ah, 0x41; jp 0x3e3d8; xor eax, eax; inc eax; pop ebp; ret; 
0x5053ee22  # test ah, 5; jp 0x3ee2c; xor eax, eax; inc eax; leave; ret; 
0x50517d50  # test ah, bh; add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0x840f; 
0x50517bb5  # test al, 0; add byte ptr [eax], al; leave; ret; 
0x50516813  # test al, 0; add byte ptr [eax], al; ret; 
0x5054786c  # test al, 0x3b; ret; 
0x5053a7a6  # test al, 0x78; add byte ptr [eax], al; pop ecx; ret; 
0x50520faf  # test al, 0x81; ret 0xc613; 
0x5054401c  # test al, 0xa0; push esp; push eax; mov dword ptr [0x50556ce4], eax; ret; 
0x505412af  # test al, 0xde; push ebp; push eax; pop ebp; ret; 
0x50547b46  # test al, 0xfe; dec ecx; ret 0xc; 
0x5051e832  # test al, al; jne 0x1e84d; xor eax, eax; mov byte ptr [edx], 0; inc eax; ret; 
0x505413f6  # test bh, cl; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x5050885c  # test bl, bh; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x505088d2  # test bl, dl; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50517173  # test byte ptr [0x33000004], dh; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x50502e2d  # test byte ptr [eax + 0xf8], cl; ret 8; 
0x5052a1f3  # test byte ptr [eax], al; add byte ptr [eax], al; pop ebx; leave; ret; 
0x5052a55f  # test byte ptr [eax], al; add byte ptr [eax], al; pop esi; leave; ret; 
0x5052a81a  # test byte ptr [eax], al; add byte ptr [eax], al; pop esi; ret; 
0x50544e8c  # test byte ptr [ebx], bh; ret 0x840f; 
0x5053bfa4  # test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x50534b19  # test byte ptr [edi], -0x61; ret 0x548d; 
0x50534681  # test byte ptr [edi], -0x61; ret; 
0x50535a33  # test byte ptr [edi], -0x7b; ret 0xfff0; 
0x50534933  # test byte ptr [edi], -0x7b; ret 1; 
0x5050ef73  # test byte ptr [edi], bl; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50509f28  # test byte ptr [edx], al; add cl, cl; ret 0xc; 
0x50524399  # test byte ptr [esi - 0x75000000], dh; inc esi; sub al, 0x3b; ret; 
0x5050e332  # test cl, 0xc0; adc byte ptr [ebx], al; ret; 
0x5053bfac  # test dword ptr [0x8b50ffff], ebp; ret; 
0x50523323  # test dword ptr [eax + eax], edx; add byte ptr [eax], al; pop esi; ret; 
0x50534115  # test dword ptr [eax - 0x74000002], edi; inc edi; and byte ptr [ebx], bh; ret; 
0x50538e66  # test dword ptr [ecx + 0x70], edx; jne 0x38e70; call 0x39b35; mov eax, dword ptr [eax + 4]; ret; 
0x50512c07  # test dword ptr [ecx], 0x64c58300; leave; ret 0x14; 
0x5051994f  # test dword ptr [edi - 0x75000000], esp; inc edi; or al, 0x2b; ret; 
0x5051f617  # test dword ptr [edi], 0xf9f70000; mov eax, edx; ret; 
0x5053f471  # test dword ptr [edx - 0x7ffffffb], edx; ret 0xc720; 
0x505128ca  # test eax, 0x810001fa; lds edx, ptr [eax + edx]; add byte ptr [eax], al; leave; ret 0x10; 
0x505484ca  # test eax, 0x81fffe9e; lds edx, ptr [eax - 0x36ffffff]; ret 8; 
0x505214e4  # test eax, 0x81fffecf; ret; 
0x505229cb  # test eax, 0x83000030; les edx, ptr [ebx + ebp]; ret; 
0x5053e42f  # test eax, 0x83ffffff; les edx, ptr [eax]; pop ebp; ret; 
0x5050e31a  # test eax, 0xc14bdecf; ret; 
0x5050f3ca  # test eax, 0xc900022f; ret 8; 
0x50505bf2  # test eax, 0xe980042f; mov edx, 0x8b000001; inc ebp; or byte ptr [ebx], bh; ret; 
0x50503cd1  # test eax, 0xeb80042f; and dword ptr [ebx], edi; ret; 
0x50511582  # test eax, eax; je 0x11589; lea esi, [eax + 1]; mov eax, esi; pop esi; ret; 
0x5051679f  # test eax, eax; je 0x167aa; mov eax, dword ptr [eax + 0x1ac]; ret; 
0x505167c3  # test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x14]; ret; 
0x505167d3  # test eax, eax; je 0x167db; mov eax, dword ptr [eax + 0x1c]; ret; 
0x5051682f  # test eax, eax; je 0x1683a; mov eax, dword ptr [eax + 0x90]; ret; 
0x50516841  # test eax, eax; je 0x1684f; push dword ptr [eax + 0x10]; call 0x1f32c; pop ecx; ret; 
0x50516857  # test eax, eax; je 0x16862; mov eax, dword ptr [eax + 0xe0]; ret; 
0x505168b1  # test eax, eax; je 0x168bc; mov eax, dword ptr [eax + 0xe4]; ret; 
0x505169e5  # test eax, eax; je 0x169f0; mov eax, dword ptr [eax + 0xd4]; ret; 
0x505169f8  # test eax, eax; je 0x16a06; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0xd8], ecx; ret; 
0x50516abb  # test eax, eax; je 0x16ac9; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x114], ecx; ret; 
0x50516b45  # test eax, eax; je 0x16b53; mov ecx, dword ptr [esp + 8]; add dword ptr [eax + 0x124], ecx; ret; 
0x50516b6b  # test eax, eax; je 0x16b79; mov ecx, dword ptr [esp + 8]; mov dword ptr [eax + 0x128], ecx; ret; 
0x5051f2db  # test eax, eax; je 0x1f2e3; mov eax, dword ptr [eax + 8]; ret; 
0x5051f330  # test eax, eax; je 0x1f338; mov eax, dword ptr [eax + 8]; ret; 
0x50502ae6  # test eax, eax; je 0x2af0; mov eax, dword ptr [eax + 0xa0]; ret 4; 
0x50502afc  # test eax, eax; je 0x2b06; mov eax, dword ptr [eax + 0xac]; ret 4; 
0x50533ab2  # test eax, eax; je 0x33a92; mov eax, dword ptr [esi + 0x44]; pop esi; ret; 
0x50537a74  # test eax, eax; je 0x37a56; pop edi; pop ebp; ret; 
0x50537ac4  # test eax, eax; je 0x37acd; push dword ptr [ebp + 8]; call eax; pop ebp; ret; 
0x5053826d  # test eax, eax; je 0x38274; and dword ptr [eax], 0; inc dword ptr [ecx]; leave; ret; 
0x5053e0c3  # test eax, eax; je 0x3e0cc; xor eax, eax; inc eax; pop ebp; ret; 
0x5053ee4b  # test eax, eax; je 0x3ee54; push 0; call eax; ret; 
0x505157bd  # test eax, eax; jge 0x157c4; xor eax, eax; ret; 
0x505157e9  # test eax, eax; jge 0x157f1; xor eax, eax; leave; ret; 
0x50516791  # test eax, eax; jge 0x1679a; mov eax, 0x7fffffff; ret; 
0x505367ee  # test eax, eax; jge 0x367f4; neg eax; pop ebp; ret; 
0x50546733  # test eax, eax; jge 0x4673b; or eax, 0xffffffff; ret; 
0x505112e6  # test eax, eax; jle 0x112f5; push 0x5055ca4c; call dword ptr [0x5054a020]; ret; 
0x50511350  # test eax, eax; jle 0x1135f; push 0x5055ca4c; call dword ptr [0x5054a024]; ret; 
0x50513c12  # test eax, eax; jne 0x13c18; pop esi; ret; 
0x50514897  # test eax, eax; jne 0x1489d; inc eax; ret; 
0x50515810  # test eax, eax; jne 0x15818; xor eax, eax; leave; ret; 
0x50515ec8  # test eax, eax; jne 0x15e99; pop ebx; ret; 
0x50516961  # test eax, eax; jne 0x16969; or eax, 0xffffffff; ret; 
0x5051699d  # test eax, eax; jne 0x169a2; ret; 
0x50516a1d  # test eax, eax; jne 0x16a22; ret; 
0x50516a51  # test eax, eax; jne 0x16a56; ret; 
0x50516a98  # test eax, eax; jne 0x16aa0; or eax, 0xffffffff; ret; 
0x50516aab  # test eax, eax; jne 0x16ab0; ret; 
0x50516ae4  # test eax, eax; jne 0x16ae9; ret; 
0x50516b35  # test eax, eax; jne 0x16b3a; ret; 
0x50516b58  # test eax, eax; jne 0x16b60; or eax, 0xffffffff; ret; 
0x50516c78  # test eax, eax; jne 0x16c7d; ret; 
0x5051ced7  # test eax, eax; jne 0x1cedf; xor eax, eax; leave; ret; 
0x5051d059  # test eax, eax; jne 0x1d05f; leave; ret; 
0x5051e2c1  # test eax, eax; jne 0x1e2ca; or eax, 0xffffffff; leave; ret; 
0x5051e36e  # test eax, eax; jne 0x1e377; or eax, 0xffffffff; leave; ret; 
0x50521e4d  # test eax, eax; jne 0x21e55; xor eax, eax; leave; ret; 
0x50521f47  # test eax, eax; jne 0x21f4d; pop esi; ret; 
0x5052479a  # test eax, eax; jne 0x2479f; ret; 
0x50524802  # test eax, eax; jne 0x247c0; xor eax, eax; pop edi; pop esi; ret; 
0x50524e04  # test eax, eax; jne 0x24e0a; leave; ret; 
0x505266f4  # test eax, eax; jne 0x266f9; ret; 
0x50527941  # test eax, eax; jne 0x2794a; and dword ptr [esi + 4], eax; pop esi; ret; 
0x50528386  # test eax, eax; jne 0x28390; mov eax, 0x5054bcd4; ret; 
0x50535f29  # test eax, eax; jne 0x35f32; push 0x1a; pop eax; pop esi; ret; 
0x505384d6  # test eax, eax; jne 0x384dc; pop ebp; ret; 
0x5053a19a  # test eax, eax; jne 0x3a1a4; mov eax, 0x505569b8; ret; 
0x5053a1ad  # test eax, eax; jne 0x3a1b7; mov eax, 0x505569bc; ret; 
0x5053c389  # test eax, eax; jne 0x3c391; xor eax, eax; pop ebp; ret; 
0x50541c83  # test eax, eax; jne 0x41c8c; xor eax, eax; inc eax; pop ebp; ret; 
0x50546b3f  # test eax, eax; jne 0x46b46; ret 0xc; 
0x50546bbb  # test eax, eax; jne 0x46bc6; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546bf7  # test eax, eax; jne 0x46c02; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546ce5  # test eax, eax; jne 0x46cf0; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546d1e  # test eax, eax; jne 0x46d28; or eax, 0xffffffff; ret 0xc; 
0x50546d32  # test eax, eax; jne 0x46d3d; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x50546d6e  # test eax, eax; jne 0x46d79; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x50546f9e  # test eax, eax; jne 0x46fa9; or eax, 0xffffffff; pop ebp; ret 8; 
0x50547038  # test eax, eax; jne 0x47043; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x50547428  # test eax, eax; jne 0x47433; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x5054746a  # test eax, eax; jne 0x47475; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x505474b2  # test eax, eax; jne 0x474bd; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x505474eb  # test eax, eax; jne 0x474f2; ret 4; 
0x50547518  # test eax, eax; jne 0x47520; pop ebp; ret 8; 
0x5054755d  # test eax, eax; jne 0x47551; xor eax, eax; ret 8; 
0x505475ed  # test eax, eax; jne 0x475f8; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x5054762f  # test eax, eax; jne 0x4763a; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x5054766b  # test eax, eax; jne 0x47676; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x505476a7  # test eax, eax; jne 0x476b2; or eax, 0xffffffff; pop ebp; ret 0x24; 
0x5054852b  # test eax, eax; jne 0x4853b; push 0x3e9; call 0x47c81; xor eax, eax; ret; 
0x50506448  # test eax, eax; jne 0x644c; ret; 
0x5050e5a5  # test eax, eax; jne 0xe5af; or eax, 0xffffffff; ret 8; 
0x505491b9  # test eax, ebp; ret 0x5055; 
0x5051cb83  # test ebx, ebx; jg 0x1cb55; pop edi; pop esi; pop ebx; ret; 
0x5051fff1  # test ebx, ebx; jne 0x1fffa; or eax, 0xffffffff; pop ebx; ret; 
0x50516913  # test ecx, ecx; je 0x1691f; mov edx, dword ptr [eax + 0xe8]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0xec]; ret; 
0x50516af7  # test ecx, ecx; je 0x16b03; mov edx, dword ptr [eax + 0x120]; mov dword ptr [ecx], edx; mov eax, dword ptr [eax + 0x118]; ret; 
0x50516ba9  # test ecx, ecx; je 0x16bb3; mov dword ptr [ecx + 0xdc], eax; push eax; call dword ptr [0x5054a028]; ret; 
0x50502e74  # test ecx, ecx; je 0x2e80; mov eax, dword ptr [eax + 0x110]; mov dword ptr [ecx], eax; xor eax, eax; ret 0xc; 
0x50525e32  # test ecx, ecx; jg 0x25e2d; pop esi; ret; 
0x50528118  # test edi, edi; jg 0x280f2; xor eax, eax; pop edi; pop esi; ret; 
0x50523501  # test edi, edi; sete al; pop edi; pop esi; pop ebx; ret; 
0x5052da48  # test edx, edx; je 0x2da4f; mov dword ptr [ecx + 0xc], edx; ret; 
0x50531751  # test edx, edx; je 0x31758; mov dword ptr [ecx + 0x18], edx; ret; 
0x5051f630  # test edx, edx; jne 0x1f635; ret; 
0x5052426e  # test edx, edx; jne 0x24273; ret; 
0x50511542  # test esi, esi; jne 0x11548; pop esi; ret; 
0x5051686a  # test esi, esi; jne 0x16874; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x505168c4  # test esi, esi; jne 0x168ce; mov eax, dword ptr [esp + 0xc]; pop esi; ret; 
0x505247a2  # test esi, esi; jne 0x247aa; xor eax, eax; pop esi; ret; 
0x50533c2b  # test esi, esi; jne 0x33c20; pop ebx; pop esi; ret; 
0x50541094  # test esi, esi; jne 0x4109d; push 0x18; pop eax; pop esi; ret; 
0x505063c2  # test esi, esi; jne 0x63cd; or eax, 0xffffffff; pop esi; ret 4; 
0x5053b28c  # ud0; call 0x38721; ret; 
0x5052ba03  # ud0; call ptr [ecx + 0x59]; ret; 
0x5052e8d8  # wait; cmp al, byte ptr [eax]; add byte ptr [ecx + 0x198c5], al; add cl, cl; ret; 
0x505096d8  # wait; mov word ptr [edx], es; add cl, cl; ret 0xc; 
0x5051bff7  # xchg ah, cl; add dword ptr [eax], eax; add byte ptr [ebx], ch; ret; 
0x5050c2e6  # xchg ah, dl; xor al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x5050a7e5  # xchg ah, dl; xor al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebp; ret 4; 
0x5050626a  # xchg al, ah; add byte ptr [eax], al; add byte ptr [esi + 0x3b], ah; ret; 
0x50501c6e  # xchg al, dl; xor al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x50524265  # xchg bh, bh; call ptr [ecx + 0x59]; pop esi; ret; 
0x50524212  # xchg bh, bh; inc dword ptr [ebx + 0x59590020]; mov ecx, dword ptr [esp + 4]; mov dword ptr [eax + 4], ecx; ret; 
0x505074af  # xchg byte ptr [eax + 0x33000038], cl; sar byte ptr [ebx], cl; ret 0x1674; 
0x505398b3  # xchg byte ptr [eax + 0x3b000000], bh; ret; 
0x505398a5  # xchg byte ptr [eax + 0x3b000000], dh; ret; 
0x50502abe  # xchg byte ptr [eax + eax + 0x10000], ah; add byte ptr [eax], al; xor eax, eax; pop esi; ret 4; 
0x5051036a  # xchg byte ptr [eax - 0x74fffff6], ch; xchg byte ptr [eax - 0x76fffff6], bh; inc ebp; in al, 0x2b; ret; 
0x5050abff  # xchg byte ptr [eax - 0x76fffff6], bh; inc ebp; adc byte ptr [ebx], ch; ret; 
0x50510370  # xchg byte ptr [eax - 0x76fffff6], bh; inc ebp; in al, 0x2b; ret; 
0x505201f1  # xchg byte ptr [eax - 0x77ffff7f], ah; sbb al, 8; inc dword ptr [esi + 0x81a4]; pop ebx; ret; 
0x50542ad2  # xchg byte ptr [eax - 1], ah; inc dword ptr [ebx - 0x377ceb3c]; call ptr [esi + 0x5d]; ret; 
0x50506126  # xchg byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50501ce9  # xchg byte ptr [eax], cl; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50515e84  # xchg byte ptr [ecx + eax - 0x79750000], dh; dec esp; add dword ptr [eax], eax; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x50525ac2  # xchg byte ptr [ecx + eax*8], al; loope 0x25aca; shr eax, cl; pop esi; and eax, 0xff; ret; 
0x50515d6c  # xchg byte ptr [ecx + eax], cl; add byte ptr [ebx], bh; ret; 
0x50515e8a  # xchg byte ptr [ecx + eax], cl; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x505033dc  # xchg byte ptr [edx + ecx + 0x5e5f0000], ah; pop ebx; pop ebp; ret 0x10; 
0x505033b4  # xchg byte ptr [edx + ecx - 0x14ad0000], ah; ret 0x1468; 
0x5052e4ed  # xchg byte ptr [esi], bh; add byte ptr [eax], al; leave; ret; 
0x50531b8f  # xchg byte ptr [esi], ch; add byte ptr [ebx + 0x889084d], cl; pop ebp; ret; 
0x5050dd72  # xchg cl, al; or al, byte ptr [eax]; add byte ptr [eax - 0x797503bb], cl; ret 0xa; 
0x505164a0  # xchg dword ptr [eax + 0x3b000000], edi; ret; 
0x50525748  # xchg dword ptr [eax + 0x3b], eax; ret; 
0x5052a699  # xchg dword ptr [eax + eax - 0x36a20000], eax; ret; 
0x5052a406  # xchg dword ptr [eax - 0x77000000], eax; pop dword ptr [eax + eax - 0x36a50000]; ret; 
0x5052e0ac  # xchg dword ptr [eax], eax; add byte ptr [ebp + 0x29085], cl; add byte ptr [eax + 0x33], dl; fucomi st(0); ret; 
0x50514ee5  # xchg dword ptr [eax], esi; add al, byte ptr [eax]; add bl, ch; ret 0x87c7; 
0x5051651a  # xchg dword ptr [ecx + eax], ecx; add byte ptr [ecx + 0x2d049f], cl; add byte ptr [ecx + 0x2d009f], cl; add byte ptr [ebx], bh; ret; 
0x5051658f  # xchg dword ptr [ecx + eax], esp; add byte ptr [ebx], bh; ret; 
0x50509c40  # xchg dword ptr [edx], eax; add cl, cl; ret 0x10; 
0x50528dce  # xchg ebp, eax; add byte ptr [eax], al; leave; ret; 
0x50519331  # xchg ebp, eax; mov esi, 0x8b57ffff; ret; 
0x5052523e  # xchg ebp, eax; pop esi; pop edi; pop ebx; leave; ret; 
0x50534001  # xchg ebp, eax; ret 0xc28b; 
0x50545ade  # xchg ebp, eax; ret 0xcafe; 
0x50542822  # xchg ebp, eax; ret 0xff52; 
0x5051571f  # xchg ebp, eax; ret; 
0x50524da5  # xchg ebp, eax; rol dword ptr [ecx + 0x41], 0x8d; inc esp; mov byte ptr [edi + edi*8], dl; or byte ptr [ebx + 0x3b078b3f], cl; ret 0xde75; 
0x5052eede  # xchg ebp, eax; xor al, 0; add byte ptr [ecx + 0x1e0c5], al; add cl, cl; ret; 
0x505215c1  # xchg ebx, eax; add eax, 0x8104881d; ret; 
0x50528ae0  # xchg ebx, eax; cwde; add byte ptr [eax], al; leave; ret; 
0x5051e436  # xchg ecx, eax; add al, byte ptr [eax]; xor eax, eax; ret; 
0x505277e2  # xchg ecx, eax; stosd dword ptr es:[edi], eax; add byte ptr [eax], al; add ebp, 0x5c; leave; ret; 
0x5052a819  # xchg ecx, eax; test byte ptr [eax], al; add byte ptr [eax], al; pop esi; ret; 
0x50508c73  # xchg edi, eax; add al, byte ptr [eax]; leave; ret 8; 
0x5052513a  # xchg edx, eax; fadd qword ptr [eax]; add byte ptr [ebx + 0x37890cc4], al; mov eax, edi; pop edi; ret; 
0x50528d02  # xchg esi, eax; add byte ptr [eax], al; leave; ret; 
0x5050e8dd  # xchg esi, eax; cmp al, byte ptr [edx]; add cl, cl; ret 8; 
0x50513c78  # xchg esi, eax; daa; add byte ptr [eax], al; pop ecx; ret; 
0x50532f01  # xchg esi, eax; pop esi; pop edi; lea eax, [edx - 1]; pop ebx; ret; 
0x505212fb  # xchg esi, eax; salc; pop es; aaa; add byte ptr [ecx + 0x3707d6c6], al; ret; 
0x50549b80  # xchg esi, edi; dec ecx; ret; 
0x5050e537  # xchg esp, eax; adc dword ptr [0xc1bd3af2], esi; ret 0x30a; 
0x5050e421  # xchg esp, eax; adc edx, dword ptr [edi - 0x3ebcd501]; ret 0x8b0a; 
0x5050e47d  # xchg esp, eax; adc edx, dword ptr [edx - 0x7470f334]; fdiv st(7); rol ecx, cl; ret 0x30a; 
0x5050e4d9  # xchg esp, eax; adc esp, eax; out 0x2c, al; dec byte ptr [ebx - 0x3e2c0828]; ret 0x30a; 
0x505097f6  # xchg esp, eax; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x50532f3b  # xchg esp, eax; mov eax, dword ptr [eax]; mov dword ptr [esp], eax; ret; 
0x50512f5a  # xchg esp, eax; rcr byte ptr [ecx + 0x5e], 0x5f; pop ebx; leave; ret 8; 
0x5052bb72  # xchg esp, eax; rcr byte ptr [edi + 0x33], 0xcd; pop esi; call 0x32377; leave; ret; 
0x5051e81a  # xchg esp, eax; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50523504  # xchg esp, eax; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x5052701b  # xchg esp, eax; ret 0x5054; 
0x5054112f  # xchg esp, eax; ret 0xc28b; 
0x5050d930  # xchg esp, eax; sldt word ptr [eax]; leave; ret 0xc; 
0x50516955  # xchg esp, ebp; add byte ptr [eax], al; add byte ptr [esi + 0x5f], bl; ret; 
0x50504c55  # xlatb; add al, byte ptr [eax]; leave; ret 0x10; 
0x50526e31  # xlatb; add byte ptr [eax], al; add esp, 0xc; pop esi; ret; 
0x50531e49  # xlatb; insd dword ptr es:[edi], dx; add byte ptr [eax], al; pop ecx; ret; 
0x5051498b  # xlatb; jg 0x1498e; add byte ptr [ecx + 0x59], bl; ret; 
0x5050976b  # xlatb; pop edi; pop esi; ret; 
0x5054519c  # xlatb; sar esi, 1; dec ecx; ret; 
0x50514019  # xlatb; sub dword ptr [eax], eax; add byte ptr [ebx], dh; rol byte ptr [eax + 0x59], 0x59; ret 4; 
0x50541caf  # xlatb; xor eax, eax; pop ebp; ret; 
0x5051696a  # xor al, 0; add byte ptr [eax], al; ret; 
0x5052eedf  # xor al, 0; add byte ptr [ecx + 0x1e0c5], al; add cl, cl; ret; 
0x505064d8  # xor al, 0; pop esi; ret 4; 
0x5050648c  # xor al, 0x5e; ret 4; 
0x5053436b  # xor al, 0x84; div byte ptr [edi - 9]; ret 0; 
0x50506481  # xor al, 0x85; sal byte ptr [ebp + 4], 0x33; shr bl, 3; mov eax, dword ptr [esi + 0x34]; pop esi; ret 4; 
0x50509c3f  # xor al, 0x87; add al, byte ptr [eax]; leave; ret 0x10; 
0x50527dc3  # xor al, 0x8b; ret; 
0x50535e4e  # xor al, 0xb0; push esi; call 0x36062; pop ecx; pop ecx; ret; 
0x5050dd6a  # xor al, 0xff; dec dword ptr [ebx - 0x75ac1439]; xchg cl, al; or al, byte ptr [eax]; add byte ptr [eax - 0x797503bb], cl; ret 0xa; 
0x50516bd3  # xor al, 1; add byte ptr [eax], al; mov ecx, dword ptr [esp + 0x10]; mov dword ptr [eax + 0x138], ecx; ret; 
0x5050c8d5  # xor al, byte ptr [eax]; add byte ptr [eax - 1], dl; adc eax, 0x5054a04c; xor eax, eax; ret 8; 
0x50501c70  # xor al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x5050a7e7  # xor al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebp; ret 4; 
0x50501df8  # xor al, byte ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 8; 
0x50521f32  # xor al, byte ptr [eax]; add byte ptr [esi - 0x18], dl; sub ebp, dword ptr [edx - 0x3b7c0001]; adc al, 0x5e; ret; 
0x50519746  # xor al, ch; dec eax; iretd; add byte ptr [eax], al; pop ecx; ret; 
0x5051159c  # xor al, ch; dec esi; and eax, 0x59590002; ret; 
0x50543093  # xor al, ch; ret; 
0x50519750  # xor al, ch; sub ebx, ebx; add byte ptr [eax], al; pop ecx; ret; 
0x5051e3eb  # xor bh, bh; adc eax, 0x5054a0ec; mov edx, eax; mov eax, dword ptr [ebp - 8]; leave; ret; 
0x50536f18  # xor bl, byte ptr [edx + 0x45890000]; or byte ptr [ebx], bh; ret; 
0x50532b85  # xor byte ptr [eax + 0x55], ch; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x103; pop ebp; ret; 
0x50532d8f  # xor byte ptr [eax + 0x55], ch; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x107; pop ebp; ret; 
0x50532c8a  # xor byte ptr [eax + 0x55], ch; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 0x80; pop ebp; ret; 
0x50532c06  # xor byte ptr [eax + 0x55], ch; push eax; movzx eax, word ptr [ecx + eax*2]; and eax, 4; pop ebp; ret; 
0x50548195  # xor byte ptr [eax - 0xa], dl; ret; 
0x50516c7e  # xor byte ptr [eax], 1; add byte ptr [eax], al; ret; 
0x505229a2  # xor byte ptr [eax], al; add byte ptr [ebx], ch; ret; 
0x505229c0  # xor byte ptr [eax], al; add byte ptr [edx], ch; ret; 
0x5051d777  # xor byte ptr [ebp + 4], dh; xor eax, eax; inc eax; ret; 
0x50532ed1  # xor byte ptr [ebp - 0x3c], 0x5e; pop edi; pop ebx; xor eax, eax; ret; 
0x50531ecf  # xor byte ptr [ebx + 0x35e8dc75], cl; imul eax, dword ptr [eax], 0; mov dword ptr [eax], esi; call 0x38721; ret; 
0x50515383  # xor byte ptr [ebx + 0x5b5e5fc7], cl; leave; ret; 
0x50518fd9  # xor byte ptr [ebx + 0x5f], bl; pop esi; ret; 
0x5052878f  # xor byte ptr [ebx + ecx*4], al; ret; 
0x50503f2e  # xor byte ptr [ebx], bh; ret; 
0x50523585  # xor byte ptr [ecx + 0x5fc78b18], cl; pop esi; pop ebx; ret; 
0x50516c7f  # xor byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x5051d9b0  # xor byte ptr [edi + 0x5e], bl; ret; 
0x50536218  # xor byte ptr [edi - 0x75], bl; ret; 
0x5053982e  # xor byte ptr [edx + 0xd], ch; call 0x38c24; pop ecx; ret; 
0x5053a1da  # xor byte ptr [esi + 0x5d], bl; ret; 
0x50529808  # xor dh, byte ptr [ebx]; rcr dword ptr [esi - 0x77], 0x42; add al, 0x5b; leave; ret; 
0x50509701  # xor dl, byte ptr [eax]; ret; 
0x50519c94  # xor dword ptr [eax*4 + 0x3b0b74c0], eax; ret 0x775; 
0x50519722  # xor dword ptr [eax], eax; add byte ptr [ecx + 0x5b], bl; leave; ret; 
0x505218fb  # xor dword ptr [ebx], eax; ret; 
0x50534365  # xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x5051f255  # xor dword ptr [ecx], eax; add byte ptr [ecx + 0x4fa0c5], al; add cl, cl; ret; 
0x5050f1b5  # xor dword ptr [edx], eax; add cl, cl; ret 0x14; 
0x50534246  # xor dword ptr [esp + ebx*8 - 0x7c], 0x842c74d2; div byte ptr [esi + ebx - 9]; ret 0; 
0x50517174  # xor eax, 0x33000004; shr byte ptr [ebx], cl; ret 0xc7b9; 
0x50511534  # xor eax, 0x33fffffe; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x50526513  # xor eax, 0x5055d3e8; pop esi; pop ebx; leave; ret; 
0x505263f5  # xor eax, 0x5055d440; pop esi; pop ebx; ret; 
0x5053fce9  # xor eax, 0x5055de8c; call 0x3738a; pop ecx; ret; 
0x50535fa7  # xor eax, 0x5055e274; call 0x36451; pop ecx; ret; 
0x505271af  # xor eax, 0x5959ffff; ret; 
0x50542f42  # xor eax, 0x59ffff4b; ret; 
0x50519399  # xor eax, 0x76ff0000; sbb al, 0xe8; ret 0x35; 
0x50521879  # xor eax, 0x81bd3af2; ret; 
0x50543c36  # xor eax, 0xa3ffffff; push 0x3b5055d5; ret; 
0x5050e539  # xor eax, 0xc1bd3af2; ret 0x30a; 
0x50526f3e  # xor eax, 0xc90000b4; ret; 
0x50527cf4  # xor eax, 0xe85051f8; ret; 
0x5053ef75  # xor eax, dword ptr [eax]; add byte ptr [ebx], ah; ret 0xc483; 
0x50509780  # xor eax, dword ptr [edx*4 + 0x50555868]; mov dword ptr [ecx], eax; ret; 
0x505119ed  # xor eax, eax; add esp, 0x10; inc eax; pop edi; pop esi; ret 4; 
0x5052f3b1  # xor eax, eax; add esp, 0x14; ret 4; 
0x50513ff1  # xor eax, eax; add esp, 0x1c; inc eax; pop ebp; ret 0x10; 
0x50513e12  # xor eax, eax; add esp, 0xc; inc eax; ret; 
0x505311bb  # xor eax, eax; add esp, 4; mov dword ptr [ecx + 0x60], eax; mov dword ptr [ecx + 0x68], eax; mov dword ptr [ecx + 0x64], eax; ret; 
0x505369a2  # xor eax, eax; and cl, 0x1f; shl edx, cl; ret; 
0x505151fe  # xor eax, eax; call 0x151ca; mov eax, dword ptr [esi]; pop ecx; mov dword ptr [esi + 0x18], eax; ret; 
0x5051967d  # xor eax, eax; call 0x18eb6; add esp, 0x18; pop esi; ret; 
0x5051ccbc  # xor eax, eax; call 0x1cc1e; mov eax, dword ptr [esi + 4]; pop ecx; mov dword ptr [esi + 0xc], eax; ret; 
0x50531b3c  # xor eax, eax; call 0x38721; ret; 
0x50516769  # xor eax, eax; cmp dword ptr [ecx + 0x10], eax; setne al; ret; 
0x5051ebdc  # xor eax, eax; cmp dword ptr [ecx + 4], 2; setne al; lea eax, [eax + eax + 1]; ret; 
0x5051dcb0  # xor eax, eax; cmp edi, 1; pop edi; sete al; pop esi; ret; 
0x5051eb3b  # xor eax, eax; inc eax; leave; ret; 
0x505384dc  # xor eax, eax; inc eax; mov dword ptr [0x5055e140], eax; pop ebp; ret; 
0x5053c3bc  # xor eax, eax; inc eax; pop ebp; ret; 
0x5051401d  # xor eax, eax; inc eax; pop ecx; pop ecx; ret 4; 
0x5051cfc2  # xor eax, eax; inc eax; pop edi; leave; ret; 
0x50531a45  # xor eax, eax; inc eax; pop edi; pop esi; pop ebp; ret 0xc; 
0x50538bbb  # xor eax, eax; inc eax; pop edi; pop esi; ret; 
0x50513133  # xor eax, eax; inc eax; pop esi; leave; ret 0xc; 
0x50514829  # xor eax, eax; inc eax; pop esi; pop ebp; ret 4; 
0x5051c415  # xor eax, eax; inc eax; pop esi; pop ebx; ret; 
0x5054881c  # xor eax, eax; inc eax; pop esi; ret 0xc; 
0x5051ce5d  # xor eax, eax; inc eax; pop esi; ret; 
0x50501026  # xor eax, eax; inc eax; ret 0xc; 
0x50547a79  # xor eax, eax; inc eax; ret 8; 
0x50514884  # xor eax, eax; inc eax; ret; 
0x505157ed  # xor eax, eax; leave; ret; 
0x5051e836  # xor eax, eax; mov byte ptr [edx], 0; inc eax; ret; 
0x50546ba5  # xor eax, eax; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x32377; leave; ret; 
0x5051c792  # xor eax, eax; pop ebp; ret; 
0x5052f4ab  # xor eax, eax; pop ebx; add esp, 0x14; ret 4; 
0x5050325e  # xor eax, eax; pop ebx; call 0x32377; add ebp, 0x18c; leave; ret 4; 
0x50539191  # xor eax, eax; pop ebx; leave; ret; 
0x50513d22  # xor eax, eax; pop ebx; pop ebp; ret; 
0x50502be8  # xor eax, eax; pop ebx; pop edi; pop esi; leave; ret 0xc; 
0x50502cb1  # xor eax, eax; pop ebx; pop edi; pop esi; leave; ret 8; 
0x505345d0  # xor eax, eax; pop ebx; pop edi; pop esi; leave; ret; 
0x50508f72  # xor eax, eax; pop ebx; pop esi; pop ebp; ret 8; 
0x50513196  # xor eax, eax; pop ebx; pop esi; ret 8; 
0x50509005  # xor eax, eax; pop ebx; ret 0x10; 
0x5054851a  # xor eax, eax; pop ecx; inc eax; ret; 
0x505380c0  # xor eax, eax; pop ecx; pop ebx; pop edi; pop esi; ret; 
0x50513c5a  # xor eax, eax; pop edi; inc eax; pop esi; ret; 
0x50523682  # xor eax, eax; pop edi; leave; ret; 
0x50510fa3  # xor eax, eax; pop edi; pop ebp; pop esi; pop ebx; ret 4; 
0x5051c4c5  # xor eax, eax; pop edi; pop ebx; leave; ret; 
0x505019bc  # xor eax, eax; pop edi; pop ebx; pop esi; leave; ret 0x10; 
0x5053a448  # xor eax, eax; pop edi; pop ebx; pop esi; leave; ret; 
0x5051da68  # xor eax, eax; pop edi; pop esi; leave; ret; 
0x505029a6  # xor eax, eax; pop edi; pop esi; pop ebp; ret 0xc; 
0x50535c28  # xor eax, eax; pop edi; pop esi; pop ebp; ret; 
0x50508a7c  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 0x10; 
0x505124b0  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 0x18; 
0x5051109c  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 0xc; 
0x50501bf0  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 4; 
0x50507911  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 8; 
0x50511538  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret; 
0x505494d1  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x505495e4  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 0x14; 
0x50508471  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 0x20; 
0x5051349a  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x50525baa  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5050deb5  # xor eax, eax; pop edi; pop esi; pop ebx; ret 8; 
0x505161e7  # xor eax, eax; pop edi; pop esi; pop ebx; ret; 
0x505491ff  # xor eax, eax; pop edi; pop esi; ret 0xc; 
0x50503e3b  # xor eax, eax; pop edi; pop esi; ret 4; 
0x505018a8  # xor eax, eax; pop edi; pop esi; ret 8; 
0x50514923  # xor eax, eax; pop edi; pop esi; ret; 
0x5051fde3  # xor eax, eax; pop esi; inc eax; pop ebx; pop ebp; ret; 
0x505150e4  # xor eax, eax; pop esi; leave; ret; 
0x505491a3  # xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x5051622c  # xor eax, eax; pop esi; pop ebp; ret; 
0x50527167  # xor eax, eax; pop esi; pop ebx; leave; ret; 
0x50547c73  # xor eax, eax; pop esi; pop ebx; pop ebp; ret 0xc; 
0x50510e96  # xor eax, eax; pop esi; pop edi; leave; ret 0x1c; 
0x50513a8f  # xor eax, eax; pop esi; pop edi; pop ebx; leave; ret 0x10; 
0x50541de4  # xor eax, eax; pop esi; pop edi; pop ebx; leave; ret; 
0x50503dce  # xor eax, eax; pop esi; pop edi; pop ebx; pop ebp; ret 8; 
0x5050d662  # xor eax, eax; pop esi; pop edi; ret 8; 
0x50502ac7  # xor eax, eax; pop esi; ret 4; 
0x505156d4  # xor eax, eax; pop esi; ret; 
0x50502e80  # xor eax, eax; ret 0xc; 
0x50547a01  # xor eax, eax; ret 4; 
0x50509e8a  # xor eax, eax; ret 8; 
0x50503821  # xor eax, eax; ret; 
0x5052426c  # xor eax, eax; test edx, edx; jne 0x24273; ret; 
0x505369aa  # xor eax, eax; xor edx, edx; ret; 
0x5052a122  # xor eax, ecx; pop esi; mov dword ptr [edx + 4], eax; pop ebx; leave; ret; 
0x5050a673  # xor ebp, dword ptr [ebx - 1]; inc dword ptr [ebx + 0x5d5effc8]; ret 0xc; 
0x50531e41  # xor ebx, ebx; mov esi, dword ptr [ebp - 0x3c]; push 7; call 0x38c24; pop ecx; ret; 
0x5050f4d4  # xor ecx, ebp; add esp, 0xc; call 0x32377; leave; ret; 
0x50507380  # xor ecx, ebp; call 0x32377; add ebp, 0x18c; leave; ret 8; 
0x50504c51  # xor ecx, ebp; call 0x32377; leave; ret 0x10; 
0x5050ae41  # xor ecx, ebp; call 0x32377; leave; ret 0x14; 
0x50505ba5  # xor ecx, ebp; call 0x32377; leave; ret 0x1c; 
0x5050858f  # xor ecx, ebp; call 0x32377; leave; ret 0x20; 
0x505059b4  # xor ecx, ebp; call 0x32377; leave; ret 0x24; 
0x50505ee3  # xor ecx, ebp; call 0x32377; leave; ret 0x2c; 
0x5050126e  # xor ecx, ebp; call 0x32377; leave; ret 0xc; 
0x5050133d  # xor ecx, ebp; call 0x32377; leave; ret 8; 
0x5053a105  # xor ecx, ebp; call 0x32377; leave; ret; 
0x50520e5e  # xor ecx, ebp; inc eax; pop ebx; call 0x32377; leave; ret; 
0x505128c6  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x1014; leave; ret 0x10; 
0x505484c6  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x190; leave; ret 8; 
0x5052eeda  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x1e0; leave; ret; 
0x5051ea64  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x1f90; leave; ret; 
0x5050f682  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x1ffc; leave; ret 0xc; 
0x505147e1  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x2640; leave; ret 0x20; 
0x50519649  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x3a0; leave; ret; 
0x50527eb5  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x400c; leave; ret; 
0x5052e2f0  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x450; leave; ret; 
0x505277de  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x5c; leave; ret; 
0x50512c02  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x64; leave; ret 0x14; 
0x5050f933  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50522e43  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x68; leave; ret; 
0x505035df  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50528a24  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x6c; leave; ret; 
0x505028f2  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x505223f5  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x74; leave; ret; 
0x505172bf  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x78; leave; ret; 
0x5052d8be  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0x8c; leave; ret; 
0x50517bab  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0xa8; leave; ret; 
0x5051a1b2  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0xb4; leave; ret; 
0x50549441  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0xd0; leave; ret; 
0x505130d6  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0xf90; leave; ret 0xc; 
0x5050d926  # xor ecx, ebp; pop ebx; call 0x32377; add ebp, 0xf94; leave; ret 0xc; 
0x5050ec88  # xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0x10; 
0x505101cb  # xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0x14; 
0x5050c75d  # xor ecx, ebp; pop ebx; call 0x32377; leave; ret 0xc; 
0x5050437a  # xor ecx, ebp; pop ebx; call 0x32377; leave; ret 4; 
0x50518344  # xor ecx, ebp; pop ebx; call 0x32377; leave; ret; 
0x5051f250  # xor ecx, ebp; pop edi; call 0x32377; add ebp, 0x4fa0; leave; ret; 
0x5050684c  # xor ecx, ebp; pop edi; call 0x32377; add ebp, 0x78; leave; ret; 
0x5051ccb1  # xor ecx, ebp; pop edi; call 0x32377; leave; ret; 
0x5052dc04  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x18c; leave; ret; 
0x5052e8d4  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x198; leave; ret; 
0x505487b3  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x19c; leave; ret 4; 
0x50548c7f  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x1a4; leave; ret 4; 
0x50548385  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x68; leave; ret 0x10; 
0x50504821  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x6c; leave; ret 0xc; 
0x50547edb  # xor ecx, ebp; pop esi; call 0x32377; add ebp, 0x74; leave; ret 4; 
0x50547d94  # xor ecx, ebp; pop esi; call 0x32377; leave; ret 0x14; 
0x505492b4  # xor ecx, ebp; pop esi; call 0x32377; leave; ret 0xc; 
0x505093b6  # xor ecx, ebp; pop esi; call 0x32377; leave; ret 4; 
0x50506935  # xor ecx, ebp; pop esi; call 0x32377; leave; ret; 
0x50542fbc  # xor ecx, ecx; cmp dword ptr [0x5055ded0], eax; sete cl; mov eax, ecx; ret; 
0x505412ef  # xor ecx, ecx; cmp eax, 0xc0000017; sete cl; mov eax, ecx; ret; 
0x505488c0  # xor ecx, ecx; inc ecx; mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x50521911  # xor ecx, ecx; mov dword ptr [eax + 0x50], ecx; mov dword ptr [eax + 0x58], ecx; mov dword ptr [eax + 0x54], ecx; ret; 
0x5051c88a  # xor ecx, ecx; mov dword ptr [eax + 4], ecx; mov dword ptr [eax], ecx; mov dword ptr [eax + 8], ecx; ret; 
0x50521c96  # xor ecx, ecx; push dword ptr [esp + 0x18]; call 0x21bf3; add esp, 0x10; pop ebx; ret; 
0x50515e68  # xor edi, edi; call 0x15d2a; pop edi; pop esi; ret; 
0x50517115  # xor edi, edi; call 0x15e72; pop ecx; pop edi; pop esi; ret; 
0x5050ef6c  # xor edi, edi; inc dword ptr [ebx - 0x7bf00008]; pop ds; add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x505151bf  # xor edi, edi; inc edi; call 0x15192; pop ecx; pop edi; ret; 
0x5051cbe8  # xor edi, edi; inc edi; call 0x1cbb9; pop ecx; pop edi; ret; 
0x50540f17  # xor edi, edi; mov esi, dword ptr [ebp + 0xc]; push 4; call 0x38c24; pop ecx; ret; 
0x50501340  # xor edx, dword ptr [eax]; add eax, dword ptr [eax]; leave; ret 8; 
0x50542f32  # xor edx, edx; and cl, 0x1f; shr eax, cl; ret; 
0x50541222  # xor edx, edx; cmp eax, 0xc0000005; sete dl; mov eax, edx; ret; 
0x5051d91a  # xor edx, edx; cmp ecx, dword ptr [eax + 0x20]; setl dl; mov eax, edx; ret; 
0x5053ff0f  # xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x50548864  # xor edx, edx; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x505369ac  # xor edx, edx; ret; 
0x51013efd  # aad 0x5e; pop ebx; pop ebp; ret; 
0x51015f99  # aad 0x8b; jne 0x15fa5; push esi; call 0x1563e; pop ecx; ret; 
0x51011f27  # adc al, 0x3b; ret; 
0x51015877  # adc al, 0x5d; ret; 
0x51014bc5  # adc al, 0x83; retf 0x8bff; ret 0x5beb; 
0x51015edd  # adc al, 0xb; ret; 
0x51012f7b  # adc al, ch; ret 9; 
0x51015b86  # adc byte ptr [eax + 0x33], bh; sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x51011f06  # adc byte ptr [ebx], bh; ret; 
0x51012c6a  # adc byte ptr [ecx + 1], 0; div ecx; pop esi; ret 4; 
0x51013a2b  # adc byte ptr [ecx + 1], 0; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x51013a33  # adc byte ptr [ecx + 1], 0; leave; ret; 
0x51011d92  # adc byte ptr [edi + 0x15ff5101], bh; xor byte ptr [eax + 1], dh; push ecx; xor eax, eax; ret; 
0x51011d48  # adc byte ptr [edi - 0x77caeff], bh; push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x510156d7  # adc byte ptr [esi + 0x5d], bl; ret; 
0x5101103e  # adc eax, 0x51017020; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x510159fb  # adc eax, 0x51017024; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015637  # adc eax, 0x51017024; pop ebp; ret; 
0x51015604  # adc eax, 0x51017024; pop esi; pop ebp; ret; 
0x51015673  # adc eax, 0x51017028; pop ebp; ret; 
0x51011d97  # adc eax, 0x51017030; xor eax, eax; ret; 
0x51011d56  # adc eax, 0x51017034; movzx eax, al; and eax, 1; ret; 
0x51015e7a  # adc eax, 0x51017084; mov dword ptr [0x5101f978], eax; ret; 
0x51011569  # adc eax, 0x5102068c; pop esi; leave; ret 4; 
0x51011407  # adc eax, 0x5102073c; pop esi; leave; ret 8; 
0x51011f1d  # adc eax, dword ptr [eax]; add byte ptr [ecx], bh; pop ebp; mov eax, 0x4d8b1675; adc al, 0x3b; ret; 
0x5101548a  # add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51011ca5  # add al, 0x5d; ret 0xc; 
0x5101621c  # add al, 0x5e; pop ebp; ret; 
0x51011697  # add al, 0xc1; call 0xc0b725a6; shl ecx, 8; or eax, ecx; ret 4; 
0x5101049f  # add al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x510105a2  # add al, 0xfd; add dword ptr [ecx - 0x18], edx; and byte ptr [ecx - 0x3b7c0001], bl; or al, 0x3b; ret; 
0x510103ba  # add al, 0xfd; add dword ptr [ecx - 0x3f], edx; clc; add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x5101143e  # add al, 0xff; ror byte ptr [ebx + 0x5fc78bf8], 1; pop esi; ret; 
0x510118bd  # add al, 7; add dl, byte ptr [ecx - 0x5f]; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x51011779  # add al, byte ptr [edx - 0x75]; ret 0x4848; 
0x510155bd  # add bh, bh; xor eax, 0x510208a8; call 0x9d5e; pop ecx; ret; 
0x51012c6d  # add bh, dh; int1; pop esi; ret 4; 
0x51013a2e  # add bh, dh; stc; imul eax, eax, 0x15180; leave; ret; 
0x51015628  # add byte ptr [eax + 0x5d590000], al; ret; 
0x510155f8  # add byte ptr [eax - 0x14a70000], al; or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x51017024; pop esi; pop ebp; ret; 
0x510136fd  # add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x51013810  # add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x51015629  # add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x51015482  # add byte ptr [eax], al; add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51015fc1  # add byte ptr [eax], al; add byte ptr [ebx - 0x55160038], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x51015fc9  # add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x51013e54  # add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; pop esi; leave; ret; 
0x51013c55  # add byte ptr [eax], al; add cl, cl; ret; 
0x51011d6f  # add byte ptr [eax], al; call 0x11d25; or eax, 0xffffffff; ret; 
0x510135e2  # add byte ptr [eax], al; call 0x120ae; xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x510128fd  # add byte ptr [eax], al; call 0x120ae; xor eax, eax; ret; 
0x510131d9  # add byte ptr [eax], al; jb 0x131c5; xor eax, eax; ret 4; 
0x51013227  # add byte ptr [eax], al; jb 0x131fa; pop edi; pop esi; ret 0xc; 
0x51012bc2  # add byte ptr [eax], al; leave; ret 4; 
0x510128d5  # add byte ptr [eax], al; leave; ret 8; 
0x51013c56  # add byte ptr [eax], al; leave; ret; 
0x51015432  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015483  # add byte ptr [eax], al; mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51012d13  # add byte ptr [eax], al; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x5101591e  # add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x5101562a  # add byte ptr [eax], al; pop ecx; pop ebp; ret; 
0x51014c34  # add byte ptr [eax], al; pop ecx; ret; 
0x51013e55  # add byte ptr [eax], al; pop edi; pop ebx; pop esi; leave; ret; 
0x510155bc  # add byte ptr [eax], al; push dword ptr [0x510208a8]; call 0x9d5e; pop ecx; ret; 
0x510154a6  # add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x51015239  # add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x510104c7  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebx; leave; ret; 
0x51015484  # add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51015fc3  # add byte ptr [ebx - 0x55160038], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x510138c4  # add byte ptr [ebx - 1], cl; dec ecx; ret 0x10; 
0x51013e16  # add byte ptr [ebx], ah; ret 0xc483; 
0x51015fcb  # add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5101562b  # add byte ptr [ecx + 0x5d], bl; ret; 
0x510155fb  # add byte ptr [ecx - 0x15], bl; or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x51017024; pop esi; pop ebp; ret; 
0x51011f1f  # add byte ptr [ecx], bh; pop ebp; mov eax, 0x4d8b1675; adc al, 0x3b; ret; 
0x51013e56  # add byte ptr [edi + 0x5b], bl; pop esi; leave; ret; 
0x5101027b  # add byte ptr [edi + eax - 0x75], dh; dec ebp; clc; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51013eaf  # add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x51013efb  # add byte ptr [edi - 0x2b], bh; pop esi; pop ebx; pop ebp; ret; 
0x510131da  # add byte ptr [edx - 0x18], dh; xor eax, eax; ret 4; 
0x51013228  # add byte ptr [edx - 0x31], dh; pop edi; pop esi; ret 0xc; 
0x51015973  # add byte ptr [esi + 0x5d], bl; ret; 
0x51012c1c  # add cl, byte ptr [ecx + 0x40c03306]; pop esi; ret 0xc; 
0x51012bc3  # add cl, cl; ret 4; 
0x510128d6  # add cl, cl; ret 8; 
0x51013a36  # add cl, cl; ret; 
0x510103c0  # add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x510137b3  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0xc; 
0x51013813  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x5101611b  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x510114b2  # add dh, byte ptr [ebx]; ror byte ptr [ebx - 0x32cc03b3], 0xe8; or dword ptr [edi - 1], ebp; dec ecx; ret; 
0x51011d8e  # add dl, byte ptr [eax - 1]; xor eax, 0x5101bf10; call dword ptr [0x51017030]; xor eax, eax; ret; 
0x510118c4  # add dl, byte ptr [ecx + 0x3b]; ret; 
0x5101156c  # add dl, byte ptr [ecx + 0x5e]; leave; ret 4; 
0x510114af  # add dl, byte ptr [ecx - 0x15]; add dh, byte ptr [ebx]; ror byte ptr [ebx - 0x32cc03b3], 0xe8; or dword ptr [edi - 1], ebp; dec ecx; ret; 
0x51011564  # add dl, byte ptr [ecx - 0x15]; push es; call dword ptr [0x5102068c]; pop esi; leave; ret 4; 
0x510118bf  # add dl, byte ptr [ecx - 0x5f]; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x51011ca0  # add dl, byte ptr [ecx - 0x7b]; sal byte ptr [ebp + 4], 0x5d; ret 0xc; 
0x5101103b  # add dl, byte ptr [ecx - 1]; adc eax, 0x51017020; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x51015a33  # add dword ptr [eax + edx*2], ecx; call dword ptr [0x51017028]; pop ebp; ret; 
0x51012bc1  # add dword ptr [eax], eax; add cl, cl; ret 4; 
0x510128d4  # add dword ptr [eax], eax; add cl, cl; ret 8; 
0x51012c6c  # add dword ptr [eax], eax; div ecx; pop esi; ret 4; 
0x51013a2d  # add dword ptr [eax], eax; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x51013a35  # add dword ptr [eax], eax; leave; ret; 
0x51015e45  # add dword ptr [ebx + 0x374e445], ecx; mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x510156e2  # add dword ptr [ebx], esi; leave; cmp dword ptr [0x51020894], eax; sete cl; mov eax, ecx; ret; 
0x510104a1  # add dword ptr [ecx + 0x3b], edx; ret; 
0x5101563a  # add dword ptr [ecx + 0x5d], edx; ret; 
0x51015607  # add dword ptr [ecx + 0x5e], edx; pop ebp; ret; 
0x51010495  # add dword ptr [ecx + 0x75], edx; or ch, al; xor eax, 0xa3ffffff; add al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x510155a2  # add dword ptr [ecx + 0x7c], edx; into; pop edi; xor eax, eax; pop esi; ret; 
0x51011d59  # add dword ptr [ecx + 0xf], edx; mov dh, 0xc0; and eax, 1; ret; 
0x510105a4  # add dword ptr [ecx - 0x18], edx; and byte ptr [ecx - 0x3b7c0001], bl; or al, 0x3b; ret; 
0x510103bc  # add dword ptr [ecx - 0x3f], edx; clc; add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x51011e6a  # add dword ptr [ecx - 0x75], edx; inc ebp; mov ah, 0x3b; ret; 
0x51011bd1  # add dword ptr [ecx - 0x75], edx; inc ebp; or al, 0x33; fstp xword ptr [ebx]; ret; 
0x51011d4a  # add dword ptr [ecx - 0x7d], edx; clc; push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x51011d94  # add dword ptr [ecx - 1], edx; adc eax, 0x51017030; xor eax, eax; ret; 
0x51015e77  # add dword ptr [ecx - 1], edx; adc eax, 0x51017084; mov dword ptr [0x5101f978], eax; ret; 
0x510134be  # add dword ptr [edx], edi; ret; 
0x51013667  # add dword ptr [edx], esi; ret 0x688; 
0x51015662  # add eax, 0x10; push eax; call 0xb031; pop ecx; pop ebp; ret; 
0x51015632  # add eax, 0x20; push eax; call dword ptr [0x51017024]; pop ebp; ret; 
0x5101566e  # add eax, 0x20; push eax; call dword ptr [0x51017028]; pop ebp; ret; 
0x51015661  # add eax, 0x5010c083; call 0xb031; pop ecx; pop ebp; ret; 
0x510103b9  # add eax, 0x5101fd04; sar eax, 2; neg eax; pop esi; pop ebp; ret; 
0x510156e6  # add eax, 0x51020894; sete cl; mov eax, ecx; ret; 
0x51015544  # add eax, 0x5e581a6a; ret; 
0x510155b8  # add eax, 0x676e8; add bh, bh; xor eax, 0x510208a8; call 0x9d5e; pop ecx; ret; 
0x510117d0  # add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 4; 
0x510128d1  # add ebp, 0x190; leave; ret 8; 
0x51012bbe  # add ebp, 0x19c; leave; ret 4; 
0x51013077  # add ebp, 0x1a4; leave; ret 4; 
0x51012790  # add ebp, 0x68; leave; ret 0x10; 
0x51011031  # add ebp, 0x6c; leave; ret 0xc; 
0x510122e6  # add ebp, 0x74; leave; ret 4; 
0x51013b3b  # add ebp, 0x78; leave; ret; 
0x51013c52  # add ebp, 0xd0; leave; ret; 
0x51015691  # add ecx, 0x10; push ecx; call 0xb031; pop ecx; pop ebp; ret; 
0x510131d1  # add ecx, 0x38; inc eax; cmp ecx, 0xce8; jb 0x131c5; xor eax, eax; ret 4; 
0x510156d4  # add ecx, dword ptr [ebx + 0x5d5e1040]; ret; 
0x51013ac1  # add ecx, dword ptr [ecx - 1]; dec ecx; ret 0xc; 
0x51013e88  # add ecx, dword ptr [ecx]; push es; ret; 
0x51015eac  # add edx, dword ptr [eax - 1]; salc; pop esi; ret; 
0x510155ff  # add esi, 0x20; push esi; call dword ptr [0x51017024]; pop esi; pop ebp; ret; 
0x51013cf3  # add esp, 0x10; pop ebp; ret; 
0x51015875  # add esp, 0x14; pop ebp; ret; 
0x51013252  # add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x5101324b  # and al, 0x10; call 0x8410; add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x51015638  # and al, 0x70; add dword ptr [ecx + 0x5d], edx; ret; 
0x51015605  # and al, 0x70; add dword ptr [ecx + 0x5e], edx; pop ebp; ret; 
0x51012d11  # and al, 0xd; add byte ptr [eax], al; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x51011825  # and al, 4; call eax; ret 4; 
0x51011d13  # and al, 4; je 0x11d20; test eax, eax; jne 0x11d0b; xor eax, eax; ret 8; 
0x51011696  # and al, 4; shr eax, 8; movzx eax, al; shl ecx, 8; or eax, ecx; ret 4; 
0x51012943  # and al, 8; call 0x12797; ret 4; 
0x5101103f  # and byte ptr [eax + 1], dh; push ecx; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x51015634  # and byte ptr [eax - 1], dl; adc eax, 0x51017024; pop ebp; ret; 
0x51015670  # and byte ptr [eax - 1], dl; adc eax, 0x51017028; pop ebp; ret; 
0x51015913  # and byte ptr [eax], al; call 0xc9b0; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x5101034e  # and byte ptr [ebx], bh; ret; 
0x51015b88  # and byte ptr [ebx], dh; sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x510105a7  # and byte ptr [ecx - 0x3b7c0001], bl; or al, 0x3b; ret; 
0x510128f7  # and byte ptr [edx + 0xd], dh; push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x51015601  # and byte ptr [esi - 1], dl; adc eax, 0x51017024; pop esi; pop ebp; ret; 
0x51015912  # and dword ptr [eax], 0; call 0xc9b0; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x51010281  # and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51010379  # and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x51015488  # and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51010424  # and dword ptr [esi], eax; mov eax, dword ptr [ebp - 4]; pop esi; pop edi; leave; ret; 
0x510154ee  # and eax, 0x40; pop esi; pop ebp; ret; 
0x51011d5e  # and eax, 1; ret; 
0x51011d71  # call 0x11d25; or eax, 0xffffffff; ret; 
0x510135e4  # call 0x120ae; xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x5101344a  # call 0x120ae; xor eax, eax; pop esi; pop ebx; pop ebp; ret 0xc; 
0x510128ff  # call 0x120ae; xor eax, eax; ret; 
0x51012945  # call 0x12797; ret 4; 
0x51012be6  # call 0x128f5; pop esi; ret 4; 
0x51012bdf  # call 0x1294d; mov eax, esi; call 0x128f5; pop esi; ret 4; 
0x51013393  # call 0x12bc8; mov eax, edi; pop esi; pop edi; ret 4; 
0x51012d10  # call 0x13a39; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x51013cee  # call 0x13c60; add esp, 0x10; pop ebp; ret; 
0x51014c1d  # call 0x14c2e; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0xabf5; ret; 
0x5101542f  # call 0x1543d; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015f9e  # call 0x1563e; pop ecx; ret; 
0x51015e2e  # call 0x1567a; pop ecx; pop ecx; ret; 
0x51015870  # call 0x156f1; add esp, 0x14; pop ebp; ret; 
0x51014c31  # call 0x15a17; pop ecx; ret; 
0x51015c2a  # call 0x15b03; add esp, 0x10; pop ebp; ret; 
0x510155b9  # call 0x15c34; push dword ptr [0x510208a8]; call 0x9d5e; pop ecx; ret; 
0x51015cbc  # call 0x15cca; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015e5f  # call 0x15d83; pop ecx; ret; 
0x5101606e  # call 0x1607c; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x510161d7  # call 0x161e5; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015812  # call 0x3b525987; ret; 
0x51013225  # call 0x72013236; iretd; pop edi; pop esi; ret 0xc; 
0x510128cc  # call 0x83c8; add ebp, 0x190; leave; ret 8; 
0x51012bb9  # call 0x83c8; add ebp, 0x19c; leave; ret 4; 
0x51013072  # call 0x83c8; add ebp, 0x1a4; leave; ret 4; 
0x5101278b  # call 0x83c8; add ebp, 0x68; leave; ret 0x10; 
0x5101102c  # call 0x83c8; add ebp, 0x6c; leave; ret 0xc; 
0x510122e1  # call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51013b36  # call 0x83c8; add ebp, 0x78; leave; ret; 
0x51013c4d  # call 0x83c8; add ebp, 0xd0; leave; ret; 
0x51011e90  # call 0x83c8; leave; ret 0x10; 
0x51011bba  # call 0x83c8; leave; ret 0x14; 
0x51012411  # call 0x83c8; leave; ret 0xc; 
0x5101023e  # call 0x83c8; leave; ret; 
0x5101324d  # call 0x8410; add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x510155c4  # call 0x9d5e; pop ecx; ret; 
0x51012918  # call 0x9d5e; xor eax, eax; pop ecx; inc eax; ret; 
0x51014c28  # call 0xabf5; ret; 
0x51015666  # call 0xb031; pop ecx; pop ebp; ret; 
0x51015a10  # call 0xb031; pop ecx; ret; 
0x51011699  # call 0xc0b725a6; shl ecx, 8; or eax, ecx; ret 4; 
0x51015915  # call 0xc9b0; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x5101549d  # call 0xc9b0; mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x5101103d  # call dword ptr [0x51017020]; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x510159fa  # call dword ptr [0x51017024]; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015636  # call dword ptr [0x51017024]; pop ebp; ret; 
0x51015603  # call dword ptr [0x51017024]; pop esi; pop ebp; ret; 
0x51015672  # call dword ptr [0x51017028]; pop ebp; ret; 
0x51011d96  # call dword ptr [0x51017030]; xor eax, eax; ret; 
0x51011d55  # call dword ptr [0x51017034]; movzx eax, al; and eax, 1; ret; 
0x51015e79  # call dword ptr [0x51017084]; mov dword ptr [0x5101f978], eax; ret; 
0x51011568  # call dword ptr [0x5102068c]; pop esi; leave; ret 4; 
0x51011406  # call dword ptr [0x5102073c]; pop esi; leave; ret 8; 
0x5101523f  # call dword ptr [eax - 0x75]; ret; 
0x5101143f  # call eax; mov edi, eax; mov eax, edi; pop edi; pop esi; ret; 
0x51011827  # call eax; ret 4; 
0x51015eae  # call esi; pop esi; ret; 
0x51013e81  # call ptr [ecx + 0x59]; cmp eax, -1; jne 0x13e8c; or dword ptr [esi], eax; ret; 
0x51015e32  # call ptr [ecx + 0x59]; ret; 
0x5101566a  # call ptr [ecx + 0x5d]; ret; 
0x510104df  # call ptr [ecx - 0x5d]; add al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x510104fa  # call ptr [ecx - 0x5d]; or al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x510117d3  # call ptr [edi + 0x5e]; pop ebx; leave; ret 4; 
0x510104ca  # call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x510158fa  # call ptr [edi + 0x5e]; pop ebx; pop ebp; ret; 
0x51013191  # call ptr [esi + 0x5b]; pop edi; leave; ret 8; 
0x51012dcd  # call ptr [esi + 0x5b]; pop edi; pop ebp; ret 4; 
0x510103bf  # clc; add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x51015660  # clc; add eax, 0x5010c083; call 0xb031; pop ecx; pop ebp; ret; 
0x510128f6  # clc; and byte ptr [edx + 0xd], dh; push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x51010280  # clc; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51010378  # clc; and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x51013392  # clc; call 0x12bc8; mov eax, edi; pop esi; pop edi; ret 4; 
0x51011442  # clc; mov eax, edi; pop edi; pop esi; ret; 
0x51014b17  # clc; mov edx, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x51011d68  # clc; push dword ptr [ebp + 0xe]; push 0x276d; call 0x11d25; or eax, 0xffffffff; ret; 
0x51013e85  # clc; push dword ptr [ebp + 3]; or dword ptr [esi], eax; ret; 
0x51011d4d  # clc; push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x51014b1a  # cld; pop edi; pop esi; leave; ret; 
0x51010428  # cld; pop esi; pop edi; leave; ret; 
0x51011bb7  # cld; xor ecx, ebp; call 0x83c8; leave; ret 0x14; 
0x5101331d  # cld; xor ecx, ebp; call 0x83c8; leave; ret 0xc; 
0x5101023b  # cld; xor ecx, ebp; call 0x83c8; leave; ret; 
0x51013abc  # cld; xor ecx, ebp; pop esi; call 0x83c8; leave; ret 0xc; 
0x51015360  # cld; xor ecx, ebp; pop esi; call 0x83c8; leave; ret; 
0x51011778  # cli; add al, byte ptr [edx - 0x75]; ret 0x4848; 
0x51011408  # cmp al, 7; add dl, byte ptr [ecx + 0x5e]; leave; ret 8; 
0x510159f7  # cmp byte ptr [eax + edx*2], cl; call dword ptr [0x51017024]; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51013222  # cmp byte ptr [ecx + 0xce8f9], al; add byte ptr [edx - 0x31], dh; pop edi; pop esi; ret 0xc; 
0x5101278c  # cmp byte ptr [edi + edi*8 - 1], bl; add ebp, 0x68; leave; ret 0x10; 
0x510138fd  # cmp dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x510156e5  # cmp dword ptr [0x51020894], eax; sete cl; mov eax, ecx; ret; 
0x51013eac  # cmp dword ptr [ebp + 0xc], 0; jg 0x13e99; pop esi; pop ebp; ret; 
0x51013ef8  # cmp dword ptr [ebp + 8], 0; jg 0x13ed3; pop esi; pop ebx; pop ebp; ret; 
0x51015e42  # cmp dword ptr [ebp + 8], 1; mov eax, dword ptr [ebp - 0x1c]; je 0x15e4e; mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x51011d4c  # cmp eax, -1; jne 0x11d54; xor eax, eax; ret; 
0x51011d67  # cmp eax, -1; jne 0x11d7a; push 0x276d; call 0x11d25; or eax, 0xffffffff; ret; 
0x51013e84  # cmp eax, -1; jne 0x13e8c; or dword ptr [esi], eax; ret; 
0x51015ea8  # cmp eax, -2; je 0x15eb0; push eax; call esi; pop esi; ret; 
0x510128f5  # cmp eax, 0x20; jb 0x12907; push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x5101559e  # cmp ecx, 0x5101f760; jl 0x15574; pop edi; xor eax, eax; pop esi; ret; 
0x510131d5  # cmp ecx, 0xce8; jb 0x131c5; xor eax, eax; ret 4; 
0x51013223  # cmp ecx, 0xce8; jb 0x131fa; pop edi; pop esi; ret 0xc; 
0x51014a74  # cmp edi, edi; dec ecx; ret; 
0x51011d6e  # daa; add byte ptr [eax], al; call 0x11d25; or eax, 0xffffffff; ret; 
0x51013598  # dec dword ptr [ebx + 0x5b5e5fc6]; leave; ret 0x10; 
0x51015626  # dec eax; or al, 0; add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x51011f26  # dec ebp; adc al, 0x3b; ret; 
0x51011f05  # dec ebp; adc byte ptr [ebx], bh; ret; 
0x5101027f  # dec ebp; clc; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51011bb6  # dec ebp; cld; xor ecx, ebp; call 0x83c8; leave; ret 0x14; 
0x5101331c  # dec ebp; cld; xor ecx, ebp; call 0x83c8; leave; ret 0xc; 
0x5101023a  # dec ebp; cld; xor ecx, ebp; call 0x83c8; leave; ret; 
0x51011e94  # dec ecx; ret 0x10; 
0x51011bbe  # dec ecx; ret 0x14; 
0x51012415  # dec ecx; ret 0xc; 
0x51010242  # dec ecx; ret; 
0x51012c1a  # div byte ptr [edx + eax - 0x77]; push es; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x51012c6e  # div ecx; pop esi; ret 4; 
0x51015d78  # fcomp dword ptr [ecx + 0x1b]; shr bl, 2; xor eax, eax; pop esi; pop ebp; ret; 
0x510103c2  # fcomp dword ptr [esi + 0x5d]; ret; 
0x5101522f  # fdivr dword ptr [ebx]; fimul word ptr [edi]; test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x51015231  # fimul word ptr [edi]; test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x51011bd7  # fstp xword ptr [ebx]; ret; 
0x51013a2f  # idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x51013a31  # imul eax, eax, 0x15180; leave; ret; 
0x51012be0  # imul edi, ebp, 0xc68bffff; call 0x128f5; pop esi; ret 4; 
0x51010859  # in al, 0xe8; ret; 
0x51015e75  # in al, dx; lea eax, [ecx]; push ecx; call dword ptr [0x51017084]; mov dword ptr [0x5101f978], eax; ret; 
0x51011c9c  # in al, dx; mov eax, dword ptr [0x510206e0]; test eax, eax; jne 0x11caa; pop ebp; ret 0xc; 
0x5101523d  # in eax, 0xff; call dword ptr [eax - 0x75]; ret; 
0x5101318e  # inc dword ptr [ebx + 0x5b5effc8]; pop edi; leave; ret 8; 
0x51012dca  # inc dword ptr [ebx + 0x5b5effc8]; pop edi; pop ebp; ret 4; 
0x51013ef7  # inc dword ptr [ebx + 0x7f00087d]; aad 0x5e; pop ebx; pop ebp; ret; 
0x51013251  # inc dword ptr [ebx - 0x3fccf33c]; inc eax; ret 8; 
0x51011b7c  # inc dword ptr [ebx - 0x7b5ef33c]; pop es; add dl, byte ptr [ecx + 0x3b]; ret; 
0x510128d0  # inc dword ptr [ecx + 0x190c5]; add cl, cl; ret 8; 
0x51012bbd  # inc dword ptr [ecx + 0x19cc5]; add cl, cl; ret 4; 
0x51013076  # inc dword ptr [ecx + 0x1a4c5]; add cl, cl; ret 4; 
0x51013c51  # inc dword ptr [ecx + 0xd0c5]; add cl, cl; ret; 
0x51013e8c  # inc dword ptr [esi]; ret; 
0x510156d6  # inc eax; adc byte ptr [esi + 0x5d], bl; ret; 
0x510131d4  # inc eax; cmp ecx, 0xce8; jb 0x131c5; xor eax, eax; ret 4; 
0x51015f69  # inc eax; je 0x15f78; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x510154f0  # inc eax; pop esi; pop ebp; ret; 
0x51012c21  # inc eax; pop esi; ret 0xc; 
0x51015e73  # inc eax; push 0x51018dec; call dword ptr [0x51017084]; mov dword ptr [0x5101f978], eax; ret; 
0x51013257  # inc eax; ret 8; 
0x510134a7  # inc ebp; adc al, 0x3b; ret; 
0x5101349e  # inc ebp; adc byte ptr [ebx], bh; ret; 
0x51010427  # inc ebp; cld; pop esi; pop edi; leave; ret; 
0x51011e6d  # inc ebp; mov ah, 0x3b; ret; 
0x51011bd4  # inc ebp; or al, 0x33; fstp xword ptr [ebx]; ret; 
0x51013495  # inc ebp; or al, 0x3b; ret; 
0x51015630  # inc ebp; or al, 0x83; shl byte ptr [eax], 0x50; call dword ptr [0x51017024]; pop ebp; ret; 
0x51013c8e  # inc ebp; or byte ptr [ebx], bh; ret; 
0x51012597  # inc ebp; xor byte ptr [eax - 0xa], dl; ret; 
0x51012cba  # inc ecx; mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x5101621b  # inc esi; add al, 0x5e; pop ebp; ret; 
0x51016218  # inc esi; or byte ptr [ecx + 0x5d5e0446], cl; ret; 
0x51015a32  # inc esp; add dword ptr [eax + edx*2], ecx; call dword ptr [0x51017028]; pop ebp; ret; 
0x510159f6  # inc esp; cmp byte ptr [eax + edx*2], cl; call dword ptr [0x51017024]; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51011033  # insb byte ptr es:[edi], dx; leave; ret 0xc; 
0x51011d6d  # insd dword ptr es:[edi], dx; daa; add byte ptr [eax], al; call 0x11d25; or eax, 0xffffffff; ret; 
0x510128ca  # int 0x5b; call 0x83c8; add ebp, 0x190; leave; ret 8; 
0x5101102a  # int 0x5b; call 0x83c8; add ebp, 0x6c; leave; ret 0xc; 
0x51012606  # int 0x5b; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51013b34  # int 0x5b; call 0x83c8; add ebp, 0x78; leave; ret; 
0x51013c4b  # int 0x5b; call 0x83c8; add ebp, 0xd0; leave; ret; 
0x51011e8e  # int 0x5b; call 0x83c8; leave; ret 0x10; 
0x51012550  # int 0x5b; call 0x83c8; leave; ret 0xc; 
0x51014a70  # int 0x5b; call 0x83c8; leave; ret; 
0x51012bb7  # int 0x5e; call 0x83c8; add ebp, 0x19c; leave; ret 4; 
0x51013070  # int 0x5e; call 0x83c8; add ebp, 0x1a4; leave; ret 4; 
0x51012789  # int 0x5e; call 0x83c8; add ebp, 0x68; leave; ret 0x10; 
0x510122df  # int 0x5e; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51012198  # int 0x5e; call 0x83c8; leave; ret 0x10; 
0x5101240f  # int 0x5e; call 0x83c8; leave; ret 0xc; 
0x51015362  # int 0x5e; call 0x83c8; leave; ret; 
0x5101331f  # int 0xe8; mov dword ptr [0xc9ffff50], eax; ret 0xc; 
0x51011bb9  # int 0xe8; or dword ptr [eax - 1], ebp; dec ecx; ret 0x14; 
0x510106b9  # int 0xe8; or dword ptr [ebp - 1], edi; dec ecx; ret; 
0x510114b9  # int 0xe8; or dword ptr [edi - 1], ebp; dec ecx; ret; 
0x5101086d  # int 0xe8; push ebp; jnp 0x10871; dec ecx; ret; 
0x51012c6f  # int1; pop esi; ret 4; 
0x510155a5  # into; pop edi; xor eax, eax; pop esi; ret; 
0x5101322a  # iretd; pop edi; pop esi; ret 0xc; 
0x510128f8  # jb 0x12907; push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x510131db  # jb 0x131c5; xor eax, eax; ret 4; 
0x51013229  # jb 0x131fa; pop edi; pop esi; ret 0xc; 
0x510155ba  # jbe 0x155c2; add byte ptr [eax], al; push dword ptr [0x510208a8]; call 0x9d5e; pop ecx; ret; 
0x5101027c  # je 0x10285; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51011d15  # je 0x11d20; test eax, eax; jne 0x11d0b; xor eax, eax; ret 8; 
0x510122e8  # je 0x122b3; ret 4; 
0x5101260f  # je 0x125da; ret 4; 
0x51012c1b  # je 0x12c1f; mov dword ptr [esi], eax; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x51013b32  # je 0x13b67; int 0x5b; call 0x83c8; add ebp, 0x78; leave; ret; 
0x51013eaa  # je 0x13eb2; cmp dword ptr [ebp + 0xc], 0; jg 0x13e99; pop esi; pop ebp; ret; 
0x510155b7  # je 0x155be; call 0x15c34; push dword ptr [0x510208a8]; call 0x9d5e; pop ecx; ret; 
0x51015e49  # je 0x15e4e; mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x51015eab  # je 0x15eb0; push eax; call esi; pop esi; ret; 
0x51015f6a  # je 0x15f78; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51012c64  # jecxz 0x12c91; sal dword ptr [ebx], 0xd2; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x51013eb0  # jg 0x13e99; pop esi; pop ebp; ret; 
0x51013efc  # jg 0x13ed3; pop esi; pop ebx; pop ebp; ret; 
0x510106bc  # jge 0x106bd; dec ecx; ret; 
0x51011045  # jge 0x1104b; or eax, 0xffffffff; ret; 
0x51013ead  # jge 0x13ebb; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x51013ef9  # jge 0x13f03; add byte ptr [edi - 0x2b], bh; pop esi; pop ebx; pop ebp; ret; 
0x51015e43  # jge 0x15e4d; add dword ptr [ebx + 0x374e445], ecx; mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x510155a4  # jl 0x15574; pop edi; xor eax, eax; pop esi; ret; 
0x51015f6d  # jle 0x15f7b; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51011404  # jne 0x1140e; call dword ptr [0x5102073c]; pop esi; leave; ret 8; 
0x51011401  # jne 0x1140f; push dword ptr [ebp + 8]; call dword ptr [0x5102073c]; pop esi; leave; ret 8; 
0x5101144f  # jne 0x11454; ret 0xc; 
0x5101157d  # jne 0x11586; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x510115b6  # jne 0x115be; or eax, 0xffffffff; ret 0xc; 
0x510115ca  # jne 0x115d3; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011606  # jne 0x1160f; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x51011836  # jne 0x1183f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c26  # jne 0x11c2f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c68  # jne 0x11c71; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011ca4  # jne 0x11caa; pop ebp; ret 0xc; 
0x51011cda  # jne 0x11cdf; ret 4; 
0x51011d19  # jne 0x11d0b; xor eax, eax; ret 8; 
0x51011d4f  # jne 0x11d54; xor eax, eax; ret; 
0x51011d6a  # jne 0x11d7a; push 0x276d; call 0x11d25; or eax, 0xffffffff; ret; 
0x51011da9  # jne 0x11db2; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51012930  # jne 0x1293e; push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x51013cec  # jne 0x13cf6; call 0x13c60; add esp, 0x10; pop ebp; ret; 
0x51013ce9  # jne 0x13cf7; push dword ptr [ebp + 8]; call 0x13c60; add esp, 0x10; pop ebp; ret; 
0x51013e87  # jne 0x13e8c; or dword ptr [esi], eax; ret; 
0x51014c2f  # jne 0x14c39; call 0x15a17; pop ecx; ret; 
0x5101543e  # jne 0x15448; call 0x15a17; pop ecx; ret; 
0x5101549b  # jne 0x154ac; call 0xc9b0; mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x51015543  # jne 0x1554a; push 0x1a; pop eax; pop esi; ret; 
0x5101586e  # jne 0x15878; call 0x156f1; add esp, 0x14; pop ebp; ret; 
0x5101586b  # jne 0x15879; push dword ptr [ebp + 8]; call 0x156f1; add esp, 0x14; pop ebp; ret; 
0x51015c28  # jne 0x15c32; call 0x15b03; add esp, 0x10; pop ebp; ret; 
0x51015c25  # jne 0x15c33; push dword ptr [ebp + 8]; call 0x15b03; add esp, 0x10; pop ebp; ret; 
0x51015f9b  # jne 0x15fa5; push esi; call 0x1563e; pop ecx; ret; 
0x5101607d  # jne 0x16087; call 0x15a17; pop ecx; ret; 
0x510161e6  # jne 0x161f0; call 0x15a17; pop ecx; ret; 
0x51010870  # jnp 0x10871; dec ecx; ret; 
0x51010283  # jo 0x10282; leave; ret; 
0x5101037b  # jo 0x1037a; pop esi; pop ebx; leave; ret; 
0x51011040  # jo 0x11043; push ecx; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x51011d58  # jo 0x11d5b; push ecx; movzx eax, al; and eax, 1; ret; 
0x51011d99  # jo 0x11d9c; push ecx; xor eax, eax; ret; 
0x510122dd  # jo 0x12312; int 0x5e; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51012604  # jo 0x12639; int 0x5b; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51015606  # jo 0x15609; push ecx; pop esi; pop ebp; ret; 
0x51015639  # jo 0x1563c; push ecx; pop ebp; ret; 
0x51015675  # jo 0x15678; push ecx; pop ebp; ret; 
0x510156a4  # jo 0x156a7; push ecx; pop ebp; ret; 
0x5101579d  # jo 0x1579c; pop edi; pop esi; pop ebx; leave; ret; 
0x510159fd  # jo 0x15a00; push ecx; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015a39  # jo 0x15a3c; push ecx; pop ebp; ret; 
0x51015e7c  # jo 0x15e7f; push ecx; mov dword ptr [0x5101f978], eax; ret; 
0x51013b3d  # js 0x13b08; ret; 
0x51012791  # lds ebp, ptr [eax - 0x37]; ret 0x10; 
0x51013b3c  # lds edi, ptr [eax - 0x37]; ret; 
0x510128d2  # lds edx, ptr [eax - 0x36ffffff]; ret 8; 
0x510159f5  # lea eax, [eax + edi + 0xc]; push eax; call dword ptr [0x51017024]; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015a31  # lea eax, [ecx + eax + 0xc]; push eax; call dword ptr [0x51017028]; pop ebp; ret; 
0x51015e76  # lea eax, [ecx]; push ecx; call dword ptr [0x51017084]; mov dword ptr [0x5101f978], eax; ret; 
0x510156e4  # leave; cmp dword ptr [0x51020894], eax; sete cl; mov eax, ecx; ret; 
0x51012cb9  # leave; inc ecx; mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x51011e95  # leave; ret 0x10; 
0x51011bbf  # leave; ret 0x14; 
0x51011034  # leave; ret 0xc; 
0x5101156f  # leave; ret 4; 
0x510128d7  # leave; ret 8; 
0x51010243  # leave; ret; 
0x51010570  # les ecx, ptr [ebx + edi]; ret; 
0x51011b7e  # les ecx, ptr [ecx]; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x51013cf4  # les edx, ptr [eax]; pop ebp; ret; 
0x51014bc4  # les edx, ptr [ebx + eax*4]; retf 0x8bff; ret 0x5beb; 
0x51015edc  # les edx, ptr [ebx + ecx]; ret; 
0x510135e6  # ljmp 0x5d5e:0xc033ffff; ret 0xc; 
0x5101165c  # ljmp 0xb60f:0xc0b70f08; ror byte ptr [ebx], cl; ret 0xe9c1; 
0x5101169f  # loope 0x116a9; or eax, ecx; ret 4; 
0x51014c32  # loope 0x14c41; add byte ptr [eax], al; pop ecx; ret; 
0x51011e01  # mov ah, 0x3b; ret; 
0x51015e2c  # mov al, 0x56; call 0x1567a; pop ecx; pop ecx; ret; 
0x51011d5c  # mov dh, 0xc0; and eax, 1; ret; 
0x5101169c  # mov dh, 0xc0; shl ecx, 8; or eax, ecx; ret 4; 
0x51015e7f  # mov dword ptr [0x5101f978], eax; ret; 
0x51013321  # mov dword ptr [0xc9ffff50], eax; ret 0xc; 
0x51012cbb  # mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x5101591a  # mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x510154a2  # mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x51015b29  # mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5101548c  # mov dword ptr [ecx], eax; pop ebp; ret; 
0x51015f6c  # mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x5101621a  # mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x51016217  # mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x51016215  # mov dword ptr [esi], eax; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x51012c1d  # mov dword ptr [esi], eax; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x51011f22  # mov eax, 0x4d8b1675; adc al, 0x3b; ret; 
0x510154f4  # mov eax, 0x5101f6f0; ret; 
0x51011d47  # mov eax, dword ptr [0x5101bf10]; cmp eax, -1; jne 0x11d54; xor eax, eax; ret; 
0x51011576  # mov eax, dword ptr [0x51020690]; test eax, eax; jne 0x11586; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x510115af  # mov eax, dword ptr [0x51020694]; test eax, eax; jne 0x115be; or eax, 0xffffffff; ret 0xc; 
0x510115c3  # mov eax, dword ptr [0x5102069c]; test eax, eax; jne 0x115d3; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x510115ff  # mov eax, dword ptr [0x510206a0]; test eax, eax; jne 0x1160f; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x51011c1f  # mov eax, dword ptr [0x510206cc]; test eax, eax; jne 0x11c2f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c61  # mov eax, dword ptr [0x510206dc]; test eax, eax; jne 0x11c71; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011c9d  # mov eax, dword ptr [0x510206e0]; test eax, eax; jne 0x11caa; pop ebp; ret 0xc; 
0x51011cd3  # mov eax, dword ptr [0x510206e4]; test eax, eax; jne 0x11cdf; ret 4; 
0x51011da2  # mov eax, dword ptr [0x51020728]; test eax, eax; jne 0x11db2; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011448  # mov eax, dword ptr [0x510208a4]; test eax, eax; jne 0x11454; ret 0xc; 
0x510156d5  # mov eax, dword ptr [eax + 0x10]; pop esi; pop ebp; ret; 
0x51015972  # mov eax, dword ptr [eax]; pop esi; pop ebp; ret; 
0x5101562f  # mov eax, dword ptr [ebp + 0xc]; add eax, 0x20; push eax; call dword ptr [0x51017024]; pop ebp; ret; 
0x51015434  # mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015e46  # mov eax, dword ptr [ebp - 0x1c]; je 0x15e4e; mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x51015e4b  # mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x51014c22  # mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0xabf5; ret; 
0x51010426  # mov eax, dword ptr [ebp - 4]; pop esi; pop edi; leave; ret; 
0x51015485  # mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51012cbe  # mov eax, ecx; pop ebp; ret 0xc; 
0x510156ee  # mov eax, ecx; ret; 
0x51011443  # mov eax, edi; pop edi; pop esi; ret; 
0x51013398  # mov eax, edi; pop esi; pop edi; ret 4; 
0x51012be4  # mov eax, esi; call 0x128f5; pop esi; ret 4; 
0x51013599  # mov eax, esi; pop edi; pop esi; pop ebx; leave; ret 0x10; 
0x51012d15  # mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x51013cd8  # mov eax, esi; pop esi; pop ebx; leave; ret; 
0x51011c9b  # mov ebp, esp; mov eax, dword ptr [0x510206e0]; test eax, eax; jne 0x11caa; pop ebp; ret 0xc; 
0x51012c69  # mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x51013a2a  # mov ecx, 0x15180; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x51011bb5  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret 0x14; 
0x5101331b  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret 0xc; 
0x51010239  # mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret; 
0x5101027e  # mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51011d93  # mov edi, 0x15ff5101; xor byte ptr [eax + 1], dh; push ecx; xor eax, eax; ret; 
0x51011d49  # mov edi, 0xf8835101; push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x51013391  # mov edi, eax; call 0x12bc8; mov eax, edi; pop esi; pop edi; ret 4; 
0x51011441  # mov edi, eax; mov eax, edi; pop edi; pop esi; ret; 
0x510136f8  # mov edx, 0x6c6c033; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x51014c25  # mov edx, dword ptr [ebp - 0x20]; call 0xabf5; ret; 
0x51014b18  # mov edx, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x51015f9a  # mov esi, dword ptr [ebp + 8]; push esi; call 0x1563e; pop ecx; ret; 
0x51013c28  # mov word ptr [eax], cs; add dl, byte ptr [ecx + 0x3b]; ret; 
0x51015b28  # mov word ptr [eax], cx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5101156a  # mov word ptr [esi], es; add dl, byte ptr [ecx + 0x5e]; leave; ret 4; 
0x51013079  # movsb byte ptr es:[edi], byte ptr [esi]; add dword ptr [eax], eax; add cl, cl; ret 4; 
0x51011449  # movsb byte ptr es:[edi], byte ptr [esi]; or byte ptr [edx], al; push ecx; test eax, eax; jne 0x11454; ret 0xc; 
0x510154e9  # movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x51011d5b  # movzx eax, al; and eax, 1; ret; 
0x5101169b  # movzx eax, al; shl ecx, 8; or eax, ecx; ret 4; 
0x510128cd  # neg dword ptr [edx - 1]; inc dword ptr [ecx + 0x190c5]; add cl, cl; ret 8; 
0x510103c1  # neg eax; pop esi; pop ebp; ret; 
0x510128d3  # nop; add dword ptr [eax], eax; add cl, cl; ret 8; 
0x51015627  # or al, 0; add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x51014c1e  # or al, 0; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0xabf5; ret; 
0x510131d8  # or al, 0; add byte ptr [edx - 0x18], dh; xor eax, eax; ret 4; 
0x51013226  # or al, 0; add byte ptr [edx - 0x31], dh; pop edi; pop esi; ret 0xc; 
0x51013eae  # or al, 0; jg 0x13e99; pop esi; pop ebp; ret; 
0x51011bd5  # or al, 0x33; fstp xword ptr [ebx]; ret; 
0x51010571  # or al, 0x3b; ret; 
0x51015f68  # or al, 0x40; je 0x15f78; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x510159f8  # or al, 0x50; call dword ptr [0x51017024]; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015a34  # or al, 0x50; call dword ptr [0x51017028]; pop ebp; ret; 
0x51015631  # or al, 0x83; shl byte ptr [eax], 0x50; call dword ptr [0x51017024]; pop ebp; ret; 
0x51015f6b  # or al, 0x89; jle 0x15f7b; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015f21  # or al, 0x8b; ret; 
0x51011b7f  # or al, 0xa1; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x510104fd  # or al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x51011402  # or al, 0xff; jne 0x1140e; call dword ptr [0x5102073c]; pop esi; leave; ret 8; 
0x51013cea  # or al, 0xff; jne 0x13cf6; call 0x13c60; add esp, 0x10; pop ebp; ret; 
0x5101586c  # or al, 0xff; jne 0x15878; call 0x156f1; add esp, 0x14; pop ebp; ret; 
0x51015c26  # or al, 0xff; jne 0x15c32; call 0x15b03; add esp, 0x10; pop ebp; ret; 
0x510155fe  # or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x51017024; pop esi; pop ebp; ret; 
0x51014c30  # or al, ch; loope 0x14c41; add byte ptr [eax], al; pop ecx; ret; 
0x51011405  # or bh, bh; adc eax, 0x5102073c; pop esi; leave; ret 8; 
0x510118ff  # or bh, bh; ror byte ptr [ebx + 0x784a1f0], 1; add dl, byte ptr [ecx + 0x3b]; ret; 
0x51010782  # or bh, bh; ror dword ptr [ebx + 0x75f73bf0], cl; ret; 
0x51012bba  # or bl, byte ptr [eax - 1]; inc dword ptr [ecx + 0x19cc5]; add cl, cl; ret 4; 
0x51013547  # or bl, byte ptr [ecx + 0x2b]; ret 0xf799; 
0x51013efa  # or byte ptr [eax], al; jg 0x13ed3; pop esi; pop ebx; pop ebp; ret; 
0x51015ea7  # or byte ptr [ebx + 0x374fef8], al; push eax; call esi; pop esi; ret; 
0x51013c8f  # or byte ptr [ebx], bh; ret; 
0x51015b2a  # or byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x51016219  # or byte ptr [ecx + 0x5d5e0446], cl; ret; 
0x51015e44  # or byte ptr [ecx], al; mov eax, dword ptr [ebp - 0x1c]; je 0x15e4e; mov eax, dword ptr [ebp - 0x24]; call 0xabf5; ret; 
0x5101169a  # or byte ptr [edi], cl; mov dh, 0xc0; shl ecx, 8; or eax, ecx; ret 4; 
0x51015b8d  # or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x510155c1  # or byte ptr [edx], al; push ecx; call 0x9d5e; pop ecx; ret; 
0x510156e8  # or byte ptr [edx], al; push ecx; sete cl; mov eax, ecx; ret; 
0x5101144a  # or byte ptr [edx], al; push ecx; test eax, eax; jne 0x11454; ret 0xc; 
0x51010498  # or ch, al; xor eax, 0xa3ffffff; add al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x5101165a  # or cl, al; ljmp 0xb60f:0xc0b70f08; ror byte ptr [ebx], cl; ret 0xe9c1; 
0x51015625  # or dword ptr [eax + 0xc], 0x8000; pop ecx; pop ebp; ret; 
0x51011bbb  # or dword ptr [eax - 1], ebp; dec ecx; ret 0x14; 
0x51015430  # or dword ptr [eax], eax; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x5101591c  # or dword ptr [eax], eax; add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x510154a4  # or dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x510106bb  # or dword ptr [ebp - 1], edi; dec ecx; ret; 
0x510114bb  # or dword ptr [edi - 1], ebp; dec ecx; ret; 
0x51013e89  # or dword ptr [esi], eax; ret; 
0x51012d12  # or eax, 0xc68b0000; pop esi; pop ebp; ret 0x10; 
0x51011838  # or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011608  # or eax, 0xffffffff; pop ebp; ret 0x14; 
0x5101157f  # or eax, 0xffffffff; pop ebp; ret 0xc; 
0x510117d1  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret 4; 
0x510104c8  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret; 
0x510158f8  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5101318f  # or eax, 0xffffffff; pop esi; pop ebx; pop edi; leave; ret 8; 
0x51012dcb  # or eax, 0xffffffff; pop esi; pop ebx; pop edi; pop ebp; ret 4; 
0x510115b8  # or eax, 0xffffffff; ret 0xc; 
0x51011047  # or eax, 0xffffffff; ret; 
0x510156e0  # or eax, 1; xor ecx, ecx; cmp dword ptr [0x51020894], eax; sete cl; mov eax, ecx; ret; 
0x51011d8c  # or eax, 2; push eax; push dword ptr [0x5101bf10]; call dword ptr [0x51017030]; xor eax, eax; ret; 
0x5101167f  # or eax, ecx; ret 4; 
0x51013eb1  # out 0x5e, eax; pop ebp; ret; 
0x51015547  # pop eax; pop esi; ret; 
0x51011f21  # pop ebp; mov eax, 0x4d8b1675; adc al, 0x3b; ret; 
0x51015b8c  # pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x5101183b  # pop ebp; ret 0x10; 
0x51013819  # pop ebp; ret 0x14; 
0x51011582  # pop ebp; ret 0xc; 
0x51012dd1  # pop ebp; ret 4; 
0x510103c4  # pop ebp; ret; 
0x510128cb  # pop ebx; call 0x83c8; add ebp, 0x190; leave; ret 8; 
0x5101102b  # pop ebx; call 0x83c8; add ebp, 0x6c; leave; ret 0xc; 
0x51012607  # pop ebx; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51013b35  # pop ebx; call 0x83c8; add ebp, 0x78; leave; ret; 
0x51013c4c  # pop ebx; call 0x83c8; add ebp, 0xd0; leave; ret; 
0x51011e8f  # pop ebx; call 0x83c8; leave; ret 0x10; 
0x51012551  # pop ebx; call 0x83c8; leave; ret 0xc; 
0x51014a71  # pop ebx; call 0x83c8; leave; ret; 
0x5101359d  # pop ebx; leave; ret 0x10; 
0x510137b8  # pop ebx; leave; ret 0xc; 
0x510117d6  # pop ebx; leave; ret 4; 
0x5101037e  # pop ebx; leave; ret; 
0x51011bb4  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret 0x14; 
0x51010238  # pop ebx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret; 
0x51013705  # pop ebx; pop ebp; ret 0x10; 
0x51013818  # pop ebx; pop ebp; ret 0x14; 
0x51013452  # pop ebx; pop ebp; ret 0xc; 
0x51013eff  # pop ebx; pop ebp; ret; 
0x51013193  # pop ebx; pop edi; leave; ret 8; 
0x51012dcf  # pop ebx; pop edi; pop ebp; ret 4; 
0x51013e58  # pop ebx; pop esi; leave; ret; 
0x51013e83  # pop ecx; cmp eax, -1; jne 0x13e8c; or dword ptr [esi], eax; ret; 
0x5101291f  # pop ecx; inc eax; ret; 
0x51013cd7  # pop ecx; mov eax, esi; pop esi; pop ebx; leave; ret; 
0x51013a29  # pop ecx; mov ecx, 0x15180; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x510106b4  # pop ecx; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret; 
0x5101562c  # pop ecx; pop ebp; ret; 
0x51013e82  # pop ecx; pop ecx; cmp eax, -1; jne 0x13e8c; or dword ptr [esi], eax; ret; 
0x51015e33  # pop ecx; pop ecx; ret; 
0x51014c36  # pop ecx; ret; 
0x51013194  # pop edi; leave; ret 8; 
0x5101042a  # pop edi; leave; ret; 
0x51012dd0  # pop edi; pop ebp; ret 4; 
0x51013e57  # pop edi; pop ebx; pop esi; leave; ret; 
0x51014b1b  # pop edi; pop esi; leave; ret; 
0x5101611e  # pop edi; pop esi; pop ebp; ret; 
0x5101359b  # pop edi; pop esi; pop ebx; leave; ret 0x10; 
0x510137b6  # pop edi; pop esi; pop ebx; leave; ret 0xc; 
0x510117d4  # pop edi; pop esi; pop ebx; leave; ret 4; 
0x510104cb  # pop edi; pop esi; pop ebx; leave; ret; 
0x51013703  # pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x51013816  # pop edi; pop esi; pop ebx; pop ebp; ret 0x14; 
0x510158fb  # pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5101322b  # pop edi; pop esi; ret 0xc; 
0x51011445  # pop edi; pop esi; ret; 
0x5101339b  # pop edi; ret 4; 
0x51015365  # pop edi; xor bh, bh; dec ecx; ret; 
0x510155a6  # pop edi; xor eax, eax; pop esi; ret; 
0x5101254e  # pop edi; xor ecx, ebp; pop ebx; call 0x83c8; leave; ret 0xc; 
0x51012196  # pop edi; xor ecx, ebp; pop esi; call 0x83c8; leave; ret 0x10; 
0x510118c3  # pop es; add dl, byte ptr [ecx + 0x3b]; ret; 
0x510118be  # pop es; add dl, byte ptr [ecx - 0x5f]; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x5101027d  # pop es; mov ecx, dword ptr [ebp - 8]; and dword ptr [ecx + 0x70], 0xfffffffd; leave; ret; 
0x51011837  # pop es; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011607  # pop es; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x5101157e  # pop es; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51012bb8  # pop esi; call 0x83c8; add ebp, 0x19c; leave; ret 4; 
0x51013071  # pop esi; call 0x83c8; add ebp, 0x1a4; leave; ret 4; 
0x5101278a  # pop esi; call 0x83c8; add ebp, 0x68; leave; ret 0x10; 
0x510122e0  # pop esi; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51012199  # pop esi; call 0x83c8; leave; ret 0x10; 
0x51012410  # pop esi; call 0x83c8; leave; ret 0xc; 
0x51015363  # pop esi; call 0x83c8; leave; ret; 
0x5101156e  # pop esi; leave; ret 4; 
0x51013e59  # pop esi; leave; ret; 
0x5101331a  # pop esi; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret 0xc; 
0x51012d17  # pop esi; pop ebp; ret 0x10; 
0x510135eb  # pop esi; pop ebp; ret 0xc; 
0x510103c3  # pop esi; pop ebp; ret; 
0x5101359c  # pop esi; pop ebx; leave; ret 0x10; 
0x510137b7  # pop esi; pop ebx; leave; ret 0xc; 
0x510117d5  # pop esi; pop ebx; leave; ret 4; 
0x5101037d  # pop esi; pop ebx; leave; ret; 
0x51013704  # pop esi; pop ebx; pop ebp; ret 0x10; 
0x51013817  # pop esi; pop ebx; pop ebp; ret 0x14; 
0x51013451  # pop esi; pop ebx; pop ebp; ret 0xc; 
0x51013efe  # pop esi; pop ebx; pop ebp; ret; 
0x51013192  # pop esi; pop ebx; pop edi; leave; ret 8; 
0x51012dce  # pop esi; pop ebx; pop edi; pop ebp; ret 4; 
0x51010429  # pop esi; pop edi; leave; ret; 
0x5101339a  # pop esi; pop edi; ret 4; 
0x51012c22  # pop esi; ret 0xc; 
0x51012beb  # pop esi; ret 4; 
0x51011446  # pop esi; ret; 
0x51011e8c  # pop esi; xor ecx, ebp; pop ebx; call 0x83c8; leave; ret 0x10; 
0x51014a6e  # pop esi; xor ecx, ebp; pop ebx; call 0x83c8; leave; ret; 
0x51015489  # popal; add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x51010282  # popal; jo 0x10282; leave; ret; 
0x5101037a  # popal; jo 0x1037a; pop esi; pop ebx; leave; ret; 
0x5101293f  # push 0; push dword ptr [esp + 8]; call 0x12797; ret 4; 
0x51015545  # push 0x1a; pop eax; pop esi; ret; 
0x51011d6c  # push 0x276d; call 0x11d25; or eax, 0xffffffff; ret; 
0x510128fa  # push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x510135df  # push 0x3f8; call 0x120ae; xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x51015e74  # push 0x51018dec; call dword ptr [0x51017084]; mov dword ptr [0x5101f978], eax; ret; 
0x51015a0e  # push 0xa; call 0xb031; pop ecx; ret; 
0x51011b7a  # push 0xc483ffff; or al, 0xa1; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x51015e5d  # push 1; call 0x15d83; pop ecx; ret; 
0x51015cca  # push 1; call 0xb031; pop ecx; ret; 
0x51011d6b  # push cs; push 0x276d; call 0x11d25; or eax, 0xffffffff; ret; 
0x51011d90  # push dword ptr [0x5101bf10]; call dword ptr [0x51017030]; xor eax, eax; ret; 
0x510155be  # push dword ptr [0x510208a8]; call 0x9d5e; pop ecx; ret; 
0x51015e2a  # push dword ptr [eax + esi*4]; push esi; call 0x1567a; pop ecx; pop ecx; ret; 
0x51013ce8  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x13c60; add esp, 0x10; pop ebp; ret; 
0x5101586a  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x156f1; add esp, 0x14; pop ebp; ret; 
0x51015c24  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x15b03; add esp, 0x10; pop ebp; ret; 
0x51011d69  # push dword ptr [ebp + 0xe]; push 0x276d; call 0x11d25; or eax, 0xffffffff; ret; 
0x51013e86  # push dword ptr [ebp + 3]; or dword ptr [esi], eax; ret; 
0x51011d4e  # push dword ptr [ebp + 3]; xor eax, eax; ret; 
0x51013ceb  # push dword ptr [ebp + 8]; call 0x13c60; add esp, 0x10; pop ebp; ret; 
0x5101586d  # push dword ptr [ebp + 8]; call 0x156f1; add esp, 0x14; pop ebp; ret; 
0x51014c2e  # push dword ptr [ebp + 8]; call 0x15a17; pop ecx; ret; 
0x51015c27  # push dword ptr [ebp + 8]; call 0x15b03; add esp, 0x10; pop ebp; ret; 
0x51011403  # push dword ptr [ebp + 8]; call dword ptr [0x5102073c]; pop esi; leave; ret 8; 
0x5101344e  # push dword ptr [ebx]; rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x51013ea9  # push dword ptr [esi + eax - 0x7d]; jge 0x13ebb; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x51013249  # push dword ptr [esp + 0x10]; call 0x8410; add esp, 0xc; xor eax, eax; inc eax; ret 8; 
0x51011823  # push dword ptr [esp + 4]; call eax; ret 4; 
0x51012941  # push dword ptr [esp + 8]; call 0x12797; ret 4; 
0x51013ea8  # push dword ptr ds:[esi + eax - 0x7d]; jge 0x13ebb; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x51015665  # push eax; call 0xb031; pop ecx; pop ebp; ret; 
0x510159f9  # push eax; call dword ptr [0x51017024]; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51015635  # push eax; call dword ptr [0x51017024]; pop ebp; ret; 
0x51015671  # push eax; call dword ptr [0x51017028]; pop ebp; ret; 
0x51011d54  # push eax; call dword ptr [0x51017034]; movzx eax, al; and eax, 1; ret; 
0x51015ead  # push eax; call esi; pop esi; ret; 
0x51011d8f  # push eax; push dword ptr [0x5101bf10]; call dword ptr [0x51017030]; xor eax, eax; ret; 
0x51014b19  # push ebp; cld; pop edi; pop esi; leave; ret; 
0x5101086f  # push ebp; jnp 0x10871; dec ecx; ret; 
0x51012c6b  # push ecx; add dword ptr [eax], eax; div ecx; pop esi; ret 4; 
0x51013a2c  # push ecx; add dword ptr [eax], eax; idiv ecx; imul eax, eax, 0x15180; leave; ret; 
0x51013a34  # push ecx; add dword ptr [eax], eax; leave; ret; 
0x510155c3  # push ecx; call 0x9d5e; pop ecx; ret; 
0x51012917  # push ecx; call 0x9d5e; xor eax, eax; pop ecx; inc eax; ret; 
0x51015694  # push ecx; call 0xb031; pop ecx; pop ebp; ret; 
0x5101103c  # push ecx; call dword ptr [0x51017020]; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x51011d95  # push ecx; call dword ptr [0x51017030]; xor eax, eax; ret; 
0x51015e78  # push ecx; call dword ptr [0x51017084]; mov dword ptr [0x5101f978], eax; ret; 
0x51011d4b  # push ecx; cmp eax, -1; jne 0x11d54; xor eax, eax; ret; 
0x51014a73  # push ecx; cmp edi, edi; dec ecx; ret; 
0x510155a3  # push ecx; jl 0x15574; pop edi; xor eax, eax; pop esi; ret; 
0x51015e7e  # push ecx; mov dword ptr [0x5101f978], eax; ret; 
0x510159ff  # push ecx; mov eax, dword ptr [ebp - 0x1c]; call 0xabf5; ret; 
0x51011d5a  # push ecx; movzx eax, al; and eax, 1; ret; 
0x5101563b  # push ecx; pop ebp; ret; 
0x5101156d  # push ecx; pop esi; leave; ret 4; 
0x51015608  # push ecx; pop esi; pop ebp; ret; 
0x510154f8  # push ecx; ret; 
0x510103bd  # push ecx; sar eax, 2; neg eax; pop esi; pop ebp; ret; 
0x510156ea  # push ecx; sete cl; mov eax, ecx; ret; 
0x51011042  # push ecx; test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x5101144c  # push ecx; test eax, eax; jne 0x11454; ret 0xc; 
0x5101157a  # push ecx; test eax, eax; jne 0x11586; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x510115b3  # push ecx; test eax, eax; jne 0x115be; or eax, 0xffffffff; ret 0xc; 
0x510115c7  # push ecx; test eax, eax; jne 0x115d3; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011603  # push ecx; test eax, eax; jne 0x1160f; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x51011833  # push ecx; test eax, eax; jne 0x1183f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c23  # push ecx; test eax, eax; jne 0x11c2f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c65  # push ecx; test eax, eax; jne 0x11c71; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011ca1  # push ecx; test eax, eax; jne 0x11caa; pop ebp; ret 0xc; 
0x51011cd7  # push ecx; test eax, eax; jne 0x11cdf; ret 4; 
0x51011da6  # push ecx; test eax, eax; jne 0x11db2; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011d9b  # push ecx; xor eax, eax; ret; 
0x510136fc  # push es; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x5101380f  # push es; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x510155bb  # push es; add byte ptr [eax], al; push dword ptr [0x510208a8]; call 0x9d5e; pop ecx; ret; 
0x5101156b  # push es; add dl, byte ptr [ecx + 0x5e]; leave; ret 4; 
0x51011c9f  # push es; add dl, byte ptr [ecx - 0x7b]; sal byte ptr [ebp + 4], 0x5d; ret 0xc; 
0x51011567  # push es; call dword ptr [0x5102068c]; pop esi; leave; ret 4; 
0x51013eab  # push es; cmp dword ptr [ebp + 0xc], 0; jg 0x13e99; pop esi; pop ebp; ret; 
0x51015a30  # push es; lea eax, [ecx + eax + 0xc]; push eax; call dword ptr [0x51017028]; pop ebp; ret; 
0x51016216  # push es; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x51010425  # push es; mov eax, dword ptr [ebp - 4]; pop esi; pop edi; leave; ret; 
0x510154e8  # push es; movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x510115b7  # push es; or eax, 0xffffffff; ret 0xc; 
0x51011822  # push es; push dword ptr [esp + 4]; call eax; ret 4; 
0x51013e8a  # push es; ret; 
0x51012c1e  # push es; xor eax, eax; inc eax; pop esi; ret 0xc; 
0x51012bde  # push esi; call 0x1294d; mov eax, esi; call 0x128f5; pop esi; ret 4; 
0x51012d0f  # push esi; call 0x13a39; mov eax, esi; pop esi; pop ebp; ret 0x10; 
0x51015f9d  # push esi; call 0x1563e; pop ecx; ret; 
0x51015e2d  # push esi; call 0x1567a; pop ecx; pop ecx; ret; 
0x51015602  # push esi; call dword ptr [0x51017024]; pop esi; pop ebp; ret; 
0x510155a0  # pushal; test dword ptr [ecx], 0x5fce7c51; xor eax, eax; pop esi; ret; 
0x51012bc0  # pushfd; add dword ptr [eax], eax; add cl, cl; ret 4; 
0x51015663  # rcl byte ptr [eax], 0x50; call 0xb031; pop ecx; pop ebp; ret; 
0x51015692  # rcl dword ptr [eax], 0x51; call 0xb031; pop ecx; pop ebp; ret; 
0x510137b5  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret 0xc; 
0x51013702  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x51013815  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x14; 
0x5101611d  # rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x51013450  # rcr byte ptr [esi + 0x5b], 0x5d; ret 0xc; 
0x51015b2c  # rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x5101183c  # ret 0x10; 
0x51011bc0  # ret 0x14; 
0x51014047  # ret 0x202c; 
0x51011754  # ret 0x4004; 
0x51013ffb  # ret 0x40f6; 
0x5101177c  # ret 0x4848; 
0x51014bca  # ret 0x5beb; 
0x51013669  # ret 0x688; 
0x5101555f  # ret 0x8104; 
0x5101428e  # ret 0x8950; 
0x51014629  # ret 0xb5ff; 
0x51014050  # ret 0xbe0f; 
0x5101167e  # ret 0xc10b; 
0x51013e18  # ret 0xc483; 
0x51014316  # ret 0xc720; 
0x51011035  # ret 0xc; 
0x51011654  # ret 0xca8b; 
0x5101505e  # ret 0xd88b; 
0x510140b8  # ret 0xe883; 
0x51011665  # ret 0xe9c1; 
0x5101354a  # ret 0xf799; 
0x510142e1  # ret 0xf883; 
0x51013873  # ret 0xf8c1; 
0x5101399b  # ret 0xf8d1; 
0x51015b90  # ret 0xff52; 
0x51011570  # ret 4; 
0x5101140e  # ret 8; 
0x51012f7d  # ret 9; 
0x51010244  # ret; 
0x51014bc7  # retf 0x8bff; ret 0x5beb; 
0x51013c54  # rol byte ptr [eax], 1; add byte ptr [eax], al; leave; ret; 
0x51011776  # rol cl, 1; cli; add al, byte ptr [edx - 0x75]; ret 0x4848; 
0x510136fa  # rol dh, 6; add byte ptr [eax - 0x15], al; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x51011440  # ror byte ptr [ebx + 0x5fc78bf8], 1; pop esi; ret; 
0x51011901  # ror byte ptr [ebx + 0x784a1f0], 1; add dl, byte ptr [ecx + 0x3b]; ret; 
0x510114b4  # ror byte ptr [ebx - 0x32cc03b3], 0xe8; or dword ptr [edi - 1], ebp; dec ecx; ret; 
0x51011663  # ror byte ptr [ebx], cl; ret 0xe9c1; 
0x51011660  # ror byte ptr [edi], 0xb6; ror byte ptr [ebx], cl; ret 0xe9c1; 
0x51010784  # ror dword ptr [ebx + 0x75f73bf0], cl; ret; 
0x51011ca3  # sal byte ptr [ebp + 4], 0x5d; ret 0xc; 
0x51015542  # sal byte ptr [ebp + 5], 0x6a; sbb bl, byte ptr [eax + 0x5e]; ret; 
0x51012c66  # sal dword ptr [ebx], 0xd2; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x51015eaf  # salc; pop esi; ret; 
0x51012c68  # sar byte ptr [ecx + 0x15180], cl; div ecx; pop esi; ret 4; 
0x51015b8a  # sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x51013869  # sar byte ptr [edi + 0x4d], 0x8b; ret; 
0x510131d2  # sar dword ptr [eax], 0x40; cmp ecx, 0xce8; jb 0x131c5; xor eax, eax; ret 4; 
0x510103be  # sar eax, 2; neg eax; pop esi; pop ebp; ret; 
0x51015546  # sbb bl, byte ptr [eax + 0x5e]; ret; 
0x510158f7  # sbb byte ptr [ebx + 0x5e5fffc8], al; pop ebx; pop ebp; ret; 
0x5101181d  # sbb byte ptr [ebx + 0x6eb5ec6], cl; push dword ptr [esp + 4]; call eax; ret 4; 
0x510156eb  # sete cl; mov eax, ecx; ret; 
0x51015633  # shl byte ptr [eax], 0x50; call dword ptr [0x51017024]; pop ebp; ret; 
0x5101566f  # shl byte ptr [eax], 0x50; call dword ptr [0x51017028]; pop ebp; ret; 
0x5101555c  # shl dword ptr [eax], 0x83; ret 0x8104; 
0x51015a2e  # shl eax, 6; lea eax, [ecx + eax + 0xc]; push eax; call dword ptr [0x51017028]; pop ebp; ret; 
0x510154e6  # shl eax, 6; movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x5101169e  # shl ecx, 8; or eax, ecx; ret 4; 
0x51015d7b  # shr bl, 2; xor eax, eax; pop esi; pop ebp; ret; 
0x51011698  # shr eax, 8; movzx eax, al; shl ecx, 8; or eax, ecx; ret 4; 
0x51013224  # stc; call 0x72013236; iretd; pop edi; pop esi; ret 0xc; 
0x51013a30  # stc; imul eax, eax, 0x15180; leave; ret; 
0x5101559f  # stc; pushal; test dword ptr [ecx], 0x5fce7c51; xor eax, eax; pop esi; ret; 
0x510104a0  # std; add dword ptr [ecx + 0x3b], edx; ret; 
0x510105a3  # std; add dword ptr [ecx - 0x18], edx; and byte ptr [ecx - 0x3b7c0001], bl; or al, 0x3b; ret; 
0x510103bb  # std; add dword ptr [ecx - 0x3f], edx; clc; add dh, bh; fcomp dword ptr [esi + 0x5d]; ret; 
0x51010284  # std; leave; ret; 
0x5101579e  # std; pop edi; pop esi; pop ebx; leave; ret; 
0x5101037c  # std; pop esi; pop ebx; leave; ret; 
0x51015fc8  # stosb byte ptr es:[edi], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x51015af2  # sub bh, bh; dec ecx; ret; 
0x51015674  # sub byte ptr [eax + 1], dh; push ecx; pop ebp; ret; 
0x5101219b  # sub dword ptr [edx - 1], esp; dec ecx; ret 0x10; 
0x510103b8  # sub eax, dword ptr [0x5101fd04]; sar eax, 2; neg eax; pop esi; pop ebp; ret; 
0x51012c65  # sub eax, ecx; xor edx, edx; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x51015e7b  # test byte ptr [eax + 1], dh; push ecx; mov dword ptr [0x5101f978], eax; ret; 
0x510154f6  # test byte ptr [ecx], 0x51; ret; 
0x51015233  # test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x510118c2  # test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x5101523b  # test dword ptr [0x8b50ffff], ebp; ret; 
0x510155a1  # test dword ptr [ecx], 0x5fce7c51; xor eax, eax; pop esi; ret; 
0x51014310  # test dword ptr [edx - 0x7ffffffb], edx; ret 0xc720; 
0x51011043  # test eax, eax; jge 0x1104b; or eax, 0xffffffff; ret; 
0x5101144d  # test eax, eax; jne 0x11454; ret 0xc; 
0x5101157b  # test eax, eax; jne 0x11586; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x510115b4  # test eax, eax; jne 0x115be; or eax, 0xffffffff; ret 0xc; 
0x510115c8  # test eax, eax; jne 0x115d3; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011604  # test eax, eax; jne 0x1160f; or eax, 0xffffffff; pop ebp; ret 0x14; 
0x51011834  # test eax, eax; jne 0x1183f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c24  # test eax, eax; jne 0x11c2f; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x51011c66  # test eax, eax; jne 0x11c71; or eax, 0xffffffff; pop ebp; ret 0xc; 
0x51011ca2  # test eax, eax; jne 0x11caa; pop ebp; ret 0xc; 
0x51011cd8  # test eax, eax; jne 0x11cdf; ret 4; 
0x51011d17  # test eax, eax; jne 0x11d0b; xor eax, eax; ret 8; 
0x51011da7  # test eax, eax; jne 0x11db2; or eax, 0xffffffff; pop ebp; ret 0x10; 
0x5101292e  # test eax, eax; jne 0x1293e; push 0x3e9; call 0x120ae; xor eax, eax; ret; 
0x51015541  # test eax, eax; jne 0x1554a; push 0x1a; pop eax; pop esi; ret; 
0x51015b8f  # xchg ebp, eax; ret 0xff52; 
0x51011b79  # xchg ebx, eax; push 0xc483ffff; or al, 0xa1; test byte ptr [edi], al; add dl, byte ptr [ecx + 0x3b]; ret; 
0x510156e7  # xchg esp, eax; or byte ptr [edx], al; push ecx; sete cl; mov eax, ecx; ret; 
0x51011d57  # xor al, 0x70; add dword ptr [ecx + 0xf], edx; mov dh, 0xc0; and eax, 1; ret; 
0x51015e2b  # xor al, 0xb0; push esi; call 0x1567a; pop ecx; pop ecx; ret; 
0x51015366  # xor bh, bh; dec ecx; ret; 
0x51011d98  # xor byte ptr [eax + 1], dh; push ecx; xor eax, eax; ret; 
0x51012598  # xor byte ptr [eax - 0xa], dl; ret; 
0x51011d91  # xor eax, 0x5101bf10; call dword ptr [0x51017030]; xor eax, eax; ret; 
0x510155bf  # xor eax, 0x510208a8; call 0x9d5e; pop ecx; ret; 
0x5101049a  # xor eax, 0xa3ffffff; add al, 0xfd; add dword ptr [ecx + 0x3b], edx; ret; 
0x51012c1f  # xor eax, eax; inc eax; pop esi; ret 0xc; 
0x51013255  # xor eax, eax; inc eax; ret 8; 
0x510114b3  # xor eax, eax; mov ecx, dword ptr [ebp - 4]; xor ecx, ebp; call 0x83c8; leave; ret; 
0x510154a8  # xor eax, eax; pop ebp; ret; 
0x5101291d  # xor eax, eax; pop ecx; inc eax; ret; 
0x5101611c  # xor eax, eax; pop edi; pop esi; pop ebp; ret; 
0x510137b4  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 0xc; 
0x51013701  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x51013814  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 0x14; 
0x5101367a  # xor eax, eax; pop edi; pop esi; ret 0xc; 
0x510135e9  # xor eax, eax; pop esi; pop ebp; ret 0xc; 
0x51015d7e  # xor eax, eax; pop esi; pop ebp; ret; 
0x51015b2b  # xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5101344f  # xor eax, eax; pop esi; pop ebx; pop ebp; ret 0xc; 
0x510155a7  # xor eax, eax; pop esi; ret; 
0x510131dd  # xor eax, eax; ret 4; 
0x51011d1b  # xor eax, eax; ret 8; 
0x51011d51  # xor eax, eax; ret; 
0x51011bb8  # xor ecx, ebp; call 0x83c8; leave; ret 0x14; 
0x5101331e  # xor ecx, ebp; call 0x83c8; leave; ret 0xc; 
0x5101023c  # xor ecx, ebp; call 0x83c8; leave; ret; 
0x510128c9  # xor ecx, ebp; pop ebx; call 0x83c8; add ebp, 0x190; leave; ret 8; 
0x51011029  # xor ecx, ebp; pop ebx; call 0x83c8; add ebp, 0x6c; leave; ret 0xc; 
0x51012605  # xor ecx, ebp; pop ebx; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51013b33  # xor ecx, ebp; pop ebx; call 0x83c8; add ebp, 0x78; leave; ret; 
0x51013c4a  # xor ecx, ebp; pop ebx; call 0x83c8; add ebp, 0xd0; leave; ret; 
0x51011e8d  # xor ecx, ebp; pop ebx; call 0x83c8; leave; ret 0x10; 
0x5101254f  # xor ecx, ebp; pop ebx; call 0x83c8; leave; ret 0xc; 
0x51014a6f  # xor ecx, ebp; pop ebx; call 0x83c8; leave; ret; 
0x51012bb6  # xor ecx, ebp; pop esi; call 0x83c8; add ebp, 0x19c; leave; ret 4; 
0x5101306f  # xor ecx, ebp; pop esi; call 0x83c8; add ebp, 0x1a4; leave; ret 4; 
0x51012788  # xor ecx, ebp; pop esi; call 0x83c8; add ebp, 0x68; leave; ret 0x10; 
0x510122de  # xor ecx, ebp; pop esi; call 0x83c8; add ebp, 0x74; leave; ret 4; 
0x51012197  # xor ecx, ebp; pop esi; call 0x83c8; leave; ret 0x10; 
0x5101240e  # xor ecx, ebp; pop esi; call 0x83c8; leave; ret 0xc; 
0x51015361  # xor ecx, ebp; pop esi; call 0x83c8; leave; ret; 
0x510156e3  # xor ecx, ecx; cmp dword ptr [0x51020894], eax; sete cl; mov eax, ecx; ret; 
0x51012cb8  # xor ecx, ecx; inc ecx; mov dword ptr [eax + 0x30], ecx; mov eax, ecx; pop ebp; ret 0xc; 
0x51012c67  # xor edx, edx; mov ecx, 0x15180; div ecx; pop esi; ret 4; 
0x51011e91  # xor esp, dword ptr [ebp - 1]; dec ecx; ret 0x10; 
0x5021d180  # aaa; call 0x1c7dc; pop ecx; ret; 
0x5021a5e9  # aad 0x5e; pop ebx; pop ebp; ret; 
0x502177ad  # aad 0x8b; jne 0x177b9; push esi; call 0x180d1; pop ecx; ret; 
0x50219904  # aam 0x2e; add byte ptr [eax], al; pop ecx; ret; 
0x502174a5  # aam 0xfe; inc dword ptr [ebx - 0x3fcceb3c]; call 0x2705; ret; 
0x502169eb  # adc al, 0x23; ret; 
0x50216841  # adc al, 0x2b; ret; 
0x50212761  # adc al, 0x31; inc dword ptr [eax + 0x14]; pop edi; pop esi; ret; 
0x50214bf9  # adc al, 0x33; leave; and dword ptr [eax + 0x16b4], ecx; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x50217342  # adc al, 0x33; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x50217b4e  # adc al, 0x5d; ret; 
0x5021bfa3  # adc al, 0x5e; ret; 
0x50212765  # adc al, 0x5f; pop esi; ret; 
0x50211183  # adc al, 0x7e; fstp dword ptr [esi + 0x5d]; ret; 
0x50216f2c  # adc al, 0x83; les ecx, ptr [ecx + ecx*4]; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x5021c2f1  # adc al, 0x83; retf 0x8bff; ret 0x5beb; 
0x5021544b  # adc al, 0x8b; ret; 
0x50218c73  # adc al, 0x8d; push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x502176f1  # adc al, 0xb; ret; 
0x50219e52  # adc al, 0xeb; xor al, 0x8b; ret 0xe8d1; 
0x50212cab  # adc al, byte ptr [ebp - 0x74f18a2e]; ret; 
0x50211cdf  # adc al, byte ptr [ebx]; ret; 
0x5021d19a  # adc bh, bh; jne 0x1d1aa; call 0x1d0bc; add esp, 0x18; pop ebp; ret; 
0x5021c510  # adc byte ptr [eax + 0x33], bh; sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x50216ec7  # adc byte ptr [ebp + eax + 0x38], dh; push eax; add dword ptr [ebp + 4], esi; xor eax, eax; inc eax; ret; 
0x502150b8  # adc byte ptr [ebx + 0x16a0c55], cl; call 0x14c8e; pop ecx; pop ebp; ret; 
0x5021fad2  # adc byte ptr [ebx + eax - 0x7d], dh; retf 0xf602; ret; 
0x5021cf1a  # adc byte ptr [ebx], ah; ret 0xf883; 
0x50216964  # adc byte ptr [ebx], ah; ret; 
0x5021b815  # adc byte ptr [ebx], bh; ret; 
0x5021d89c  # adc byte ptr [ebx], bh; ror dword ptr [eax - 0x74fb81e2], cl; ret 0x2eb; 
0x5021cf05  # adc byte ptr [ebx], cl; ret 0x840f; 
0x5021ce85  # adc byte ptr [ebx], cl; ret 0xc774; 
0x5021d917  # adc byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50219bfe  # adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x502127b2  # adc byte ptr [edi + 0x5e], bl; ret; 
0x50213c53  # adc byte ptr [edi], cl; mov word ptr [ebp - 0x75000000], ss; ret 0xe8c1; 
0x5021fabe  # adc byte ptr [edx - 0xa], bl; ret; 
0x502168ea  # adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x50219672  # adc byte ptr [esi + 0x5d], bl; ret; 
0x50218397  # adc dh, bh; ret 0; 
0x5021f995  # adc dh, dh; ret; 
0x5021837d  # adc dword ptr [ebx + 0xa904c1], eax; add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x50210388  # adc dword ptr [ebx - 0x7e2ed42d], ecx; ret 0xe7c; 
0x50215032  # adc dword ptr [ecx], eax; mov esp, dword ptr [eax + 0x5b000016]; ret; 
0x50214c33  # adc dword ptr [esi + 0x5b], ebx; ret; 
0x50218106  # adc eax, 0x50220084; pop ebp; ret; 
0x5021c7c0  # adc eax, 0x50220088; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502180ca  # adc eax, 0x50220088; pop ebp; ret; 
0x50218097  # adc eax, 0x50220088; pop esi; pop ebp; ret; 
0x5021dbef  # adc eax, 0x5022010c; mov dword ptr [0x50227484], eax; ret; 
0x50211f79  # adc eax, 0x5ffffffd; pop esi; pop ebx; leave; ret; 
0x5021db54  # adc eax, 0x7320f980; push es; shrd eax, edx, cl; shr edx, cl; ret; 
0x5021b8a8  # adc eax, 0x83ffffff; les ebx, ptr [eax]; pop ebp; ret; 
0x50210181  # add al, 0; add byte ptr [ebx], al; ret; 
0x5021fa26  # add al, 0; add dh, dh; ret 0x7402; 
0x5021f9fa  # add al, 0; je 0x1fa03; or eax, 0x1000; ret; 
0x50212d7b  # add al, 0; jne 0x12c96; pop esi; pop ebx; leave; ret; 
0x5021b3b9  # add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x50213735  # add al, 0x33; sar byte ptr [ebx], cl; ret 0x3174; 
0x502152f3  # add al, 0x3b; ret 0x1b77; 
0x502128d8  # add al, 0x3b; ret; 
0x50219937  # add al, 0x5e; pop ebp; ret; 
0x5021fa21  # add al, 0x74; add eax, 0x4000d; add dh, dh; ret 0x7402; 
0x50218d98  # add al, 0x7e; sbb eax, 0x75ff5057; or al, 0xe8; ret; 
0x5021d17b  # add al, 0x80; and dh, bh; push dword ptr [edi]; call 0x1c7dc; pop ecx; ret; 
0x5021ca08  # add al, 0x80; dec ebp; inc dword ptr [eax - 0x1f7c3e75]; add ebp, dword ptr [ebx]; ret; 
0x50211451  # add al, 0x83; ret 0xff04; 
0x5021d8a2  # add al, 0x8b; ret 0x2eb; 
0x502155d5  # add al, 0x8b; ret; 
0x5021f985  # add al, 0xf6; ret; 
0x50212e6e  # add al, 0xf; xchg esp, eax; ret 0x8b52; 
0x5021de8e  # add al, al; add byte ptr [eax], al; add eax, 0x4000; pop ebp; ret; 
0x5021ffb8  # add al, al; je 0x1ffc6; cmp eax, 0xc000001d; je 0x1ffc6; xor eax, eax; ret; 
0x5021ffbf  # add al, al; je 0x1ffc6; xor eax, eax; ret; 
0x50214c2f  # add al, bh; mov word ptr [ecx], dx; pop esi; pop ebx; ret; 
0x502127f9  # add al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x5021fa15  # add al, byte ptr [eax]; add dh, dh; ret 0x7408; 
0x502183b3  # add al, byte ptr [eax]; pop edi; ret; 
0x5021baae  # add al, byte ptr [ebx]; ret; 
0x5021eaee  # add al, byte ptr [edx + 0x3a]; ret; 
0x50214799  # add al, ch; xor eax, 0x5ffffff9; pop esi; pop ebx; leave; ret; 
0x50218393  # add bh, bh; add byte ptr [edx + edx - 9], dh; ret 0; 
0x50218050  # add bh, bh; xor eax, 0x50228220; call 0x186f; pop ecx; ret; 
0x5021fa41  # add bh, dh; ret 0; 
0x5021fb3b  # add bh, dh; ret; 
0x5021d96c  # add bl, ch; and al, 0x33; fstp xword ptr [ebx]; ret; 
0x50218830  # add bl, ch; mov byte ptr [ebx], bh; ret; 
0x5021de91  # add byte ptr [0x4000], al; pop ebp; ret; 
0x5021ffb4  # add byte ptr [0xc0000005], bh; je 0x1ffc6; cmp eax, 0xc000001d; je 0x1ffc6; xor eax, eax; ret; 
0x502180bb  # add byte ptr [eax + 0x5d590000], al; ret; 
0x5021fa25  # add byte ptr [eax + eax], al; add dh, dh; ret 0x7402; 
0x5021f9f9  # add byte ptr [eax + eax], al; je 0x1fa03; or eax, 0x1000; ret; 
0x5021808b  # add byte ptr [eax - 0x14a70000], al; or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x50220088; pop esi; pop ebp; ret; 
0x5021fdac  # add byte ptr [eax - 0x36a4a1a1], al; ret; 
0x50215440  # add byte ptr [eax - 0x75], dl; ret; 
0x502137bf  # add byte ptr [eax - 0x7af0cec8], al; ret 0; 
0x5021de84  # add byte ptr [eax], 0; pop ebp; ret; 
0x502180bc  # add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x5021fa96  # add byte ptr [eax], 0; ret; 
0x5021f9f8  # add byte ptr [eax], al; add al, 0; je 0x1fa03; or eax, 0x1000; ret; 
0x5021882e  # add byte ptr [eax], al; add bl, ch; mov byte ptr [ebx], bh; ret; 
0x5021fdaa  # add byte ptr [eax], al; add byte ptr [eax - 0x36a4a1a1], al; ret; 
0x5021543e  # add byte ptr [eax], al; add byte ptr [eax - 0x75], dl; ret; 
0x502137bd  # add byte ptr [eax], al; add byte ptr [eax - 0x7af0cec8], al; ret 0; 
0x5021a3e5  # add byte ptr [eax], al; add byte ptr [ebx + 0x15e8e445], cl; cmp esi, -1; ret; 
0x5021b3b1  # add byte ptr [eax], al; add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x502174df  # add byte ptr [eax], al; add byte ptr [ebx - 0x39141bbb], cl; push dword ptr [ebp + 0x14]; call 0x180d1; pop ecx; ret; 
0x5021b3db  # add byte ptr [eax], al; add byte ptr [ebx - 0x55160038], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x502128f7  # add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x5021b3e3  # add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x50218e2d  # add byte ptr [eax], al; add byte ptr [edi + 0x5b], bl; pop esi; leave; ret; 
0x5021fd51  # add byte ptr [eax], al; add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x5021fa8b  # add byte ptr [eax], al; add dh, byte ptr [edx + ecx + 0x3b]; sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x5021de90  # add byte ptr [eax], al; add eax, 0x4000; pop ebp; ret; 
0x50213764  # add byte ptr [eax], al; add esp, 0xc; xor eax, eax; pop esi; ret; 
0x50214c2e  # add byte ptr [eax], al; clc; mov word ptr [ecx], dx; pop esi; pop ebx; ret; 
0x50218445  # add byte ptr [eax], al; fnclex; pop ebp; ret; 
0x50212622  # add byte ptr [eax], al; leave; ret; 
0x50213d86  # add byte ptr [eax], al; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50213d7a  # add byte ptr [eax], al; mov dword ptr [eax + 0x16a0], ecx; mov dword ptr [eax + 0x16a8], ecx; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50213d80  # add byte ptr [eax], al; mov dword ptr [eax + 0x16a8], ecx; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50217623  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021c34c  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x2705; ret; 
0x5021b3b2  # add byte ptr [eax], al; mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x50219d26  # add byte ptr [eax], al; mov eax, edi; call 0x2705; ret; 
0x50214c83  # add byte ptr [eax], al; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x5021c6e3  # add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x5021de85  # add byte ptr [eax], al; pop ebp; ret; 
0x50214b51  # add byte ptr [eax], al; pop ebx; leave; ret; 
0x50214c07  # add byte ptr [eax], al; pop ebx; ret; 
0x5021354b  # add byte ptr [eax], al; pop ecx; call 0x12ace; xor eax, eax; pop esi; ret; 
0x502180bd  # add byte ptr [eax], al; pop ecx; pop ebp; ret; 
0x502174ed  # add byte ptr [eax], al; pop ecx; ret; 
0x50218e2e  # add byte ptr [eax], al; pop edi; pop ebx; pop esi; leave; ret; 
0x50213d8c  # add byte ptr [eax], al; pop esi; ret; 
0x5021804f  # add byte ptr [eax], al; push dword ptr [0x50228220]; call 0x186f; pop ecx; ret; 
0x5021fa01  # add byte ptr [eax], al; ret; 
0x5021ffbe  # add byte ptr [eax], al; sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x5021ffb7  # add byte ptr [eax], al; sal byte ptr [edx + ecx + 0x3d], 0x1d; add byte ptr [eax], al; sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x5021fdab  # add byte ptr [eax], al; sbb byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5021c37a  # add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x5021f9ff  # add byte ptr [eax], dl; add byte ptr [eax], al; ret; 
0x5021db48  # add byte ptr [ebp + 0x5e], bl; pop edi; ret 0x10; 
0x502127aa  # add byte ptr [ebp + 6], dh; mov eax, dword ptr [esi + 8]; mov dword ptr [esi + 0x10], eax; pop edi; pop esi; ret; 
0x5021f9fb  # add byte ptr [ebp + eax + 0xd], dh; add byte ptr [eax], dl; add byte ptr [eax], al; ret; 
0x50219436  # add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x50214004  # add byte ptr [ebp - 0x60], dh; pop edi; pop esi; pop ebx; leave; ret; 
0x5021a3e7  # add byte ptr [ebx + 0x15e8e445], cl; cmp esi, -1; ret; 
0x5021b5e5  # add byte ptr [ebx + 0x4d8b0c45], cl; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x5021fb49  # add byte ptr [ebx + 0x4d8b0c7d], cl; or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x50216426  # add byte ptr [ebx + 0x4dff5045], cl; cmp byte ptr [ebx], al; ret; 
0x5021843a  # add byte ptr [ebx + 0x50228204], ah; je 0x18447; call 0x1bf7b; fnclex; pop ebp; ret; 
0x5021a53f  # add byte ptr [ebx + 0x59000866], al; pop esi; pop ebp; ret; 
0x502155eb  # add byte ptr [ebx + 0x5e5f0cc4], al; pop ebx; leave; ret; 
0x5021c637  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x50218a62  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebx; leave; ret; 
0x5021b3b3  # add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x5021a53c  # add byte ptr [ebx + 0x66830026], al; or byte ptr [eax], al; pop ecx; pop esi; pop ebp; ret; 
0x5021fd4d  # add byte ptr [ebx + ebx + 0x3d], dh; add byte ptr [eax], al; add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x50214b52  # add byte ptr [ebx - 0x37], bl; ret; 
0x502174e1  # add byte ptr [ebx - 0x39141bbb], cl; push dword ptr [ebp + 0x14]; call 0x180d1; pop ecx; ret; 
0x5021d144  # add byte ptr [ebx - 0x39c41fbb], cl; je 0x1d14f; or dword ptr [edi], 0xffffffff; call 0x2705; ret; 
0x50213765  # add byte ptr [ebx - 0x3fccf33c], al; pop esi; ret; 
0x5021b3dd  # add byte ptr [ebx - 0x55160038], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x502127f3  # add byte ptr [ebx - 0x6544fbba], cl; add al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x5021cab5  # add byte ptr [ebx], ah; ret 0xb9; 
0x50218def  # add byte ptr [ebx], ah; ret 0xc483; 
0x50210183  # add byte ptr [ebx], al; ret; 
0x5021c935  # add byte ptr [ebx], bh; ret 0x1773; 
0x502127fb  # add byte ptr [ebx], bh; ret; 
0x50213377  # add byte ptr [ebx], ch; ret 0x5150; 
0x5021b3e5  # add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x5021dbd3  # add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; pop ebp; ret; 
0x502137a3  # add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; ret; 
0x502180be  # add byte ptr [ecx + 0x5d], bl; ret; 
0x5021a543  # add byte ptr [ecx + 0x5e], bl; pop ebp; ret; 
0x5021808e  # add byte ptr [ecx - 0x15], bl; or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x50220088; pop esi; pop ebp; ret; 
0x5021017a  # add byte ptr [ecx - 0x3f9673bb], cl; or byte ptr [eax + eax], al; add byte ptr [ebx], al; ret; 
0x5021683e  # add byte ptr [ecx], al; pop edi; adc al, 0x2b; ret; 
0x50218e2f  # add byte ptr [edi + 0x5b], bl; pop esi; leave; ret; 
0x50214b4a  # add byte ptr [edi + 0x5e], bl; mov dword ptr [eax + 0x16ac], ecx; pop ebx; leave; ret; 
0x5021dcb5  # add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x50216d66  # add byte ptr [edi + eax - 0x75], dh; dec ebp; lock and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5021a59b  # add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x50214bc4  # add byte ptr [edi - 0x1a], bh; shr eax, 1; ret; 
0x5021a5e7  # add byte ptr [edi - 0x2b], bh; pop esi; pop ebx; pop ebp; ret; 
0x50218395  # add byte ptr [edx + edx - 9], dh; ret 0; 
0x5021882c  # add byte ptr [edx], ah; add byte ptr [eax], al; add bl, ch; mov byte ptr [ebx], bh; ret; 
0x5021c7c2  # add byte ptr [edx], ah; push eax; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502180cc  # add byte ptr [edx], ah; push eax; pop ebp; ret; 
0x50218099  # add byte ptr [edx], ah; push eax; pop esi; pop ebp; ret; 
0x5021fb39  # add byte ptr [edx], al; add bh, dh; ret; 
0x5021fa8c  # add byte ptr [edx], al; je 0x1fa9a; cmp edx, ecx; jne 0x1faa3; or eax, 0x8000; ret; 
0x5021d4e3  # add byte ptr [edx], bh; ret; 
0x5021c738  # add byte ptr [esi + 0x5d], bl; ret; 
0x5021b588  # add byte ptr [esi + 0x74], bl; pop es; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50214c01  # add byte ptr [esi - 0x77], ah; mov byte ptr [eax + 0x5b000016], dh; ret; 
0x5021fd54  # add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x50219905  # add byte ptr cs:[eax], al; pop ecx; ret; 
0x5021a53e  # add byte ptr es:[ebx + 0x59000866], al; pop esi; pop ebp; ret; 
0x502122b8  # add ch, byte ptr [ebx]; ret 0x558b; 
0x50212c85  # add cl, byte ptr [ebx + 0x5b5e5fc7]; leave; ret; 
0x50217306  # add cl, byte ptr [ebx - 0x36a00339]; ret; 
0x5021f9f2  # add cl, byte ptr [ebx]; ret 0xf75e; 
0x5021fa1c  # add cl, byte ptr [ebx]; ret; 
0x50212623  # add cl, cl; ret; 
0x50219836  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x5021fa8d  # add dh, byte ptr [edx + ecx + 0x3b]; sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x5021fa32  # add dh, dh; ret 0x7401; 
0x5021fa28  # add dh, dh; ret 0x7402; 
0x5021fa17  # add dh, dh; ret 0x7408; 
0x50213998  # add dh, dh; ret; 
0x5021d17a  # add dword ptr [eax + eax*4], eax; and dh, bh; push dword ptr [edi]; call 0x1c7dc; pop ecx; ret; 
0x5021c7f8  # add dword ptr [eax + edx*2], ecx; call dword ptr [0x50220084]; pop ebp; ret; 
0x5021f97c  # add dword ptr [eax - 0xa], eax; ret; 
0x5021fa3f  # add dword ptr [eax], eax; add bh, dh; ret 0; 
0x50216424  # add dword ptr [eax], eax; add byte ptr [ebx + 0x4dff5045], cl; cmp byte ptr [ebx], al; ret; 
0x502127f1  # add dword ptr [eax], eax; add byte ptr [ebx - 0x6544fbba], cl; add al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x50212621  # add dword ptr [eax], eax; add cl, cl; ret; 
0x50213996  # add dword ptr [eax], eax; add dh, dh; ret; 
0x50218c76  # add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50216ecc  # add dword ptr [ebp + 4], esi; xor eax, eax; inc eax; ret; 
0x5021c03f  # add dword ptr [ebp - 0x29], esi; xor eax, eax; pop ebp; ret; 
0x50215033  # add dword ptr [ebx + 0x16a0], ecx; pop ebx; ret; 
0x502182ae  # add dword ptr [ebx + 0x374e445], ecx; mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x5021faba  # add dword ptr [ebx + eax + 0x6a], esi; adc byte ptr [edx - 0xa], bl; ret; 
0x5021d578  # add dword ptr [ebx], esi; leave; cmp dword ptr [0x50228214], eax; sete cl; mov eax, ecx; ret; 
0x50218383  # add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x50216f31  # add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x5021f95b  # add dword ptr [edi], ecx; xchg ebp, eax; ret 0xcafe; 
0x50217662  # add dword ptr [edx], edi; ret 0x1774; 
0x5021766f  # add dword ptr [edx], edi; ret 0xa74; 
0x5021dbf1  # add dword ptr [edx], esp; push eax; mov dword ptr [0x50227484], eax; ret; 
0x50212ac4  # add dword ptr [esi + 8], edi; add esp, 0xc; mov eax, edi; pop edi; ret; 
0x50212ac2  # add dword ptr [esi], edi; add dword ptr [esi + 8], edi; add esp, 0xc; mov eax, edi; pop edi; ret; 
0x50218c71  # add dword ptr [esp + edx - 0x73], esi; push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50212ac3  # add dword ptr ds:[esi + 8], edi; add esp, 0xc; mov eax, edi; pop edi; ret; 
0x50216d8c  # add eax, -0x20; pop ebp; ret; 
0x502180f5  # add eax, 0x10; push eax; call 0x29e4; pop ecx; pop ebp; ret; 
0x50218101  # add eax, 0x20; push eax; call dword ptr [0x50220084]; pop ebp; ret; 
0x502180c5  # add eax, 0x20; push eax; call dword ptr [0x50220088]; pop ebp; ret; 
0x502160b7  # add eax, 0x2b2c478b; ret 0x4f8b; 
0x50215e1d  # add eax, 0x2b2c478b; ret 0x7d83; 
0x5021608c  # add eax, 0x2b2c478b; ret 0xc085; 
0x5021804b  # add eax, 0x3286e8; add bh, bh; xor eax, 0x50228220; call 0x186f; pop ecx; ret; 
0x5021de92  # add eax, 0x4000; pop ebp; ret; 
0x5021fa23  # add eax, 0x4000d; add dh, dh; ret 0x7402; 
0x502152ee  # add eax, 0x468dd18b; add al, 0x3b; ret 0x1b77; 
0x502180f4  # add eax, 0x5010c083; call 0x29e4; pop ecx; pop ebp; ret; 
0x5021d57c  # add eax, 0x50228214; sete cl; mov eax, ecx; ret; 
0x5021b5a7  # add eax, 0x5d40c033; ret; 
0x50217fd7  # add eax, 0x5e581a6a; ret; 
0x5021ffb6  # add eax, 0x74c00000; or bh, byte ptr [0xc000001d]; je 0x1ffc6; xor eax, eax; ret; 
0x5021ca03  # add eax, 0x74e04539; add al, 0x80; dec ebp; inc dword ptr [eax - 0x1f7c3e75]; add ebp, dword ptr [ebx]; ret; 
0x5021c03c  # add eax, 0x7501f883; xlatb; xor eax, eax; pop ebp; ret; 
0x5021fa2d  # add eax, 0x8000d; add dh, dh; ret 0x7401; 
0x5021e950  # add eax, 0x890c4d8b; sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x50217b21  # add eax, 0x8b000000; inc ebp; in al, 0xeb; ret; 
0x5021bfd8  # add eax, 0xc033057a; inc eax; leave; ret; 
0x5021bfda  # add eax, 0xc940c033; ret; 
0x5021c002  # add eax, 0xd0ff006a; ret; 
0x5021fda8  # add eax, 0xd; sbb byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5021502f  # add eax, dword ptr [ebx - 0x74feee3f]; mov al, byte ptr [0x5b000016]; ret; 
0x5021a06f  # add eax, dword ptr [ebx - 0x75]; ret; 
0x50218990  # add eax, dword ptr [ebx]; ret 0xf8c1; 
0x50214bba  # add eax, eax; dec dword ptr [esp + 8]; cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x50217e03  # add eax, ecx; pop esi; pop edi; pop ebx; leave; ret; 
0x5021261e  # add ebp, 0x188; leave; ret; 
0x50216323  # add ebp, 0x54; leave; ret; 
0x5021ca11  # add ebp, dword ptr [ebx]; ret; 
0x50212a78  # add ebp, dword ptr [edx - 2]; pop eax; pop edi; pop esi; ret; 
0x5021388a  # add ebp, dword ptr [edx - 6]; pop eax; pop edi; pop esi; pop ebx; ret; 
0x50218124  # add ecx, 0x10; push ecx; call 0x29e4; pop ecx; pop ebp; ret; 
0x50215030  # add ecx, 0x11; add dword ptr [ebx + 0x16a0], ecx; pop ebx; ret; 
0x5021966f  # add ecx, dword ptr [ebx + 0x5d5e1040]; ret; 
0x5021273e  # add ecx, dword ptr [ecx + 0x5e5f1c47]; pop ebx; leave; ret; 
0x5021a574  # add ecx, dword ptr [ecx]; push es; ret; 
0x5021eae9  # add edi, edi; inc ebp; mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x5021dc21  # add edx, dword ptr [eax - 1]; salc; pop esi; ret; 
0x50211274  # add edx, dword ptr [esi + 0x7e]; xor al, 0x83; ret 0xebfc; 
0x50218092  # add esi, 0x20; push esi; call dword ptr [0x50220088]; pop esi; pop ebp; ret; 
0x5021b61f  # add esi, edi; push esi; call 0x6110; add esp, 0x10; pop esi; ret; 
0x5021fadf  # add esi, esi; ret; 
0x5021b608  # add esp, 0x10; pop ebp; ret; 
0x5021b627  # add esp, 0x10; pop esi; ret; 
0x502138a5  # add esp, 0x10; ret; 
0x50217b4c  # add esp, 0x14; pop ebp; ret; 
0x5021bfa1  # add esp, 0x14; pop esi; ret; 
0x502174a8  # add esp, 0x14; xor eax, eax; call 0x2705; ret; 
0x5021b8ac  # add esp, 0x18; pop ebp; ret; 
0x5021bf76  # add esp, 0x1c; pop ebp; ret; 
0x5021372e  # add esp, 0x20; ret; 
0x50215d1d  # add esp, 0x24; pop edi; xor eax, eax; pop esi; ret; 
0x5021b5ee  # add esp, 0xc; leave; ret; 
0x50216f2d  # add esp, 0xc; mov dword ptr [ecx], eax; pop edi; pop esi; pop ebp; ret; 
0x502154e0  # add esp, 0xc; mov dword ptr [edi + 0x30], eax; pop edi; pop esi; pop ebx; ret; 
0x50215570  # add esp, 0xc; mov eax, edi; pop ebx; pop edi; pop esi; ret; 
0x50212ac7  # add esp, 0xc; mov eax, edi; pop edi; ret; 
0x5021788f  # add esp, 0xc; pop ebp; ret; 
0x502155ec  # add esp, 0xc; pop edi; pop esi; pop ebx; leave; ret; 
0x50213766  # add esp, 0xc; xor eax, eax; pop esi; ret; 
0x5021389e  # and al, 0x10; call 0x137af; add esp, 0x10; ret; 
0x502167f8  # and al, 0x10; mov dword ptr [eax], 0x50226f98; xor eax, eax; ret; 
0x50213727  # and al, 0x20; call 0x1355c; add esp, 0x20; ret; 
0x50213723  # and al, 0x20; push dword ptr [esp + 0x20]; call 0x1355c; add esp, 0x20; ret; 
0x5021d96e  # and al, 0x33; fstp xword ptr [ebx]; ret; 
0x5021ea71  # and al, 0x3a; ret; 
0x502162b6  # and al, 0x59; pop ecx; ret; 
0x50215d1f  # and al, 0x5f; xor eax, eax; pop esi; ret; 
0x50215d1c  # and al, 0x83; les esp, ptr [edi + ebx*2]; xor eax, eax; pop esi; ret; 
0x5021546a  # and al, 0xc; call 0x84a4; pop ecx; pop ecx; ret; 
0x50213898  # and al, 0xc; push 0xf; push dword ptr [esp + 0x10]; call 0x137af; add esp, 0x10; ret; 
0x502162af  # and al, 0xc; push dword ptr [eax + 0x28]; call dword ptr [eax + 0x24]; pop ecx; pop ecx; ret; 
0x50215466  # and al, 0xc; push dword ptr [esp + 0xc]; call 0x84a4; pop ecx; pop ecx; ret; 
0x50212a8d  # and al, 0xc; test edi, edi; jne 0x12a97; xor eax, eax; pop edi; ret; 
0x50211c5c  # and al, 4; cmp cl, al; jbe 0x11c64; mov al, cl; ret; 
0x50214bc2  # and al, 8; add byte ptr [edi - 0x1a], bh; shr eax, 1; ret; 
0x50214bbe  # and al, 8; cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x502183af  # and al, 8; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x502183a6  # and al, 8; pop edi; ret; 
0x5021f99d  # and bh, dh; ret; 
0x50218103  # and byte ptr [eax - 1], dl; adc eax, 0x50220084; pop ebp; ret; 
0x502180c7  # and byte ptr [eax - 1], dl; adc eax, 0x50220088; pop ebp; ret; 
0x5021b1f2  # and byte ptr [eax], 0xfd; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5021d17c  # and byte ptr [eax], 0xfe; push dword ptr [edi]; call 0x1c7dc; pop ecx; ret; 
0x5021fd4b  # and byte ptr [eax], al; add byte ptr [ebx + ebx + 0x3d], dh; add byte ptr [eax], al; add byte ptr [esp + ecx + 0x3b], dh; ret; 
0x5021c6d8  # and byte ptr [eax], al; call 0x35c2; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x5021c636  # and byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x5021db57  # and byte ptr [ebx + 6], dh; shrd eax, edx, cl; shr edx, cl; ret; 
0x5021fada  # and byte ptr [ebx + eax - 0x7d], dh; retf 0xf601; ret; 
0x502154d3  # and byte ptr [ebx], bh; ret; 
0x5021c512  # and byte ptr [ebx], dh; sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x50211c26  # and byte ptr [edi - 0x7d], al; ret; 
0x50218054  # and byte ptr [edx], 0x50; call 0x186f; pop ecx; ret; 
0x5021843d  # and byte ptr [edx], 0x50; je 0x18447; call 0x1bf7b; fnclex; pop ebp; ret; 
0x5021dec8  # and byte ptr [edx], 0x50; mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x5021d57e  # and byte ptr [edx], 0x50; sete cl; mov eax, ecx; ret; 
0x50218094  # and byte ptr [esi - 1], dl; adc eax, 0x50220088; pop esi; pop ebp; ret; 
0x5021b1f3  # and ch, bh; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5021db64  # and cl, 0x1f; shr eax, cl; ret; 
0x5021d17d  # and dh, bh; push dword ptr [edi]; call 0x1c7dc; pop ecx; ret; 
0x50212666  # and dh, dh; ret 0x7401; 
0x5021cc4a  # and dl, byte ptr [eax + 0x3b]; ret; 
0x502180cd  # and dl, byte ptr [eax + 0x5d]; ret; 
0x5021809a  # and dl, byte ptr [eax + 0x5e]; pop ebp; ret; 
0x50218035  # and dl, byte ptr [eax + 0x7c]; into; pop edi; xor eax, eax; pop esi; ret; 
0x50211fbe  # and dl, byte ptr [eax - 0x18]; ret 0x5f; 
0x502174f6  # and dl, byte ptr [eax - 0x18]; ret; 
0x5021dbf2  # and dl, byte ptr [eax - 0x5d]; test byte ptr [edx + 0x50], dh; ret; 
0x50218421  # and dl, byte ptr [eax - 0x60]; mov ah, 0x21; push eax; ret; 
0x502167f4  # and dl, byte ptr [eax - 0x75]; inc esp; and al, 0x10; mov dword ptr [eax], 0x50226f98; xor eax, eax; ret; 
0x5021539a  # and dl, byte ptr [eax - 0x75]; ret; 
0x5021bffd  # and dl, byte ptr [eax - 0x7b]; sal byte ptr [ebp + eax + 0x6a], 0; call eax; ret; 
0x5021c219  # and dl, byte ptr [eax - 0x7b]; sal byte ptr [ecx + ecx + 0x50], 0xe8; ret; 
0x5021dbec  # and dl, byte ptr [eax - 1]; adc eax, 0x5022010c; mov dword ptr [0x50227484], eax; ret; 
0x50214bfc  # and dword ptr [eax + 0x16b4], ecx; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x50210e0e  # and dword ptr [eax + 0x5b], edx; or esp, dword ptr [ecx]; push eax; ret; 
0x5021b58f  # and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5021c6d7  # and dword ptr [eax], 0; call 0x35c2; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x5021c635  # and dword ptr [eax], 0; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x5021ffe5  # and dword ptr [ebp + 8], 0xffffffbf; ldmxcsr dword ptr [ebp + 8]; call 0x2705; ret; 
0x50216d6c  # and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50218cb2  # and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x5021b3b7  # and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x502137a0  # and dword ptr [esi + 0x1c], 0; pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x5021a540  # and dword ptr [esi + 8], 0; pop ecx; pop esi; pop ebp; ret; 
0x5021a53d  # and dword ptr [esi], 0; and dword ptr [esi + 8], 0; pop ecx; pop esi; pop ebp; ret; 
0x50212abf  # and eax, 0x3e01ffff; add dword ptr [esi + 8], edi; add esp, 0xc; mov eax, edi; pop edi; ret; 
0x5021c3c2  # and eax, 0x40; pop esi; pop ebp; ret; 
0x5021de8d  # and eax, 0xc000; add eax, 0x4000; pop ebp; ret; 
0x50216e53  # and eax, 7; or eax, edi; pop edi; pop esi; pop ebp; ret; 
0x5021f01c  # arpl si, di; dec ecx; ret; 
0x5021354e  # call 0x12ace; xor eax, eax; pop esi; ret; 
0x50213729  # call 0x1355c; add esp, 0x20; ret; 
0x502138a0  # call 0x137af; add esp, 0x10; ret; 
0x5021479a  # call 0x140d4; pop edi; pop esi; pop ebx; leave; ret; 
0x502150be  # call 0x14c8e; pop ecx; pop ebp; ret; 
0x50214fd0  # call 0x14d72; pop ecx; pop edi; pop esi; leave; ret; 
0x50213761  # call 0x1547f; add esp, 0xc; xor eax, eax; pop esi; ret; 
0x50216d96  # call 0x16c5d; pop ecx; pop ecx; pop ebp; ret; 
0x5021788a  # call 0x177b9; add esp, 0xc; pop ebp; ret; 
0x50217865  # call 0x17873; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50217b47  # call 0x17a9e; add esp, 0x14; pop ebp; ret; 
0x50217c55  # call 0x17c63; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50217e60  # call 0x17e6e; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50217f6f  # call 0x17f7d; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502174ea  # call 0x180d1; pop ecx; ret; 
0x50218297  # call 0x1810d; pop ecx; pop ecx; ret; 
0x502182c8  # call 0x181ec; pop ecx; ret; 
0x5021867e  # call 0x1844b; add esp, 0xc; pop ebp; ret; 
0x50218751  # call 0x18688; add esp, 0xc; pop ebp; ret; 
0x50218057  # call 0x186f; pop ecx; ret; 
0x50218be4  # call 0x18b34; pop ecx; pop ecx; pop ebp; ret; 
0x50218cc7  # call 0x18bed; add esp, 0xc; pop ebp; ret; 
0x5021962c  # call 0x1963a; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502198f2  # call 0x19900; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50219d23  # call 0x19d33; mov eax, edi; call 0x2705; ret; 
0x5021a3e3  # call 0x1a3f1; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021b2bf  # call 0x1b2cd; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021804c  # call 0x1b2d7; push dword ptr [0x50228220]; call 0x186f; pop ecx; ret; 
0x5021b35f  # call 0x1b36d; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021b488  # call 0x1b496; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021b636  # call 0x1b4a0; pop ecx; pop ecx; pop ebp; ret; 
0x5021b649  # call 0x1b513; pop ecx; pop ecx; pop ebp; ret; 
0x5021b603  # call 0x1b5b1; add esp, 0x10; pop ebp; ret; 
0x5021b8a7  # call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bef6  # call 0x1bd1b; add esp, 0x14; pop ebp; ret; 
0x5021bf71  # call 0x1bed0; add esp, 0x1c; pop ebp; ret; 
0x50218442  # call 0x1bf7b; fnclex; pop ebp; ret; 
0x5021c1af  # call 0x1c1bd; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021c349  # call 0x1c35a; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x2705; ret; 
0x5021c5b4  # call 0x1c48d; add esp, 0x10; pop ebp; ret; 
0x5021963d  # call 0x1c7dc; pop ecx; ret; 
0x5021c986  # call 0x1c994; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021d19e  # call 0x1d0bc; add esp, 0x18; pop ebp; ret; 
0x5021d3e3  # call 0x1d1a8; add esp, 0x10; pop ebp; ret; 
0x5021d567  # call 0x1d3ed; add esp, 0x10; pop ebp; ret; 
0x5021d706  # call 0x1d587; add esp, 0x14; pop ebp; ret; 
0x502174ad  # call 0x2705; ret; 
0x502180f9  # call 0x29e4; pop ecx; pop ebp; ret; 
0x502182bf  # call 0x29e4; pop ecx; ret; 
0x5021c6da  # call 0x35c2; mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x5021c371  # call 0x35c2; mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x50216c43  # call 0x35e8; pop ecx; or eax, 0xffffffff; pop ebp; ret; 
0x5021bf9c  # call 0x478f; add esp, 0x14; pop esi; ret; 
0x502174a3  # call 0x48b7; add esp, 0x14; xor eax, eax; call 0x2705; ret; 
0x50212619  # call 0x5385; add ebp, 0x188; leave; ret; 
0x502108d9  # call 0x5385; leave; ret; 
0x5021b622  # call 0x6110; add esp, 0x10; pop esi; ret; 
0x5021546c  # call 0x84a4; pop ecx; pop ecx; ret; 
0x5021502a  # call 0xc96d18ba; add eax, dword ptr [ebx - 0x74feee3f]; mov al, byte ptr [0x5b000016]; ret; 
0x50218105  # call dword ptr [0x50220084]; pop ebp; ret; 
0x5021c7bf  # call dword ptr [0x50220088]; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502180c9  # call dword ptr [0x50220088]; pop ebp; ret; 
0x50218096  # call dword ptr [0x50220088]; pop esi; pop ebp; ret; 
0x5021dbee  # call dword ptr [0x5022010c]; mov dword ptr [0x50227484], eax; ret; 
0x502162b4  # call dword ptr [eax + 0x24]; pop ecx; pop ecx; ret; 
0x5021943c  # call dword ptr [eax - 0x75]; ret; 
0x50215d1a  # call dword ptr [esi + 0x24]; add esp, 0x24; pop edi; xor eax, eax; pop esi; ret; 
0x5021c005  # call eax; ret; 
0x5021dc23  # call esi; pop esi; ret; 
0x5021a56d  # call ptr [ecx + 0x59]; cmp eax, -1; jne 0x1a578; or dword ptr [esi], eax; ret; 
0x50216d9a  # call ptr [ecx + 0x59]; pop ebp; ret; 
0x50215470  # call ptr [ecx + 0x59]; ret; 
0x502150c2  # call ptr [ecx + 0x5d]; ret; 
0x50214fd4  # call ptr [ecx + 0x5f]; pop esi; leave; ret; 
0x50211504  # call ptr [edi + 0x5b]; leave; ret; 
0x5021979c  # call ptr [edi + 0x5e]; pop ebp; ret; 
0x5021114b  # call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x5021c6bf  # call ptr [edi + 0x5e]; pop ebx; pop ebp; ret; 
0x50212d82  # call ptr [esi + 0x5b]; leave; ret; 
0x502176bb  # call ptr [esi + 0x5b]; pop edi; ret; 
0x5021c03e  # clc; add dword ptr [ebp - 0x29], esi; xor eax, eax; pop ebp; ret; 
0x502180f3  # clc; add eax, 0x5010c083; call 0x29e4; pop ecx; pop ebp; ret; 
0x5021b58e  # clc; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50218cb1  # clc; and dword ptr [ecx + 0x70], 0xfffffffd; pop esi; pop ebx; leave; ret; 
0x5021c243  # clc; mov edx, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x50214c30  # clc; mov word ptr [ecx], dx; pop esi; pop ebx; ret; 
0x5021a571  # clc; push dword ptr [ebp + 3]; or dword ptr [esi], eax; ret; 
0x5021b507  # cld; je 0x1b511; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50213e33  # cld; mov edx, dword ptr [ebp + 8]; mov dword ptr [eax + edx*4 + 0xb54], ecx; leave; ret; 
0x5021c246  # cld; pop edi; pop esi; leave; ret; 
0x5021873f  # cld; pop esi; pop ebx; leave; ret; 
0x5021955d  # cld; xor ecx, ebp; pop esi; call 0x5385; leave; ret; 
0x50213c52  # cli; adc byte ptr [edi], cl; mov word ptr [ebp - 0x75000000], ss; ret 0xe8c1; 
0x502106a6  # cli; or al, 0x24; rdmsr; ret 0x788; 
0x5021388c  # cli; pop eax; pop edi; pop esi; pop ebx; ret; 
0x502136ba  # cmp al, 0x74; cmp byte ptr [ebx], bh; ret 0x3474; 
0x502154df  # cmp al, 0x83; les ecx, ptr [ecx + ecx*4]; inc edi; xor byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x50216eca  # cmp byte ptr [eax + 1], dl; jne 0x16ed3; xor eax, eax; inc eax; ret; 
0x5021c7bc  # cmp byte ptr [eax + edx*2], cl; call dword ptr [0x50220088]; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502136b5  # cmp byte ptr [ebp + edi + 0x39], dh; push esi; cmp al, 0x74; cmp byte ptr [ebx], bh; ret 0x3474; 
0x50212f10  # cmp byte ptr [ebx], ah; ret 0x8966; 
0x5021647e  # cmp byte ptr [ebx], al; ret 0x558b; 
0x5021642c  # cmp byte ptr [ebx], al; ret; 
0x502136bc  # cmp byte ptr [ebx], bh; ret 0x3474; 
0x5021db55  # cmp cl, 0x20; jae 0x1db60; shrd eax, edx, cl; shr edx, cl; ret; 
0x50211c5e  # cmp cl, al; jbe 0x11c64; mov al, cl; ret; 
0x5021d57b  # cmp dword ptr [0x50228214], eax; sete cl; mov eax, ecx; ret; 
0x50212d79  # cmp dword ptr [eax + 4], 0; jne 0x12c96; pop esi; pop ebx; leave; ret; 
0x502114fb  # cmp dword ptr [ebp + 0xc], 0; jg 0x11307; pop edi; pop ebx; leave; ret; 
0x5021a598  # cmp dword ptr [ebp + 0xc], 0; jg 0x1a585; pop esi; pop ebp; ret; 
0x5021a5e4  # cmp dword ptr [ebp + 8], 0; jg 0x1a5bf; pop esi; pop ebx; pop ebp; ret; 
0x502182ab  # cmp dword ptr [ebp + 8], 1; mov eax, dword ptr [ebp - 0x1c]; je 0x182b7; mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x5021b2c8  # cmp dword ptr [esi + edi*8 - 1], esi; ret; 
0x50214bc0  # cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x5021a570  # cmp eax, -1; jne 0x1a578; or dword ptr [esi], eax; ret; 
0x5021dc1d  # cmp eax, -2; je 0x1dc25; push eax; call esi; pop esi; ret; 
0x502136b7  # cmp eax, 0x743c5639; cmp byte ptr [ebx], bh; ret 0x3474; 
0x5021ffb5  # cmp eax, 0xc0000005; je 0x1ffc6; cmp eax, 0xc000001d; je 0x1ffc6; xor eax, eax; ret; 
0x5021ffbc  # cmp eax, 0xc000001d; je 0x1ffc6; xor eax, eax; ret; 
0x5021c03d  # cmp eax, 1; jne 0x1c019; xor eax, eax; pop ebp; ret; 
0x5021d148  # cmp eax, esi; je 0x1d14f; or dword ptr [edi], 0xffffffff; call 0x2705; ret; 
0x50216d87  # cmp ecx, 0x19; ja 0x16d9d; add eax, -0x20; pop ebp; ret; 
0x50211846  # cmp edi, dword ptr [edi + edx*8 + 0x5f]; pop esi; pop ebx; leave; ret; 
0x50211181  # cmp edx, dword ptr [ebp + 0x14]; jle 0x1115f; pop esi; pop ebp; ret; 
0x502112d9  # cmp edx, dword ptr [ebp + 8]; jge 0x112b1; pop esi; pop ebx; leave; ret; 
0x5021fa90  # cmp edx, ecx; jne 0x1faa3; or eax, 0x8000; ret; 
0x5021a3ed  # cmp esi, -1; ret; 
0x5021cac5  # cmp esi, dword ptr [eax + esi + 0x3b]; ret; 
0x50213d8a  # cwde; push ss; add byte ptr [eax], al; pop esi; ret; 
0x50215559  # daa; add byte ptr [ebx], al; ret; 
0x5021d85a  # daa; jnp 0x1d85b; dec ecx; ret; 
0x502176b8  # dec dword ptr [ebp + 0x5b5eff47]; pop edi; ret; 
0x5021dcb3  # dec dword ptr [ebx + 0x5b5e5f00]; leave; ret; 
0x50217ef8  # dec dword ptr [edi]; xchg ebp, eax; ror dword ptr [ecx - 0x75], 0xc1; pop esi; pop ebp; ret; 
0x50214bbc  # dec dword ptr [esp + 8]; cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x50219bfd  # dec eax; adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x502180b9  # dec eax; or al, 0; add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x5021d9d7  # dec eax; or byte ptr [ebx - 0x37], bl; ret; 
0x502169ea  # dec ebp; adc al, 0x23; ret; 
0x50216f2b  # dec ebp; adc al, 0x83; les ecx, ptr [ecx + ecx*4]; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x502150b7  # dec ebp; adc byte ptr [ebx + 0x16a0c55], cl; call 0x14c8e; pop ecx; pop ebp; ret; 
0x50216963  # dec ebp; adc byte ptr [ebx], ah; ret; 
0x50213e32  # dec ebp; cld; mov edx, dword ptr [ebp + 8]; mov dword ptr [eax + edx*4 + 0xb54], ecx; leave; ret; 
0x5021642b  # dec ebp; cmp byte ptr [ebx], al; ret; 
0x50216d6a  # dec ebp; lock and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5021eb25  # dec ebp; mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x5021e40e  # dec ebp; or al, 0x89; sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x5021c0c5  # dec ebp; or byte ptr [eax - 0x76fc14e1], cl; pop ebp; or byte ptr [ebx], bh; ret; 
0x5021fb4e  # dec ebp; or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5021126f  # dec ebp; or byte ptr [ebx - 0x7d], dl; stc; add edx, dword ptr [esi + 0x7e]; xor al, 0x83; ret 0xebfc; 
0x5021b5ea  # dec ebp; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x50217efc  # dec ecx; mov eax, ecx; pop esi; pop ebp; ret; 
0x502108dd  # dec ecx; ret; 
0x502131ff  # dec edi; and al, 0x2b; ret; 
0x50212f0f  # dec edi; cmp byte ptr [ebx], ah; ret 0x8966; 
0x50218d97  # dec esi; add al, 0x7e; sbb eax, 0x75ff5057; or al, 0xe8; ret; 
0x502152ed  # dec esi; add eax, 0x468dd18b; add al, 0x3b; ret 0x1b77; 
0x50214bbd  # dec esp; and al, 8; cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x5021838d  # div byte ptr [edi - 9]; ret 0; 
0x5021db45  # fadd dword ptr [ebx + 0x5e5d00da]; pop edi; ret 0x10; 
0x502181e1  # fcomp dword ptr [ecx + 0x1b]; shr bl, 2; xor eax, eax; pop esi; pop ebp; ret; 
0x5021942c  # fdivr dword ptr [ebx]; fimul word ptr [edi]; test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x5021db47  # fiadd dword ptr [eax]; pop ebp; pop esi; pop edi; ret 0x10; 
0x5021942e  # fimul word ptr [edi]; test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x5021548a  # fist dword ptr [edi + 0x3b]; ret; 
0x5021c7cf  # fisttp dword ptr [ebx + 0xa6a087d]; call 0x29e4; pop ecx; ret; 
0x5021c8d2  # fmul dword ptr [ebx + 0xa6ae075]; call 0x29e4; pop ecx; ret; 
0x50218447  # fnclex; pop ebp; ret; 
0x50211185  # fstp dword ptr [esi + 0x5d]; ret; 
0x50217507  # fstp xword ptr [ebx]; ret; 
0x50211866  # fsubr st(1); ret; 
0x5021502d  # imul ecx, ecx, 3; add ecx, 0x11; add dword ptr [ebx + 0x16a0], ecx; pop ebx; ret; 
0x50217505  # in al, 0x33; fstp xword ptr [ebx]; ret; 
0x5021b2c6  # in al, 0xe8; cmp dword ptr [esi + edi*8 - 1], esi; ret; 
0x50211146  # in al, 0xe9; paddw mm7, mm7; call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x50217b27  # in al, 0xeb; ret; 
0x5021841f  # in al, dx; dec ecx; and dl, byte ptr [eax - 0x60]; mov ah, 0x21; push eax; ret; 
0x5021dbea  # in al, dx; sub byte ptr [edx], ah; push eax; call dword ptr [0x5022010c]; mov dword ptr [0x50227484], eax; ret; 
0x5021943a  # in eax, 0xff; call dword ptr [eax - 0x75]; ret; 
0x50214ba3  # inc al; pop esi; mov byte ptr [ecx + 0x1c], al; pop ebx; ret; 
0x50213122  # inc byte ptr [edi + ecx]; xchg esp, eax; ret 0x8b52; 
0x50212763  # inc dword ptr [eax + 0x14]; pop edi; pop esi; ret; 
0x5021a5e3  # inc dword ptr [ebx + 0x7f00087d]; aad 0x5e; pop ebx; pop ebp; ret; 
0x5021c634  # inc dword ptr [ebx - 0x377cffe0]; call ptr [edi + 0x5e]; pop ebp; ret; 
0x5021556f  # inc dword ptr [ebx - 0x3874f33c]; pop ebx; pop edi; pop esi; ret; 
0x502174a7  # inc dword ptr [ebx - 0x3fcceb3c]; call 0x2705; ret; 
0x5021261d  # inc dword ptr [ecx + 0x188c5]; add cl, cl; ret; 
0x50212ac1  # inc dword ptr [ecx]; add dword ptr ds:[esi + 8], edi; add esp, 0xc; mov eax, edi; pop edi; ret; 
0x5021a578  # inc dword ptr [esi]; ret; 
0x50212764  # inc eax; adc al, 0x5f; pop esi; ret; 
0x50219671  # inc eax; adc byte ptr [esi + 0x5d], bl; ret; 
0x5021fa9f  # inc eax; add byte ptr [eax], 0; ret; 
0x5021de94  # inc eax; add byte ptr [eax], al; pop ebp; ret; 
0x5021777d  # inc eax; je 0x1778c; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021bfdd  # inc eax; leave; ret; 
0x50212b3f  # inc eax; mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x5021b5aa  # inc eax; pop ebp; ret; 
0x5021c3c4  # inc eax; pop esi; pop ebp; ret; 
0x5021dbe8  # inc eax; push 0x502228ec; call dword ptr [0x5022010c]; mov dword ptr [0x50227484], eax; ret; 
0x50216ed1  # inc eax; ret; 
0x50217cb7  # inc eax; xor eax, 0xc4830000; or al, 0x3b; ret; 
0x5021b814  # inc ebp; adc byte ptr [ebx], bh; ret; 
0x502168e9  # inc ebp; adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x50211c25  # inc ebp; and byte ptr [edi - 0x7d], al; ret; 
0x5021b58d  # inc ebp; clc; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5021873e  # inc ebp; cld; pop esi; pop ebx; leave; ret; 
0x50217504  # inc ebp; in al, 0x33; fstp xword ptr [ebx]; ret; 
0x5021b2c5  # inc ebp; in al, 0xe8; cmp dword ptr [esi + edi*8 - 1], esi; ret; 
0x50217b26  # inc ebp; in al, 0xeb; ret; 
0x5021eae1  # inc ebp; mov ah, 0x2a; ret; 
0x5021eaeb  # inc ebp; mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x5021017c  # inc ebp; mov word ptr [ecx - 0x40], gs; or byte ptr [eax + eax], al; add byte ptr [ebx], al; ret; 
0x5021fb5b  # inc ebp; or al, 0x3b; ret 0x840f; 
0x502180c3  # inc ebp; or al, 0x83; shl byte ptr [eax], 0x50; call dword ptr [0x50220088]; pop ebp; ret; 
0x502169e7  # inc ebp; or al, 0x8b; dec ebp; adc al, 0x23; ret; 
0x5021b5e7  # inc ebp; or al, 0x8b; dec ebp; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x50217813  # inc ebp; or byte ptr [ebx], bh; ret; 
0x502174fe  # inc ebp; or byte ptr [ecx + 0x4589e045], cl; in al, 0x33; fstp xword ptr [ebx]; ret; 
0x50211fb7  # inc ebp; push 0x8868157c; pop ss; and dl, byte ptr [eax - 0x18]; ret 0x5f; 
0x5021b5a5  # inc ecx; jp 0x1b5ad; xor eax, eax; inc eax; pop ebp; ret; 
0x50214ba7  # inc ecx; sbb al, 0x5b; ret; 
0x502155d4  # inc edi; add al, 0x8b; ret; 
0x502183b2  # inc edi; add al, byte ptr [eax]; pop edi; ret; 
0x5021882a  # inc edi; add byte ptr [edx], ah; add byte ptr [eax], al; add bl, ch; mov byte ptr [ebx], bh; ret; 
0x502176ba  # inc edi; call ptr [esi + 0x5b]; pop edi; ret; 
0x50212740  # inc edi; sbb al, 0x5f; pop esi; pop ebx; leave; ret; 
0x50215d95  # inc edi; sub al, 0x2b; ret 0x10e9; 
0x502160dd  # inc edi; sub al, 0x2b; ret 0x3eb; 
0x502160b9  # inc edi; sub al, 0x2b; ret 0x4f8b; 
0x50215e1f  # inc edi; sub al, 0x2b; ret 0x7d83; 
0x5021608e  # inc edi; sub al, 0x2b; ret 0xc085; 
0x502131c4  # inc edi; sub al, 0x8b; dec edi; cmp byte ptr [ebx], ah; ret 0x8966; 
0x502154e4  # inc edi; xor byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x50211180  # inc edx; cmp edx, dword ptr [ebp + 0x14]; jle 0x1115f; pop esi; pop ebp; ret; 
0x502127b1  # inc esi; adc byte ptr [edi + 0x5e], bl; ret; 
0x502152f2  # inc esi; add al, 0x3b; ret 0x1b77; 
0x502128d7  # inc esi; add al, 0x3b; ret; 
0x50219936  # inc esi; add al, 0x5e; pop ebp; ret; 
0x50212b41  # inc esi; jo 0x12acd; inc esi; pop eax; pop edi; ret; 
0x50219933  # inc esi; or byte ptr [ecx + 0x5d5e0446], cl; ret; 
0x502127ae  # inc esi; or byte ptr [ecx + 0x5e5f1046], cl; ret; 
0x50212b44  # inc esi; pop eax; pop edi; ret; 
0x502138bc  # inc esi; sbb al, 0x3b; ret; 
0x502168e6  # inc esi; xor byte ptr [ebx + 0x5b5e1045], cl; leave; ret; 
0x5021c7f7  # inc esp; add dword ptr [eax + edx*2], ecx; call dword ptr [0x50220084]; pop ebp; ret; 
0x502167f7  # inc esp; and al, 0x10; mov dword ptr [eax], 0x50226f98; xor eax, eax; ret; 
0x50211c5b  # inc esp; and al, 4; cmp cl, al; jbe 0x11c64; mov al, cl; ret; 
0x502183ae  # inc esp; and al, 8; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x502183a5  # inc esp; and al, 8; pop edi; ret; 
0x5021c7bb  # inc esp; cmp byte ptr [eax + edx*2], cl; call dword ptr [0x50220088]; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50212617  # int 0x5b; call 0x5385; add ebp, 0x188; leave; ret; 
0x502108d7  # int 0x5b; call 0x5385; leave; ret; 
0x5021955f  # int 0x5e; call 0x5385; leave; ret; 
0x50217ae5  # int 0xfe; inc dword ptr [ebx - 0x3fcceb3c]; call 0x2705; ret; 
0x50218038  # into; pop edi; xor eax, eax; pop esi; ret; 
0x50217ae4  # iretd; int 0xfe; inc dword ptr [ebx - 0x3fcceb3c]; call 0x2705; ret; 
0x5021d7b2  # iretd; jnp 0x1d7b3; dec ecx; ret; 
0x50216d8a  # ja 0x16d9d; add eax, -0x20; pop ebp; ret; 
0x5021db58  # jae 0x1db60; shrd eax, edx, cl; shr edx, cl; ret; 
0x5021db53  # jae 0x1db6a; cmp cl, 0x20; jae 0x1db60; shrd eax, edx, cl; shr edx, cl; ret; 
0x50211c58  # jbe 0x11c64; mov al, byte ptr [esp + 4]; cmp cl, al; jbe 0x11c64; mov al, cl; ret; 
0x50211c60  # jbe 0x11c64; mov al, cl; ret; 
0x5021311c  # je 0x13142; sbb byte ptr [ebx], dh; rol byte ptr [ebx - 0x6bf0fb02], cl; ret 0x8b52; 
0x5021349e  # je 0x134c4; sbb byte ptr [ebx], dh; rol byte ptr [ebx - 0x6bf0fb02], cl; ret 0x8b52; 
0x50215486  # je 0x154ac; or al, 0x33; fist dword ptr [edi + 0x3b]; ret; 
0x50216d67  # je 0x16d70; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50216ec8  # je 0x16ecf; cmp byte ptr [eax + 1], dl; jne 0x16ed3; xor eax, eax; inc eax; ret; 
0x5021777e  # je 0x1778c; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021804a  # je 0x18051; call 0x1b2d7; push dword ptr [0x50228220]; call 0x186f; pop ecx; ret; 
0x502182b2  # je 0x182b7; mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x50218440  # je 0x18447; call 0x1bf7b; fnclex; pop ebp; ret; 
0x50218bce  # je 0x18bd7; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x5021a596  # je 0x1a59e; cmp dword ptr [ebp + 0xc], 0; jg 0x1a585; pop esi; pop ebp; ret; 
0x5021b508  # je 0x1b511; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5021b58a  # je 0x1b593; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5021c001  # je 0x1c008; push 0; call eax; ret; 
0x5021c03b  # je 0x1c042; cmp eax, 1; jne 0x1c019; xor eax, eax; pop ebp; ret; 
0x5021d14a  # je 0x1d14f; or dword ptr [edi], 0xffffffff; call 0x2705; ret; 
0x5021dbf6  # je 0x1dc1a; push eax; ret; 
0x5021f9fc  # je 0x1fa03; or eax, 0x1000; ret; 
0x5021fa8e  # je 0x1fa9a; cmp edx, ecx; jne 0x1faa3; or eax, 0x8000; ret; 
0x5021ffba  # je 0x1ffc6; cmp eax, 0xc000001d; je 0x1ffc6; xor eax, eax; ret; 
0x5021ffc1  # je 0x1ffc6; xor eax, eax; ret; 
0x5021a3f5  # jecxz 0x1a41a; add byte ptr [eax], al; pop ecx; ret; 
0x502114ff  # jg 0x11307; pop edi; pop ebx; leave; ret; 
0x50211f77  # jg 0x11c92; pop edi; pop esi; pop ebx; leave; ret; 
0x50214bc5  # jg 0x14bad; shr eax, 1; ret; 
0x5021a59c  # jg 0x1a585; pop esi; pop ebp; ret; 
0x5021a5e8  # jg 0x1a5bf; pop esi; pop ebx; pop ebp; ret; 
0x5021d96a  # jg 0x1d96c; add bl, ch; and al, 0x33; fstp xword ptr [ebx]; ret; 
0x502112dc  # jge 0x112b1; pop esi; pop ebx; leave; ret; 
0x502182ac  # jge 0x182b6; add dword ptr [ebx + 0x374e445], ecx; mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x50219d31  # jge 0x19d17; push 1; call 0x29e4; pop ecx; ret; 
0x5021a599  # jge 0x1a5a7; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x5021a5e5  # jge 0x1a5ef; add byte ptr [edi - 0x2b], bh; pop esi; pop ebx; pop ebp; ret; 
0x5021c7d1  # jge 0x1c7db; push 0xa; call 0x29e4; pop ecx; ret; 
0x5021c8d1  # jge 0x1c8ab; mov esi, dword ptr [ebp - 0x20]; push 0xa; call 0x29e4; pop ecx; ret; 
0x50211847  # jl 0x11820; pop edi; pop esi; pop ebx; leave; ret; 
0x50212a8c  # jl 0x12ab2; or al, 0x85; push dword ptr [ebp + 4]; xor eax, eax; pop edi; ret; 
0x50214bc1  # jl 0x14be7; or byte ptr [eax], al; jg 0x14bad; shr eax, 1; ret; 
0x50218037  # jl 0x18007; pop edi; xor eax, eax; pop esi; ret; 
0x50211184  # jle 0x1115f; pop esi; pop ebp; ret; 
0x50211259  # jle 0x11246; pop edi; pop esi; pop ebx; leave; ret; 
0x50212ac5  # jle 0x12acf; add esp, 0xc; mov eax, edi; pop edi; ret; 
0x50212b3e  # jle 0x12b80; mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x50212b3b  # jle 0x12b9d; mov dword ptr [esi + 0x40], edi; mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x50217781  # jle 0x1778f; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50219798  # jle 0x1979e; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x502127ab  # jne 0x127b3; mov eax, dword ptr [esi + 8]; mov dword ptr [esi + 0x10], eax; pop edi; pop esi; ret; 
0x50212a91  # jne 0x12a97; xor eax, eax; pop edi; ret; 
0x50212d7d  # jne 0x12c96; pop esi; pop ebx; leave; ret; 
0x50212e46  # jne 0x12da3; xor eax, eax; pop edi; pop esi; pop ebx; ret; 
0x50214005  # jne 0x13fa7; pop edi; pop esi; pop ebx; leave; ret; 
0x502140cd  # jne 0x14057; pop edi; pop esi; pop ebx; leave; ret; 
0x50214563  # jne 0x1410f; pop edi; pop esi; pop ebx; leave; ret; 
0x50214d08  # jne 0x14cf0; pop edi; pop ebx; pop ebp; ret; 
0x50216d94  # jne 0x16d9e; call 0x16c5d; pop ecx; pop ecx; pop ebp; ret; 
0x50216ecd  # jne 0x16ed3; xor eax, eax; inc eax; ret; 
0x502174e8  # jne 0x174fe; call 0x180d1; pop ecx; ret; 
0x5021762f  # jne 0x1760d; push esi; call 0x180d1; pop ecx; ret; 
0x50217676  # jne 0x1766b; pop esi; pop ebx; pop edi; xor eax, eax; ret; 
0x502177af  # jne 0x177b9; push esi; call 0x180d1; pop ecx; ret; 
0x50217874  # jne 0x1787e; call 0x180d1; pop ecx; ret; 
0x50217888  # jne 0x17892; call 0x177b9; add esp, 0xc; pop ebp; ret; 
0x50217885  # jne 0x17893; push dword ptr [ebp + 8]; call 0x177b9; add esp, 0xc; pop ebp; ret; 
0x50217b2b  # jne 0x17b45; call 0x180d1; pop ecx; ret; 
0x50217b45  # jne 0x17b4f; call 0x17a9e; add esp, 0x14; pop ebp; ret; 
0x50217c64  # jne 0x17c6e; call 0x180d1; pop ecx; ret; 
0x50217e6f  # jne 0x17e79; call 0x180d1; pop ecx; ret; 
0x50217f7e  # jne 0x17f88; call 0x180d1; pop ecx; ret; 
0x50217fd6  # jne 0x17fdd; push 0x1a; pop eax; pop esi; ret; 
0x5021867c  # jne 0x18686; call 0x1844b; add esp, 0xc; pop ebp; ret; 
0x50218679  # jne 0x18687; push dword ptr [ebp + 8]; call 0x1844b; add esp, 0xc; pop ebp; ret; 
0x5021874f  # jne 0x18759; call 0x18688; add esp, 0xc; pop ebp; ret; 
0x5021874c  # jne 0x1875a; push dword ptr [ebp + 8]; call 0x18688; add esp, 0xc; pop ebp; ret; 
0x50218be2  # jne 0x18bec; call 0x18b34; pop ecx; pop ecx; pop ebp; ret; 
0x50218cc5  # jne 0x18ccf; call 0x18bed; add esp, 0xc; pop ebp; ret; 
0x50218cc2  # jne 0x18cd0; push dword ptr [ebp + 8]; call 0x18bed; add esp, 0xc; pop ebp; ret; 
0x5021963b  # jne 0x19645; call 0x1c7dc; pop ecx; ret; 
0x50219901  # jne 0x1990b; call 0x1c7dc; pop ecx; ret; 
0x5021a3f2  # jne 0x1a3fc; call 0x1c7dc; pop ecx; ret; 
0x5021a573  # jne 0x1a578; or dword ptr [esi], eax; ret; 
0x5021b2ce  # jne 0x1b2d8; call 0x1c7dc; pop ecx; ret; 
0x5021b497  # jne 0x1b4a1; call 0x1c7dc; pop ecx; ret; 
0x5021b601  # jne 0x1b60b; call 0x1b5b1; add esp, 0x10; pop ebp; ret; 
0x5021b5fe  # jne 0x1b60c; push dword ptr [ebp + 8]; call 0x1b5b1; add esp, 0x10; pop ebp; ret; 
0x5021b634  # jne 0x1b63e; call 0x1b4a0; pop ecx; pop ecx; pop ebp; ret; 
0x5021b647  # jne 0x1b651; call 0x1b513; pop ecx; pop ecx; pop ebp; ret; 
0x5021b8a5  # jne 0x1b8af; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021b8a2  # jne 0x1b8b0; push dword ptr [ebp + 8]; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bef4  # jne 0x1befe; call 0x1bd1b; add esp, 0x14; pop ebp; ret; 
0x5021bef1  # jne 0x1beff; push dword ptr [ebp + 8]; call 0x1bd1b; add esp, 0x14; pop ebp; ret; 
0x5021bf4c  # jne 0x1bf56; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bf49  # jne 0x1bf57; push dword ptr [ebp + 8]; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bf6f  # jne 0x1bf79; call 0x1bed0; add esp, 0x1c; pop ebp; ret; 
0x5021bf6c  # jne 0x1bf7a; push dword ptr [ebp + 8]; call 0x1bed0; add esp, 0x1c; pop ebp; ret; 
0x5021c040  # jne 0x1c019; xor eax, eax; pop ebp; ret; 
0x5021c017  # jne 0x1c01e; xor eax, eax; inc eax; pop ebp; ret; 
0x5021c35b  # jne 0x1c365; call 0x1c7dc; pop ecx; ret; 
0x5021c36f  # jne 0x1c380; call 0x35c2; mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x5021c5b2  # jne 0x1c5bc; call 0x1c48d; add esp, 0x10; pop ebp; ret; 
0x5021c5af  # jne 0x1c5bd; push dword ptr [ebp + 8]; call 0x1c48d; add esp, 0x10; pop ebp; ret; 
0x5021c8d4  # jne 0x1c8b6; push 0xa; call 0x29e4; pop ecx; ret; 
0x5021d19c  # jne 0x1d1aa; call 0x1d0bc; add esp, 0x18; pop ebp; ret; 
0x5021d199  # jne 0x1d1ab; push dword ptr [ebp + 0xc]; call 0x1d0bc; add esp, 0x18; pop ebp; ret; 
0x5021d3e1  # jne 0x1d3eb; call 0x1d1a8; add esp, 0x10; pop ebp; ret; 
0x5021d3de  # jne 0x1d3ec; push dword ptr [ebp + 8]; call 0x1d1a8; add esp, 0x10; pop ebp; ret; 
0x5021d565  # jne 0x1d56f; call 0x1d3ed; add esp, 0x10; pop ebp; ret; 
0x5021d562  # jne 0x1d570; push dword ptr [ebp + 8]; call 0x1d3ed; add esp, 0x10; pop ebp; ret; 
0x5021d704  # jne 0x1d70e; call 0x1d587; add esp, 0x14; pop ebp; ret; 
0x5021d701  # jne 0x1d70f; push dword ptr [ebp + 8]; call 0x1d587; add esp, 0x14; pop ebp; ret; 
0x5021de80  # jne 0x1de89; mov eax, 0x8000; pop ebp; ret; 
0x5021fa92  # jne 0x1faa3; or eax, 0x8000; ret; 
0x5021d7b3  # jnp 0x1d7b3; dec ecx; ret; 
0x5021d85b  # jnp 0x1d85b; dec ecx; ret; 
0x50211c40  # jns 0x11a6a; pop edi; pop ebx; leave; ret; 
0x5021da67  # jns 0x1da67; dec ecx; ret; 
0x5021275e  # jo 0x12768; mov byte ptr [ecx + esi], dl; inc dword ptr [eax + 0x14]; pop edi; pop esi; ret; 
0x50212b42  # jo 0x12acd; inc esi; pop eax; pop edi; ret; 
0x5021375f  # jo 0x13775; call 0x1547f; add esp, 0xc; xor eax, eax; pop esi; ret; 
0x502162b2  # jo 0x162dc; call dword ptr [eax + 0x24]; pop ecx; pop ecx; ret; 
0x50216d6e  # jo 0x16d6d; pop ebx; leave; ret; 
0x50217f89  # jo 0x17fad; push eax; ret; 
0x5021873b  # jo 0x1873a; mov eax, dword ptr [ebp - 4]; pop esi; pop ebx; leave; ret; 
0x50218bd5  # jo 0x18bd4; pop ebx; leave; ret; 
0x50218cb4  # jo 0x18cb3; pop esi; pop ebx; leave; ret; 
0x5021b50f  # jo 0x1b50e; leave; ret; 
0x5021b591  # jo 0x1b590; leave; ret; 
0x5021d633  # jo 0x1d632; pop edi; pop esi; pop ebx; leave; ret; 
0x5021b5a6  # jp 0x1b5ad; xor eax, eax; inc eax; pop ebp; ret; 
0x5021bfd9  # jp 0x1bfe0; xor eax, eax; inc eax; leave; ret; 
0x5021c35e  # jp 0x1c364; add byte ptr [eax], al; pop ecx; ret; 
0x50216d86  # lahf; cmp ecx, 0x19; ja 0x16d9d; add eax, -0x20; pop ebp; ret; 
0x5021ffe9  # ldmxcsr dword ptr [ebp + 8]; call 0x2705; ret; 
0x5021261f  # lds ecx, ptr [eax - 0x36ffffff]; ret; 
0x5021c7ba  # lea eax, [eax + edi + 0xc]; push eax; call dword ptr [0x50220088]; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021c7f6  # lea eax, [ecx + eax + 0xc]; push eax; call dword ptr [0x50220084]; pop ebp; ret; 
0x502176b9  # lea eax, [edi - 1]; pop esi; pop ebx; pop edi; ret; 
0x5021502e  # leave; add eax, dword ptr [ebx - 0x74feee3f]; mov al, byte ptr [0x5b000016]; ret; 
0x50214bfb  # leave; and dword ptr [eax + 0x16b4], ecx; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x5021d57a  # leave; cmp dword ptr [0x50228214], eax; sete cl; mov eax, ecx; ret; 
0x502108de  # leave; ret; 
0x5021bfd7  # les eax, ptr [0xc033057a]; inc eax; leave; ret; 
0x5021b5a4  # les eax, ptr [ecx + 0x7a]; add eax, 0x5d40c033; ret; 
0x5021b8ad  # les ebx, ptr [eax]; pop ebp; ret; 
0x50217cbc  # les ecx, ptr [ebx + edi]; ret; 
0x50216f2e  # les ecx, ptr [ecx + ecx*4]; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x502154e1  # les ecx, ptr [ecx + ecx*4]; inc edi; xor byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x5021b5ef  # les ecx, ptr [ecx + ecx*8]; ret; 
0x502155ed  # les ecx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x5021c5ba  # les edx, ptr [eax]; pop ebp; ret; 
0x5021b628  # les edx, ptr [eax]; pop esi; ret; 
0x502138a6  # les edx, ptr [eax]; ret; 
0x5021c2f0  # les edx, ptr [ebx + eax*4]; retf 0x8bff; ret 0x5beb; 
0x50219e51  # les edx, ptr [ebx + ebp*8]; xor al, 0x8b; ret 0xe8d1; 
0x5021544a  # les edx, ptr [ebx + ecx*4]; ret; 
0x502176f0  # les edx, ptr [ebx + ecx]; ret; 
0x50217341  # les edx, ptr [ebx + esi]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x5021bfa2  # les edx, ptr [esi + ebx*2]; ret; 
0x5021372f  # les esp, ptr [eax]; ret; 
0x50215d1e  # les esp, ptr [edi + ebx*2]; xor eax, eax; pop esi; ret; 
0x50216d6b  # lock and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50214b4f  # lodsb al, byte ptr [esi]; push ss; add byte ptr [eax], al; pop ebx; leave; ret; 
0x50218387  # loope 0x1830d; sal byte ptr [esp + esi - 0x7c], cl; div byte ptr [edi - 9]; ret 0; 
0x5021db65  # loope 0x1db86; shr eax, cl; ret; 
0x50214bfe  # mov ah, 0x16; add byte ptr [eax], al; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x50218424  # mov ah, 0x21; push eax; ret; 
0x5021eae2  # mov ah, 0x2a; ret; 
0x50214c05  # mov al, 0x16; add byte ptr [eax], al; pop ebx; ret; 
0x502174f4  # mov al, 0x2c; and dl, byte ptr [eax - 0x18]; ret; 
0x50218295  # mov al, 0x56; call 0x1810d; pop ecx; pop ecx; ret; 
0x5021eaec  # mov al, 0x8a; add al, byte ptr [edx + 0x3a]; ret; 
0x50216c44  # mov al, byte ptr [0x59fffec9]; or eax, 0xffffffff; pop ebp; ret; 
0x50215035  # mov al, byte ptr [0x5b000016]; ret; 
0x50213d7e  # mov al, byte ptr [0x89000016]; mov byte ptr [eax - 0x76ffffea], ch; mov byte ptr [eax + 0x5e000016], bl; ret; 
0x50214006  # mov al, byte ptr [0xc95b5e5f]; ret; 
0x50211c5a  # mov al, byte ptr [esp + 4]; cmp cl, al; jbe 0x11c64; mov al, cl; ret; 
0x50211c62  # mov al, cl; ret; 
0x50214c04  # mov byte ptr [eax + 0x5b000016], dh; ret; 
0x50213d89  # mov byte ptr [eax + 0x5e000016], bl; ret; 
0x50213d7d  # mov byte ptr [eax - 0x76ffffea], ah; mov byte ptr [eax - 0x76ffffea], ch; mov byte ptr [eax + 0x5e000016], bl; ret; 
0x50213d83  # mov byte ptr [eax - 0x76ffffea], ch; mov byte ptr [eax + 0x5e000016], bl; ret; 
0x502180cb  # mov byte ptr [eax], al; and dl, byte ptr [eax + 0x5d]; ret; 
0x50218098  # mov byte ptr [eax], al; and dl, byte ptr [eax + 0x5e]; pop ebp; ret; 
0x50218832  # mov byte ptr [ebx], bh; ret; 
0x50214ba6  # mov byte ptr [ecx + 0x1c], al; pop ebx; ret; 
0x50212760  # mov byte ptr [ecx + esi], dl; inc dword ptr [eax + 0x14]; pop edi; pop esi; ret; 
0x50217661  # mov byte ptr [ecx], 0x3a; ret 0x1774; 
0x5021766e  # mov byte ptr [ecx], 0x3a; ret 0xa74; 
0x502140ce  # mov byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x502183b1  # mov byte ptr [edi + 2], 0; pop edi; ret; 
0x50211fbc  # mov byte ptr [edi], dl; and dl, byte ptr [eax - 0x18]; ret 0x5f; 
0x502183c0  # mov byte ptr [edi], dl; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50214b4e  # mov byte ptr [esi + edx - 0x36a50000], ch; ret; 
0x50214bfd  # mov byte ptr [esi + edx - 0x769a0000], dh; mov byte ptr [eax + 0x5b000016], dh; ret; 
0x5021841a  # mov ch, 0x21; push eax; mov dword ptr [0x502249ec], 0x5021b4a0; ret; 
0x50211c23  # mov cs, word ptr [ebx - 0x7cb8dfbb]; ret; 
0x5021841d  # mov dword ptr [0x502249ec], 0x5021b4a0; ret; 
0x5021dbf4  # mov dword ptr [0x50227484], eax; ret; 
0x5021843b  # mov dword ptr [0x50228204], eax; je 0x18447; call 0x1bf7b; fnclex; pop ebp; ret; 
0x50219bfc  # mov dword ptr [eax + 0x10], ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x50215d4e  # mov dword ptr [eax + 0x14], ecx; mov ecx, dword ptr [ebp + 0x14]; mov dword ptr [eax + 0x18], ecx; pop ebp; ret; 
0x50213d88  # mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50213d7c  # mov dword ptr [eax + 0x16a0], ecx; mov dword ptr [eax + 0x16a8], ecx; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50213d82  # mov dword ptr [eax + 0x16a8], ecx; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50214b4d  # mov dword ptr [eax + 0x16ac], ecx; pop ebx; leave; ret; 
0x50214c03  # mov dword ptr [eax + 0x16b0], ecx; pop ebx; ret; 
0x50215d54  # mov dword ptr [eax + 0x18], ecx; pop ebp; ret; 
0x5021d9d6  # mov dword ptr [eax + 8], ecx; pop ebx; leave; ret; 
0x50213e37  # mov dword ptr [eax + edx*4 + 0xb54], ecx; leave; ret; 
0x502167fa  # mov dword ptr [eax], 0x50226f98; xor eax, eax; ret; 
0x5021c6df  # mov dword ptr [eax], 9; or eax, 0xffffffff; pop ebp; ret; 
0x5021c376  # mov dword ptr [eax], 9; xor eax, eax; pop ebp; ret; 
0x5021b5ec  # mov dword ptr [eax], ecx; add esp, 0xc; leave; ret; 
0x5021decb  # mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x5021c4b3  # mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x50211c3d  # mov dword ptr [ebp - 0x18], ecx; jns 0x11a6a; pop edi; pop ebx; leave; ret; 
0x5021b3bb  # mov dword ptr [ecx], eax; pop ebp; ret; 
0x50216f30  # mov dword ptr [ecx], eax; pop edi; pop esi; pop ebp; ret; 
0x5021e410  # mov dword ptr [ecx], ebx; pop edi; pop ebx; leave; ret; 
0x50214c32  # mov dword ptr [ecx], edx; pop esi; pop ebx; ret; 
0x5021273f  # mov dword ptr [edi + 0x1c], eax; pop edi; pop esi; pop ebx; leave; ret; 
0x502154e3  # mov dword ptr [edi + 0x30], eax; pop edi; pop esi; pop ebx; ret; 
0x502183ab  # mov dword ptr [edi], edx; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x502183a2  # mov dword ptr [edi], edx; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x502127b0  # mov dword ptr [esi + 0x10], eax; pop edi; pop esi; ret; 
0x502168e5  # mov dword ptr [esi + 0x30], eax; mov eax, dword ptr [ebp + 0x10]; pop esi; pop ebx; leave; ret; 
0x50212b3d  # mov dword ptr [esi + 0x40], edi; mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x50212b43  # mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x50212b3a  # mov dword ptr [esi + 0x60], edi; mov dword ptr [esi + 0x40], edi; mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x50212b40  # mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x50217780  # mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50219935  # mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x50219797  # mov dword ptr [esi + 4], edi; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x50219932  # mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x50219930  # mov dword ptr [esi], eax; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x50217f87  # mov eax, 0x502270e0; ret; 
0x5021de82  # mov eax, 0x8000; pop ebp; ret; 
0x50219670  # mov eax, dword ptr [eax + 0x10]; pop esi; pop ebp; ret; 
0x5021dcb4  # mov eax, dword ptr [eax]; pop edi; pop esi; pop ebx; leave; ret; 
0x5021c737  # mov eax, dword ptr [eax]; pop esi; pop ebp; ret; 
0x502168e8  # mov eax, dword ptr [ebp + 0x10]; pop esi; pop ebx; leave; ret; 
0x502180c2  # mov eax, dword ptr [ebp + 0xc]; add eax, 0x20; push eax; call dword ptr [0x50220088]; pop ebp; ret; 
0x5021b5e6  # mov eax, dword ptr [ebp + 0xc]; mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; add esp, 0xc; leave; ret; 
0x50217625  # mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502182af  # mov eax, dword ptr [ebp - 0x1c]; je 0x182b7; mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x5021d145  # mov eax, dword ptr [ebp - 0x20]; cmp eax, esi; je 0x1d14f; or dword ptr [edi], 0xffffffff; call 0x2705; ret; 
0x502182b4  # mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x5021c34e  # mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x2705; ret; 
0x5021873d  # mov eax, dword ptr [ebp - 4]; pop esi; pop ebx; leave; ret; 
0x5021b58c  # mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x5021b3b4  # mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x502127ad  # mov eax, dword ptr [esi + 8]; mov dword ptr [esi + 0x10], eax; pop edi; pop esi; ret; 
0x502167f6  # mov eax, dword ptr [esp + 0x10]; mov dword ptr [eax], 0x50226f98; xor eax, eax; ret; 
0x502183ad  # mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x502183a4  # mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x50217efd  # mov eax, ecx; pop esi; pop ebp; ret; 
0x5021d584  # mov eax, ecx; ret; 
0x50219d28  # mov eax, edi; call 0x2705; ret; 
0x50217307  # mov eax, edi; cld; pop edi; leave; ret; 
0x50215573  # mov eax, edi; pop ebx; pop edi; pop esi; ret; 
0x5021b1f5  # mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50212c86  # mov eax, edi; pop edi; pop esi; pop ebx; leave; ret; 
0x50212aca  # mov eax, edi; pop edi; ret; 
0x502176c0  # mov eax, edi; pop esi; pop ebx; pop edi; ret; 
0x5021db60  # mov eax, edx; xor edx, edx; and cl, 0x1f; shr eax, cl; ret; 
0x50213d21  # mov ecx, 0xc60b10e0; pop edi; pop esi; pop ebp; ret; 
0x5021dec5  # mov ecx, dword ptr [0x5022821c]; mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x50215d4b  # mov ecx, dword ptr [ebp + 0x10]; mov dword ptr [eax + 0x14], ecx; mov ecx, dword ptr [ebp + 0x14]; mov dword ptr [eax + 0x18], ecx; pop ebp; ret; 
0x50215d51  # mov ecx, dword ptr [ebp + 0x14]; mov dword ptr [eax + 0x18], ecx; pop ebp; ret; 
0x5021e951  # mov ecx, dword ptr [ebp + 0xc]; mov dword ptr [ecx], ebx; pop edi; pop ebx; leave; ret; 
0x5021b5e9  # mov ecx, dword ptr [ebp + 8]; mov dword ptr [eax], ecx; add esp, 0xc; leave; ret; 
0x50216d69  # mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50213e31  # mov ecx, dword ptr [ebp - 4]; mov edx, dword ptr [ebp + 8]; mov dword ptr [eax + edx*4 + 0xb54], ecx; leave; ret; 
0x5021502b  # mov ecx, eax; imul ecx, ecx, 3; add ecx, 0x11; add dword ptr [ebx + 0x16a0], ecx; pop ebx; ret; 
0x5021ffe8  # mov edi, 0x855ae0f; call 0x2705; ret; 
0x5021c7d0  # mov edi, dword ptr [ebp + 8]; push 0xa; call 0x29e4; pop ecx; ret; 
0x50219d30  # mov edi, dword ptr [ebp - 0x1c]; push 1; call 0x29e4; pop ecx; ret; 
0x5021c8d0  # mov edi, dword ptr [ebp - 0x28]; mov esi, dword ptr [ebp - 0x20]; push 0xa; call 0x29e4; pop ecx; ret; 
0x50212a8b  # mov edi, dword ptr [esp + 0xc]; test edi, edi; jne 0x12a97; xor eax, eax; pop edi; ret; 
0x502150b9  # mov edx, dword ptr [ebp + 0xc]; push 1; call 0x14c8e; pop ecx; pop ebp; ret; 
0x50213e34  # mov edx, dword ptr [ebp + 8]; mov dword ptr [eax + edx*4 + 0xb54], ecx; leave; ret; 
0x5021c351  # mov edx, dword ptr [ebp - 0x20]; call 0x2705; ret; 
0x5021c244  # mov edx, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x5021275d  # mov esi, dword ptr [eax + 8]; mov byte ptr [ecx + esi], dl; inc dword ptr [eax + 0x14]; pop edi; pop esi; ret; 
0x502177ae  # mov esi, dword ptr [ebp + 8]; push esi; call 0x180d1; pop ecx; ret; 
0x5021c8d3  # mov esi, dword ptr [ebp - 0x20]; push 0xa; call 0x29e4; pop ecx; ret; 
0x5021762e  # mov esi, dword ptr [ebp - 0x24]; push esi; call 0x180d1; pop ecx; ret; 
0x50215034  # mov esp, dword ptr [eax + 0x5b000016]; ret; 
0x50214c02  # mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x50213e38  # mov word ptr [eax + 0xb54], ss; leave; ret; 
0x5021d9d5  # mov word ptr [eax + 8], cx; pop ebx; leave; ret; 
0x5021c4b2  # mov word ptr [eax], cx; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x50213c55  # mov word ptr [ebp - 0x75000000], ss; ret 0xe8c1; 
0x5021017d  # mov word ptr [ecx - 0x40], gs; or byte ptr [eax + eax], al; add byte ptr [ebx], al; ret; 
0x50214c31  # mov word ptr [ecx], dx; pop esi; pop ebx; ret; 
0x502183aa  # mov word ptr [edi], dx; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x502183b7  # mov word ptr [edi], dx; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5021c3bd  # movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x5021de89  # neg eax; sbb eax, eax; and eax, 0xc000; add eax, 0x4000; pop ebp; ret; 
0x5021db44  # neg eax; sbb edx, 0; pop ebp; pop esi; pop edi; ret 0x10; 
0x50213e39  # nop; push esp; or eax, dword ptr [eax]; add cl, cl; ret; 
0x502180ba  # or al, 0; add byte ptr [eax], 0; pop ecx; pop ebp; ret; 
0x50217621  # or al, 0; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021c34a  # or al, 0; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x24]; mov edx, dword ptr [ebp - 0x20]; call 0x2705; ret; 
0x502114fd  # or al, 0; jg 0x11307; pop edi; pop ebx; leave; ret; 
0x5021a59a  # or al, 0; jg 0x1a585; pop esi; pop ebp; ret; 
0x502106a7  # or al, 0x24; rdmsr; ret 0x788; 
0x50215488  # or al, 0x33; fist dword ptr [edi + 0x3b]; ret; 
0x5021fb5c  # or al, 0x3b; ret 0x840f; 
0x50217cbd  # or al, 0x3b; ret; 
0x5021777c  # or al, 0x40; je 0x1778c; mov dword ptr [esi + 0xc], edi; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50216c41  # or al, 0x50; call 0x35e8; pop ecx; or eax, 0xffffffff; pop ebp; ret; 
0x5021c7f9  # or al, 0x50; call dword ptr [0x50220084]; pop ebp; ret; 
0x5021c7bd  # or al, 0x50; call dword ptr [0x50220088]; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x50217891  # or al, 0x5d; ret; 
0x502155ee  # or al, 0x5f; pop esi; pop ebx; leave; ret; 
0x5021bb7b  # or al, 0x7f; add al, 0x3b; ret; 
0x502180c4  # or al, 0x83; shl byte ptr [eax], 0x50; call dword ptr [0x50220088]; pop ebp; ret; 
0x50212a8e  # or al, 0x85; push dword ptr [ebp + 4]; xor eax, eax; pop edi; ret; 
0x50216f2f  # or al, 0x89; add dword ptr [edi + 0x5e], ebx; pop ebp; ret; 
0x502154e2  # or al, 0x89; inc edi; xor byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x5021777f  # or al, 0x89; jle 0x1778f; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021e40f  # or al, 0x89; sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x502169e8  # or al, 0x8b; dec ebp; adc al, 0x23; ret; 
0x5021fb4c  # or al, 0x8b; dec ebp; or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5021b5e8  # or al, 0x8b; dec ebp; or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x5021fc10  # or al, 0x8b; ret 0xf633; 
0x50217735  # or al, 0x8b; ret; 
0x5021b5f0  # or al, 0xc9; ret; 
0x50218d9f  # or al, 0xe8; ret; 
0x50217cc7  # or al, 0xf7; ret 0x108; 
0x50217886  # or al, 0xff; jne 0x17892; call 0x177b9; add esp, 0xc; pop ebp; ret; 
0x5021867a  # or al, 0xff; jne 0x18686; call 0x1844b; add esp, 0xc; pop ebp; ret; 
0x5021874d  # or al, 0xff; jne 0x18759; call 0x18688; add esp, 0xc; pop ebp; ret; 
0x50218cc3  # or al, 0xff; jne 0x18ccf; call 0x18bed; add esp, 0xc; pop ebp; ret; 
0x5021b5ff  # or al, 0xff; jne 0x1b60b; call 0x1b5b1; add esp, 0x10; pop ebp; ret; 
0x5021b8a3  # or al, 0xff; jne 0x1b8af; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bef2  # or al, 0xff; jne 0x1befe; call 0x1bd1b; add esp, 0x14; pop ebp; ret; 
0x5021bf4a  # or al, 0xff; jne 0x1bf56; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bf6d  # or al, 0xff; jne 0x1bf79; call 0x1bed0; add esp, 0x1c; pop ebp; ret; 
0x5021c5b0  # or al, 0xff; jne 0x1c5bc; call 0x1c48d; add esp, 0x10; pop ebp; ret; 
0x5021d3df  # or al, 0xff; jne 0x1d3eb; call 0x1d1a8; add esp, 0x10; pop ebp; ret; 
0x5021d563  # or al, 0xff; jne 0x1d56f; call 0x1d3ed; add esp, 0x10; pop ebp; ret; 
0x5021d702  # or al, 0xff; jne 0x1d70e; call 0x1d587; add esp, 0x14; pop ebp; ret; 
0x502162b0  # or al, 0xff; jo 0x162dc; call dword ptr [eax + 0x24]; pop ecx; pop ecx; ret; 
0x5021dbf0  # or al, 1; and dl, byte ptr [eax - 0x5d]; test byte ptr [edx + 0x50], dh; ret; 
0x50218091  # or al, byte ptr [ebx - 0xa9df3a]; adc eax, 0x50220088; pop esi; pop ebp; ret; 
0x50219902  # or al, ch; aam 0x2e; add byte ptr [eax], al; pop ecx; ret; 
0x5021b8a6  # or al, ch; adc eax, 0x83ffffff; les ebx, ptr [eax]; pop ebp; ret; 
0x5021a3f3  # or al, ch; jecxz 0x1a41a; add byte ptr [eax], al; pop ecx; ret; 
0x5021c35c  # or al, ch; jp 0x1c364; add byte ptr [eax], al; pop ecx; ret; 
0x50216d95  # or al, ch; ret 0xfffe; 
0x5021b602  # or al, ch; test eax, 0x83ffffff; les edx, ptr [eax]; pop ebp; ret; 
0x5021eadf  # or bh, bh; inc ebp; mov ah, 0x2a; ret; 
0x5021ffbb  # or bh, byte ptr [0xc000001d]; je 0x1ffc6; xor eax, eax; ret; 
0x5021f34a  # or bh, byte ptr [ebx]; ret 0x472; 
0x5021fa8f  # or bh, byte ptr [ebx]; sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x5021275f  # or byte ptr [eax + 0x40ff3114], cl; adc al, 0x5f; pop esi; ret; 
0x50210180  # or byte ptr [eax + eax], al; add byte ptr [ebx], al; ret; 
0x5021c0c6  # or byte ptr [eax - 0x76fc14e1], cl; pop ebp; or byte ptr [ebx], bh; ret; 
0x5021c933  # or byte ptr [eax], al; add byte ptr [ebx], bh; ret 0x1773; 
0x5021fa30  # or byte ptr [eax], al; add dh, dh; ret 0x7401; 
0x50214bc3  # or byte ptr [eax], al; jg 0x14bad; shr eax, 1; ret; 
0x5021a5e6  # or byte ptr [eax], al; jg 0x1a5bf; pop esi; pop ebx; pop ebp; ret; 
0x5021a542  # or byte ptr [eax], al; pop ecx; pop esi; pop ebp; ret; 
0x502112db  # or byte ptr [ebp - 0x2d], bh; pop esi; pop ebx; leave; ret; 
0x5021fb4f  # or byte ptr [ebx + 0x23d0f7c7], cl; ret 0xcf23; 
0x5021dc1c  # or byte ptr [ebx + 0x374fef8], al; push eax; call esi; pop esi; ret; 
0x5021c8cf  # or byte ptr [ebx + 0x758bd87d], 0xe0; push 0xa; call 0x29e4; pop ecx; ret; 
0x50214bbf  # or byte ptr [ebx + 0x8247c], al; jg 0x14bad; shr eax, 1; ret; 
0x5021faca  # or byte ptr [ebx + eax - 0x7d], dh; retf 0xf604; ret; 
0x5021d9d8  # or byte ptr [ebx - 0x37], bl; ret; 
0x50212ac6  # or byte ptr [ebx - 0x3874f33c], al; pop edi; ret; 
0x50211270  # or byte ptr [ebx - 0x7d], dl; stc; add edx, dword ptr [esi + 0x7e]; xor al, 0x83; ret 0xebfc; 
0x5021ba6f  # or byte ptr [ebx], bh; ret 0x860f; 
0x50217814  # or byte ptr [ebx], bh; ret; 
0x5021577b  # or byte ptr [ebx], ch; ret 0x8948; 
0x50215d8b  # or byte ptr [ebx], ch; ret 0xe948; 
0x5021c4b4  # or byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x502174ff  # or byte ptr [ecx + 0x4589e045], cl; in al, 0x33; fstp xword ptr [ebx]; ret; 
0x50219934  # or byte ptr [ecx + 0x5d5e0446], cl; ret; 
0x502127af  # or byte ptr [ecx + 0x5e5f1046], cl; ret; 
0x50213e36  # or byte ptr [ecx + 0xb54908c], cl; add byte ptr [eax], al; leave; ret; 
0x5021b5eb  # or byte ptr [ecx + 0xcc48308], cl; leave; ret; 
0x502182ad  # or byte ptr [ecx], al; mov eax, dword ptr [ebp - 0x1c]; je 0x182b7; mov eax, dword ptr [ebp - 0x24]; call 0x2705; ret; 
0x5021ffe7  # or byte ptr [edi + 0x855ae0f], bh; call 0x2705; ret; 
0x5021c517  # or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x5021c7d2  # or byte ptr [edx + 0xa], ch; call 0x29e4; pop ecx; ret; 
0x5021fa1a  # or byte ptr [edx + eax + 0xb], dh; ret; 
0x5021d526  # or byte ptr [esi + 0xb], ah; ret 0xf46; 
0x502177b0  # or byte ptr [esi - 0x18], dl; sbb cl, byte ptr [ecx]; add byte ptr [eax], al; pop ecx; ret; 
0x5021ffe6  # or byte ptr gs:[edi + 0x855ae0f], bh; call 0x2705; ret; 
0x502155a8  # or ch, byte ptr [ebx]; ret 0x8b48; 
0x502183b0  # or dh, al; inc edi; add al, byte ptr [eax]; pop edi; ret; 
0x5021f98d  # or dh, dh; ret; 
0x50214ec5  # or dl, byte ptr [esi - 0x75]; ret; 
0x502180b8  # or dword ptr [eax + 0xc], 0x8000; pop ecx; pop ebp; ret; 
0x5021c21e  # or dword ptr [eax - 0x18], edx; ret; 
0x50217866  # or dword ptr [eax], eax; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x5021c6e1  # or dword ptr [eax], eax; add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x5021c378  # or dword ptr [eax], eax; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x5021d14c  # or dword ptr [edi], 0xffffffff; call 0x2705; ret; 
0x5021a575  # or dword ptr [esi], eax; ret; 
0x5021f9fe  # or eax, 0x1000; ret; 
0x5021fa9a  # or eax, 0x40; ret; 
0x5021dec6  # or eax, 0x5022821c; mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x5021fda9  # or eax, 0x80000000; pop edi; pop esi; pop ebx; leave; ret; 
0x5021fa94  # or eax, 0x8000; ret; 
0x5021fa9e  # or eax, 0x8040; ret; 
0x5021766a  # or eax, 0xc683068a; add dword ptr [edx], edi; ret 0xa74; 
0x50216c49  # or eax, 0xffffffff; pop ebp; ret; 
0x5021979a  # or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x50218a63  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret; 
0x5021c6bd  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5021d576  # or eax, 1; xor ecx, ecx; cmp dword ptr [0x50228214], eax; sete cl; mov eax, ecx; ret; 
0x50219d24  # or eax, dword ptr [eax]; add byte ptr [eax], al; mov eax, edi; call 0x2705; ret; 
0x50213e3b  # or eax, dword ptr [eax]; add cl, cl; ret; 
0x50216e56  # or eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50213d25  # or eax, esi; pop edi; pop esi; pop ebp; ret; 
0x5021eb39  # or edi, edi; inc ebp; mov ah, 0x2a; ret; 
0x50210e11  # or esp, dword ptr [ecx]; push eax; ret; 
0x5021a59d  # out 0x5e, eax; pop ebp; ret; 
0x502169e5  # out 0x8b, al; inc ebp; or al, 0x8b; dec ebp; adc al, 0x23; ret; 
0x502115fa  # out 0x8b, eax; ret 0xf8c1; 
0x5021a56b  # out 0xff, eax; call ptr [ecx + 0x59]; cmp eax, -1; jne 0x1a578; or dword ptr [esi], eax; ret; 
0x502174a4  # paddq mm7, mm6; inc dword ptr [ebx - 0x3fcceb3c]; call 0x2705; ret; 
0x50211148  # paddw mm7, mm7; call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x5021db66  # pop ds; shr eax, cl; ret; 
0x50213aeb  # pop eax; pop edi; pop esi; pop ebp; pop ebx; ret; 
0x5021a473  # pop eax; pop edi; pop esi; pop ebp; ret; 
0x50216c1c  # pop eax; pop edi; pop esi; pop ebx; leave; ret; 
0x502129e4  # pop eax; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5021388d  # pop eax; pop edi; pop esi; pop ebx; ret; 
0x50212a7b  # pop eax; pop edi; pop esi; ret; 
0x50212b45  # pop eax; pop edi; ret; 
0x50213559  # pop eax; pop esi; ret; 
0x5021376f  # pop eax; ret; 
0x5021c0cc  # pop ebp; or byte ptr [ebx], bh; ret; 
0x5021c516  # pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x50213108  # pop ebp; pop ebx; ret; 
0x5021db49  # pop ebp; pop esi; pop edi; ret 0x10; 
0x50211187  # pop ebp; ret; 
0x50216322  # pop ebx; add ebp, 0x54; leave; ret; 
0x50212618  # pop ebx; call 0x5385; add ebp, 0x188; leave; ret; 
0x502108d8  # pop ebx; call 0x5385; leave; ret; 
0x5021de7f  # pop ebx; jne 0x1de89; mov eax, 0x8000; pop ebp; ret; 
0x5021114e  # pop ebx; leave; ret; 
0x50213e30  # pop ebx; mov ecx, dword ptr [ebp - 4]; mov edx, dword ptr [ebp + 8]; mov dword ptr [eax + edx*4 + 0xb54], ecx; leave; ret; 
0x50210e10  # pop ebx; or esp, dword ptr [ecx]; push eax; ret; 
0x50211a31  # pop ebx; pop ebp; ret; 
0x5021bc1f  # pop ebx; pop edi; pop esi; leave; ret; 
0x50215575  # pop ebx; pop edi; pop esi; ret; 
0x502176bd  # pop ebx; pop edi; ret; 
0x50217679  # pop ebx; pop edi; xor eax, eax; ret; 
0x502166b2  # pop ebx; pop esi; leave; ret; 
0x50212e50  # pop ebx; ret; 
0x50218dec  # pop ebx; xor al, 0; add byte ptr [ebx], ah; ret 0xc483; 
0x5021354d  # pop ecx; call 0x12ace; xor eax, eax; pop esi; ret; 
0x5021a56f  # pop ecx; cmp eax, -1; jne 0x1a578; or dword ptr [esi], eax; ret; 
0x50216c48  # pop ecx; or eax, 0xffffffff; pop ebp; ret; 
0x502150c3  # pop ecx; pop ebp; ret; 
0x5021a56e  # pop ecx; pop ecx; cmp eax, -1; jne 0x1a578; or dword ptr [esi], eax; ret; 
0x50216d9b  # pop ecx; pop ecx; pop ebp; ret; 
0x50215471  # pop ecx; pop ecx; ret; 
0x5021dbd4  # pop ecx; pop ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x502137a4  # pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x502167ce  # pop ecx; pop edi; pop ebx; pop esi; leave; ret; 
0x50214fd5  # pop ecx; pop edi; pop esi; leave; ret; 
0x5021885f  # pop ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x5021a544  # pop ecx; pop esi; pop ebp; ret; 
0x50215472  # pop ecx; ret; 
0x5021dbd5  # pop ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x502137a5  # pop ecx; xor eax, eax; pop esi; ret; 
0x50216840  # pop edi; adc al, 0x2b; ret; 
0x50211505  # pop edi; pop ebx; leave; ret; 
0x502167cf  # pop edi; pop ebx; pop esi; leave; ret; 
0x50214fd6  # pop edi; pop esi; leave; ret; 
0x50214b4b  # pop edi; pop esi; mov dword ptr [eax + 0x16ac], ecx; pop ebx; leave; ret; 
0x5021d9d3  # pop edi; pop esi; mov word ptr [eax + 8], cx; pop ebx; leave; ret; 
0x50213106  # pop edi; pop esi; pop ebp; pop ebx; ret; 
0x50213d27  # pop edi; pop esi; pop ebp; ret; 
0x5021114c  # pop edi; pop esi; pop ebx; leave; ret; 
0x50211a2f  # pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50212e4e  # pop edi; pop esi; pop ebx; ret; 
0x50212766  # pop edi; pop esi; ret; 
0x5021db4b  # pop edi; ret 0x10; 
0x50212a95  # pop edi; ret; 
0x50216a7f  # pop edi; sub byte ptr [ebx], bh; ret; 
0x50218039  # pop edi; xor eax, eax; pop esi; ret; 
0x5021767a  # pop edi; xor eax, eax; ret; 
0x502108d5  # pop edi; xor ecx, ebp; pop ebx; call 0x5385; leave; ret; 
0x5021c1be  # pop es; call 0x29e4; pop ecx; ret; 
0x5021de81  # pop es; mov eax, 0x8000; pop ebp; ret; 
0x5021b58b  # pop es; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50216d68  # pop es; mov ecx, dword ptr [ebp - 0x10]; and dword ptr [ecx + 0x70], 0xfffffffd; pop ebx; leave; ret; 
0x50216e55  # pop es; or eax, edi; pop edi; pop esi; pop ebp; ret; 
0x502154d2  # pop esi; and byte ptr [ebx], bh; ret; 
0x50219560  # pop esi; call 0x5385; leave; ret; 
0x5021b589  # pop esi; je 0x1b593; mov eax, dword ptr [ebp - 8]; and dword ptr [eax + 0x70], 0xfffffffd; leave; ret; 
0x50214fd7  # pop esi; leave; ret; 
0x50214ba5  # pop esi; mov byte ptr [ecx + 0x1c], al; pop ebx; ret; 
0x50214b4c  # pop esi; mov dword ptr [eax + 0x16ac], ecx; pop ebx; leave; ret; 
0x5021d9d4  # pop esi; mov word ptr [eax + 8], cx; pop ebx; leave; ret; 
0x50213107  # pop esi; pop ebp; pop ebx; ret; 
0x50211186  # pop esi; pop ebp; ret; 
0x50216321  # pop esi; pop ebx; add ebp, 0x54; leave; ret; 
0x5021de7e  # pop esi; pop ebx; jne 0x1de89; mov eax, 0x8000; pop ebp; ret; 
0x5021114d  # pop esi; pop ebx; leave; ret; 
0x50211a30  # pop esi; pop ebx; pop ebp; ret; 
0x502176bc  # pop esi; pop ebx; pop edi; ret; 
0x50217678  # pop esi; pop ebx; pop edi; xor eax, eax; ret; 
0x50212e4f  # pop esi; pop ebx; ret; 
0x50217e05  # pop esi; pop edi; pop ebx; leave; ret; 
0x5021db4a  # pop esi; pop edi; ret 0x10; 
0x50212767  # pop esi; ret; 
0x502154cf  # pop esi; sbb al, 0x89; pop esi; and byte ptr [ebx], bh; ret; 
0x502172d2  # pop esi; xor ecx, ebp; pop ebx; call 0x5385; leave; ret; 
0x50211fbd  # pop ss; and dl, byte ptr [eax - 0x18]; ret 0x5f; 
0x502183ac  # pop ss; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x502183a3  # pop ss; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x5021b3b8  # popal; add al, 0; mov dword ptr [ecx], eax; pop ebp; ret; 
0x50216d6d  # popal; jo 0x16d6d; pop ebx; leave; ret; 
0x50218bd4  # popal; jo 0x18bd4; pop ebx; leave; ret; 
0x50218cb3  # popal; jo 0x18cb3; pop esi; pop ebx; leave; ret; 
0x5021fa93  # prefetch byte ptr [eax]; add byte ptr [eax], 0; ret; 
0x502169e3  # psrad mm6, 0x8b; inc ebp; or al, 0x8b; dec ebp; adc al, 0x23; ret; 
0x5021371e  # punpckhdq mm1, qword ptr [eax]; push dword ptr [esp + 0x20]; push dword ptr [esp + 0x20]; call 0x1355c; add esp, 0x20; ret; 
0x50217b42  # push -1; push dword ptr [ebp + 8]; call 0x17a9e; add esp, 0x14; pop ebp; ret; 
0x50212a79  # push -2; pop eax; pop edi; pop esi; ret; 
0x50213557  # push -2; pop eax; pop esi; ret; 
0x5021376d  # push -2; pop eax; ret; 
0x5021388b  # push -6; pop eax; pop edi; pop esi; pop ebx; ret; 
0x5021c003  # push 0; call eax; ret; 
0x5021a471  # push 0x16; pop eax; pop edi; pop esi; pop ebp; ret; 
0x50217fd8  # push 0x1a; pop eax; pop esi; ret; 
0x5021dbe9  # push 0x502228ec; call dword ptr [0x5022010c]; mov dword ptr [0x50227484], eax; ret; 
0x50211fb8  # push 0x8868157c; pop ss; and dl, byte ptr [eax - 0x18]; ret 0x5f; 
0x5021c7d3  # push 0xa; call 0x29e4; pop ecx; ret; 
0x5021c994  # push 0xb; call 0x29e4; pop ecx; ret; 
0x5021389a  # push 0xf; push dword ptr [esp + 0x10]; call 0x137af; add esp, 0x10; ret; 
0x502150bc  # push 1; call 0x14c8e; pop ecx; pop ebp; ret; 
0x502182c6  # push 1; call 0x181ec; pop ecx; ret; 
0x502182bd  # push 1; call 0x29e4; pop ecx; ret; 
0x5021c1bd  # push 7; call 0x29e4; pop ecx; ret; 
0x5021371f  # push 8; push dword ptr [esp + 0x20]; push dword ptr [esp + 0x20]; call 0x1355c; add esp, 0x20; ret; 
0x50218051  # push dword ptr [0x50228220]; call 0x186f; pop ecx; ret; 
0x5021375e  # push dword ptr [eax + 0x14]; call 0x1547f; add esp, 0xc; xor eax, eax; pop esi; ret; 
0x502162b1  # push dword ptr [eax + 0x28]; call dword ptr [eax + 0x24]; pop ecx; pop ecx; ret; 
0x50218293  # push dword ptr [eax + esi*4]; push esi; call 0x1810d; pop ecx; pop ecx; ret; 
0x5021d198  # push dword ptr [ebp + 0x10]; push dword ptr [ebp + 0xc]; call 0x1d0bc; add esp, 0x18; pop ebp; ret; 
0x502174e7  # push dword ptr [ebp + 0x14]; call 0x180d1; pop ecx; ret; 
0x50217b2a  # push dword ptr [ebp + 0x18]; call 0x180d1; pop ecx; ret; 
0x5021d19b  # push dword ptr [ebp + 0xc]; call 0x1d0bc; add esp, 0x18; pop ebp; ret; 
0x50217884  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x177b9; add esp, 0xc; pop ebp; ret; 
0x50218678  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1844b; add esp, 0xc; pop ebp; ret; 
0x5021874b  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x18688; add esp, 0xc; pop ebp; ret; 
0x50218cc1  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x18bed; add esp, 0xc; pop ebp; ret; 
0x5021b5fd  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1b5b1; add esp, 0x10; pop ebp; ret; 
0x5021b8a1  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bef0  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1bd1b; add esp, 0x14; pop ebp; ret; 
0x5021bf6b  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1bed0; add esp, 0x1c; pop ebp; ret; 
0x5021c5ae  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1c48d; add esp, 0x10; pop ebp; ret; 
0x5021d3dd  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1d1a8; add esp, 0x10; pop ebp; ret; 
0x5021d561  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x1d3ed; add esp, 0x10; pop ebp; ret; 
0x5021a572  # push dword ptr [ebp + 3]; or dword ptr [esi], eax; ret; 
0x50212a90  # push dword ptr [ebp + 4]; xor eax, eax; pop edi; ret; 
0x50216d93  # push dword ptr [ebp + 8]; call 0x16c5d; pop ecx; pop ecx; pop ebp; ret; 
0x50217887  # push dword ptr [ebp + 8]; call 0x177b9; add esp, 0xc; pop ebp; ret; 
0x50217b44  # push dword ptr [ebp + 8]; call 0x17a9e; add esp, 0x14; pop ebp; ret; 
0x50217873  # push dword ptr [ebp + 8]; call 0x180d1; pop ecx; ret; 
0x5021867b  # push dword ptr [ebp + 8]; call 0x1844b; add esp, 0xc; pop ebp; ret; 
0x5021874e  # push dword ptr [ebp + 8]; call 0x18688; add esp, 0xc; pop ebp; ret; 
0x50218be1  # push dword ptr [ebp + 8]; call 0x18b34; pop ecx; pop ecx; pop ebp; ret; 
0x50218cc4  # push dword ptr [ebp + 8]; call 0x18bed; add esp, 0xc; pop ebp; ret; 
0x5021b633  # push dword ptr [ebp + 8]; call 0x1b4a0; pop ecx; pop ecx; pop ebp; ret; 
0x5021b646  # push dword ptr [ebp + 8]; call 0x1b513; pop ecx; pop ecx; pop ebp; ret; 
0x5021b8a4  # push dword ptr [ebp + 8]; call 0x1b7c1; add esp, 0x18; pop ebp; ret; 
0x5021bef3  # push dword ptr [ebp + 8]; call 0x1bd1b; add esp, 0x14; pop ebp; ret; 
0x5021bf6e  # push dword ptr [ebp + 8]; call 0x1bed0; add esp, 0x1c; pop ebp; ret; 
0x5021c5b1  # push dword ptr [ebp + 8]; call 0x1c48d; add esp, 0x10; pop ebp; ret; 
0x5021963a  # push dword ptr [ebp + 8]; call 0x1c7dc; pop ecx; ret; 
0x5021d3e0  # push dword ptr [ebp + 8]; call 0x1d1a8; add esp, 0x10; pop ebp; ret; 
0x5021d564  # push dword ptr [ebp + 8]; call 0x1d3ed; add esp, 0x10; pop ebp; ret; 
0x5021d703  # push dword ptr [ebp + 8]; call 0x1d587; add esp, 0x14; pop ebp; ret; 
0x5021a2f6  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5b], 0x5e; leave; ret; 
0x50212e4b  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x50213103  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5d; pop ebx; ret; 
0x50218379  # push dword ptr [ebx]; ret 0x118b; 
0x5021d17f  # push dword ptr [edi]; call 0x1c7dc; pop ecx; ret; 
0x50211a2c  # push dword ptr [edx]; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x5021a595  # push dword ptr [esi + eax - 0x7d]; jge 0x1a5a7; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x5021389c  # push dword ptr [esp + 0x10]; call 0x137af; add esp, 0x10; ret; 
0x50213725  # push dword ptr [esp + 0x20]; call 0x1355c; add esp, 0x20; ret; 
0x50213721  # push dword ptr [esp + 0x20]; push dword ptr [esp + 0x20]; call 0x1355c; add esp, 0x20; ret; 
0x50215468  # push dword ptr [esp + 0xc]; call 0x84a4; pop ecx; pop ecx; ret; 
0x50213896  # push dword ptr [esp + 0xc]; push 0xf; push dword ptr [esp + 0x10]; call 0x137af; add esp, 0x10; ret; 
0x50215464  # push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x84a4; pop ecx; pop ecx; ret; 
0x5021a594  # push dword ptr ds:[esi + eax - 0x7d]; jge 0x1a5a7; add byte ptr [edi - 0x19], bh; pop esi; pop ebp; ret; 
0x50218c75  # push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50216ecb  # push eax; add dword ptr [ebp + 4], esi; xor eax, eax; inc eax; ret; 
0x502162b5  # push eax; and al, 0x59; pop ecx; ret; 
0x50218056  # push eax; call 0x186f; pop ecx; ret; 
0x502180f8  # push eax; call 0x29e4; pop ecx; pop ebp; ret; 
0x50216c42  # push eax; call 0x35e8; pop ecx; or eax, 0xffffffff; pop ebp; ret; 
0x50218104  # push eax; call dword ptr [0x50220084]; pop ebp; ret; 
0x5021c7be  # push eax; call dword ptr [0x50220088]; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502180c8  # push eax; call dword ptr [0x50220088]; pop ebp; ret; 
0x5021dbed  # push eax; call dword ptr [0x5022010c]; mov dword ptr [0x50227484], eax; ret; 
0x5021dc22  # push eax; call esi; pop esi; ret; 
0x5021843f  # push eax; je 0x18447; call 0x1bf7b; fnclex; pop ebp; ret; 
0x50218036  # push eax; jl 0x18007; pop edi; xor eax, eax; pop esi; ret; 
0x5021841c  # push eax; mov dword ptr [0x502249ec], 0x5021b4a0; ret; 
0x5021dbf3  # push eax; mov dword ptr [0x50227484], eax; ret; 
0x5021deca  # push eax; mov dword ptr [eax], ecx; xor eax, eax; pop esi; pop ebp; ret; 
0x5021c7c4  # push eax; mov eax, dword ptr [ebp - 0x1c]; call 0x2705; ret; 
0x502167f5  # push eax; mov eax, dword ptr [esp + 0x10]; mov dword ptr [eax], 0x50226f98; xor eax, eax; ret; 
0x502180ce  # push eax; pop ebp; ret; 
0x50210e0f  # push eax; pop ebx; or esp, dword ptr [ecx]; push eax; ret; 
0x5021809b  # push eax; pop esi; pop ebp; ret; 
0x50210e13  # push eax; ret; 
0x5021d580  # push eax; sete cl; mov eax, ecx; ret; 
0x5021bffe  # push eax; test eax, eax; je 0x1c008; push 0; call eax; ret; 
0x502167ff  # push eax; xor eax, eax; ret; 
0x50211182  # push ebp; adc al, 0x7e; fstp dword ptr [esi + 0x5d]; ret; 
0x5021d89b  # push ebp; adc byte ptr [ebx], bh; ror dword ptr [eax - 0x74fb81e2], cl; ret 0x2eb; 
0x5021c245  # push ebp; cld; pop edi; pop esi; leave; ret; 
0x5021647d  # push ebp; cmp byte ptr [ebx], al; ret 0x558b; 
0x5021fc0f  # push ebp; or al, 0x8b; ret 0xf633; 
0x502112da  # push ebp; or byte ptr [ebp - 0x2d], bh; pop esi; pop ebx; leave; ret; 
0x50213e35  # push ebp; or byte ptr [ecx + 0xb54908c], cl; add byte ptr [eax], al; leave; ret; 
0x502103a1  # push ebp; test byte ptr [ebx - 0x7e2ed42d], cl; ret 0xe78; 
0x50218c70  # push ecx; add dword ptr [esp + edx - 0x73], esi; push eax; add dword ptr [eax], edi; sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50218127  # push ecx; call 0x29e4; pop ecx; pop ebp; ret; 
0x50217cc6  # push edi; or al, 0xf7; ret 0x108; 
0x5021a597  # push es; cmp dword ptr [ebp + 0xc], 0; jg 0x1a585; pop esi; pop ebp; ret; 
0x5021c7f5  # push es; lea eax, [ecx + eax + 0xc]; push eax; call dword ptr [0x50220084]; pop ebp; ret; 
0x50219931  # push es; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; pop ebp; ret; 
0x502127ac  # push es; mov eax, dword ptr [esi + 8]; mov dword ptr [esi + 0x10], eax; pop edi; pop esi; ret; 
0x5021c3bc  # push es; movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x5021a576  # push es; ret; 
0x5021db59  # push es; shrd eax, edx, cl; shr edx, cl; ret; 
0x50215d1b  # push esi; and al, 0x83; les esp, ptr [edi + ebx*2]; xor eax, eax; pop esi; ret; 
0x50212665  # push esi; and dh, dh; ret 0x7401; 
0x50217631  # push esi; call 0x180d1; pop ecx; ret; 
0x50218296  # push esi; call 0x1810d; pop ecx; pop ecx; ret; 
0x5021bf9b  # push esi; call 0x478f; add esp, 0x14; pop esi; ret; 
0x502174a2  # push esi; call 0x48b7; add esp, 0x14; xor eax, eax; call 0x2705; ret; 
0x5021b621  # push esi; call 0x6110; add esp, 0x10; pop esi; ret; 
0x50218095  # push esi; call dword ptr [0x50220088]; pop esi; pop ebp; ret; 
0x502136b9  # push esi; cmp al, 0x74; cmp byte ptr [ebx], bh; ret 0x3474; 
0x502136b4  # push esi; cmp byte ptr [ebp + edi + 0x39], dh; push esi; cmp al, 0x74; cmp byte ptr [ebx], bh; ret 0x3474; 
0x5021bf9a  # push esi; push esi; call 0x478f; add esp, 0x14; pop esi; ret; 
0x50216325  # push esp; leave; ret; 
0x50213e3a  # push esp; or eax, dword ptr [eax]; add cl, cl; ret; 
0x50213d85  # push ss; add byte ptr [eax], al; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50213d7f  # push ss; add byte ptr [eax], al; mov dword ptr [eax + 0x16a8], ecx; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x50214bff  # push ss; add byte ptr [eax], al; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x50214b50  # push ss; add byte ptr [eax], al; pop ebx; leave; ret; 
0x50214c06  # push ss; add byte ptr [eax], al; pop ebx; ret; 
0x50213d8b  # push ss; add byte ptr [eax], al; pop esi; ret; 
0x5021a472  # push ss; pop eax; pop edi; pop esi; pop ebp; ret; 
0x5021b50e  # pushal; jo 0x1b50e; leave; ret; 
0x5021b590  # pushal; jo 0x1b590; leave; ret; 
0x50212b3c  # pushal; mov dword ptr [esi + 0x40], edi; mov dword ptr [esi + 0x70], eax; mov dword ptr [esi + 0x58], eax; pop edi; ret; 
0x502180f6  # rcl byte ptr [eax], 0x50; call 0x29e4; pop ecx; pop ebp; ret; 
0x50218125  # rcl dword ptr [eax], 0x51; call 0x29e4; pop ecx; pop ebp; ret; 
0x50215031  # rcl dword ptr [ecx], 1; mov esp, dword ptr [eax + 0x5b000016]; ret; 
0x5021bc1e  # rcr byte ptr [ebx + 0x5f], 0x5e; leave; ret; 
0x5021866b  # rcr byte ptr [edi + 0x5b], 0x5e; leave; ret; 
0x5021631f  # rcr byte ptr [edi + 0x5e], 0x5b; add ebp, 0x54; leave; ret; 
0x50217344  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x50211a2e  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x50212e4d  # rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x50213105  # rcr byte ptr [edi + 0x5e], 0x5d; pop ebx; ret; 
0x50219838  # rcr byte ptr [edi + 0x5e], 0x5d; ret; 
0x5021c4b6  # rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x5021c177  # rcr byte ptr [esi + 0x5f], 0x5b; leave; ret; 
0x50214ba4  # rcr byte ptr [esi - 0x78], 0x41; sbb al, 0x5b; ret; 
0x502112dd  # rcr dword ptr [esi + 0x5b], cl; leave; ret; 
0x50217e04  # rcr dword ptr [esi + 0x5f], 0x5b; leave; ret; 
0x502106a9  # rdmsr; ret 0x788; 
0x502137c5  # ret 0; 
0x50217cc9  # ret 0x108; 
0x5021db4c  # ret 0x10; 
0x50215d98  # ret 0x10e9; 
0x5021837b  # ret 0x118b; 
0x5021c937  # ret 0x1773; 
0x50217664  # ret 0x1774; 
0x50210736  # ret 0x188; 
0x502152f5  # ret 0x1b77; 
0x5021a733  # ret 0x202c; 
0x50216476  # ret 0x2e76; 
0x5021d8a4  # ret 0x2eb; 
0x50213739  # ret 0x3174; 
0x502136be  # ret 0x3474; 
0x502164a1  # ret 0x3b41; 
0x50214f61  # ret 0x3eb; 
0x5021a6e7  # ret 0x40f6; 
0x5021603f  # ret 0x432b; 
0x50211c53  # ret 0x443a; 
0x50212ca2  # ret 0x4589; 
0x5021b78c  # ret 0x4600; 
0x5021f34c  # ret 0x472; 
0x50210640  # ret 0x4804; 
0x5021ebde  # ret 0x4848; 
0x50218c7c  # ret 0x4eb; 
0x50210e56  # ret 0x4f04; 
0x502160bc  # ret 0x4f8b; 
0x50212de7  # ret 0x5150; 
0x5021dd87  # ret 0x5589; 
0x50211ebe  # ret 0x558b; 
0x5021c2f6  # ret 0x5beb; 
0x50211fc1  # ret 0x5f; 
0x50212668  # ret 0x7401; 
0x5021fa2a  # ret 0x7402; 
0x50217ce6  # ret 0x7403; 
0x5021fa19  # ret 0x7408; 
0x5021fa07  # ret 0x7410; 
0x5021d118  # ret 0x7589; 
0x5021649d  # ret 0x776; 
0x502106ab  # ret 0x788; 
0x50215e22  # ret 0x7d83; 
0x5021c931  # ret 0x800; 
0x50217ff2  # ret 0x8104; 
0x50211492  # ret 0x8304; 
0x502152d9  # ret 0x830a; 
0x502151aa  # ret 0x830b; 
0x5021b77c  # ret 0x8346; 
0x502102b6  # ret 0x840f; 
0x5021cb10  # ret 0x850f; 
0x5021ba71  # ret 0x860f; 
0x5021f965  # ret 0x8820; 
0x50216493  # ret 0x8904; 
0x502118fe  # ret 0x8908; 
0x50213538  # ret 0x892a; 
0x5021577d  # ret 0x8948; 
0x5021a97a  # ret 0x8950; 
0x50212f12  # ret 0x8966; 
0x5021474c  # ret 0x89f3; 
0x502146c2  # ret 0x89f4; 
0x502145cc  # ret 0x89f5; 
0x5021517c  # ret 0x89f7; 
0x502155aa  # ret 0x8b48; 
0x50212e71  # ret 0x8b52; 
0x5021e07a  # ret 0x8ba5; 
0x502176b3  # ret 0x8de9; 
0x50217671  # ret 0xa74; 
0x5021265e  # ret 0xb1e9; 
0x5021ad15  # ret 0xb5ff; 
0x502186f7  # ret 0xb60f; 
0x5021cab7  # ret 0xb9; 
0x5021a73c  # ret 0xbe0f; 
0x502179af  # ret 0xbeb; 
0x5021ee69  # ret 0xc002; 
0x50216091  # ret 0xc085; 
0x50212c34  # ret 0xc32b; 
0x50218df1  # ret 0xc483; 
0x5021f647  # ret 0xc681; 
0x5021aa02  # ret 0xc720; 
0x5021ce87  # ret 0xc774; 
0x5021f3ba  # ret 0xc781; 
0x5021fd98  # ret 0xc88b; 
0x5021ed52  # ret 0xca23; 
0x5021f95e  # ret 0xcafe; 
0x5021fb55  # ret 0xcf23; 
0x50219e14  # ret 0xd0f7; 
0x5021286c  # ret 0xd18b; 
0x5021db61  # ret 0xd233; 
0x50211ee8  # ret 0xd38b; 
0x50211edf  # ret 0xd83b; 
0x5021925b  # ret 0xd88b; 
0x5021eeb6  # ret 0xd8f7; 
0x502103a8  # ret 0xe78; 
0x502103b8  # ret 0xe79; 
0x5021039b  # ret 0xe7a; 
0x5021038e  # ret 0xe7c; 
0x5021a7a4  # ret 0xe883; 
0x50213c5b  # ret 0xe8c1; 
0x50219e56  # ret 0xe8d1; 
0x50215d8d  # ret 0xe948; 
0x50215e1a  # ret 0xeb48; 
0x50211279  # ret 0xebfc; 
0x50214ebf  # ret 0xf08b; 
0x50216458  # ret 0xf32b; 
0x5021d529  # ret 0xf46; 
0x5021fc12  # ret 0xf633; 
0x5021f9f4  # ret 0xf75e; 
0x5021a9cd  # ret 0xf883; 
0x502115b5  # ret 0xf8c1; 
0x50211139  # ret 0xf8d1; 
0x50217d61  # ret 0xfbc1; 
0x50212560  # ret 0xfe3d; 
0x5021b7fc  # ret 0xfe7d; 
0x502145e1  # ret 0xfeff; 
0x50211453  # ret 0xff04; 
0x5021c51a  # ret 0xff52; 
0x50214eca  # ret 0xffee; 
0x50216d97  # ret 0xfffe; 
0x5021ee95  # ret 0xffff; 
0x50210185  # ret; 
0x5021647a  # retf 0x2bff; push ebp; cmp byte ptr [ebx], al; ret 0x558b; 
0x5021126d  # retf 0x4d2b; or byte ptr [ebx - 0x7d], dl; stc; add edx, dword ptr [esi + 0x7e]; xor al, 0x83; ret 0xebfc; 
0x5021c2f3  # retf 0x8bff; ret 0x5beb; 
0x5021fade  # retf 0xf601; ret; 
0x5021fad6  # retf 0xf602; ret; 
0x5021face  # retf 0xf604; ret; 
0x5021fac6  # retf 0xf608; ret; 
0x502137bc  # retf; add byte ptr [eax], al; add byte ptr [eax - 0x7af0cec8], al; ret 0; 
0x5021db63  # rol byte ptr [eax - 0x172ce01f], cl; ret; 
0x5021de8f  # rol byte ptr [eax], 0; add eax, 0x4000; pop ebp; ret; 
0x502134a2  # rol byte ptr [ebx - 0x6bf0fb02], cl; ret 0x8b52; 
0x50212e6b  # rol byte ptr [ebx - 0x6bf0fb05], cl; ret 0x8b52; 
0x50214bb9  # rol dword ptr [ebx], 0xc0; dec dword ptr [esp + 8]; cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x5021dfb5  # rol dword ptr [ebx], 1; ret 0xf8c1; 
0x5021837f  # rol dword ptr [ecx + ebp*4], 0; add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x5021d89e  # ror dword ptr [eax - 0x74fb81e2], cl; ret 0x2eb; 
0x50217efb  # ror dword ptr [ecx - 0x75], 0xc1; pop esi; pop ebp; ret; 
0x50217fd5  # sal byte ptr [ebp + 5], 0x6a; sbb bl, byte ptr [eax + 0x5e]; ret; 
0x5021c03a  # sal byte ptr [ebp + eax - 0x7d], 0xf8; add dword ptr [ebp - 0x29], esi; xor eax, eax; pop ebp; ret; 
0x50217675  # sal byte ptr [ebp - 0xd], 0x5e; pop ebx; pop edi; xor eax, eax; ret; 
0x5021ffc0  # sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x5021db6b  # sal byte ptr [ebx], 0xd2; ret; 
0x5021c21c  # sal byte ptr [ecx + ecx + 0x50], 0xe8; ret; 
0x5021ffb9  # sal byte ptr [edx + ecx + 0x3d], 0x1d; add byte ptr [eax], al; sal byte ptr [ebx + eax + 0x33], 0xc0; ret; 
0x50218389  # sal byte ptr [esp + esi - 0x7c], cl; div byte ptr [edi - 9]; ret 0; 
0x5021fab7  # sal dh, cl; ret; 
0x5021fa91  # sal dword ptr [ebp + 0xf], 1; or eax, 0x8000; ret; 
0x5021dc24  # salc; pop esi; ret; 
0x50214bbb  # sar bh, 0x4c; and al, 8; cmp dword ptr [esp + 8], 0; jg 0x14bad; shr eax, 1; ret; 
0x50213737  # sar byte ptr [ebx], cl; ret 0x3174; 
0x5021c514  # sar byte ptr [ecx], cl; pop ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x50214ba2  # sar dh, 0xc0; pop esi; mov byte ptr [ecx + 0x1c], al; pop ebx; ret; 
0x502137a2  # sbb al, 0; pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x502138bd  # sbb al, 0x3b; ret; 
0x50214ba8  # sbb al, 0x5b; ret; 
0x5021bf78  # sbb al, 0x5d; ret; 
0x50212741  # sbb al, 0x5f; pop esi; pop ebx; leave; ret; 
0x50219bfb  # sbb al, 0x89; dec eax; adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x502154d0  # sbb al, 0x89; pop esi; and byte ptr [ebx], bh; ret; 
0x50214ba1  # sbb al, al; inc al; pop esi; mov byte ptr [ecx + 0x1c], al; pop ebx; ret; 
0x5021ead9  # sbb al, byte ptr [ebx + 0x7319b47d]; or bh, bh; inc ebp; mov ah, 0x2a; ret; 
0x5021b7fa  # sbb al, ch; ret 0xfe7d; 
0x50217fd9  # sbb bl, byte ptr [eax + 0x5e]; ret; 
0x5021c6bc  # sbb byte ptr [ebx + 0x5e5fffc8], al; pop ebx; pop ebp; ret; 
0x5021311e  # sbb byte ptr [ebx], dh; rol byte ptr [ebx - 0x6bf0fb02], cl; ret 0x8b52; 
0x5021fdad  # sbb byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x502177b3  # sbb cl, byte ptr [ecx]; add byte ptr [eax], al; pop ecx; ret; 
0x50218c78  # sbb dh, byte ptr [ebp + ecx - 0x75]; ret 0x4eb; 
0x50216d89  # sbb dword ptr [edi + 0x11], esi; add eax, -0x20; pop ebp; ret; 
0x5021e411  # sbb dword ptr [edi + 0x5b], ebx; leave; ret; 
0x50215557  # sbb eax, 0x3002783; ret; 
0x50218d9a  # sbb eax, 0x75ff5057; or al, 0xe8; ret; 
0x5021de8b  # sbb eax, eax; and eax, 0xc000; add eax, 0x4000; pop ebp; ret; 
0x5021da66  # sbb edi, dword ptr [ecx - 2]; dec ecx; ret; 
0x5021db46  # sbb edx, 0; pop ebp; pop esi; pop edi; ret 0x10; 
0x5021d581  # sete cl; mov eax, ecx; ret; 
0x50217ef9  # setne cl; dec ecx; mov eax, ecx; pop esi; pop ebp; ret; 
0x50216d8d  # shl al, 0x5d; ret; 
0x50218102  # shl byte ptr [eax], 0x50; call dword ptr [0x50220084]; pop ebp; ret; 
0x502180c6  # shl byte ptr [eax], 0x50; call dword ptr [0x50220088]; pop ebp; ret; 
0x5021fb53  # shl byte ptr [ebx], 1; ret 0xcf23; 
0x50217fef  # shl dword ptr [eax], 0x83; ret 0x8104; 
0x50213d22  # shl eax, 0x10; or eax, esi; pop edi; pop esi; pop ebp; ret; 
0x5021c7f3  # shl eax, 6; lea eax, [ecx + eax + 0xc]; push eax; call dword ptr [0x50220084]; pop ebp; ret; 
0x5021c3ba  # shl eax, 6; movsx eax, byte ptr [ecx + eax + 4]; and eax, 0x40; pop esi; pop ebp; ret; 
0x50217304  # shr bl, 2; mov eax, edi; cld; pop edi; leave; ret; 
0x502181e4  # shr bl, 2; xor eax, eax; pop esi; pop ebp; ret; 
0x50212a76  # shr bl, 3; push -2; pop eax; pop edi; pop esi; ret; 
0x50214bc7  # shr eax, 1; ret; 
0x5021db67  # shr eax, cl; ret; 
0x5021db5d  # shr edx, cl; ret; 
0x5021db5a  # shrd eax, edx, cl; shr edx, cl; ret; 
0x50211273  # stc; add edx, dword ptr [esi + 0x7e]; xor al, 0x83; ret 0xebfc; 
0x5021db56  # stc; and byte ptr [ebx + 6], dh; shrd eax, edx, cl; shr edx, cl; ret; 
0x50216d88  # stc; sbb dword ptr [edi + 0x11], esi; add eax, -0x20; pop ebp; ret; 
0x5021b510  # std; leave; ret; 
0x5021873c  # std; mov eax, dword ptr [ebp - 4]; pop esi; pop ebx; leave; ret; 
0x5021b1f4  # std; mov eax, edi; pop edi; pop esi; pop ebp; ret; 
0x50216d6f  # std; pop ebx; leave; ret; 
0x5021d634  # std; pop edi; pop esi; pop ebx; leave; ret; 
0x50218cb5  # std; pop esi; pop ebx; leave; ret; 
0x50212e6d  # sti; add al, 0xf; xchg esp, eax; ret 0x8b52; 
0x5021b3e2  # stosb byte ptr es:[edi], al; add byte ptr [eax], al; add byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x50215d96  # sub al, 0x2b; ret 0x10e9; 
0x502160de  # sub al, 0x2b; ret 0x3eb; 
0x502160ba  # sub al, 0x2b; ret 0x4f8b; 
0x5021608f  # sub al, 0x2b; ret 0xc085; 
0x502131c5  # sub al, 0x8b; dec edi; cmp byte ptr [ebx], ah; ret 0x8966; 
0x502162b3  # sub bh, bh; push eax; and al, 0x59; pop ecx; ret; 
0x5021c217  # sub byte ptr [eax], al; and dl, byte ptr [eax - 0x7b]; sal byte ptr [ecx + ecx + 0x50], 0xe8; ret; 
0x50216a80  # sub byte ptr [ebx], bh; ret; 
0x5021dbeb  # sub byte ptr [edx], ah; push eax; call dword ptr [0x5022010c]; mov dword ptr [0x50227484], eax; ret; 
0x5021261b  # sub eax, 0xc581ffff; mov byte ptr [ecx], al; add byte ptr [eax], al; leave; ret; 
0x5021b5a3  # test ah, 0x41; jp 0x1b5ad; xor eax, eax; inc eax; pop ebp; ret; 
0x5021bfd6  # test ah, 5; jp 0x1bfe0; xor eax, eax; inc eax; leave; ret; 
0x50213d84  # test al, 0x16; add byte ptr [eax], al; mov dword ptr [eax + 0x1698], ecx; pop esi; ret; 
0x502180fb  # test al, 0xfe; call ptr [ecx + 0x5d]; ret; 
0x502137bb  # test bl, cl; add byte ptr [eax], al; add byte ptr [eax - 0x7af0cec8], al; ret 0; 
0x50218107  # test byte ptr [eax], al; and dl, byte ptr [eax + 0x5d]; ret; 
0x502103a2  # test byte ptr [ebx - 0x7e2ed42d], cl; ret 0xe78; 
0x50219430  # test byte ptr [edi + 0x6a000000], dl; add byte ptr [ebp - 0x1ad37b], cl; call dword ptr [eax - 0x75]; ret; 
0x5021dbf5  # test byte ptr [edx + 0x50], dh; ret; 
0x50216422  # test cl, ah; add dword ptr [eax], eax; add byte ptr [ebx + 0x4dff5045], cl; cmp byte ptr [ebx], al; ret; 
0x50219438  # test dword ptr [0x8b50ffff], ebp; ret; 
0x502130ff  # test dword ptr [edx + 0x33fffffd], edi; rcr byte ptr [edi + 0x5e], 0x5d; pop ebx; ret; 
0x5021a9fc  # test dword ptr [edx - 0x7ffffffb], edx; ret 0xc720; 
0x50214564  # test dword ptr [esi + 0x5ffffffb], esp; pop esi; pop ebx; leave; ret; 
0x5021b604  # test eax, 0x83ffffff; les edx, ptr [eax]; pop ebp; ret; 
0x5021bfff  # test eax, eax; je 0x1c008; push 0; call eax; ret; 
0x50217fd4  # test eax, eax; jne 0x17fdd; push 0x1a; pop eax; pop esi; ret; 
0x5021c015  # test eax, eax; jne 0x1c01e; xor eax, eax; inc eax; pop ebp; ret; 
0x50214d06  # test ebx, ebx; jne 0x14cf0; pop edi; pop ebx; pop ebp; ret; 
0x50212a8f  # test edi, edi; jne 0x12a97; xor eax, eax; pop edi; ret; 
0x502127ef  # test esi, esp; add dword ptr [eax], eax; add byte ptr [ebx - 0x6544fbba], cl; add al, byte ptr [eax]; add byte ptr [ebx], bh; ret; 
0x5021d14d  # ud0; call 0x2705; ret; 
0x5021804d  # xchg byte ptr [edx], dh; add byte ptr [eax], al; push dword ptr [0x50228220]; call 0x186f; pop ecx; ret; 
0x5021f95d  # xchg ebp, eax; ret 0xcafe; 
0x5021c519  # xchg ebp, eax; ret 0xff52; 
0x50217efa  # xchg ebp, eax; ror dword ptr [ecx - 0x75], 0xc1; pop esi; pop ebp; ret; 
0x5021732c  # xchg edx, eax; ret 0xfffe; 
0x502128f6  # xchg esp, eax; add byte ptr [eax], al; add byte ptr [ebx], bh; ret; 
0x50212e70  # xchg esp, eax; ret 0x8b52; 
0x50211848  # xlatb; pop edi; pop esi; pop ebx; leave; ret; 
0x5021c041  # xlatb; xor eax, eax; pop ebp; ret; 
0x50218ded  # xor al, 0; add byte ptr [ebx], ah; ret 0xc483; 
0x50218443  # xor al, 0x3b; add byte ptr [eax], al; fnclex; pop ebp; ret; 
0x50216c1b  # xor al, 0x58; pop edi; pop esi; pop ebx; leave; ret; 
0x50211277  # xor al, 0x83; ret 0xebfc; 
0x5021838b  # xor al, 0x84; div byte ptr [edi - 9]; ret 0; 
0x50219e54  # xor al, 0x8b; ret 0xe8d1; 
0x50218294  # xor al, 0xb0; push esi; call 0x1810d; pop ecx; pop ecx; ret; 
0x50211a2d  # xor al, al; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x5021804e  # xor al, byte ptr [eax]; add bh, bh; xor eax, 0x50228220; call 0x186f; pop ecx; ret; 
0x5021546e  # xor bh, bh; call ptr [ecx + 0x59]; ret; 
0x502168e7  # xor byte ptr [ebx + 0x5b5e1045], cl; leave; ret; 
0x5021cac7  # xor byte ptr [ebx], bh; ret; 
0x502154e5  # xor byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x50218385  # xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x50218052  # xor eax, 0x50228220; call 0x186f; pop ecx; ret; 
0x5021479b  # xor eax, 0x5ffffff9; pop esi; pop ebx; leave; ret; 
0x50217cb8  # xor eax, 0xc4830000; or al, 0x3b; ret; 
0x502174ab  # xor eax, eax; call 0x2705; ret; 
0x5021bfdb  # xor eax, eax; inc eax; leave; ret; 
0x5021b5a8  # xor eax, eax; inc eax; pop ebp; ret; 
0x50216ecf  # xor eax, eax; inc eax; ret; 
0x5021bfe0  # xor eax, eax; leave; ret; 
0x50216c4e  # xor eax, eax; pop ebp; ret; 
0x5021bc1d  # xor eax, eax; pop ebx; pop edi; pop esi; leave; ret; 
0x5021866a  # xor eax, eax; pop edi; pop ebx; pop esi; leave; ret; 
0x50213104  # xor eax, eax; pop edi; pop esi; pop ebp; pop ebx; ret; 
0x50219837  # xor eax, eax; pop edi; pop esi; pop ebp; ret; 
0x50217343  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret; 
0x5021d918  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x50212e4c  # xor eax, eax; pop edi; pop esi; pop ebx; ret; 
0x50212a93  # xor eax, eax; pop edi; ret; 
0x502181e7  # xor eax, eax; pop esi; pop ebp; ret; 
0x5021c4b5  # xor eax, eax; pop esi; pop ebx; leave; ret; 
0x5021c176  # xor eax, eax; pop esi; pop edi; pop ebx; leave; ret; 
0x50213553  # xor eax, eax; pop esi; ret; 
0x50216ed3  # xor eax, eax; ret; 
0x5021db6a  # xor eax, eax; xor edx, edx; ret; 
0x5021c7ce  # xor ebx, ebx; mov edi, dword ptr [ebp + 8]; push 0xa; call 0x29e4; pop ecx; ret; 
0x50212616  # xor ecx, ebp; pop ebx; call 0x5385; add ebp, 0x188; leave; ret; 
0x502108d6  # xor ecx, ebp; pop ebx; call 0x5385; leave; ret; 
0x5021955e  # xor ecx, ebp; pop esi; call 0x5385; leave; ret; 
0x50214bfa  # xor ecx, ecx; and dword ptr [eax + 0x16b4], ecx; mov word ptr [eax + 0x16b0], cx; pop ebx; ret; 
0x5021d579  # xor ecx, ecx; cmp dword ptr [0x50228214], eax; sete cl; mov eax, ecx; ret; 
0x50212762  # xor edi, edi; inc eax; adc al, 0x5f; pop esi; ret; 
0x5021db62  # xor edx, edx; and cl, 0x1f; shr eax, cl; ret; 
0x5021db6c  # xor edx, edx; ret; 
0x1001034c  # aaa; pop edi; pop esi; mov al, 1; pop ebx; ret; 
0x10017b29  # aam 0x8b; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10019ad7  # aam 3; ret 0x4d8b; 
0x10014e71  # adc al, 0; add byte ptr [ecx + 0x1002900c], ah; pop ebp; ret; 
0x10016b30  # adc al, 0x2b; inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x10016e26  # adc al, 0x2b; inc ebp; hlt; mov esp, ebp; pop ebp; ret; 
0x10015aa7  # adc al, 0x81; mov eax, dword ptr [edx + 4]; mov esp, ebp; pop ebp; ret; 
0x1001494e  # adc al, 0x81; ret 0x76c; 
0x100128c4  # adc al, 0x89; add cl, byte ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001290e  # adc al, 0x89; add dword ptr [ebx - 0x1a7403bb], ecx; pop ebp; ret; 
0x100197c0  # adc al, 0x89; add ecx, ebp; cmp ch, 0xff; dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x10014fed  # adc al, 0x8b; in eax, 0x5d; ret; 
0x10012c6f  # adc al, 0x8b; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x100128c1  # adc al, 0x8b; push ebp; adc al, 0x89; add cl, byte ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10014f66  # adc al, 2; add byte ptr [eax], al; add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x10018cb8  # adc al, ch; pop es; add byte ptr [eax], al; add byte ptr [ebx - 0x1a74f33c], al; pop ebp; ret; 
0x1001255f  # adc bl, ch; add ecx, dword ptr [ebx - 0x1a74f3bb]; pop ebp; ret; 
0x10016473  # adc byte ptr [eax - 0x3fcceffe], dl; mov esp, ebp; pop ebp; ret; 
0x10011d65  # adc byte ptr [eax], al; pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x10014e6a  # adc byte ptr [ebp - 0x17fa8a40], al; fcom qword ptr [eax + eax]; add byte ptr [ecx + 0x1002900c], ah; pop ebp; ret; 
0x10014d83  # adc byte ptr [ebp - 0x17fa8a40], al; ret; 
0x10015aa5  # adc byte ptr [ebx + 0x428b8114], cl; add al, 0x8b; in eax, 0x5d; ret; 
0x10012dc2  # adc byte ptr [ebx + 0x458b04c4], al; cld; mov esp, ebp; pop ebp; ret; 
0x10016345  # adc byte ptr [ebx - 0x1a74fb3c], al; pop ebp; ret; 
0x10016813  # adc byte ptr [ebx - 0x3fccfb3c], al; mov esp, ebp; pop ebp; ret; 
0x100125a0  # adc byte ptr [ebx - 0x3fccfb3c], al; pop ebp; ret; 
0x100168dc  # adc byte ptr [ebx - 0x3fccfb3c], al; pop esi; mov esp, ebp; pop ebp; ret; 
0x1001803b  # adc byte ptr [ebx], al; ret 0x7ceb; 
0x10014944  # adc byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [ebx + 0x518b084d], cl; adc al, 0x81; ret 0x76c; 
0x10010113  # adc byte ptr [edi + 0x5e], bl; pop ebp; pop ebx; add esp, 0x84; ret; 
0x1001079c  # adc byte ptr [edi - 0x39740001], 0x5e; ret; 
0x10011e2b  # adc byte ptr [edx + 1], ch; pop eax; ret 0xc; 
0x1001bfbc  # adc cl, ch; ret; 
0x10016774  # adc dh, al; inc edx; inc dword ptr [eax]; xor eax, eax; pop ebp; ret; 
0x1001bfb4  # adc dword ptr [ebx + 0x458b01c2], eax; or al, 0x89; adc cl, ch; ret; 
0x10017f75  # adc dword ptr [ebx - 0x1a7407bb], ecx; pop ebp; ret; 
0x100180a8  # adc dword ptr [ebx], eax; ret 0xfeb; 
0x10018940  # adc dword ptr [ebx], ebp; ret 0x4589; 
0x100184d3  # adc dword ptr [ebx], ebp; ret 0x5beb; 
0x1001875d  # adc dword ptr [ebx], ebp; ret 0x6feb; 
0x10017bfd  # adc dword ptr [ebx], edi; ret 0x1774; 
0x10011e9c  # adc dword ptr [ebx], edi; ret 0x6775; 
0x10011e27  # adc eax, 0x1001f01c; push 1; pop eax; ret 0xc; 
0x10010287  # adc eax, 0x1001f03c; mov al, 1; add esp, 0x80; ret; 
0x10016341  # adc eax, 0x1001f0e4; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x1001259c  # adc eax, 0x1001f0e4; add esp, 4; xor eax, eax; pop ebp; ret; 
0x10014e52  # adc eax, 0x10029008; mov dword ptr [0x1002900c], edx; xor eax, eax; pop ebp; ret; 
0x10014e58  # adc eax, 0x1002900c; xor eax, eax; pop ebp; ret; 
0x10016472  # adc eax, 0x10029010; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x1001d35b  # adc ebx, ebp; add eax, 0xfffa4de9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001a9d7  # adc ebx, ebp; add eax, 0xfffabae9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001c482  # adc ebx, ebp; add eax, 0xfffad6e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001d722  # adc ebx, ebp; add eax, 0xfffc5ce9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001befa  # adc ebx, ebp; add eax, 0xfffc6be9; dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x1001ad4a  # adc ebx, ebp; add eax, 0xfffcb7e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001cd44  # adc ebx, ebp; add eax, 0xfffcd4e9; dec dword ptr [ebx - 0x1a740fbb]; pop ebp; ret; 
0x10019ef0  # adc ebx, ebp; add eax, 0xfffd70e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10016a2b  # add al, 0; add byte ptr [eax], al; sub eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x100168df  # add al, 0x33; rcr byte ptr [esi - 0x75], 0xe5; pop ebp; ret; 
0x10015a3d  # add al, 0x33; shr bl, 3; mov eax, dword ptr [ebp - 0x48]; mov esp, ebp; pop ebp; ret; 
0x10011b9c  # add al, 0x50; ret; 
0x10012927  # add al, 0x5d; ret; 
0x100102ca  # add al, 0x5e; ret; 
0x10010203  # add al, 0x81; in al, dx; add byte ptr [eax], 0; add byte ptr [ebp + 0x320975c0], al; rol byte ptr [ecx + 0x80c4], 0; ret; 
0x10010fc9  # add al, 0x85; sal byte ptr [ebp + ecx - 0x39], 0; add byte ptr [eax], al; add byte ptr [eax], al; mov dword ptr [eax + 4], 0; ret; 
0x10014ce5  # add al, 0x8b; in eax, 0x5d; ret; 
0x10012dc5  # add al, 0x8b; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10012482  # add al, 0xeb; iretd; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10011e25  # add al, 0xff; adc eax, 0x1001f01c; push 1; pop eax; ret 0xc; 
0x10017ca6  # add al, byte ptr [eax]; add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x10014f67  # add al, byte ptr [eax]; add byte ptr [ebx - 0x1a74ef3c], al; pop ebp; ret; 
0x10019950  # add al, byte ptr [ecx + 0xffe2]; add byte ptr [ebx], al; ret 0xc06b; 
0x10011ed2  # add bh, byte ptr [ebx]; ret 0x2775; 
0x10010e8f  # add byte ptr [eax + 0x56], dl; call 0x10f60; add esp, 0x10; pop esi; ret; 
0x100111df  # add byte ptr [eax + 0x56], dl; call 0x11270; add esp, 0x10; pop esi; ret; 
0x100114cf  # add byte ptr [eax + 0x56], dl; call 0x11620; add esp, 0x10; pop esi; ret; 
0x1001189f  # add byte ptr [eax + 0x56], dl; call 0x11990; add esp, 0x10; pop esi; ret; 
0x10016194  # add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x10010206  # add byte ptr [eax], 0; add byte ptr [ebp + 0x320975c0], al; rol byte ptr [ecx + 0x80c4], 0; ret; 
0x10016192  # add byte ptr [eax], al; add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x10010fd0  # add byte ptr [eax], al; add byte ptr [eax], al; mov dword ptr [eax + 4], 0; ret; 
0x10016191  # add byte ptr [eax], al; add byte ptr [eax], al; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x10012f15  # add byte ptr [eax], al; add byte ptr [eax], al; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x1001018a  # add byte ptr [eax], al; add byte ptr [eax], al; pop edi; xor eax, eax; pop esi; ret; 
0x10010fd7  # add byte ptr [eax], al; add byte ptr [eax], al; ret; 
0x100164f5  # add byte ptr [eax], al; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x10010207  # add byte ptr [eax], al; add byte ptr [ebp + 0x320975c0], al; rol byte ptr [ecx + 0x80c4], 0; ret; 
0x10015ead  # add byte ptr [eax], al; add byte ptr [ebx + 0x458b0cc4], al; clc; mov esp, ebp; pop ebp; ret; 
0x10014946  # add byte ptr [eax], al; add byte ptr [ebx + 0x518b084d], cl; adc al, 0x81; ret 0x76c; 
0x10012f16  # add byte ptr [eax], al; add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x10016bad  # add byte ptr [eax], al; add byte ptr [ebx - 0x1a74ef3c], al; pop ebp; ret; 
0x10018cbb  # add byte ptr [eax], al; add byte ptr [ebx - 0x1a74f33c], al; pop ebp; ret; 
0x10010773  # add byte ptr [eax], al; add byte ptr [ebx - 0x3974f73c], al; pop esi; ret; 
0x1001650f  # add byte ptr [eax], al; add byte ptr [ebx - 0x3fccf33c], al; pop ebp; ret; 
0x100166ec  # add byte ptr [eax], al; add byte ptr [ebx - 0x3fccf73c], al; mov esp, ebp; pop ebp; ret; 
0x10019954  # add byte ptr [eax], al; add byte ptr [ebx], al; ret 0xc06b; 
0x1001652a  # add byte ptr [eax], al; add cl, ch; ret 1; 
0x1001b512  # add byte ptr [eax], al; add cl, ch; ret; 
0x10014f68  # add byte ptr [eax], al; add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x10010e95  # add byte ptr [eax], al; add esp, 0x10; pop esi; ret; 
0x10015eae  # add byte ptr [eax], al; add esp, 0xc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10018cbc  # add byte ptr [eax], al; add esp, 0xc; mov esp, ebp; pop ebp; ret; 
0x10016510  # add byte ptr [eax], al; add esp, 0xc; xor eax, eax; pop ebp; ret; 
0x10014ce1  # add byte ptr [eax], al; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10018b2a  # add byte ptr [eax], al; add esp, 8; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10010774  # add byte ptr [eax], al; add esp, 8; mov eax, esi; pop esi; ret; 
0x1001547c  # add byte ptr [eax], al; add esp, 8; mov esp, ebp; pop ebp; ret; 
0x10010edd  # add byte ptr [eax], al; add esp, 8; test eax, eax; setne al; ret; 
0x100166ed  # add byte ptr [eax], al; add esp, 8; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10010fd2  # add byte ptr [eax], al; mov dword ptr [eax + 4], 0; ret; 
0x10016193  # add byte ptr [eax], al; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x10014e72  # add byte ptr [eax], al; mov eax, dword ptr [0x1002900c]; pop ebp; ret; 
0x10012e03  # add byte ptr [eax], al; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10019084  # add byte ptr [eax], al; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191f8  # add byte ptr [eax], al; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x1001051f  # add byte ptr [eax], al; mov esi, eax; call 0x9f20; mov eax, esi; pop esi; ret; 
0x10014c96  # add byte ptr [eax], al; mov esp, ebp; pop ebp; ret; 
0x1001018c  # add byte ptr [eax], al; pop edi; xor eax, eax; pop esi; ret; 
0x1001011c  # add byte ptr [eax], al; ret; 
0x10016a2d  # add byte ptr [eax], al; sub eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x10010208  # add byte ptr [eax], al; test eax, eax; jne 0x10217; xor al, al; add esp, 0x80; ret; 
0x100164f7  # add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x10018b2b  # add byte ptr [ebx + 0x458b08c4], al; clc; mov esp, ebp; pop ebp; ret; 
0x10015eaf  # add byte ptr [ebx + 0x458b0cc4], al; clc; mov esp, ebp; pop ebp; ret; 
0x10014948  # add byte ptr [ebx + 0x518b084d], cl; adc al, 0x81; ret 0x76c; 
0x10011b53  # add byte ptr [ebx + 0x5e], bl; pop edi; ret 0x10; 
0x10010543  # add byte ptr [ebx + 0x75ff85f8], cl; add ebx, dword ptr [edi + 0x5e]; ret; 
0x10012e04  # add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x100170c7  # add byte ptr [ebx - 0x1a74ebbb], cl; pop ebp; ret; 
0x10014f69  # add byte ptr [ebx - 0x1a74ef3c], al; pop ebp; ret; 
0x10018cbd  # add byte ptr [ebx - 0x1a74f33c], al; pop ebp; ret; 
0x1001547d  # add byte ptr [ebx - 0x1a74f73c], al; pop ebp; ret; 
0x10014ce2  # add byte ptr [ebx - 0x1a74fb3c], al; pop ebp; ret; 
0x10010775  # add byte ptr [ebx - 0x3974f73c], al; pop esi; ret; 
0x10017d7c  # add byte ptr [ebx - 0x3d7cf7ab], cl; add cl, byte ptr [ecx - 0x2214f7ab]; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10010ede  # add byte ptr [ebx - 0x3f7af73c], al; setne al; ret; 
0x10016511  # add byte ptr [ebx - 0x3fccf33c], al; pop ebp; ret; 
0x100166ee  # add byte ptr [ebx - 0x3fccf73c], al; mov esp, ebp; pop ebp; ret; 
0x10011555  # add byte ptr [ebx - 0xf74fb3c], al; call 0x9f20; mov eax, esi; pop esi; ret; 
0x10019956  # add byte ptr [ebx], al; ret 0xc06b; 
0x10014e73  # add byte ptr [ecx + 0x1002900c], ah; pop ebp; ret; 
0x10011d66  # add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x10011a9c  # add byte ptr [edi + 0x5b], bl; ret 0x10; 
0x10018034  # add byte ptr [edi], cl; mov esi, 0x295a091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x10018126  # add byte ptr [edi], cl; mov esi, 0x29a8091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x100149ac  # add byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x10012e02  # add byte ptr es:[eax], al; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x1001e41e  # add ch, bl; add eax, 0xfffbd1e9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x10014e23  # add cl, byte ptr [ebx + 0x18b084d]; mov esp, ebp; pop ebp; ret; 
0x100128c6  # add cl, byte ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10017b11  # add cl, byte ptr [ebx - 0x3e7cf7b3]; add cl, byte ptr [ecx + 0x558b084d]; or al, 0x83; ret 0x8902; 
0x10017b17  # add cl, byte ptr [ecx + 0x558b084d]; or al, 0x83; ret 0x8902; 
0x10017d82  # add cl, byte ptr [ecx - 0x2214f7ab]; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x100180f5  # add cl, byte ptr [ecx - 0x2f1403ab]; mov eax, dword ptr [ebp + 0xc]; mov esp, ebp; pop ebp; ret; 
0x1001652c  # add cl, ch; ret 1; 
0x1001b514  # add cl, ch; ret; 
0x100164f3  # add dl, byte ptr [eax]; add byte ptr [eax], al; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x10011d64  # add dl, byte ptr [eax]; add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x10018cb7  # add dl, byte ptr [eax]; call 0x18cc5; add esp, 0xc; mov esp, ebp; pop ebp; ret; 
0x10014e55  # add dl, byte ptr [eax]; mov dword ptr [0x1002900c], edx; xor eax, eax; pop ebp; ret; 
0x10014e98  # add dl, byte ptr [eax]; mov dword ptr [ebp + 8], ecx; mov eax, dword ptr [ebp + 8]; add eax, 6; pop ebp; ret; 
0x10015aa4  # add dl, byte ptr [eax]; mov edx, dword ptr [ecx + eax*4]; mov eax, dword ptr [edx + 4]; mov esp, ebp; pop ebp; ret; 
0x10011f10  # add dl, byte ptr [eax]; mov esp, ebp; pop ebp; ret; 
0x10014e77  # add dl, byte ptr [eax]; pop ebp; ret; 
0x10016475  # add dl, byte ptr [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10014e5b  # add dl, byte ptr [eax]; xor eax, eax; pop ebp; ret; 
0x1001a85c  # add dword ptr [eax], 0x55880000; ret 0x458b; 
0x10014c94  # add dword ptr [eax], eax; add byte ptr [eax], al; mov esp, ebp; pop ebp; ret; 
0x100149aa  # add dword ptr [eax], eax; add byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x10012dc1  # add dword ptr [eax], edx; add esp, 4; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10016344  # add dword ptr [eax], edx; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10012923  # add dword ptr [eax], edx; add esp, 4; pop ebp; ret; 
0x10016812  # add dword ptr [eax], edx; add esp, 4; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x1001259f  # add dword ptr [eax], edx; add esp, 4; xor eax, eax; pop ebp; ret; 
0x1001028a  # add dword ptr [eax], edx; mov al, 1; add esp, 0x80; ret; 
0x10011e2a  # add dword ptr [eax], edx; push 1; pop eax; ret 0xc; 
0x10012910  # add dword ptr [ebx - 0x1a7403bb], ecx; pop ebp; ret; 
0x100180ef  # add dword ptr [ebx - 0x3d7c03ab], ecx; add cl, byte ptr [ecx - 0x2f1403ab]; mov eax, dword ptr [ebp + 0xc]; mov esp, ebp; pop ebp; ret; 
0x10011b95  # add dword ptr [ebx - 0x74f7741f], ecx; inc eax; add al, 0x50; ret; 
0x10017a85  # add dword ptr [ecx - 0x1f1403bb], ecx; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10017ac7  # add dword ptr [ecx - 0x2f1403ab], ecx; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x100110e1  # add dword ptr [edi + 0x5e], ebx; pop ebx; ret; 
0x100103ef  # add dword ptr [edi + 0x5e], ebx; ret; 
0x10014e6e  # add eax, 0x14dce8; add byte ptr [ecx + 0x1002900c], ah; pop ebp; ret; 
0x10017c31  # add eax, 0x458b9ceb; clc; mov esp, ebp; pop ebp; ret; 
0x10010539  # add eax, 0x5ec0335f; ret; 
0x10010128  # add eax, 0x5effc883; ret; 
0x10017c2c  # add eax, 0xebf8458b; add eax, 0x458b9ceb; clc; mov esp, ebp; pop ebp; ret; 
0x10016a24  # add eax, 0xebffc883; or byte ptr [eax + 4], bh; sub eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x1001051e  # add eax, 0xf08b0000; call 0x9f20; mov eax, esi; pop esi; ret; 
0x1001d35d  # add eax, 0xfffa4de9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001a9d9  # add eax, 0xfffabae9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001c484  # add eax, 0xfffad6e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10019c38  # add eax, 0xfffbe8e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001d724  # add eax, 0xfffc5ce9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001befc  # add eax, 0xfffc6be9; dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x1001dcfa  # add eax, 0xfffcaae9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x1001ad4c  # add eax, 0xfffcb7e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001cd46  # add eax, 0xfffcd4e9; dec dword ptr [ebx - 0x1a740fbb]; pop ebp; ret; 
0x1001bb2a  # add eax, 0xfffd30e9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x1001c9dd  # add eax, 0xfffd69e9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x10019ef2  # add eax, 0xfffd70e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001b81d  # add eax, 0xfffe04e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001d967  # add eax, 0xfffe0ae9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10014ea0  # add eax, 6; pop ebp; ret; 
0x1001547b  # add eax, dword ptr [eax]; add byte ptr [ebx - 0x1a74f73c], al; pop ebp; ret; 
0x10010549  # add ebx, dword ptr [edi + 0x5e]; ret; 
0x10011cb6  # add ebx, eax; mov eax, dword ptr [esp + 8]; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x100178ce  # add ebx, ebp; mov ecx, 0x8bfc458b; in eax, 0x5d; ret; 
0x10015a41  # add ecx, dword ptr [ebx - 0x1a7447bb]; pop ebp; ret; 
0x10014fea  # add ecx, dword ptr [ebx - 0x1a74ebbb]; pop ebp; ret; 
0x10012561  # add ecx, dword ptr [ebx - 0x1a74f3bb]; pop ebp; ret; 
0x100197c2  # add ecx, ebp; cmp ch, 0xff; dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x100112b9  # add edx, dword ptr [ebx - 0x17a90001]; lea ecx, [esi - 0x3b7c0001]; or al, 0x5e; ret; 
0x10011cbe  # add edx, ebx; pop ebx; ret 0x10; 
0x10014f6a  # add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x10010e97  # add esp, 0x10; pop esi; ret; 
0x10012c6d  # add esp, 0x14; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10010210  # add esp, 0x80; ret; 
0x10010118  # add esp, 0x84; ret; 
0x1001258a  # add esp, 0xc; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10015eb0  # add esp, 0xc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10018cbe  # add esp, 0xc; mov esp, ebp; pop ebp; ret; 
0x10010fb3  # add esp, 0xc; pop esi; ret; 
0x10016512  # add esp, 0xc; xor eax, eax; pop ebp; ret; 
0x10012dc3  # add esp, 4; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10010466  # add esp, 4; mov esi, eax; call 0x9f20; mov eax, esi; pop esi; ret; 
0x10014ce3  # add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10012925  # add esp, 4; pop ebp; ret; 
0x100102c8  # add esp, 4; pop esi; ret; 
0x10010442  # add esp, 4; ret; 
0x10010fc7  # add esp, 4; test eax, eax; je 0x10fdb; mov dword ptr [eax], 0; mov dword ptr [eax + 4], 0; ret; 
0x10016814  # add esp, 4; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x100125a1  # add esp, 4; xor eax, eax; pop ebp; ret; 
0x100168dd  # add esp, 4; xor eax, eax; pop esi; mov esp, ebp; pop ebp; ret; 
0x1001083e  # add esp, 8; dec eax; mov dword ptr [edi + 8], eax; pop edi; pop esi; ret; 
0x100103eb  # add esp, 8; mov al, 1; pop edi; pop esi; ret; 
0x10018b2c  # add esp, 8; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10010499  # add esp, 8; mov eax, esi; pop esi; ret; 
0x10010e6b  # add esp, 8; mov esi, eax; call 0x9f20; mov eax, esi; pop esi; ret; 
0x1001547e  # add esp, 8; mov esp, ebp; pop ebp; ret; 
0x10010edf  # add esp, 8; test eax, eax; setne al; ret; 
0x100166ef  # add esp, 8; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10011c9c  # and al, 0xc; jne 0x11ca9; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x10011c78  # and al, 0xc; neg edx; neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x10011e24  # and al, 4; call dword ptr [0x1001f01c]; push 1; pop eax; ret 0xc; 
0x10011ca2  # and al, 4; mul ecx; ret 0x10; 
0x10010432  # and al, 4; test eax, eax; jne 0x10439; ret; 
0x10010482  # and al, 4; test eax, eax; jne 0x10489; ret; 
0x10010712  # and al, 4; test eax, eax; jne 0x10719; ret; 
0x10010762  # and al, 4; test eax, eax; jne 0x10769; ret; 
0x10010ef2  # and al, 4; test eax, eax; jne 0x10ef9; ret; 
0x10010f12  # and al, 4; test eax, eax; jne 0x10f19; ret; 
0x10011222  # and al, 4; test eax, eax; jne 0x11229; ret; 
0x100115d2  # and al, 4; test eax, eax; jne 0x115d9; ret; 
0x100118f2  # and al, 4; test eax, eax; jne 0x118f9; ret; 
0x10011942  # and al, 4; test eax, eax; jne 0x11949; ret; 
0x100118e2  # and al, 4; xor eax, eax; test ecx, ecx; setne al; ret; 
0x10011cba  # and al, 8; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x10010123  # and al, 8; test esi, esi; jne 0x1012e; or eax, 0xffffffff; pop esi; ret; 
0x1001547a  # and al, byte ptr [ebx]; add byte ptr [eax], al; add esp, 8; mov esp, ebp; pop ebp; ret; 
0x100116fc  # and byte ptr [eax - 0x39740001], cl; pop esi; ret; 
0x10016190  # and byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x10011d60  # and dword ptr [0x1002a1f0], 0; pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x10011d61  # and eax, 0x1002a1f0; add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x100106fd  # bnd call 0x9f20; pop edi; pop esi; pop ebx; ret; 
0x10010494  # call 0x10390; add esp, 8; mov eax, esi; pop esi; ret; 
0x10010771  # call 0x107f0; add esp, 8; mov eax, esi; pop esi; ret; 
0x10010e92  # call 0x10f60; add esp, 0x10; pop esi; ret; 
0x1001168c  # call 0x10fc0; mov esi, eax; call 0x9f20; mov eax, esi; pop esi; ret; 
0x100111e2  # call 0x11270; add esp, 0x10; pop esi; ret; 
0x100114d2  # call 0x11620; add esp, 0x10; pop esi; ret; 
0x10010eda  # call 0x11950; add esp, 8; test eax, eax; setne al; ret; 
0x100118a2  # call 0x11990; add esp, 0x10; pop esi; ret; 
0x10019022  # call 0x11e58; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191bc  # call 0x11e58; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10012585  # call 0x11fe0; add esp, 0xc; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10012c68  # call 0x125b0; add esp, 0x14; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10012cec  # call 0x12657; add esp, 0x14; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10014f65  # call 0x1517e; add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x10015479  # call 0x157a0; add esp, 8; mov esp, ebp; pop ebp; ret; 
0x10014e6f  # call 0x16350; mov eax, dword ptr [0x1002900c]; pop ebp; ret; 
0x10016bab  # call 0x16bb7; add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x10014cde  # call 0x189e0; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10018cb9  # call 0x18cc5; add esp, 0xc; mov esp, ebp; pop ebp; ret; 
0x10019081  # call 0x1e470; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191f5  # call 0x1e470; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10010e42  # call 0x5520; add esp, 4; ret; 
0x10010fa8  # call 0x5560; push esi; call 0xa150; add esp, 0xc; pop esi; ret; 
0x10012beb  # call 0x5de6b6f1; ret; 
0x1001043d  # call 0x6320; add esp, 4; ret; 
0x10011668  # call 0x6360; push esi; call 0xa150; add esp, 0xc; pop esi; ret; 
0x10011192  # call 0x6bb0; add esp, 4; ret; 
0x1001071d  # call 0x8110; add esp, 4; ret; 
0x10019c3a  # call 0x8c019c3a; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x1001046b  # call 0x9f20; mov eax, esi; pop esi; ret; 
0x100106fe  # call 0x9f20; pop edi; pop esi; pop ebx; ret; 
0x10010fae  # call 0xa150; add esp, 0xc; pop esi; ret; 
0x100102c3  # call 0xa150; add esp, 4; pop esi; ret; 
0x100103e6  # call 0xa150; add esp, 8; mov al, 1; pop edi; pop esi; ret; 
0x100119d8  # call 0xa150; push esi; call 0xa150; add esp, 0xc; pop esi; ret; 
0x10010efd  # call 0xa3c0; add esp, 4; ret; 
0x100112b8  # call 0xa5c0; push esi; call 0xa150; add esp, 0xc; pop esi; ret; 
0x10011e26  # call dword ptr [0x1001f01c]; push 1; pop eax; ret 0xc; 
0x10010286  # call dword ptr [0x1001f03c]; mov al, 1; add esp, 0x80; ret; 
0x10016340  # call dword ptr [0x1001f0e4]; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x1001291f  # call dword ptr [0x1001f0e4]; add esp, 4; pop ebp; ret; 
0x1001259b  # call dword ptr [0x1001f0e4]; add esp, 4; xor eax, eax; pop ebp; ret; 
0x1001166c  # call dword ptr [esi - 0x18]; fisttp qword ptr [edx - 0x3b7c0001]; or al, 0x5e; ret; 
0x100112bc  # call dword ptr [esi - 0x18]; lea ecx, [esi - 0x3b7c0001]; or al, 0x5e; ret; 
0x10010702  # call ptr [edi + 0x5e]; pop ebx; ret; 
0x10018532  # call ptr [esi - 0x75]; in eax, 0x5d; ret; 
0x10015b1b  # clc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10015796  # clc; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx], ecx; mov esp, ebp; pop ebp; ret; 
0x10012652  # clc; mov esp, ebp; pop ebp; ret; 
0x10012be9  # clc; sub eax, 1; mov esp, ebp; pop ebp; ret; 
0x10010545  # clc; test edi, edi; jne 0x1054d; pop edi; pop esi; ret; 
0x10010ff5  # clc; test edi, edi; jne 0x10ffd; pop edi; pop esi; ret; 
0x100112e5  # clc; test edi, edi; jne 0x112ed; pop edi; pop esi; ret; 
0x100116b5  # clc; test edi, edi; jne 0x116bd; pop edi; pop esi; ret; 
0x10015d56  # cld; mov dword ptr [eax + edx*4], ecx; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x10015b18  # cld; mov dword ptr [ebp - 8], ecx; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10017f73  # cld; mov dword ptr [ecx], edx; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1001258f  # cld; mov esp, ebp; pop ebp; ret; 
0x10014dd8  # cld; pop edi; pop esi; mov esp, ebp; pop ebp; ret; 
0x10014ce0  # cmp al, 0; add byte ptr [ebx - 0x1a74fb3c], al; pop ebp; ret; 
0x10019ff0  # cmp al, 0x3b; ret 0x4375; 
0x10010288  # cmp al, 0xf0; add dword ptr [eax], edx; mov al, 1; add esp, 0x80; ret; 
0x100197c4  # cmp ch, 0xff; dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x10010ff3  # dec dword ptr [ebx + 0x75ff85f8]; add ebx, dword ptr [edi + 0x5e]; ret; 
0x10017a58  # dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001a056  # dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x100162b4  # dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x1001a434  # dec dword ptr [ebx - 0x1a740fbb]; pop ebp; ret; 
0x1001832e  # dec dword ptr [ebx - 0x1a74efbb]; pop ebp; ret; 
0x10010841  # dec eax; mov dword ptr [edi + 8], eax; pop edi; pop esi; ret; 
0x1001907e  # dec eax; sbb byte ptr [ecx - 0x18], dl; ljmp 0x855:0x8b000053; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x10015b1a  # dec ebp; clc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x100178cb  # dec ebp; or al, 0x89; add ebx, ebp; mov ecx, 0x8bfc458b; in eax, 0x5d; ret; 
0x1001bfb1  # dec ebp; or al, 0x8b; adc dword ptr [ebx + 0x458b01c2], eax; or al, 0x89; adc cl, ch; ret; 
0x10014e25  # dec ebp; or byte ptr [ebx + 0x5de58b01], cl; ret; 
0x10014e9b  # dec ebp; or byte ptr [ebx - 0x3f7cf7bb], cl; push es; pop ebp; ret; 
0x10017bf7  # dec ebp; or byte ptr [ebx], dh; shl byte ptr [esi - 0x75], cl; adc dword ptr [ebx], edi; ret 0x1774; 
0x10017283  # dec ebp; sbb byte ptr [ecx - 0x3ba74ff], cl; mov esp, ebp; pop ebp; ret; 
0x10011bfe  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x10011c9b  # dec esp; and al, 0xc; jne 0x11ca9; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x100118e1  # dec esp; and al, 4; xor eax, eax; test ecx, ecx; setne al; ret; 
0x10010126  # div byte ptr [ebp + 5]; or eax, 0xffffffff; pop esi; ret; 
0x10010563  # div byte ptr [ebp - 0x13]; mov eax, edi; pop edi; pop esi; ret; 
0x10011017  # div byte ptr [ebp - 0x17]; mov eax, edi; pop edi; pop esi; ret; 
0x100104fc  # div byte ptr [ebp - 0x17]; mov eax, esi; pop esi; pop edi; ret; 
0x10011a99  # fadd dword ptr [ebx + 0x5b5f00da]; ret 0x10; 
0x10011b50  # fadd dword ptr [ebx + 0x5e5b00da]; pop edi; ret 0x10; 
0x10014e70  # fcom qword ptr [eax + eax]; add byte ptr [ecx + 0x1002900c], ah; pop ebp; ret; 
0x10010874  # fcomp dword ptr [eax - 0x3b7c0001]; add al, 0x5e; ret; 
0x10014fe3  # fdiv st(7), st(0); inc dword ptr [ebx + 0x3eb0cc4]; mov eax, dword ptr [ebp + 0x14]; mov esp, ebp; pop ebp; ret; 
0x10011b52  # fiadd dword ptr [eax]; pop ebx; pop esi; pop edi; ret 0x10; 
0x10011c7f  # fiadd dword ptr [eax]; pop ebx; ret 0x10; 
0x10011a9b  # fiadd dword ptr [eax]; pop edi; pop ebx; ret 0x10; 
0x10011071  # fist dword ptr [eax - 0x3b7c0001]; add al, 0x5e; ret; 
0x10017d87  # fisttp qword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001166f  # fisttp qword ptr [edx - 0x3b7c0001]; or al, 0x5e; ret; 
0x10016908  # fsub qword ptr [ecx - 0x1a74effe]; pop ebp; ret; 
0x100156b8  # hlt; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx], ecx; mov esp, ebp; pop ebp; ret; 
0x100162b7  # hlt; mov esp, ebp; pop ebp; ret; 
0x100114b1  # imul ecx, dword ptr [edx - 0x39740001], 0x5e; ret; 
0x1001c9df  # imul edi, ebp, 0x458bffff; clc; mov esp, ebp; pop ebp; ret; 
0x1001befe  # imul edi, esp, -1; dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x100160b2  # in al, 0x83; ret 0x8901; 
0x10016342  # in al, 0xf0; add dword ptr [eax], edx; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10012921  # in al, 0xf0; add dword ptr [eax], edx; add esp, 4; pop ebp; ret; 
0x1001259d  # in al, 0xf0; add dword ptr [eax], edx; add esp, 4; xor eax, eax; pop ebp; ret; 
0x1001a479  # in al, 3; ret 0x4589; 
0x10010205  # in al, dx; add byte ptr [eax], 0; add byte ptr [ebp + 0x320975c0], al; rol byte ptr [ecx + 0x80c4], 0; ret; 
0x10011f13  # in eax, 0x5d; ret; 
0x10010565  # in eax, dx; mov eax, edi; pop edi; pop esi; ret; 
0x100102c1  # in eax, dx; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x1001678b  # inc dword ptr [eax]; add byte ptr [eax], al; add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x10018032  # inc dword ptr [eax]; add byte ptr [edi], cl; mov esi, 0x295a091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x10018124  # inc dword ptr [eax]; add byte ptr [edi], cl; mov esi, 0x29a8091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x10011fd8  # inc dword ptr [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10016777  # inc dword ptr [eax]; xor eax, eax; pop ebp; ret; 
0x100103ea  # inc dword ptr [ebx + 0x1b008c4]; pop edi; pop esi; ret; 
0x10014fe5  # inc dword ptr [ebx + 0x3eb0cc4]; mov eax, dword ptr [ebp + 0x14]; mov esp, ebp; pop ebp; ret; 
0x10012589  # inc dword ptr [ebx + 0x458b0cc4]; cld; mov esp, ebp; pop ebp; ret; 
0x10012c6c  # inc dword ptr [ebx + 0x458b14c4]; cld; mov esp, ebp; pop ebp; ret; 
0x100129d4  # inc dword ptr [ebx - 0x1a740038]; pop ebp; ret; 
0x10010498  # inc dword ptr [ebx - 0x3974f73c]; pop esi; ret; 
0x10010fc6  # inc dword ptr [ebx - 0x3f7afb3c]; je 0x10fdb; mov dword ptr [eax], 0; mov dword ptr [eax + 4], 0; ret; 
0x10010e6a  # inc dword ptr [ebx - 0xf74f73c]; call 0x9f20; mov eax, esi; pop esi; ret; 
0x10010465  # inc dword ptr [ebx - 0xf74fb3c]; call 0x9f20; mov eax, esi; pop esi; ret; 
0x10014943  # inc eax; adc byte ptr [ecx], al; add byte ptr [eax], al; add byte ptr [ebx + 0x518b084d], cl; adc al, 0x81; ret 0x76c; 
0x10011b9b  # inc eax; add al, 0x50; ret; 
0x10010e3f  # inc eax; or al, 0x50; call 0x5520; add esp, 4; ret; 
0x1001147f  # inc eax; or al, 0x50; call 0x6320; add esp, 4; ret; 
0x1001118f  # inc eax; or al, 0x50; call 0x6bb0; add esp, 4; ret; 
0x1001184f  # inc eax; or al, 0x50; call 0xa3c0; add esp, 4; ret; 
0x10019ad6  # inc ebp; aam 3; ret 0x4d8b; 
0x10014fec  # inc ebp; adc al, 0x8b; in eax, 0x5d; ret; 
0x100170c6  # inc ebp; add byte ptr [ebx - 0x1a74ebbb], cl; pop ebp; ret; 
0x10012651  # inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x10012be8  # inc ebp; clc; sub eax, 1; mov esp, ebp; pop ebp; ret; 
0x1001258e  # inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x100162b6  # inc ebp; hlt; mov esp, ebp; pop ebp; ret; 
0x1001a478  # inc ebp; in al, 3; ret 0x4589; 
0x100180ba  # inc ebp; or al, 0x5e; mov esp, ebp; pop ebp; ret; 
0x10011e03  # inc ebp; or al, 0x5f; pop esi; pop ebx; pop ebp; ret 0xc; 
0x1001bfb9  # inc ebp; or al, 0x89; adc cl, ch; ret; 
0x10012563  # inc ebp; or al, 0x8b; in eax, 0x5d; ret; 
0x1001291c  # inc ebp; or byte ptr [eax - 1], dl; adc eax, 0x1001f0e4; add esp, 4; pop ebp; ret; 
0x10012e01  # inc ecx; add byte ptr es:[eax], al; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10011fd7  # inc ecx; inc dword ptr [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10014c91  # inc ecx; or byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x1001083c  # inc edi; or byte ptr [ebx - 0x76b7f73c], al; inc edi; or byte ptr [edi + 0x5e], bl; ret; 
0x10010644  # inc edi; or byte ptr [edi + 0x5e], bl; mov al, 1; pop ebx; ret; 
0x10010843  # inc edi; or byte ptr [edi + 0x5e], bl; ret; 
0x10015aaa  # inc edx; add al, 0x8b; in eax, 0x5d; ret; 
0x10016776  # inc edx; inc dword ptr [eax]; xor eax, eax; pop ebp; ret; 
0x100170c5  # inc edx; inc ebp; add byte ptr [ebx - 0x1a74ebbb], cl; pop ebp; ret; 
0x100110de  # inc esi; or al, 0xb0; add dword ptr [edi + 0x5e], ebx; pop ebx; ret; 
0x10011ca1  # inc esp; and al, 4; mul ecx; ret 0x10; 
0x10010431  # inc esp; and al, 4; test eax, eax; jne 0x10439; ret; 
0x10010481  # inc esp; and al, 4; test eax, eax; jne 0x10489; ret; 
0x10010711  # inc esp; and al, 4; test eax, eax; jne 0x10719; ret; 
0x10010761  # inc esp; and al, 4; test eax, eax; jne 0x10769; ret; 
0x10010ef1  # inc esp; and al, 4; test eax, eax; jne 0x10ef9; ret; 
0x10010f11  # inc esp; and al, 4; test eax, eax; jne 0x10f19; ret; 
0x10011221  # inc esp; and al, 4; test eax, eax; jne 0x11229; ret; 
0x100115d1  # inc esp; and al, 4; test eax, eax; jne 0x115d9; ret; 
0x100118f1  # inc esp; and al, 4; test eax, eax; jne 0x118f9; ret; 
0x10011941  # inc esp; and al, 4; test eax, eax; jne 0x11949; ret; 
0x10011cb9  # inc esp; and al, 8; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x10012484  # iretd; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x100191f6  # jbe 0x1924a; add byte ptr [eax], al; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10010e3c  # je 0x10e4b; mov eax, dword ptr [eax + 0xc]; push eax; call 0x5520; add esp, 4; ret; 
0x10010fcc  # je 0x10fdb; mov dword ptr [eax], 0; mov dword ptr [eax + 4], 0; ret; 
0x1001118c  # je 0x1119b; mov eax, dword ptr [eax + 0xc]; push eax; call 0x6bb0; add esp, 4; ret; 
0x1001147c  # je 0x1148b; mov eax, dword ptr [eax + 0xc]; push eax; call 0x6320; add esp, 4; ret; 
0x1001184c  # je 0x1185b; mov eax, dword ptr [eax + 0xc]; push eax; call 0xa3c0; add esp, 4; ret; 
0x10011e23  # je 0x11e49; add al, 0xff; adc eax, 0x1001f01c; push 1; pop eax; ret 0xc; 
0x100149a7  # jge 0x14971; outsb dx, byte ptr [esi]; add dword ptr [eax], eax; add byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x10010127  # jne 0x1012e; or eax, 0xffffffff; pop esi; ret; 
0x100101a9  # jne 0x101b0; or eax, 0xffffffff; pop esi; ret; 
0x100101bd  # jne 0x101c4; mov esi, 0xfffffefb; mov eax, esi; pop esi; ret; 
0x100101d9  # jne 0x101e0; or eax, 0xffffffff; pop esi; ret; 
0x100101eb  # jne 0x101f2; mov esi, 0xfffffefa; mov eax, esi; pop esi; ret; 
0x1001027a  # jne 0x10285; xor al, al; add esp, 0x80; ret; 
0x100102c0  # jne 0x102af; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x10010436  # jne 0x10439; ret; 
0x10010486  # jne 0x10489; ret; 
0x100104fd  # jne 0x104e8; mov eax, esi; pop esi; pop edi; ret; 
0x10010538  # jne 0x1053f; pop edi; xor eax, eax; pop esi; ret; 
0x10010548  # jne 0x1054d; pop edi; pop esi; ret; 
0x10010564  # jne 0x10553; mov eax, edi; pop edi; pop esi; ret; 
0x100105bd  # jne 0x105af; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x100106fc  # jne 0x106f0; call 0x9f20; pop edi; pop esi; pop ebx; ret; 
0x10010716  # jne 0x10719; ret; 
0x10010766  # jne 0x10769; ret; 
0x100107dd  # jne 0x107c8; mov eax, esi; pop esi; pop edi; ret; 
0x10010870  # jne 0x1085f; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x10010ef6  # jne 0x10ef9; ret; 
0x10010f16  # jne 0x10f19; ret; 
0x10010fe8  # jne 0x10fef; pop edi; xor eax, eax; pop esi; ret; 
0x10010ff8  # jne 0x10ffd; pop edi; pop esi; ret; 
0x10011018  # jne 0x11003; mov eax, edi; pop edi; pop esi; ret; 
0x1001106d  # jne 0x1105f; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x10011226  # jne 0x11229; ret; 
0x100112d8  # jne 0x112df; pop edi; xor eax, eax; pop esi; ret; 
0x100112e8  # jne 0x112ed; pop edi; pop esi; ret; 
0x10011308  # jne 0x112f3; mov eax, edi; pop edi; pop esi; ret; 
0x1001135d  # jne 0x1134f; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x100115d6  # jne 0x115d9; ret; 
0x100116a8  # jne 0x116af; pop edi; xor eax, eax; pop esi; ret; 
0x100116b8  # jne 0x116bd; pop edi; pop esi; ret; 
0x100116d8  # jne 0x116c3; mov eax, edi; pop edi; pop esi; ret; 
0x1001172d  # jne 0x1171f; push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x100118f6  # jne 0x118f9; ret; 
0x10011946  # jne 0x11949; ret; 
0x1001197d  # jne 0x11968; mov eax, esi; pop esi; pop edi; ret; 
0x10011c9e  # jne 0x11ca9; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x10014e6d  # jne 0x14e74; call 0x16350; mov eax, dword ptr [0x1002900c]; pop ebp; ret; 
0x10010edb  # jno 0x10ee7; add byte ptr [eax], al; add esp, 8; test eax, eax; setne al; ret; 
0x10010772  # jp 0x10774; add byte ptr [eax], al; add esp, 8; mov eax, esi; pop esi; ret; 
0x100112bf  # lea ecx, [esi - 0x3b7c0001]; or al, 0x5e; ret; 
0x10017d0e  # leave; mov cx, word ptr [edx]; sub eax, ecx; pop ebp; ret; 
0x100118e7  # leave; setne al; ret; 
0x10014ce4  # les eax, ptr [ebx + ecx*4]; in eax, 0x5d; ret; 
0x10012dc4  # les eax, ptr [ebx + ecx*4]; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x100168de  # les eax, ptr [ebx + esi]; rcr byte ptr [esi - 0x75], 0xe5; pop ebp; ret; 
0x10015a3c  # les eax, ptr [ebx + esi]; shr bl, 3; mov eax, dword ptr [ebp - 0x48]; mov esp, ebp; pop ebp; ret; 
0x100102c9  # les eax, ptr [esi + ebx*2]; ret; 
0x1001083f  # les ecx, ptr [eax]; dec eax; mov dword ptr [edi + 8], eax; pop edi; pop esi; ret; 
0x100103ec  # les ecx, ptr [eax]; mov al, 1; pop edi; pop esi; ret; 
0x10018b2d  # les ecx, ptr [eax]; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1001049a  # les ecx, ptr [eax]; mov eax, esi; pop esi; ret; 
0x10010e6c  # les ecx, ptr [eax]; mov esi, eax; call 0x9f20; mov eax, esi; pop esi; ret; 
0x1001547f  # les ecx, ptr [eax]; mov esp, ebp; pop ebp; ret; 
0x10010ee0  # les ecx, ptr [eax]; test eax, eax; setne al; ret; 
0x100166f0  # les ecx, ptr [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10014fe7  # les ecx, ptr [ebx + ebp*8]; add ecx, dword ptr [ebx - 0x1a74ebbb]; pop ebp; ret; 
0x10018cbf  # les ecx, ptr [ebx + ecx*4]; in eax, 0x5d; ret; 
0x10015eb1  # les ecx, ptr [ebx + ecx*4]; inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x1001258b  # les ecx, ptr [ebx + ecx*4]; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10017ca0  # les ecx, ptr [ebx - 0x3899f7ab]; add al, byte ptr [eax]; add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x10010fb4  # les ecx, ptr [esi + ebx*2]; ret; 
0x10014f6b  # les edx, ptr [eax]; mov esp, ebp; pop ebp; ret; 
0x10010e98  # les edx, ptr [eax]; pop esi; ret; 
0x10012c6e  # les edx, ptr [ebx + ecx*4]; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x100128c0  # les edx, ptr [ebx + ecx*4]; push ebp; adc al, 0x89; add cl, byte ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10019082  # ljmp 0x855:0x8b000053; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x10012dc0  # lock add dword ptr [eax], edx; add esp, 4; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10016343  # lock add dword ptr [eax], edx; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10012922  # lock add dword ptr [eax], edx; add esp, 4; pop ebp; ret; 
0x10016811  # lock add dword ptr [eax], edx; add esp, 4; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x1001259e  # lock add dword ptr [eax], edx; add esp, 4; xor eax, eax; pop ebp; ret; 
0x10010289  # lock add dword ptr [eax], edx; mov al, 1; add esp, 0x80; ret; 
0x10011e29  # lock add dword ptr [eax], edx; push 1; pop eax; ret 0xc; 
0x10018030  # loope 0x18031; inc dword ptr [eax]; add byte ptr [edi], cl; mov esi, 0x295a091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x10018122  # loope 0x18123; inc dword ptr [eax]; add byte ptr [edi], cl; mov esi, 0x29a8091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x10011f0e  # mov ah, 0x8e; add dl, byte ptr [eax]; mov esp, ebp; pop ebp; ret; 
0x1001028c  # mov al, 1; add esp, 0x80; ret; 
0x1001034f  # mov al, 1; pop ebx; ret; 
0x100110e0  # mov al, 1; pop edi; pop esi; pop ebx; ret; 
0x100103ee  # mov al, 1; pop edi; pop esi; ret; 
0x10018038  # mov al, byte ptr [0x3100295]; ret 0x7ceb; 
0x10015069  # mov al, byte ptr [0x8bffc883]; in eax, 0x5d; ret; 
0x100180b8  # mov ax, word ptr [ebp + 0xc]; pop esi; mov esp, ebp; pop ebp; ret; 
0x10011694  # mov byte ptr [eax - 0x39740001], cl; pop esi; ret; 
0x10011fd6  # mov byte ptr [ecx - 1], 0; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x100170c4  # mov byte ptr [edx + 0x45], 0; mov eax, dword ptr [ebp + 0x14]; mov esp, ebp; pop ebp; ret; 
0x10016775  # mov byte ptr [edx - 1], 0; xor eax, eax; pop ebp; ret; 
0x100102c4  # mov byte ptr [esi - 0x3b7c0001], bl; add al, 0x5e; ret; 
0x10017d0f  # mov cx, word ptr [edx]; sub eax, ecx; pop ebp; ret; 
0x100179ab  # mov dh, 0x8b; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10014e57  # mov dword ptr [0x1002900c], edx; xor eax, eax; pop ebp; ret; 
0x10016471  # mov dword ptr [0x10029010], edx; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10010fd4  # mov dword ptr [eax + 4], 0; ret; 
0x10015d57  # mov dword ptr [eax + edx*4], ecx; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x10010fce  # mov dword ptr [eax], 0; mov dword ptr [eax + 4], 0; ret; 
0x100111e3  # mov dword ptr [eax], eax; add byte ptr [eax], al; add esp, 0x10; pop esi; ret; 
0x10014e9a  # mov dword ptr [ebp + 8], ecx; mov eax, dword ptr [ebp + 8]; add eax, 6; pop ebp; ret; 
0x10015b19  # mov dword ptr [ebp - 8], ecx; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10014c90  # mov dword ptr [ecx + 8], eax; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1001290f  # mov dword ptr [ecx], eax; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10017f74  # mov dword ptr [ecx], edx; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10010643  # mov dword ptr [edi + 8], eax; pop edi; pop esi; mov al, 1; pop ebx; ret; 
0x10010842  # mov dword ptr [edi + 8], eax; pop edi; pop esi; ret; 
0x1001034b  # mov dword ptr [edi], esi; pop edi; pop esi; mov al, 1; pop ebx; ret; 
0x1001902a  # mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191c4  # mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10017ca5  # mov dword ptr [edx], 0x458b0000; cld; mov esp, ebp; pop ebp; ret; 
0x100128c5  # mov dword ptr [edx], eax; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10014e22  # mov dword ptr [edx], eax; mov ecx, dword ptr [ebp + 8]; mov eax, dword ptr [ecx]; mov esp, ebp; pop ebp; ret; 
0x10017653  # mov dword ptr [edx], ecx; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x100156bc  # mov dword ptr [edx], ecx; mov esp, ebp; pop ebp; ret; 
0x100110dd  # mov dword ptr [esi + 0xc], eax; mov al, 1; pop edi; pop esi; pop ebx; ret; 
0x10016907  # mov eax, 0x1002a1dc; mov esp, ebp; pop ebp; ret; 
0x100169b4  # mov eax, 0x1002a1e0; mov esp, ebp; pop ebp; ret; 
0x10015435  # mov eax, 0x83fffffb; ret 0x8901; 
0x10018d64  # mov eax, 0x83fffffe; ret 0x8901; 
0x10014c93  # mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x10016a2a  # mov eax, 4; sub eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x10014e74  # mov eax, dword ptr [0x1002900c]; pop ebp; ret; 
0x100164f2  # mov eax, dword ptr [0x1002]; add byte ptr [eax], al; xor eax, eax; pop ebp; ret; 
0x10011d63  # mov eax, dword ptr [0x59001002]; pop esi; push 1; pop eax; ret 0xc; 
0x10018cb6  # mov eax, dword ptr [0x7e81002]; add byte ptr [eax], al; add byte ptr [ebx - 0x1a74f33c], al; pop ebp; ret; 
0x100169b6  # mov eax, dword ptr [0xe58b1002]; pop ebp; ret; 
0x10010e3e  # mov eax, dword ptr [eax + 0xc]; push eax; call 0x5520; add esp, 4; ret; 
0x1001147e  # mov eax, dword ptr [eax + 0xc]; push eax; call 0x6320; add esp, 4; ret; 
0x1001118e  # mov eax, dword ptr [eax + 0xc]; push eax; call 0x6bb0; add esp, 4; ret; 
0x1001184e  # mov eax, dword ptr [eax + 0xc]; push eax; call 0xa3c0; add esp, 4; ret; 
0x10011b9a  # mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10010439  # mov eax, dword ptr [eax + 8]; push eax; call 0x6320; add esp, 4; ret; 
0x10010719  # mov eax, dword ptr [eax + 8]; push eax; call 0x8110; add esp, 4; ret; 
0x10010ef9  # mov eax, dword ptr [eax + 8]; push eax; call 0xa3c0; add esp, 4; ret; 
0x10011949  # mov eax, dword ptr [eax]; ret; 
0x1001832f  # mov eax, dword ptr [ebp + 0x10]; mov esp, ebp; pop ebp; ret; 
0x10014feb  # mov eax, dword ptr [ebp + 0x14]; mov esp, ebp; pop ebp; ret; 
0x10012562  # mov eax, dword ptr [ebp + 0xc]; mov esp, ebp; pop ebp; ret; 
0x10011e02  # mov eax, dword ptr [ebp + 0xc]; pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x100180b9  # mov eax, dword ptr [ebp + 0xc]; pop esi; mov esp, ebp; pop ebp; ret; 
0x10014e9d  # mov eax, dword ptr [ebp + 8]; add eax, 6; pop ebp; ret; 
0x1001291b  # mov eax, dword ptr [ebp + 8]; push eax; call dword ptr [0x1001f0e4]; add esp, 4; pop ebp; ret; 
0x1001a435  # mov eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x10015a42  # mov eax, dword ptr [ebp - 0x48]; mov esp, ebp; pop ebp; ret; 
0x100162b5  # mov eax, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x1001258d  # mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10015b1c  # mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10012be7  # mov eax, dword ptr [ebp - 8]; sub eax, 1; mov esp, ebp; pop ebp; ret; 
0x10014e27  # mov eax, dword ptr [ecx]; mov esp, ebp; pop ebp; ret; 
0x10014c8d  # mov eax, dword ptr [edx + 0x30]; mov dword ptr [ecx + 8], eax; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x10015aa9  # mov eax, dword ptr [edx + 4]; mov esp, ebp; pop ebp; ret; 
0x10011ca0  # mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x10010430  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10439; ret; 
0x10010480  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10489; ret; 
0x10010710  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10719; ret; 
0x10010760  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10769; ret; 
0x10010ef0  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10ef9; ret; 
0x10010f10  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10f19; ret; 
0x100115d0  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x115d9; ret; 
0x100118f0  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x118f9; ret; 
0x10011940  # mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x11949; ret; 
0x10011cb8  # mov eax, dword ptr [esp + 8]; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x10010566  # mov eax, edi; pop edi; pop esi; ret; 
0x10011c01  # mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x100104ff  # mov eax, esi; pop esi; pop edi; ret; 
0x100101c4  # mov eax, esi; pop esi; ret; 
0x100105c1  # mov ebx, dword ptr [ebx - 0x3b7c0001]; add al, 0x5e; ret; 
0x100178d0  # mov ecx, 0x8bfc458b; in eax, 0x5d; ret; 
0x10015aa0  # mov ecx, dword ptr [0x1002a1c4]; mov edx, dword ptr [ecx + eax*4]; mov eax, dword ptr [edx + 4]; mov esp, ebp; pop ebp; ret; 
0x10011b98  # mov ecx, dword ptr [eax]; mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10017282  # mov ecx, dword ptr [ebp + 0x18]; mov dword ptr [ecx], eax; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10014e24  # mov ecx, dword ptr [ebp + 8]; mov eax, dword ptr [ecx]; mov esp, ebp; pop ebp; ret; 
0x10017d10  # mov ecx, dword ptr [edx]; sub eax, ecx; pop ebp; ret; 
0x10011c9a  # mov ecx, dword ptr [esp + 0xc]; jne 0x11ca9; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x100118e0  # mov ecx, dword ptr [esp + 4]; xor eax, eax; test ecx, ecx; setne al; ret; 
0x10010544  # mov edi, eax; test edi, edi; jne 0x1054d; pop edi; pop esi; ret; 
0x10010ff4  # mov edi, eax; test edi, edi; jne 0x10ffd; pop edi; pop esi; ret; 
0x100112e4  # mov edi, eax; test edi, edi; jne 0x112ed; pop edi; pop esi; ret; 
0x100116b4  # mov edi, eax; test edi, edi; jne 0x116bd; pop edi; pop esi; ret; 
0x1001a9db  # mov edx, 0x8bfffffa; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10014e51  # mov edx, dword ptr [0x10029008]; mov dword ptr [0x1002900c], edx; xor eax, eax; pop ebp; ret; 
0x100128c2  # mov edx, dword ptr [ebp + 0x14]; mov dword ptr [edx], eax; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10017650  # mov edx, dword ptr [ebp + 0x18]; mov dword ptr [edx], ecx; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10019027  # mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191c1  # mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x100156b9  # mov edx, dword ptr [ebp + 8]; mov dword ptr [edx], ecx; mov esp, ebp; pop ebp; ret; 
0x10017ca1  # mov edx, dword ptr [ebp + 8]; mov word ptr [edx], 0; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x1001646b  # mov edx, dword ptr [ebp - 0x88]; mov dword ptr [0x10029010], edx; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10015aa6  # mov edx, dword ptr [ecx + eax*4]; mov eax, dword ptr [edx + 4]; mov esp, ebp; pop ebp; ret; 
0x1001255d  # mov es, word ptr [edx]; adc bl, ch; add ecx, dword ptr [ebx - 0x1a74f3bb]; pop ebp; ret; 
0x10018036  # mov esi, 0x295a091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x10018128  # mov esi, 0x29a8091; adc byte ptr [ebx], al; ret 0x7ceb; 
0x100101ed  # mov esi, 0xfffffefa; mov eax, esi; pop esi; ret; 
0x100101bf  # mov esi, 0xfffffefb; mov eax, esi; pop esi; ret; 
0x10010121  # mov esi, dword ptr [esp + 8]; test esi, esi; jne 0x1012e; or eax, 0xffffffff; pop esi; ret; 
0x10010469  # mov esi, eax; call 0x9f20; mov eax, esi; pop esi; ret; 
0x10011f12  # mov esp, ebp; pop ebp; ret; 
0x10011b96  # mov esp, ecx; mov ecx, dword ptr [eax]; mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10012dff  # mov word ptr [ecx + 0x26], 0; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10017ca4  # mov word ptr [edx], 0; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10017df3  # movsd dword ptr es:[edi], dword ptr [esi]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10011cbc  # mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x10011ca4  # mul ecx; ret 0x10; 
0x10011b4f  # neg eax; sbb edx, 0; pop ebx; pop esi; pop edi; ret 0x10; 
0x10011c7c  # neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x10011a98  # neg eax; sbb edx, 0; pop edi; pop ebx; ret 0x10; 
0x10011c7a  # neg edx; neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x10011a96  # neg edx; neg eax; sbb edx, 0; pop edi; pop ebx; ret 0x10; 
0x10014e54  # nop; add dl, byte ptr [eax]; mov dword ptr [0x1002900c], edx; xor eax, eax; pop ebp; ret; 
0x10014e76  # nop; add dl, byte ptr [eax]; pop ebp; ret; 
0x10016474  # nop; add dl, byte ptr [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10014e5a  # nop; add dl, byte ptr [eax]; xor eax, eax; pop ebp; ret; 
0x10015d59  # nop; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1001042f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10439; ret; 
0x1001047f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10489; ret; 
0x1001070f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10719; ret; 
0x1001075f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10769; ret; 
0x10010eef  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10ef9; ret; 
0x10010f0f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10f19; ret; 
0x1001121f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x11229; ret; 
0x100115cf  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x115d9; ret; 
0x100118ef  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x118f9; ret; 
0x1001193f  # nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x11949; ret; 
0x100118df  # nop; mov ecx, dword ptr [esp + 4]; xor eax, eax; test ecx, ecx; setne al; ret; 
0x1001042e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10439; ret; 
0x1001047e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10489; ret; 
0x1001070e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10719; ret; 
0x1001075e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10769; ret; 
0x10010eee  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10ef9; ret; 
0x10010f0e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x10f19; ret; 
0x1001121e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x11229; ret; 
0x100115ce  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x115d9; ret; 
0x100118ee  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x118f9; ret; 
0x1001193e  # nop; nop; mov eax, dword ptr [esp + 4]; test eax, eax; jne 0x11949; ret; 
0x10010536  # not byte ptr [edi + 0x75]; add eax, 0x5ec0335f; ret; 
0x1001076f  # or al, 0x50; call 0x107f0; add esp, 8; mov eax, esi; pop esi; ret; 
0x10010e40  # or al, 0x50; call 0x5520; add esp, 4; ret; 
0x10011480  # or al, 0x50; call 0x6320; add esp, 4; ret; 
0x10011190  # or al, 0x50; call 0x6bb0; add esp, 4; ret; 
0x10011850  # or al, 0x50; call 0xa3c0; add esp, 4; ret; 
0x100180bb  # or al, 0x5e; mov esp, ebp; pop ebp; ret; 
0x10010fb5  # or al, 0x5e; ret; 
0x10011e04  # or al, 0x5f; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10017b1d  # or al, 0x83; ret 0x8902; 
0x10011015  # or al, 0x85; div byte ptr [ebp - 0x17]; mov eax, edi; pop edi; pop esi; ret; 
0x1001bfba  # or al, 0x89; adc cl, ch; ret; 
0x100178cc  # or al, 0x89; add ebx, ebp; mov ecx, 0x8bfc458b; in eax, 0x5d; ret; 
0x1001bfb2  # or al, 0x8b; adc dword ptr [ebx + 0x458b01c2], eax; or al, 0x89; adc cl, ch; ret; 
0x10014e50  # or al, 0x8b; adc eax, 0x10029008; mov dword ptr [0x1002900c], edx; xor eax, eax; pop ebp; ret; 
0x10012564  # or al, 0x8b; in eax, 0x5d; ret; 
0x10015eb2  # or al, 0x8b; inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x1001258c  # or al, 0x8b; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10014e75  # or al, 0x90; add dl, byte ptr [eax]; pop ebp; ret; 
0x10014e59  # or al, 0x90; add dl, byte ptr [eax]; xor eax, eax; pop ebp; ret; 
0x10015d58  # or al, 0x90; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x100110df  # or al, 0xb0; add dword ptr [edi + 0x5e], ebx; pop ebx; ret; 
0x10014fe8  # or al, 0xeb; add ecx, dword ptr [ebx - 0x1a74ebbb]; pop ebp; ret; 
0x10017c9e  # or al, 0xeb; les ecx, ptr [ebx - 0x3899f7ab]; add al, byte ptr [eax]; add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x10010edc  # or al, byte ptr [eax]; add byte ptr [ebx - 0x3f7af73c], al; setne al; ret; 
0x10019c36  # or bl, ch; add eax, 0xfffbe8e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001dcf8  # or bl, ch; add eax, 0xfffcaae9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x1001bb28  # or bl, ch; add eax, 0xfffd30e9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x1001c9db  # or bl, ch; add eax, 0xfffd69e9; dec dword ptr [ebx - 0x1a7407bb]; pop ebp; ret; 
0x1001b81b  # or bl, ch; add eax, 0xfffe04e9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x1001d965  # or bl, ch; add eax, 0xfffe0ae9; dec dword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10017d85  # or bl, ch; fisttp qword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10017df1  # or bl, ch; movsd dword ptr es:[edi], dword ptr [esi]; xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10014e53  # or byte ptr [eax + 0x15891002], dl; or al, 0x90; add dl, byte ptr [eax]; xor eax, eax; pop ebp; ret; 
0x10014c92  # or byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x10016a29  # or byte ptr [eax + 4], bh; sub eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x10010840  # or byte ptr [eax - 0x77], cl; inc edi; or byte ptr [edi + 0x5e], bl; ret; 
0x1001291d  # or byte ptr [eax - 1], dl; adc eax, 0x1001f0e4; add esp, 4; pop ebp; ret; 
0x10012599  # or byte ptr [eax - 1], dl; adc eax, 0x1001f0e4; add esp, 4; xor eax, eax; pop ebp; ret; 
0x10010ee1  # or byte ptr [ebp - 0x3f6af040], al; ret; 
0x10017eb9  # or byte ptr [ebp - 0x74f48b37], al; push ebp; or al, 0x83; ret 0x8902; 
0x10017d7f  # or byte ptr [ebx + 0x558902c2], al; or bl, ch; fisttp qword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10014e26  # or byte ptr [ebx + 0x5de58b01], cl; ret; 
0x10018b2e  # or byte ptr [ebx - 0x1a7407bb], cl; pop ebp; ret; 
0x10014e9c  # or byte ptr [ebx - 0x3f7cf7bb], cl; push es; pop ebp; ret; 
0x1001083d  # or byte ptr [ebx - 0x76b7f73c], al; inc edi; or byte ptr [edi + 0x5e], bl; ret; 
0x10017bf8  # or byte ptr [ebx], dh; shl byte ptr [esi - 0x75], cl; adc dword ptr [ebx], edi; ret 0x1774; 
0x100110dc  # or byte ptr [ecx + 0x1b00c46], cl; pop edi; pop esi; pop ebx; ret; 
0x100156bb  # or byte ptr [ecx + 0x5de58b0a], cl; ret; 
0x10014cdc  # or byte ptr [ecx - 0x18], dl; std; cmp al, 0; add byte ptr [ebx - 0x1a74fb3c], al; pop ebp; ret; 
0x100180b2  # or byte ptr [ecx - 0x701403bb], cl; mov ax, word ptr [ebp + 0xc]; pop esi; mov esp, ebp; pop ebp; ret; 
0x10010645  # or byte ptr [edi + 0x5e], bl; mov al, 1; pop ebx; ret; 
0x10010844  # or byte ptr [edi + 0x5e], bl; ret; 
0x10016ba9  # or byte ptr [edx - 0x18], dl; pop es; add byte ptr [eax], al; add byte ptr [ebx - 0x1a74ef3c], al; pop ebp; ret; 
0x1001633e  # or byte ptr [edx - 1], dl; adc eax, 0x1001f0e4; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10017ca3  # or byte ptr [esi - 0x39], ah; add al, byte ptr [eax]; add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x10017654  # or cl, byte ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x100170c3  # or dh, al; inc edx; inc ebp; add byte ptr [ebx - 0x1a74ebbb], cl; pop ebp; ret; 
0x1001027b  # or dword ptr [edx], esi; rol byte ptr [ecx + 0x80c4], 0; ret; 
0x10015aa1  # or eax, 0x1002a1c4; mov edx, dword ptr [ecx + eax*4]; mov eax, dword ptr [edx + 4]; mov esp, ebp; pop ebp; ret; 
0x10010e3d  # or eax, 0x500c408b; call 0x5520; add esp, 4; ret; 
0x1001147d  # or eax, 0x500c408b; call 0x6320; add esp, 4; ret; 
0x1001118d  # or eax, 0x500c408b; call 0x6bb0; add esp, 4; ret; 
0x1001184d  # or eax, 0x500c408b; call 0xa3c0; add esp, 4; ret; 
0x10010fcd  # or eax, 0xc7; add byte ptr [eax], al; mov dword ptr [eax + 4], 0; ret; 
0x100129d5  # or eax, 0xffffffff; mov esp, ebp; pop ebp; ret; 
0x10010129  # or eax, 0xffffffff; pop esi; ret; 
0x10017ac1  # or ecx, dword ptr [ebx - 0x3d7c03ab]; add dword ptr [ecx - 0x2f1403ab], ecx; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10017a7f  # or ecx, dword ptr [ebx - 0x3f7c03bb]; add dword ptr [ecx - 0x1f1403bb], ecx; mov eax, dword ptr [ebp - 4]; mov esp, ebp; pop ebp; ret; 
0x10011c98  # or ecx, eax; mov ecx, dword ptr [esp + 0xc]; jne 0x11ca9; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x100149a9  # outsb dx, byte ptr [esi]; add dword ptr [eax], eax; add byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x10011d6b  # pop eax; ret 0xc; 
0x10010116  # pop ebp; pop ebx; add esp, 0x84; ret; 
0x10011e08  # pop ebp; ret 0xc; 
0x10011f14  # pop ebp; ret; 
0x10010117  # pop ebx; add esp, 0x84; ret; 
0x10010279  # pop ebx; jne 0x10285; xor al, al; add esp, 0x80; ret; 
0x10011e07  # pop ebx; pop ebp; ret 0xc; 
0x10011b54  # pop ebx; pop esi; pop edi; ret 0x10; 
0x10011a9e  # pop ebx; ret 0x10; 
0x10010351  # pop ebx; ret; 
0x10011d67  # pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x10011a9d  # pop edi; pop ebx; ret 0x10; 
0x1001034d  # pop edi; pop esi; mov al, 1; pop ebx; ret; 
0x10014dd9  # pop edi; pop esi; mov esp, ebp; pop ebp; ret; 
0x10010114  # pop edi; pop esi; pop ebp; pop ebx; add esp, 0x84; ret; 
0x10011e05  # pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10010703  # pop edi; pop esi; pop ebx; ret; 
0x100103f0  # pop edi; pop esi; ret; 
0x10010353  # pop edi; pop esi; xor al, al; pop ebx; ret; 
0x10011b56  # pop edi; ret 0x10; 
0x10010502  # pop edi; ret; 
0x100103f3  # pop edi; xor al, al; pop esi; ret; 
0x1001018e  # pop edi; xor eax, eax; pop esi; ret; 
0x10016bac  # pop es; add byte ptr [eax], al; add byte ptr [ebx - 0x1a74ef3c], al; pop ebp; ret; 
0x10018cba  # pop es; add byte ptr [eax], al; add byte ptr [ebx - 0x1a74f33c], al; pop ebp; ret; 
0x1001650e  # pop es; add byte ptr [eax], al; add byte ptr [ebx - 0x3fccf33c], al; pop ebp; ret; 
0x1001034e  # pop esi; mov al, 1; pop ebx; ret; 
0x10014dda  # pop esi; mov esp, ebp; pop ebp; ret; 
0x10010115  # pop esi; pop ebp; pop ebx; add esp, 0x84; ret; 
0x10011e06  # pop esi; pop ebx; pop ebp; ret 0xc; 
0x10011c03  # pop esi; pop ebx; ret 0x10; 
0x10010704  # pop esi; pop ebx; ret; 
0x10011b55  # pop esi; pop edi; ret 0x10; 
0x10010501  # pop esi; pop edi; ret; 
0x10011d68  # pop esi; push 1; pop eax; ret 0xc; 
0x1001012c  # pop esi; ret; 
0x10010354  # pop esi; xor al, al; pop ebx; ret; 
0x10011d69  # push 1; pop eax; ret 0xc; 
0x10010547  # push dword ptr [ebp + 3]; pop edi; pop esi; ret; 
0x10011e22  # push dword ptr [esp + 4]; call dword ptr [0x1001f01c]; push 1; pop eax; ret 0xc; 
0x10010770  # push eax; call 0x107f0; add esp, 8; mov eax, esi; pop esi; ret; 
0x10010e41  # push eax; call 0x5520; add esp, 4; ret; 
0x1001043c  # push eax; call 0x6320; add esp, 4; ret; 
0x10011191  # push eax; call 0x6bb0; add esp, 4; ret; 
0x1001071c  # push eax; call 0x8110; add esp, 4; ret; 
0x10010efc  # push eax; call 0xa3c0; add esp, 4; ret; 
0x10010285  # push eax; call dword ptr [0x1001f03c]; mov al, 1; add esp, 0x80; ret; 
0x1001291e  # push eax; call dword ptr [0x1001f0e4]; add esp, 4; pop ebp; ret; 
0x1001259a  # push eax; call dword ptr [0x1001f0e4]; add esp, 4; xor eax, eax; pop ebp; ret; 
0x10010e90  # push eax; push esi; call 0x10f60; add esp, 0x10; pop esi; ret; 
0x100111e0  # push eax; push esi; call 0x11270; add esp, 0x10; pop esi; ret; 
0x100114d0  # push eax; push esi; call 0x11620; add esp, 0x10; pop esi; ret; 
0x100118a0  # push eax; push esi; call 0x11990; add esp, 0x10; pop esi; ret; 
0x10011b9d  # push eax; ret; 
0x100128c3  # push ebp; adc al, 0x89; add cl, byte ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x100160b1  # push ebp; in al, 0x83; ret 0x8901; 
0x10017b1c  # push ebp; or al, 0x83; ret 0x8902; 
0x10017d84  # push ebp; or bl, ch; fisttp qword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x10017d7e  # push ebp; or byte ptr [ebx + 0x558902c2], al; or bl, ch; fisttp qword ptr [ebx - 0x1a7403bb]; pop ebp; ret; 
0x100156ba  # push ebp; or byte ptr [ecx + 0x5de58b0a], cl; ret; 
0x10017ca2  # push ebp; or byte ptr [esi - 0x39], ah; add al, byte ptr [eax]; add byte ptr [ebx - 0x1a7403bb], cl; pop ebp; ret; 
0x1001a861  # push ebp; ret 0x458b; 
0x1001a83f  # push ebp; ret; 
0x10017651  # push ebp; sbb byte ptr [ecx - 0x3ba74f6], cl; mov esp, ebp; pop ebp; ret; 
0x10019083  # push ebx; add byte ptr [eax], al; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x1001494d  # push ecx; adc al, 0x81; ret 0x76c; 
0x1001994f  # push ecx; add al, byte ptr [ecx + 0xffe2]; add byte ptr [ebx], al; ret 0xc06b; 
0x10011ed1  # push ecx; add bh, byte ptr [ebx]; ret 0x2775; 
0x10010ed9  # push ecx; call 0x11950; add esp, 8; test eax, eax; setne al; ret; 
0x10019021  # push ecx; call 0x11e58; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191bb  # push ecx; call 0x11e58; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10014f64  # push ecx; call 0x1517e; add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x10015478  # push ecx; call 0x157a0; add esp, 8; mov esp, ebp; pop ebp; ret; 
0x10014cdd  # push ecx; call 0x189e0; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10019080  # push ecx; call 0x1e470; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191f4  # push ecx; call 0x1e470; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10019fef  # push ecx; cmp al, 0x3b; ret 0x4375; 
0x10010537  # push edi; jne 0x1053f; pop edi; xor eax, eax; pop esi; ret; 
0x10010fe7  # push edi; jne 0x10fef; pop edi; xor eax, eax; pop esi; ret; 
0x100112d7  # push edi; jne 0x112df; pop edi; xor eax, eax; pop esi; ret; 
0x100116a7  # push edi; jne 0x116af; pop edi; xor eax, eax; pop esi; ret; 
0x10019185  # push edx; add byte ptr [eax], al; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x100191f7  # push edx; add byte ptr [eax], al; mov edx, dword ptr [ebp + 8]; mov dword ptr [edx + 8], eax; pop ebp; ret; 
0x10010493  # push edx; call 0x10390; add esp, 8; mov eax, esi; pop esi; ret; 
0x10016baa  # push edx; call 0x16bb7; add esp, 0x10; mov esp, ebp; pop ebp; ret; 
0x1001633f  # push edx; call dword ptr [0x1001f0e4]; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x10014ea2  # push es; pop ebp; ret; 
0x10010e91  # push esi; call 0x10f60; add esp, 0x10; pop esi; ret; 
0x100111e1  # push esi; call 0x11270; add esp, 0x10; pop esi; ret; 
0x100114d1  # push esi; call 0x11620; add esp, 0x10; pop esi; ret; 
0x100118a1  # push esi; call 0x11990; add esp, 0x10; pop esi; ret; 
0x10010fad  # push esi; call 0xa150; add esp, 0xc; pop esi; ret; 
0x100102c2  # push esi; call 0xa150; add esp, 4; pop esi; ret; 
0x10017c33  # pushfd; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1001074c  # rcl byte ptr [edi - 0x39740001]; pop esi; ret; 
0x10010278  # rcr byte ptr [ebx + 0x75], 9; xor al, al; add esp, 0x80; ret; 
0x100168e1  # rcr byte ptr [esi - 0x75], 0xe5; pop ebp; ret; 
0x10016ddb  # ret 0; 
0x10011a9f  # ret 0x10; 
0x10017bff  # ret 0x1774; 
0x10011ed4  # ret 0x2775; 
0x10015337  # ret 0x3901; 
0x10019442  # ret 0x3b01; 
0x1001ac3d  # ret 0x3b02; 
0x10019ff2  # ret 0x4375; 
0x10015702  # ret 0x4589; 
0x1001a862  # ret 0x458b; 
0x10019a9d  # ret 0x4d8b; 
0x10015217  # ret 0x5202; 
0x10018b24  # ret 0x5206; 
0x10014fd3  # ret 0x520c; 
0x100131cd  # ret 0x522a; 
0x100149af  # ret 0x5589; 
0x100184d5  # ret 0x5beb; 
0x10011e9e  # ret 0x6775; 
0x1001875f  # ret 0x6feb; 
0x10014950  # ret 0x76c; 
0x1001803d  # ret 0x7ceb; 
0x1001a811  # ret 0x81; 
0x1001a83c  # ret 0x8830; 
0x1001a7fa  # ret 0x8840; 
0x10013336  # ret 0x8901; 
0x10016dfd  # ret 0x8902; 
0x1001de47  # ret 0x8966; 
0x100156fc  # ret 0x8b01; 
0x10016d59  # ret 0x8b02; 
0x1001d4c4  # ret 0x8b03; 
0x10019c15  # ret 0x8b04; 
0x10019958  # ret 0xc06b; 
0x10019b19  # ret 0xc803; 
0x10011d6c  # ret 0xc; 
0x10011a42  # ret 0xd233; 
0x10016add  # ret 0xd8f7; 
0x10015dc6  # ret 0xf8d1; 
0x100180aa  # ret 0xfeb; 
0x1001652e  # ret 1; 
0x1001b86a  # ret 2; 
0x1001011e  # ret; 
0x1001764f  # retf 0x558b; sbb byte ptr [ecx - 0x3ba74f6], cl; mov esp, ebp; pop ebp; ret; 
0x10010462  # retf 0xffff; inc dword ptr [ebx - 0xf74fb3c]; call 0x9f20; mov eax, esi; pop esi; ret; 
0x1001020f  # rol byte ptr [ecx + 0x80c4], 0; ret; 
0x10014ea1  # rol byte ptr [esi], 0x5d; ret; 
0x10019ae7  # rol dword ptr [ebx], 1; ret 0x4d8b; 
0x10017acc  # ror byte ptr [ebx - 0x1a7403bb], 1; pop ebp; ret; 
0x100180fa  # ror byte ptr [ebx - 0x1a74f3bb], 1; pop ebp; ret; 
0x1001155c  # ror byte ptr [ecx - 0x39740001], 0x5e; ret; 
0x10010f4c  # ror byte ptr [edi - 0x39740001], 1; pop esi; ret; 
0x10017281  # ror dword ptr [ebx + 0x189184d], 0x8b; inc ebp; cld; mov esp, ebp; pop ebp; ret; 
0x10014e6c  # sal byte ptr [ebp + 5], 0xe8; fcom qword ptr [eax + eax]; add byte ptr [ecx + 0x1002900c], ah; pop ebp; ret; 
0x10014d85  # sal byte ptr [ebp + 5], 0xe8; ret; 
0x10010fcb  # sal byte ptr [ebp + ecx - 0x39], 0; add byte ptr [eax], al; add byte ptr [eax], al; mov dword ptr [eax + 4], 0; ret; 
0x10010e3b  # sal byte ptr [ebp + ecx - 0x75], 0x40; or al, 0x50; call 0x5520; add esp, 4; ret; 
0x1001147b  # sal byte ptr [ebp + ecx - 0x75], 0x40; or al, 0x50; call 0x6320; add esp, 4; ret; 
0x1001118b  # sal byte ptr [ebp + ecx - 0x75], 0x40; or al, 0x50; call 0x6bb0; add esp, 4; ret; 
0x1001184b  # sal byte ptr [ebp + ecx - 0x75], 0x40; or al, 0x50; call 0xa3c0; add esp, 4; ret; 
0x100105bc  # sal byte ptr [ebp - 0x10], 0x56; call 0xa150; add esp, 4; pop esi; ret; 
0x100102bf  # sal byte ptr [ebp - 0x13], 0x56; call 0xa150; add esp, 4; pop esi; ret; 
0x100106fb  # sal byte ptr [ebp - 0xe], 0xe8; sbb eax, 0x5fffff98; pop esi; pop ebx; ret; 
0x10011e28  # sbb al, 0xf0; add dword ptr [eax], edx; push 1; pop eax; ret 0xc; 
0x1001264f  # sbb byte ptr [ebx], ch; inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x1001907f  # sbb byte ptr [ecx - 0x18], dl; ljmp 0x855:0x8b000053; mov dword ptr [edx + 0x18], eax; pop ebp; ret; 
0x10017652  # sbb byte ptr [ecx - 0x3ba74f6], cl; mov esp, ebp; pop ebp; ret; 
0x10017284  # sbb byte ptr [ecx - 0x3ba74ff], cl; mov esp, ebp; pop ebp; ret; 
0x10014d7c  # sbb dword ptr [ebx], esi; shl byte ptr [eax + 0x1002a1d0], 0x85; sal byte ptr [ebp + 5], 0xe8; ret; 
0x100106ff  # sbb eax, 0x5fffff98; pop esi; pop ebx; ret; 
0x10014804  # sbb ecx, dword ptr [ebx - 0x74adebab]; inc ebp; adc byte ptr [eax - 0x18], dl; ret; 
0x10011731  # sbb ecx, dword ptr [edx - 0x3b7c0001]; add al, 0x5e; ret; 
0x10011b51  # sbb edx, 0; pop ebx; pop esi; pop edi; ret 0x10; 
0x10011c7e  # sbb edx, 0; pop ebx; ret 0x10; 
0x10011a9a  # sbb edx, 0; pop edi; pop ebx; ret 0x10; 
0x10010ee4  # setne al; ret; 
0x10014d7e  # shl byte ptr [eax + 0x1002a1d0], 0x85; sal byte ptr [ebp + 5], 0xe8; ret; 
0x10017bfa  # shl byte ptr [esi - 0x75], cl; adc dword ptr [ebx], edi; ret 0x1774; 
0x10011e99  # shl byte ptr [esi - 0x75], cl; adc dword ptr [ebx], edi; ret 0x6775; 
0x10011ece  # shl byte ptr [esi - 0x75], cl; push ecx; add bh, byte ptr [ebx]; ret 0x2775; 
0x10015a3f  # shr bl, 3; mov eax, dword ptr [ebp - 0x48]; mov esp, ebp; pop ebp; ret; 
0x10014cdf  # std; cmp al, 0; add byte ptr [ebx - 0x1a74fb3c], al; pop ebp; ret; 
0x10012bea  # sub eax, 1; mov esp, ebp; pop ebp; ret; 
0x10016a2f  # sub eax, dword ptr [ebp - 0x10]; mov esp, ebp; pop ebp; ret; 
0x10016e27  # sub eax, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x10012650  # sub eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x10017d12  # sub eax, ecx; pop ebp; ret; 
0x10010204  # sub esp, 0x80; test eax, eax; jne 0x10217; xor al, al; add esp, 0x80; ret; 
0x1001011a  # test byte ptr [eax], al; add byte ptr [eax], al; ret; 
0x10011b94  # test dword ptr [ecx], eax; mov esp, ecx; mov ecx, dword ptr [eax]; mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10010fca  # test eax, eax; je 0x10fdb; mov dword ptr [eax], 0; mov dword ptr [eax + 4], 0; ret; 
0x100101a7  # test eax, eax; jne 0x101b0; or eax, 0xffffffff; pop esi; ret; 
0x100101bb  # test eax, eax; jne 0x101c4; mov esi, 0xfffffefb; mov eax, esi; pop esi; ret; 
0x100101d7  # test eax, eax; jne 0x101e0; or eax, 0xffffffff; pop esi; ret; 
0x100101e9  # test eax, eax; jne 0x101f2; mov esi, 0xfffffefa; mov eax, esi; pop esi; ret; 
0x10010434  # test eax, eax; jne 0x10439; ret; 
0x10010484  # test eax, eax; jne 0x10489; ret; 
0x10010714  # test eax, eax; jne 0x10719; ret; 
0x10010764  # test eax, eax; jne 0x10769; ret; 
0x10010ef4  # test eax, eax; jne 0x10ef9; ret; 
0x10010f14  # test eax, eax; jne 0x10f19; ret; 
0x10011224  # test eax, eax; jne 0x11229; ret; 
0x100115d4  # test eax, eax; jne 0x115d9; ret; 
0x100118f4  # test eax, eax; jne 0x118f9; ret; 
0x10011944  # test eax, eax; jne 0x11949; ret; 
0x10014e6b  # test eax, eax; jne 0x14e74; call 0x16350; mov eax, dword ptr [0x1002900c]; pop ebp; ret; 
0x10010277  # test eax, eax; pop ebx; jne 0x10285; xor al, al; add esp, 0x80; ret; 
0x10010ee2  # test eax, eax; setne al; ret; 
0x100118e6  # test ecx, ecx; setne al; ret; 
0x10010546  # test edi, edi; jne 0x1054d; pop edi; pop esi; ret; 
0x10010ff6  # test edi, edi; jne 0x10ffd; pop edi; pop esi; ret; 
0x100112e6  # test edi, edi; jne 0x112ed; pop edi; pop esi; ret; 
0x100116b6  # test edi, edi; jne 0x116bd; pop edi; pop esi; ret; 
0x10010125  # test esi, esi; jne 0x1012e; or eax, 0xffffffff; pop esi; ret; 
0x100104fb  # test esi, esi; jne 0x104e8; mov eax, esi; pop esi; pop edi; ret; 
0x10010562  # test esi, esi; jne 0x10553; mov eax, edi; pop edi; pop esi; ret; 
0x100107db  # test esi, esi; jne 0x107c8; mov eax, esi; pop esi; pop edi; ret; 
0x10011016  # test esi, esi; jne 0x11003; mov eax, edi; pop edi; pop esi; ret; 
0x10011306  # test esi, esi; jne 0x112f3; mov eax, edi; pop edi; pop esi; ret; 
0x100116d6  # test esi, esi; jne 0x116c3; mov eax, edi; pop edi; pop esi; ret; 
0x1001197b  # test esi, esi; jne 0x11968; mov eax, esi; pop esi; pop edi; ret; 
0x10015434  # xchg ebp, eax; mov eax, 0x83fffffb; ret 0x8901; 
0x10018d63  # xchg ebp, eax; mov eax, 0x83fffffe; ret 0x8901; 
0x10018037  # xchg ecx, eax; mov al, byte ptr [0x3100295]; ret 0x7ceb; 
0x100149ae  # xchg esp, eax; ret 0x5589; 
0x1001020e  # xor al, al; add esp, 0x80; ret; 
0x10010355  # xor al, al; pop ebx; ret; 
0x100103f4  # xor al, al; pop esi; ret; 
0x10011fda  # xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x100125a4  # xor eax, eax; pop ebp; ret; 
0x10010504  # xor eax, eax; pop edi; ret; 
0x100168e0  # xor eax, eax; pop esi; mov esp, ebp; pop ebp; ret; 
0x1001018f  # xor eax, eax; pop esi; ret; 
0x10010e4b  # xor eax, eax; ret; 
0x100118e4  # xor eax, eax; test ecx, ecx; setne al; ret; 
0x10011bff  # xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x100101a5  # xor esi, esi; test eax, eax; jne 0x101b0; or eax, 0xffffffff; pop esi; ret; 
0x100101d5  # xor esi, esi; test eax, eax; jne 0x101e0; or eax, 0xffffffff; pop esi; ret; 
0x1c011357  # adc eax, 0x1c01a138; push 1; pop eax; ret 0xc; 
0x1c010eb1  # adc eax, 0x1c01a15c; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x1c010eb8  # add al, 0x8b; in eax, 0x5d; ret; 
0x1c011355  # add al, 0xff; adc eax, 0x1c01a138; push 1; pop eax; ret 0xc; 
0x1c0107c4  # add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x1c0107c2  # add byte ptr [eax], al; add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x1c0107c1  # add byte ptr [eax], al; add byte ptr [eax], al; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c0104dd  # add byte ptr [eax], al; add byte ptr [ebx + 0x458b0cc4], al; clc; mov esp, ebp; pop ebp; ret; 
0x1c0104de  # add byte ptr [eax], al; add esp, 0xc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c0107c3  # add byte ptr [eax], al; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c01038d  # add byte ptr [eax], al; mov esp, ebp; pop ebp; ret; 
0x1c0104df  # add byte ptr [ebx + 0x458b0cc4], al; clc; mov esp, ebp; pop ebp; ret; 
0x1c011264  # add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x1c011262  # add dword ptr [eax + eax], ebx; pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x1c01038b  # add dword ptr [eax], eax; add byte ptr [eax], al; mov esp, ebp; pop ebp; ret; 
0x1c0111b0  # add dword ptr [eax], eax; mov esp, ebp; pop ebp; ret; 
0x1c010eb4  # add dword ptr [ebx + eax*4], ebx; les eax, ptr [ebx + ecx*4]; in eax, 0x5d; ret; 
0x1c0111a6  # add dword ptr [ecx - 0x2d14f3bb], ecx; mov ecx, dword ptr [ebp - 4]; mov byte ptr [ecx], 0; mov esp, ebp; pop ebp; ret; 
0x1c0104e0  # add esp, 0xc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c010eb6  # add esp, 4; mov esp, ebp; pop ebp; ret; 
0x1c011354  # and al, 4; call dword ptr [0x1c01a138]; push 1; pop eax; ret 0xc; 
0x1c0107c0  # and byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [eax + 1], bh; mov esp, ebp; pop ebp; ret; 
0x1c011356  # call dword ptr [0x1c01a138]; push 1; pop eax; ret 0xc; 
0x1c010eb0  # call dword ptr [0x1c01a15c]; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x1c01014b  # clc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c01014e  # clc; mov esp, ebp; pop ebp; ret; 
0x1c0111ae  # cld; mov byte ptr [ecx], 0; mov esp, ebp; pop ebp; ret; 
0x1c010386  # cld; mov dword ptr [eax + edx*4], ecx; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c010148  # cld; mov dword ptr [ebp - 8], ecx; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c011358  # cmp byte ptr [ecx + 0x16a1c01], ah; pop eax; ret 0xc; 
0x1c0108e4  # dec dword ptr [ebx - 0x1a740bbb]; pop ebp; ret; 
0x1c010fd7  # dec dword ptr [ebx - 0x74a10bbb]; in eax, 0x5d; ret; 
0x1c01014a  # dec ebp; clc; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c0111ad  # dec ebp; cld; mov byte ptr [ecx], 0; mov esp, ebp; pop ebp; ret; 
0x1c0108e7  # hlt; mov esp, ebp; pop ebp; ret; 
0x1c010fda  # hlt; pop esi; mov esp, ebp; pop ebp; ret; 
0x1c0106e2  # in al, 0x83; ret 0x8901; 
0x1c010150  # in eax, 0x5d; ret; 
0x1c01014d  # inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x1c0108e6  # inc ebp; hlt; mov esp, ebp; pop ebp; ret; 
0x1c010fd9  # inc ebp; hlt; pop esi; mov esp, ebp; pop ebp; ret; 
0x1c011301  # inc ebp; or al, 0x5f; pop esi; pop ebx; pop ebp; ret 0xc; 
0x1c010fd2  # je 0x10ede; mov eax, dword ptr [ebp - 0xc]; pop esi; mov esp, ebp; pop ebp; ret; 
0x1c011353  # je 0x11379; add al, 0xff; adc eax, 0x1c01a138; push 1; pop eax; ret 0xc; 
0x1c010eb7  # les eax, ptr [ebx + ecx*4]; in eax, 0x5d; ret; 
0x1c0104e1  # les ecx, ptr [ebx + ecx*4]; inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x1c0111af  # mov byte ptr [ecx], 0; mov esp, ebp; pop ebp; ret; 
0x1c010387  # mov dword ptr [eax + edx*4], ecx; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c010149  # mov dword ptr [ebp - 8], ecx; mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c01038a  # mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c011359  # mov eax, dword ptr [0x16a1c01]; pop eax; ret 0xc; 
0x1c010eb3  # mov eax, dword ptr [0xc4831c01]; add al, 0x8b; in eax, 0x5d; ret; 
0x1c0108e5  # mov eax, dword ptr [ebp - 0xc]; mov esp, ebp; pop ebp; ret; 
0x1c010fd8  # mov eax, dword ptr [ebp - 0xc]; pop esi; mov esp, ebp; pop ebp; ret; 
0x1c01014c  # mov eax, dword ptr [ebp - 8]; mov esp, ebp; pop ebp; ret; 
0x1c0111ac  # mov ecx, dword ptr [ebp - 4]; mov byte ptr [ecx], 0; mov esp, ebp; pop ebp; ret; 
0x1c01014f  # mov esp, ebp; pop ebp; ret; 
0x1c010389  # nop; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c011302  # or al, 0x5f; pop esi; pop ebx; pop ebp; ret 0xc; 
0x1c0104e2  # or al, 0x8b; inc ebp; clc; mov esp, ebp; pop ebp; ret; 
0x1c010388  # or al, 0x90; mov eax, 1; mov esp, ebp; pop ebp; ret; 
0x1c011269  # pop eax; ret 0xc; 
0x1c011306  # pop ebp; ret 0xc; 
0x1c010151  # pop ebp; ret; 
0x1c011305  # pop ebx; pop ebp; ret 0xc; 
0x1c011265  # pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x1c011303  # pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x1c010fdb  # pop esi; mov esp, ebp; pop ebp; ret; 
0x1c011304  # pop esi; pop ebx; pop ebp; ret 0xc; 
0x1c011266  # pop esi; push 1; pop eax; ret 0xc; 
0x1c010eb2  # pop esp; mov eax, dword ptr [0xc4831c01]; add al, 0x8b; in eax, 0x5d; ret; 
0x1c011267  # push 1; pop eax; ret 0xc; 
0x1c011352  # push dword ptr [esp + 4]; call dword ptr [0x1c01a138]; push 1; pop eax; ret 0xc; 
0x1c0106e1  # push ebp; in al, 0x83; ret 0x8901; 
0x1c010eaf  # push edx; call dword ptr [0x1c01a15c]; add esp, 4; mov esp, ebp; pop ebp; ret; 
0x1c010713  # ret 0x4589; 
0x1c0101b0  # ret 0x8901; 
0x1c01126a  # ret 0xc; 
0x1c0103f6  # ret 0xf8d1; 
0x1c010152  # ret; 
0x1c011263  # sbb al, 0; pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x1c010eb5  # sbb al, 0x83; les eax, ptr [ebx + ecx*4]; in eax, 0x5d; ret; 
0x1c011055  # xor eax, eax; mov esp, ebp; pop ebp; ret; 
0x10011b5c  # adc al, 0x30; add dword ptr [eax], edx; ret; 
0x10010e34  # adc al, 0x51; push edx; call dword ptr [0x10013050]; add esp, 0x1000; ret; 
0x10011967  # adc al, 0x5f; pop esi; add esp, 0x28; ret; 
0x100105ec  # adc byte ptr [eax + 1], bh; pop esi; ret; 
0x10012377  # adc byte ptr [eax], al; pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x10011b88  # adc byte ptr [ebp - 0xf38a40], al; adc eax, 0x10013070; xor eax, eax; add esp, 0xc; ret; 
0x10010308  # adc byte ptr [ebx + 0x5f082444], cl; pop esi; pop ecx; ret; 
0x10011963  # adc byte ptr [ebx + 0x5f142444], cl; pop esi; add esp, 0x28; ret; 
0x10010584  # adc byte ptr [ebx - 0x3b7ef73c], al; add byte ptr [eax], ah; add byte ptr [eax], al; ret; 
0x100106a5  # adc byte ptr [edi + 0x5e], bl; mov eax, 1; pop ebx; add esp, 0x800; ret; 
0x10011ff7  # adc byte ptr [edi + 0x5e], bl; or eax, 0xffffffff; pop ebx; add esp, 0x1128; ret; 
0x100106bb  # adc byte ptr [edi + 0x5e], bl; xor eax, eax; pop ebx; add esp, 0x800; ret; 
0x10010385  # adc byte ptr [edi - 0x48], bl; add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; ret; 
0x1001243d  # adc byte ptr [edx + 1], ch; pop eax; ret 0xc; 
0x100105e2  # adc dword ptr [esi - 0x3a], edx; add dword ptr [eax], eax; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x10011b5b  # adc eax, 0x10013014; ret; 
0x1001085b  # adc eax, 0x1001302c; ret; 
0x100105e8  # adc eax, 0x10013034; mov eax, 1; pop esi; ret; 
0x100106fd  # adc eax, 0x10013034; mov eax, edi; pop edi; pop esi; ret; 
0x10010381  # adc eax, 0x10013034; pop edi; mov eax, 1; pop esi; ret; 
0x10010375  # adc eax, 0x10013034; pop edi; xor eax, eax; pop esi; ret; 
0x10010625  # adc eax, 0x10013034; xor eax, eax; pop esi; ret; 
0x10010835  # adc eax, 0x10013044; add esp, 0x1000; ret; 
0x1001088a  # adc eax, 0x10013048; ret; 
0x10010e38  # adc eax, 0x10013050; add esp, 0x1000; ret; 
0x10011052  # adc eax, 0x10013054; mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x1001154b  # adc eax, 0x10013064; mov eax, esi; pop esi; ret; 
0x10011b8e  # adc eax, 0x10013070; xor eax, eax; add esp, 0xc; ret; 
0x1001195f  # adc eax, 0x1001308c; mov eax, dword ptr [esp + 0x14]; pop edi; pop esi; add esp, 0x28; ret; 
0x10012439  # adc eax, 0x10013098; push 1; pop eax; ret 0xc; 
0x100105b6  # adc eax, 0x100130d8; add esp, 4; ret; 
0x100105a0  # adc eax, 0x100130dc; add esp, 0xc; ret; 
0x10010580  # adc eax, 0x100130e0; add esp, 8; add esp, 0x2000; ret; 
0x10010508  # adc eax, 0x100130e4; add esp, 4; add esp, 0x1000; ret; 
0x100104c5  # adc eax, 0x100130e8; add esp, 0x10; ret; 
0x100104a0  # adc eax, 0x100130ec; add esp, 0xc; ret; 
0x100103d5  # adc eax, 0x100130f0; add esp, 0x10; ret; 
0x100103f0  # adc eax, 0x10013100; add esp, 0xc; ret; 
0x1001075b  # add al, 0x10; add byte ptr [eax], al; ret; 
0x100105b3  # add al, 0x50; call dword ptr [0x100130d8]; add esp, 4; ret; 
0x10011b57  # add al, 0x50; push ecx; call dword ptr [0x10013014]; ret; 
0x10010857  # add al, 0x50; push ecx; call dword ptr [0x1001302c]; ret; 
0x100103eb  # add al, 0x50; push ecx; push edx; call dword ptr [0x10013100]; add esp, 0xc; ret; 
0x100122cc  # add al, 0x50; ret; 
0x100107ed  # add al, 0x5f; pop esi; pop ebx; ret; 
0x10012103  # add al, 0x8b; inc eax; sub al, 0x85; sal byte ptr [edi + eax + 0x50], 0xff; adc eax, 0x1001308c; ret; 
0x100114e5  # add al, 0xb8; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x10012437  # add al, 0xff; adc eax, 0x10013098; push 1; pop eax; ret 0xc; 
0x10011a68  # add al, 1; add byte ptr [eax], al; ret; 
0x100105e6  # add bh, bh; adc eax, 0x10013034; mov eax, 1; pop esi; ret; 
0x1001034a  # add byte ptr [eax + 1], bh; pop esi; ret; 
0x1001056d  # add byte ptr [eax], ah; add byte ptr [eax], al; ret; 
0x10011ef9  # add byte ptr [eax], al; add byte ptr [eax], al; pop ebx; add esp, 0x1128; ret; 
0x10011b46  # add byte ptr [eax], al; add byte ptr [edi + 0x5e], bl; ret; 
0x100107af  # add byte ptr [eax], al; add byte ptr [esi - 0x7f], bl; les eax, ptr [eax + edx]; add byte ptr [eax], al; ret; 
0x1001014a  # add byte ptr [eax], al; add esp, 0x20; mov eax, esi; pop edi; pop esi; ret 0xc; 
0x10011a5e  # add byte ptr [eax], al; add esp, 0x2c; mov eax, esi; pop esi; add esp, 0x104; ret; 
0x10011c46  # add byte ptr [eax], al; add esp, 0xc; ret; 
0x10010349  # add byte ptr [eax], al; mov eax, 1; pop esi; ret; 
0x10011efb  # add byte ptr [eax], al; pop ebx; add esp, 0x1128; ret; 
0x100106ab  # add byte ptr [eax], al; pop ebx; add esp, 0x800; ret; 
0x10011b47  # add byte ptr [eax], al; pop edi; pop esi; ret; 
0x100107b0  # add byte ptr [eax], al; pop esi; add esp, 0x1004; ret; 
0x10011922  # add byte ptr [eax], al; pop esi; add esp, 0x100; ret; 
0x1001034e  # add byte ptr [eax], al; pop esi; ret; 
0x100104ff  # add byte ptr [eax], al; ret; 
0x100106b0  # add byte ptr [eax], cl; add byte ptr [eax], al; ret; 
0x100104fd  # add byte ptr [eax], dl; add byte ptr [eax], al; ret; 
0x10010342  # add byte ptr [ebp + 0xd], dh; pop edi; mov word ptr [ecx], 0; mov eax, 1; pop esi; ret; 
0x1001190f  # add byte ptr [ebx + 0x335f28c4], al; rcr byte ptr [esi - 0x7f], 0xc4; add byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x10011773  # add byte ptr [ebx + 0x5e5f24c4], al; pop ebx; add esp, 0x100; ret; 
0x100117f1  # add byte ptr [ebx + 0x5e5f28c4], al; pop ebx; add esp, 0x100; ret; 
0x10012223  # add byte ptr [ebx + 0x5e], bl; pop edi; ret 0x10; 
0x100101d8  # add byte ptr [ebx - 0x377cd73c], al; call ptr [edi + 0x5e]; pop ecx; ret; 
0x10011a5f  # add byte ptr [ebx - 0x3974d33c], al; pop esi; add esp, 0x104; ret; 
0x1001014b  # add byte ptr [ebx - 0x3974df3c], al; pop edi; pop esi; ret 0xc; 
0x10011895  # add byte ptr [ebx - 0x3fccd73c], al; pop edi; pop esi; add esp, 0x100; ret; 
0x10011aeb  # add byte ptr [ebx - 0x5b0cfc1f], al; pop esi; pop edi; add esp, 0x104; ret; 
0x1001057c  # add byte ptr [ecx + 0x52], dl; call dword ptr [0x100130e0]; add esp, 8; add esp, 0x2000; ret; 
0x10012378  # add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x1001167f  # add byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x100103f1  # add byte ptr [ecx], dh; add dword ptr [eax], edx; add esp, 0xc; ret; 
0x100114d0  # add byte ptr [edi + 0x5e], bl; pop ebx; mov esp, ebp; pop ebp; ret 4; 
0x10011371  # add byte ptr [edi + 0x5e], bl; pop ebx; mov esp, ebp; pop ebp; ret; 
0x10011b48  # add byte ptr [edi + 0x5e], bl; ret; 
0x10010832  # add byte ptr [edx - 1], dl; adc eax, 0x10013044; add esp, 0x1000; ret; 
0x10010505  # add byte ptr [edx - 1], dl; adc eax, 0x100130e4; add esp, 4; add esp, 0x1000; ret; 
0x100107b1  # add byte ptr [esi - 0x7f], bl; les eax, ptr [eax + edx]; add byte ptr [eax], al; ret; 
0x10010756  # add dh, byte ptr [ebx]; rol byte ptr [ecx + 0x1004c4], 0; ret; 
0x10012376  # add dl, byte ptr [eax]; add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x10010307  # add dl, byte ptr [eax]; mov eax, dword ptr [esp + 8]; pop edi; pop esi; pop ecx; ret; 
0x10011ec9  # add dword ptr [eax - 7], edi; add esp, 0x1128; ret; 
0x10010348  # add dword ptr [eax], eax; add byte ptr [eax + 1], bh; pop esi; ret; 
0x10011c44  # add dword ptr [eax], eax; add byte ptr [eax], al; add esp, 0xc; ret; 
0x100106a9  # add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; add esp, 0x800; ret; 
0x10011b45  # add dword ptr [eax], eax; add byte ptr [eax], al; pop edi; pop esi; ret; 
0x100107ae  # add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; add esp, 0x1004; ret; 
0x1001034c  # add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; ret; 
0x1001137a  # add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x100105e5  # add dword ptr [eax], eax; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x10010838  # add dword ptr [eax], edx; add esp, 0x1000; ret; 
0x100103d8  # add dword ptr [eax], edx; add esp, 0x10; ret; 
0x1001140e  # add dword ptr [eax], edx; add esp, 0xc; mov eax, 1; pop esi; ret; 
0x100103f3  # add dword ptr [eax], edx; add esp, 0xc; ret; 
0x100105b9  # add dword ptr [eax], edx; add esp, 4; ret; 
0x10010583  # add dword ptr [eax], edx; add esp, 8; add esp, 0x2000; ret; 
0x100105eb  # add dword ptr [eax], edx; mov eax, 1; pop esi; ret; 
0x10011962  # add dword ptr [eax], edx; mov eax, dword ptr [esp + 0x14]; pop edi; pop esi; add esp, 0x28; ret; 
0x10011055  # add dword ptr [eax], edx; mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x1001154e  # add dword ptr [eax], edx; mov eax, esi; pop esi; ret; 
0x10010384  # add dword ptr [eax], edx; pop edi; mov eax, 1; pop esi; ret; 
0x10010378  # add dword ptr [eax], edx; pop edi; xor eax, eax; pop esi; ret; 
0x1001243c  # add dword ptr [eax], edx; push 1; pop eax; ret 0xc; 
0x1001085e  # add dword ptr [eax], edx; ret; 
0x10011b91  # add dword ptr [eax], edx; xor eax, eax; add esp, 0xc; ret; 
0x10010628  # add dword ptr [eax], edx; xor eax, eax; pop esi; ret; 
0x100122c5  # add dword ptr [ebx - 0x74f7741f], ecx; inc eax; add al, 0x50; ret; 
0x1001042f  # add esi, ebx; movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; pop ebx; ret; 
0x10010486  # add esi, ebx; movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; ret; 
0x10011aee  # add esi, ebx; movsb byte ptr es:[edi], byte ptr [esi]; pop esi; pop edi; add esp, 0x104; ret; 
0x100104fb  # add esp, 0x1000; ret; 
0x10010759  # add esp, 0x1004; ret; 
0x1001167d  # add esp, 0x100; ret; 
0x10011a66  # add esp, 0x104; ret; 
0x100103b6  # add esp, 0x10; ret; 
0x10011ce5  # add esp, 0x1128; ret; 
0x1001056b  # add esp, 0x2000; ret; 
0x1001014c  # add esp, 0x20; mov eax, esi; pop edi; pop esi; ret 0xc; 
0x100115c4  # add esp, 0x20; pop edi; pop esi; pop ebx; ret; 
0x10011774  # add esp, 0x24; pop edi; pop esi; pop ebx; add esp, 0x100; ret; 
0x100101d9  # add esp, 0x28; or eax, 0xffffffff; pop edi; pop esi; pop ecx; ret; 
0x100117f2  # add esp, 0x28; pop edi; pop esi; pop ebx; add esp, 0x100; ret; 
0x10011910  # add esp, 0x28; pop edi; xor eax, eax; pop esi; add esp, 0x100; ret; 
0x1001196a  # add esp, 0x28; ret; 
0x10011896  # add esp, 0x28; xor eax, eax; pop edi; pop esi; add esp, 0x100; ret; 
0x10011a60  # add esp, 0x2c; mov eax, esi; pop esi; add esp, 0x104; ret; 
0x1001105b  # add esp, 0x318; ret; 
0x100106ae  # add esp, 0x800; ret; 
0x10011410  # add esp, 0xc; mov eax, 1; pop esi; ret; 
0x100103f5  # add esp, 0xc; ret; 
0x100104f1  # add esp, 0xc; test eax, eax; jne 0x10502; or eax, 0xffffffff; add esp, 0x1000; ret; 
0x10010821  # add esp, 0xc; test eax, eax; jne 0x1082f; add esp, 0x1000; ret; 
0x100114e3  # add esp, 4; mov eax, 1; ret; 
0x100105bb  # add esp, 4; ret; 
0x10010585  # add esp, 8; add esp, 0x2000; ret; 
0x1001071c  # add esp, 8; ret; 
0x10010831  # and al, 0; push edx; call dword ptr [0x10013044]; add esp, 0x1000; ret; 
0x10010504  # and al, 0; push edx; call dword ptr [0x100130e4]; add esp, 4; add esp, 0x1000; ret; 
0x10011966  # and al, 0x14; pop edi; pop esi; add esp, 0x28; ret; 
0x10010e33  # and al, 0x14; push ecx; push edx; call dword ptr [0x10013050]; add esp, 0x1000; ret; 
0x10011776  # and al, 0x5f; pop esi; pop ebx; add esp, 0x100; ret; 
0x10010884  # and al, 0xc; push edx; push eax; push ecx; call dword ptr [0x10013048]; ret; 
0x10011059  # and al, 4; add esp, 0x318; ret; 
0x10012436  # and al, 4; call dword ptr [0x10013098]; push 1; pop eax; ret 0xc; 
0x10010712  # and al, 4; push -1; push eax; call 0x106d0; add esp, 8; ret; 
0x100105b2  # and al, 4; push eax; call dword ptr [0x100130d8]; add esp, 4; ret; 
0x10011b56  # and al, 4; push eax; push ecx; call dword ptr [0x10013014]; ret; 
0x10010856  # and al, 4; push eax; push ecx; call dword ptr [0x1001302c]; ret; 
0x10011b52  # and al, 8; mov ecx, dword ptr [esp + 4]; push eax; push ecx; call dword ptr [0x10013014]; ret; 
0x10010852  # and al, 8; mov ecx, dword ptr [esp + 4]; push eax; push ecx; call dword ptr [0x1001302c]; ret; 
0x100115c6  # and byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x10012372  # and dword ptr [0x1002fdc4], 0; pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x10012373  # and eax, 0x1002fdc4; add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x1001042d  # and ecx, 3; rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; pop ebx; ret; 
0x10010484  # and ecx, 3; rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; ret; 
0x10011aec  # and ecx, 3; rep movsb byte ptr es:[edi], byte ptr [esi]; pop esi; pop edi; add esp, 0x104; ret; 
0x100103b1  # call 0x10320; add esp, 0x10; ret; 
0x1001081c  # call 0x103a0; add esp, 0xc; test eax, eax; jne 0x1082f; add esp, 0x1000; ret; 
0x10010641  # call 0x105c0; add esp, 0x10; ret; 
0x10010717  # call 0x106d0; add esp, 8; ret; 
0x100113f1  # call 0x10a90; mov esi, eax; test esi, esi; jne 0x113fe; pop esi; ret; 
0x100114de  # call 0x113f0; add esp, 4; mov eax, 1; ret; 
0x100115bf  # call 0x11510; add esp, 0x20; pop edi; pop esi; pop ebx; ret; 
0x100104c6  # call 0x831105fb; les edx, ptr [eax]; ret; 
0x10011b5a  # call dword ptr [0x10013014]; ret; 
0x1001085a  # call dword ptr [0x1001302c]; ret; 
0x100105e7  # call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x100106fc  # call dword ptr [0x10013034]; mov eax, edi; pop edi; pop esi; ret; 
0x10010380  # call dword ptr [0x10013034]; pop edi; mov eax, 1; pop esi; ret; 
0x10010374  # call dword ptr [0x10013034]; pop edi; xor eax, eax; pop esi; ret; 
0x10010624  # call dword ptr [0x10013034]; xor eax, eax; pop esi; ret; 
0x10010834  # call dword ptr [0x10013044]; add esp, 0x1000; ret; 
0x10010889  # call dword ptr [0x10013048]; ret; 
0x10010e37  # call dword ptr [0x10013050]; add esp, 0x1000; ret; 
0x10011051  # call dword ptr [0x10013054]; mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x1001154a  # call dword ptr [0x10013064]; mov eax, esi; pop esi; ret; 
0x10011b8d  # call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x1001195e  # call dword ptr [0x1001308c]; mov eax, dword ptr [esp + 0x14]; pop edi; pop esi; add esp, 0x28; ret; 
0x10012438  # call dword ptr [0x10013098]; push 1; pop eax; ret 0xc; 
0x100105b5  # call dword ptr [0x100130d8]; add esp, 4; ret; 
0x1001059f  # call dword ptr [0x100130dc]; add esp, 0xc; ret; 
0x1001057f  # call dword ptr [0x100130e0]; add esp, 8; add esp, 0x2000; ret; 
0x10010507  # call dword ptr [0x100130e4]; add esp, 4; add esp, 0x1000; ret; 
0x100104c4  # call dword ptr [0x100130e8]; add esp, 0x10; ret; 
0x1001049f  # call dword ptr [0x100130ec]; add esp, 0xc; ret; 
0x100103d4  # call dword ptr [0x100130f0]; add esp, 0x10; ret; 
0x100103ef  # call dword ptr [0x10013100]; add esp, 0xc; ret; 
0x10011408  # call dword ptr [esi - 1]; adc eax, 0x100130c8; add esp, 0xc; mov eax, 1; pop esi; ret; 
0x100101de  # call ptr [edi + 0x5e]; pop ecx; ret; 
0x100106fb  # clc; call dword ptr [0x10013034]; mov eax, edi; pop edi; pop esi; ret; 
0x10011cdc  # cmp byte ptr [edi + 0x5e], bl; mov eax, 0xfffffffe; pop ebx; add esp, 0x1128; ret; 
0x1001243a  # cwde; xor byte ptr [ecx], al; adc byte ptr [edx + 1], ch; pop eax; ret 0xc; 
0x10011398  # das; mov eax, 1; ret; 
0x10011489  # dec dword ptr [ecx + 0x10ebfc75]; or eax, 0xffffffff; ret; 
0x1001044e  # dec ecx; pop edi; mov eax, ecx; ret; 
0x1001228e  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x10011b55  # dec esp; and al, 4; push eax; push ecx; call dword ptr [0x10013014]; ret; 
0x10010855  # dec esp; and al, 4; push eax; push ecx; call dword ptr [0x1001302c]; ret; 
0x100113f9  # div byte ptr [ebp + 2]; pop esi; ret; 
0x100105b7  # fdiv dword ptr [eax]; add dword ptr [eax], edx; add esp, 4; ret; 
0x100105a1  # fdiv qword ptr [eax]; add dword ptr [eax], edx; add esp, 0xc; ret; 
0x10011b40  # fdivr st(7); pop esi; ret; 
0x10012222  # fiadd dword ptr [eax]; pop ebx; pop esi; pop edi; ret 0x10; 
0x100114dc  # in al, dx; push ecx; call 0x113f0; add esp, 4; mov eax, 1; ret; 
0x100114d5  # in eax, 0x5d; ret 4; 
0x10011376  # in eax, 0x5d; ret; 
0x10011393  # inc dword ptr [ebx + 0x2feb08c4]; mov eax, 1; ret; 
0x100115c3  # inc dword ptr [ebx + 0x5e5f20c4]; pop ebx; ret; 
0x100104f0  # inc dword ptr [ebx - 0x3f7af33c]; jne 0x10502; or eax, 0xffffffff; add esp, 0x1000; ret; 
0x100122cb  # inc eax; add al, 0x50; ret; 
0x10012105  # inc eax; sub al, 0x85; sal byte ptr [edi + eax + 0x50], 0xff; adc eax, 0x1001308c; ret; 
0x10012415  # inc ebp; or al, 0x5f; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10011965  # inc esp; and al, 0x14; pop edi; pop esi; add esp, 0x28; ret; 
0x10011058  # inc esp; and al, 4; add esp, 0x318; ret; 
0x100105b1  # inc esp; and al, 4; push eax; call dword ptr [0x100130d8]; add esp, 4; ret; 
0x10011488  # into; dec dword ptr [ecx + 0x10ebfc75]; or eax, 0xffffffff; ret; 
0x10010614  # je 0x10624; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x1001104e  # je 0x11057; push eax; call dword ptr [0x10013054]; mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x10011b3a  # je 0x11b49; sbb eax, eax; pop edi; sbb eax, -1; pop esi; ret; 
0x10012435  # je 0x1245b; add al, 0xff; adc eax, 0x10013098; push 1; pop eax; ret 0xc; 
0x10010343  # jne 0x10352; pop edi; mov word ptr [ecx], 0; mov eax, 1; pop esi; ret; 
0x100104f6  # jne 0x10502; or eax, 0xffffffff; add esp, 0x1000; ret; 
0x10010567  # jne 0x10572; xor eax, eax; add esp, 0x2000; ret; 
0x100107ec  # jne 0x107f2; pop edi; pop esi; pop ebx; ret; 
0x10010826  # jne 0x1082f; add esp, 0x1000; ret; 
0x100113fa  # jne 0x113fe; pop esi; ret; 
0x10011b8b  # jne 0x11b99; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011bb4  # jne 0x11bc2; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011bdb  # jne 0x11be9; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011c07  # jne 0x11c15; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011c35  # jne 0x11c43; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011b8f  # jo 0x11bc1; add dword ptr [eax], edx; xor eax, eax; add esp, 0xc; ret; 
0x10011bb8  # jo 0x11bea; add dword ptr [eax], edx; xor eax, eax; add esp, 0xc; ret; 
0x10011bdf  # jo 0x11c11; add dword ptr [eax], edx; xor eax, eax; add esp, 0xc; ret; 
0x10011c39  # jo 0x11c6b; add dword ptr [eax], edx; xor eax, eax; add esp, 0xc; ret; 
0x100113f2  # lcall 0x85f0, 0x8bfffff6; div byte ptr [ebp + 2]; pop esi; ret; 
0x1001082f  # lea edx, [esp]; push edx; call dword ptr [0x10013044]; add esp, 0x1000; ret; 
0x100114e4  # les eax, ptr [eax + edi*4]; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001075a  # les eax, ptr [eax + edx]; add byte ptr [eax], al; ret; 
0x10011a67  # les eax, ptr [ecx + eax]; add byte ptr [eax], al; ret; 
0x100101da  # les ebp, ptr [eax]; or eax, 0xffffffff; pop edi; pop esi; pop ecx; ret; 
0x100117f3  # les ebp, ptr [eax]; pop edi; pop esi; pop ebx; add esp, 0x100; ret; 
0x10011911  # les ebp, ptr [eax]; pop edi; xor eax, eax; pop esi; add esp, 0x100; ret; 
0x1001196b  # les ebp, ptr [eax]; ret; 
0x10011897  # les ebp, ptr [eax]; xor eax, eax; pop edi; pop esi; add esp, 0x100; ret; 
0x10011411  # les ecx, ptr [eax + edi*4]; add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; ret; 
0x10010586  # les ecx, ptr [eax]; add esp, 0x2000; ret; 
0x1001071d  # les ecx, ptr [eax]; ret; 
0x100103b7  # les edx, ptr [eax]; ret; 
0x1001014d  # les esp, ptr [eax]; mov eax, esi; pop edi; pop esi; ret 0xc; 
0x100115c5  # les esp, ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x10011775  # les esp, ptr [edi + ebx*2]; pop esi; pop ebx; add esp, 0x100; ret; 
0x1001042e  # loope 0x10433; rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; pop ebx; ret; 
0x10010485  # loope 0x1048a; rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; ret; 
0x10011aed  # loope 0x11af2; rep movsb byte ptr es:[edi], byte ptr [esi]; pop esi; pop edi; add esp, 0x104; ret; 
0x100105e4  # mov byte ptr [ecx], 0; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x10011ec8  # mov dword ptr [ecx], eax; mov eax, 0xfffffff9; add esp, 0x1128; ret; 
0x10011ef7  # mov dword ptr [edx], 0; pop ebx; add esp, 0x1128; ret; 
0x10010755  # mov dword ptr [edx], eax; xor eax, eax; add esp, 0x1004; ret; 
0x100107aa  # mov dword ptr [esi], eax; pop edi; mov eax, 1; pop esi; add esp, 0x1004; ret; 
0x10010794  # mov dword ptr [esi], eax; xor eax, eax; pop edi; pop esi; add esp, 0x1004; ret; 
0x10011eca  # mov eax, 0xfffffff9; add esp, 0x1128; ret; 
0x10011ef2  # mov eax, 0xfffffff9; mov dword ptr [edx], 0; pop ebx; add esp, 0x1128; ret; 
0x10011cdf  # mov eax, 0xfffffffe; pop ebx; add esp, 0x1128; ret; 
0x10011c43  # mov eax, 1; add esp, 0xc; ret; 
0x100106a8  # mov eax, 1; pop ebx; add esp, 0x800; ret; 
0x10011b44  # mov eax, 1; pop edi; pop esi; ret; 
0x100107ad  # mov eax, 1; pop esi; add esp, 0x1004; ret; 
0x1001191f  # mov eax, 1; pop esi; add esp, 0x100; ret; 
0x1001034b  # mov eax, 1; pop esi; ret; 
0x10011379  # mov eax, 1; ret; 
0x10012104  # mov eax, dword ptr [eax + 0x2c]; test eax, eax; je 0x12112; push eax; call dword ptr [0x1001308c]; ret; 
0x100122ca  # mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10012414  # mov eax, dword ptr [ebp + 0xc]; pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10011964  # mov eax, dword ptr [esp + 0x14]; pop edi; pop esi; add esp, 0x28; ret; 
0x10011057  # mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x100105b0  # mov eax, dword ptr [esp + 4]; push eax; call dword ptr [0x100130d8]; add esp, 4; ret; 
0x10010450  # mov eax, ecx; ret; 
0x1001196e  # mov eax, edi; pop edi; pop esi; add esp, 0x28; ret; 
0x100108ff  # mov eax, edi; pop edi; pop esi; pop ebx; add esp, 0x1000; ret; 
0x10010702  # mov eax, edi; pop edi; pop esi; ret; 
0x10010482  # mov eax, edx; and ecx, 3; rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; ret; 
0x100107f2  # mov eax, esi; pop edi; pop esi; pop ebx; ret; 
0x1001014f  # mov eax, esi; pop edi; pop esi; ret 0xc; 
0x10011a63  # mov eax, esi; pop esi; add esp, 0x104; ret; 
0x10012291  # mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x10011550  # mov eax, esi; pop esi; ret; 
0x100122c8  # mov ecx, dword ptr [eax]; mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10011b54  # mov ecx, dword ptr [esp + 4]; push eax; push ecx; call dword ptr [0x10013014]; ret; 
0x10010854  # mov ecx, dword ptr [esp + 4]; push eax; push ecx; call dword ptr [0x1001302c]; ret; 
0x100106fa  # mov edi, eax; call dword ptr [0x10013034]; mov eax, edi; pop edi; pop esi; ret; 
0x100113f6  # mov esi, eax; test esi, esi; jne 0x113fe; pop esi; ret; 
0x100114d4  # mov esp, ebp; pop ebp; ret 4; 
0x10011375  # mov esp, ebp; pop ebp; ret; 
0x100122c6  # mov esp, ecx; mov ecx, dword ptr [eax]; mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10010346  # mov word ptr [ecx], 0; mov eax, 1; pop esi; ret; 
0x10010431  # movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; pop ebx; ret; 
0x10010488  # movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; ret; 
0x10011af0  # movsb byte ptr es:[edi], byte ptr [esi]; pop esi; pop edi; add esp, 0x104; ret; 
0x1001221f  # neg eax; sbb edx, 0; pop ebx; pop esi; pop edi; ret 0x10; 
0x100105af  # nop; mov eax, dword ptr [esp + 4]; push eax; call dword ptr [0x100130d8]; add esp, 4; ret; 
0x1001211b  # nop; nop; nop; nop; nop; ret; 
0x1001211c  # nop; nop; nop; nop; ret; 
0x1001211d  # nop; nop; nop; ret; 
0x1001211e  # nop; nop; ret; 
0x1001211f  # nop; ret; 
0x1001044c  # not ecx; dec ecx; pop edi; mov eax, ecx; ret; 
0x1001059b  # or al, 0x50; push ecx; push edx; call dword ptr [0x100130dc]; add esp, 0xc; ret; 
0x1001049b  # or al, 0x50; push ecx; push edx; call dword ptr [0x100130ec]; add esp, 0xc; ret; 
0x10010885  # or al, 0x52; push eax; push ecx; call dword ptr [0x10013048]; ret; 
0x10012416  # or al, 0x5f; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10011412  # or al, 0xb8; add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; ret; 
0x10011b8c  # or al, 0xff; adc eax, 0x10013070; xor eax, eax; add esp, 0xc; ret; 
0x100104f7  # or al, byte ptr [ebx - 0x3b7e0038]; add byte ptr [eax], dl; add byte ptr [eax], al; ret; 
0x10011396  # or bl, ch; das; mov eax, 1; ret; 
0x100107e9  # or byte ptr [ebp + 0x5f0475c0], al; pop esi; pop ebx; ret; 
0x10011b53  # or byte ptr [ebx + 0x5004244c], cl; push ecx; call dword ptr [0x10013014]; ret; 
0x10010853  # or byte ptr [ebx + 0x5004244c], cl; push ecx; call dword ptr [0x1001302c]; ret; 
0x100104c0  # or byte ptr [ecx + 0x52], dl; push eax; call dword ptr [0x100130e8]; add esp, 0x10; ret; 
0x100103d0  # or byte ptr [ecx + 0x52], dl; push eax; call dword ptr [0x100130f0]; add esp, 0x10; ret; 
0x10010752  # or byte ptr [edi + 0x5e], bl; mov dword ptr [edx], eax; xor eax, eax; add esp, 0x1004; ret; 
0x10010568  # or dword ptr [ebx], esi; rol byte ptr [ecx + 0x2000c4], 0; ret; 
0x10010344  # or eax, 0x1c7665f; add byte ptr [eax], al; mov eax, 1; pop esi; ret; 
0x10011b3b  # or eax, 0x835fc01b; fdivr st(7); pop esi; ret; 
0x100114df  # or eax, 0x83ffffff; les eax, ptr [eax + edi*4]; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x100104f8  # or eax, 0xffffffff; add esp, 0x1000; ret; 
0x100108f4  # or eax, 0xffffffff; pop ebx; add esp, 0x1000; ret; 
0x10011ffa  # or eax, 0xffffffff; pop ebx; add esp, 0x1128; ret; 
0x100101dc  # or eax, 0xffffffff; pop edi; pop esi; pop ecx; ret; 
0x10011554  # or eax, 0xffffffff; pop esi; ret; 
0x1001148f  # or eax, 0xffffffff; ret; 
0x1001237d  # pop eax; ret 0xc; 
0x1001167b  # pop ebp; pop ebx; add esp, 0x100; ret; 
0x1001241a  # pop ebp; ret 0xc; 
0x100114d6  # pop ebp; ret 4; 
0x10011377  # pop ebp; ret; 
0x100116df  # pop ebp; xor eax, eax; pop ebx; add esp, 0x100; ret; 
0x100108f7  # pop ebx; add esp, 0x1000; ret; 
0x1001167c  # pop ebx; add esp, 0x100; ret; 
0x10011ce4  # pop ebx; add esp, 0x1128; ret; 
0x100106ad  # pop ebx; add esp, 0x800; ret; 
0x10011ec7  # pop ebx; mov dword ptr [ecx], eax; mov eax, 0xfffffff9; add esp, 0x1128; ret; 
0x100114d3  # pop ebx; mov esp, ebp; pop ebp; ret 4; 
0x10011374  # pop ebx; mov esp, ebp; pop ebp; ret; 
0x10012419  # pop ebx; pop ebp; ret 0xc; 
0x10012224  # pop ebx; pop esi; pop edi; ret 0x10; 
0x10012294  # pop ebx; ret 0x10; 
0x10010434  # pop ebx; ret; 
0x10012379  # pop ecx; pop esi; push 1; pop eax; ret 0xc; 
0x100101e1  # pop ecx; ret; 
0x10011af2  # pop edi; add esp, 0x104; ret; 
0x100107ac  # pop edi; mov eax, 1; pop esi; add esp, 0x1004; ret; 
0x1001191e  # pop edi; mov eax, 1; pop esi; add esp, 0x100; ret; 
0x10010386  # pop edi; mov eax, 1; pop esi; ret; 
0x1001044f  # pop edi; mov eax, ecx; ret; 
0x10010345  # pop edi; mov word ptr [ecx], 0; mov eax, 1; pop esi; ret; 
0x10010798  # pop edi; pop esi; add esp, 0x1004; ret; 
0x1001189b  # pop edi; pop esi; add esp, 0x100; ret; 
0x10011968  # pop edi; pop esi; add esp, 0x28; ret; 
0x10010753  # pop edi; pop esi; mov dword ptr [edx], eax; xor eax, eax; add esp, 0x1004; ret; 
0x10011cdd  # pop edi; pop esi; mov eax, 0xfffffffe; pop ebx; add esp, 0x1128; ret; 
0x100106a6  # pop edi; pop esi; mov eax, 1; pop ebx; add esp, 0x800; ret; 
0x100108f2  # pop edi; pop esi; or eax, 0xffffffff; pop ebx; add esp, 0x1000; ret; 
0x10011ff8  # pop edi; pop esi; or eax, 0xffffffff; pop ebx; add esp, 0x1128; ret; 
0x10011679  # pop edi; pop esi; pop ebp; pop ebx; add esp, 0x100; ret; 
0x10011777  # pop edi; pop esi; pop ebx; add esp, 0x100; ret; 
0x100114d1  # pop edi; pop esi; pop ebx; mov esp, ebp; pop ebp; ret 4; 
0x10011372  # pop edi; pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x10012417  # pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10010432  # pop edi; pop esi; pop ebx; ret; 
0x100101df  # pop edi; pop esi; pop ecx; ret; 
0x10010151  # pop edi; pop esi; ret 0xc; 
0x10010489  # pop edi; pop esi; ret; 
0x100106bc  # pop edi; pop esi; xor eax, eax; pop ebx; add esp, 0x800; ret; 
0x10012226  # pop edi; ret 0x10; 
0x10011b3e  # pop edi; sbb eax, -1; pop esi; ret; 
0x10011913  # pop edi; xor eax, eax; pop esi; add esp, 0x100; ret; 
0x1001037a  # pop edi; xor eax, eax; pop esi; ret; 
0x10010827  # pop es; add esp, 0x1000; ret; 
0x1001104f  # pop es; push eax; call dword ptr [0x10013054]; mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x10010799  # pop esi; add esp, 0x1004; ret; 
0x1001189c  # pop esi; add esp, 0x100; ret; 
0x10011a65  # pop esi; add esp, 0x104; ret; 
0x10011969  # pop esi; add esp, 0x28; ret; 
0x10010566  # pop esi; jne 0x10572; xor eax, eax; add esp, 0x2000; ret; 
0x10010754  # pop esi; mov dword ptr [edx], eax; xor eax, eax; add esp, 0x1004; ret; 
0x10011ef1  # pop esi; mov eax, 0xfffffff9; mov dword ptr [edx], 0; pop ebx; add esp, 0x1128; ret; 
0x10011cde  # pop esi; mov eax, 0xfffffffe; pop ebx; add esp, 0x1128; ret; 
0x100106a7  # pop esi; mov eax, 1; pop ebx; add esp, 0x800; ret; 
0x100108f3  # pop esi; or eax, 0xffffffff; pop ebx; add esp, 0x1000; ret; 
0x10011ff9  # pop esi; or eax, 0xffffffff; pop ebx; add esp, 0x1128; ret; 
0x1001167a  # pop esi; pop ebp; pop ebx; add esp, 0x100; ret; 
0x100116de  # pop esi; pop ebp; xor eax, eax; pop ebx; add esp, 0x100; ret; 
0x10011778  # pop esi; pop ebx; add esp, 0x100; ret; 
0x10011ec6  # pop esi; pop ebx; mov dword ptr [ecx], eax; mov eax, 0xfffffff9; add esp, 0x1128; ret; 
0x100114d2  # pop esi; pop ebx; mov esp, ebp; pop ebp; ret 4; 
0x10011373  # pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x10012418  # pop esi; pop ebx; pop ebp; ret 0xc; 
0x10012293  # pop esi; pop ebx; ret 0x10; 
0x10010433  # pop esi; pop ebx; ret; 
0x100101e0  # pop esi; pop ecx; ret; 
0x10011af1  # pop esi; pop edi; add esp, 0x104; ret; 
0x10012225  # pop esi; pop edi; ret 0x10; 
0x1001237a  # pop esi; push 1; pop eax; ret 0xc; 
0x10010152  # pop esi; ret 0xc; 
0x10010350  # pop esi; ret; 
0x100106bd  # pop esi; xor eax, eax; pop ebx; add esp, 0x800; ret; 
0x10010714  # push -1; push eax; call 0x106d0; add esp, 8; ret; 
0x100103ae  # push -1; push edx; call 0x10320; add esp, 0x10; ret; 
0x1001063e  # push -1; push edx; call 0x105c0; add esp, 0x10; ret; 
0x1001237b  # push 1; pop eax; ret 0xc; 
0x10010615  # push cs; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x10012434  # push dword ptr [esp + 4]; call dword ptr [0x10013098]; push 1; pop eax; ret 0xc; 
0x10010716  # push eax; call 0x106d0; add esp, 8; ret; 
0x10010373  # push eax; call dword ptr [0x10013034]; pop edi; xor eax, eax; pop esi; ret; 
0x10011050  # push eax; call dword ptr [0x10013054]; mov eax, dword ptr [esp + 4]; add esp, 0x318; ret; 
0x100105b4  # push eax; call dword ptr [0x100130d8]; add esp, 4; ret; 
0x100104c3  # push eax; call dword ptr [0x100130e8]; add esp, 0x10; ret; 
0x100103d3  # push eax; call dword ptr [0x100130f0]; add esp, 0x10; ret; 
0x10011b58  # push eax; push ecx; call dword ptr [0x10013014]; ret; 
0x10010858  # push eax; push ecx; call dword ptr [0x1001302c]; ret; 
0x10010887  # push eax; push ecx; call dword ptr [0x10013048]; ret; 
0x1001059c  # push eax; push ecx; push edx; call dword ptr [0x100130dc]; add esp, 0xc; ret; 
0x1001049c  # push eax; push ecx; push edx; call dword ptr [0x100130ec]; add esp, 0xc; ret; 
0x100103ec  # push eax; push ecx; push edx; call dword ptr [0x10013100]; add esp, 0xc; ret; 
0x100122cd  # push eax; ret; 
0x100114dd  # push ecx; call 0x113f0; add esp, 4; mov eax, 1; ret; 
0x10011b59  # push ecx; call dword ptr [0x10013014]; ret; 
0x10010859  # push ecx; call dword ptr [0x1001302c]; ret; 
0x10010888  # push ecx; call dword ptr [0x10013048]; ret; 
0x100103ad  # push ecx; push -1; push edx; call 0x10320; add esp, 0x10; ret; 
0x1001063d  # push ecx; push -1; push edx; call 0x105c0; add esp, 0x10; ret; 
0x10010e35  # push ecx; push edx; call dword ptr [0x10013050]; add esp, 0x1000; ret; 
0x1001059d  # push ecx; push edx; call dword ptr [0x100130dc]; add esp, 0xc; ret; 
0x1001057d  # push ecx; push edx; call dword ptr [0x100130e0]; add esp, 8; add esp, 0x2000; ret; 
0x1001049d  # push ecx; push edx; call dword ptr [0x100130ec]; add esp, 0xc; ret; 
0x100103ed  # push ecx; push edx; call dword ptr [0x10013100]; add esp, 0xc; ret; 
0x100104c1  # push ecx; push edx; push eax; call dword ptr [0x100130e8]; add esp, 0x10; ret; 
0x100103d1  # push ecx; push edx; push eax; call dword ptr [0x100130f0]; add esp, 0x10; ret; 
0x100103b0  # push edx; call 0x10320; add esp, 0x10; ret; 
0x10010640  # push edx; call 0x105c0; add esp, 0x10; ret; 
0x10010833  # push edx; call dword ptr [0x10013044]; add esp, 0x1000; ret; 
0x10010e36  # push edx; call dword ptr [0x10013050]; add esp, 0x1000; ret; 
0x1001059e  # push edx; call dword ptr [0x100130dc]; add esp, 0xc; ret; 
0x1001057e  # push edx; call dword ptr [0x100130e0]; add esp, 8; add esp, 0x2000; ret; 
0x10010506  # push edx; call dword ptr [0x100130e4]; add esp, 4; add esp, 0x1000; ret; 
0x1001049e  # push edx; call dword ptr [0x100130ec]; add esp, 0xc; ret; 
0x100103ee  # push edx; call dword ptr [0x10013100]; add esp, 0xc; ret; 
0x100104c2  # push edx; push eax; call dword ptr [0x100130e8]; add esp, 0x10; ret; 
0x100103d2  # push edx; push eax; call dword ptr [0x100130f0]; add esp, 0x10; ret; 
0x10010886  # push edx; push eax; push ecx; call dword ptr [0x10013048]; ret; 
0x10011548  # push edx; push esi; call dword ptr [0x10013064]; mov eax, esi; pop esi; ret; 
0x100107ab  # push es; pop edi; mov eax, 1; pop esi; add esp, 0x1004; ret; 
0x10010795  # push es; xor eax, eax; pop edi; pop esi; add esp, 0x1004; ret; 
0x1001037f  # push esi; call dword ptr [0x10013034]; pop edi; mov eax, 1; pop esi; ret; 
0x1001038e  # push esi; call dword ptr [0x10013034]; pop edi; xor eax, eax; pop esi; ret; 
0x10010623  # push esi; call dword ptr [0x10013034]; xor eax, eax; pop esi; ret; 
0x10011549  # push esi; call dword ptr [0x10013064]; mov eax, esi; pop esi; ret; 
0x10010613  # push esi; je 0x10624; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x100105e3  # push esi; mov byte ptr [ecx], 0; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x10010830  # push esp; and al, 0; push edx; call dword ptr [0x10013044]; add esp, 0x1000; ret; 
0x10010612  # rcl byte ptr [esi + 0x74], 0xe; call dword ptr [0x10013034]; mov eax, 1; pop esi; ret; 
0x100106bf  # rcr byte ptr [ebx - 0x7f], 0xc4; add byte ptr [eax], cl; add byte ptr [eax], al; ret; 
0x100116e1  # rcr byte ptr [ebx - 0x7f], 0xc4; add byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x10010797  # rcr byte ptr [edi + 0x5e], 0x81; les eax, ptr [eax + edx]; add byte ptr [eax], al; ret; 
0x10011afb  # rcr byte ptr [edi - 0x7f], 0xc4; add al, 1; add byte ptr [eax], al; ret; 
0x10011915  # rcr byte ptr [esi - 0x7f], 0xc4; add byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x10010430  # rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; pop ebx; ret; 
0x10010487  # rep movsb byte ptr es:[edi], byte ptr [esi]; pop edi; pop esi; ret; 
0x10011aef  # rep movsb byte ptr es:[edi], byte ptr [esi]; pop esi; pop edi; add esp, 0x104; ret; 
0x1001044a  # repne scasb al, byte ptr es:[edi]; not ecx; dec ecx; pop edi; mov eax, ecx; ret; 
0x10012227  # ret 0x10; 
0x10010153  # ret 0xc; 
0x10010483  # ret 0xe183; 
0x100114d7  # ret 4; 
0x100101e2  # ret; 
0x10010758  # rol byte ptr [ecx + 0x1004c4], 0; ret; 
0x1001056a  # rol byte ptr [ecx + 0x2000c4], 0; ret; 
0x1001044d  # ror dword ptr [ecx + 0x5f], 1; mov eax, ecx; ret; 
0x10011b8a  # sal byte ptr [ebp + 0xc], 0xff; adc eax, 0x10013070; xor eax, eax; add esp, 0xc; ret; 
0x100107eb  # sal byte ptr [ebp + 4], 0x5f; pop esi; pop ebx; ret; 
0x10012108  # sal byte ptr [edi + eax + 0x50], 0xff; adc eax, 0x1001308c; ret; 
0x10010449  # sal dl, 0xae; not ecx; dec ecx; pop edi; mov eax, ecx; ret; 
0x10010563  # sbb byte ptr [ebp + 0x9755ec6], al; xor eax, eax; add esp, 0x2000; ret; 
0x1001105d  # sbb byte ptr [ebx], al; add byte ptr [eax], al; ret; 
0x10011547  # sbb byte ptr [edx + 0x56], dl; call dword ptr [0x10013064]; mov eax, esi; pop esi; ret; 
0x10011b3f  # sbb eax, -1; pop esi; ret; 
0x10011b3c  # sbb eax, eax; pop edi; sbb eax, -1; pop esi; ret; 
0x10012221  # sbb edx, 0; pop ebx; pop esi; pop edi; ret 0x10; 
0x1001044b  # scasb al, byte ptr es:[edi]; not ecx; dec ecx; pop edi; mov eax, ecx; ret; 
0x10012375  # std; add dl, byte ptr [eax]; add byte ptr [ecx + 0x5e], bl; push 1; pop eax; ret 0xc; 
0x1001085c  # sub al, 0x30; add dword ptr [eax], edx; ret; 
0x10012106  # sub al, 0x85; sal byte ptr [edi + eax + 0x50], 0xff; adc eax, 0x1001308c; ret; 
0x100101db  # sub byte ptr [ebx + 0x5e5fffc8], al; pop ecx; ret; 
0x10011ce7  # sub byte ptr [ecx], dl; add byte ptr [eax], al; ret; 
0x10011912  # sub byte ptr [edi + 0x33], bl; rcr byte ptr [esi - 0x7f], 0xc4; add byte ptr [ecx], al; add byte ptr [eax], al; ret; 
0x100117f4  # sub byte ptr [edi + 0x5e], bl; pop ebx; add esp, 0x100; ret; 
0x100122c4  # test dword ptr [ecx], eax; mov esp, ecx; mov ecx, dword ptr [eax]; mov eax, dword ptr [eax + 4]; push eax; ret; 
0x10012107  # test eax, eax; je 0x12112; push eax; call dword ptr [0x1001308c]; ret; 
0x100104f4  # test eax, eax; jne 0x10502; or eax, 0xffffffff; add esp, 0x1000; ret; 
0x100107ea  # test eax, eax; jne 0x107f2; pop edi; pop esi; pop ebx; ret; 
0x10010824  # test eax, eax; jne 0x1082f; add esp, 0x1000; ret; 
0x10011b89  # test eax, eax; jne 0x11b99; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011bb2  # test eax, eax; jne 0x11bc2; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011bd9  # test eax, eax; jne 0x11be9; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011c05  # test eax, eax; jne 0x11c15; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10011c33  # test eax, eax; jne 0x11c43; call dword ptr [0x10013070]; xor eax, eax; add esp, 0xc; ret; 
0x10010564  # test esi, eax; pop esi; jne 0x10572; xor eax, eax; add esp, 0x2000; ret; 
0x100113f8  # test esi, esi; jne 0x113fe; pop esi; ret; 
0x100105e9  # xor al, 0x30; add dword ptr [eax], edx; mov eax, 1; pop esi; ret; 
0x100106fe  # xor al, 0x30; add dword ptr [eax], edx; mov eax, edi; pop edi; pop esi; ret; 
0x10010382  # xor al, 0x30; add dword ptr [eax], edx; pop edi; mov eax, 1; pop esi; ret; 
0x10010376  # xor al, 0x30; add dword ptr [eax], edx; pop edi; xor eax, eax; pop esi; ret; 
0x10010626  # xor al, 0x30; add dword ptr [eax], edx; xor eax, eax; pop esi; ret; 
0x100105ea  # xor byte ptr [ecx], al; adc byte ptr [eax + 1], bh; pop esi; ret; 
0x10011961  # xor byte ptr [ecx], al; adc byte ptr [ebx + 0x5f142444], cl; pop esi; add esp, 0x28; ret; 
0x10010582  # xor byte ptr [ecx], al; adc byte ptr [ebx - 0x3b7ef73c], al; add byte ptr [eax], ah; add byte ptr [eax], al; ret; 
0x10010383  # xor byte ptr [ecx], al; adc byte ptr [edi - 0x48], bl; add dword ptr [eax], eax; add byte ptr [eax], al; pop esi; ret; 
0x1001243b  # xor byte ptr [ecx], al; adc byte ptr [edx + 1], ch; pop eax; ret 0xc; 
0x10010757  # xor eax, eax; add esp, 0x1004; ret; 
0x10010569  # xor eax, eax; add esp, 0x2000; ret; 
0x10011b93  # xor eax, eax; add esp, 0xc; ret; 
0x100116e0  # xor eax, eax; pop ebx; add esp, 0x100; ret; 
0x100106be  # xor eax, eax; pop ebx; add esp, 0x800; ret; 
0x10011afa  # xor eax, eax; pop edi; add esp, 0x104; ret; 
0x10010796  # xor eax, eax; pop edi; pop esi; add esp, 0x1004; ret; 
0x10011899  # xor eax, eax; pop edi; pop esi; add esp, 0x100; ret; 
0x10011914  # xor eax, eax; pop esi; add esp, 0x100; ret; 
0x1001037b  # xor eax, eax; pop esi; ret; 
0x1001228f  # xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x1002126f  # aad 0; add byte ptr [eax], al; mov ecx, 0x10036c98; call 0x21348; leave; ret; 
0x1001024e  # aad 0x5f; pop esi; pop ebp; pop ebx; pop ecx; ret; 
0x10017836  # aam 0x33; add edx, dword ptr [eax]; add byte ptr [ecx + 0x100333ec], ah; pop ecx; ret; 
0x10017824  # aam 0x33; add edx, dword ptr [eax]; ret; 
0x1002166f  # aam 0x79; add dl, byte ptr [eax]; ret 4; 
0x1001f7d5  # aam 0x8b; fsubr st(0); ret; 
0x10017ed3  # aam 0xff; call ptr [ecx + 0x59]; ret; 
0x100150d4  # aas; push dword ptr [edi + eax - 0x75]; ret; 
0x1001df1e  # adc al, 0; add byte ptr [ebx + 0x5d8bc055], cl; ret 0x758b; 
0x1001d2dd  # adc al, 0x3b; ret; 
0x100206fd  # adc al, 0x50; mov ecx, esi; call dword ptr [edi + 8]; pop edi; pop esi; ret; 
0x1001411f  # adc al, 0x5f; pop esi; pop ebx; inc dword ptr [eax]; pop ebp; ret; 
0x10013b95  # adc al, 0x5f; pop esi; pop ebx; leave; ret; 
0x10014781  # adc al, 0x7d; or eax, dword ptr [ebx - 0x17afe340]; mov bl, 0xb; add byte ptr [eax], al; pop ecx; ret; 
0x100147d3  # adc al, 0x7d; or eax, dword ptr [ebx - 0x17afe340]; ret 0xb; 
0x100173f2  # adc al, 0x83; clc; push dword ptr [ebp + 4]; or eax, eax; pop ebp; ret; 
0x10022f63  # adc al, 0x85; sar byte ptr [eax + 0xffff], 0x7c; add al, 0xf; mov bh, 0x45; dec cl; ret; 
0x100108ea  # adc al, 0xe8; add al, 0; add byte ptr [eax], al; add esp, 0x14; ret; 
0x10014f17  # adc al, 0xf6; ret; 
0x10022a19  # adc al, 0xf; xchg ebp, eax; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x10022b7b  # adc al, byte ptr [eax]; add byte ptr [ebx + 0x645ef44d], cl; mov dword ptr [0], ecx; leave; ret; 
0x10016154  # adc al, ch; cmp dl, byte ptr [ecx]; add byte ptr [eax], al; add esp, 0x10; ret; 
0x10020f8b  # adc al, ch; fiadd dword ptr [esi]; add byte ptr [eax], al; ret; 
0x1001fda2  # adc al, ch; in al, 2; add byte ptr [eax], al; ret; 
0x1001ed56  # adc al, ch; in eax, 6; add byte ptr [eax], al; add esp, 0x10; ret; 
0x1001fe13  # adc al, ch; jae 0x1fe19; add byte ptr [eax], al; ret; 
0x1002106f  # adc al, ch; je 0x21075; add byte ptr [eax], al; ret; 
0x1001fd02  # adc al, ch; jg 0x1fd0d; add byte ptr [eax], al; ret; 
0x10020fb8  # adc al, ch; lodsd eax, dword ptr [esi]; push es; add byte ptr [eax], al; ret; 
0x10012196  # adc al, ch; mov bh, 0x4f; add byte ptr [eax], al; add esp, 0x10; ret; 
0x10020ee5  # adc al, ch; pop edi; ret 0xfffe; 
0x10020f5e  # adc al, ch; pop es; pop es; add byte ptr [eax], al; ret; 
0x1001fde4  # adc al, ch; popfd; push es; add byte ptr [eax], al; ret; 
0x10021036  # adc al, ch; push cs; sar esi, 0xff; pop ecx; ret; 
0x10020ef1  # adc al, ch; push ebx; ret 0xfffe; 
0x1001fd2f  # adc al, ch; push edx; pop es; add byte ptr [eax], al; ret; 
0x10020ff2  # adc al, ch; push edx; sar esi, 0xff; pop ecx; ret; 
0x100241a9  # adc al, ch; push esp; add eax, dword ptr [eax]; add byte ptr [ebx], ah; ret 0xc483; 
0x1001f998  # adc al, ch; ret 0xfed8; 
0x1001d5f8  # adc al, ch; ret 0xff20; 
0x10021277  # adc al, ch; retf; add byte ptr [eax], al; add cl, cl; ret; 
0x10020f96  # adc al, ch; scasb al, byte ptr es:[edi]; sar esi, 0xff; pop ecx; ret; 
0x100210a9  # adc al, ch; wait; sar dh, 0xff; pop ecx; ret; 
0x1001232c  # adc al, ch; xchg dword ptr [edx - 0x27090000], eax; pop ecx; pop esi; sbb eax, eax; ret; 
0x1001b69f  # adc bh, al; add eax, 0x10036998; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x10018d3b  # adc bh, al; add eax, 0x10037108; adc byte ptr [eax], al; add byte ptr [eax], al; pop eax; ret; 
0x100153ad  # adc bh, bh; adc eax, 0x10025078; pop ebp; ret; 
0x10021e6a  # adc bh, bh; adc eax, 0x10025078; ret; 
0x10021e55  # adc bh, bh; adc eax, 0x1002508c; ret; 
0x1001d6d3  # adc bh, bh; adc eax, 0x100250b8; test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7c7  # adc bh, bh; adc eax, 0x100250b8; test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x10019df1  # adc bh, bh; adc eax, 0x10025254; pop esi; ret; 
0x100130cf  # adc bh, bh; adc eax, 0x10025264; pop esi; ret; 
0x100131fd  # adc bh, bh; adc eax, 0x10025278; mov dword ptr [0x100366c4], eax; ret; 
0x1001320f  # adc bh, bh; adc eax, 0x10025278; ret; 
0x100144c9  # adc bh, bh; adc eax, 0x100252b4; pop edi; pop esi; ret; 
0x1001441d  # adc bh, bh; adc eax, 0x100252b4; xor eax, eax; ret; 
0x1002466c  # adc bh, bh; jne 0x24660; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002467c  # adc bh, bh; jne 0x24670; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002468c  # adc bh, bh; jne 0x24680; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002469c  # adc bh, bh; jne 0x24690; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100246ac  # adc bh, bh; jne 0x246a0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100246bc  # adc bh, bh; jne 0x246b0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100246cc  # adc bh, bh; jne 0x246c0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247cc  # adc bh, bh; jne 0x247c0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247dc  # adc bh, bh; jne 0x247d0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247ec  # adc bh, bh; jne 0x247e0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247fc  # adc bh, bh; jne 0x247f0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002481c  # adc bh, bh; jne 0x24810; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002482c  # adc bh, bh; jne 0x24820; call 0x1ffde; pop ecx; pop ecx; ret; 
0x10019dff  # adc bh, bh; pop esi; ret; 
0x10012fbb  # adc bh, bh; ret; 
0x100152cf  # adc bh, bh; salc; pop esi; ret; 
0x100152c7  # adc bh, bh; salc; push dword ptr [0x100331ec]; call esi; pop esi; ret; 
0x1001533a  # adc bh, bh; xlatb; pop edi; pop esi; ret; 
0x1001d79a  # adc bh, dh; rol cl, 1; call 0x1e25aa5; pop esi; leave; ret 4; 
0x1001d857  # adc bh, dh; rol cl, 1; call 0x1e25b62; pop esi; leave; ret 4; 
0x100218cd  # adc bl, ch; add al, 0x66; or eax, 0x5e5fffff; pop ebx; ret 4; 
0x100206ce  # adc bl, ch; add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; ret 4; 
0x1001bcd0  # adc bl, ch; sbb al, 0x8b; ret; 
0x1001b818  # adc bl, ch; sbb al, 0xf6; ret 0x7402; 
0x1001a7ef  # adc byte ptr [eax + ebp*4], cl; add dword ptr [eax], edx; and byte ptr [eax + 0x458b1001], ch; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x10013e1a  # adc byte ptr [eax + edi*4 + 0x5f], bh; pop esi; pop ebx; ret; 
0x1001f85a  # adc byte ptr [eax - 0x7d], dl; ret; 
0x1001ad4d  # adc byte ptr [eax - 0xa], bl; ret; 
0x100153c1  # adc byte ptr [eax - 1], ch; add byte ptr [eax], al; add bh, bh; adc eax, 0x1002527c; ret; 
0x10014654  # adc byte ptr [eax - 1], dl; adc eax, 0x1002516c; pop esi; leave; ret; 
0x1001332c  # adc byte ptr [eax], ah; add byte ptr [eax], al; pop ecx; ret; 
0x10019f54  # adc byte ptr [eax], ah; jne 0x19f60; push 0x10; call 0x19e03; pop ecx; ret; 
0x1001a7f3  # adc byte ptr [eax], ah; test al, 1; adc byte ptr [ebx + 0x5f5e0845], cl; leave; ret; 
0x10018d42  # adc byte ptr [eax], al; add byte ptr [eax], al; pop eax; ret; 
0x10022d19  # adc byte ptr [eax], al; add byte ptr [ebx + 0x645ef44d], cl; mov dword ptr [0], ecx; leave; ret; 
0x1001bf33  # adc byte ptr [eax], al; jne 0x1bf3b; xor eax, eax; pop ebp; ret; 
0x10017839  # adc byte ptr [eax], al; mov eax, dword ptr [0x100333ec]; pop ecx; ret; 
0x1001c689  # adc byte ptr [eax], al; pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x10019915  # adc byte ptr [eax], al; ret; 
0x10016954  # adc byte ptr [ebp + 0x2ebc804], cl; xor eax, eax; pop edi; pop esi; ret; 
0x10016123  # adc byte ptr [ebp + 0x500c8144], cl; call dword ptr [0x10025078]; ret; 
0x10018d12  # adc byte ptr [ebp + 0x7120a3c0], al; add edx, dword ptr [eax]; jne 0x18d1d; ret; 
0x10018d19  # adc byte ptr [ebp + 1], dh; ret; 
0x10020f88  # adc byte ptr [ebp + 3], ch; adc al, ch; fiadd dword ptr [esi]; add byte ptr [eax], al; ret; 
0x1001506e  # adc byte ptr [ebp + 5], dh; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x10014683  # adc byte ptr [ebp + 7], dh; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001fff1  # adc byte ptr [ebp - 0x6bf003b3], cl; ret; 
0x1001388f  # adc byte ptr [ebp - 0xa], dh; ret; 
0x10013203  # adc byte ptr [ebx + 0x100366c4], ah; ret; 
0x1001d878  # adc byte ptr [ebx + 0x100369ec], ah; ret; 
0x1001d873  # adc byte ptr [ebx + 0x10036a08], ah; mov dword ptr [0x100369ec], eax; ret; 
0x10019091  # adc byte ptr [ebx + 0x10037118], ah; pop edi; pop esi; pop ebx; leave; ret; 
0x10021d73  # adc byte ptr [ebx + 0x10891c41], cl; mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x10021d78  # adc byte ptr [ebx + 0x10892c41], cl; ret; 
0x10017662  # adc byte ptr [ebx + 0x2eb5fc6], cl; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x10012fb5  # adc byte ptr [ebx + 0x32d200d], al; adc bh, bh; ret; 
0x1001990f  # adc byte ptr [ebx + 0x3711825], al; adc byte ptr [eax], al; ret; 
0x10020334  # adc byte ptr [ebx + 0x475fff8], al; or eax, eax; pop esi; ret; 
0x10021e38  # adc byte ptr [ebx + 0x5b5e5fc6], cl; ret; 
0x1001a7f7  # adc byte ptr [ebx + 0x5f5e0845], cl; leave; ret; 
0x10018c32  # adc byte ptr [ebx + 0x67503f8], al; mov eax, dword ptr [0x10037124]; ret; 
0x100128b4  # adc byte ptr [ebx + 0x7f00f47d], al; ret 0x24eb; 
0x10021e4b  # adc byte ptr [ebx + 0xb7502f8], al; push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x10012fa9  # adc byte ptr [ebx + 0xe74fff8], al; push eax; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x1001b695  # adc byte ptr [ebx + 0xf75fcf8], al; mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x1001adda  # adc byte ptr [ebx + eax + 0x6a], dh; add dword ptr [eax - 0xa], ebx; ret; 
0x10013f6f  # adc byte ptr [ebx - 0x37], bl; ret; 
0x1001944d  # adc byte ptr [ebx - 0x397400f8], al; pop edi; pop esi; ret; 
0x1001e587  # adc byte ptr [ebx - 0x74acf3bb], cl; pop ebp; adc byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0xc756; 
0x10021d31  # adc byte ptr [ebx - 0x76ffc79a], al; inc esi; cmp al, 0x5e; ret 8; 
0x10019d5b  # adc byte ptr [ebx], al; ret; 
0x10017f74  # adc byte ptr [ebx], bh; ret; 
0x10017e8e  # adc byte ptr [ebx], cl; add byte ptr [eax], al; add bl, ch; ret; 
0x1001562f  # adc byte ptr [ebx], dh; fstp xword ptr [eax]; pop esi; add dword ptr [edi], ecx; xchg esp, eax; ret; 
0x10018687  # adc byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x1001cd3d  # adc byte ptr [ebx], dh; rcr byte ptr [edi + 0x5d], 0x5b; ret; 
0x10019da5  # adc byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5d; pop ebx; ret; 
0x1001e58e  # adc byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0xc756; 
0x10018462  # adc byte ptr [ecx + 0x334c81d], cl; adc byte ptr [esi + 0x5b], bl; pop ebp; ret; 
0x1001845c  # adc byte ptr [ecx + 0x334cc0d], cl; adc byte ptr [ecx + 0x334c81d], cl; adc byte ptr [esi + 0x5b], bl; pop ebp; ret; 
0x1001d86b  # adc byte ptr [ecx + eax], al; call dword ptr [0x100250b4]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x1001a98b  # adc byte ptr [ecx + ebp*4 + 0x458b1001], bh; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x10023dba  # adc byte ptr [ecx + ecx - 1], dh; jno 0x23dc4; call 0xc81e; pop ecx; ret; 
0x10014733  # adc byte ptr [ecx + edx*8 + 0x5e], bh; ret; 
0x10013ec9  # adc byte ptr [ecx - 0x38a1a0e2], cl; add eax, 0x10038264; add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; ret; 
0x1001d225  # adc byte ptr [ecx - 0x77], bl; sbb eax, 0x100369c4; xor eax, eax; pop ebx; leave; ret; 
0x10013f68  # adc byte ptr [edi + 0x5e], bl; mov dword ptr [0x100366dc], eax; pop ebx; leave; ret; 
0x10022993  # adc byte ptr [edi + 0x5e], bl; mov dword ptr fs:[0], ecx; leave; ret; 
0x10012565  # adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x1001d9e2  # adc byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret 0x10; 
0x1001b393  # adc byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret; 
0x1001142f  # adc byte ptr [edi + 0x5e], bl; pop ebx; ret; 
0x100144cf  # adc byte ptr [edi + 0x5e], bl; ret; 
0x10023067  # adc byte ptr [edi - 0x75], bl; ret; 
0x10019d34  # adc byte ptr [edi], cl; popfd; ret 0x234a; 
0x100229b1  # adc byte ptr [edx + 0x50], dl; push dword ptr [ecx + 8]; push 0; call 0x229c1; ret 4; 
0x100180af  # adc byte ptr [edx + 0x742b3c06], cl; or byte ptr [edx], bh; ret; 
0x10017eb9  # adc byte ptr [edx + 0xb], ch; call 0x153a1; pop ecx; ret; 
0x100202cb  # adc byte ptr [edx + 1], ch; mov ecx, eax; call dword ptr [edx]; ret; 
0x10017a91  # adc byte ptr [edx + 2], ch; push dword ptr [esp + 0x10]; call 0x1795d; add esp, 0x10; ret; 
0x10011ae6  # adc byte ptr [edx + 3], dh; xor eax, eax; ret; 
0x1001ad5f  # adc byte ptr [edx + eax + 0xc], dh; add dh, dh; ret; 
0x1001d8fa  # adc byte ptr [edx - 0x13], dh; push 1; pop eax; ret; 
0x10011483  # adc byte ptr [edx - 0x1f7ca7fc], cl; add al, byte ptr [ebp - 0x74fb8a40]; ret; 
0x10021034  # adc byte ptr [edx], al; adc al, ch; push cs; sar esi, 0xff; pop ecx; ret; 
0x100210a7  # adc byte ptr [edx], al; adc al, ch; wait; sar dh, 0xff; pop ecx; ret; 
0x10021e62  # adc byte ptr [edx], al; jne 0x21e71; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10015c5e  # adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x10018468  # adc byte ptr [esi + 0x5b], bl; pop ebp; ret; 
0x1001539d  # adc byte ptr [esi + 0x5d], bl; ret; 
0x1001465b  # adc byte ptr [esi - 0x37], bl; ret; 
0x1001ac59  # adc byte ptr [esi - 0x75], dl; je 0x1ac82; or byte ptr [ecx], bh; xor dl, byte ptr [edi - 0x75]; ret 0x1174; 
0x10017c3b  # adc byte ptr [esi - 0x77], bl; dec eax; add al, 0x5b; leave; ret; 
0x1001d6df  # adc byte ptr [esi*2 + 0x4258307], al; push 3; adc byte ptr [eax], al; ret; 
0x10021033  # adc byte ptr ds:[edx], al; adc al, ch; push cs; sar esi, 0xff; pop ecx; ret; 
0x10018969  # adc ch, byte ptr [edx + 1]; pop eax; ret; 
0x1001b8a4  # adc ch, byte ptr [edx - 3]; call 0x1b4b4; pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x100157cb  # adc cl, al; clc; add dh, bh; fcomp dword ptr [edi + 0x5e]; ret; 
0x1001748c  # adc cl, ch; ret; 
0x10022570  # adc cl, cl; ret; 
0x1001031f  # adc dh, bh; ret 0; 
0x1001d6d9  # adc dh, dh; add eax, 0x10036a04; add al, 0x75; pop es; and dword ptr [0x10036a04], 0; ret; 
0x10014f68  # adc dh, dh; ret; 
0x10013889  # adc dword ptr [eax + 0x41], eax; test dl, dl; mov byte ptr [eax], dl; jne 0x13888; ret; 
0x10022c31  # adc dword ptr [eax], eax; add byte ptr [ebx + 0x645ef44d], cl; mov dword ptr [0], ecx; leave; ret; 
0x10010305  # adc dword ptr [ebx + 0xa904c1], eax; add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x1001df79  # adc dword ptr [ebx - 0x37], ebx; ret; 
0x1001aaf1  # adc dword ptr [ebx], esi; fisttp dword ptr [ebx + 0x96a0c75]; call 0x153a1; pop ecx; ret; 
0x10014871  # adc dword ptr [edx + 1], ebp; pop eax; pop edi; pop ebx; pop esi; ret; 
0x10016105  # adc eax, 0x10025074; pop edi; pop esi; pop ebx; ret; 
0x10015399  # adc eax, 0x10025074; pop esi; pop ebp; ret; 
0x10014775  # adc eax, 0x10025074; ret; 
0x100153af  # adc eax, 0x10025078; pop ebp; ret; 
0x100147c7  # adc eax, 0x10025078; ret; 
0x10021e57  # adc eax, 0x1002508c; ret; 
0x1001d86f  # adc eax, 0x100250b4; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x1001d6d5  # adc eax, 0x100250b8; test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7c9  # adc eax, 0x100250b8; test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x1001ac47  # adc eax, 0x100250e0; pop esi; pop ebx; leave; ret; 
0x1001302e  # adc eax, 0x100250e8; mov eax, esi; pop edi; pop esi; ret; 
0x10014657  # adc eax, 0x1002516c; pop esi; leave; ret; 
0x10019df3  # adc eax, 0x10025254; pop esi; ret; 
0x100130d1  # adc eax, 0x10025264; pop esi; ret; 
0x10012fb1  # adc eax, 0x1002526c; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x100131ff  # adc eax, 0x10025278; mov dword ptr [0x100366c4], eax; ret; 
0x10013211  # adc eax, 0x10025278; ret; 
0x10013322  # adc eax, 0x1002527c; pop edi; ret; 
0x100153c8  # adc eax, 0x1002527c; ret; 
0x100144cb  # adc eax, 0x100252b4; pop edi; pop esi; ret; 
0x1001441f  # adc eax, 0x100252b4; xor eax, eax; ret; 
0x100153bd  # adc eax, 0x100252c0; push 0xff; call dword ptr [0x1002527c]; ret; 
0x1001b934  # adc eax, 0x1003699c; pop edi; pop esi; pop ebx; ret; 
0x10024605  # adc eax, 0x59fffe82; ret; 
0x1001a569  # adc eax, 0x83ffff26; les ecx, ptr [eax]; pop ebp; ret 4; 
0x1001326d  # adc eax, dword ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x100188b5  # adc ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001788c  # adc ecx, ebp; ret; 
0x10017149  # adc ecx, ecx; rep stosw word ptr es:[edi], ax; mov eax, esi; pop edi; pop esi; ret; 
0x1001582a  # adc edx, dword ptr [eax - 0x7d]; ret; 
0x1001b7ff  # adc esi, esi; ret 0x7401; 
0x10015b39  # add ah, byte ptr [esi + 0x3b]; ret; 
0x100108ec  # add al, 0; add byte ptr [eax], al; add esp, 0x14; ret; 
0x1001327c  # add al, 0; add byte ptr [eax], al; add esp, 0xc; ret; 
0x10023ce2  # add al, 0; and dword ptr [eax + 8], 0; mov dword ptr [eax], 0x10027b70; ret; 
0x1002379b  # add al, 0; lea eax, [ecx + 8]; ret; 
0x100228d5  # add al, 0; mov dword ptr [ecx], 0x10027ae4; ret; 
0x10017bbc  # add al, 0; mov dword ptr [ecx], eax; ret; 
0x100243d4  # add al, 0; mov eax, 0xffff; pop esi; ret; 
0x10021f70  # add al, 0; mov eax, dword ptr [ecx + 0x10]; test eax, eax; jne 0x21f7e; mov eax, 0x10027aa0; ret; 
0x10022b22  # add al, 0; mov eax, dword ptr [ecx + 0x10]; test eax, eax; jne 0x22b30; mov eax, 0x10027aa0; ret; 
0x10020485  # add al, 0; mov eax, ecx; mov dword ptr [eax], 0x10027938; ret 4; 
0x10021669  # add al, 0; mov eax, ecx; mov dword ptr [eax], 0x100279d4; ret 4; 
0x100237aa  # add al, 0; mov eax, ecx; ret 4; 
0x100214d7  # add al, 0; or ax, 0xffff; ret 4; 
0x10017b76  # add al, 0; or eax, 0xffffffff; pop esi; ret; 
0x1002031e  # add al, 0; or eax, 0xffffffff; ret 4; 
0x1001ae50  # add al, 0; pop ebx; je 0x1ae58; or ah, 0x10; ret; 
0x100131f7  # add al, 0; push 0x100131b3; call dword ptr [0x10025278]; mov dword ptr [0x100366c4], eax; ret; 
0x1001adcd  # add al, 0; ret; 
0x10020324  # add al, 0; xor eax, eax; ret; 
0x10011ae0  # add al, 0x3b; add eax, 0x10038260; jb 0x11aec; xor eax, eax; ret; 
0x1001ccf8  # add al, 0x3b; ret; 
0x1001afce  # add al, 0x4a; jne 0x1afc7; pop esi; ret; 
0x10017c3f  # add al, 0x5b; leave; ret; 
0x1001bfec  # add al, 0x5e; ret; 
0x1001939f  # add al, 0x5f; pop esi; pop ebx; leave; ret; 
0x100154b2  # add al, 0x66; mov eax, dword ptr [ebp - 2]; leave; ret; 
0x100218cf  # add al, 0x66; or eax, 0x5e5fffff; pop ebx; ret 4; 
0x100153b9  # add al, 0x6a; add bh, bh; adc eax, 0x100252c0; push 0xff; call dword ptr [0x1002527c]; ret; 
0x1001d6dc  # add al, 0x6a; add edx, dword ptr [eax]; add al, 0x75; pop es; and dword ptr [0x10036a04], 0; ret; 
0x1001d6e0  # add al, 0x75; pop es; and dword ptr [0x10036a04], 0; ret; 
0x10015fea  # add al, 0x81; je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x100150f3  # add al, 0x83; add byte ptr [eax], cl; mov ecx, dword ptr [eax]; mov eax, dword ptr [ecx - 8]; mov edx, dword ptr [ecx - 4]; ret; 
0x10015103  # add al, 0x83; add byte ptr [ebx + ecx*4], al; add byte ptr [esi - 0x75], ah; inc eax; cld; ret; 
0x100147d0  # add al, 0x83; clc; adc al, 0x7d; or eax, dword ptr [ebx - 0x17afe340]; ret 0xb; 
0x1001af24  # add al, 0x85; idiv byte ptr [ebp - 0x19]; pop edi; pop esi; pop ebx; ret; 
0x10023dc9  # add al, 0x85; sal byte ptr [ebp + 5], 0xb8; js 0x23e4c; add dl, byte ptr [eax]; ret; 
0x10017af3  # add al, 0x85; sal byte ptr [edi + ebp*2 - 0x7d], 0xf8; push dword ptr [edx + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x10015106  # add al, 0x8b; add byte ptr [esi - 0x75], ah; inc eax; cld; ret; 
0x1001408a  # add al, 0x8b; ret 0x3eb; 
0x1001148d  # add al, 0x8b; ret; 
0x10019f12  # add al, 0x8d; inc esp; or byte ptr [eax], cl; ret; 
0x1001d484  # add al, 0xa8; pop es; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x1001611b  # add al, 0xc0; mov ecx, dword ptr [ecx*4 + 0x10038160]; lea eax, [ecx + eax*4 + 0xc]; push eax; call dword ptr [0x10025078]; ret; 
0x10011af5  # add al, 0xc0; mov ecx, dword ptr [ecx*4 + 0x10038160]; mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x100138d1  # add al, 0xc9; ret; 
0x10018c27  # add al, 0xd1; clc; ret; 
0x10013350  # add al, 0xeb; in eax, dx; pop esi; ret; 
0x1001c0aa  # add al, 0xeb; ror dword ptr [ebx + 0x38448d06], cl; add ebx, ebp; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x1001ad5c  # add al, 0xf6; ret; 
0x10022f6c  # add al, 0xf; mov bh, 0x45; dec cl; ret; 
0x100243ba  # add al, 0xf; mov bh, 1; add ecx, 2; mov dword ptr [esi], ecx; pop esi; ret; 
0x10017b5e  # add al, 0xf; mov dh, 1; inc ecx; mov dword ptr [esi], ecx; pop esi; ret; 
0x10016faf  # add al, 0xfd; lea eax, [ecx + eax*4 + 4]; mov eax, edi; pop edi; pop esi; ret; 
0x10012f93  # add al, 0xff; push 1; mov dword ptr [esi], eax; pop eax; pop esi; ret; 
0x10019deb  # add al, 0xff; xor eax, 0x10038144; call dword ptr [0x10025254]; pop esi; ret; 
0x1001d86c  # add al, 1; call dword ptr [0x100250b4]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x10015fe7  # add al, 1; lea eax, [ecx + eax*4]; je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x1001dab5  # add al, 3; shr ebx, 0xce; ret; 
0x1001b6c7  # add al, 4; add byte ptr [eax], al; ret; 
0x1001b6d3  # add al, 8; add byte ptr [eax], al; ret; 
0x10011cc8  # add al, al; add eax, esi; pop esi; ret; 
0x10017bb3  # add al, byte ptr [eax]; add byte ptr [eax], al; mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; ret; 
0x1001239c  # add al, byte ptr [eax]; add byte ptr [eax], al; pop ecx; ret; 
0x1001033b  # add al, byte ptr [eax]; pop edi; ret; 
0x10011489  # add al, byte ptr [ebp - 0x74fb8a40]; ret; 
0x1001d68a  # add al, byte ptr [ebx + 0x5e5f01e0]; pop ebx; leave; ret 4; 
0x1001d79f  # add al, byte ptr [ebx - 0x36a1fe20]; ret 4; 
0x1001326b  # add al, ch; adc eax, dword ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x1001327a  # add al, ch; add al, 0; add byte ptr [eax], al; add esp, 0xc; ret; 
0x10014504  # add al, ch; add al, byte ptr [eax]; add byte ptr [eax], al; pop ecx; ret; 
0x10022531  # add al, ch; add eax, 0xe9000000; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001fd1e  # add al, ch; add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036aa0], bh; call 0x20487; ret; 
0x1001fdd3  # add al, ch; add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036b30], bh; call 0x20487; ret; 
0x10020f7a  # add al, ch; add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d10], bh; call 0x2166b; ret; 
0x10020f4d  # add al, ch; add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d68], bh; call 0x2166b; ret; 
0x10020fa7  # add al, ch; add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036df8], bh; call 0x2166b; ret; 
0x100229b8  # add al, ch; add eax, dword ptr [eax]; add byte ptr [eax], al; ret 4; 
0x10024564  # add al, ch; cmp byte ptr [0x2083ffff], cl; add byte ptr [ebx - 0x3d740036], al; pop esi; ret; 
0x1001377b  # add al, ch; jl 0x137f4; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x10016cfb  # add al, ch; mov eax, dword ptr [0x83ffffe5]; and byte ptr [eax], al; or eax, 0xffffffff; pop esi; ret; 
0x10015ffb  # add al, ch; mov eax, dword ptr [0x83fffff2]; and byte ptr [eax], al; or eax, 0xffffffff; ret; 
0x10015256  # add bh, al; add byte ptr [0x5e000000], cl; ret; 
0x10023ce7  # add bh, al; add byte ptr [eax + 0x7b], dh; add dl, byte ptr [eax]; ret; 
0x10017e8b  # add bh, al; inc esi; adc byte ptr [ebx], cl; add byte ptr [eax], al; add bl, ch; ret; 
0x100153c6  # add bh, bh; adc eax, 0x1002527c; ret; 
0x100153bb  # add bh, bh; adc eax, 0x100252c0; push 0xff; call dword ptr [0x1002527c]; ret; 
0x1001031b  # add bh, bh; add byte ptr [edx + edx - 9], dh; ret 0; 
0x10017eb3  # add bh, bh; add eax, 0x10036978; push 0xb; call 0x153a1; pop ecx; ret; 
0x1001334b  # add bh, bh; rol byte ptr [ebx - 0x1214fb3a], 1; pop esi; ret; 
0x10013195  # add bh, bh; shr bl, 1; pop es; push 1; pop eax; ret; 
0x100130c9  # add bh, bh; xor eax, 0x10032d20; call dword ptr [0x10025264]; pop esi; ret; 
0x10012331  # add bh, dh; fcomp dword ptr [ecx + 0x5e]; sbb eax, eax; ret; 
0x1001f851  # add bl, byte ptr [esi - 0x75]; dec byte ptr [ebx + 0x74c08503]; adc byte ptr [eax - 0x7d], dl; ret; 
0x1001d2db  # add bl, ch; adc al, 0x3b; ret; 
0x1001a15f  # add bl, ch; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x1001b440  # add bl, ch; and dword ptr [ebx], esi; fstp xword ptr [ebx]; ret; 
0x10012107  # add bl, ch; push ecx; push 9; call 0x153a1; pop ecx; ret; 
0x10017e92  # add bl, ch; ret; 
0x1001d2d4  # add bl, ch; sbb ebp, eax; mov ecx, 0xeb000003; adc al, 0x3b; ret; 
0x10015258  # add byte ptr [0x5e000000], cl; ret; 
0x10020f37  # add byte ptr [eax + 0x44], ch; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x100237a4  # add byte ptr [eax + 0x7b], ch; add dl, byte ptr [eax]; ret 4; 
0x10023ce9  # add byte ptr [eax + 0x7b], dh; add dl, byte ptr [eax]; ret; 
0x100243d5  # add byte ptr [eax + 0xffff], bh; pop esi; ret; 
0x1001ae4f  # add byte ptr [eax + eax], al; pop ebx; je 0x1ae58; or ah, 0x10; ret; 
0x1001adcc  # add byte ptr [eax + eax], al; ret; 
0x10020129  # add byte ptr [eax - 0x18], dl; inc edx; sbb eax, 0xc68b0000; pop edi; pop esi; ret; 
0x100131f8  # add byte ptr [eax - 0x4d], ch; xor dword ptr [ecx], eax; adc bh, bh; adc eax, 0x10025278; mov dword ptr [0x100366c4], eax; ret; 
0x10020ee0  # add byte ptr [eax - 0x50], ch; sub al, 0; adc al, ch; pop edi; ret 0xfffe; 
0x10017c16  # add byte ptr [eax], 0; add dh, dh; ret; 
0x1001232f  # add byte ptr [eax], 0; neg eax; pop ecx; pop esi; sbb eax, eax; ret; 
0x1001ae4e  # add byte ptr [eax], al; add al, 0; pop ebx; je 0x1ae58; or ah, 0x10; ret; 
0x1001adcb  # add byte ptr [eax], al; add al, 0; ret; 
0x10014502  # add byte ptr [eax], al; add al, ch; add al, byte ptr [eax]; add byte ptr [eax], al; pop ecx; ret; 
0x10015ff9  # add byte ptr [eax], al; add al, ch; mov eax, dword ptr [0x83fffff2]; and byte ptr [eax], al; or eax, 0xffffffff; ret; 
0x10015254  # add byte ptr [eax], al; add bh, al; add byte ptr [0x5e000000], cl; ret; 
0x100153c4  # add byte ptr [eax], al; add bh, bh; adc eax, 0x1002527c; ret; 
0x10017e90  # add byte ptr [eax], al; add bl, ch; ret; 
0x10020ede  # add byte ptr [eax], al; add byte ptr [eax - 0x50], ch; sub al, 0; adc al, ch; pop edi; ret 0xfffe; 
0x100212e1  # add byte ptr [eax], al; add byte ptr [eax], al; leave; ret 0x10; 
0x100201a0  # add byte ptr [eax], al; add byte ptr [eax], al; leave; ret 0xc; 
0x1002025f  # add byte ptr [eax], al; add byte ptr [eax], al; leave; ret 4; 
0x100201ff  # add byte ptr [eax], al; add byte ptr [eax], al; leave; ret 8; 
0x1001ffd8  # add byte ptr [eax], al; add byte ptr [eax], al; leave; ret; 
0x100237c5  # add byte ptr [eax], al; add byte ptr [eax], al; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10020e61  # add byte ptr [eax], al; add byte ptr [eax], al; pop ebx; leave; ret 4; 
0x10015261  # add byte ptr [eax], al; add byte ptr [ebx + 0x3084f50c], cl; add edx, dword ptr [eax]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10011ad3  # add byte ptr [eax], al; add byte ptr [ebx + 0x5b5fffc8], al; leave; ret; 
0x1001c141  # add byte ptr [eax], al; add byte ptr [ebx + 0x5d5bffc8], al; ret; 
0x100241c5  # add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x1001a642  # add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; pop ebx; ret; 
0x100238a5  # add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; ret; 
0x10017bb4  # add byte ptr [eax], al; add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; ret; 
0x10010431  # add byte ptr [eax], al; add byte ptr [ebx + 0xc630c4], al; or al, byte ptr [eax - 0x74fffea0]; ret; 
0x10020e62  # add byte ptr [eax], al; add byte ptr [ebx - 0x37], bl; ret 4; 
0x10013a55  # add byte ptr [eax], al; add byte ptr [ebx - 0x3b7cf3bb], cl; sub al, 0x5e; leave; ret; 
0x1001393e  # add byte ptr [eax], al; add byte ptr [ebx - 0x3b7cf3bb], cl; xor byte ptr [esi - 0x37], bl; ret; 
0x10024897  # add byte ptr [eax], al; add byte ptr [ebx - 0x3e7c13b3], cl; or cl, ch; in eax, dx; retf 0xffff; ret; 
0x100248bb  # add byte ptr [eax], al; add byte ptr [ebx - 0x3e7c13b3], cl; or cl, ch; leave; retf 0xffff; ret; 
0x10023ed4  # add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0xc103; 
0x10019d2d  # add byte ptr [eax], al; add byte ptr [ebx], dh; rol byte ptr [ebx - 0x62f0ef03], cl; ret 0x234a; 
0x10021270  # add byte ptr [eax], al; add byte ptr [ecx + 0x10036c98], bh; call 0x21348; leave; ret; 
0x100121ac  # add byte ptr [eax], al; add byte ptr [ecx + 0x59], bl; ret; 
0x100122ec  # add byte ptr [eax], al; add byte ptr [ecx + 0x5e], bl; ret; 
0x100237c6  # add byte ptr [eax], al; add byte ptr [ecx - 0x72f3db94], cl; insb byte ptr es:[edi], dx; and al, 0xc; push eax; ret; 
0x10012181  # add byte ptr [eax], al; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x1001527a  # add byte ptr [eax], al; add byte ptr [edi + 0xd], dh; call 0x15299; mov dword ptr [eax], 8; pop esi; ret; 
0x100108cf  # add byte ptr [eax], al; add byte ptr [edi - 0x75], bl; ret; 
0x10017ecc  # add byte ptr [eax], al; add byte ptr [edx + 0xb], ch; call 0x153a1; pop ecx; pop ecx; ret; 
0x1001fe37  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd97  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fd53  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x1001fe08  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c20; call 0x2008c; ret; 
0x10021064  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021093  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fdc  # add byte ptr [eax], al; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10012242  # add byte ptr [eax], al; add byte ptr [edx + 9], ch; call 0x153a1; pop ecx; ret; 
0x1001fd26  # add byte ptr [eax], al; add byte ptr [edx], ch; mov ecx, 0x10036aa0; call 0x20487; ret; 
0x1001fddb  # add byte ptr [eax], al; add byte ptr [edx], ch; mov ecx, 0x10036b30; call 0x20487; ret; 
0x1001fcf9  # add byte ptr [eax], al; add byte ptr [edx], ch; mov ecx, 0x10036bc8; call 0x20487; ret; 
0x10020f82  # add byte ptr [eax], al; add byte ptr [edx], ch; mov ecx, 0x10036d10; call 0x2166b; ret; 
0x10020f55  # add byte ptr [eax], al; add byte ptr [edx], ch; mov ecx, 0x10036d68; call 0x2166b; ret; 
0x10020faf  # add byte ptr [eax], al; add byte ptr [edx], ch; mov ecx, 0x10036df8; call 0x2166b; ret; 
0x10022534  # add byte ptr [eax], al; add cl, ch; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001fd21  # add byte ptr [eax], al; add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036aa0], bh; call 0x20487; ret; 
0x1001fdd6  # add byte ptr [eax], al; add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036b30], bh; call 0x20487; ret; 
0x1001fcf4  # add byte ptr [eax], al; add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036bc8], bh; call 0x20487; ret; 
0x10020f7d  # add byte ptr [eax], al; add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d10], bh; call 0x2166b; ret; 
0x10020f50  # add byte ptr [eax], al; add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d68], bh; call 0x2166b; ret; 
0x10020faa  # add byte ptr [eax], al; add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036df8], bh; call 0x2166b; ret; 
0x100212e2  # add byte ptr [eax], al; add cl, cl; ret 0x10; 
0x100201a1  # add byte ptr [eax], al; add cl, cl; ret 0xc; 
0x10020260  # add byte ptr [eax], al; add cl, cl; ret 4; 
0x10021341  # add byte ptr [eax], al; add cl, cl; ret 8; 
0x1001ffd9  # add byte ptr [eax], al; add cl, cl; ret; 
0x10017c17  # add byte ptr [eax], al; add dh, dh; ret; 
0x10011681  # add byte ptr [eax], al; add esp, 0x10; mov eax, edi; pop edi; pop esi; ret; 
0x1001219a  # add byte ptr [eax], al; add esp, 0x10; ret; 
0x100108ee  # add byte ptr [eax], al; add esp, 0x14; ret; 
0x1001246b  # add byte ptr [eax], al; add esp, 0x18; mov eax, esi; pop esi; pop ebp; ret; 
0x100113a9  # add byte ptr [eax], al; add esp, 0x1c; test eax, eax; jne 0x113b4; leave; ret; 
0x10011340  # add byte ptr [eax], al; add esp, 0x20; pop edi; pop esi; ret; 
0x10019905  # add byte ptr [eax], al; add esp, 0xc; dec dword ptr [0x1003711c]; and dword ptr [0x10037118], 0; ret; 
0x10012305  # add byte ptr [eax], al; add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x1001324f  # add byte ptr [eax], al; add esp, 0xc; ret; 
0x10011840  # add byte ptr [eax], al; and dword ptr [eax], 0; or eax, 0xffffffff; pop esi; ret; 
0x1001cb63  # add byte ptr [eax], al; call 0x120a0; add esp, 0x2c; pop esi; ret; 
0x10014503  # add byte ptr [eax], al; call 0x1450c; pop ecx; ret; 
0x1001183b  # add byte ptr [eax], al; call 0x152a2; and dword ptr [eax], 0; or eax, 0xffffffff; pop esi; ret; 
0x10015ffa  # add byte ptr [eax], al; call 0x152a2; and dword ptr [eax], 0; or eax, 0xffffffff; ret; 
0x100153c5  # add byte ptr [eax], al; call dword ptr [0x1002527c]; ret; 
0x10017eb2  # add byte ptr [eax], al; inc dword ptr [0x10036978]; push 0xb; call 0x153a1; pop ecx; ret; 
0x1001527b  # add byte ptr [eax], al; ja 0x1528c; call 0x15299; mov dword ptr [eax], 8; pop esi; ret; 
0x10019c59  # add byte ptr [eax], al; ja 0x19c66; push 1; mov dword ptr [0x100355ac], eax; pop eax; ret; 
0x10022f69  # add byte ptr [eax], al; jl 0x22f71; movzx eax, word ptr [ebp - 2]; leave; ret; 
0x100212e3  # add byte ptr [eax], al; leave; ret 0x10; 
0x100201a2  # add byte ptr [eax], al; leave; ret 0xc; 
0x10020261  # add byte ptr [eax], al; leave; ret 4; 
0x10020201  # add byte ptr [eax], al; leave; ret 8; 
0x1001546c  # add byte ptr [eax], al; leave; ret; 
0x10021502  # add byte ptr [eax], al; mov ax, word ptr [eax]; pop esi; ret; 
0x10011cd1  # add byte ptr [eax], al; mov dword ptr [eax], 0x16; or eax, 0xffffffff; pop esi; ret; 
0x1001528f  # add byte ptr [eax], al; mov dword ptr [eax], 0x16; pop esi; ret; 
0x10015255  # add byte ptr [eax], al; mov dword ptr [eax], 0xd; pop esi; ret; 
0x10015282  # add byte ptr [eax], al; mov dword ptr [eax], 8; pop esi; ret; 
0x1001168e  # add byte ptr [eax], al; mov dword ptr [eax], 9; or eax, 0xffffffff; pop esi; ret; 
0x100231ba  # add byte ptr [eax], al; mov dword ptr [esi], 0x10027b58; mov eax, esi; pop esi; ret 4; 
0x100237c7  # add byte ptr [eax], al; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10013a56  # add byte ptr [eax], al; mov eax, dword ptr [ebp + 0xc]; add esp, 0x2c; pop esi; leave; ret; 
0x1001393f  # add byte ptr [eax], al; mov eax, dword ptr [ebp + 0xc]; add esp, 0x30; pop esi; leave; ret; 
0x10017bb5  # add byte ptr [eax], al; mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; ret; 
0x10020304  # add byte ptr [eax], al; mov eax, esi; pop edi; pop esi; leave; ret; 
0x10023d3f  # add byte ptr [eax], al; mov eax, esi; pop edi; pop esi; ret 4; 
0x1002012e  # add byte ptr [eax], al; mov eax, esi; pop edi; pop esi; ret; 
0x1002028e  # add byte ptr [eax], al; mov eax, esi; pop esi; leave; ret; 
0x10021cdd  # add byte ptr [eax], al; mov eax, esi; pop esi; ret; 
0x10021271  # add byte ptr [eax], al; mov ecx, 0x10036c98; call 0x21348; leave; ret; 
0x10021fca  # add byte ptr [eax], al; mov ecx, dword ptr [ebp - 0xc]; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10015262  # add byte ptr [eax], al; mov ecx, dword ptr [esi*8 + 0x10033084]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10020343  # add byte ptr [eax], al; movzx eax, byte ptr [eax]; pop esi; ret; 
0x10012330  # add byte ptr [eax], al; neg eax; pop ecx; pop esi; sbb eax, eax; ret; 
0x10023b4f  # add byte ptr [eax], al; or ax, 0xffff; pop esi; pop ebx; pop ebp; ret; 
0x1001ae89  # add byte ptr [eax], al; or byte ptr [eax], al; ret; 
0x1001ba7d  # add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x1001c142  # add byte ptr [eax], al; or eax, 0xffffffff; pop ebx; pop ebp; ret; 
0x10011ad4  # add byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop ebx; leave; ret; 
0x100241c6  # add byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x1001a643  # add byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop esi; pop ebx; ret; 
0x100238a6  # add byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x10011694  # add byte ptr [eax], al; or eax, 0xffffffff; pop esi; ret; 
0x10018d44  # add byte ptr [eax], al; pop eax; ret; 
0x10020e63  # add byte ptr [eax], al; pop ebx; leave; ret 4; 
0x10013ed6  # add byte ptr [eax], al; pop ebx; ret; 
0x1001acaf  # add byte ptr [eax], al; pop ecx; leave; ret; 
0x10023a91  # add byte ptr [eax], al; pop ecx; pop ecx; pop esi; pop ebp; ret; 
0x100121ad  # add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x10023ccc  # add byte ptr [eax], al; pop ecx; pop edi; pop esi; leave; ret; 
0x100122ed  # add byte ptr [eax], al; pop ecx; pop esi; ret; 
0x1001210f  # add byte ptr [eax], al; pop ecx; ret; 
0x10013633  # add byte ptr [eax], al; pop ecx; xor edi, edi; ret; 
0x1002181a  # add byte ptr [eax], al; pop edi; pop esi; pop ebx; leave; ret 4; 
0x10012182  # add byte ptr [eax], al; pop edi; pop esi; pop ebx; leave; ret; 
0x10013313  # add byte ptr [eax], al; pop edi; ret; 
0x100202b6  # add byte ptr [eax], al; pop esi; leave; ret; 
0x100242f0  # add byte ptr [eax], al; pop esi; pop ebx; leave; ret; 
0x10021c61  # add byte ptr [eax], al; pop esi; ret 8; 
0x1001525b  # add byte ptr [eax], al; pop esi; ret; 
0x1001fd27  # add byte ptr [eax], al; push 0; mov ecx, 0x10036aa0; call 0x20487; ret; 
0x1001fddc  # add byte ptr [eax], al; push 0; mov ecx, 0x10036b30; call 0x20487; ret; 
0x1001fcfa  # add byte ptr [eax], al; push 0; mov ecx, 0x10036bc8; call 0x20487; ret; 
0x10020f83  # add byte ptr [eax], al; push 0; mov ecx, 0x10036d10; call 0x2166b; ret; 
0x10020f56  # add byte ptr [eax], al; push 0; mov ecx, 0x10036d68; call 0x2166b; ret; 
0x10020fb0  # add byte ptr [eax], al; push 0; mov ecx, 0x10036df8; call 0x2166b; ret; 
0x10020edf  # add byte ptr [eax], al; push 0x10002cb0; call 0xd14a; pop ecx; ret; 
0x10020f36  # add byte ptr [eax], al; push 0x10020f44; call 0xd14a; pop ecx; ret; 
0x1001322f  # add byte ptr [eax], al; push 0x1002b068; push 0x1002b000; call 0x1333b; add esp, 0x10; ret; 
0x10017ecd  # add byte ptr [eax], al; push 0xb; call 0x153a1; pop ecx; pop ecx; ret; 
0x1001fe38  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd98  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fd54  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x10021065  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021094  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fdd  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10021021  # add byte ptr [eax], al; push 1; push 0; mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x10012243  # add byte ptr [eax], al; push 9; call 0x153a1; pop ecx; ret; 
0x100229bc  # add byte ptr [eax], al; ret 4; 
0x10022230  # add byte ptr [eax], al; ret 8; 
0x10012fce  # add byte ptr [eax], al; ret; 
0x100121d4  # add byte ptr [eax], al; test eax, eax; pop ecx; jne 0x121b9; xor eax, eax; ret; 
0x1001703a  # add byte ptr [eax], al; xor eax, eax; pop ebx; leave; ret; 
0x100125ef  # add byte ptr [eax], ch; inc esi; ret; 
0x100150f5  # add byte ptr [eax], cl; mov ecx, dword ptr [eax]; mov eax, dword ptr [ecx - 8]; mov edx, dword ptr [ecx - 4]; ret; 
0x10020ee4  # add byte ptr [eax], dl; call 0xd14a; pop ecx; ret; 
0x1001b8a2  # add byte ptr [ebp + 0x12], dh; push -3; call 0x1b4b4; pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x10017482  # add byte ptr [ebp + 0x348b7604], cl; test esp, edx; xor eax, dword ptr [ebx]; adc cl, ch; ret; 
0x10012319  # add byte ptr [ebp + 0x57459c0], al; or eax, 0xffffffff; pop esi; ret; 
0x10022597  # add byte ptr [ebp + 0x6a0974c9], al; add eax, ebp; ret 2; 
0x10012ca0  # add byte ptr [ebp + 4], dh; push 1; pop eax; ret; 
0x1001bf34  # add byte ptr [ebp + 4], dh; xor eax, eax; pop ebp; ret; 
0x100124fe  # add byte ptr [ebp + ecx - 0x75], dh; ret; 
0x100121d5  # add byte ptr [ebp - 0x218aa640], al; xor eax, eax; ret; 
0x10014413  # add byte ptr [ebp - 0xf08a40], al; xor eax, 0x10038144; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x100164ed  # add byte ptr [ebx + 0x2ebffc8], al; xor eax, eax; pop esi; pop ebx; leave; ret; 
0x10015263  # add byte ptr [ebx + 0x3084f50c], cl; add edx, dword ptr [eax]; pop esi; mov dword ptr [eax], ecx; ret; 
0x1001489f  # add byte ptr [ebx + 0x59000866], al; pop esi; ret; 
0x10015840  # add byte ptr [ebx + 0x5b5d5ec5], cl; pop edi; ret; 
0x10022528  # add byte ptr [ebx + 0x5b5e5fc7], cl; pop ebp; ret 0xc; 
0x10011ad5  # add byte ptr [ebx + 0x5b5fffc8], al; leave; ret; 
0x1001c143  # add byte ptr [ebx + 0x5d5bffc8], al; ret; 
0x10011341  # add byte ptr [ebx + 0x5e5f20c4], al; ret; 
0x10011c1b  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; pop ebx; ret; 
0x100241c7  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x1001e233  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebx; pop ebp; ret; 
0x1001a644  # add byte ptr [ebx + 0x5e5fffc8], al; pop ebx; ret; 
0x10015f40  # add byte ptr [ebx + 0x5e5fffc8], al; ret; 
0x10011f3d  # add byte ptr [ebx + 0x5f590845], cl; pop esi; leave; ret; 
0x10017bb6  # add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; ret; 
0x10021fcb  # add byte ptr [ebx + 0x645ef44d], cl; mov dword ptr [0], ecx; leave; ret; 
0x1001489c  # add byte ptr [ebx + 0x66830026], al; or byte ptr [eax], al; pop ecx; pop esi; ret; 
0x10014a96  # add byte ptr [ebx + 0x6de90cc4], al; add eax, 0xbe0f0000; ret; 
0x10012156  # add byte ptr [ebx + 0x7500dc7d], al; sbb eax, 0xeb0875ff; or ch, byte ptr [edx + 9]; call 0x153a1; pop ecx; ret; 
0x10021c7f  # add byte ptr [ebx + 0x831c41], cl; dec byte ptr [ebx + 0x8b1c41]; ret; 
0x1002047b  # add byte ptr [ebx + 0x8c2c1], cl; xor eax, eax; ret; 
0x10010433  # add byte ptr [ebx + 0xc630c4], al; or al, byte ptr [eax - 0x74fffea0]; ret; 
0x10019906  # add byte ptr [ebx + 0xdff0cc4], al; sbb al, 0x71; add edx, dword ptr [eax]; and dword ptr [0x10037118], 0; ret; 
0x1001ad2e  # add byte ptr [ebx + ecx - 0x7d], dh; pushal; and byte ptr [eax], al; mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x10015105  # add byte ptr [ebx + ecx*4], al; add byte ptr [esi - 0x75], ah; inc eax; cld; ret; 
0x10012a96  # add byte ptr [ebx - 0x140003b3], al; sbb bh, bh; jne 0x12a8c; call 0x12ad4; pop ecx; ret; 
0x10020305  # add byte ptr [ebx - 0x36a1a03a], cl; ret; 
0x10020e64  # add byte ptr [ebx - 0x37], bl; ret 4; 
0x10011682  # add byte ptr [ebx - 0x3874ef3c], al; pop edi; pop esi; ret; 
0x10012306  # add byte ptr [ebx - 0x3874f33c], al; pop edi; pop esi; ret; 
0x10023ce3  # add byte ptr [ebx - 0x38fff7a0], al; add byte ptr [eax + 0x7b], dh; add dl, byte ptr [eax]; ret; 
0x1001246c  # add byte ptr [ebx - 0x3974e73c], al; pop esi; pop ebp; ret; 
0x100160a5  # add byte ptr [ebx - 0x3974f33c], al; pop esi; pop ebx; pop ebp; ret; 
0x100116b6  # add byte ptr [ebx - 0x3b7c0035], al; or al, 0x3b; ret; 
0x10013a57  # add byte ptr [ebx - 0x3b7cf3bb], cl; sub al, 0x5e; leave; ret; 
0x10013940  # add byte ptr [ebx - 0x3b7cf3bb], cl; xor byte ptr [esi - 0x37], bl; ret; 
0x1002456c  # add byte ptr [ebx - 0x3d740036], al; pop esi; ret; 
0x10024899  # add byte ptr [ebx - 0x3e7c13b3], cl; or cl, ch; in eax, dx; retf 0xffff; ret; 
0x100248bd  # add byte ptr [ebx - 0x3e7c13b3], cl; or cl, ch; leave; retf 0xffff; ret; 
0x100113aa  # add byte ptr [ebx - 0x3f7ae33c], al; jne 0x113b4; leave; ret; 
0x1001bf59  # add byte ptr [ebx - 0x3f7ae33c], al; jne 0x1bf68; mov eax, 0x7fffffff; pop ebp; ret; 
0x1001babc  # add byte ptr [ebx - 0x3f7ae73c], al; jne 0x1bac8; xor eax, eax; leave; ret; 
0x10021f71  # add byte ptr [ebx - 0x3f7aefbf], cl; jne 0x21f7e; mov eax, 0x10027aa0; ret; 
0x10022b23  # add byte ptr [ebx - 0x3f7aefbf], cl; jne 0x22b30; mov eax, 0x10027aa0; ret; 
0x100173ef  # add byte ptr [ebx - 0x77ceb3c], al; push dword ptr [ebp + 4]; or eax, eax; pop ebp; ret; 
0x10013ed1  # add byte ptr [ebx], 0x10; add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; ret; 
0x1001b8b0  # add byte ptr [ebx], 0x10; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x10021d2f  # add byte ptr [ebx], 0x10; and dword ptr [esi + 0x38], 0; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x10011ae4  # add byte ptr [ebx], 0x10; jb 0x11aec; xor eax, eax; ret; 
0x10013e18  # add byte ptr [ebx], 0x10; jl 0x13dd5; pop edi; pop esi; pop ebx; ret; 
0x100241ae  # add byte ptr [ebx], ah; ret 0xc483; 
0x1001ccca  # add byte ptr [ebx], bh; ret; 
0x10023ed6  # add byte ptr [ebx], ch; ret 0xc103; 
0x10019d2f  # add byte ptr [ebx], dh; rol byte ptr [ebx - 0x62f0ef03], cl; ret 0x234a; 
0x1001783a  # add byte ptr [ecx + 0x100333ec], ah; pop ecx; ret; 
0x1001fe3d  # add byte ptr [ecx + 0x10036a68], bh; call 0x2008c; ret; 
0x1001fd2a  # add byte ptr [ecx + 0x10036aa0], bh; call 0x20487; ret; 
0x1001fd9d  # add byte ptr [ecx + 0x10036af8], bh; call 0x2008c; ret; 
0x1001fddf  # add byte ptr [ecx + 0x10036b30], bh; call 0x20487; ret; 
0x1001fd59  # add byte ptr [ecx + 0x10036b88], bh; call 0x201a8; ret; 
0x1001fcfd  # add byte ptr [ecx + 0x10036bc8], bh; call 0x20487; ret; 
0x1001fe0e  # add byte ptr [ecx + 0x10036c20], bh; call 0x2008c; ret; 
0x1002106a  # add byte ptr [ecx + 0x10036c58], bh; call 0x212e9; ret; 
0x10021099  # add byte ptr [ecx + 0x10036c98], bh; call 0x212e9; ret; 
0x10021272  # add byte ptr [ecx + 0x10036c98], bh; call 0x21348; leave; ret; 
0x10020fe2  # add byte ptr [ecx + 0x10036cd0], bh; call 0x21405; ret; 
0x10020f86  # add byte ptr [ecx + 0x10036d10], bh; call 0x2166b; ret; 
0x10020f59  # add byte ptr [ecx + 0x10036d68], bh; call 0x2166b; ret; 
0x10021026  # add byte ptr [ecx + 0x10036dc0], bh; call 0x212e9; ret; 
0x10020fb3  # add byte ptr [ecx + 0x10036df8], bh; call 0x2166b; ret; 
0x100180a9  # add byte ptr [ecx + 0x334200d], cl; adc byte ptr [edx + 0x742b3c06], cl; or byte ptr [edx], bh; ret; 
0x10023a92  # add byte ptr [ecx + 0x59], bl; pop esi; pop ebp; ret; 
0x100121ae  # add byte ptr [ecx + 0x59], bl; ret; 
0x1001c68a  # add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; ret; 
0x10012698  # add byte ptr [ecx + 0x5b5e5f06], cl; leave; ret; 
0x1001f3bc  # add byte ptr [ecx + 0x5e5f087e], cl; pop ebx; leave; ret; 
0x100122ee  # add byte ptr [ecx + 0x5e], bl; ret; 
0x10023ccd  # add byte ptr [ecx + 0x5f], bl; pop esi; leave; ret; 
0x1001e0ea  # add byte ptr [ecx + 0x5fc18b31], cl; pop esi; pop ebx; ret; 
0x1001acb0  # add byte ptr [ecx - 0x37], bl; ret; 
0x100237c8  # add byte ptr [ecx - 0x72f3db94], cl; insb byte ptr es:[edi], dx; and al, 0xc; push eax; ret; 
0x1001182a  # add byte ptr [ecx - 0x75], bl; ret; 
0x10015d9d  # add byte ptr [ecx - 0x7d], bl; or al, 0; mov eax, edi; pop edi; pop esi; ret; 
0x10017c08  # add byte ptr [ecx - 0xa], bl; ret; 
0x1001ba38  # add byte ptr [edi + 0x39], dh; push 1; mov byte ptr [eax], cl; pop eax; pop ebp; ret; 
0x10016bde  # add byte ptr [edi + 0x4c], dh; add eax, 0x20; leave; ret; 
0x10015466  # add byte ptr [edi + 0x4e], dh; add eax, 0xffe0; leave; ret; 
0x100153e6  # add byte ptr [edi + 0x57], dh; add eax, 0xffe0; pop ebx; ret; 
0x10020e5b  # add byte ptr [edi + 0x5e], bl; mov dword ptr fs:[0], ecx; pop ebx; leave; ret 4; 
0x1002181b  # add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 4; 
0x10012183  # add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x10022458  # add byte ptr [edi + 0x5e], bl; ret; 
0x1001527c  # add byte ptr [edi + 0xd], dh; call 0x15299; mov dword ptr [eax], 8; pop esi; ret; 
0x1001b815  # add byte ptr [edi + 3], ch; adc bl, ch; sbb al, 0xf6; ret 0x7402; 
0x10019c5a  # add byte ptr [edi + 9], dh; push 1; mov dword ptr [0x100355ac], eax; pop eax; ret; 
0x10021c59  # add byte ptr [edi + eax - 0x75], dh; into; call 0x22394; pop esi; ret 8; 
0x100204cb  # add byte ptr [edi - 0x18], dl; dec esp; ret; 
0x100108d1  # add byte ptr [edi - 0x75], bl; ret; 
0x10020344  # add byte ptr [edi], cl; mov dh, 0; pop esi; ret; 
0x10016bd8  # add byte ptr [edx + 0x52], dh; cmp ax, 0x5a; ja 0x16c2d; add eax, 0x20; leave; ret; 
0x10015460  # add byte ptr [edx + 0x54], dh; cmp ax, 0x7a; ja 0x154b7; add eax, 0xffe0; leave; ret; 
0x100153e0  # add byte ptr [edx + 0x5d], dh; cmp ax, 0x7a; ja 0x15440; add eax, 0xffe0; pop ebx; ret; 
0x10017ece  # add byte ptr [edx + 0xb], ch; call 0x153a1; pop ecx; pop ecx; ret; 
0x1001fe39  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd99  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fd55  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x10021066  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021095  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fde  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10021022  # add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x10012244  # add byte ptr [edx + 9], ch; call 0x153a1; pop ecx; ret; 
0x1001031d  # add byte ptr [edx + edx - 9], dh; ret 0; 
0x10010efe  # add byte ptr [edx], bh; ret 0xf074; 
0x10013269  # add byte ptr [edx], ch; call 0x13284; add esp, 0xc; ret; 
0x1001fd28  # add byte ptr [edx], ch; mov ecx, 0x10036aa0; call 0x20487; ret; 
0x1001fddd  # add byte ptr [edx], ch; mov ecx, 0x10036b30; call 0x20487; ret; 
0x1001fcfb  # add byte ptr [edx], ch; mov ecx, 0x10036bc8; call 0x20487; ret; 
0x10020f84  # add byte ptr [edx], ch; mov ecx, 0x10036d10; call 0x2166b; ret; 
0x10020f57  # add byte ptr [edx], ch; mov ecx, 0x10036d68; call 0x2166b; ret; 
0x10020fb1  # add byte ptr [edx], ch; mov ecx, 0x10036df8; call 0x2166b; ret; 
0x1001e89c  # add byte ptr [edx], ch; ret; 
0x1001c13f  # add byte ptr [edx], cl; add byte ptr [eax], al; add byte ptr [ebx + 0x5d5bffc8], al; ret; 
0x100242f1  # add byte ptr [esi + 0x5b], bl; leave; ret; 
0x100189e9  # add byte ptr [esi + 0x75], bl; add eax, 0x424442b; ret; 
0x1001bd23  # add byte ptr [esi + 0x75], bl; pop es; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x100202b7  # add byte ptr [esi - 0x37], bl; ret; 
0x10015108  # add byte ptr [esi - 0x75], ah; inc eax; cld; ret; 
0x100241c3  # add byte ptr [esi], dl; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x100238a3  # add byte ptr [esi], dl; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; ret; 
0x10022f6a  # add byte ptr [esp + eax + 0xf], bh; mov bh, 0x45; dec cl; ret; 
0x1001489e  # add byte ptr es:[ebx + 0x59000866], al; pop esi; ret; 
0x1001583f  # add byte ptr es:[ebx + 0x5b5d5ec5], cl; pop edi; ret; 
0x1001f3bb  # add byte ptr es:[ecx + 0x5e5f087e], cl; pop ebx; leave; ret; 
0x10013ed0  # add byte ptr fs:[ebx], 0x10; add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; ret; 
0x10011c6f  # add byte ptr ss:[eax], al; mov dword ptr [eax], 9; or eax, 0xffffffff; pop esi; ret; 
0x1001a82c  # add cl, byte ptr [eax + 0x458b0247]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001243f  # add cl, byte ptr [ebx + 0x5b5e5fc7]; ret; 
0x1001a82f  # add cl, byte ptr [ebx + 0x5f5e0845]; leave; ret; 
0x1001ae48  # add cl, byte ptr [ebx]; ret 0xf75e; 
0x1001ae80  # add cl, byte ptr [ecx + eax]; test cl, 2; je 0x1ae8d; or eax, 0x80000; ret; 
0x10015878  # add cl, byte ptr [edi]; xchg esp, eax; ret; 
0x10022536  # add cl, ch; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001fd23  # add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036aa0], bh; call 0x20487; ret; 
0x1001fdd8  # add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036b30], bh; call 0x20487; ret; 
0x1001fcf6  # add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036bc8], bh; call 0x20487; ret; 
0x10020f7f  # add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d10], bh; call 0x2166b; ret; 
0x10020f52  # add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d68], bh; call 0x2166b; ret; 
0x10020fac  # add cl, ch; or eax, 0x6a000000; add byte ptr [ecx + 0x10036df8], bh; call 0x2166b; ret; 
0x100212e4  # add cl, cl; ret 0x10; 
0x100201a3  # add cl, cl; ret 0xc; 
0x10020262  # add cl, cl; ret 4; 
0x10020202  # add cl, cl; ret 8; 
0x100113b1  # add cl, cl; ret; 
0x10010188  # add dh, bh; fcomp dword ptr [edi + 0x5e]; pop ebp; pop ebx; ret; 
0x100157ce  # add dh, bh; fcomp dword ptr [edi + 0x5e]; ret; 
0x10021c84  # add dh, bh; mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x1001f5ce  # add dh, byte ptr [eax + ebx - 0x18]; ret; 
0x10021e63  # add dh, byte ptr [ebp + 0xb]; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10021e4e  # add dh, byte ptr [ebp + 0xb]; push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x1001d990  # add dh, byte ptr [ebp + 5]; push 1; pop eax; leave; ret; 
0x1001ae85  # add dh, byte ptr [ebp + eax + 0xd]; add byte ptr [eax], al; or byte ptr [eax], al; ret; 
0x10016eda  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x1001c0b4  # add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x100112b6  # add dh, byte ptr [ebx]; rcr byte ptr [esi + 0x5b], 0x5d; ret; 
0x100164f2  # add dh, byte ptr [ebx]; rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x1001adf0  # add dh, byte ptr [edx + eax + 0xc]; adc dh, dh; ret; 
0x1001d482  # add dh, byte ptr [esp + eax - 0x58]; pop es; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x10017c19  # add dh, dh; ret; 
0x10010467  # add dl, 0x30; mov byte ptr [ecx], dl; ret; 
0x10010502  # add dl, bl; pop ebx; mov byte ptr [ecx + 7], dl; leave; ret; 
0x10021cd6  # add dl, byte ptr [eax - 0x75]; into; call 0x21ce7; mov eax, esi; pop esi; ret; 
0x10013239  # add dl, byte ptr [eax]; call 0x1333b; add esp, 0x10; ret; 
0x10020ef0  # add dl, byte ptr [eax]; call 0xd14a; pop ecx; ret; 
0x1001b694  # add dl, byte ptr [eax]; cmp eax, -4; jne 0x1b6aa; mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x10021e4a  # add dl, byte ptr [eax]; cmp eax, 2; jne 0x21e5c; push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x10023db9  # add dl, byte ptr [eax]; je 0x23dc6; push dword ptr [ecx + 4]; call 0xc81e; pop ecx; ret; 
0x10013202  # add dl, byte ptr [eax]; mov dword ptr [0x100366c4], eax; ret; 
0x1001d872  # add dl, byte ptr [eax]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x10021e37  # add dl, byte ptr [eax]; mov eax, esi; pop edi; pop esi; pop ebx; ret; 
0x10013031  # add dl, byte ptr [eax]; mov eax, esi; pop edi; pop esi; ret; 
0x10022c8a  # add dl, byte ptr [eax]; mov eax, esi; pop esi; ret 4; 
0x10012fb4  # add dl, byte ptr [eax]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x100153b2  # add dl, byte ptr [eax]; pop ebp; ret; 
0x10022992  # add dl, byte ptr [eax]; pop edi; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10013dc6  # add dl, byte ptr [eax]; pop edi; pop esi; pop ebx; leave; ret; 
0x1001d9e1  # add dl, byte ptr [eax]; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x10016108  # add dl, byte ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x100144ce  # add dl, byte ptr [eax]; pop edi; pop esi; ret; 
0x10013325  # add dl, byte ptr [eax]; pop edi; ret; 
0x1001465a  # add dl, byte ptr [eax]; pop esi; leave; ret; 
0x1001539c  # add dl, byte ptr [eax]; pop esi; pop ebp; ret; 
0x1001ac4a  # add dl, byte ptr [eax]; pop esi; pop ebx; leave; ret; 
0x100130d4  # add dl, byte ptr [eax]; pop esi; ret; 
0x10013234  # add dl, byte ptr [eax]; push 0x1002b000; call 0x1333b; add esp, 0x10; ret; 
0x100153c0  # add dl, byte ptr [eax]; push 0xff; call dword ptr [0x1002527c]; ret; 
0x10017a90  # add dl, byte ptr [eax]; push 2; push dword ptr [esp + 0x10]; call 0x1795d; add esp, 0x10; ret; 
0x1001f5b9  # add dl, byte ptr [eax]; push eax; call 0x15226; pop ecx; or eax, 0xffffffff; ret; 
0x10014653  # add dl, byte ptr [eax]; push eax; call dword ptr [0x1002516c]; pop esi; leave; ret; 
0x1002048d  # add dl, byte ptr [eax]; ret 4; 
0x10013214  # add dl, byte ptr [eax]; ret; 
0x1001d6d8  # add dl, byte ptr [eax]; test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7cc  # add dl, byte ptr [eax]; test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x100137db  # add dl, byte ptr [eax]; test eax, eax; je 0x137e6; push 0; call eax; ret; 
0x10018d11  # add dl, byte ptr [eax]; test eax, eax; mov dword ptr [0x10037120], eax; jne 0x18d1d; ret; 
0x10014422  # add dl, byte ptr [eax]; xor eax, eax; ret; 
0x10010466  # add dword ptr [eax + 0x118830c2], eax; ret; 
0x1001a812  # add dword ptr [eax + 0x458b0147], ecx; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001710e  # add dword ptr [eax + 0x5d], ebx; ret; 
0x1001aecf  # add dword ptr [eax + 0x5e], ebx; ret; 
0x10014873  # add dword ptr [eax + 0x5f], ebx; pop ebx; pop esi; ret; 
0x10012776  # add dword ptr [eax + 0x5f], ebx; pop esi; pop ebp; ret; 
0x10019840  # add dword ptr [eax + 0x5f], ebx; pop esi; pop ebx; leave; ret; 
0x10012a31  # add dword ptr [eax + 0x5f], ebx; pop esi; ret; 
0x1001d3a8  # add dword ptr [eax - 0x15], ebx; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x100137ba  # add dword ptr [eax - 0x37], ebx; ret; 
0x1001e4bf  # add dword ptr [eax - 0x75], ebx; push esp; and al, 0x10; pop esi; mov dword ptr [edx], ecx; ret; 
0x1001adde  # add dword ptr [eax - 0xa], ebx; ret; 
0x10021c83  # add dword ptr [eax], -2; mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x100121d3  # add dword ptr [eax], 0; test eax, eax; pop ecx; jne 0x121b9; xor eax, eax; ret; 
0x1001a15b  # add dword ptr [eax], 0xeb000001; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x10015104  # add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov ax, word ptr [eax - 4]; ret; 
0x100150e7  # add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov eax, dword ptr [eax - 4]; ret; 
0x100150f4  # add dword ptr [eax], 8; mov ecx, dword ptr [eax]; mov eax, dword ptr [ecx - 8]; mov edx, dword ptr [ecx - 4]; ret; 
0x1001a15d  # add dword ptr [eax], eax; add bl, ch; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x1001d2d2  # add dword ptr [eax], eax; add bl, ch; sbb ebp, eax; mov ecx, 0xeb000003; adc al, 0x3b; ret; 
0x10020f35  # add dword ptr [eax], eax; add byte ptr [eax + 0x44], ch; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10023d3d  # add dword ptr [eax], eax; add byte ptr [eax], al; mov eax, esi; pop edi; pop esi; ret 4; 
0x10013ed4  # add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; ret; 
0x10012fcc  # add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x10017480  # add dword ptr [eax], eax; add byte ptr [ebp + 0x348b7604], cl; test esp, edx; xor eax, dword ptr [ebx]; adc cl, ch; ret; 
0x1001d07e  # add dword ptr [eax], eax; add byte ptr [ebx], bh; ret; 
0x10012c7a  # add dword ptr [eax], eax; add byte ptr [ecx + 0x59], bl; ret; 
0x1001acae  # add dword ptr [eax], eax; add byte ptr [ecx - 0x37], bl; ret; 
0x1001959d  # add dword ptr [eax], eax; add dh, dh; ret; 
0x1001377a  # add dword ptr [eax], eax; call 0x1acfd; pop ecx; pop ecx; ret; 
0x1001ad2d  # add dword ptr [eax], eax; je 0x1ad3c; and dword ptr [eax + 0x20], 0; mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x10021c76  # add dword ptr [eax], ecx; ret 4; 
0x1001a7f2  # add dword ptr [eax], edx; and byte ptr [eax + 0x458b1001], ch; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001fd39  # add dword ptr [eax], edx; call 0xd14a; pop ecx; ret; 
0x1001d6d2  # add dword ptr [eax], edx; call dword ptr [0x100250b8]; test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x100131fc  # add dword ptr [eax], edx; call dword ptr [0x10025278]; mov dword ptr [0x100366c4], eax; ret; 
0x1001a7f6  # add dword ptr [eax], edx; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x1001a98a  # add dword ptr [eax], edx; mov esp, 0x8b1001a9; inc ebp; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x10021c95  # add dword ptr [ebp + 0x11890250], ecx; ret; 
0x10015fe8  # add dword ptr [ebp + 0x3748104], ecx; mov eax, dword ptr [eax]; ret; 
0x1001dfde  # add dword ptr [ebp + 3], esi; or esi, 2; mov eax, esi; pop esi; leave; ret; 
0x10019c5e  # add dword ptr [ebx + 0x100355ac], esp; pop eax; ret; 
0x10013a04  # add dword ptr [ebx + 0x5b5e5fc7], ecx; pop ebp; ret; 
0x1001a815  # add dword ptr [ebx + 0x5f5e0845], ecx; leave; ret; 
0x1001afcb  # add dword ptr [ebx + 0x754a04c0], eax; cmc; pop esi; ret; 
0x100243bd  # add dword ptr [ebx + 0xe8902c1], eax; pop esi; ret; 
0x1002434f  # add dword ptr [ebx + esi*2 - 0x7d], esi; clc; push dword ptr [esi + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x100225ab  # add dword ptr [ebx - 0xbb2743f], ecx; mov dword ptr fs:[0], ecx; leave; ret; 
0x10018c30  # add dword ptr [ebx], 0x3f88310; jne 0x18c3e; mov eax, dword ptr [0x10037124]; ret; 
0x10019def  # add dword ptr [ebx], 0x5415ff10; push edx; add dl, byte ptr [eax]; pop esi; ret; 
0x10016121  # add dword ptr [ebx], 0x81448d10; or al, 0x50; call dword ptr [0x10025078]; ret; 
0x10015fe1  # add dword ptr [ebx], 0x8144f610; add al, 1; lea eax, [ecx + eax*4]; je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x100144c7  # add dword ptr [ebx], 0xb415ff10; push edx; add dl, byte ptr [eax]; pop edi; pop esi; ret; 
0x1001441b  # add dword ptr [ebx], 0xb415ff10; push edx; add dl, byte ptr [eax]; xor eax, eax; ret; 
0x10015e91  # add dword ptr [ebx], edi; ret 0x1873; 
0x10023b8a  # add dword ptr [ecx - 0x7499f3ba], ecx; ret; 
0x1001243a  # add dword ptr [ecx - 0x75], ebx; ret; 
0x10017b61  # add dword ptr [ecx - 0x77], eax; push cs; pop esi; ret; 
0x10020f34  # add dword ptr [ecx], 0; add byte ptr [eax + 0x44], ch; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x1001d68d  # add dword ptr [edi + 0x5e], ebx; pop ebx; leave; ret 4; 
0x1001f5c7  # add dword ptr [edi + ebx - 0xa], esi; inc esp; and al, 8; add dh, byte ptr [eax + ebx - 0x18]; ret; 
0x10016fae  # add dword ptr [edi*8 + 0x481448d], 0x5e5fc78b; ret; 
0x10015634  # add dword ptr [edi], ecx; xchg esp, eax; ret; 
0x10013276  # add dword ptr [edx + 1], ebp; push 0; call 0x13284; add esp, 0xc; ret; 
0x1001adf7  # add dword ptr [edx + eax + 0xc], esi; and bh, dh; ret; 
0x10013278  # add dword ptr [edx], ebp; call 0x13284; add esp, 0xc; ret; 
0x1001fe3b  # add dword ptr [edx], ebp; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd9b  # add dword ptr [edx], ebp; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fd57  # add dword ptr [edx], ebp; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x10021068  # add dword ptr [edx], ebp; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021097  # add dword ptr [edx], ebp; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fe0  # add dword ptr [edx], ebp; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10021024  # add dword ptr [edx], ebp; mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x10013267  # add dword ptr [edx], ebp; push 0; call 0x13284; add esp, 0xc; ret; 
0x10017e55  # add dword ptr [esi + 0x1c], eax; mov eax, esi; pop esi; pop ebp; ret; 
0x1001d7a2  # add dword ptr [esi - 0x37], ebx; ret 4; 
0x10016fad  # add dword ptr fs:[edi*8 + 0x481448d], 0x5e5fc78b; ret; 
0x10013f6d  # add dx, word ptr [eax]; pop ebx; leave; ret; 
0x10013206  # add dx, word ptr [eax]; ret; 
0x100157c9  # add dx, word ptr [eax]; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x100113c1  # add eax, -0x20; ret; 
0x1001bf68  # add eax, -2; pop ebp; ret; 
0x1001a48c  # add eax, -9; pop edi; pop esi; pop ebx; leave; ret; 
0x10018c47  # add eax, 0x100355ac; ret; 
0x100157c7  # add eax, 0x100366e8; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x10015a1d  # add eax, 0x100366f0; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x10017eb5  # add eax, 0x10036978; push 0xb; call 0x153a1; pop ecx; ret; 
0x1001b6a1  # add eax, 0x10036998; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001d6db  # add eax, 0x10036a04; add al, 0x75; pop es; and dword ptr [0x10036a04], 0; ret; 
0x1001b896  # add eax, 0x10036edc; ret; 
0x10018d3d  # add eax, 0x10037108; adc byte ptr [eax], al; add byte ptr [eax], al; pop eax; ret; 
0x10011ae2  # add eax, 0x10038260; jb 0x11aec; xor eax, eax; ret; 
0x10013ecf  # add eax, 0x10038264; add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; ret; 
0x1001b8ae  # add eax, 0x10038268; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x10014765  # add eax, 0x1c; push eax; call 0x15340; pop ecx; ret; 
0x100147b7  # add eax, 0x1c; push eax; call 0x153a1; pop ecx; ret; 
0x10016be1  # add eax, 0x20; leave; ret; 
0x10011521  # add eax, 0x20; pop ebx; ret; 
0x10014770  # add eax, 0x20; push eax; call dword ptr [0x10025074]; ret; 
0x100147c2  # add eax, 0x20; push eax; call dword ptr [0x10025078]; ret; 
0x10011504  # add eax, 0x20; ret; 
0x10010536  # add eax, 0x241c63a; cmp al, byte ptr [edx]; ret; 
0x100189ec  # add eax, 0x424442b; ret; 
0x10014764  # add eax, 0x501cc083; call 0x15340; pop ecx; ret; 
0x100147b6  # add eax, 0x501cc083; call 0x153a1; pop ecx; ret; 
0x1001e4a4  # add eax, 0x54; ret; 
0x1001e49b  # add eax, 0x58; ret; 
0x10015070  # add eax, 0x5dff0883; ret; 
0x100218f1  # add eax, 0x5e008b66; ret; 
0x100206f0  # add eax, 0x5e00b60f; ret; 
0x1001c61d  # add eax, 0x5e58016a; ret; 
0x1001231e  # add eax, 0x5effc883; ret; 
0x10017c0f  # add eax, 0x7501f883; add eax, 0x80bf; add dh, dh; ret; 
0x10017c14  # add eax, 0x80bf; add dh, dh; ret; 
0x10014a9c  # add eax, 0xbe0f0000; ret; 
0x10014a94  # add eax, 0xc4830000; or al, 0xe9; insd dword ptr es:[edi], dx; add eax, 0xbe0f0000; ret; 
0x100137b8  # add eax, 0xc958016a; ret; 
0x1001544e  # add eax, 0xc9c00b66; ret; 
0x100152a7  # add eax, 0xc; ret; 
0x100137e0  # add eax, 0xd0ff006a; ret; 
0x10022533  # add eax, 0xe9000000; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001fdd5  # add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036b30], bh; call 0x20487; ret; 
0x1001fcf3  # add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036bc8], bh; call 0x20487; ret; 
0x10020f7c  # add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d10], bh; call 0x2166b; ret; 
0x10020f4f  # add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036d68], bh; call 0x2166b; ret; 
0x10020fa9  # add eax, 0xe9000000; or eax, 0x6a000000; add byte ptr [ecx + 0x10036df8], bh; call 0x2166b; ret; 
0x1001c0a7  # add eax, 0xeb04c683; ror dword ptr [ebx + 0x38448d06], cl; add ebx, ebp; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x1002061d  # add eax, 0xeb08458b; add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 4; 
0x10015469  # add eax, 0xffe0; leave; ret; 
0x100153e9  # add eax, 0xffe0; pop ebx; ret; 
0x10021816  # add eax, 0xffffb8; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 4; 
0x100143c8  # add eax, 3; pop ebx; leave; ret; 
0x1001afec  # add eax, 4; cmp ecx, 3; jl 0x1afe6; push 1; pop eax; ret; 
0x1001afcc  # add eax, 4; dec edx; jne 0x1afc7; pop esi; ret; 
0x1001529e  # add eax, 8; ret; 
0x1001d2d9  # add eax, dword ptr [eax]; add bl, ch; adc al, 0x3b; ret; 
0x100121ab  # add eax, dword ptr [eax]; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x100229ba  # add eax, dword ptr [eax]; add byte ptr [eax], al; ret 4; 
0x100241ac  # add eax, dword ptr [eax]; add byte ptr [ebx], ah; ret 0xc483; 
0x10020622  # add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 4; 
0x100206d0  # add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; ret 4; 
0x10016b39  # add eax, dword ptr [ebx - 0x36a40038]; ret; 
0x1001dfe0  # add eax, dword ptr [ebx - 0x3974fd32]; pop esi; leave; ret; 
0x1001239a  # add eax, ebp; add al, byte ptr [eax]; add byte ptr [eax], al; pop ecx; ret; 
0x1002259d  # add eax, ebp; ret 2; 
0x10024108  # add eax, ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x10012ef4  # add eax, ecx; pop esi; ret; 
0x10011cca  # add eax, esi; pop esi; ret; 
0x1001e4bd  # add ebp, dword ptr [edx + 1]; pop eax; mov edx, dword ptr [esp + 0x10]; pop esi; mov dword ptr [edx], ecx; ret; 
0x10012a2f  # add ebp, dword ptr [edx + 1]; pop eax; pop edi; pop esi; ret; 
0x100143ca  # add ebx, dword ptr [ebx - 0x37]; ret; 
0x10016c96  # add ebx, eax; mov eax, dword ptr [esp + 8]; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x1001c0b2  # add ebx, ebp; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x10017a43  # add ebx, ebp; test dword ptr [ebx + 0x5e5fffc8], eax; pop ebx; pop ebp; ret; 
0x100243be  # add ecx, 2; mov dword ptr [esi], ecx; pop esi; ret; 
0x10024623  # add ecx, 4; call 0x38a5; ret; 
0x1001a99a  # add ecx, dword ptr [eax + 0x458b0347]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001a99d  # add ecx, dword ptr [ebx + 0x5f5e0845]; leave; ret; 
0x100206eb  # add ecx, eax; cmp eax, ecx; jae 0x206f6; movzx eax, byte ptr [eax]; pop esi; ret; 
0x10012ef2  # add ecx, edx; add eax, ecx; pop esi; ret; 
0x1001467d  # add edi, dword ptr [ebx]; mov byte ptr [eax + 0x2d], ch; add edx, dword ptr [eax]; jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001aecb  # add edi, dword ptr [edx + esi*8 + 0x6a]; add dword ptr [eax + 0x5e], ebx; ret; 
0x1001d86d  # add edi, edi; adc eax, 0x100250b4; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x1001e89a  # add edi, esi; add byte ptr [edx], ch; ret; 
0x1001472a  # add edx, 0x20; inc ecx; cmp edx, 0x10032e68; jl 0x14707; pop esi; ret; 
0x1001331e  # add edx, dword ptr [bx + si]; call dword ptr [0x1002527c]; pop edi; ret; 
0x10018d40  # add edx, dword ptr [eax]; adc byte ptr [eax], al; add byte ptr [eax], al; pop eax; ret; 
0x1001d6de  # add edx, dword ptr [eax]; add al, 0x75; pop es; and dword ptr [0x10036a04], 0; ret; 
0x1001d86a  # add edx, dword ptr [eax]; add al, 1; call dword ptr [0x100250b4]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x10017838  # add edx, dword ptr [eax]; add byte ptr [ecx + 0x100333ec], ah; pop ecx; ret; 
0x1001c688  # add edx, dword ptr [eax]; add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; ret; 
0x10021e61  # add edx, dword ptr [eax]; add dh, byte ptr [ebp + 0xb]; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10013ed2  # add edx, dword ptr [eax]; add dword ptr [eax], eax; add byte ptr [eax], al; pop ebx; ret; 
0x1001b6a4  # add edx, dword ptr [eax]; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x10019f53  # add edx, dword ptr [eax]; and byte ptr [ebp + 8], dh; push 0x10; call 0x19e03; pop ecx; ret; 
0x1001990e  # add edx, dword ptr [eax]; and dword ptr [0x10037118], 0; ret; 
0x10021d30  # add edx, dword ptr [eax]; and dword ptr [esi + 0x38], 0; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x1001fda1  # add edx, dword ptr [eax]; call 0x2008c; ret; 
0x1001fd5d  # add edx, dword ptr [eax]; call 0x201a8; ret; 
0x1001fd01  # add edx, dword ptr [eax]; call 0x20487; ret; 
0x1002102a  # add edx, dword ptr [eax]; call 0x212e9; ret; 
0x10021276  # add edx, dword ptr [eax]; call 0x21348; leave; ret; 
0x10020fe6  # add edx, dword ptr [eax]; call 0x21405; ret; 
0x10020f5d  # add edx, dword ptr [eax]; call 0x2166b; ret; 
0x100223d8  # add edx, dword ptr [eax]; call 0x21e5d; pop esi; leave; ret; 
0x100153ac  # add edx, dword ptr [eax]; call dword ptr [0x10025078]; pop ebp; ret; 
0x10021e69  # add edx, dword ptr [eax]; call dword ptr [0x10025078]; ret; 
0x10021e54  # add edx, dword ptr [eax]; call dword ptr [0x1002508c]; ret; 
0x1001d7c6  # add edx, dword ptr [eax]; call dword ptr [0x100250b8]; test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x10019df0  # add edx, dword ptr [eax]; call dword ptr [0x10025254]; pop esi; ret; 
0x100130ce  # add edx, dword ptr [eax]; call dword ptr [0x10025264]; pop esi; ret; 
0x1001320e  # add edx, dword ptr [eax]; call dword ptr [0x10025278]; ret; 
0x1001331f  # add edx, dword ptr [eax]; call dword ptr [0x1002527c]; pop edi; ret; 
0x100144c8  # add edx, dword ptr [eax]; call dword ptr [0x100252b4]; pop edi; pop esi; ret; 
0x1001441c  # add edx, dword ptr [eax]; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x10015339  # add edx, dword ptr [eax]; call edi; pop edi; pop esi; ret; 
0x100152ce  # add edx, dword ptr [eax]; call esi; pop esi; ret; 
0x100152c6  # add edx, dword ptr [eax]; call esi; push dword ptr [0x100331ec]; call esi; pop esi; ret; 
0x10018c31  # add edx, dword ptr [eax]; cmp eax, 3; jne 0x18c3e; mov eax, dword ptr [0x10037124]; ret; 
0x10011ae5  # add edx, dword ptr [eax]; jb 0x11aec; xor eax, eax; ret; 
0x1001d8f9  # add edx, dword ptr [eax]; jb 0x1d8ea; push 1; pop eax; ret; 
0x10013e19  # add edx, dword ptr [eax]; jl 0x13dd5; pop edi; pop esi; pop ebx; ret; 
0x10014732  # add edx, dword ptr [eax]; jl 0x14707; pop esi; ret; 
0x10014682  # add edx, dword ptr [eax]; jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x10018d18  # add edx, dword ptr [eax]; jne 0x18d1d; ret; 
0x10016122  # add edx, dword ptr [eax]; lea eax, [ecx + eax*4 + 0xc]; push eax; call dword ptr [0x10025078]; ret; 
0x1002256f  # add edx, dword ptr [eax]; leave; ret; 
0x10011afc  # add edx, dword ptr [eax]; mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x10018461  # add edx, dword ptr [eax]; mov dword ptr [0x100334c8], ebx; pop esi; pop ebx; pop ebp; ret; 
0x1001b69e  # add edx, dword ptr [eax]; mov dword ptr [0x10036998], 1; ret; 
0x1001d877  # add edx, dword ptr [eax]; mov dword ptr [0x100369ec], eax; ret; 
0x10018d3a  # add edx, dword ptr [eax]; mov dword ptr [0x10037108], 0x10; pop eax; ret; 
0x10012fc7  # add edx, dword ptr [eax]; mov dword ptr [eax + 0x14], 1; ret; 
0x1001b88f  # add edx, dword ptr [eax]; neg eax; sbb eax, eax; and eax, dword ptr [0x10036edc]; ret; 
0x10019c62  # add edx, dword ptr [eax]; pop eax; ret; 
0x10013f6e  # add edx, dword ptr [eax]; pop ebx; leave; ret; 
0x1001783e  # add edx, dword ptr [eax]; pop ecx; ret; 
0x10017782  # add edx, dword ptr [eax]; pop edi; pop esi; pop ebx; leave; ret; 
0x1001b937  # add edx, dword ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x10015269  # add edx, dword ptr [eax]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10018467  # add edx, dword ptr [eax]; pop esi; pop ebx; pop ebp; ret; 
0x10017eb8  # add edx, dword ptr [eax]; push 0xb; call 0x153a1; pop ecx; ret; 
0x1002466b  # add edx, dword ptr [eax]; push dword ptr [ebp - 0x10]; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1001b1f7  # add edx, dword ptr [eax]; push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x1b088; add esp, 0xc; ret; 
0x10013207  # add edx, dword ptr [eax]; ret; 
0x100157ca  # add edx, dword ptr [eax]; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x10015fe2  # add edx, dword ptr [eax]; test byte ptr [ecx + eax*4 + 4], 1; lea eax, [ecx + eax*4]; je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x1001d22b  # add edx, dword ptr [eax]; xor eax, eax; pop ebx; leave; ret; 
0x1001cd3c  # add edx, dword ptr [eax]; xor eax, eax; pop edi; pop ebp; pop ebx; ret; 
0x10014731  # add edx, dword ptr cs:[eax]; jl 0x14707; pop esi; ret; 
0x10016c9e  # add edx, ebx; pop ebx; ret 0x10; 
0x10018c35  # add esi, dword ptr [ebp + 6]; mov eax, dword ptr [0x10037124]; ret; 
0x1001ad6a  # add esi, esi; ret; 
0x10023997  # add esp, 0x10; mov ax, si; pop esi; ret; 
0x10011683  # add esp, 0x10; mov eax, edi; pop edi; pop esi; ret; 
0x10013be7  # add esp, 0x10; pop ebp; ret; 
0x1001b391  # add esp, 0x10; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x1001219c  # add esp, 0x10; ret; 
0x100173f0  # add esp, 0x14; cmp eax, -1; jne 0x173fc; or eax, eax; pop ebp; ret; 
0x1001eec2  # add esp, 0x14; cmp eax, -1; jne 0x1eece; or eax, eax; pop ebp; ret; 
0x10016ce9  # add esp, 0x14; mov eax, edi; pop edi; pop esi; ret; 
0x10023819  # add esp, 0x14; mov eax, esi; pop esi; pop ebp; ret; 
0x10016fda  # add esp, 0x14; mov eax, esi; pop esi; ret; 
0x10013b93  # add esp, 0x14; pop edi; pop esi; pop ebx; leave; ret; 
0x100108f0  # add esp, 0x14; ret; 
0x1001246d  # add esp, 0x18; mov eax, esi; pop esi; pop ebp; ret; 
0x1001babd  # add esp, 0x18; test eax, eax; jne 0x1bac8; xor eax, eax; leave; ret; 
0x1001cfe8  # add esp, 0x1c; pop esi; ret; 
0x100113ab  # add esp, 0x1c; test eax, eax; jne 0x113b4; leave; ret; 
0x1001bf5a  # add esp, 0x1c; test eax, eax; jne 0x1bf68; mov eax, 0x7fffffff; pop ebp; ret; 
0x10011342  # add esp, 0x20; pop edi; pop esi; ret; 
0x1001b2c2  # add esp, 0x24; leave; ret; 
0x10013a5b  # add esp, 0x2c; pop esi; leave; ret; 
0x1001cb6a  # add esp, 0x2c; pop esi; ret; 
0x10013944  # add esp, 0x30; pop esi; leave; ret; 
0x10019907  # add esp, 0xc; dec dword ptr [0x1003711c]; and dword ptr [0x10037118], 0; ret; 
0x10023bd9  # add esp, 0xc; mov ax, di; pop edi; pop esi; ret; 
0x10012307  # add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x100160a6  # add esp, 0xc; mov eax, esi; pop esi; pop ebx; pop ebp; ret; 
0x1001817a  # add esp, 0xc; mov eax, esi; pop esi; ret; 
0x10013bbe  # add esp, 0xc; pop ebp; ret; 
0x1001e521  # add esp, 0xc; pop edi; pop esi; ret; 
0x10013251  # add esp, 0xc; ret; 
0x1001a56d  # add esp, 8; pop ebp; ret 4; 
0x10024459  # add esp, dword ptr [esi - 0x77]; sbb byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0x5d; ret; 
0x10012304  # and al, 0; add byte ptr [ebx - 0x3874f33c], al; pop edi; pop esi; ret; 
0x10012195  # and al, 0x10; call 0x17153; add esp, 0x10; ret; 
0x10016153  # and al, 0x10; call 0x17294; add esp, 0x10; ret; 
0x10017a96  # and al, 0x10; call 0x1795d; add esp, 0x10; ret; 
0x1001c012  # and al, 0x10; call 0x1ed60; add esp, 0x10; ret; 
0x1001ed55  # and al, 0x10; call 0x1f441; add esp, 0x10; ret; 
0x100238bb  # and al, 0x10; call 0x2410f; add esp, 0x10; ret; 
0x1001142e  # and al, 0x10; pop edi; pop esi; pop ebx; ret; 
0x1001e4c3  # and al, 0x10; pop esi; mov dword ptr [edx], ecx; ret; 
0x1001c00e  # and al, 0x10; push dword ptr [esp + 0x10]; call 0x1ed60; add esp, 0x10; ret; 
0x10012438  # and al, 0x14; add dword ptr [ecx - 0x75], ebx; ret; 
0x100108e9  # and al, 0x14; call 0x108f4; add esp, 0x14; ret; 
0x10018c39  # and al, 0x71; add edx, dword ptr [eax]; ret; 
0x1001524f  # and al, 0x77; sbb eax, 0x42e8; add bh, al; add byte ptr [0x5e000000], cl; ret; 
0x100186d0  # and al, 0x8b; inc ebp; sbb al, 0x3b; ret; 
0x1001b2c4  # and al, 0xc9; ret; 
0x10021c57  # and al, 0xc; add byte ptr [edi + eax - 0x75], dh; into; call 0x22394; pop esi; ret 8; 
0x1001613b  # and al, 0xc; call 0x12189; add esp, 0xc; ret; 
0x1001324a  # and al, 0xc; call 0x13284; add esp, 0xc; ret; 
0x1001b1ff  # and al, 0xc; call 0x1b088; add esp, 0xc; ret; 
0x1001bffa  # and al, 0xc; call 0x1ed49; add esp, 0xc; ret; 
0x10016c7c  # and al, 0xc; jne 0x16c89; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x100237cb  # and al, 0xc; lea ebp, [esp + 0xc]; push eax; ret; 
0x100237c0  # and al, 0xc; mov dword ptr fs:[0], esp; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10017d28  # and al, 0xc; neg edx; neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x1001b1fb  # and al, 0xc; push dword ptr [esp + 0xc]; call 0x1b088; add esp, 0xc; ret; 
0x1001bff6  # and al, 0xc; push dword ptr [esp + 0xc]; call 0x1ed49; add esp, 0xc; ret; 
0x100237cf  # and al, 0xc; push eax; ret; 
0x1001cfe2  # and al, 0xe8; mov eax, 0x83ffff50; les ebx, ptr [esi + ebx*2]; ret; 
0x10015102  # and al, 4; add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov ax, word ptr [eax - 4]; ret; 
0x100150e5  # and al, 4; add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov eax, dword ptr [eax - 4]; ret; 
0x100150f2  # and al, 4; add dword ptr [eax], 8; mov ecx, dword ptr [eax]; mov eax, dword ptr [ecx - 8]; mov edx, dword ptr [ecx - 4]; ret; 
0x100113bf  # and al, 4; add eax, -0x20; ret; 
0x10011502  # and al, 4; add eax, 0x20; ret; 
0x10010192  # and al, 4; call 0x10105; pop ecx; ret; 
0x10023cd5  # and al, 4; call 0x23bbf; pop ecx; ret; 
0x10011adf  # and al, 4; cmp eax, dword ptr [0x10038260]; jb 0x11aec; xor eax, eax; ret; 
0x10012ad6  # and al, 4; mov eax, dword ptr [eax]; cmp dword ptr [eax], 0xe06d7363; je 0x12ae5; xor eax, eax; ret; 
0x10016c82  # and al, 4; mul ecx; ret 0x10; 
0x100153b8  # and al, 4; push 0; call dword ptr [0x100252c0]; push 0xff; call dword ptr [0x1002527c]; ret; 
0x100189ef  # and al, 4; ret; 
0x10018c26  # and al, 4; sar eax, 1; ret; 
0x10021c6c  # and al, 4; sub dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x1c]; lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x10021ca1  # and al, 4; sub dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x20]; lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x1001f5cc  # and al, 8; add dh, byte ptr [eax + ebx - 0x18]; ret; 
0x10014791  # and al, 8; add eax, 0x20; push eax; call dword ptr [0x10025074]; ret; 
0x100147e3  # and al, 8; add eax, 0x20; push eax; call dword ptr [0x10025078]; ret; 
0x100121a8  # and al, 8; call 0x121b2; pop ecx; pop ecx; ret; 
0x1001badc  # and al, 8; call 0x1ba84; pop ecx; pop ecx; ret; 
0x10022c7f  # and al, 8; call 0x22ba7; mov dword ptr [esi], 0x10027aec; mov eax, esi; pop esi; ret 4; 
0x10023a9e  # and al, 8; call 0x23975; pop ecx; pop ecx; ret; 
0x10010337  # and al, 8; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x10013319  # and al, 8; mov dword ptr [0x10036708], edi; call dword ptr [0x1002527c]; pop edi; ret; 
0x10023da2  # and al, 8; mov ecx, esi; call 0x23d48; mov eax, esi; pop esi; ret 4; 
0x10016c9a  # and al, 8; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x1001bf8a  # and al, 8; neg cx; sbb ecx, ecx; not ecx; and eax, ecx; ret; 
0x1001032e  # and al, 8; pop edi; ret; 
0x1001bad8  # and al, 8; push dword ptr [esp + 8]; call 0x1ba84; pop ecx; pop ecx; ret; 
0x10023a9a  # and al, 8; push dword ptr [esp + 8]; call 0x23975; pop ecx; pop ecx; ret; 
0x1001325e  # and al, byte ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x1001524c  # and al, byte ptr [ebx + 0x1d7724f9]; call 0x15299; mov dword ptr [eax], 0xd; pop esi; ret; 
0x10011cc6  # and ax, 0xc000; add eax, esi; pop esi; ret; 
0x1001adfb  # and bh, dh; ret; 
0x100130cc  # and byte ptr [0x15ff1003], ch; push edx; add dl, byte ptr [eax]; pop esi; ret; 
0x1001a7f4  # and byte ptr [eax + 0x458b1001], ch; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001ba75  # and byte ptr [eax + 0xc7ffff], bl; sub al, byte ptr [eax]; add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x10014772  # and byte ptr [eax - 1], dl; adc eax, 0x10025074; ret; 
0x100147c4  # and byte ptr [eax - 1], dl; adc eax, 0x10025078; ret; 
0x1001ad33  # and byte ptr [eax], al; mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x1002047a  # and byte ptr [eax], al; mov eax, ecx; ret 8; 
0x10015f3f  # and byte ptr [eax], al; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x10011843  # and byte ptr [eax], al; or eax, 0xffffffff; pop esi; ret; 
0x10016002  # and byte ptr [eax], al; or eax, 0xffffffff; ret; 
0x1002456b  # and byte ptr [eax], al; or edx, 0xffffffff; mov eax, edx; pop esi; ret; 
0x10021ca7  # and byte ptr [ebp + 0x801120c], cl; ret 4; 
0x10019f55  # and byte ptr [ebp + 8], dh; push 0x10; call 0x19e03; pop ecx; ret; 
0x10021cb7  # and byte ptr [ebx + 0x2508d01], cl; mov dword ptr [ecx], edx; ret; 
0x1001fe10  # and byte ptr [ebx + eax + 0x10], ch; call 0x2008c; ret; 
0x100180ac  # and byte ptr [ebx + eax], dh; adc byte ptr [edx + 0x742b3c06], cl; or byte ptr [edx], bh; ret; 
0x10018d16  # and byte ptr [ecx + 3], dh; adc byte ptr [ebp + 1], dh; ret; 
0x10016fac  # and byte ptr [ecx + eax*4 + 4], 0xfd; lea eax, [ecx + eax*4 + 4]; mov eax, edi; pop edi; pop esi; ret; 
0x1001521b  # and byte ptr [ecx - 0x377cf3ba], cl; call ptr [esi + 0x5b]; pop ebp; ret; 
0x1001b3eb  # and byte ptr [ecx - 0x3974f382], cl; pop edi; pop esi; leave; ret; 
0x100242e9  # and byte ptr [ecx - 0x47f3ba], cl; inc dword ptr [eax]; add byte ptr [esi + 0x5b], bl; leave; ret; 
0x10011344  # and byte ptr [edi + 0x5e], bl; ret; 
0x10012774  # and byte ptr [edx + 1], ch; pop eax; pop edi; pop esi; pop ebp; ret; 
0x1001ad66  # and byte ptr [edx + eax + 0xc], dh; add esi, esi; ret; 
0x10016be3  # and cl, cl; ret; 
0x10017834  # and dword ptr [0x100333d4], 0; mov eax, dword ptr [0x100333ec]; pop ecx; ret; 
0x1001c684  # and dword ptr [0x100369ac], 0; pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x1001ce39  # and dword ptr [0x100369bc], 0; pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x1001d489  # and dword ptr [0x10036a04], 0; ret; 
0x10019910  # and dword ptr [0x10037118], 0; ret; 
0x1001ad31  # and dword ptr [eax + 0x20], 0; mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x10023ce0  # and dword ptr [eax + 4], 0; and dword ptr [eax + 8], 0; mov dword ptr [eax], 0x10027b70; ret; 
0x10023ce4  # and dword ptr [eax + 8], 0; mov dword ptr [eax], 0x10027b70; ret; 
0x10015f3e  # and dword ptr [eax], 0; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x10011842  # and dword ptr [eax], 0; or eax, 0xffffffff; pop esi; ret; 
0x10016001  # and dword ptr [eax], 0; or eax, 0xffffffff; ret; 
0x1002456a  # and dword ptr [eax], 0; or edx, 0xffffffff; mov eax, edx; pop esi; ret; 
0x1001b442  # and dword ptr [ebx], esi; fstp xword ptr [ebx]; ret; 
0x10017bba  # and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; ret; 
0x10014899  # and dword ptr [esi + 0x18], 0; and dword ptr [esi], 0; and dword ptr [esi + 8], 0; pop ecx; pop esi; ret; 
0x10022455  # and dword ptr [esi + 0x1c], 0; pop edi; pop esi; ret; 
0x10021d32  # and dword ptr [esi + 0x38], 0; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x10015d9f  # and dword ptr [esi + 0xc], 0; mov eax, edi; pop edi; pop esi; ret; 
0x10023910  # and dword ptr [esi + 0xc], 0x4e8bc2f3; or al, 0x83; les ecx, ptr [esi + esi*8]; ret; 
0x100243d2  # and dword ptr [esi + 4], 0; mov eax, 0xffff; pop esi; ret; 
0x10017b74  # and dword ptr [esi + 4], 0; or eax, 0xffffffff; pop esi; ret; 
0x100148a0  # and dword ptr [esi + 8], 0; pop ecx; pop esi; ret; 
0x1001489d  # and dword ptr [esi], 0; and dword ptr [esi + 8], 0; pop ecx; pop esi; ret; 
0x100237c4  # and eax, 0; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10017835  # and eax, 0x100333d4; add byte ptr [ecx + 0x100333ec], ah; pop ecx; ret; 
0x1001c685  # and eax, 0x100369ac; add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; ret; 
0x1001ce3a  # and eax, 0x100369bc; add byte ptr [ecx + 0x59], bl; xor eax, eax; pop esi; ret; 
0x10011b02  # and eax, 0x40; ret; 
0x10011cc7  # and eax, 0xc603c000; pop esi; ret; 
0x1001d68b  # and eax, 1; pop edi; pop esi; pop ebx; leave; ret 4; 
0x1001d7a0  # and eax, 1; pop esi; leave; ret 4; 
0x10018c46  # and eax, dword ptr [0x100355ac]; ret; 
0x1001b895  # and eax, dword ptr [0x10036edc]; ret; 
0x1001246a  # and eax, dword ptr [eax]; add byte ptr [ebx - 0x3974e73c], al; pop esi; pop ebp; ret; 
0x100113b8  # and eax, dword ptr [ebp + 0xc]; leave; ret; 
0x1001bad2  # and eax, ecx; leave; ret; 
0x1001fcee  # and eax, ecx; pop ebp; ret; 
0x1001c1d5  # and eax, ecx; pop esi; pop ebp; ret; 
0x10016a7b  # and eax, ecx; ret; 
0x1001bf28  # and eax, esi; pop esi; pop ebx; pop ebp; ret; 
0x100237eb  # and edx, dword ptr [ecx + 4]; cmp edx, eax; je 0x237f4; xor eax, eax; ret; 
0x1002124c  # arpl word ptr [ebx], ax; adc byte ptr [ebp - 0x6bf003b3], cl; ret; 
0x1001ffef  # bound eax, qword ptr [ebx]; adc byte ptr [ebp - 0x6bf003b3], cl; ret; 
0x1001d8dc  # call 0x10105; pop ecx; pop esi; leave; ret; 
0x10010194  # call 0x10105; pop ecx; ret; 
0x1001036e  # call 0x10260; pop ecx; pop ecx; pop esi; ret; 
0x1001047c  # call 0x1037b; pop ecx; ret; 
0x100108eb  # call 0x108f4; add esp, 0x14; ret; 
0x1001741b  # call 0x120a0; add esp, 0x18; mov eax, esi; pop esi; pop ebp; ret; 
0x1001cfe3  # call 0x120a0; add esp, 0x1c; pop esi; ret; 
0x1001cb65  # call 0x120a0; add esp, 0x2c; pop esi; ret; 
0x1001cfdb  # call 0x120a0; push dword ptr [esi + 0x24]; call 0x120a0; add esp, 0x1c; pop esi; ret; 
0x1001cb5a  # call 0x120a0; push dword ptr [esi + 0xa8]; call 0x120a0; add esp, 0x2c; pop esi; ret; 
0x1001613d  # call 0x12189; add esp, 0xc; ret; 
0x100121aa  # call 0x121b2; pop ecx; pop ecx; ret; 
0x10021b7a  # call 0x122e0; test eax, eax; pop ecx; jge 0x21b88; or eax, 0xffffffff; ret; 
0x100122ea  # call 0x123a2; pop ecx; pop esi; ret; 
0x1001239b  # call 0x123a2; pop ecx; ret; 
0x10012aa0  # call 0x12ad4; pop ecx; ret; 
0x10012c78  # call 0x12e6e; pop ecx; pop ecx; ret; 
0x1001e49f  # call 0x12fd1; add eax, 0x54; ret; 
0x1001e496  # call 0x12fd1; add eax, 0x58; ret; 
0x100152a2  # call 0x12fd1; add eax, 0xc; ret; 
0x10015299  # call 0x12fd1; add eax, 8; ret; 
0x1001324c  # call 0x13284; add esp, 0xc; ret; 
0x10013310  # call 0x13332; pop edi; ret; 
0x1001323b  # call 0x1333b; add esp, 0x10; ret; 
0x10013be2  # call 0x138e9; add esp, 0x10; pop ebp; ret; 
0x10013bb9  # call 0x13a0c; add esp, 0xc; pop ebp; ret; 
0x10024656  # call 0x1440; ret; 
0x10014505  # call 0x1450c; pop ecx; ret; 
0x10023992  # call 0x1479e; add esp, 0x10; mov ax, si; pop esi; ret; 
0x10023814  # call 0x1479e; add esp, 0x14; mov eax, esi; pop esi; pop ebp; ret; 
0x10024131  # call 0x1479e; add esp, 0x18; mov eax, esi; pop esi; pop ebp; ret; 
0x10023bd4  # call 0x1479e; add esp, 0xc; mov ax, di; pop edi; pop esi; ret; 
0x10012302  # call 0x1479e; add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x1001f5bc  # call 0x15226; pop ecx; or eax, 0xffffffff; ret; 
0x1002389d  # call 0x15299; mov dword ptr [eax], 0x16; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x10011cce  # call 0x15299; mov dword ptr [eax], 0x16; or eax, 0xffffffff; pop esi; ret; 
0x1001528c  # call 0x15299; mov dword ptr [eax], 0x16; pop esi; ret; 
0x1001ba74  # call 0x15299; mov dword ptr [eax], 0x2a; or eax, 0xffffffff; pop ebp; ret; 
0x1001c139  # call 0x15299; mov dword ptr [eax], 0xa; or eax, 0xffffffff; pop ebx; pop ebp; ret; 
0x10015252  # call 0x15299; mov dword ptr [eax], 0xd; pop esi; ret; 
0x10017031  # call 0x15299; mov dword ptr [eax], 0xd; xor eax, eax; pop ebx; leave; ret; 
0x1001527f  # call 0x15299; mov dword ptr [eax], 8; pop esi; ret; 
0x1001168b  # call 0x15299; mov dword ptr [eax], 9; or eax, 0xffffffff; pop esi; ret; 
0x10015f39  # call 0x152a2; and dword ptr [eax], 0; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x1001183d  # call 0x152a2; and dword ptr [eax], 0; or eax, 0xffffffff; pop esi; ret; 
0x10015ffc  # call 0x152a2; and dword ptr [eax], 0; or eax, 0xffffffff; ret; 
0x10024565  # call 0x152a2; and dword ptr [eax], 0; or edx, 0xffffffff; mov eax, edx; pop esi; ret; 
0x1001332b  # call 0x15340; pop ecx; ret; 
0x10016fd5  # call 0x153a1; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x10018175  # call 0x153a1; add esp, 0xc; mov eax, esi; pop esi; ret; 
0x1001a58d  # call 0x153a1; pop ecx; mov eax, esi; pop ecx; pop esi; ret; 
0x10017ed1  # call 0x153a1; pop ecx; pop ecx; ret; 
0x10023723  # call 0x153a1; pop ecx; pop esi; ret; 
0x10012164  # call 0x153a1; pop ecx; ret; 
0x10013630  # call 0x153a1; pop ecx; xor edi, edi; ret; 
0x1001bfb7  # call 0x15ac8; pop ecx; pop ecx; pop esi; ret; 
0x10016ce4  # call 0x1610e; add esp, 0x14; mov eax, edi; pop edi; pop esi; ret; 
0x1001133d  # call 0x1610e; add esp, 0x20; pop edi; pop esi; ret; 
0x1001628f  # call 0x1610e; add esp, 0xc; mov eax, edi; pop edi; pop esi; ret; 
0x10012197  # call 0x17153; add esp, 0x10; ret; 
0x10016155  # call 0x17294; add esp, 0x10; ret; 
0x10017a98  # call 0x1795d; add esp, 0x10; ret; 
0x10019f5a  # call 0x19e03; pop ecx; ret; 
0x100121d1  # call 0x1a59e; test eax, eax; pop ecx; jne 0x121b9; xor eax, eax; ret; 
0x1001232d  # call 0x1a5b9; neg eax; pop ecx; pop esi; sbb eax, eax; ret; 
0x10013c06  # call 0x1a6a0; add esp, 0x10; pop esi; pop edi; ret; 
0x10019902  # call 0x1a6a0; add esp, 0xc; dec dword ptr [0x1003711c]; and dword ptr [0x10037118], 0; ret; 
0x1001377c  # call 0x1acfd; pop ecx; pop ecx; ret; 
0x1001acac  # call 0x1ae59; pop ecx; leave; ret; 
0x1001b201  # call 0x1b088; add esp, 0xc; ret; 
0x1001b2bd  # call 0x1b1f4; add esp, 0x24; leave; ret; 
0x1001b318  # call 0x1b20a; add esp, 0x24; leave; ret; 
0x1001b2eb  # call 0x1b220; add esp, 0x24; leave; ret; 
0x1001b8a7  # call 0x1b4b4; pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x1001bade  # call 0x1ba84; pop ecx; pop ecx; ret; 
0x1001d689  # call 0x1e25990; pop edi; pop esi; pop ebx; leave; ret 4; 
0x1001d79e  # call 0x1e25aa5; pop esi; leave; ret 4; 
0x1001d85b  # call 0x1e25b62; pop esi; leave; ret 4; 
0x1001e51c  # call 0x1e4a8; add esp, 0xc; pop edi; pop esi; ret; 
0x1001bffc  # call 0x1ed49; add esp, 0xc; ret; 
0x1001c014  # call 0x1ed60; add esp, 0x10; ret; 
0x1001ed57  # call 0x1f441; add esp, 0x10; ret; 
0x10024670  # call 0x1ffde; pop ecx; pop ecx; ret; 
0x1001fda3  # call 0x2008c; ret; 
0x1001fd5f  # call 0x201a8; ret; 
0x10022194  # call 0x20295; mov eax, esi; pop edi; pop esi; ret 4; 
0x10022273  # call 0x202bb; mov ecx, dword ptr [ebp - 0xc]; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x1001fd03  # call 0x20487; ret; 
0x1002245e  # call 0x20ad0; ret; 
0x10020340  # call 0x20b96; movzx eax, byte ptr [eax]; pop esi; ret; 
0x1002102c  # call 0x212e9; ret; 
0x10021278  # call 0x21348; leave; ret; 
0x1002126e  # call 0x21348; mov ecx, 0x10036c98; call 0x21348; leave; ret; 
0x10020fe8  # call 0x21405; ret; 
0x10020f5f  # call 0x2166b; ret; 
0x100214ff  # call 0x21c8c; mov ax, word ptr [eax]; pop esi; ret; 
0x10021cda  # call 0x21ce7; mov eax, esi; pop esi; ret; 
0x1002255f  # call 0x21dc1; lea ecx, [ebp - 4]; call 0x21e5d; mov eax, 0x10036ea0; leave; ret; 
0x10022567  # call 0x21e5d; mov eax, 0x10036ea0; leave; ret; 
0x10020301  # call 0x21e5d; mov eax, esi; pop edi; pop esi; leave; ret; 
0x10022604  # call 0x21e5d; mov eax, esi; pop esi; leave; ret 8; 
0x1002028b  # call 0x21e5d; mov eax, esi; pop esi; leave; ret; 
0x10022854  # call 0x21e5d; mov ecx, dword ptr [ebp - 0xc]; mov dword ptr fs:[0], ecx; leave; ret; 
0x100202b3  # call 0x21e5d; pop esi; leave; ret; 
0x1002012b  # call 0x21e72; mov eax, esi; pop edi; pop esi; ret; 
0x10022164  # call 0x21e72; pop edi; mov eax, esi; pop esi; pop ebx; ret 4; 
0x10022412  # call 0x21e72; pop edi; pop esi; ret; 
0x10021c5e  # call 0x22394; pop esi; ret 8; 
0x10022744  # call 0x22464; mov eax, edi; pop edi; pop esi; leave; ret 4; 
0x100229b9  # call 0x229c1; ret 4; 
0x10022c81  # call 0x22ba7; mov dword ptr [esi], 0x10027aec; mov eax, esi; pop esi; ret 4; 
0x1002222d  # call 0x23164; ret 8; 
0x10023aa0  # call 0x23975; pop ecx; pop ecx; ret; 
0x10023cd7  # call 0x23bbf; pop ecx; ret; 
0x100231b7  # call 0x23d0b; mov dword ptr [esi], 0x10027b58; mov eax, esi; pop esi; ret 4; 
0x10023213  # call 0x23d48; mov dword ptr [esi], 0x10027b58; mov eax, esi; pop esi; ret 4; 
0x10023da6  # call 0x23d48; mov eax, esi; pop esi; ret 4; 
0x10022d17  # call 0x23db1; mov ecx, dword ptr [ebp - 0xc]; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x100238bd  # call 0x2410f; add esp, 0x10; ret; 
0x1002463a  # call 0x2c40; pop ecx; ret; 
0x1001562c  # call 0x33115997; fstp xword ptr [eax]; pop esi; add dword ptr [edi], ecx; xchg esp, eax; ret; 
0x10018682  # call 0x36b0728; adc byte ptr [ebx], dh; fstp xword ptr [ebx]; ret; 
0x10024626  # call 0x38a5; ret; 
0x100188aa  # call 0x458b4d3a; fadd qword ptr [ebx - 0x140003b3]; adc ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001ec4c  # call 0x458bb0dc; fadd qword ptr [ebx - 0x140003b3]; push ss; push 1; pop eax; ret; 
0x1001b6bc  # call 0x480e2ace; je 0x1b6c6; xor eax, eax; ret; 
0x10018b68  # call 0x5d8b67f8; fadd qword ptr [ebx - 0x140003b3]; adc ch, byte ptr [edx + 1]; pop eax; ret; 
0x1001ea1d  # call 0x5d8bc6ad; fsub st(3), st(0); or ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001ecbb  # call 0x7d8be94b; fadd dword ptr [ebx - 0x140003b3]; adc ch, byte ptr [edx + 1]; pop eax; ret; 
0x100157c8  # call 0xc1115b33; clc; add dh, bh; fcomp dword ptr [edi + 0x5e]; ret; 
0x10021b9e  # call 0xc81e; pop ecx; mov eax, esi; pop esi; ret 4; 
0x10023dc0  # call 0xc81e; pop ecx; ret; 
0x10012b5b  # call 0xc837; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x1001a568  # call 0xcb82; add esp, 8; pop ebp; ret 4; 
0x10012f40  # call 0xcc0d; pop ebp; pop ecx; pop ebx; leave; ret 0xc; 
0x1001fd0e  # call 0xd14a; pop ecx; ret; 
0x1001b4ad  # call 0xd451; pop ecx; ret; 
0x100153aa  # call 0xff1156e0; adc eax, 0x10025078; pop ebp; ret; 
0x10016104  # call dword ptr [0x10025074]; pop edi; pop esi; pop ebx; ret; 
0x10015398  # call dword ptr [0x10025074]; pop esi; pop ebp; ret; 
0x10014774  # call dword ptr [0x10025074]; ret; 
0x100153ae  # call dword ptr [0x10025078]; pop ebp; ret; 
0x100147c6  # call dword ptr [0x10025078]; ret; 
0x10021e56  # call dword ptr [0x1002508c]; ret; 
0x1001d86e  # call dword ptr [0x100250b4]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x1001d6d4  # call dword ptr [0x100250b8]; test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7c8  # call dword ptr [0x100250b8]; test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x1001ac46  # call dword ptr [0x100250e0]; pop esi; pop ebx; leave; ret; 
0x1001302d  # call dword ptr [0x100250e8]; mov eax, esi; pop edi; pop esi; ret; 
0x10014656  # call dword ptr [0x1002516c]; pop esi; leave; ret; 
0x10019df2  # call dword ptr [0x10025254]; pop esi; ret; 
0x100130d0  # call dword ptr [0x10025264]; pop esi; ret; 
0x10012fb0  # call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x100131fe  # call dword ptr [0x10025278]; mov dword ptr [0x100366c4], eax; ret; 
0x10013210  # call dword ptr [0x10025278]; ret; 
0x10013321  # call dword ptr [0x1002527c]; pop edi; ret; 
0x100153c7  # call dword ptr [0x1002527c]; ret; 
0x100144ca  # call dword ptr [0x100252b4]; pop edi; pop esi; ret; 
0x1001441e  # call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x100153bc  # call dword ptr [0x100252c0]; push 0xff; call dword ptr [0x1002527c]; ret; 
0x1001b933  # call dword ptr [0x1003699c]; pop edi; pop esi; pop ebx; ret; 
0x100214ed  # call dword ptr [eax + 0x10]; cmp ax, 0xffff; jne 0x214fd; mov eax, 0xffff; pop esi; ret; 
0x10020332  # call dword ptr [eax + 0x10]; cmp eax, -1; jne 0x2033e; or eax, eax; pop esi; ret; 
0x10012c75  # call dword ptr [eax + 0x57]; call 0x12e6e; pop ecx; pop ecx; ret; 
0x1001ad05  # call dword ptr [eax - 1]; je 0x1ad2e; or al, ch; mov eax, 0x59ffffff; pop ecx; ret; 
0x10020701  # call dword ptr [edi + 8]; pop edi; pop esi; ret; 
0x100202d0  # call dword ptr [edx]; ret; 
0x10015397  # call dword ptr ss:[0x10025074]; pop esi; pop ebp; ret; 
0x100137e3  # call eax; ret; 
0x10015437  # call edi; mov ax, word ptr [esp + 0x10]; pop edi; pop esi; pop ebx; ret; 
0x1001142a  # call edi; mov eax, dword ptr [esp + 0x10]; pop edi; pop esi; pop ebx; ret; 
0x1001533b  # call edi; pop edi; pop esi; ret; 
0x100152d0  # call esi; pop esi; ret; 
0x100152c8  # call esi; push dword ptr [0x100331ec]; call esi; pop esi; ret; 
0x10012f44  # call ptr [ebp + 0x59]; pop ebx; leave; ret 0xc; 
0x1001c146  # call ptr [ebx + 0x5d]; ret; 
0x10016b3c  # call ptr [ebx - 0x37]; ret; 
0x10014381  # call ptr [ecx + 0x3b]; ret; 
0x10010372  # call ptr [ecx + 0x59]; pop esi; ret; 
0x10017ed5  # call ptr [ecx + 0x59]; ret; 
0x1001d8e0  # call ptr [ecx + 0x5e]; leave; ret; 
0x10023727  # call ptr [ecx + 0x5e]; ret; 
0x10018159  # call ptr [ecx + 0x5f]; pop esi; pop ebx; leave; ret; 
0x100130c6  # call ptr [ecx + 0x6a]; add bh, bh; xor eax, 0x10032d20; call dword ptr [0x10025264]; pop esi; ret; 
0x1001b8ab  # call ptr [ecx - 0x39]; add eax, 0x10038268; add dword ptr [eax], eax; add byte ptr [eax], al; ret; 
0x1001b9bb  # call ptr [ecx - 0x75]; ret; 
0x10011ad8  # call ptr [edi + 0x5b]; leave; ret; 
0x10011c1e  # call ptr [edi + 0x5e]; pop ebp; pop ebx; ret; 
0x100241ca  # call ptr [edi + 0x5e]; pop ebp; ret; 
0x10020625  # call ptr [edi + 0x5e]; pop ebx; leave; ret 4; 
0x10010f6b  # call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x10012b5f  # call ptr [edi + 0x5e]; pop ebx; pop ebp; ret; 
0x100206d3  # call ptr [edi + 0x5e]; pop ebx; ret 4; 
0x1001a647  # call ptr [edi + 0x5e]; pop ebx; ret; 
0x10015f43  # call ptr [edi + 0x5e]; ret; 
0x100104f2  # call ptr [edi + 2]; ret; 
0x10015221  # call ptr [esi + 0x5b]; pop ebp; ret; 
0x100223de  # call ptr [esi - 0x37]; ret; 
0x10019903  # cdq; or eax, 0xc4830000; or al, 0xff; or eax, 0x1003711c; and dword ptr [0x10037118], 0; ret; 
0x100147d2  # clc; adc al, 0x7d; or eax, dword ptr [ebx - 0x17afe340]; ret 0xb; 
0x10019f11  # clc; add al, 0x8d; inc esp; or byte ptr [eax], cl; ret; 
0x100157cd  # clc; add dh, bh; fcomp dword ptr [edi + 0x5e]; ret; 
0x10021e4d  # clc; add dh, byte ptr [ebp + 0xb]; push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x10014763  # clc; add eax, 0x501cc083; call 0x15340; pop ecx; ret; 
0x100147b5  # clc; add eax, 0x501cc083; call 0x153a1; pop ecx; ret; 
0x10018c34  # clc; add esi, dword ptr [ebp + 6]; mov eax, dword ptr [0x10037124]; ret; 
0x1001b697  # clc; cld; jne 0x1b6aa; mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x1001506a  # clc; dec dword ptr [ebx + 0x5751045]; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x10020fb5  # clc; insd dword ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x2166b; ret; 
0x100113da  # clc; jp 0x1145c; push esp; sub eax, 0x20; pop ebx; ret; 
0x100138c9  # clc; mov dword ptr [eax], ecx; mov ecx, dword ptr [ebp - 4]; mov dword ptr [eax + 4], ecx; leave; ret; 
0x100150fb  # clc; mov edx, dword ptr [ecx - 4]; ret; 
0x1001728f  # clc; pop edi; pop esi; leave; ret; 
0x100106a1  # clc; pop edi; pop esi; pop ebx; leave; ret; 
0x1001151d  # clc; pop edx; jg 0x11575; add eax, 0x20; pop ebx; ret; 
0x1001fd9f  # clc; push 3; adc al, ch; in al, 2; add byte ptr [eax], al; ret; 
0x100173f4  # clc; push dword ptr [ebp + 4]; or eax, eax; pop ebp; ret; 
0x10020336  # clc; push dword ptr [ebp + 4]; or eax, eax; pop esi; ret; 
0x10022f3b  # clc; push dword ptr [ebp + 6]; or ax, 0xffff; leave; ret; 
0x10017af9  # clc; push dword ptr [edx + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x10024353  # clc; push dword ptr [esi + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x10012fab  # clc; push dword ptr [esi + ecx + 0x50]; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10020882  # clc; rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x10; 
0x10021b3b  # clc; rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x20; 
0x10018c29  # clc; ret; 
0x10022596  # cld; add byte ptr [ebp + 0x6a0974c9], al; add eax, ebp; ret 2; 
0x1001acab  # cld; call 0x1ae59; pop ecx; leave; ret; 
0x10022566  # cld; call 0x21e5d; mov eax, 0x10036ea0; leave; ret; 
0x10022603  # cld; call 0x21e5d; mov eax, esi; pop esi; leave; ret 8; 
0x1002028a  # cld; call 0x21e5d; mov eax, esi; pop esi; leave; ret; 
0x100202b2  # cld; call 0x21e5d; pop esi; leave; ret; 
0x1001b698  # cld; jne 0x1b6aa; mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x100138ce  # cld; mov dword ptr [eax + 4], ecx; leave; ret; 
0x1001baca  # cld; movzx ecx, word ptr [ebp + 0xc]; movzx eax, ax; and eax, ecx; leave; ret; 
0x100203b8  # cld; pop edi; leave; ret 8; 
0x1001b295  # cld; pop edi; pop esi; leave; ret; 
0x10021588  # cld; pop edi; pop esi; pop ebx; leave; ret 8; 
0x100173d1  # cld; pop edi; pop esi; pop ebx; leave; ret; 
0x1001e640  # cld; pop esi; mov word ptr [ebx + 0xa], ax; pop ebx; leave; ret; 
0x1001aca8  # cld; push dword ptr [ebp - 4]; call 0x1ae59; pop ecx; leave; ret; 
0x100150ee  # cld; ret; 
0x100114f7  # cld; shl eax, 8; or eax, ecx; pop ebx; leave; ret; 
0x10020fef  # cli; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x1001afd1  # cmc; pop esi; ret; 
0x10015266  # cmc; test byte ptr [eax], dh; add edx, dword ptr [eax]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10021d38  # cmp al, 0x5e; ret 8; 
0x1001053b  # cmp al, byte ptr [edx]; ret; 
0x10016bdb  # cmp ax, 0x5a; ja 0x16c2d; add eax, 0x20; leave; ret; 
0x100153e3  # cmp ax, 0x7a; ja 0x15440; add eax, 0xffe0; pop ebx; ret; 
0x10015463  # cmp ax, 0x7a; ja 0x154b7; add eax, 0xffe0; leave; ret; 
0x10015449  # cmp ax, 0xffff; jne 0x15454; or ax, ax; leave; ret; 
0x10016bc1  # cmp ax, 0xffff; jne 0x16bcc; or ax, ax; leave; ret; 
0x100214f0  # cmp ax, 0xffff; jne 0x214fd; mov eax, 0xffff; pop esi; ret; 
0x10024566  # cmp byte ptr [0x2083ffff], cl; add byte ptr [ebx - 0x3d740036], al; pop esi; ret; 
0x10016101  # cmp byte ptr [eax + edx*2], cl; call dword ptr [0x10025074]; pop edi; pop esi; pop ebx; ret; 
0x100189e7  # cmp byte ptr [eax], 0; pop esi; jne 0x189f2; sub eax, dword ptr [esp + 4]; ret; 
0x1001ed3b  # cmp byte ptr [eax], 0; pop esi; jne 0x1ed46; sub eax, dword ptr [esp + 4]; ret; 
0x10021d34  # cmp byte ptr [eax], al; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x100189e8  # cmp byte ptr [eax], al; pop esi; jne 0x189f2; sub eax, dword ptr [esp + 4]; ret; 
0x10018c1f  # cmp byte ptr [eax], al; pop esi; jne 0x18c2b; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x1001bd22  # cmp byte ptr [eax], al; pop esi; jne 0x1bd2e; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x1001ed3c  # cmp byte ptr [eax], al; pop esi; jne 0x1ed46; sub eax, dword ptr [esp + 4]; ret; 
0x10012ec6  # cmp byte ptr [ebp + 0xc], al; setne al; ret; 
0x10012165  # cmp byte ptr [edx], dh; add byte ptr [eax], al; pop ecx; ret; 
0x10024633  # cmp dh, 0xff; mov eax, dword ptr [ebp - 0x1c]; push eax; call 0x2c40; pop ecx; ret; 
0x10024606  # cmp dh, 0xff; pop ecx; ret; 
0x10016156  # cmp dl, byte ptr [ecx]; add byte ptr [eax], al; add esp, 0x10; ret; 
0x10021e5d  # cmp dword ptr [0x10036e68], 2; jne 0x21e71; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10012c9d  # cmp dword ptr [eax + 0x1c], 0; jne 0x12ca7; push 1; pop eax; ret; 
0x1001e48c  # cmp dword ptr [eax + 4], esi; je 0x1e493; xor eax, eax; pop edi; pop esi; ret; 
0x10018c1e  # cmp dword ptr [eax], 0; pop esi; jne 0x18c2b; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x1001bd21  # cmp dword ptr [eax], 0; pop esi; jne 0x1bd2e; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x10012ada  # cmp dword ptr [eax], 0xe06d7363; je 0x12ae5; xor eax, eax; ret; 
0x1001ac81  # cmp dword ptr [eax], esi; je 0x1ac87; xor eax, eax; pop edi; pop esi; ret; 
0x1001bf31  # cmp dword ptr [ebp + 0x10], 0; jne 0x1bf3b; xor eax, eax; pop ebp; ret; 
0x1001d98a  # cmp dword ptr [ebp - 0x84], 2; jne 0x1d998; push 1; pop eax; leave; ret; 
0x100246a1  # cmp dword ptr [ecx + 0x5959ffff], edi; ret; 
0x1001ba3a  # cmp dword ptr [edx + 1], ebp; mov byte ptr [eax], cl; pop eax; pop ebp; ret; 
0x10012faa  # cmp eax, -1; je 0x12fbd; push eax; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x100173f3  # cmp eax, -1; jne 0x173fc; or eax, eax; pop ebp; ret; 
0x1001eec5  # cmp eax, -1; jne 0x1eece; or eax, eax; pop ebp; ret; 
0x10020335  # cmp eax, -1; jne 0x2033e; or eax, eax; pop esi; ret; 
0x10022f3a  # cmp eax, -1; jne 0x22f45; or ax, 0xffff; leave; ret; 
0x10015069  # cmp eax, -1; mov eax, dword ptr [ebp + 0x10]; jne 0x15076; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x1001b696  # cmp eax, -4; jne 0x1b6aa; mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x1001d8f6  # cmp eax, 0x10035c80; jb 0x1d8ea; push 1; pop eax; ret; 
0x1001331c  # cmp eax, 0x10036708; call dword ptr [0x1002527c]; pop edi; ret; 
0x10021e5e  # cmp eax, 0x10036e68; add dh, byte ptr [ebp + 0xb]; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10016bdc  # cmp eax, 0x4c77005a; add eax, 0x20; leave; ret; 
0x10015464  # cmp eax, 0x4e77007a; add eax, 0xffe0; leave; ret; 
0x1001544a  # cmp eax, 0x575ffff; or ax, ax; leave; ret; 
0x100153e4  # cmp eax, 0x5777007a; add eax, 0xffe0; pop ebx; ret; 
0x1001151c  # cmp eax, 0x5a; jg 0x11575; add eax, 0x20; pop ebx; ret; 
0x100214f1  # cmp eax, 0x775ffff; mov eax, 0xffff; pop esi; ret; 
0x100113d9  # cmp eax, 0x7a; jg 0x11432; sub eax, 0x20; pop ebx; ret; 
0x10017108  # cmp eax, 1; je 0x17112; push 1; pop eax; pop ebp; ret; 
0x10021e4c  # cmp eax, 2; jne 0x21e5c; push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x10018c33  # cmp eax, 3; jne 0x18c3e; mov eax, dword ptr [0x10037124]; ret; 
0x10011ae1  # cmp eax, dword ptr [0x10038260]; jb 0x11aec; xor eax, eax; ret; 
0x100206ed  # cmp eax, ecx; jae 0x206f6; movzx eax, byte ptr [eax]; pop esi; ret; 
0x100218ee  # cmp eax, ecx; jae 0x218f7; mov ax, word ptr [eax]; pop esi; ret; 
0x1001b885  # cmp eax, esi; jb 0x1b847; pop esi; leave; ret; 
0x1001524d  # cmp ecx, 0x24; ja 0x1526f; call 0x15299; mov dword ptr [eax], 0xd; pop esi; ret; 
0x1001afef  # cmp ecx, 3; jl 0x1afe6; push 1; pop eax; ret; 
0x1001467e  # cmp ecx, dword ptr [eax + 0x10032d68]; jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001472e  # cmp edx, 0x10032e68; jl 0x14707; pop esi; ret; 
0x100237ee  # cmp edx, eax; je 0x237f4; xor eax, eax; ret; 
0x1001aec9  # cmp esi, 3; jl 0x1aec0; push 1; pop eax; pop esi; ret; 
0x10018c1d  # cmp word ptr [eax], 0; pop esi; jne 0x18c2b; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x100168f7  # cmpsb byte ptr [esi], byte ptr es:[edi]; ljmp 0x5fc7:0x8b59ffff; pop esi; leave; ret; 
0x1002109b  # cwde; insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x212e9; ret; 
0x10021274  # cwde; insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x21348; leave; ret; 
0x10019dfc  # cwde; xor eax, 0x5eff1003; ret; 
0x10011c6e  # daa; add byte ptr ss:[eax], al; mov dword ptr [eax], 9; or eax, 0xffffffff; pop esi; ret; 
0x10018176  # daa; sar bh, cl; inc dword ptr [ebx - 0x3974f33c]; pop esi; ret; 
0x1001f854  # dec byte ptr [ebx + 0x74c08503]; adc byte ptr [eax - 0x7d], dl; ret; 
0x10021c85  # dec byte ptr [ebx + 0x8b1c41]; ret; 
0x100139e8  # dec byte ptr [ebx - 0x47cbe26]; or bh, byte ptr [ecx + edx - 0x75]; ret; 
0x100154b6  # dec cl; ret; 
0x1001b812  # dec dword ptr [eax + 0x36f0090]; adc bl, ch; sbb al, 0xf6; ret 0x7402; 
0x10021c8f  # dec dword ptr [eax]; mov ecx, dword ptr [ecx + 0x1c]; mov eax, dword ptr [ecx]; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x10021cb3  # dec dword ptr [eax]; mov ecx, dword ptr [ecx + 0x20]; mov eax, dword ptr [ecx]; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x10022850  # dec dword ptr [ebp + 0x4e8f04d]; idiv bh; dec dword ptr [ebx - 0x769b0bb3]; or eax, 0; leave; ret; 
0x1001506b  # dec dword ptr [ebx + 0x5751045]; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x10012562  # dec dword ptr [ebx + 0x5e5f1045]; pop ebx; leave; ret; 
0x10022277  # dec dword ptr [ebx + 0x645ef44d]; mov dword ptr [0], ecx; leave; ret; 
0x10022748  # dec dword ptr [ebx - 0x36a1a039]; ret 4; 
0x10022858  # dec dword ptr [ebx - 0x769b0bb3]; or eax, 0; leave; ret; 
0x10015c5d  # dec eax; adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x10017c3e  # dec eax; add al, 0x5b; leave; ret; 
0x100138d0  # dec eax; add al, 0xc9; ret; 
0x10019dea  # dec eax; add al, 0xff; xor eax, 0x10038144; call dword ptr [0x10025254]; pop esi; ret; 
0x10018c2f  # dec eax; add dword ptr [ebx], 0x3f88310; jne 0x18c3e; mov eax, dword ptr [0x10037124]; ret; 
0x100218ed  # dec eax; cmp eax, ecx; jae 0x218f7; mov ax, word ptr [eax]; pop esi; ret; 
0x1001b6c0  # dec eax; je 0x1b6c6; xor eax, eax; ret; 
0x10018c3f  # dec eax; neg eax; sbb eax, eax; not eax; and eax, dword ptr [0x100355ac]; ret; 
0x1001b4a4  # dec eax; or byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x1001427a  # dec eax; sbb cl, byte ptr [eax + 0x1b408a0e]; mov byte ptr [esi + 1], al; pop esi; ret; 
0x1001133f  # dec ebp; add byte ptr [eax], al; add esp, 0x20; pop edi; pop esi; ret; 
0x10022565  # dec ebp; cld; call 0x21e5d; mov eax, 0x10036ea0; leave; ret; 
0x100202b1  # dec ebp; cld; call 0x21e5d; pop esi; leave; ret; 
0x100138cd  # dec ebp; cld; mov dword ptr [eax + 4], ecx; leave; ret; 
0x100225af  # dec ebp; hlt; mov dword ptr fs:[0], ecx; leave; ret; 
0x10021fcd  # dec ebp; hlt; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x100226cb  # dec ebp; in al, 0xfe; ret; 
0x1001f438  # dec ebp; or al, 0x75; ret; 
0x1001b1eb  # dec ebp; or al, 0x89; xor dword ptr [edi + 0x5e], ebx; pop ebx; leave; ret; 
0x1001bacd  # dec ebp; or al, 0xf; mov bh, 0xc0; and eax, ecx; leave; ret; 
0x1001be1d  # dec ebp; or byte ptr [edi], cl; mov bh, 0x45; or al, 0x2b; rcr dword ptr [ebx + 0x5e], 0xc9; ret; 
0x10021cb6  # dec ecx; and byte ptr [ebx + 0x2508d01], cl; mov dword ptr [ecx], edx; ret; 
0x10024691  # dec ecx; mov ecx, 0x5959ffff; ret; 
0x10012eed  # dec ecx; or byte ptr [ebx - 0x35fcf1f4], cl; add eax, ecx; pop esi; ret; 
0x10022f42  # dec ecx; ret; 
0x10021c92  # dec ecx; sbb al, 0x8b; add dword ptr [ebp + 0x11890250], ecx; ret; 
0x10012199  # dec edi; add byte ptr [eax], al; add esp, 0x10; ret; 
0x1001797b  # dec edi; pop ecx; jne 0x1796b; pop esi; pop edi; ret; 
0x100150a3  # dec edi; test eax, eax; jg 0x1508b; pop edi; pop esi; ret; 
0x1001afcf  # dec edx; jne 0x1afc7; pop esi; ret; 
0x10015468  # dec esi; add eax, 0xffe0; leave; ret; 
0x1001804e  # dec esi; mov eax, dword ptr [0xc483ffff]; or al, 0x3b; ret; 
0x10023916  # dec esi; or al, 0x83; les ecx, ptr [esi + esi*8]; ret; 
0x10017cae  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x10016be0  # dec esp; add eax, 0x20; leave; ret; 
0x10016c7b  # dec esp; and al, 0xc; jne 0x16c89; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x1001ffee  # dec esp; bound eax, qword ptr [ebx]; adc byte ptr [ebp - 0x6bf003b3], cl; ret; 
0x100204ce  # dec esp; ret; 
0x100122a7  # div byte ptr [eax]; add byte ptr [eax], al; pop ecx; ret; 
0x100122e6  # div byte ptr [ebp + 9]; push esi; call 0x123a2; pop ecx; pop esi; ret; 
0x100189e4  # div byte ptr [ebp - 0xd]; cmp byte ptr [eax], 0; pop esi; jne 0x189f2; sub eax, dword ptr [esp + 4]; ret; 
0x1001ed38  # div byte ptr [ebp - 0xd]; cmp byte ptr [eax], 0; pop esi; jne 0x1ed46; sub eax, dword ptr [esp + 4]; ret; 
0x10015ac3  # div byte ptr [ebp - 0xf]; pop esi; ret; 
0x10010315  # div byte ptr [edi - 9]; ret 0; 
0x1001ecc0  # fadd dword ptr [ebx - 0x140003b3]; adc ch, byte ptr [edx + 1]; pop eax; ret; 
0x10018b6d  # fadd qword ptr [ebx - 0x140003b3]; adc ch, byte ptr [edx + 1]; pop eax; ret; 
0x100188af  # fadd qword ptr [ebx - 0x140003b3]; adc ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001ec51  # fadd qword ptr [ebx - 0x140003b3]; push ss; push 1; pop eax; ret; 
0x1001c1d1  # fcomp dword ptr [ebx]; rcr byte ptr [edi + 0x23], 0xc1; pop esi; pop ebp; ret; 
0x1001fcea  # fcomp dword ptr [ebx]; rcr byte ptr [esi + 0x23], 0xc1; pop ebp; ret; 
0x10011cc1  # fcomp dword ptr [ebx]; ror byte ptr [eax + 0x25660a], 0xc0; add eax, esi; pop esi; ret; 
0x10018c41  # fcomp dword ptr [ebx]; sal bh, 0xd0; and eax, dword ptr [0x100355ac]; ret; 
0x10023774  # fcomp dword ptr [ecx + 0x1b]; rcr byte ptr [ecx - 9], 0xd8; ret 4; 
0x10012333  # fcomp dword ptr [ecx + 0x5e]; sbb eax, eax; ret; 
0x1001018a  # fcomp dword ptr [edi + 0x5e]; pop ebp; pop ebx; ret; 
0x100157d0  # fcomp dword ptr [edi + 0x5e]; ret; 
0x100184af  # fdiv st(7), st(0); inc dword ptr [ebx - 0x3874eb3c]; pop edi; pop esi; ret; 
0x10017d2f  # fiadd dword ptr [eax]; pop ebx; ret 0x10; 
0x100139ea  # fiadd dword ptr [ecx - 0x7d]; sti; or bh, byte ptr [ecx + edx - 0x75]; ret; 
0x10020f8d  # fiadd dword ptr [esi]; add byte ptr [eax], al; ret; 
0x10016c66  # fidiv word ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x1001aa6a  # fisttp dword ptr [ebx + 0x96a0c75]; call 0x153a1; pop ecx; ret; 
0x1001acf5  # fldcw word ptr [ebp + 0xc]; mov eax, esi; pop esi; leave; ret; 
0x1001ea1f  # fmul qword ptr [ecx + 0xbebdc5d]; push 1; pop eax; ret; 
0x1001acbb  # fnclex; push dword ptr [ebp - 4]; call 0x1ae59; pop ecx; leave; ret; 
0x10024801  # fnstenv [edi + 0x5959ffff]; ret; 
0x1001389f  # fnstsw ax; sahf; jb 0x138a8; push 1; pop eax; ret; 
0x1001aca6  # fnstsw word ptr [ebp - 4]; push dword ptr [ebp - 4]; call 0x1ae59; pop ecx; leave; ret; 
0x10016a76  # fstp dword ptr [ebx]; leave; not ecx; and eax, ecx; ret; 
0x10017c39  # fstp qword ptr [eax + 0x10]; pop esi; mov dword ptr [eax + 4], ecx; pop ebx; leave; ret; 
0x10015631  # fstp xword ptr [eax]; pop esi; add dword ptr [edi], ecx; xchg esp, eax; ret; 
0x10018689  # fstp xword ptr [ebx]; ret; 
0x10013f6c  # fsub qword ptr [esi + 3]; adc byte ptr [ebx - 0x37], bl; ret; 
0x1001ea22  # fsub st(3), st(0); or ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001f7d7  # fsubr st(0); ret; 
0x100225b0  # hlt; mov dword ptr fs:[0], ecx; leave; ret; 
0x100212da  # hlt; mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 0x10; 
0x10020199  # hlt; mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 0xc; 
0x10020258  # hlt; mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 4; 
0x100201f8  # hlt; mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x1002280e  # hlt; mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10021f01  # hlt; pop ebx; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x100204eb  # hlt; pop edi; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10023f86  # hlt; pop edi; pop esi; pop ebx; leave; ret; 
0x10021fce  # hlt; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x1001b2bb  # hlt; push eax; call 0x1b1f4; add esp, 0x24; leave; ret; 
0x1001b316  # hlt; push eax; call 0x1b20a; add esp, 0x24; leave; ret; 
0x1001b2e9  # hlt; push eax; call 0x1b220; add esp, 0x24; leave; ret; 
0x10011480  # hlt; sub al, byte ptr [ebx]; adc byte ptr [edx - 0x1f7ca7fc], cl; add al, byte ptr [ebp - 0x74fb8a40]; ret; 
0x10022856  # idiv bh; dec dword ptr [ebx - 0x769b0bb3]; or eax, 0; leave; ret; 
0x1001af26  # idiv byte ptr [ebp - 0x19]; pop edi; pop esi; pop ebx; ret; 
0x1001fdec  # idiv ebp; add dword ptr [eax], edx; call 0xd14a; pop ecx; ret; 
0x1001fd5c  # imul eax, dword ptr [ebx], 0x10; call 0x201a8; ret; 
0x1001fde2  # imul eax, dword ptr [ebx], 0x10; call 0x20487; ret; 
0x1002466a  # imul eax, dword ptr [ebx], 0x10; push dword ptr [ebp - 0x10]; call 0x1ffde; pop ecx; pop ecx; ret; 
0x10018685  # imul eax, dword ptr [ebx], 0x3bdb3310; ret; 
0x1001c687  # imul eax, dword ptr [ebx], 0x59590010; xor eax, eax; pop esi; ret; 
0x1001b936  # imul eax, dword ptr [ebx], 0x5b5e5f10; ret; 
0x1001d22a  # imul eax, dword ptr [ebx], 0x5bc03310; leave; ret; 
0x10019f52  # imul eax, dword ptr [ebx], 0x8752010; push 0x10; call 0x19e03; pop ecx; ret; 
0x10010f68  # imul edi, edi, 0x5e5fffff; pop ebx; leave; ret; 
0x1001ec32  # in al, 0x3b; ret; 
0x10024638  # in al, 0x50; call 0x2c40; pop ecx; ret; 
0x10024602  # in al, 0x50; call 0xc81e; pop ecx; ret; 
0x100228d9  # in al, 0x7a; add dl, byte ptr [eax]; ret; 
0x100226cc  # in al, 0xfe; ret; 
0x1001fda4  # in al, 2; add byte ptr [eax], al; ret; 
0x1001e586  # in al, dx; adc byte ptr [ebx - 0x74acf3bb], cl; pop ebp; adc byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0xc756; 
0x10012a9f  # in al, dx; call 0x12ad4; pop ecx; ret; 
0x10024a02  # in al, dx; call 0xc81e; pop ecx; ret; 
0x1001bf30  # in al, dx; cmp dword ptr [ebp + 0x10], 0; jne 0x1bf3b; xor eax, eax; pop ebp; ret; 
0x1001ba1d  # in al, dx; mov eax, dword ptr [ebp + 8]; test eax, eax; jne 0x1ba27; pop ebp; ret; 
0x1001501f  # in al, dx; pop edi; pop esi; pop ebx; leave; ret; 
0x1001df75  # in al, dx; pop esi; mov word ptr [ecx], dx; pop ebx; leave; ret; 
0x1001ffd2  # in al, dx; pop esi; pop ebx; mov dword ptr fs:[0], ecx; leave; ret; 
0x1001797e  # in al, dx; pop esi; pop edi; ret; 
0x100152cc  # in al, dx; xor dword ptr [ebx], eax; adc bh, bh; salc; pop esi; ret; 
0x1001a556  # in eax, 0x5d; ret; 
0x10021389  # in eax, 0xa; add byte ptr [eax], al; mov eax, esi; pop edi; pop esi; ret; 
0x1001ed58  # in eax, 6; add byte ptr [eax], al; add esp, 0x10; ret; 
0x1001781e  # in eax, dx; pop ebp; pop ebx; jne 0x17829; mov eax, dword ptr [0x100333d4]; ret; 
0x10013352  # in eax, dx; pop esi; ret; 
0x1001d8fc  # in eax, dx; push 1; pop eax; ret; 
0x100248a1  # in eax, dx; retf 0xffff; ret; 
0x1001aeca  # inc byte ptr [ebx]; jl 0x1aec0; push 1; pop eax; pop esi; ret; 
0x10010461  # inc byte ptr [ecx + 0x5e]; lea eax, [ecx + 1]; add dl, 0x30; mov byte ptr [ecx], dl; ret; 
0x10017eb4  # inc dword ptr [0x10036978]; push 0xb; call 0x153a1; pop ecx; ret; 
0x10014501  # inc dword ptr [eax]; add byte ptr [eax], al; call 0x1450c; pop ecx; ret; 
0x100153c3  # inc dword ptr [eax]; add byte ptr [eax], al; call dword ptr [0x1002527c]; ret; 
0x10021819  # inc dword ptr [eax]; add byte ptr [edi + 0x5e], bl; pop ebx; leave; ret 4; 
0x100242ef  # inc dword ptr [eax]; add byte ptr [esi + 0x5b], bl; leave; ret; 
0x10022f68  # inc dword ptr [eax]; add byte ptr [esp + eax + 0xf], bh; mov bh, 0x45; dec cl; ret; 
0x1001546b  # inc dword ptr [eax]; add cl, cl; ret; 
0x10021c7e  # inc dword ptr [eax]; mov eax, dword ptr [ecx + 0x1c]; add dword ptr [eax], -2; mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x10014123  # inc dword ptr [eax]; pop ebp; ret; 
0x10021b7e  # inc dword ptr [ebp + 0x47d59c0]; or eax, 0xffffffff; ret; 
0x10017833  # inc dword ptr [ebx + 0x333d425]; adc byte ptr [eax], al; mov eax, dword ptr [0x100333ec]; pop ecx; ret; 
0x100150cf  # inc dword ptr [ebx + 0x3f830cc4]; push dword ptr [edi + eax - 0x75]; ret; 
0x10019d55  # inc dword ptr [ebx + 0x468b0cc4]; adc byte ptr [ebx], al; ret; 
0x1001b390  # inc dword ptr [ebx + 0x5e5f10c4]; pop ebx; pop ebp; ret; 
0x10013b92  # inc dword ptr [ebx + 0x5e5f14c4]; pop ebx; leave; ret; 
0x10018750  # inc dword ptr [ebx + 0xbeb0cc4]; push 1; pop eax; ret; 
0x10015f3d  # inc dword ptr [ebx - 0x377cffe0]; call ptr [edi + 0x5e]; ret; 
0x10016ce8  # inc dword ptr [ebx - 0x3874eb3c]; pop edi; pop esi; ret; 
0x10015d53  # inc dword ptr [ebx - 0x3874f33c]; pop edi; pop esi; ret; 
0x1001741f  # inc dword ptr [ebx - 0x3974e73c]; pop esi; pop ebp; ret; 
0x10023818  # inc dword ptr [ebx - 0x3974eb3c]; pop esi; pop ebp; ret; 
0x10016fd9  # inc dword ptr [ebx - 0x3974eb3c]; pop esi; ret; 
0x10018179  # inc dword ptr [ebx - 0x3974f33c]; pop esi; ret; 
0x10013afd  # inc dword ptr [ebx - 0x74a0eb3c]; ret; 
0x100105ad  # inc dword ptr [ebx]; ret; 
0x1001d98f  # inc dword ptr [edx]; jne 0x1d998; push 1; pop eax; leave; ret; 
0x100104db  # inc dword ptr [edx]; ret; 
0x1001ccf7  # inc eax; add al, 0x3b; ret; 
0x100150ed  # inc eax; cld; ret; 
0x1001d8f5  # inc eax; cmp eax, 0x10035c80; jb 0x1d8ea; push 1; pop eax; ret; 
0x1001b884  # inc eax; cmp eax, esi; jb 0x1b847; pop esi; leave; ret; 
0x1001388a  # inc eax; inc ecx; test dl, dl; mov byte ptr [eax], dl; jne 0x13888; ret; 
0x10021d2c  # inc eax; mov eax, dword ptr [0x10038284]; and dword ptr [esi + 0x38], 0; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x1001cd1a  # inc eax; or byte ptr [ebx], bh; ret; 
0x10012fc3  # inc eax; push eax; mov al, 0x55; add edx, dword ptr [eax]; mov dword ptr [eax + 0x14], 1; ret; 
0x1002375e  # inc eax; ret 4; 
0x10011b04  # inc eax; ret; 
0x100183c9  # inc ebp; adc al, 0xf6; ret; 
0x1001f997  # inc ebp; adc al, ch; ret 0xfed8; 
0x1001506d  # inc ebp; adc byte ptr [ebp + 5], dh; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x10012564  # inc ebp; adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x10022fd7  # inc ebp; adc byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret; 
0x10020815  # inc ebp; call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x1001728e  # inc ebp; clc; pop edi; pop esi; leave; ret; 
0x100203b7  # inc ebp; cld; pop edi; leave; ret 8; 
0x1001b294  # inc ebp; cld; pop edi; pop esi; leave; ret; 
0x100154b5  # inc ebp; dec cl; ret; 
0x100188ae  # inc ebp; fadd qword ptr [ebx - 0x140003b3]; adc ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001ec50  # inc ebp; fadd qword ptr [ebx - 0x140003b3]; push ss; push 1; pop eax; ret; 
0x1001ec31  # inc ebp; in al, 0x3b; ret; 
0x10024637  # inc ebp; in al, 0x50; call 0x2c40; pop ecx; ret; 
0x10024601  # inc ebp; in al, 0x50; call 0xc81e; pop ecx; ret; 
0x100113b6  # inc ebp; or ah, byte ptr [ebx]; inc ebp; or al, 0xc9; ret; 
0x1001be21  # inc ebp; or al, 0x2b; rcr dword ptr [ebx + 0x5e], 0xc9; ret; 
0x10016a36  # inc ebp; or al, 0x5e; sub eax, ecx; pop ebx; leave; ret; 
0x1001ba14  # inc ebp; or al, 0x5f; pop esi; pop ebx; pop ebp; ret; 
0x10013a59  # inc ebp; or al, 0x83; les ebp, ptr [esi + ebx*2]; leave; ret; 
0x10013942  # inc ebp; or al, 0x83; les esi, ptr [eax]; pop esi; leave; ret; 
0x10017524  # inc ebp; or al, 0x83; ret; 
0x100113b9  # inc ebp; or al, 0xc9; ret; 
0x1001d3c7  # inc ebp; or al, 3; ret; 
0x1002061f  # inc ebp; or bl, ch; add eax, dword ptr [ebx + 0x5e5fffc8]; pop ebx; leave; ret 4; 
0x1001ba1f  # inc ebp; or byte ptr [ebp + 0x5d0275c0], al; ret; 
0x1002087f  # inc ebp; or byte ptr [ebx + 0x5fa5f3f8], cl; pop esi; leave; ret 0x10; 
0x10021b38  # inc ebp; or byte ptr [ebx + 0x5fa5f3f8], cl; pop esi; leave; ret 0x20; 
0x10022f38  # inc ebp; or byte ptr [ebx + 0x675fff8], al; or ax, 0xffff; leave; ret; 
0x10022e3a  # inc ebp; or byte ptr [ebx], bh; ret; 
0x10011f3f  # inc ebp; or byte ptr [ecx + 0x5f], bl; pop esi; leave; ret; 
0x10020e02  # inc ebp; or byte ptr [ecx - 0x48], bl; or ecx, dword ptr [esi]; add dl, byte ptr [eax]; ret; 
0x1001a7f9  # inc ebp; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x100154af  # inc ebp; or byte ptr [esp + eax + 0x66], dh; mov eax, dword ptr [ebp - 2]; leave; ret; 
0x10015486  # inc ebp; or cl, cl; ret; 
0x1001df19  # inc ebp; rcl byte ptr [eax - 0x18], 0xa4; adc al, 0; add byte ptr [ebx + 0x5d8bc055], cl; ret 0x758b; 
0x100186d2  # inc ebp; sbb al, 0x3b; ret; 
0x10022e4b  # inc ebp; sbb byte ptr [ebx], bh; ret; 
0x10022e18  # inc ebp; sbb byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret; 
0x1001e644  # inc ebx; or bl, byte ptr [ebx - 0x37]; ret; 
0x10023dc8  # inc ecx; add al, 0x85; sal byte ptr [ebp + 5], 0xb8; js 0x23e4c; add dl, byte ptr [eax]; ret; 
0x10010465  # inc ecx; add dword ptr [eax + 0x118830c2], eax; ret; 
0x10010535  # inc ecx; add eax, 0x241c63a; cmp al, byte ptr [edx]; ret; 
0x10021ca6  # inc ecx; and byte ptr [ebp + 0x801120c], cl; ret 4; 
0x100150fa  # inc ecx; clc; mov edx, dword ptr [ecx - 4]; ret; 
0x1001472d  # inc ecx; cmp edx, 0x10032e68; jl 0x14707; pop esi; ret; 
0x1001cd5b  # inc ecx; mov al, byte ptr [ecx]; test al, al; jne 0x1cd4f; pop esi; ret; 
0x1001cf7f  # inc ecx; mov al, byte ptr [ecx]; test al, al; jne 0x1cf73; pop esi; ret; 
0x10017b62  # inc ecx; mov dword ptr [esi], ecx; pop esi; ret; 
0x10021d70  # inc ecx; or al, 0x89; adc byte ptr [ebx + 0x10891c41], cl; mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x1002379e  # inc ecx; or bl, al; mov eax, ecx; mov dword ptr [eax], 0x10027b68; ret 4; 
0x10010462  # inc ecx; pop esi; lea eax, [ecx + 1]; add dl, 0x30; mov byte ptr [ecx], dl; ret; 
0x10021c81  # inc ecx; sbb al, 0x83; add dh, bh; mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x10021d75  # inc ecx; sbb al, 0x89; adc byte ptr [ebx + 0x10892c41], cl; ret; 
0x10021c71  # inc ecx; sbb al, 0x8d; or al, 0x12; add dword ptr [eax], ecx; ret 4; 
0x1001a565  # inc ecx; sbb byte ptr [eax - 0x18], dl; adc eax, 0x83ffff26; les ecx, ptr [eax]; pop ebp; ret 4; 
0x10021c7c  # inc ecx; sub al, 0xff; add byte ptr [ebx + 0x831c41], cl; dec byte ptr [ebx + 0x8b1c41]; ret; 
0x10021c8d  # inc ecx; sub al, 0xff; or byte ptr [ebx + 0x18b1c49], cl; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x1001388b  # inc ecx; test dl, dl; mov byte ptr [eax], dl; jne 0x13888; ret; 
0x10021cb1  # inc ecx; xor bh, bh; or byte ptr [ebx + 0x18b2049], cl; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x1001033a  # inc edi; add al, byte ptr [eax]; pop edi; ret; 
0x1001c13d  # inc edi; add byte ptr [edx], cl; add byte ptr [eax], al; add byte ptr [ebx + 0x5d5bffc8], al; ret; 
0x100241c1  # inc edi; add byte ptr [esi], dl; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x100238a1  # inc edi; add byte ptr [esi], dl; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; ret; 
0x1001a82e  # inc edi; add cl, byte ptr [ebx + 0x5f5e0845]; leave; ret; 
0x1001a814  # inc edi; add dword ptr [ebx + 0x5f5e0845], ecx; leave; ret; 
0x1001a99c  # inc edi; add ecx, dword ptr [ebx + 0x5f5e0845]; leave; ret; 
0x1001613e  # inc edi; sar bh, 0xff; add esp, 0xc; ret; 
0x10020322  # inc edx; add al, 0; xor eax, eax; ret; 
0x1001939e  # inc edx; add al, 0x5f; pop esi; pop ebx; leave; ret; 
0x10015253  # inc edx; add byte ptr [eax], al; add bh, al; add byte ptr [0x5e000000], cl; ret; 
0x10015abf  # inc edx; inc edx; test si, si; jne 0x15ab7; pop esi; ret; 
0x1002012c  # inc edx; sbb eax, 0xc68b0000; pop edi; pop esi; ret; 
0x1001fd37  # inc edx; std; add dword ptr [eax], edx; call 0xd14a; pop ecx; ret; 
0x10015ac0  # inc edx; test si, si; jne 0x15ab7; pop esi; ret; 
0x1001944c  # inc esi; adc byte ptr [ebx - 0x397400f8], al; pop edi; pop esi; ret; 
0x10019d5a  # inc esi; adc byte ptr [ebx], al; ret; 
0x10017e8d  # inc esi; adc byte ptr [ebx], cl; add byte ptr [eax], al; add bl, ch; ret; 
0x1001bfeb  # inc esi; add al, 0x5e; ret; 
0x1001a82b  # inc esi; add cl, byte ptr [eax + 0x458b0247]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001a811  # inc esi; add dword ptr [eax + 0x458b0147], ecx; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001a999  # inc esi; add ecx, dword ptr [eax + 0x458b0347]; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x10021d37  # inc esi; cmp al, 0x5e; ret 8; 
0x100243d0  # inc esi; or al, 0x83; add al, 0; mov eax, 0xffff; pop esi; ret; 
0x10017b72  # inc esi; or al, 0x83; add al, 0; or eax, 0xffffffff; pop esi; ret; 
0x100125f2  # inc esi; ret; 
0x10022226  # inc esi; sbb al, 0x5e; test eax, eax; jne 0x22232; call 0x23164; ret 8; 
0x10015d8e  # inc esi; sbb al, 0x85; sal byte ptr [ebx + ecx + 0x50], 0xe8; push es; ret; 
0x1001383e  # inc esi; test cl, cl; jne 0x13836; pop esi; ret; 
0x10019dee  # inc esp; add dword ptr [ebx], 0x5415ff10; push edx; add dl, byte ptr [eax]; pop esi; ret; 
0x1001441a  # inc esp; add dword ptr [ebx], 0xb415ff10; push edx; add dl, byte ptr [eax]; xor eax, eax; ret; 
0x1001142d  # inc esp; and al, 0x10; pop edi; pop esi; pop ebx; ret; 
0x10015101  # inc esp; and al, 4; add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov ax, word ptr [eax - 4]; ret; 
0x100150e4  # inc esp; and al, 4; add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov eax, dword ptr [eax - 4]; ret; 
0x100113be  # inc esp; and al, 4; add eax, -0x20; ret; 
0x10011501  # inc esp; and al, 4; add eax, 0x20; ret; 
0x10011ade  # inc esp; and al, 4; cmp eax, dword ptr [0x10038260]; jb 0x11aec; xor eax, eax; ret; 
0x10016c81  # inc esp; and al, 4; mul ecx; ret 0x10; 
0x100189ee  # inc esp; and al, 4; ret; 
0x10018c25  # inc esp; and al, 4; sar eax, 1; ret; 
0x1001f5cb  # inc esp; and al, 8; add dh, byte ptr [eax + ebx - 0x18]; ret; 
0x10014790  # inc esp; and al, 8; add eax, 0x20; push eax; call dword ptr [0x10025074]; ret; 
0x100147e2  # inc esp; and al, 8; add eax, 0x20; push eax; call dword ptr [0x10025078]; ret; 
0x10010336  # inc esp; and al, 8; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x10016c99  # inc esp; and al, 8; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x1001032d  # inc esp; and al, 8; pop edi; ret; 
0x10020f39  # inc esp; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10019f14  # inc esp; or byte ptr [eax], cl; ret; 
0x10016125  # inc esp; or dword ptr [eax + edx*2], 0x507815ff; add dl, byte ptr [eax]; ret; 
0x1001fe11  # insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x2008c; ret; 
0x1002106d  # insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x212e9; ret; 
0x10021275  # insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x21348; leave; ret; 
0x10020fe5  # insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x21405; ret; 
0x100237ca  # insb byte ptr es:[edi], dx; and al, 0xc; lea ebp, [esp + 0xc]; push eax; ret; 
0x100237ce  # insb byte ptr es:[edi], dx; and al, 0xc; push eax; ret; 
0x10014658  # insb byte ptr es:[edi], dx; push ecx; add dl, byte ptr [eax]; pop esi; leave; ret; 
0x10012fb2  # insb byte ptr es:[edi], dx; push edx; add dl, byte ptr [eax]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10014a9b  # insd dword ptr es:[edi], dx; add eax, 0xbe0f0000; ret; 
0x10021029  # insd dword ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x212e9; ret; 
0x10020f5c  # insd dword ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x2166b; ret; 
0x1002028c  # int 0x1b; add byte ptr [eax], al; mov eax, esi; pop esi; leave; ret; 
0x10019d2c  # int1; add byte ptr [eax], al; add byte ptr [ebx], dh; rol byte ptr [ebx - 0x62f0ef03], cl; ret 0x234a; 
0x10012c79  # int1; add dword ptr [eax], eax; add byte ptr [ecx + 0x59], bl; ret; 
0x10022454  # int1; and dword ptr [esi + 0x1c], 0; pop edi; pop esi; ret; 
0x10015ac5  # int1; pop esi; ret; 
0x1002033f  # into; call 0x20b96; movzx eax, byte ptr [eax]; pop esi; ret; 
0x100214fe  # into; call 0x21c8c; mov ax, word ptr [eax]; pop esi; ret; 
0x10021cd9  # into; call 0x21ce7; mov eax, esi; pop esi; ret; 
0x10021c5d  # into; call 0x22394; pop esi; ret 8; 
0x10023da5  # into; call 0x23d48; mov eax, esi; pop esi; ret 4; 
0x10021901  # into; call dword ptr [edi + 8]; pop edi; pop esi; ret; 
0x1001dab9  # into; ret; 
0x1001e579  # iretd; pop edi; mov dword ptr [eax + 8], edx; mov dword ptr [eax], ecx; pop esi; ret; 
0x10015250  # ja 0x1526f; call 0x15299; mov dword ptr [eax], 0xd; pop esi; ret; 
0x1001527d  # ja 0x1528c; call 0x15299; mov dword ptr [eax], 8; pop esi; ret; 
0x100153e7  # ja 0x15440; add eax, 0xffe0; pop ebx; ret; 
0x10015467  # ja 0x154b7; add eax, 0xffe0; leave; ret; 
0x10016bdf  # ja 0x16c2d; add eax, 0x20; leave; ret; 
0x10019c5b  # ja 0x19c66; push 1; mov dword ptr [0x100355ac], eax; pop eax; ret; 
0x1001ba39  # ja 0x1ba74; push 1; mov byte ptr [eax], cl; pop eax; pop ebp; ret; 
0x1001fe15  # jae 0x1fe19; add byte ptr [eax], al; ret; 
0x100206ef  # jae 0x206f6; movzx eax, byte ptr [eax]; pop esi; ret; 
0x100218f0  # jae 0x218f7; mov ax, word ptr [eax]; pop esi; ret; 
0x10024351  # jae 0x242d6; clc; push dword ptr [esi + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x10010eb5  # jb 0x10ea9; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x100113a8  # jb 0x113aa; add byte ptr [ebx - 0x3f7ae33c], al; jne 0x113b4; leave; ret; 
0x10011ae7  # jb 0x11aec; xor eax, eax; ret; 
0x100138a2  # jb 0x138a8; push 1; pop eax; ret; 
0x100153e1  # jb 0x15440; cmp ax, 0x7a; ja 0x15440; add eax, 0xffe0; pop ebx; ret; 
0x10015461  # jb 0x154b7; cmp ax, 0x7a; ja 0x154b7; add eax, 0xffe0; leave; ret; 
0x10016bd9  # jb 0x16c2d; cmp ax, 0x5a; ja 0x16c2d; add eax, 0x20; leave; ret; 
0x1001a5c7  # jb 0x1a554; ret; 
0x1001b887  # jb 0x1b847; pop esi; leave; ret; 
0x1001d8fb  # jb 0x1d8ea; push 1; pop eax; ret; 
0x100137b7  # jbe 0x137be; push 1; pop eax; leave; ret; 
0x1001cfe1  # jbe 0x1d007; call 0x120a0; add esp, 0x1c; pop esi; ret; 
0x10010479  # je 0x10483; push eax; call 0x1037b; pop ecx; ret; 
0x100108e8  # je 0x1090e; adc al, 0xe8; add al, 0; add byte ptr [eax], al; add esp, 0x14; ret; 
0x10012194  # je 0x121ba; adc al, ch; mov bh, 0x4f; add byte ptr [eax], al; add esp, 0x10; ret; 
0x1001231d  # je 0x12324; or eax, 0xffffffff; pop esi; ret; 
0x1001243e  # je 0x12442; mov eax, edi; pop edi; pop esi; pop ebx; ret; 
0x10012ae0  # je 0x12ae5; xor eax, eax; ret; 
0x10012fad  # je 0x12fbd; push eax; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10013249  # je 0x1326f; or al, 0xe8; xor eax, dword ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x1001325a  # je 0x13280; or al, 0xe8; and al, byte ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x1001330e  # je 0x13317; call 0x13332; pop edi; ret; 
0x10013318  # je 0x1333e; or byte ptr [ecx + 0x367083d], cl; adc bh, bh; adc eax, 0x1002527c; pop edi; ret; 
0x100137df  # je 0x137e6; push 0; call eax; ret; 
0x10014776  # je 0x147c8; add dl, byte ptr [eax]; ret; 
0x10014799  # je 0x147eb; add dl, byte ptr [eax]; ret; 
0x1001539a  # je 0x153ec; add dl, byte ptr [eax]; pop esi; pop ebp; ret; 
0x100154b1  # je 0x154b7; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10015fec  # je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x10016106  # je 0x16158; add dl, byte ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x1001613a  # je 0x16160; or al, 0xe8; inc edi; sar bh, 0xff; add esp, 0xc; ret; 
0x10016152  # je 0x16178; adc al, ch; cmp dl, byte ptr [ecx]; add byte ptr [eax], al; add esp, 0x10; ret; 
0x10016c27  # je 0x16c2d; mov ax, word ptr [ebp - 2]; leave; ret; 
0x1001a5b0  # je 0x1a5b6; push 1; pop eax; ret; 
0x1001a660  # je 0x1a664; xor esi, esi; mov eax, esi; pop esi; ret; 
0x1001a67c  # je 0x1a680; xor esi, esi; mov eax, esi; pop esi; ret; 
0x1001a694  # je 0x1a698; xor esi, esi; mov eax, esi; pop esi; ret; 
0x1001ac5c  # je 0x1ac82; or byte ptr [ecx], bh; xor dl, byte ptr [edi - 0x75]; ret 0x1174; 
0x1001ac83  # je 0x1ac87; xor eax, eax; pop edi; pop esi; ret; 
0x1001ad08  # je 0x1ad2e; or al, ch; mov eax, 0x59ffffff; pop ecx; ret; 
0x1001ad2f  # je 0x1ad3c; and dword ptr [eax + 0x20], 0; mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x1001adc8  # je 0x1adcf; or eax, 0x40000; ret; 
0x1001ae53  # je 0x1ae58; or ah, 0x10; ret; 
0x1001ae7f  # je 0x1ae83; or al, 1; test cl, 2; je 0x1ae8d; or eax, 0x80000; ret; 
0x1001ae86  # je 0x1ae8d; or eax, 0x80000; ret; 
0x1001b6c1  # je 0x1b6c6; xor eax, eax; ret; 
0x1001b6be  # je 0x1b6cc; dec eax; je 0x1b6c6; xor eax, eax; ret; 
0x1001ba72  # je 0x1ba82; call 0x15299; mov dword ptr [eax], 0x2a; or eax, 0xffffffff; pop ebp; ret; 
0x1001badb  # je 0x1bb01; or al, ch; mov eax, dword ptr [0x59ffffff]; pop ecx; ret; 
0x1001cad8  # je 0x1cac2; ret 0xff55; 
0x1001d483  # je 0x1d489; test al, 7; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x1001e48f  # je 0x1e493; xor eax, eax; pop edi; pop esi; ret; 
0x1001ed54  # je 0x1ed7a; adc al, ch; in eax, 6; add byte ptr [eax], al; add esp, 0x10; ret; 
0x100202c8  # je 0x202d2; mov edx, dword ptr [eax]; push 1; mov ecx, eax; call dword ptr [edx]; ret; 
0x10021071  # je 0x21075; add byte ptr [eax], al; ret; 
0x10021c5a  # je 0x21c63; mov ecx, esi; call 0x22394; pop esi; ret 8; 
0x100237f0  # je 0x237f4; xor eax, eax; ret; 
0x10023dbb  # je 0x23dc6; push dword ptr [ecx + 4]; call 0xc81e; pop ecx; ret; 
0x100150a7  # jecxz 0x15108; pop esi; ret; 
0x10016fd7  # jecxz 0x16fd8; inc dword ptr [ebx - 0x3974eb3c]; pop esi; ret; 
0x100113dc  # jg 0x11432; sub eax, 0x20; pop ebx; ret; 
0x1001151f  # jg 0x11575; add eax, 0x20; pop ebx; ret; 
0x100150a6  # jg 0x1508b; pop edi; pop esi; ret; 
0x100150dd  # jg 0x150c1; pop edi; pop esi; pop ebx; ret; 
0x10019eba  # jg 0x19e10; pop edi; pop esi; pop ebx; leave; ret; 
0x1001b43e  # jg 0x1b440; add bl, ch; and dword ptr [ebx], esi; fstp xword ptr [ebx]; ret; 
0x1001bf65  # jg 0x1bfc4; ret; 
0x1001fd04  # jg 0x1fd0d; add byte ptr [eax], al; ret; 
0x100124fc  # jge 0x12512; add byte ptr [ebp + ecx - 0x75], dh; ret; 
0x10014782  # jge 0x1478f; add eax, 0x1c; push eax; call 0x15340; pop ecx; ret; 
0x100147d4  # jge 0x147e1; add eax, 0x1c; push eax; call 0x153a1; pop ecx; ret; 
0x1001aca7  # jge 0x1aca5; push dword ptr [ebp - 4]; call 0x1ae59; pop ecx; leave; ret; 
0x1001af27  # jge 0x1af10; pop edi; pop esi; pop ebx; ret; 
0x1001bf32  # jge 0x1bf44; add byte ptr [ebp + 4], dh; xor eax, eax; pop ebp; ret; 
0x10021b82  # jge 0x21b88; or eax, 0xffffffff; ret; 
0x100113d7  # jl 0x11432; cmp eax, 0x7a; jg 0x11432; sub eax, 0x20; pop ebx; ret; 
0x1001151a  # jl 0x11575; cmp eax, 0x5a; jg 0x11575; add eax, 0x20; pop ebx; ret; 
0x10013323  # jl 0x13377; add dl, byte ptr [eax]; pop edi; ret; 
0x1001377d  # jl 0x137f4; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x10013e1b  # jl 0x13dd5; pop edi; pop esi; pop ebx; ret; 
0x10014734  # jl 0x14707; pop esi; ret; 
0x100153c9  # jl 0x1541d; add dl, byte ptr [eax]; ret; 
0x1001aecc  # jl 0x1aec0; push 1; pop eax; pop esi; ret; 
0x1001aff2  # jl 0x1afe6; push 1; pop eax; ret; 
0x10022f6b  # jl 0x22f71; movzx eax, word ptr [ebp - 2]; leave; ret; 
0x1001b3ed  # jle 0x1b3fb; mov eax, esi; pop edi; pop esi; leave; ret; 
0x1001d403  # jle 0x1d3c2; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x1001f3be  # jle 0x1f3c8; pop edi; pop esi; pop ebx; leave; ret; 
0x10022410  # jle 0x2242e; call 0x21e72; pop edi; pop esi; ret; 
0x10010f66  # jne 0x10ed5; pop edi; pop esi; pop ebx; leave; ret; 
0x100113b0  # jne 0x113b4; leave; ret; 
0x100121d9  # jne 0x121b9; xor eax, eax; ret; 
0x100122a2  # jne 0x122ac; push 9; call 0x153a1; pop ecx; ret; 
0x100122e7  # jne 0x122f2; push esi; call 0x123a2; pop ecx; pop esi; ret; 
0x10012a9e  # jne 0x12a8c; call 0x12ad4; pop ecx; ret; 
0x10012c9b  # jne 0x12ca7; cmp dword ptr [eax + 0x1c], 0; jne 0x12ca7; push 1; pop eax; ret; 
0x10012ca1  # jne 0x12ca7; push 1; pop eax; ret; 
0x100136ec  # jne 0x136ce; push 9; call 0x153a1; pop ecx; ret; 
0x10013767  # jne 0x13749; push 9; call 0x153a1; pop ecx; ret; 
0x1001377e  # jne 0x13780; add byte ptr [ecx + 0x59], bl; ret; 
0x10013841  # jne 0x13836; pop esi; ret; 
0x10013890  # jne 0x13888; ret; 
0x10013bb7  # jne 0x13bc1; call 0x13a0c; add esp, 0xc; pop ebp; ret; 
0x10013bb4  # jne 0x13bc2; push dword ptr [ebp + 8]; call 0x13a0c; add esp, 0xc; pop ebp; ret; 
0x10013be0  # jne 0x13bea; call 0x138e9; add esp, 0x10; pop ebp; ret; 
0x10013bdd  # jne 0x13beb; push dword ptr [ebp + 8]; call 0x138e9; add esp, 0x10; pop ebp; ret; 
0x10014416  # jne 0x14427; push dword ptr [0x10038144]; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x10014684  # jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001506f  # jne 0x15076; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x1001544d  # jne 0x15454; or ax, ax; leave; ret; 
0x10015482  # jne 0x1548a; mov ax, word ptr [ebp + 8]; leave; ret; 
0x100157ea  # jne 0x157f0; xor eax, eax; pop edi; ret; 
0x10015a40  # jne 0x15a46; xor eax, eax; pop edi; ret; 
0x10015ac4  # jne 0x15ab7; pop esi; ret; 
0x10016bc5  # jne 0x16bcc; or ax, ax; leave; ret; 
0x10016bf8  # jne 0x16c00; mov ax, word ptr [ebp + 8]; leave; ret; 
0x10016c65  # jne 0x16c45; xor eax, eax; pop edi; pop esi; pop ebx; ret; 
0x10016c7e  # jne 0x16c89; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x100173f6  # jne 0x173fc; or eax, eax; pop ebp; ret; 
0x10017821  # jne 0x17829; mov eax, dword ptr [0x100333d4]; ret; 
0x1001797d  # jne 0x1796b; pop esi; pop edi; ret; 
0x100189e5  # jne 0x189da; cmp byte ptr [eax], 0; pop esi; jne 0x189f2; sub eax, dword ptr [esp + 4]; ret; 
0x100189eb  # jne 0x189f2; sub eax, dword ptr [esp + 4]; ret; 
0x10018c22  # jne 0x18c2b; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x10018c36  # jne 0x18c3e; mov eax, dword ptr [0x10037124]; ret; 
0x10018d1a  # jne 0x18d1d; ret; 
0x10019f56  # jne 0x19f60; push 0x10; call 0x19e03; pop ecx; ret; 
0x1001aa6c  # jne 0x1aa7a; push 9; call 0x153a1; pop ecx; ret; 
0x1001aaf5  # jne 0x1ab03; push 9; call 0x153a1; pop ecx; ret; 
0x1001ac44  # jne 0x1ac52; call dword ptr [0x100250e0]; pop esi; pop ebx; leave; ret; 
0x1001acaa  # jne 0x1aca8; call 0x1ae59; pop ecx; leave; ret; 
0x1001acbe  # jne 0x1acbc; call 0x1ae59; pop ecx; leave; ret; 
0x1001afd0  # jne 0x1afc7; pop esi; ret; 
0x1001b699  # jne 0x1b6aa; mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x1001b8a3  # jne 0x1b8b7; push -3; call 0x1b4b4; pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x1001ba23  # jne 0x1ba27; pop ebp; ret; 
0x1001bac2  # jne 0x1bac8; xor eax, eax; leave; ret; 
0x1001bd25  # jne 0x1bd2e; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x1001bf35  # jne 0x1bf3b; xor eax, eax; pop ebp; ret; 
0x1001bf5f  # jne 0x1bf68; mov eax, 0x7fffffff; pop ebp; ret; 
0x1001c61c  # jne 0x1c623; push 1; pop eax; pop esi; ret; 
0x1001cd60  # jne 0x1cd4f; pop esi; ret; 
0x1001cd94  # jne 0x1cd9b; push 1; pop eax; pop esi; ret; 
0x1001cf84  # jne 0x1cf73; pop esi; ret; 
0x1001d487  # jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x1001d6e1  # jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7d5  # jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x1001d95b  # jne 0x1d961; xor eax, eax; leave; ret; 
0x1001d991  # jne 0x1d998; push 1; pop eax; leave; ret; 
0x1001dfdf  # jne 0x1dfe4; or esi, 2; mov eax, esi; pop esi; leave; ret; 
0x1001ed39  # jne 0x1ed2e; cmp byte ptr [eax], 0; pop esi; jne 0x1ed46; sub eax, dword ptr [esp + 4]; ret; 
0x1001ed3f  # jne 0x1ed46; sub eax, dword ptr [esp + 4]; ret; 
0x1001eec8  # jne 0x1eece; or eax, eax; pop ebp; ret; 
0x10020338  # jne 0x2033e; or eax, eax; pop esi; ret; 
0x10020eb0  # jne 0x20ea5; xor al, al; pop edi; pop esi; ret; 
0x100214f4  # jne 0x214fd; mov eax, 0xffff; pop esi; ret; 
0x10021e4f  # jne 0x21e5c; push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x10021e64  # jne 0x21e71; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10021f77  # jne 0x21f7e; mov eax, 0x10027aa0; ret; 
0x1002222b  # jne 0x22232; call 0x23164; ret 8; 
0x10022453  # jne 0x22446; and dword ptr [esi + 0x1c], 0; pop edi; pop esi; ret; 
0x10022b29  # jne 0x22b30; mov eax, 0x10027aa0; ret; 
0x10022f3d  # jne 0x22f45; or ax, 0xffff; leave; ret; 
0x10023dcc  # jne 0x23dd3; mov eax, 0x10027b78; ret; 
0x1002466e  # jne 0x24660; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002467e  # jne 0x24670; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002468e  # jne 0x24680; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002469e  # jne 0x24690; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100246ae  # jne 0x246a0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100246be  # jne 0x246b0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100246ce  # jne 0x246c0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247ce  # jne 0x247c0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247de  # jne 0x247d0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247ee  # jne 0x247e0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100247fe  # jne 0x247f0; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002480e  # jne 0x24800; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002481e  # jne 0x24810; call 0x1ffde; pop ecx; pop ecx; ret; 
0x1002482e  # jne 0x24820; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100249c1  # jne 0x249b3; call 0xc81e; pop ecx; ret; 
0x10024a01  # jne 0x249ef; call 0xc81e; pop ecx; ret; 
0x10018d17  # jno 0x18d1c; adc byte ptr [ebp + 1], dh; ret; 
0x10019094  # jno 0x19099; adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x10019913  # jno 0x19918; adc byte ptr [eax], al; ret; 
0x1001fd66  # jno 0x1fd65; add dword ptr [eax], edx; call 0xd14a; pop ecx; ret; 
0x10020f66  # jno 0x20f77; add dl, byte ptr [eax]; call 0xd14a; pop ecx; ret; 
0x100229b5  # jno 0x229bf; push 0; call 0x229c1; ret 4; 
0x10023dbe  # jno 0x23dc4; call 0xc81e; pop ecx; ret; 
0x10023db8  # jnp 0x23dbc; adc byte ptr [ecx + ecx - 1], dh; jno 0x23dc4; call 0xc81e; pop ecx; ret; 
0x100124fa  # jns 0x1247f; jge 0x12512; add byte ptr [ebp + ecx - 0x75], dh; ret; 
0x1001b081  # jns 0x1b063; pop edi; pop esi; pop ebx; leave; ret; 
0x1001e2cb  # jo 0x1e2cc; call ptr [ecx - 0x75]; ret; 
0x1001e48d  # jo 0x1e493; je 0x1e493; xor eax, eax; pop edi; pop esi; ret; 
0x100238b5  # jo 0x238bb; push dword ptr [eax]; push dword ptr [esp + 0x10]; call 0x2410f; add esp, 0x10; ret; 
0x10023cea  # jo 0x23d67; add dl, byte ptr [eax]; ret; 
0x100113db  # jp 0x1145c; push esp; sub eax, 0x20; pop ebx; ret; 
0x100153e5  # jp 0x153e7; ja 0x15440; add eax, 0xffe0; pop ebx; ret; 
0x10015465  # jp 0x15467; ja 0x154b7; add eax, 0xffe0; leave; ret; 
0x10022991  # jp 0x22995; adc byte ptr [edi + 0x5e], bl; mov dword ptr fs:[0], ecx; leave; ret; 
0x10012c9e  # js 0x12cbc; add byte ptr [ebp + 4], dh; push 1; pop eax; ret; 
0x10013212  # js 0x13266; add dl, byte ptr [eax]; ret; 
0x100147c8  # js 0x1481a; add dl, byte ptr [eax]; ret; 
0x100147eb  # js 0x1483d; add dl, byte ptr [eax]; ret; 
0x100153b0  # js 0x15402; add dl, byte ptr [eax]; pop ebp; ret; 
0x1001612b  # js 0x1617d; add dl, byte ptr [eax]; ret; 
0x10017eb6  # js 0x17f21; add edx, dword ptr [eax]; push 0xb; call 0x153a1; pop ecx; ret; 
0x10021e6d  # js 0x21ebf; add dl, byte ptr [eax]; ret; 
0x10023dcf  # js 0x23e4c; add dl, byte ptr [eax]; ret; 
0x10020f10  # lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10022d58  # lcall 0x5ec6, 0x8b59fffe; ret 4; 
0x10016bb5  # lds ebx, ptr [ebx + 0x5f]; pop ebp; ret; 
0x10015842  # lds ebx, ptr [esi + 0x5d]; pop ebx; pop edi; ret; 
0x1001d1d7  # lds ecx, ptr [esi - 1]; call ptr [ecx - 0x75]; ret; 
0x1001611a  # lea eax, [eax + eax*8]; mov ecx, dword ptr [ecx*4 + 0x10038160]; lea eax, [ecx + eax*4 + 0xc]; push eax; call dword ptr [0x10025078]; ret; 
0x10011af4  # lea eax, [eax + eax*8]; mov ecx, dword ptr [ecx*4 + 0x10038160]; mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x10019f13  # lea eax, [eax + ecx + 8]; ret; 
0x10015592  # lea eax, [ebx - 2]; pop edi; pop esi; pop ebx; leave; ret; 
0x10010464  # lea eax, [ecx + 1]; add dl, 0x30; mov byte ptr [ecx], dl; ret; 
0x1002379d  # lea eax, [ecx + 8]; ret; 
0x10016124  # lea eax, [ecx + eax*4 + 0xc]; push eax; call dword ptr [0x10025078]; ret; 
0x10016fb1  # lea eax, [ecx + eax*4 + 4]; mov eax, edi; pop edi; pop esi; ret; 
0x10015fe9  # lea eax, [ecx + eax*4]; je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x1001939d  # lea eax, [edx + 4]; pop edi; pop esi; pop ebx; leave; ret; 
0x100237cd  # lea ebp, [esp + 0xc]; push eax; ret; 
0x100218eb  # lea ecx, [eax + ecx*2]; cmp eax, ecx; jae 0x218f7; mov ax, word ptr [eax]; pop esi; ret; 
0x10022851  # lea ecx, [ebp - 0x10]; call 0x21e5d; mov ecx, dword ptr [ebp - 0xc]; mov dword ptr fs:[0], ecx; leave; ret; 
0x10024650  # lea ecx, [ebp - 0x170]; call 0x1440; ret; 
0x10022564  # lea ecx, [ebp - 4]; call 0x21e5d; mov eax, 0x10036ea0; leave; ret; 
0x100202b0  # lea ecx, [ebp - 4]; call 0x21e5d; pop esi; leave; ret; 
0x10021c73  # lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x10021c96  # lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x1001611f  # lea esp, [eax - 0x7f]; add edx, dword ptr [eax]; lea eax, [ecx + eax*4 + 0xc]; push eax; call dword ptr [0x10025078]; ret; 
0x10011af9  # lea esp, [eax - 0x7f]; add edx, dword ptr [eax]; mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x10013840  # leave; jne 0x13836; pop esi; ret; 
0x10024811  # leave; mov bh, 0xff; call ptr [ecx + 0x59]; ret; 
0x10016a78  # leave; not ecx; and eax, ecx; ret; 
0x1001714a  # leave; rep stosw word ptr es:[edi], ax; mov eax, esi; pop edi; pop esi; ret; 
0x10020454  # leave; ret 0x10; 
0x10020478  # leave; ret 0x20; 
0x10012f48  # leave; ret 0xc; 
0x1001d691  # leave; ret 4; 
0x10020203  # leave; ret 8; 
0x10010508  # leave; ret; 
0x100248c5  # leave; retf 0xffff; ret; 
0x10023792  # leave; test eax, eax; setg cl; mov eax, ecx; ret 4; 
0x100157e7  # leave; test edi, edi; jne 0x157f0; xor eax, eax; pop edi; ret; 
0x10015a3d  # leave; test edi, edi; jne 0x15a46; xor eax, eax; pop edi; ret; 
0x1001d481  # les eax, ptr [edx]; je 0x1d489; test al, 7; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x1001d1b4  # les ebp, ptr [ecx + 3]; adc byte ptr [ebx], bh; ret; 
0x10013a5c  # les ebp, ptr [esi + ebx*2]; leave; ret; 
0x1001cb6b  # les ebp, ptr [esi + ebx*2]; ret; 
0x100154a9  # les ebx, ptr [eax*4 + 0x458b66c0]; or byte ptr [esp + eax + 0x66], dh; mov eax, dword ptr [ebp - 2]; leave; ret; 
0x100113ac  # les ebx, ptr [eax*4 - 0x36fd8a40]; ret; 
0x1001246e  # les ebx, ptr [eax]; mov eax, esi; pop esi; pop ebp; ret; 
0x1001babe  # les ebx, ptr [eax]; test eax, eax; jne 0x1bac8; xor eax, eax; leave; ret; 
0x1001cfe9  # les ebx, ptr [esi + ebx*2]; ret; 
0x10017be8  # les ebx, ptr [esi + esi*8]; ret; 
0x1001a56e  # les ecx, ptr [eax]; pop ebp; ret 4; 
0x100150d1  # les ecx, ptr [ebx + eax*4]; aas; push dword ptr [edi + eax - 0x75]; ret; 
0x10018752  # les ecx, ptr [ebx + ebp*8]; or ebp, dword ptr [edx + 1]; pop eax; ret; 
0x10019d57  # les ecx, ptr [ebx + ecx*4]; inc esi; adc byte ptr [ebx], al; ret; 
0x100116bb  # les ecx, ptr [ebx + edi]; ret; 
0x10018af1  # les ecx, ptr [ecx + 0xcebe445]; push 1; pop eax; ret; 
0x10014a98  # les ecx, ptr [ecx + ebp*8]; insd dword ptr es:[edi], dx; add eax, 0xbe0f0000; ret; 
0x1001e522  # les ecx, ptr [edi + ebx*2]; pop esi; ret; 
0x10020811  # les ecx, ptr [edi + ecx]; mov dh, 0x45; call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x10019908  # les ecx, ptr [edi + edi*8]; or eax, 0x1003711c; and dword ptr [0x10037118], 0; ret; 
0x1001d3a5  # les ecx, ptr [edx + ebp*2]; add dword ptr [eax - 0x15], ebx; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x10023919  # les ecx, ptr [esi + esi*8]; ret; 
0x10023bda  # les ecx, ptr [esi]; mov eax, edi; pop edi; pop esi; ret; 
0x10022f62  # les edx, ptr [eax*4 - 0x4740]; add byte ptr [eax], al; jl 0x22f71; movzx eax, word ptr [ebp - 2]; leave; ret; 
0x10023998  # les edx, ptr [eax]; mov ax, si; pop esi; ret; 
0x10011684  # les edx, ptr [eax]; mov eax, edi; pop edi; pop esi; ret; 
0x10013be8  # les edx, ptr [eax]; pop ebp; ret; 
0x1001b392  # les edx, ptr [eax]; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x1001219d  # les edx, ptr [eax]; ret; 
0x100173f1  # les edx, ptr [ebx + eax*4]; clc; push dword ptr [ebp + 4]; or eax, eax; pop ebp; ret; 
0x10013b94  # les edx, ptr [edi + ebx*2]; pop esi; pop ebx; leave; ret; 
0x10013945  # les esi, ptr [eax]; pop esi; leave; ret; 
0x10011343  # les esp, ptr [eax]; pop edi; pop esi; ret; 
0x1001b2c3  # les esp, ptr [ecx + ecx*8]; ret; 
0x100168f8  # ljmp 0x5fc7:0x8b59ffff; pop esi; leave; ret; 
0x1001e577  # ljmp 0x850:0x895fcf0b; mov dword ptr [eax], ecx; pop esi; ret; 
0x10015a1e  # lock add dx, word ptr [eax]; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x1001c686  # lodsb al, byte ptr [esi]; imul eax, dword ptr [ebx], 0x59590010; xor eax, eax; pop esi; ret; 
0x10019c60  # lodsb al, byte ptr [esi]; push ebp; add edx, dword ptr [eax]; pop eax; ret; 
0x10018c48  # lodsb al, byte ptr [esi]; push ebp; add edx, dword ptr [eax]; ret; 
0x10020fba  # lodsd eax, dword ptr [esi]; push es; add byte ptr [eax], al; ret; 
0x1001030f  # loope 0x10295; sal byte ptr [esp + esi - 0x7c], cl; div byte ptr [edi - 9]; ret 0; 
0x100147bc  # loope 0x147c9; add byte ptr [eax], al; pop ecx; ret; 
0x1001d870  # mov ah, 0x50; add dl, byte ptr [eax]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x100144cc  # mov ah, 0x52; add dl, byte ptr [eax]; pop edi; pop esi; ret; 
0x10020ee2  # mov al, 0x2c; add byte ptr [eax], dl; call 0xd14a; pop ecx; ret; 
0x10015c87  # mov al, 0x3b; ret; 
0x10012fc5  # mov al, 0x55; add edx, dword ptr [eax]; mov dword ptr [eax + 0x14], 1; ret; 
0x100141f7  # mov al, byte ptr [0x8b100252]; ret; 
0x1002256d  # mov al, byte ptr [0xc910036e]; ret; 
0x1001fd2c  # mov al, byte ptr [0xe810036a]; push edx; pop es; add byte ptr [eax], al; ret; 
0x1001427e  # mov al, byte ptr [eax + 0x1b]; mov byte ptr [esi + 1], al; pop esi; ret; 
0x10011afe  # mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x1001cd5c  # mov al, byte ptr [ecx]; test al, al; jne 0x1cd4f; pop esi; ret; 
0x1001cf80  # mov al, byte ptr [ecx]; test al, al; jne 0x1cf73; pop esi; ret; 
0x10016bb3  # mov ax, bp; pop ebx; pop edi; pop ebp; ret; 
0x10023bdc  # mov ax, di; pop edi; pop esi; ret; 
0x1002399a  # mov ax, si; pop esi; ret; 
0x10021504  # mov ax, word ptr [eax]; pop esi; ret; 
0x100154ad  # mov ax, word ptr [ebp + 8]; je 0x154b7; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10016c23  # mov ax, word ptr [ebp + 8]; je 0x16c2d; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10015484  # mov ax, word ptr [ebp + 8]; leave; ret; 
0x100154b3  # mov ax, word ptr [ebp - 2]; leave; ret; 
0x10021a1d  # mov ax, word ptr [ebp - 2]; pop edi; pop esi; pop ebx; leave; ret; 
0x10015439  # mov ax, word ptr [esp + 0x10]; pop edi; pop esi; pop ebx; ret; 
0x10022f6e  # mov bh, 0x45; dec cl; ret; 
0x100113b5  # mov bh, 0x45; or ah, byte ptr [ebx]; inc ebp; or al, 0xc9; ret; 
0x10016a35  # mov bh, 0x45; or al, 0x5e; sub eax, ecx; pop ebx; leave; ret; 
0x1001bacc  # mov bh, 0x4d; or al, 0xf; mov bh, 0xc0; and eax, ecx; leave; ret; 
0x1001be1c  # mov bh, 0x4d; or byte ptr [edi], cl; mov bh, 0x45; or al, 0x2b; rcr dword ptr [ebx + 0x5e], 0xc9; ret; 
0x10012198  # mov bh, 0x4f; add byte ptr [eax], al; add esp, 0x10; ret; 
0x1001bad0  # mov bh, 0xc0; and eax, ecx; leave; ret; 
0x100247e2  # mov bh, 0xff; call ptr [ecx + 0x59]; ret; 
0x100243bc  # mov bh, 1; add ecx, 2; mov dword ptr [esi], ecx; pop esi; ret; 
0x100122eb  # mov bl, 0; add byte ptr [eax], al; pop ecx; pop esi; ret; 
0x100131fa  # mov bl, 0x31; add dword ptr [eax], edx; call dword ptr [0x10025278]; mov dword ptr [0x100366c4], eax; ret; 
0x10014789  # mov bl, 0xb; add byte ptr [eax], al; pop ecx; ret; 
0x1001467f  # mov byte ptr [eax + 0x2d], ch; add edx, dword ptr [eax]; jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001ba3d  # mov byte ptr [eax], cl; pop eax; pop ebp; ret; 
0x1001388e  # mov byte ptr [eax], dl; jne 0x13888; ret; 
0x1001334f  # mov byte ptr [ebx + ebp*8], 0xed; pop esi; ret; 
0x10010505  # mov byte ptr [ecx + 7], dl; leave; ret; 
0x1001046a  # mov byte ptr [ecx], dl; ret; 
0x1001a813  # mov byte ptr [edi + 1], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x10010339  # mov byte ptr [edi + 2], 0; pop edi; ret; 
0x1001a82d  # mov byte ptr [edi + 2], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x1001a99b  # mov byte ptr [edi + 3], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x1001a802  # mov byte ptr [edi], al; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x10010348  # mov byte ptr [edi], dl; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x10011cc4  # mov byte ptr [edx], cl; and ax, 0xc000; add eax, esi; pop esi; ret; 
0x10014281  # mov byte ptr [esi + 1], al; pop esi; ret; 
0x1001427c  # mov byte ptr [esi], cl; mov al, byte ptr [eax + 0x1b]; mov byte ptr [esi + 1], al; pop esi; ret; 
0x1001fdaa  # mov ch, 0xfd; add dword ptr [eax], edx; call 0xd14a; pop ecx; ret; 
0x100210a6  # mov cl, 0x10; add dl, byte ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10014279  # mov cl, byte ptr [eax + 0x1a]; mov byte ptr [esi], cl; mov al, byte ptr [eax + 0x1b]; mov byte ptr [esi + 1], al; pop esi; ret; 
0x1001383c  # mov cl, byte ptr [esi]; inc esi; test cl, cl; jne 0x13836; pop esi; ret; 
0x10020346  # mov dh, 0; pop esi; ret; 
0x10020814  # mov dh, 0x45; call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x10017b60  # mov dh, 1; inc ecx; mov dword ptr [esi], ecx; pop esi; ret; 
0x100212df  # mov dword ptr [0], ecx; leave; ret 0x10; 
0x1002019e  # mov dword ptr [0], ecx; leave; ret 0xc; 
0x1002025d  # mov dword ptr [0], ecx; leave; ret 4; 
0x100201fd  # mov dword ptr [0], ecx; leave; ret 8; 
0x1001ffd6  # mov dword ptr [0], ecx; leave; ret; 
0x10020e5f  # mov dword ptr [0], ecx; pop ebx; leave; ret 4; 
0x100237c3  # mov dword ptr [0], esp; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10018463  # mov dword ptr [0x100334c8], ebx; pop esi; pop ebx; pop ebp; ret; 
0x1001845d  # mov dword ptr [0x100334cc], ecx; mov dword ptr [0x100334c8], ebx; pop esi; pop ebx; pop ebp; ret; 
0x10019c5f  # mov dword ptr [0x100355ac], eax; pop eax; ret; 
0x10013204  # mov dword ptr [0x100366c4], eax; ret; 
0x10013f6b  # mov dword ptr [0x100366dc], eax; pop ebx; leave; ret; 
0x1001331b  # mov dword ptr [0x10036708], edi; call dword ptr [0x1002527c]; pop edi; ret; 
0x1001b6a0  # mov dword ptr [0x10036998], 1; ret; 
0x1001d227  # mov dword ptr [0x100369c4], ebx; xor eax, eax; pop ebx; leave; ret; 
0x1001d879  # mov dword ptr [0x100369ec], eax; ret; 
0x1001d874  # mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x10018d3c  # mov dword ptr [0x10037108], 0x10; pop eax; ret; 
0x10019092  # mov dword ptr [0x10037118], eax; pop edi; pop esi; pop ebx; leave; ret; 
0x10018d15  # mov dword ptr [0x10037120], eax; jne 0x18d1d; ret; 
0x10013ece  # mov dword ptr [0x10038264], 1; pop ebx; ret; 
0x1001b8ad  # mov dword ptr [0x10038268], 1; ret; 
0x1001aafa  # mov dword ptr [0x59ffffa8], eax; ret; 
0x10015c5c  # mov dword ptr [eax + 0x10], ecx; pop esi; pop ebx; leave; ret; 
0x10012fc9  # mov dword ptr [eax + 0x14], 1; ret; 
0x10015c59  # mov dword ptr [eax + 0x1c], ebx; mov dword ptr [eax + 0x10], ecx; pop esi; pop ebx; leave; ret; 
0x1001ad35  # mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x10012fc2  # mov dword ptr [eax + 0x50], 0x100355b0; mov dword ptr [eax + 0x14], 1; ret; 
0x100138cf  # mov dword ptr [eax + 4], ecx; leave; ret; 
0x10017c3d  # mov dword ptr [eax + 4], ecx; pop ebx; leave; ret; 
0x10019de9  # mov dword ptr [eax + 4], ecx; push dword ptr [0x10038144]; call dword ptr [0x10025254]; pop esi; ret; 
0x1001b4a3  # mov dword ptr [eax + 8], ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x1001e550  # mov dword ptr [eax + 8], ecx; pop esi; ret; 
0x1001e57b  # mov dword ptr [eax + 8], edx; mov dword ptr [eax], ecx; pop esi; ret; 
0x10020489  # mov dword ptr [eax], 0x10027938; ret 4; 
0x1002166d  # mov dword ptr [eax], 0x100279d4; ret 4; 
0x100237a3  # mov dword ptr [eax], 0x10027b68; ret 4; 
0x10023ce8  # mov dword ptr [eax], 0x10027b70; ret; 
0x100241c2  # mov dword ptr [eax], 0x16; or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x100238a2  # mov dword ptr [eax], 0x16; or eax, 0xffffffff; pop edi; pop esi; ret; 
0x10011cd3  # mov dword ptr [eax], 0x16; or eax, 0xffffffff; pop esi; ret; 
0x10015291  # mov dword ptr [eax], 0x16; pop esi; ret; 
0x1001ba79  # mov dword ptr [eax], 0x2a; or eax, 0xffffffff; pop ebp; ret; 
0x1001c13e  # mov dword ptr [eax], 0xa; or eax, 0xffffffff; pop ebx; pop ebp; ret; 
0x10015257  # mov dword ptr [eax], 0xd; pop esi; ret; 
0x10017036  # mov dword ptr [eax], 0xd; xor eax, eax; pop ebx; leave; ret; 
0x10015284  # mov dword ptr [eax], 8; pop esi; ret; 
0x10011690  # mov dword ptr [eax], 9; or eax, 0xffffffff; pop esi; ret; 
0x1002445b  # mov dword ptr [eax], ebx; xor eax, eax; pop esi; pop ebx; pop ebp; ret; 
0x100138e5  # mov dword ptr [eax], ecx; leave; ret; 
0x1001b291  # mov dword ptr [eax], ecx; mov eax, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x100138ca  # mov dword ptr [eax], ecx; mov ecx, dword ptr [ebp - 4]; mov dword ptr [eax + 4], ecx; leave; ret; 
0x1001e57e  # mov dword ptr [eax], ecx; pop esi; ret; 
0x1001526c  # mov dword ptr [eax], ecx; ret; 
0x10021d72  # mov dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x1c]; mov dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x10021d77  # mov dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x10021d7c  # mov dword ptr [eax], edx; ret; 
0x10020e01  # mov dword ptr [ebp + 8], eax; pop ecx; mov eax, 0x10020e0b; ret; 
0x1001e643  # mov dword ptr [ebx + 0xa], eax; pop ebx; leave; ret; 
0x1001afc9  # mov dword ptr [ecx + eax], esi; add eax, 4; dec edx; jne 0x1afc7; pop esi; ret; 
0x100228d7  # mov dword ptr [ecx], 0x10027ae4; ret; 
0x100225aa  # mov dword ptr [ecx], eax; mov eax, ecx; mov ecx, dword ptr [ebp - 0xc]; mov dword ptr fs:[0], ecx; leave; ret; 
0x10017bbe  # mov dword ptr [ecx], eax; ret; 
0x1001df78  # mov dword ptr [ecx], edx; pop ebx; leave; ret; 
0x10021c99  # mov dword ptr [ecx], edx; ret; 
0x1001e0eb  # mov dword ptr [ecx], esi; mov eax, ecx; pop edi; pop esi; pop ebx; ret; 
0x1001b1ed  # mov dword ptr [ecx], esi; pop edi; pop esi; pop ebx; leave; ret; 
0x10010e6e  # mov dword ptr [edi], eax; pop edi; leave; ret; 
0x10010333  # mov dword ptr [edi], edx; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x1001032a  # mov dword ptr [edi], edx; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x1001e4c6  # mov dword ptr [edx], ecx; ret; 
0x10022225  # mov dword ptr [esi + 0x1c], eax; pop esi; test eax, eax; jne 0x22232; call 0x23164; ret 8; 
0x1002240f  # mov dword ptr [esi + 0x1c], edi; call 0x21e72; pop edi; pop esi; ret; 
0x10021d36  # mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x100242ea  # mov dword ptr [esi + 0xc], eax; mov eax, 0xffff; pop esi; pop ebx; leave; ret; 
0x1001521c  # mov dword ptr [esi + 0xc], eax; or eax, 0xffffffff; pop esi; pop ebx; pop ebp; ret; 
0x1001b3ec  # mov dword ptr [esi + 0xc], edi; mov eax, esi; pop edi; pop esi; leave; ret; 
0x10023d88  # mov dword ptr [esi + 4], eax; mov eax, esi; pop edi; pop esi; ret 4; 
0x1001bfea  # mov dword ptr [esi + 4], eax; pop esi; ret; 
0x10023d3a  # mov dword ptr [esi + 8], 1; mov eax, esi; pop edi; pop esi; ret 4; 
0x1001bfe7  # mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; ret; 
0x1001f3bd  # mov dword ptr [esi + 8], edi; pop edi; pop esi; pop ebx; leave; ret; 
0x10022c86  # mov dword ptr [esi], 0x10027aec; mov eax, esi; pop esi; ret 4; 
0x10022d6e  # mov dword ptr [esi], 0x10027b1c; mov eax, esi; pop esi; ret 4; 
0x100231bc  # mov dword ptr [esi], 0x10027b58; mov eax, esi; pop esi; ret 4; 
0x1001bfe5  # mov dword ptr [esi], eax; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; ret; 
0x10012f97  # mov dword ptr [esi], eax; pop eax; pop esi; ret; 
0x10012699  # mov dword ptr [esi], eax; pop edi; pop esi; pop ebx; leave; ret; 
0x10013eca  # mov dword ptr [esi], ebx; pop edi; pop esi; mov dword ptr [0x10038264], 1; pop ebx; ret; 
0x10022192  # mov dword ptr [esi], ecx; call 0x20295; mov eax, esi; pop edi; pop esi; ret 4; 
0x10017b63  # mov dword ptr [esi], ecx; pop esi; ret; 
0x100237c9  # mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x100212de  # mov dword ptr fs:[0], ecx; leave; ret 0x10; 
0x1002019d  # mov dword ptr fs:[0], ecx; leave; ret 0xc; 
0x1002025c  # mov dword ptr fs:[0], ecx; leave; ret 4; 
0x100201fc  # mov dword ptr fs:[0], ecx; leave; ret 8; 
0x1001ffd5  # mov dword ptr fs:[0], ecx; leave; ret; 
0x10020e5e  # mov dword ptr fs:[0], ecx; pop ebx; leave; ret 4; 
0x100237c2  # mov dword ptr fs:[0], esp; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10020e05  # mov eax, 0x10020e0b; ret; 
0x10021f79  # mov eax, 0x10027aa0; ret; 
0x10023dce  # mov eax, 0x10027b78; ret; 
0x1002256c  # mov eax, 0x10036ea0; leave; ret; 
0x1001b6c6  # mov eax, 0x404; ret; 
0x1001b6d8  # mov eax, 0x411; ret; 
0x1001b6cc  # mov eax, 0x412; ret; 
0x100247d2  # mov eax, 0x5959ffff; ret; 
0x1001bf61  # mov eax, 0x7fffffff; pop ebp; ret; 
0x1001b6d2  # mov eax, 0x804; ret; 
0x1001cfe4  # mov eax, 0x83ffff50; les ebx, ptr [esi + ebx*2]; ret; 
0x1001d6d6  # mov eax, 0xf6100250; add eax, 0x10036a04; add al, 0x75; pop es; and dword ptr [0x10036a04], 0; ret; 
0x10022f66  # mov eax, 0xffff; jl 0x22f71; movzx eax, word ptr [ebp - 2]; leave; ret; 
0x10021817  # mov eax, 0xffff; pop edi; pop esi; pop ebx; leave; ret 4; 
0x100242ed  # mov eax, 0xffff; pop esi; pop ebx; leave; ret; 
0x100214f6  # mov eax, 0xffff; pop esi; ret; 
0x10017823  # mov eax, dword ptr [0x100333d4]; ret; 
0x1001783b  # mov eax, dword ptr [0x100333ec]; pop ecx; ret; 
0x10019c47  # mov eax, dword ptr [0x100355ac]; ret; 
0x1001f19f  # mov eax, dword ptr [0x10035f88]; ret; 
0x1001b69b  # mov eax, dword ptr [0x100368ac]; mov dword ptr [0x10036998], 1; ret; 
0x1001a598  # mov eax, dword ptr [0x10036994]; ret; 
0x10018c38  # mov eax, dword ptr [0x10037124]; ret; 
0x10018c2e  # mov eax, dword ptr [0x10038148]; cmp eax, 3; jne 0x18c3e; mov eax, dword ptr [0x10037124]; ret; 
0x10021d2d  # mov eax, dword ptr [0x10038284]; and dword ptr [esi + 0x38], 0; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x1001badf  # mov eax, dword ptr [0x59ffffff]; pop ecx; ret; 
0x10016cfd  # mov eax, dword ptr [0x83ffffe5]; and byte ptr [eax], al; or eax, 0xffffffff; pop esi; ret; 
0x10015ffd  # mov eax, dword ptr [0x83fffff2]; and byte ptr [eax], al; or eax, 0xffffffff; ret; 
0x1001804f  # mov eax, dword ptr [0xc483ffff]; or al, 0x3b; ret; 
0x10014686  # mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x100150ec  # mov eax, dword ptr [eax - 4]; ret; 
0x10012ad8  # mov eax, dword ptr [eax]; cmp dword ptr [eax], 0xe06d7363; je 0x12ae5; xor eax, eax; ret; 
0x10015107  # mov eax, dword ptr [eax]; mov ax, word ptr [eax - 4]; ret; 
0x100150ea  # mov eax, dword ptr [eax]; mov eax, dword ptr [eax - 4]; ret; 
0x10021505  # mov eax, dword ptr [eax]; pop esi; ret; 
0x10015fee  # mov eax, dword ptr [eax]; ret; 
0x1001506c  # mov eax, dword ptr [ebp + 0x10]; jne 0x15076; or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x10012563  # mov eax, dword ptr [ebp + 0x10]; pop edi; pop esi; pop ebx; leave; ret; 
0x10022fd6  # mov eax, dword ptr [ebp + 0x10]; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x10022e17  # mov eax, dword ptr [ebp + 0x18]; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x10013a58  # mov eax, dword ptr [ebp + 0xc]; add esp, 0x2c; pop esi; leave; ret; 
0x10013941  # mov eax, dword ptr [ebp + 0xc]; add esp, 0x30; pop esi; leave; ret; 
0x1001ba13  # mov eax, dword ptr [ebp + 0xc]; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x10017e52  # mov eax, dword ptr [ebp + 8]; add dword ptr [esi + 0x1c], eax; mov eax, esi; pop esi; pop ebp; ret; 
0x10015446  # mov eax, dword ptr [ebp + 8]; cmp ax, 0xffff; jne 0x15454; or ax, ax; leave; ret; 
0x10016bbe  # mov eax, dword ptr [ebp + 8]; cmp ax, 0xffff; jne 0x16bcc; or ax, ax; leave; ret; 
0x10022f37  # mov eax, dword ptr [ebp + 8]; cmp eax, -1; jne 0x22f45; or ax, 0xffff; leave; ret; 
0x100154ae  # mov eax, dword ptr [ebp + 8]; je 0x154b7; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10016c24  # mov eax, dword ptr [ebp + 8]; je 0x16c2d; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10015485  # mov eax, dword ptr [ebp + 8]; leave; ret; 
0x10011f3e  # mov eax, dword ptr [ebp + 8]; pop ecx; pop edi; pop esi; leave; ret; 
0x1001a7f8  # mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x1001ba1e  # mov eax, dword ptr [ebp + 8]; test eax, eax; jne 0x1ba27; pop ebp; ret; 
0x10024636  # mov eax, dword ptr [ebp - 0x1c]; push eax; call 0x2c40; pop ecx; ret; 
0x100154b4  # mov eax, dword ptr [ebp - 2]; leave; ret; 
0x10021a1e  # mov eax, dword ptr [ebp - 2]; pop edi; pop esi; pop ebx; leave; ret; 
0x100203b6  # mov eax, dword ptr [ebp - 4]; pop edi; leave; ret 8; 
0x1001b293  # mov eax, dword ptr [ebp - 4]; pop edi; pop esi; leave; ret; 
0x1001728d  # mov eax, dword ptr [ebp - 8]; pop edi; pop esi; leave; ret; 
0x10021f72  # mov eax, dword ptr [ecx + 0x10]; test eax, eax; jne 0x21f7e; mov eax, 0x10027aa0; ret; 
0x10022b24  # mov eax, dword ptr [ecx + 0x10]; test eax, eax; jne 0x22b30; mov eax, 0x10027aa0; ret; 
0x1001a564  # mov eax, dword ptr [ecx + 0x18]; push eax; call 0xcb82; add esp, 8; pop ebp; ret 4; 
0x10021c80  # mov eax, dword ptr [ecx + 0x1c]; add dword ptr [eax], -2; mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x10021c70  # mov eax, dword ptr [ecx + 0x1c]; lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x10021d74  # mov eax, dword ptr [ecx + 0x1c]; mov dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x10021c86  # mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x10021ca5  # mov eax, dword ptr [ecx + 0x20]; lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x10021d79  # mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x10023dc7  # mov eax, dword ptr [ecx + 4]; test eax, eax; jne 0x23dd3; mov eax, 0x10027b78; ret; 
0x10017bb7  # mov eax, dword ptr [ecx + 8]; and dword ptr [ecx + 4], 0; mov dword ptr [ecx], eax; ret; 
0x100150f9  # mov eax, dword ptr [ecx - 8]; mov edx, dword ptr [ecx - 4]; ret; 
0x10021c94  # mov eax, dword ptr [ecx]; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x10023d85  # mov eax, dword ptr [edi + 4]; mov dword ptr [esi + 4], eax; mov eax, esi; pop edi; pop esi; ret 4; 
0x1001944b  # mov eax, dword ptr [esi + 0x10]; or dword ptr [eax], 0xffffffff; mov eax, esi; pop edi; pop esi; ret; 
0x1001142c  # mov eax, dword ptr [esp + 0x10]; pop edi; pop esi; pop ebx; ret; 
0x100150e3  # mov eax, dword ptr [esp + 4]; add dword ptr [eax], 4; mov eax, dword ptr [eax]; mov eax, dword ptr [eax - 4]; ret; 
0x100113bd  # mov eax, dword ptr [esp + 4]; add eax, -0x20; ret; 
0x10011add  # mov eax, dword ptr [esp + 4]; cmp eax, dword ptr [0x10038260]; jb 0x11aec; xor eax, eax; ret; 
0x10016c80  # mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x1001478f  # mov eax, dword ptr [esp + 8]; add eax, 0x20; push eax; call dword ptr [0x10025074]; ret; 
0x100147e1  # mov eax, dword ptr [esp + 8]; add eax, 0x20; push eax; call dword ptr [0x10025078]; ret; 
0x10010335  # mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x10016c98  # mov eax, dword ptr [esp + 8]; mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x1001032c  # mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x10016bb4  # mov eax, ebp; pop ebx; pop edi; pop ebp; ret; 
0x10015841  # mov eax, ebp; pop esi; pop ebp; pop ebx; pop edi; ret; 
0x1001e2cf  # mov eax, ebx; pop edi; pop esi; pop ebx; ret 4; 
0x10010579  # mov eax, ecx; add dl, bl; pop ebx; mov byte ptr [ecx + 7], dl; leave; ret; 
0x10023cde  # mov eax, ecx; and dword ptr [eax + 4], 0; and dword ptr [eax + 8], 0; mov dword ptr [eax], 0x10027b70; ret; 
0x10020487  # mov eax, ecx; mov dword ptr [eax], 0x10027938; ret 4; 
0x1002166b  # mov eax, ecx; mov dword ptr [eax], 0x100279d4; ret 4; 
0x100237a1  # mov eax, ecx; mov dword ptr [eax], 0x10027b68; ret 4; 
0x100225ac  # mov eax, ecx; mov ecx, dword ptr [ebp - 0xc]; mov dword ptr fs:[0], ecx; leave; ret; 
0x1001e0ed  # mov eax, ecx; pop edi; pop esi; pop ebx; ret; 
0x10023798  # mov eax, ecx; ret 4; 
0x1002047c  # mov eax, ecx; ret 8; 
0x10022451  # mov eax, edi; jne 0x22446; and dword ptr [esi + 0x1c], 0; pop edi; pop esi; ret; 
0x10024552  # mov eax, edi; mov edx, ebx; pop edi; pop ebx; pop esi; ret; 
0x10023df4  # mov eax, edi; mov edx, ebx; pop edi; pop esi; pop ebx; ret; 
0x10022749  # mov eax, edi; pop edi; pop esi; leave; ret 4; 
0x100168fc  # mov eax, edi; pop edi; pop esi; leave; ret; 
0x10022529  # mov eax, edi; pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10013a05  # mov eax, edi; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x10012440  # mov eax, edi; pop edi; pop esi; pop ebx; ret; 
0x10011686  # mov eax, edi; pop edi; pop esi; ret; 
0x10024570  # mov eax, edx; pop esi; ret; 
0x100189f2  # mov eax, edx; ret; 
0x10014679  # mov eax, edx; shl eax, 3; cmp ecx, dword ptr [eax + 0x10032d68]; jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001a593  # mov eax, esi; pop ecx; pop esi; ret; 
0x1001b3ef  # mov eax, esi; pop edi; pop esi; leave; ret; 
0x100221f0  # mov eax, esi; pop edi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x1001f658  # mov eax, esi; pop edi; pop esi; pop ebp; ret; 
0x1001b65a  # mov eax, esi; pop edi; pop esi; pop ebx; leave; ret; 
0x10021e39  # mov eax, esi; pop edi; pop esi; pop ebx; ret; 
0x10022199  # mov eax, esi; pop edi; pop esi; ret 4; 
0x10013033  # mov eax, esi; pop edi; pop esi; ret; 
0x1001acf8  # mov eax, esi; pop esi; leave; ret; 
0x100212db  # mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 0x10; 
0x1002019a  # mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 0xc; 
0x10020259  # mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 4; 
0x100201f9  # mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x1002280f  # mov eax, esi; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10012470  # mov eax, esi; pop esi; pop ebp; ret; 
0x100160a9  # mov eax, esi; pop esi; pop ebx; pop ebp; ret; 
0x10017cb1  # mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x1002216a  # mov eax, esi; pop esi; pop ebx; ret 4; 
0x10021ba4  # mov eax, esi; pop esi; ret 4; 
0x10016fdd  # mov eax, esi; pop esi; ret; 
0x1001d404  # mov ebp, 0x5d5b5e5f; ret; 
0x1001d98b  # mov ebp, 0xffffff7c; add dh, byte ptr [ebp + 5]; push 1; pop eax; leave; ret; 
0x1001bf2f  # mov ebp, esp; cmp dword ptr [ebp + 0x10], 0; jne 0x1bf3b; xor eax, eax; pop ebp; ret; 
0x1001ba1c  # mov ebp, esp; mov eax, dword ptr [ebp + 8]; test eax, eax; jne 0x1ba27; pop ebp; ret; 
0x1001362b  # mov ebx, dword ptr [ebp + 8]; push 9; call 0x153a1; pop ecx; xor edi, edi; ret; 
0x100134db  # mov ebx, dword ptr [ebp + 8]; xor edi, edi; push 9; call 0x153a1; pop ecx; ret; 
0x1001fe3e  # mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd2b  # mov ecx, 0x10036aa0; call 0x20487; ret; 
0x1001fd9e  # mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fde0  # mov ecx, 0x10036b30; call 0x20487; ret; 
0x1001fd5a  # mov ecx, 0x10036b88; call 0x201a8; ret; 
0x1001fcfe  # mov ecx, 0x10036bc8; call 0x20487; ret; 
0x1001fe0f  # mov ecx, 0x10036c20; call 0x2008c; ret; 
0x1002106b  # mov ecx, 0x10036c58; call 0x212e9; ret; 
0x1002109a  # mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10021273  # mov ecx, 0x10036c98; call 0x21348; leave; ret; 
0x10020fe3  # mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10020f87  # mov ecx, 0x10036d10; call 0x2166b; ret; 
0x10020f5a  # mov ecx, 0x10036d68; call 0x2166b; ret; 
0x10021027  # mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x10020fb4  # mov ecx, 0x10036df8; call 0x2166b; ret; 
0x10024672  # mov ecx, 0x5959ffff; ret; 
0x10024821  # mov ecx, 0x59ffffb7; pop ecx; ret; 
0x1001d2d8  # mov ecx, 0xeb000003; adc al, 0x3b; ret; 
0x100150f7  # mov ecx, dword ptr [eax]; mov eax, dword ptr [ecx - 8]; mov edx, dword ptr [ecx - 4]; ret; 
0x100138e2  # mov ecx, dword ptr [ebp + 0x10]; mov dword ptr [eax], ecx; leave; ret; 
0x100225ae  # mov ecx, dword ptr [ebp - 0xc]; mov dword ptr fs:[0], ecx; leave; ret; 
0x10021eff  # mov ecx, dword ptr [ebp - 0xc]; pop ebx; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x10021fcc  # mov ecx, dword ptr [ebp - 0xc]; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x100138cc  # mov ecx, dword ptr [ebp - 4]; mov dword ptr [eax + 4], ecx; leave; ret; 
0x10021c91  # mov ecx, dword ptr [ecx + 0x1c]; mov eax, dword ptr [ecx]; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x10021cb5  # mov ecx, dword ptr [ecx + 0x20]; mov eax, dword ptr [ecx]; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x10012eec  # mov ecx, dword ptr [ecx + 8]; mov ecx, dword ptr [esi + ecx]; add ecx, edx; add eax, ecx; pop esi; ret; 
0x1001611d  # mov ecx, dword ptr [ecx*4 + 0x10038160]; lea eax, [ecx + eax*4 + 0xc]; push eax; call dword ptr [0x10025078]; ret; 
0x10011af7  # mov ecx, dword ptr [ecx*4 + 0x10038160]; mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x10012eef  # mov ecx, dword ptr [esi + ecx]; add ecx, edx; add eax, ecx; pop esi; ret; 
0x10015264  # mov ecx, dword ptr [esi*8 + 0x10033084]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10016c7a  # mov ecx, dword ptr [esp + 0xc]; jne 0x16c89; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x100202ce  # mov ecx, eax; call dword ptr [edx]; ret; 
0x1002033e  # mov ecx, esi; call 0x20b96; movzx eax, byte ptr [eax]; pop esi; ret; 
0x100214fd  # mov ecx, esi; call 0x21c8c; mov ax, word ptr [eax]; pop esi; ret; 
0x10021cd8  # mov ecx, esi; call 0x21ce7; mov eax, esi; pop esi; ret; 
0x10021c5c  # mov ecx, esi; call 0x22394; pop esi; ret 8; 
0x10023da4  # mov ecx, esi; call 0x23d48; mov eax, esi; pop esi; ret 4; 
0x100206ff  # mov ecx, esi; call dword ptr [edi + 8]; pop edi; pop esi; ret; 
0x10020881  # mov edi, eax; rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x10; 
0x10021b3a  # mov edi, eax; rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x20; 
0x100134e3  # mov edx, 0x5900001e; ret; 
0x100155f5  # mov edx, 0x5e5fc033; pop ebp; pop ebx; ret; 
0x100202ca  # mov edx, dword ptr [eax]; push 1; mov ecx, eax; call dword ptr [edx]; ret; 
0x100150fc  # mov edx, dword ptr [ecx - 4]; ret; 
0x1001e4c1  # mov edx, dword ptr [esp + 0x10]; pop esi; mov dword ptr [edx], ecx; ret; 
0x10024554  # mov edx, ebx; pop edi; pop ebx; pop esi; ret; 
0x10023df6  # mov edx, ebx; pop edi; pop esi; pop ebx; ret; 
0x1001aa6b  # mov esi, dword ptr [ebp + 0xc]; push 9; call 0x153a1; pop ecx; ret; 
0x100122a1  # mov esi, dword ptr [ebp + 8]; push 9; call 0x153a1; pop ecx; ret; 
0x100136eb  # mov esi, dword ptr [ebp - 0x20]; push 9; call 0x153a1; pop ecx; ret; 
0x10023990  # mov esi, eax; call 0x1479e; add esp, 0x10; mov ax, si; pop esi; ret; 
0x10016fd3  # mov esi, eax; call 0x153a1; add esp, 0x14; mov eax, esi; pop esi; ret; 
0x10018173  # mov esi, eax; call 0x153a1; add esp, 0xc; mov eax, esi; pop esi; ret; 
0x1001ce3b  # mov esp, 0x100369; pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x1001a98c  # mov esp, 0x8b1001a9; inc ebp; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x1001a555  # mov esp, ebp; pop ebp; ret; 
0x10016951  # mov word ptr [eax + 3], gs; adc byte ptr [ebp + 0x2ebc804], cl; xor eax, eax; pop edi; pop esi; ret; 
0x1001b4a2  # mov word ptr [eax + 8], cx; pop edi; pop esi; pop ebx; leave; ret; 
0x1002445a  # mov word ptr [eax], bx; xor eax, eax; pop esi; pop ebx; pop ebp; ret; 
0x1001e642  # mov word ptr [ebx + 0xa], ax; pop ebx; leave; ret; 
0x1001df77  # mov word ptr [ecx], dx; pop ebx; leave; ret; 
0x10010332  # mov word ptr [edi], dx; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x1001033f  # mov word ptr [edi], dx; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x1001df1d  # movsb byte ptr es:[edi], byte ptr [esi]; adc al, 0; add byte ptr [ebx + 0x5d8bc055], cl; ret 0x758b; 
0x1002124b  # movsb byte ptr es:[edi], byte ptr [esi]; arpl word ptr [ebx], ax; adc byte ptr [ebp - 0x6bf003b3], cl; ret; 
0x10023ed3  # movsd dword ptr es:[edi], dword ptr [esi]; add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0xc103; 
0x10020451  # movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x10; 
0x10020475  # movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x20; 
0x100202b4  # movsd dword ptr es:[edi], dword ptr [esi]; sbb eax, dword ptr [eax]; add byte ptr [esi - 0x37], bl; ret; 
0x1001bacf  # movzx eax, ax; and eax, ecx; leave; ret; 
0x10020345  # movzx eax, byte ptr [eax]; pop esi; ret; 
0x10020813  # movzx eax, byte ptr [ebp - 1]; pop edi; pop esi; pop ebx; leave; ret; 
0x10017b5f  # movzx eax, byte ptr [ecx]; inc ecx; mov dword ptr [esi], ecx; pop esi; ret; 
0x100113b4  # movzx eax, word ptr [ebp + 0xa]; and eax, dword ptr [ebp + 0xc]; leave; ret; 
0x10016a34  # movzx eax, word ptr [ebp + 0xc]; pop esi; sub eax, ecx; pop ebx; leave; ret; 
0x1001be1f  # movzx eax, word ptr [ebp + 0xc]; sub eax, ecx; pop ebx; pop esi; leave; ret; 
0x10022f6d  # movzx eax, word ptr [ebp - 2]; leave; ret; 
0x100243bb  # movzx eax, word ptr [ecx]; add ecx, 2; mov dword ptr [esi], ecx; pop esi; ret; 
0x1001bacb  # movzx ecx, word ptr [ebp + 0xc]; movzx eax, ax; and eax, ecx; leave; ret; 
0x10016c9c  # mul ecx; add edx, ebx; pop ebx; ret 0x10; 
0x10016c84  # mul ecx; ret 0x10; 
0x1001c61a  # neg byte ptr [ecx + 0x75]; add eax, 0x5e58016a; ret; 
0x10016a74  # neg cx; sbb ecx, ecx; not ecx; and eax, ecx; ret; 
0x1001a48e  # neg dword ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x10012332  # neg eax; pop ecx; pop esi; sbb eax, eax; ret; 
0x10023758  # neg eax; pop ecx; sbb eax, eax; pop ecx; inc eax; ret 4; 
0x10023773  # neg eax; pop ecx; sbb eax, eax; pop ecx; neg eax; ret 4; 
0x10010189  # neg eax; pop edi; pop esi; pop ebp; pop ebx; ret; 
0x100157cf  # neg eax; pop edi; pop esi; ret; 
0x10023779  # neg eax; ret 4; 
0x1001b891  # neg eax; sbb eax, eax; and eax, dword ptr [0x10036edc]; ret; 
0x10018c40  # neg eax; sbb eax, eax; not eax; and eax, dword ptr [0x100355ac]; ret; 
0x1001fce9  # neg eax; sbb eax, eax; pop esi; and eax, ecx; pop ebp; ret; 
0x10017d2c  # neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x10016a75  # neg ecx; sbb ecx, ecx; not ecx; and eax, ecx; ret; 
0x10017d2a  # neg edx; neg eax; sbb edx, 0; pop ebx; ret 0x10; 
0x1001b814  # nop; add byte ptr [edi + 3], ch; adc bl, ch; sbb al, 0xf6; ret 0x7402; 
0x10013c04  # not dword ptr [esi - 0x18]; xchg ebp, eax; push 0; add byte ptr [ebx + 0x5f5e10c4], al; ret; 
0x10018c44  # not eax; and eax, dword ptr [0x100355ac]; ret; 
0x1001bf26  # not eax; and eax, esi; pop esi; pop ebx; pop ebp; ret; 
0x1001d79b  # not eax; shr eax, 2; and eax, 1; pop esi; leave; ret 4; 
0x10016a79  # not ecx; and eax, ecx; ret; 
0x1001ae55  # or ah, 0x10; ret; 
0x100113b7  # or ah, byte ptr [ebx]; inc ebp; or al, 0xc9; ret; 
0x10011cc5  # or ah, byte ptr [esi + 0x25]; add al, al; add eax, esi; pop esi; ret; 
0x10020edd  # or al, 0; add byte ptr [eax], al; push 0x10002cb0; call 0xd14a; pop ecx; ret; 
0x10021c58  # or al, 0; je 0x21c63; mov ecx, esi; call 0x22394; pop esi; ret 8; 
0x10015da1  # or al, 0; mov eax, edi; pop edi; pop esi; ret; 
0x10021c74  # or al, 0x12; add dword ptr [eax], ecx; ret 4; 
0x1001be22  # or al, 0x2b; rcr dword ptr [ebx + 0x5e], 0xc9; ret; 
0x10014094  # or al, 0x33; sar byte ptr [ecx], cl; push ebp; sbb byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x100116bc  # or al, 0x3b; ret; 
0x100218ec  # or al, 0x48; cmp eax, ecx; jae 0x218f7; mov ax, word ptr [eax]; pop esi; ret; 
0x1001b6bf  # or al, 0x48; je 0x1b6c6; xor eax, eax; ret; 
0x10016102  # or al, 0x50; call dword ptr [0x10025074]; pop edi; pop esi; pop ebx; ret; 
0x10016127  # or al, 0x50; call dword ptr [0x10025078]; ret; 
0x1001bff2  # or al, 0x50; push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x1ed49; add esp, 0xc; ret; 
0x100237d0  # or al, 0x50; ret; 
0x1001acf3  # or al, 0x59; fldcw word ptr [ebp + 0xc]; mov eax, esi; pop esi; leave; ret; 
0x100138df  # or al, 0x59; pop ecx; mov ecx, dword ptr [ebp + 0x10]; mov dword ptr [eax], ecx; leave; ret; 
0x10013bc0  # or al, 0x5d; ret; 
0x10016a37  # or al, 0x5e; sub eax, ecx; pop ebx; leave; ret; 
0x1001ba15  # or al, 0x5f; pop esi; pop ebx; pop ebp; ret; 
0x1001e523  # or al, 0x5f; pop esi; ret; 
0x100237c1  # or al, 0x64; mov dword ptr [0], esp; mov dword ptr [esp + 0xc], ebp; lea ebp, [esp + 0xc]; push eax; ret; 
0x10023bdb  # or al, 0x66; mov eax, edi; pop edi; pop esi; ret; 
0x1001d3a6  # or al, 0x6a; add dword ptr [eax - 0x15], ebx; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x1001aaf6  # or al, 0x6a; or eax, ebp; mov dword ptr [0x59ffffa8], eax; ret; 
0x1001f439  # or al, 0x75; ret; 
0x1001d402  # or al, 0x7e; mov ebp, 0x5d5b5e5f; ret; 
0x100150d2  # or al, 0x83; aas; push dword ptr [edi + eax - 0x75]; ret; 
0x100243d1  # or al, 0x83; add al, 0; mov eax, 0xffff; pop esi; ret; 
0x10017b73  # or al, 0x83; add al, 0; or eax, 0xffffffff; pop esi; ret; 
0x10013a5a  # or al, 0x83; les ebp, ptr [esi + ebx*2]; leave; ret; 
0x10023917  # or al, 0x83; les ecx, ptr [esi + esi*8]; ret; 
0x10013943  # or al, 0x83; les esi, ptr [eax]; pop esi; leave; ret; 
0x10017525  # or al, 0x83; ret; 
0x10021d71  # or al, 0x89; adc byte ptr [ebx + 0x10891c41], cl; mov eax, dword ptr [ecx + 0x2c]; mov dword ptr [eax], edx; ret; 
0x1001b1ec  # or al, 0x89; xor dword ptr [edi + 0x5e], ebx; pop ebx; leave; ret; 
0x10019d58  # or al, 0x8b; inc esi; adc byte ptr [ebx], al; ret; 
0x100150af  # or al, 0x8b; ret; 
0x100237cc  # or al, 0x8d; insb byte ptr es:[edi], dx; and al, 0xc; push eax; ret; 
0x1001611e  # or al, 0x8d; pushal; add dword ptr [ebx], 0x81448d10; or al, 0x50; call dword ptr [0x10025078]; ret; 
0x1001a7f0  # or al, 0xa8; add dword ptr [eax], edx; and byte ptr [eax + 0x458b1001], ch; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x100113ba  # or al, 0xc9; ret; 
0x1001325c  # or al, 0xe8; and al, byte ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x1001613c  # or al, 0xe8; inc edi; sar bh, 0xff; add esp, 0xc; ret; 
0x1001324b  # or al, 0xe8; xor eax, dword ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x10014a99  # or al, 0xe9; insd dword ptr es:[edi], dx; add eax, 0xbe0f0000; ret; 
0x10012ef0  # or al, 0xe; add ecx, edx; add eax, ecx; pop esi; ret; 
0x10018753  # or al, 0xeb; or ebp, dword ptr [edx + 1]; pop eax; ret; 
0x10023912  # or al, 0xf3; ret 0x4e8b; 
0x10015265  # or al, 0xf5; test byte ptr [eax], dh; add edx, dword ptr [eax]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10017aff  # or al, 0xf6; ret 0x7582; 
0x1002391a  # or al, 0xf6; ret; 
0x1001bace  # or al, 0xf; mov bh, 0xc0; and eax, ecx; leave; ret; 
0x10020812  # or al, 0xf; mov dh, 0x45; call ptr [edi + 0x5e]; pop ebx; leave; ret; 
0x1001ac45  # or al, 0xff; adc eax, 0x100250e0; pop esi; pop ebx; leave; ret; 
0x10013bb5  # or al, 0xff; jne 0x13bc1; call 0x13a0c; add esp, 0xc; pop ebp; ret; 
0x10013bde  # or al, 0xff; jne 0x13bea; call 0x138e9; add esp, 0x10; pop ebp; ret; 
0x1001ae81  # or al, 1; test cl, 2; je 0x1ae8d; or eax, 0x80000; ret; 
0x10019f90  # or al, 3; ret 0xf93b; 
0x1001d3c8  # or al, 3; ret; 
0x10010439  # or al, byte ptr [eax - 0x74fffea0]; ret; 
0x1001c140  # or al, byte ptr [eax]; add byte ptr [eax], al; or eax, 0xffffffff; pop ebx; pop ebp; ret; 
0x10017107  # or al, byte ptr [ebx + 0x57401f8]; push 1; pop eax; pop ebp; ret; 
0x100121a9  # or al, ch; add eax, dword ptr [eax]; add byte ptr [eax], al; pop ecx; pop ecx; ret; 
0x1001badd  # or al, ch; mov eax, dword ptr [0x59ffffff]; pop ecx; ret; 
0x10022f3f  # or ax, 0xffff; leave; ret; 
0x100218d0  # or ax, 0xffff; pop edi; pop esi; pop ebx; ret 4; 
0x10023b51  # or ax, 0xffff; pop esi; pop ebx; pop ebp; ret; 
0x100214d2  # or ax, 0xffff; ret 4; 
0x100214e3  # or ax, 0xffff; ret; 
0x1001544f  # or ax, ax; leave; ret; 
0x1001bad9  # or bh, bh; je 0x1bb01; or al, ch; mov eax, dword ptr [0x59ffffff]; pop ecx; ret; 
0x1001944f  # or bh, bh; mov eax, esi; pop edi; pop esi; ret; 
0x10015072  # or bh, bh; pop ebp; ret; 
0x100153a6  # or bh, bh; xor al, 0x85; call 0xff1156e0; adc eax, 0x10025078; pop ebp; ret; 
0x100139ee  # or bh, byte ptr [ecx + edx - 0x75]; ret; 
0x1002379f  # or bl, al; mov eax, ecx; mov dword ptr [eax], 0x10027b68; ret 4; 
0x1001e645  # or bl, byte ptr [ebx - 0x37]; ret; 
0x1001215f  # or bl, ch; or ch, byte ptr [edx + 9]; call 0x153a1; pop ecx; ret; 
0x1001ba3e  # or byte ptr [eax + 0x5d], bl; ret; 
0x1001528d  # or byte ptr [eax], al; add byte ptr [eax], al; mov dword ptr [eax], 0x16; pop esi; ret; 
0x10021cdb  # or byte ptr [eax], al; add byte ptr [eax], al; mov eax, esi; pop esi; ret; 
0x10015286  # or byte ptr [eax], al; add byte ptr [eax], al; pop esi; ret; 
0x10020342  # or byte ptr [eax], al; add byte ptr [edi], cl; mov dh, 0; pop esi; ret; 
0x10023ce6  # or byte ptr [eax], al; mov dword ptr [eax], 0x10027b70; ret; 
0x100148a2  # or byte ptr [eax], al; pop ecx; pop esi; ret; 
0x1001ae8b  # or byte ptr [eax], al; ret; 
0x1002047f  # or byte ptr [eax], al; xor eax, eax; ret; 
0x10019f15  # or byte ptr [eax], cl; ret; 
0x1001939c  # or byte ptr [ebp + 0x5e5f0442], cl; pop ebx; leave; ret; 
0x10021c90  # or byte ptr [ebx + 0x18b1c49], cl; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x10021cb4  # or byte ptr [ebx + 0x18b2049], cl; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x1001ac53  # or byte ptr [ebx + 0x356340d], cl; adc byte ptr [esi - 0x75], dl; je 0x1ac82; or byte ptr [ecx], bh; xor dl, byte ptr [edi - 0x75]; ret 0x1174; 
0x100138cb  # or byte ptr [ebx + 0x4889fc4d], cl; add al, 0xc9; ret; 
0x100150f8  # or byte ptr [ebx + 0x518bf841], cl; cld; ret; 
0x1001b292  # or byte ptr [ebx + 0x5e5ffc45], cl; leave; ret; 
0x10020880  # or byte ptr [ebx + 0x5fa5f3f8], cl; pop esi; leave; ret 0x10; 
0x10021b39  # or byte ptr [ebx + 0x5fa5f3f8], cl; pop esi; leave; ret 0x20; 
0x10022f39  # or byte ptr [ebx + 0x675fff8], al; or ax, 0xffff; leave; ret; 
0x10012eee  # or byte ptr [ebx - 0x35fcf1f4], cl; add eax, ecx; pop esi; ret; 
0x1001a29f  # or byte ptr [ebx - 0x74ff039b], al; ret; 
0x1001f991  # or byte ptr [ebx - 0x76aefb40], al; inc ebp; adc al, ch; ret 0xfed8; 
0x100150f6  # or byte ptr [ebx - 0x7be74f8], cl; mov edx, dword ptr [ecx - 4]; ret; 
0x10014792  # or byte ptr [ebx - 0xafdf40], al; adc eax, 0x10025074; ret; 
0x100147e4  # or byte ptr [ebx - 0xafdf40], al; adc eax, 0x10025078; ret; 
0x1001cd1b  # or byte ptr [ebx], bh; ret; 
0x1001163a  # or byte ptr [ebx], cl; rcr dword ptr [edi + 0x5e], 0x5b; leave; ret; 
0x1001331a  # or byte ptr [ecx + 0x367083d], cl; adc bh, bh; adc eax, 0x1002527c; pop edi; ret; 
0x10015c58  # or byte ptr [ecx + 0x48891c58], cl; adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x10011f40  # or byte ptr [ecx + 0x5f], bl; pop esi; leave; ret; 
0x1001b290  # or byte ptr [ecx - 0x3ba74f8], cl; pop edi; pop esi; leave; ret; 
0x10020e03  # or byte ptr [ecx - 0x48], bl; or ecx, dword ptr [esi]; add dl, byte ptr [eax]; ret; 
0x100225a9  # or byte ptr [ecx - 0x743e74ff], cl; dec ebp; hlt; mov dword ptr fs:[0], ecx; leave; ret; 
0x1001ac5e  # or byte ptr [ecx], bh; xor dl, byte ptr [edi - 0x75]; ret 0x1174; 
0x1001b4a5  # or byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x10020703  # or byte ptr [edi + 0x5e], bl; ret; 
0x1001331d  # or byte ptr [edi + 3], ah; adc bh, bh; adc eax, 0x1002527c; pop edi; ret; 
0x10014f6b  # or byte ptr [edi + edx - 0xa], dh; ret; 
0x1001be1e  # or byte ptr [edi], cl; mov bh, 0x45; or al, 0x2b; rcr dword ptr [ebx + 0x5e], 0xc9; ret; 
0x10022eee  # or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x10019f57  # or byte ptr [edx + 0x10], ch; call 0x19e03; pop ecx; ret; 
0x1001877a  # or byte ptr [edx + 2], dl; adc byte ptr [ebx], bh; ret; 
0x1001d875  # or byte ptr [edx + 3], ch; adc byte ptr [ebx + 0x100369ec], ah; ret; 
0x100122a3  # or byte ptr [edx + 9], ch; call 0x153a1; pop ecx; ret; 
0x1001362d  # or byte ptr [edx + 9], ch; call 0x153a1; pop ecx; xor edi, edi; ret; 
0x1001ad58  # or byte ptr [edx + eax + 0xc], dh; add al, 0xf6; ret; 
0x100180b5  # or byte ptr [edx], bh; ret; 
0x100229b6  # or byte ptr [edx], ch; call 0x229c1; ret 4; 
0x1001a7fa  # or byte ptr [esi + 0x5f], bl; leave; ret; 
0x10021c12  # or byte ptr [esi + edi*8 - 0x3974a601], ch; pop esi; ret 4; 
0x1001bf8b  # or byte ptr [esi - 9], ah; fstp dword ptr [ebx]; leave; not ecx; and eax, ecx; ret; 
0x100154b0  # or byte ptr [esp + eax + 0x66], dh; mov eax, dword ptr [ebp - 2]; leave; ret; 
0x10012161  # or ch, byte ptr [edx + 9]; call 0x153a1; pop ecx; ret; 
0x1002489f  # or cl, ch; in eax, dx; retf 0xffff; ret; 
0x100248c3  # or cl, ch; leave; retf 0xffff; ret; 
0x100138e6  # or cl, cl; ret; 
0x10010338  # or dh, al; inc edi; add al, byte ptr [eax]; pop edi; ret; 
0x1001ad55  # or dh, dh; ret; 
0x10012fb6  # or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10019dfa  # or dword ptr [0x10033598], 0xffffffff; pop esi; ret; 
0x100247d1  # or dword ptr [eax + 0x5959ffff], edi; ret; 
0x10016126  # or dword ptr [eax + edx*2], 0x507815ff; add dl, byte ptr [eax]; ret; 
0x1001944e  # or dword ptr [eax], 0xffffffff; mov eax, esi; pop edi; pop esi; ret; 
0x10015071  # or dword ptr [eax], 0xffffffff; pop ebp; ret; 
0x10015ff8  # or dword ptr [eax], eax; add byte ptr [eax], al; call 0x152a2; and dword ptr [eax], 0; or eax, 0xffffffff; ret; 
0x10011692  # or dword ptr [eax], eax; add byte ptr [eax], al; or eax, 0xffffffff; pop esi; ret; 
0x100218ea  # or dword ptr [ebp - 0x3ec4b7f4], ecx; jae 0x218f7; mov ax, word ptr [eax]; pop esi; ret; 
0x1001a48b  # or dword ptr [ebx + 0x5e5ff7c0], eax; pop ebx; leave; ret; 
0x1001a264  # or dword ptr [ebx], ebp; ret 0x1989; 
0x100246d1  # or dword ptr [ecx + 0x5959ffff], edi; ret; 
0x10019c5c  # or dword ptr [edx + 1], ebp; mov dword ptr [0x100355ac], eax; pop eax; ret; 
0x100243cf  # or dword ptr [esi + 0xc], eax; and dword ptr [esi + 4], 0; mov eax, 0xffff; pop esi; ret; 
0x10017b71  # or dword ptr [esi + 0xc], eax; and dword ptr [esi + 4], 0; or eax, 0xffffffff; pop esi; ret; 
0x100122e8  # or dword ptr [esi - 0x18], edx; mov bl, 0; add byte ptr [eax], al; pop ecx; pop esi; ret; 
0x100212e0  # or eax, 0; leave; ret 0x10; 
0x1002019f  # or eax, 0; leave; ret 0xc; 
0x1002025e  # or eax, 0; leave; ret 4; 
0x100201fe  # or eax, 0; leave; ret 8; 
0x1001ffd7  # or eax, 0; leave; ret; 
0x10020e60  # or eax, 0; pop ebx; leave; ret 4; 
0x1001845e  # or eax, 0x100334cc; mov dword ptr [0x100334c8], ebx; pop esi; pop ebx; pop ebp; ret; 
0x10024567  # or eax, 0x2083ffff; add byte ptr [ebx - 0x3d740036], al; pop esi; ret; 
0x1001adca  # or eax, 0x40000; ret; 
0x10023b52  # or eax, 0x5b5effff; pop ebp; ret; 
0x10015259  # or eax, 0x5e000000; ret; 
0x100218d1  # or eax, 0x5e5fffff; pop ebx; ret 4; 
0x1001fd25  # or eax, 0x6a000000; add byte ptr [ecx + 0x10036aa0], bh; call 0x20487; ret; 
0x1001fdda  # or eax, 0x6a000000; add byte ptr [ecx + 0x10036b30], bh; call 0x20487; ret; 
0x1001fcf8  # or eax, 0x6a000000; add byte ptr [ecx + 0x10036bc8], bh; call 0x20487; ret; 
0x10020f81  # or eax, 0x6a000000; add byte ptr [ecx + 0x10036d10], bh; call 0x2166b; ret; 
0x10020f54  # or eax, 0x6a000000; add byte ptr [ecx + 0x10036d68], bh; call 0x2166b; ret; 
0x10020fae  # or eax, 0x6a000000; add byte ptr [ecx + 0x10036df8], bh; call 0x2166b; ret; 
0x1001ae88  # or eax, 0x80000; ret; 
0x10019904  # or eax, 0xc4830000; or al, 0xff; or eax, 0x1003711c; and dword ptr [0x10037118], 0; ret; 
0x100237e8  # or eax, 0xffffffff; and edx, dword ptr [ecx + 4]; cmp edx, eax; je 0x237f4; xor eax, eax; ret; 
0x1001ba7f  # or eax, 0xffffffff; pop ebp; ret; 
0x10016b3a  # or eax, 0xffffffff; pop ebx; leave; ret; 
0x1001c144  # or eax, 0xffffffff; pop ebx; pop ebp; ret; 
0x10011ad6  # or eax, 0xffffffff; pop edi; pop ebx; leave; ret; 
0x10011c1c  # or eax, 0xffffffff; pop edi; pop esi; pop ebp; pop ebx; ret; 
0x100241c8  # or eax, 0xffffffff; pop edi; pop esi; pop ebp; ret; 
0x10020623  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret 4; 
0x10015666  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; leave; ret; 
0x10017a46  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x100206d1  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; ret 4; 
0x1001a645  # or eax, 0xffffffff; pop edi; pop esi; pop ebx; ret; 
0x10015f41  # or eax, 0xffffffff; pop edi; pop esi; ret; 
0x1001521f  # or eax, 0xffffffff; pop esi; pop ebx; pop ebp; ret; 
0x10011696  # or eax, 0xffffffff; pop esi; ret; 
0x1002031a  # or eax, 0xffffffff; ret 4; 
0x10016004  # or eax, 0xffffffff; ret; 
0x10014783  # or eax, dword ptr [ebx - 0x17afe340]; mov bl, 0xb; add byte ptr [eax], al; pop ecx; ret; 
0x100147d5  # or eax, dword ptr [ebx - 0x17afe340]; ret 0xb; 
0x10015450  # or eax, eax; leave; ret; 
0x100173f8  # or eax, eax; pop ebp; ret; 
0x1002033a  # or eax, eax; pop esi; ret; 
0x10012163  # or eax, ebp; cmp byte ptr [edx], dh; add byte ptr [eax], al; pop ecx; ret; 
0x100122a5  # or eax, ebp; div byte ptr [eax]; add byte ptr [eax], al; pop ecx; ret; 
0x1001aaf8  # or eax, ebp; mov dword ptr [0x59ffffa8], eax; ret; 
0x100134e1  # or eax, ebp; mov edx, 0x5900001e; ret; 
0x100114fb  # or eax, ecx; pop ebx; leave; ret; 
0x1001163b  # or eax, ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x1001c9d8  # or eax, edi; pop edi; pop ebx; pop esi; leave; ret; 
0x10021e65  # or ebp, dword ptr [eax + 0x50]; outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call dword ptr [0x10025078]; ret; 
0x10021e50  # or ebp, dword ptr [eax + 0x50]; outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call dword ptr [0x1002508c]; ret; 
0x1001312b  # or ebp, dword ptr [edx + 1]; pop eax; ret; 
0x10017ed0  # or ebp, eax; retf; aam 0xff; call ptr [ecx + 0x59]; ret; 
0x10020e06  # or ecx, dword ptr [esi]; add dl, byte ptr [eax]; ret; 
0x10016c78  # or ecx, eax; mov ecx, dword ptr [esp + 0xc]; jne 0x16c89; mov eax, dword ptr [esp + 4]; mul ecx; ret 0x10; 
0x1001e578  # or ecx, edi; pop edi; mov dword ptr [eax + 8], edx; mov dword ptr [eax], ecx; pop esi; ret; 
0x1001e54d  # or ecx, edx; pop edi; mov dword ptr [eax + 8], ecx; pop esi; ret; 
0x10023dbc  # or edi, edi; jno 0x23dc4; call 0xc81e; pop ecx; ret; 
0x1002456d  # or edx, 0xffffffff; mov eax, edx; pop esi; ret; 
0x10015d93  # or edx, dword ptr [eax - 0x18]; push es; ret; 
0x1001dfe1  # or esi, 2; mov eax, esi; pop esi; leave; ret; 
0x10014f22  # or esi, esi; ret; 
0x1001af28  # out 0x5f, eax; pop esi; pop ebx; ret; 
0x10015aea  # out dx, eax; pop esi; ret; 
0x10021e60  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; add dh, byte ptr [ebp + 0xb]; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x100223d7  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call 0x21e5d; pop esi; leave; ret; 
0x10021e68  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call dword ptr [0x10025078]; ret; 
0x10021e53  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call dword ptr [0x1002508c]; ret; 
0x1002256e  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; leave; ret; 
0x1001b88e  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; neg eax; sbb eax, eax; and eax, dword ptr [0x10036edc]; ret; 
0x1001b898  # outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; ret; 
0x10017c3a  # pop eax; adc byte ptr [esi - 0x77], bl; dec eax; add al, 0x5b; leave; ret; 
0x1002106c  # pop eax; insb byte ptr es:[edi], dx; add edx, dword ptr [eax]; call 0x212e9; ret; 
0x100137bb  # pop eax; leave; ret; 
0x1001e4c0  # pop eax; mov edx, dword ptr [esp + 0x10]; pop esi; mov dword ptr [edx], ecx; ret; 
0x10015c57  # pop eax; or byte ptr [ecx + 0x48891c58], cl; adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x1001710f  # pop eax; pop ebp; ret; 
0x10014874  # pop eax; pop edi; pop ebx; pop esi; ret; 
0x10012777  # pop eax; pop edi; pop esi; pop ebp; ret; 
0x10019841  # pop eax; pop edi; pop esi; pop ebx; leave; ret; 
0x10012a32  # pop eax; pop edi; pop esi; ret; 
0x10012f99  # pop eax; pop esi; ret; 
0x10012ca5  # pop eax; ret; 
0x10015c5a  # pop eax; sbb al, 0x89; dec eax; adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x10022a18  # pop ebp; adc al, 0xf; xchg ebp, eax; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x1001e58d  # pop ebp; adc byte ptr [ebx], dh; sar byte ptr [ebx], cl; ret 0xc756; 
0x100153e2  # pop ebp; cmp ax, 0x7a; ja 0x15440; add eax, 0xffe0; pop ebx; ret; 
0x10018b6c  # pop ebp; fadd qword ptr [ebx - 0x140003b3]; adc ch, byte ptr [edx + 1]; pop eax; ret; 
0x1001ea21  # pop ebp; fsub st(3), st(0); or ebp, dword ptr [edx + 1]; pop eax; ret; 
0x1001d401  # pop ebp; or al, 0x7e; mov ebp, 0x5d5b5e5f; ret; 
0x1001362c  # pop ebp; or byte ptr [edx + 9], ch; call 0x153a1; pop ecx; xor edi, edi; ret; 
0x1001781f  # pop ebp; pop ebx; jne 0x17829; mov eax, dword ptr [0x100333d4]; ret; 
0x10014254  # pop ebp; pop ebx; pop ecx; pop ecx; ret; 
0x10010251  # pop ebp; pop ebx; pop ecx; ret; 
0x10015844  # pop ebp; pop ebx; pop edi; ret; 
0x1001018d  # pop ebp; pop ebx; ret; 
0x10012f45  # pop ebp; pop ecx; pop ebx; leave; ret 0xc; 
0x1001d9e6  # pop ebp; ret 0x10; 
0x1001df25  # pop ebp; ret 0x758b; 
0x1002252e  # pop ebp; ret 0xc; 
0x1001a570  # pop ebp; ret 4; 
0x10010103  # pop ebp; ret; 
0x1001adc3  # pop ebp; test bh, 0x10; pop ebx; je 0x1adcf; or eax, 0x40000; ret; 
0x10014122  # pop ebx; inc dword ptr [eax]; pop ebp; ret; 
0x1001adc7  # pop ebx; je 0x1adcf; or eax, 0x40000; ret; 
0x1001ae52  # pop ebx; je 0x1ae58; or ah, 0x10; ret; 
0x10012f47  # pop ebx; leave; ret 0xc; 
0x1001d690  # pop ebx; leave; ret 4; 
0x1002158b  # pop ebx; leave; ret 8; 
0x1001060f  # pop ebx; leave; ret; 
0x10010504  # pop ebx; mov byte ptr [ecx + 7], dl; leave; ret; 
0x10021f66  # pop ebx; mov dword ptr fs:[0], ecx; leave; ret 4; 
0x10021f02  # pop ebx; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x1001ffd4  # pop ebx; mov dword ptr fs:[0], ecx; leave; ret; 
0x100203b5  # pop ebx; mov eax, dword ptr [ebp - 4]; pop edi; leave; ret 8; 
0x1001728c  # pop ebx; mov eax, dword ptr [ebp - 8]; pop edi; pop esi; leave; ret; 
0x1001a554  # pop ebx; mov esp, ebp; pop ebp; ret; 
0x1001d9e5  # pop ebx; pop ebp; ret 0x10; 
0x1002252d  # pop ebx; pop ebp; ret 0xc; 
0x10010eb9  # pop ebx; pop ebp; ret; 
0x10014255  # pop ebx; pop ecx; pop ecx; ret; 
0x10010252  # pop ebx; pop ecx; ret; 
0x10016bb6  # pop ebx; pop edi; pop ebp; ret; 
0x1001cf64  # pop ebx; pop edi; pop esi; ret; 
0x10015845  # pop ebx; pop edi; ret; 
0x1001be25  # pop ebx; pop esi; leave; ret; 
0x1001182f  # pop ebx; pop esi; ret; 
0x10016ca0  # pop ebx; ret 0x10; 
0x1001e2d3  # pop ebx; ret 4; 
0x1001018e  # pop ebx; ret; 
0x10013a03  # pop ecx; add dword ptr [ebx + 0x5b5e5fc7], ecx; pop ebp; ret; 
0x10015d9e  # pop ecx; and dword ptr [esi + 0xc], 0; mov eax, edi; pop edi; pop esi; ret; 
0x1001151b  # pop ecx; cmp eax, 0x5a; jg 0x11575; add eax, 0x20; pop ebx; ret; 
0x100113d8  # pop ecx; cmp eax, 0x7a; jg 0x11432; sub eax, 0x20; pop ebx; ret; 
0x1001acf4  # pop ecx; fldcw word ptr [ebp + 0xc]; mov eax, esi; pop esi; leave; ret; 
0x1002375d  # pop ecx; inc eax; ret 4; 
0x10010478  # pop ecx; je 0x10483; push eax; call 0x1037b; pop ecx; ret; 
0x1001231c  # pop ecx; je 0x12324; or eax, 0xffffffff; pop esi; ret; 
0x1001a5af  # pop ecx; je 0x1a5b6; push 1; pop eax; ret; 
0x10021b81  # pop ecx; jge 0x21b88; or eax, 0xffffffff; ret; 
0x100121d8  # pop ecx; jne 0x121b9; xor eax, eax; ret; 
0x10015481  # pop ecx; jne 0x1548a; mov ax, word ptr [ebp + 8]; leave; ret; 
0x10016bf7  # pop ecx; jne 0x16c00; mov ax, word ptr [ebp + 8]; leave; ret; 
0x1001797c  # pop ecx; jne 0x1796b; pop esi; pop edi; ret; 
0x1001c61b  # pop ecx; jne 0x1c623; push 1; pop eax; pop esi; ret; 
0x1001cd93  # pop ecx; jne 0x1cd9b; push 1; pop eax; pop esi; ret; 
0x10020eaf  # pop ecx; jne 0x20ea5; xor al, al; pop edi; pop esi; ret; 
0x1001acb1  # pop ecx; leave; ret; 
0x1001d226  # pop ecx; mov dword ptr [0x100369c4], ebx; xor eax, eax; pop ebx; leave; ret; 
0x1001b8ac  # pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x10023d39  # pop ecx; mov dword ptr [esi + 8], 1; mov eax, esi; pop edi; pop esi; ret 4; 
0x1001bfe4  # pop ecx; mov dword ptr [esi], eax; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; ret; 
0x10020e04  # pop ecx; mov eax, 0x10020e0b; ret; 
0x1001e2ce  # pop ecx; mov eax, ebx; pop edi; pop esi; pop ebx; ret 4; 
0x100168fb  # pop ecx; mov eax, edi; pop edi; pop esi; leave; ret; 
0x10015d24  # pop ecx; mov eax, edi; pop edi; pop esi; pop ebx; ret; 
0x1001a592  # pop ecx; mov eax, esi; pop ecx; pop esi; ret; 
0x1001f657  # pop ecx; mov eax, esi; pop edi; pop esi; pop ebp; ret; 
0x10021ba3  # pop ecx; mov eax, esi; pop esi; ret 4; 
0x10024681  # pop ecx; mov ecx, 0x5959ffff; ret; 
0x100138e1  # pop ecx; mov ecx, dword ptr [ebp + 0x10]; mov dword ptr [eax], ecx; leave; ret; 
0x10023778  # pop ecx; neg eax; ret 4; 
0x1001f5c1  # pop ecx; or eax, 0xffffffff; ret; 
0x10012f46  # pop ecx; pop ebx; leave; ret 0xc; 
0x100138e0  # pop ecx; pop ecx; mov ecx, dword ptr [ebp + 0x10]; mov dword ptr [eax], ecx; leave; ret; 
0x10023a93  # pop ecx; pop ecx; pop esi; pop ebp; ret; 
0x10010373  # pop ecx; pop ecx; pop esi; ret; 
0x100121af  # pop ecx; pop ecx; ret; 
0x1001c68b  # pop ecx; pop ecx; xor eax, eax; pop esi; ret; 
0x10011f41  # pop ecx; pop edi; pop esi; leave; ret; 
0x100128fe  # pop ecx; pop edi; pop esi; pop ebx; leave; ret; 
0x1001d959  # pop ecx; pop esi; jne 0x1d961; xor eax, eax; leave; ret; 
0x1001d8e1  # pop ecx; pop esi; leave; ret; 
0x10023a94  # pop ecx; pop esi; pop ebp; ret; 
0x1002396f  # pop ecx; pop esi; pop edi; pop ebx; leave; ret; 
0x10010374  # pop ecx; pop esi; ret; 
0x10012334  # pop ecx; pop esi; sbb eax, eax; ret; 
0x100130c7  # pop ecx; push 0; push dword ptr [0x10032d20]; call dword ptr [0x10025264]; pop esi; ret; 
0x1002044f  # pop ecx; rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x10; 
0x10020473  # pop ecx; rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x20; 
0x10010199  # pop ecx; ret; 
0x100143c5  # pop ecx; sbb eax, eax; add eax, 3; pop ebx; leave; ret; 
0x1002375a  # pop ecx; sbb eax, eax; pop ecx; inc eax; ret 4; 
0x10023775  # pop ecx; sbb eax, eax; pop ecx; neg eax; ret 4; 
0x1001c68c  # pop ecx; xor eax, eax; pop esi; ret; 
0x10023790  # pop ecx; xor ecx, ecx; test eax, eax; setg cl; mov eax, ecx; ret 4; 
0x10013635  # pop ecx; xor edi, edi; ret; 
0x1001959c  # pop edi; add dword ptr [eax], eax; add dh, dh; ret; 
0x1001f1a1  # pop edi; add edx, dword ptr [eax]; ret; 
0x1001c1d4  # pop edi; and eax, ecx; pop esi; pop ebp; ret; 
0x100203b9  # pop edi; leave; ret 8; 
0x10010e70  # pop edi; leave; ret; 
0x1001e54f  # pop edi; mov dword ptr [eax + 8], ecx; pop esi; ret; 
0x1001e57a  # pop edi; mov dword ptr [eax + 8], edx; mov dword ptr [eax], ecx; pop esi; ret; 
0x10022169  # pop edi; mov eax, esi; pop esi; pop ebx; ret 4; 
0x1001cd40  # pop edi; pop ebp; pop ebx; ret; 
0x10016bb7  # pop edi; pop ebp; ret; 
0x10011ad9  # pop edi; pop ebx; leave; ret; 
0x1001c9da  # pop edi; pop ebx; pop esi; leave; ret; 
0x1001182e  # pop edi; pop ebx; pop esi; ret; 
0x1001b9bf  # pop edi; pop ebx; ret; 
0x10020452  # pop edi; pop esi; leave; ret 0x10; 
0x10020476  # pop edi; pop esi; leave; ret 0x20; 
0x1002274b  # pop edi; pop esi; leave; ret 4; 
0x10011e0e  # pop edi; pop esi; leave; ret; 
0x10013f69  # pop edi; pop esi; mov dword ptr [0x100366dc], eax; pop ebx; leave; ret; 
0x10013ecc  # pop edi; pop esi; mov dword ptr [0x10038264], 1; pop ebx; ret; 
0x100221f2  # pop edi; pop esi; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x100204ec  # pop edi; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10020e5c  # pop edi; pop esi; mov dword ptr fs:[0], ecx; pop ebx; leave; ret 4; 
0x1001024f  # pop edi; pop esi; pop ebp; pop ebx; pop ecx; ret; 
0x1001018b  # pop edi; pop esi; pop ebp; pop ebx; ret; 
0x10012778  # pop edi; pop esi; pop ebp; ret; 
0x1001d68e  # pop edi; pop esi; pop ebx; leave; ret 4; 
0x10021589  # pop edi; pop esi; pop ebx; leave; ret 8; 
0x100106a2  # pop edi; pop esi; pop ebx; leave; ret; 
0x10021f64  # pop edi; pop esi; pop ebx; mov dword ptr fs:[0], ecx; leave; ret 4; 
0x1001a552  # pop edi; pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x1001d9e3  # pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x1002252b  # pop edi; pop esi; pop ebx; pop ebp; ret 0xc; 
0x10010eb7  # pop edi; pop esi; pop ebx; pop ebp; ret; 
0x1001e2d1  # pop edi; pop esi; pop ebx; ret 4; 
0x10011430  # pop edi; pop esi; pop ebx; ret; 
0x1002219b  # pop edi; pop esi; ret 4; 
0x10010e01  # pop edi; pop esi; ret; 
0x10015395  # pop edi; push dword ptr [esi]; call dword ptr [0x10025074]; pop esi; pop ebp; ret; 
0x10020ee7  # pop edi; ret 0xfffe; 
0x10010330  # pop edi; ret; 
0x10016bdd  # pop edx; add byte ptr [edi + 0x4c], dh; add eax, 0x20; leave; ret; 
0x1001151e  # pop edx; jg 0x11575; add eax, 0x20; pop ebx; ret; 
0x10021501  # pop es; add byte ptr [eax], al; mov ax, word ptr [eax]; pop esi; ret; 
0x10021c60  # pop es; add byte ptr [eax], al; pop esi; ret 8; 
0x1001fd05  # pop es; add byte ptr [eax], al; ret; 
0x1001d488  # pop es; and dword ptr [0x10036a04], 0; ret; 
0x1001330f  # pop es; call 0x13332; pop edi; ret; 
0x1001d486  # pop es; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x10010507  # pop es; leave; ret; 
0x1001bf60  # pop es; mov eax, 0x7fffffff; pop ebp; ret; 
0x100214f5  # pop es; mov eax, 0xffff; pop esi; ret; 
0x10014685  # pop es; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001a803  # pop es; mov eax, dword ptr [ebp + 8]; pop esi; pop edi; leave; ret; 
0x10021c5b  # pop es; mov ecx, esi; call 0x22394; pop esi; ret 8; 
0x10010e6f  # pop es; pop edi; leave; ret; 
0x10020f60  # pop es; pop es; add byte ptr [eax], al; ret; 
0x10013199  # pop es; push 1; pop eax; ret; 
0x10018c23  # pop es; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x10015633  # pop esi; add dword ptr [edi], ecx; xchg esp, eax; ret; 
0x1001fced  # pop esi; and eax, ecx; pop ebp; ret; 
0x100189ea  # pop esi; jne 0x189f2; sub eax, dword ptr [esp + 4]; ret; 
0x10018c21  # pop esi; jne 0x18c2b; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x1001bd24  # pop esi; jne 0x1bd2e; sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x1001d95a  # pop esi; jne 0x1d961; xor eax, eax; leave; ret; 
0x1001ed3e  # pop esi; jne 0x1ed46; sub eax, dword ptr [esp + 4]; ret; 
0x10010463  # pop esi; lea eax, [ecx + 1]; add dl, 0x30; mov byte ptr [ecx], dl; ret; 
0x10020453  # pop esi; leave; ret 0x10; 
0x10020477  # pop esi; leave; ret 0x20; 
0x1001d7a3  # pop esi; leave; ret 4; 
0x10011e0f  # pop esi; leave; ret; 
0x10016bb2  # pop esi; mov ax, bp; pop ebx; pop edi; pop ebp; ret; 
0x10013f6a  # pop esi; mov dword ptr [0x100366dc], eax; pop ebx; leave; ret; 
0x10013ecd  # pop esi; mov dword ptr [0x10038264], 1; pop ebx; ret; 
0x10017c3c  # pop esi; mov dword ptr [eax + 4], ecx; pop ebx; leave; ret; 
0x1001526b  # pop esi; mov dword ptr [eax], ecx; ret; 
0x1001e4c5  # pop esi; mov dword ptr [edx], ecx; ret; 
0x100212dd  # pop esi; mov dword ptr fs:[0], ecx; leave; ret 0x10; 
0x1002019c  # pop esi; mov dword ptr fs:[0], ecx; leave; ret 0xc; 
0x1002025b  # pop esi; mov dword ptr fs:[0], ecx; leave; ret 4; 
0x100201fb  # pop esi; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x100204ed  # pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10020e5d  # pop esi; mov dword ptr fs:[0], ecx; pop ebx; leave; ret 4; 
0x10021efe  # pop esi; mov ecx, dword ptr [ebp - 0xc]; pop ebx; mov dword ptr fs:[0], ecx; leave; ret 8; 
0x1001e641  # pop esi; mov word ptr [ebx + 0xa], ax; pop ebx; leave; ret; 
0x1001df76  # pop esi; mov word ptr [ecx], dx; pop ebx; leave; ret; 
0x10016a73  # pop esi; neg cx; sbb ecx, ecx; not ecx; and eax, ecx; ret; 
0x10014253  # pop esi; pop ebp; pop ebx; pop ecx; pop ecx; ret; 
0x10010250  # pop esi; pop ebp; pop ebx; pop ecx; ret; 
0x10015843  # pop esi; pop ebp; pop ebx; pop edi; ret; 
0x1001018c  # pop esi; pop ebp; pop ebx; ret; 
0x10012472  # pop esi; pop ebp; ret; 
0x10014121  # pop esi; pop ebx; inc dword ptr [eax]; pop ebp; ret; 
0x1001d68f  # pop esi; pop ebx; leave; ret 4; 
0x1002158a  # pop esi; pop ebx; leave; ret 8; 
0x1001060e  # pop esi; pop ebx; leave; ret; 
0x10021f65  # pop esi; pop ebx; mov dword ptr fs:[0], ecx; leave; ret 4; 
0x1001ffd3  # pop esi; pop ebx; mov dword ptr fs:[0], ecx; leave; ret; 
0x100203b4  # pop esi; pop ebx; mov eax, dword ptr [ebp - 4]; pop edi; leave; ret 8; 
0x1001a553  # pop esi; pop ebx; mov esp, ebp; pop ebp; ret; 
0x1001d9e4  # pop esi; pop ebx; pop ebp; ret 0x10; 
0x1002252c  # pop esi; pop ebx; pop ebp; ret 0xc; 
0x10010eb8  # pop esi; pop ebx; pop ebp; ret; 
0x10017cb3  # pop esi; pop ebx; ret 0x10; 
0x1001e2d2  # pop esi; pop ebx; ret 4; 
0x10011431  # pop esi; pop ebx; ret; 
0x1001a7fb  # pop esi; pop edi; leave; ret; 
0x10023970  # pop esi; pop edi; pop ebx; leave; ret; 
0x10013c0e  # pop esi; pop edi; ret; 
0x100131f5  # pop esi; ret 4; 
0x10021b6e  # pop esi; ret 8; 
0x10010375  # pop esi; ret; 
0x10019f0f  # pop esi; sar eax, 4; lea eax, [eax + ecx + 8]; ret; 
0x10012335  # pop esi; sbb eax, eax; ret; 
0x10016a38  # pop esi; sub eax, ecx; pop ebx; leave; ret; 
0x10022228  # pop esi; test eax, eax; jne 0x22232; call 0x23164; ret 8; 
0x1001d8f8  # pop esp; add edx, dword ptr [eax]; jb 0x1d8ea; push 1; pop eax; ret; 
0x100184ae  # pop esp; fdiv st(7), st(0); inc dword ptr [ebx - 0x3874eb3c]; pop edi; pop esi; ret; 
0x10010334  # pop ss; mov eax, dword ptr [esp + 8]; mov byte ptr [edi + 2], 0; pop edi; ret; 
0x1001032b  # pop ss; mov eax, dword ptr [esp + 8]; pop edi; ret; 
0x10017bbb  # popal; add al, 0; mov dword ptr [ecx], eax; ret; 
0x1001fde6  # popfd; push es; add byte ptr [eax], al; ret; 
0x10019d36  # popfd; ret 0x234a; 
0x1001b38d  # psllq mm7, mm7; inc dword ptr [ebx + 0x5e5f10c4]; pop ebx; pop ebp; ret; 
0x10017afc  # push -0x75; push esi; or al, 0xf6; ret 0x7582; 
0x1001b8a5  # push -3; call 0x1b4b4; pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x10013c08  # push 0; add byte ptr [ebx + 0x5f5e10c4], al; ret; 
0x1001326a  # push 0; call 0x13284; add esp, 0xc; ret; 
0x100229b7  # push 0; call 0x229c1; ret 4; 
0x100153ba  # push 0; call dword ptr [0x100252c0]; push 0xff; call dword ptr [0x1002527c]; ret; 
0x100137e1  # push 0; call eax; ret; 
0x1001fe3c  # push 0; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd29  # push 0; mov ecx, 0x10036aa0; call 0x20487; ret; 
0x1001fd9c  # push 0; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fdde  # push 0; mov ecx, 0x10036b30; call 0x20487; ret; 
0x1001fd58  # push 0; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x1001fcfc  # push 0; mov ecx, 0x10036bc8; call 0x20487; ret; 
0x10021069  # push 0; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021098  # push 0; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fe1  # push 0; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10020f85  # push 0; mov ecx, 0x10036d10; call 0x2166b; ret; 
0x10020f58  # push 0; mov ecx, 0x10036d68; call 0x2166b; ret; 
0x10021025  # push 0; mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x10020fb2  # push 0; mov ecx, 0x10036df8; call 0x2166b; ret; 
0x10013268  # push 0; push 0; call 0x13284; add esp, 0xc; ret; 
0x100130c8  # push 0; push dword ptr [0x10032d20]; call dword ptr [0x10025264]; pop esi; ret; 
0x10020ee1  # push 0x10002cb0; call 0xd14a; pop ecx; ret; 
0x100131f9  # push 0x100131b3; call dword ptr [0x10025278]; mov dword ptr [0x100366c4], eax; ret; 
0x1001fd36  # push 0x1001fd42; call 0xd14a; pop ecx; ret; 
0x1001fd65  # push 0x1001fd71; call 0xd14a; pop ecx; ret; 
0x1001fda9  # push 0x1001fdb5; call 0xd14a; pop ecx; ret; 
0x1001fdeb  # push 0x1001fdf7; call 0xd14a; pop ecx; ret; 
0x1001fe1a  # push 0x1001fe26; call 0xd14a; pop ecx; ret; 
0x1001fe49  # push 0x1001fe55; call 0xd14a; pop ecx; ret; 
0x10020eed  # push 0x10020ef9; call 0xd14a; pop ecx; ret; 
0x10020f0e  # push 0x10020f1a; call 0xd14a; pop ecx; ret; 
0x10020f38  # push 0x10020f44; call 0xd14a; pop ecx; ret; 
0x10020f65  # push 0x10020f71; call 0xd14a; pop ecx; ret; 
0x10020f92  # push 0x10020f9e; call 0xd14a; pop ecx; ret; 
0x10020fbf  # push 0x10020fcb; call 0xd14a; pop ecx; ret; 
0x10020fee  # push 0x10020ffa; call 0xd14a; pop ecx; ret; 
0x10021032  # push 0x1002103e; call 0xd14a; pop ecx; ret; 
0x10021076  # push 0x10021082; call 0xd14a; pop ecx; ret; 
0x100210a5  # push 0x100210b1; call 0xd14a; pop ecx; ret; 
0x1002253d  # push 0x10022549; call 0xd14a; pop ecx; ret; 
0x10013236  # push 0x1002b000; call 0x1333b; add esp, 0x10; ret; 
0x10013231  # push 0x1002b068; push 0x1002b000; call 0x1333b; add esp, 0x10; ret; 
0x10024668  # push 0x10036bc8; push dword ptr [ebp - 0x10]; call 0x1ffde; pop ecx; pop ecx; ret; 
0x10021e66  # push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10021e51  # push 0x10036e50; call dword ptr [0x1002508c]; ret; 
0x10019f58  # push 0x10; call 0x19e03; pop ecx; ret; 
0x10023721  # push 0x1b; call 0x153a1; pop ecx; pop esi; ret; 
0x10021e5f  # push 0x210036e; jne 0x21e71; push 0x10036e50; call dword ptr [0x10025078]; ret; 
0x10013335  # push 0x59000020; ret; 
0x10014680  # push 0x7510032d; pop es; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x10024132  # push 0x83ffff06; les ebx, ptr [eax]; mov eax, esi; pop esi; pop ebp; ret; 
0x10017ecf  # push 0xb; call 0x153a1; pop ecx; pop ecx; ret; 
0x10017eba  # push 0xb; call 0x153a1; pop ecx; ret; 
0x10013329  # push 0xd; call 0x15340; pop ecx; ret; 
0x10013332  # push 0xd; call 0x153a1; pop ecx; ret; 
0x10020f5b  # push 0xe810036d; pop es; pop es; add byte ptr [eax], al; ret; 
0x100153c2  # push 0xff; call dword ptr [0x1002527c]; ret; 
0x10012399  # push 1; call 0x123a2; pop ecx; ret; 
0x1002245c  # push 1; call 0x20ad0; ret; 
0x1001ba3b  # push 1; mov byte ptr [eax], cl; pop eax; pop ebp; ret; 
0x10019c5d  # push 1; mov dword ptr [0x100355ac], eax; pop eax; ret; 
0x10012f95  # push 1; mov dword ptr [esi], eax; pop eax; pop esi; ret; 
0x100202cc  # push 1; mov ecx, eax; call dword ptr [edx]; ret; 
0x100137b9  # push 1; pop eax; leave; ret; 
0x1001e4be  # push 1; pop eax; mov edx, dword ptr [esp + 0x10]; pop esi; mov dword ptr [edx], ecx; ret; 
0x10014872  # push 1; pop eax; pop edi; pop ebx; pop esi; ret; 
0x10012775  # push 1; pop eax; pop edi; pop esi; pop ebp; ret; 
0x10012a30  # push 1; pop eax; pop edi; pop esi; ret; 
0x1001aece  # push 1; pop eax; pop esi; ret; 
0x10012ca3  # push 1; pop eax; ret; 
0x10013277  # push 1; push 0; call 0x13284; add esp, 0xc; ret; 
0x1001fe3a  # push 1; push 0; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd9a  # push 1; push 0; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fd56  # push 1; push 0; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x10021067  # push 1; push 0; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021096  # push 1; push 0; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fdf  # push 1; push 0; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x10021023  # push 1; push 0; mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x10013266  # push 1; push 0; push 0; call 0x13284; add esp, 0xc; ret; 
0x10013275  # push 1; push 1; push 0; call 0x13284; add esp, 0xc; ret; 
0x1001b4ab  # push 2; call 0xd451; pop ecx; ret; 
0x10017a92  # push 2; push dword ptr [esp + 0x10]; call 0x1795d; add esp, 0x10; ret; 
0x1001fda0  # push 3; adc al, ch; in al, 2; add byte ptr [eax], al; ret; 
0x1001fd2d  # push 3; adc al, ch; push edx; pop es; add byte ptr [eax], al; ret; 
0x1001d48c  # push 3; adc byte ptr [eax], al; ret; 
0x1001d876  # push 3; adc byte ptr [ebx + 0x100369ec], ah; ret; 
0x1001d869  # push 3; adc byte ptr [ecx + eax], al; call dword ptr [0x100250b4]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x1001d6dd  # push 3; adc byte ptr [esi*2 + 0x4258307], al; push 3; adc byte ptr [eax], al; ret; 
0x10012162  # push 9; call 0x153a1; pop ecx; ret; 
0x1001362e  # push 9; call 0x153a1; pop ecx; xor edi, edi; ret; 
0x10020eef  # push cs; add dl, byte ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10020e07  # push cs; add dl, byte ptr [eax]; ret; 
0x10012ef1  # push cs; add ecx, edx; add eax, ecx; pop esi; ret; 
0x1001ba73  # push cs; call 0x15299; mov dword ptr [eax], 0x2a; or eax, 0xffffffff; pop ebp; ret; 
0x10022193  # push cs; call 0x20295; mov eax, esi; pop edi; pop esi; ret 4; 
0x1001383d  # push cs; inc esi; test cl, cl; jne 0x13836; pop esi; ret; 
0x1001427d  # push cs; mov al, byte ptr [eax + 0x1b]; mov byte ptr [esi + 1], al; pop esi; ret; 
0x10017b64  # push cs; pop esi; ret; 
0x10012fae  # push cs; push eax; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10021038  # push cs; sar esi, 0xff; pop ecx; ret; 
0x100134e4  # push ds; add byte ptr [eax], al; pop ecx; ret; 
0x10013ecb  # push ds; pop edi; pop esi; mov dword ptr [0x10038264], 1; pop ebx; ret; 
0x100130ca  # push dword ptr [0x10032d20]; call dword ptr [0x10025264]; pop esi; ret; 
0x100152ca  # push dword ptr [0x100331ec]; call esi; pop esi; ret; 
0x10019dec  # push dword ptr [0x10038144]; call dword ptr [0x10025254]; pop esi; ret; 
0x10014418  # push dword ptr [0x10038144]; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x100238b4  # push dword ptr [eax + 4]; push dword ptr [eax]; push dword ptr [esp + 0x10]; call 0x2410f; add esp, 0x10; ret; 
0x100153a7  # push dword ptr [eax*4 + 0x100331e8]; call dword ptr [0x10025078]; pop ebp; ret; 
0x1001e51a  # push dword ptr [eax]; call 0x1e4a8; add esp, 0xc; pop edi; pop esi; ret; 
0x100238b7  # push dword ptr [eax]; push dword ptr [esp + 0x10]; call 0x2410f; add esp, 0x10; ret; 
0x1001ac43  # push dword ptr [ebp + 0xc]; call dword ptr [0x100250e0]; pop esi; pop ebx; leave; ret; 
0x10013bdc  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x138e9; add esp, 0x10; pop ebp; ret; 
0x10013bb3  # push dword ptr [ebp + 0xc]; push dword ptr [ebp + 8]; call 0x13a0c; add esp, 0xc; pop ebp; ret; 
0x100173f5  # push dword ptr [ebp + 4]; or eax, eax; pop ebp; ret; 
0x10020337  # push dword ptr [ebp + 4]; or eax, eax; pop esi; ret; 
0x100157e9  # push dword ptr [ebp + 4]; xor eax, eax; pop edi; ret; 
0x1001544c  # push dword ptr [ebp + 5]; or ax, ax; leave; ret; 
0x10022f3c  # push dword ptr [ebp + 6]; or ax, 0xffff; leave; ret; 
0x100214f3  # push dword ptr [ebp + 7]; mov eax, 0xffff; pop esi; ret; 
0x10013bdf  # push dword ptr [ebp + 8]; call 0x138e9; add esp, 0x10; pop ebp; ret; 
0x10013bb6  # push dword ptr [ebp + 8]; call 0x13a0c; add esp, 0xc; pop ebp; ret; 
0x1002466d  # push dword ptr [ebp - 0x10]; call 0x1ffde; pop ecx; pop ecx; ret; 
0x100249c0  # push dword ptr [ebp - 0x10]; call 0xc81e; pop ecx; ret; 
0x10012a9d  # push dword ptr [ebp - 0x14]; call 0x12ad4; pop ecx; ret; 
0x1001aca9  # push dword ptr [ebp - 4]; call 0x1ae59; pop ecx; leave; ret; 
0x10019c02  # push dword ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x10010301  # push dword ptr [ebx]; ret 0x118b; 
0x10010297  # push dword ptr [ebx]; ret 0xc183; 
0x10023dbd  # push dword ptr [ecx + 4]; call 0xc81e; pop ecx; ret; 
0x100229b4  # push dword ptr [ecx + 8]; push 0; call 0x229c1; ret 4; 
0x100150d5  # push dword ptr [edi + eax - 0x75]; ret; 
0x10017afa  # push dword ptr [edx + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x1001cfe0  # push dword ptr [esi + 0x24]; call 0x120a0; add esp, 0x1c; pop esi; ret; 
0x1001cb5f  # push dword ptr [esi + 0xa8]; call 0x120a0; add esp, 0x2c; pop esi; ret; 
0x10024354  # push dword ptr [esi + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x10012fac  # push dword ptr [esi + ecx + 0x50]; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10015396  # push dword ptr [esi]; call dword ptr [0x10025074]; pop esi; pop ebp; ret; 
0x10012193  # push dword ptr [esp + 0x10]; call 0x17153; add esp, 0x10; ret; 
0x10016151  # push dword ptr [esp + 0x10]; call 0x17294; add esp, 0x10; ret; 
0x10017a94  # push dword ptr [esp + 0x10]; call 0x1795d; add esp, 0x10; ret; 
0x1001c010  # push dword ptr [esp + 0x10]; call 0x1ed60; add esp, 0x10; ret; 
0x1001ed53  # push dword ptr [esp + 0x10]; call 0x1f441; add esp, 0x10; ret; 
0x100238b9  # push dword ptr [esp + 0x10]; call 0x2410f; add esp, 0x10; ret; 
0x100108e7  # push dword ptr [esp + 0x14]; call 0x108f4; add esp, 0x14; ret; 
0x10016139  # push dword ptr [esp + 0xc]; call 0x12189; add esp, 0xc; ret; 
0x10013248  # push dword ptr [esp + 0xc]; call 0x13284; add esp, 0xc; ret; 
0x1001b1fd  # push dword ptr [esp + 0xc]; call 0x1b088; add esp, 0xc; ret; 
0x1001bff8  # push dword ptr [esp + 0xc]; call 0x1ed49; add esp, 0xc; ret; 
0x1001b1f9  # push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x1b088; add esp, 0xc; ret; 
0x1001bff4  # push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x1ed49; add esp, 0xc; ret; 
0x10010190  # push dword ptr [esp + 4]; call 0x10105; pop ecx; ret; 
0x10023cd3  # push dword ptr [esp + 4]; call 0x23bbf; pop ecx; ret; 
0x1001ad07  # push dword ptr [esp + 8]; call 0x1acc8; pop ecx; pop ecx; ret; 
0x1001bada  # push dword ptr [esp + 8]; call 0x1ba84; pop ecx; pop ecx; ret; 
0x10022c7d  # push dword ptr [esp + 8]; call 0x22ba7; mov dword ptr [esi], 0x10027aec; mov eax, esi; pop esi; ret 4; 
0x10023a9c  # push dword ptr [esp + 8]; call 0x23975; pop ecx; pop ecx; ret; 
0x10013317  # push dword ptr [esp + 8]; mov dword ptr [0x10036708], edi; call dword ptr [0x1002527c]; pop edi; ret; 
0x10023da0  # push dword ptr [esp + 8]; mov ecx, esi; call 0x23d48; mov eax, esi; pop esi; ret 4; 
0x10023a98  # push dword ptr [esp + 8]; push dword ptr [esp + 8]; call 0x23975; pop ecx; pop ecx; ret; 
0x10020333  # push eax; adc byte ptr [ebx + 0x475fff8], al; or eax, eax; pop esi; ret; 
0x1001d871  # push eax; add dl, byte ptr [eax]; mov dword ptr [0x10036a08], eax; mov dword ptr [0x100369ec], eax; ret; 
0x10013030  # push eax; add dl, byte ptr [eax]; mov eax, esi; pop edi; pop esi; ret; 
0x100153b1  # push eax; add dl, byte ptr [eax]; pop ebp; ret; 
0x10016107  # push eax; add dl, byte ptr [eax]; pop edi; pop esi; pop ebx; ret; 
0x1001539b  # push eax; add dl, byte ptr [eax]; pop esi; pop ebp; ret; 
0x1001ac49  # push eax; add dl, byte ptr [eax]; pop esi; pop ebx; leave; ret; 
0x10014777  # push eax; add dl, byte ptr [eax]; ret; 
0x1001d6d7  # push eax; add dl, byte ptr [eax]; test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7cb  # push eax; add dl, byte ptr [eax]; test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x1001036d  # push eax; call 0x10260; pop ecx; pop ecx; pop esi; ret; 
0x1001047b  # push eax; call 0x1037b; pop ecx; ret; 
0x1001f5bb  # push eax; call 0x15226; pop ecx; or eax, 0xffffffff; ret; 
0x10014768  # push eax; call 0x15340; pop ecx; ret; 
0x100147ba  # push eax; call 0x153a1; pop ecx; ret; 
0x1001bfb6  # push eax; call 0x15ac8; pop ecx; pop ecx; pop esi; ret; 
0x10019901  # push eax; call 0x1a6a0; add esp, 0xc; dec dword ptr [0x1003711c]; and dword ptr [0x10037118], 0; ret; 
0x1001b2bc  # push eax; call 0x1b1f4; add esp, 0x24; leave; ret; 
0x1001b317  # push eax; call 0x1b20a; add esp, 0x24; leave; ret; 
0x1001b2ea  # push eax; call 0x1b220; add esp, 0x24; leave; ret; 
0x1002012a  # push eax; call 0x21e72; mov eax, esi; pop edi; pop esi; ret; 
0x100231b6  # push eax; call 0x23d0b; mov dword ptr [esi], 0x10027b58; mov eax, esi; pop esi; ret 4; 
0x10024639  # push eax; call 0x2c40; pop ecx; ret; 
0x10024603  # push eax; call 0xc81e; pop ecx; ret; 
0x1001a567  # push eax; call 0xcb82; add esp, 8; pop ebp; ret 4; 
0x10016103  # push eax; call dword ptr [0x10025074]; pop edi; pop esi; pop ebx; ret; 
0x10014773  # push eax; call dword ptr [0x10025074]; ret; 
0x100147c5  # push eax; call dword ptr [0x10025078]; ret; 
0x10014655  # push eax; call dword ptr [0x1002516c]; pop esi; leave; ret; 
0x10012faf  # push eax; call dword ptr [0x1002526c]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x10012fc4  # push eax; mov al, 0x55; add edx, dword ptr [eax]; mov dword ptr [eax + 0x14], 1; ret; 
0x10021cd7  # push eax; mov ecx, esi; call 0x21ce7; mov eax, esi; pop esi; ret; 
0x100206fe  # push eax; mov ecx, esi; call dword ptr [edi + 8]; pop edi; pop esi; ret; 
0x10021e67  # push eax; outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call dword ptr [0x10025078]; ret; 
0x10021e52  # push eax; outsb dx, byte ptr [esi]; add edx, dword ptr [eax]; call dword ptr [0x1002508c]; ret; 
0x100229b3  # push eax; push dword ptr [ecx + 8]; push 0; call 0x229c1; ret 4; 
0x1001bff3  # push eax; push dword ptr [esp + 0xc]; push dword ptr [esp + 0xc]; call 0x1ed49; add esp, 0xc; ret; 
0x1001ad06  # push eax; push dword ptr [esp + 8]; call 0x1acc8; pop ecx; pop ecx; ret; 
0x10012c76  # push eax; push edi; call 0x12e6e; pop ecx; pop ecx; ret; 
0x100237d1  # push eax; ret; 
0x10012fc6  # push ebp; add edx, dword ptr [eax]; mov dword ptr [eax + 0x14], 1; ret; 
0x10019c61  # push ebp; add edx, dword ptr [eax]; pop eax; ret; 
0x10018c49  # push ebp; add edx, dword ptr [eax]; ret; 
0x100136ea  # push ebp; mov esi, dword ptr [ebp - 0x20]; push 9; call 0x153a1; pop ecx; ret; 
0x10022eed  # push ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x10014098  # push ebp; sbb byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x1001b932  # push ebx; call dword ptr [0x1003699c]; pop edi; pop esi; pop ebx; ret; 
0x10020ef3  # push ebx; ret 0xfffe; 
0x10014659  # push ecx; add dl, byte ptr [eax]; pop esi; leave; ret; 
0x100150fd  # push ecx; cld; ret; 
0x10020341  # push ecx; or byte ptr [eax], al; add byte ptr [edi], cl; mov dh, 0; pop esi; ret; 
0x10010506  # push ecx; pop es; leave; ret; 
0x100153e8  # push edi; add eax, 0xffe0; pop ebx; ret; 
0x10012c77  # push edi; call 0x12e6e; pop ecx; pop ecx; ret; 
0x1001133c  # push edi; call 0x1610e; add esp, 0x20; pop edi; pop esi; ret; 
0x1001302c  # push edi; call dword ptr [0x100250e8]; mov eax, esi; pop edi; pop esi; ret; 
0x10023772  # push edi; fcomp dword ptr [ecx + 0x1b]; rcr byte ptr [ecx - 9], 0xd8; ret 4; 
0x10020702  # push edi; or byte ptr [edi + 0x5e], bl; ret; 
0x10020302  # push edi; sbb eax, dword ptr [eax]; add byte ptr [ebx - 0x36a1a03a], cl; ret; 
0x10013201  # push edx; add dl, byte ptr [eax]; mov dword ptr [0x100366c4], eax; ret; 
0x10012fb3  # push edx; add dl, byte ptr [eax]; or dword ptr [0x10032d20], 0xffffffff; ret; 
0x100144cd  # push edx; add dl, byte ptr [eax]; pop edi; pop esi; ret; 
0x10013324  # push edx; add dl, byte ptr [eax]; pop edi; ret; 
0x100130d3  # push edx; add dl, byte ptr [eax]; pop esi; ret; 
0x100153bf  # push edx; add dl, byte ptr [eax]; push 0xff; call dword ptr [0x1002527c]; ret; 
0x10013213  # push edx; add dl, byte ptr [eax]; ret; 
0x10018d10  # push edx; add dl, byte ptr [eax]; test eax, eax; mov dword ptr [0x10037120], eax; jne 0x18d1d; ret; 
0x10014421  # push edx; add dl, byte ptr [eax]; xor eax, eax; ret; 
0x10016bda  # push edx; cmp ax, 0x5a; ja 0x16c2d; add eax, 0x20; leave; ret; 
0x1001fd31  # push edx; pop es; add byte ptr [eax], al; ret; 
0x100229b2  # push edx; push eax; push dword ptr [ecx + 8]; push 0; call 0x229c1; ret 4; 
0x10020ff4  # push edx; sar esi, 0xff; pop ecx; ret; 
0x1001ed59  # push es; add byte ptr [eax], al; add esp, 0x10; ret; 
0x1001fde7  # push es; add byte ptr [eax], al; ret; 
0x10015483  # push es; mov ax, word ptr [ebp + 8]; leave; ret; 
0x1001bfe6  # push es; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; ret; 
0x10017822  # push es; mov eax, dword ptr [0x100333d4]; ret; 
0x10018c37  # push es; mov eax, dword ptr [0x10037124]; ret; 
0x10022f3e  # push es; or ax, 0xffff; leave; ret; 
0x10012f98  # push es; pop eax; pop esi; ret; 
0x1001269a  # push es; pop edi; pop esi; pop ebx; leave; ret; 
0x10015d96  # push es; ret; 
0x10022d6f  # push es; sbb al, 0x7b; add dl, byte ptr [eax]; mov eax, esi; pop esi; ret 4; 
0x1001d8db  # push esi; call 0x10105; pop ecx; pop esi; leave; ret; 
0x100122e9  # push esi; call 0x123a2; pop ecx; pop esi; ret; 
0x10013c05  # push esi; call 0x1a6a0; add esp, 0x10; pop esi; pop edi; ret; 
0x10021b9d  # push esi; call 0xc81e; pop ecx; mov eax, esi; pop esi; ret 4; 
0x10017afe  # push esi; or al, 0xf6; ret 0x7582; 
0x100241ab  # push esp; add eax, dword ptr [eax]; add byte ptr [ebx], ah; ret 0xc483; 
0x1001e4c2  # push esp; and al, 0x10; pop esi; mov dword ptr [edx], ecx; ret; 
0x10015462  # push esp; cmp ax, 0x7a; ja 0x154b7; add eax, 0xffe0; leave; ret; 
0x10019df4  # push esp; push edx; add dl, byte ptr [eax]; pop esi; ret; 
0x1001e4a6  # push esp; ret; 
0x100113dd  # push esp; sub eax, 0x20; pop ebx; ret; 
0x100241c4  # push ss; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; pop ebp; ret; 
0x100238a4  # push ss; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; ret; 
0x1001ec57  # push ss; push 1; pop eax; ret; 
0x10023ce1  # pushal; add al, 0; and dword ptr [eax + 8], 0; mov dword ptr [eax], 0x10027b70; ret; 
0x10011ae3  # pushal; add byte ptr [ebx], 0x10; jb 0x11aec; xor eax, eax; ret; 
0x1001ad32  # pushal; and byte ptr [eax], al; mov dword ptr [eax + 0x24], 0xffff; pop esi; ret; 
0x10023ce5  # pushal; or byte ptr [eax], al; mov dword ptr [eax], 0x10027b70; ret; 
0x1001b935  # pushfd; imul eax, dword ptr [ebx], 0x5b5e5f10; ret; 
0x1001df1a  # rcl byte ptr [eax - 0x18], 0xa4; adc al, 0; add byte ptr [ebx + 0x5d8bc055], cl; ret 0x758b; 
0x1001cfdc  # rcl byte ptr [eax - 1], 0xff; push dword ptr [esi + 0x24]; call 0x120a0; add esp, 0x1c; pop esi; ret; 
0x10018d6c  # rcl byte ptr [ebx + ebp*8], 0xe8; xor eax, eax; ret; 
0x100153be  # rcl byte ptr [edx + 2], 0x10; push 0xff; call dword ptr [0x1002527c]; ret; 
0x100147b8  # rcr byte ptr [eax + edx*2], 0xe8; loope 0x147c9; add byte ptr [eax], al; pop ecx; ret; 
0x10014785  # rcr byte ptr [eax + edx*2], 0xe8; mov bl, 0xb; add byte ptr [eax], al; pop ecx; ret; 
0x100147d7  # rcr byte ptr [eax + edx*2], 0xe8; ret 0xb; 
0x10014766  # rcr byte ptr [eax + edx*2], 0xe8; ror byte ptr [ebx], cl; add byte ptr [eax], al; pop ecx; ret; 
0x1001a5ae  # rcr byte ptr [ecx + 0x74], 4; push 1; pop eax; ret; 
0x1001231b  # rcr byte ptr [ecx + 0x74], 5; or eax, 0xffffffff; pop esi; ret; 
0x10010477  # rcr byte ptr [ecx + 0x74], 8; push eax; call 0x1037b; pop ecx; ret; 
0x100121d7  # rcr byte ptr [ecx + 0x75], 0xde; xor eax, eax; ret; 
0x10015480  # rcr byte ptr [ecx + 0x75], 6; mov ax, word ptr [ebp + 8]; leave; ret; 
0x10021b80  # rcr byte ptr [ecx + 0x7d], 4; or eax, 0xffffffff; ret; 
0x1001bfe3  # rcr byte ptr [ecx - 0x77], 6; mov dword ptr [esi + 8], eax; mov dword ptr [esi + 4], eax; pop esi; ret; 
0x10023777  # rcr byte ptr [ecx - 9], 0xd8; ret 4; 
0x1001c1d3  # rcr byte ptr [edi + 0x23], 0xc1; pop esi; pop ebp; ret; 
0x1001cd3f  # rcr byte ptr [edi + 0x5d], 0x5b; ret; 
0x10016836  # rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x10022a1c  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x1001fa47  # rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x10016c68  # rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x1001be8b  # rcr byte ptr [edi + 0x5e], 0x5d; pop ebx; pop ecx; ret; 
0x100155f7  # rcr byte ptr [edi + 0x5e], 0x5d; pop ebx; ret; 
0x1001fcec  # rcr byte ptr [esi + 0x23], 0xc1; pop ebp; ret; 
0x100112b8  # rcr byte ptr [esi + 0x5b], 0x5d; ret; 
0x100164f4  # rcr byte ptr [esi + 0x5b], 0xc9; ret; 
0x1001be24  # rcr dword ptr [ebx + 0x5e], 0xc9; ret; 
0x10010503  # rcr dword ptr [ebx - 0x78], cl; push ecx; pop es; leave; ret; 
0x10024555  # rcr dword ptr [edi + 0x5b], cl; pop esi; ret; 
0x1001163c  # rcr dword ptr [edi + 0x5e], 0x5b; leave; ret; 
0x1001e0ee  # rcr dword ptr [edi + 0x5e], 0x5b; ret; 
0x10023df7  # rcr dword ptr [edi + 0x5e], cl; pop ebx; ret; 
0x10016bb1  # rcr dword ptr [esi + 0x66], cl; mov eax, ebp; pop ebx; pop edi; pop ebp; ret; 
0x10020450  # rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x10; 
0x10020474  # rep movsd dword ptr es:[edi], dword ptr [esi]; pop edi; pop esi; leave; ret 0x20; 
0x1001714c  # rep stosd dword ptr es:[edi], eax; mov eax, esi; pop edi; pop esi; ret; 
0x1001714b  # rep stosw word ptr es:[edi], ax; mov eax, esi; pop edi; pop esi; ret; 
0x10023913  # repz ret 0x4e8b; or al, 0x83; les ecx, ptr [esi + esi*8]; ret; 
0x10010319  # ret 0; 
0x10019a73  # ret 0x1000; 
0x10016c86  # ret 0x10; 
0x1001ac63  # ret 0x1174; 
0x10010303  # ret 0x118b; 
0x1001e46d  # ret 0x1274; 
0x1001a247  # ret 0x1373; 
0x10015e93  # ret 0x1873; 
0x1001a266  # ret 0x1989; 
0x1001dc10  # ret 0x1de9; 
0x10020479  # ret 0x20; 
0x10019d37  # ret 0x234a; 
0x100128ba  # ret 0x24eb; 
0x1001c2e1  # ret 0x3b04; 
0x1001408c  # ret 0x3eb; 
0x1001472b  # ret 0x4120; 
0x10010f45  # ret 0x44f6; 
0x10018391  # ret 0x4503; 
0x1001a3e3  # ret 0x473b; 
0x10023914  # ret 0x4e8b; 
0x1001409c  # ret 0x5589; 
0x10016adb  # ret 0x558b; 
0x100189f3  # ret 0x55c3; 
0x1001e274  # ret 0x5653; 
0x10011f78  # ret 0x6620; 
0x1001ed47  # ret 0x6ac3; 
0x1001b801  # ret 0x7401; 
0x1001b81c  # ret 0x7402; 
0x10017b01  # ret 0x7582; 
0x1001df26  # ret 0x758b; 
0x1001b558  # ret 0x870f; 
0x10010468  # ret 0x8830; 
0x10018dc4  # ret 0x8901; 
0x10017e03  # ret 0x893c; 
0x10018c2c  # ret 0xa1c3; 
0x10018456  # ret 0xa341; 
0x1001f619  # ret 0xb60f; 
0x10016a5f  # ret 0xb74; 
0x100147db  # ret 0xb; 
0x10023ed8  # ret 0xc103; 
0x10019f0e  # ret 0xc15e; 
0x10010299  # ret 0xc183; 
0x10024571  # ret 0xc35e; 
0x100241b0  # ret 0xc483; 
0x1001e592  # ret 0xc756; 
0x10012f49  # ret 0xc; 
0x1001f1d4  # ret 0xca23; 
0x1001e756  # ret 0xcf8b; 
0x10017cdc  # ret 0xd233; 
0x10023ea6  # ret 0xdbe9; 
0x1001467a  # ret 0xe0c1; 
0x10018452  # ret 0xe7c; 
0x10023b92  # ret 0xe8b; 
0x1001d3cd  # ret 0xf08b; 
0x10016a6a  # ret 0xf575; 
0x1001ae4a  # ret 0xf75e; 
0x10010f08  # ret 0xf883; 
0x1001d9af  # ret 0xf8d1; 
0x10019f92  # ret 0xf93b; 
0x1001f99a  # ret 0xfed8; 
0x1001d5fa  # ret 0xff20; 
0x10022ef1  # ret 0xff52; 
0x1001cada  # ret 0xff55; 
0x100172da  # ret 0xffae; 
0x100185d3  # ret 0xffcc; 
0x1001dc6d  # ret 0xfffe; 
0x100169f4  # ret 1; 
0x1002259f  # ret 2; 
0x100131f6  # ret 4; 
0x10020204  # ret 8; 
0x10010104  # ret; 
0x10015279  # retf 0; add byte ptr [edi + 0xd], dh; call 0x15299; mov dword ptr [eax], 8; pop esi; ret; 
0x1002456e  # retf 0x8bff; ret 0xc35e; 
0x10023ea3  # retf 0x8bff; ret 0xdbe9; 
0x10012ef3  # retf 0xc103; pop esi; ret; 
0x100248a2  # retf 0xffff; ret; 
0x10017ed2  # retf; aam 0xff; call ptr [ecx + 0x59]; ret; 
0x10021279  # retf; add byte ptr [eax], al; add cl, cl; ret; 
0x10020fc0  # retf; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x1001a5ac  # rol byte ptr [ebp + 0x47459c0], 1; push 1; pop eax; ret; 
0x1001334d  # rol byte ptr [ebx - 0x1214fb3a], 1; pop esi; ret; 
0x10019d31  # rol byte ptr [ebx - 0x62f0ef03], cl; ret 0x234a; 
0x100143c9  # rol byte ptr [ebx], 0x5b; leave; ret; 
0x10011cc9  # rol byte ptr [ebx], 0xc6; pop esi; ret; 
0x1001f993  # rol byte ptr [ecx + edx*2], 0x89; inc ebp; adc al, ch; ret 0xfed8; 
0x1001838e  # rol byte ptr [edi], 0x2b; ret 0x4503; 
0x1001afcd  # rol byte ptr [edx + ecx*2], 0x75; cmc; pop esi; ret; 
0x1001d79c  # rol cl, 1; call 0x1e25aa5; pop esi; leave; ret 4; 
0x1001d859  # rol cl, 1; call 0x1e25b62; pop esi; leave; ret 4; 
0x10023cdf  # rol dword ptr [ebx - 0x7cfffba0], 0x60; or byte ptr [eax], al; mov dword ptr [eax], 0x10027b70; ret; 
0x10010307  # rol dword ptr [ecx + ebp*4], 0; add dword ptr [ecx], eax; xor dword ptr [ecx - 0x7c], 0x843474d2; div byte ptr [edi - 9]; ret 0; 
0x100243bf  # rol dword ptr [edx], 0x89; push cs; pop esi; ret; 
0x10010501  # rol dword ptr [edx], 0xd3; pop ebx; mov byte ptr [ecx + 7], dl; leave; ret; 
0x10014761  # rol ecx, 0xf8; add eax, 0x501cc083; call 0x15340; pop ecx; ret; 
0x100147b3  # rol ecx, 0xf8; add eax, 0x501cc083; call 0x153a1; pop ecx; ret; 
0x1002166c  # rol edi, 0; aam 0x79; add dl, byte ptr [eax]; ret 4; 
0x10011cc3  # ror byte ptr [eax + 0x25660a], 0xc0; add eax, esi; pop esi; ret; 
0x1001611c  # ror byte ptr [ebx - 0x7e9f72f4], 3; adc byte ptr [ebp + 0x500c8144], cl; call dword ptr [0x10025078]; ret; 
0x1001476a  # ror byte ptr [ebx], cl; add byte ptr [eax], al; pop ecx; ret; 
0x10022224  # ror byte ptr [ecx - 0x7aa1e3ba], 0xc0; jne 0x22232; call 0x23164; ret 8; 
0x1001984d  # ror byte ptr [edi], 0x84; ret; 
0x1001f8bd  # ror byte ptr [edi], 0x85; ret 0; 
0x100104ec  # ror dword ptr [eax - 0x866fbaf], cl; call ptr [edi + 2]; ret; 
0x100104d5  # ror dword ptr [eax - 0x866feaf], cl; inc dword ptr [edx]; ret; 
0x1002489e  # ror dword ptr [eax], 0xe9; in eax, dx; retf 0xffff; ret; 
0x100248c2  # ror dword ptr [eax], 0xe9; leave; retf 0xffff; ret; 
0x1001c0ac  # ror dword ptr [ebx + 0x38448d06], cl; add ebx, ebp; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; ret; 
0x100225ad  # ror dword ptr [ebx - 0x769b0bb3], 0xd; add byte ptr [eax], al; add byte ptr [eax], al; leave; ret; 
0x1001383b  # ror dword ptr [edx - 0x367bb9f2], 0x75; pop esi; ret; 
0x100138a1  # sahf; jb 0x138a8; push 1; pop eax; ret; 
0x100137b6  # sahf; jbe 0x137be; push 1; pop eax; leave; ret; 
0x10016fff  # sahf; jecxz 0x17001; inc dword ptr [ebx - 0x3974eb3c]; pop esi; ret; 
0x10020f93  # sahf; lar edx, word ptr [eax]; call 0xd14a; pop ecx; ret; 
0x1001a48d  # sal bh, 0x5f; pop esi; pop ebx; leave; ret; 
0x10018c43  # sal bh, 0xd0; and eax, dword ptr [0x100355ac]; ret; 
0x1001bf25  # sal bh, 0xd0; and eax, esi; pop esi; pop ebx; pop ebp; ret; 
0x100202c7  # sal byte ptr [eax + ecx - 0x75], 0x10; push 1; mov ecx, eax; call dword ptr [edx]; ret; 
0x1001f858  # sal byte ptr [eax + edx + 0x50], 0x83; ret; 
0x10014415  # sal byte ptr [ebp + 0xf], 0xff; xor eax, 0x10038144; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x1001ba22  # sal byte ptr [ebp + 2], 0x5d; ret; 
0x100113af  # sal byte ptr [ebp + 2], 0xc9; ret; 
0x1001148b  # sal byte ptr [ebp + 4], 0x8b; ret; 
0x10023dcb  # sal byte ptr [ebp + 5], 0xb8; js 0x23e4c; add dl, byte ptr [eax]; ret; 
0x1002222a  # sal byte ptr [ebp + 5], 0xe8; xor cl, byte ptr [edi]; add byte ptr [eax], al; ret 8; 
0x100137de  # sal byte ptr [ebp + eax + 0x6a], 0; call eax; ret; 
0x1001223d  # sal byte ptr [ebp + ebp*2 - 0x17], 0x86; add byte ptr [eax], al; add byte ptr [edx + 9], ch; call 0x153a1; pop ecx; ret; 
0x1001cd5f  # sal byte ptr [ebp - 0x13], 0x5e; ret; 
0x10016c64  # sal byte ptr [ebp - 0x22], cl; xor eax, eax; pop edi; pop esi; pop ebx; ret; 
0x10015d91  # sal byte ptr [ebx + ecx + 0x50], 0xe8; push es; ret; 
0x10015828  # sal byte ptr [ebx + edx + 0x50], 0x83; ret; 
0x10017af5  # sal byte ptr [edi + ebp*2 - 0x7d], 0xf8; push dword ptr [edx + ebp*2 - 0x75]; push esi; or al, 0xf6; ret 0x7582; 
0x1001d3c3  # sal byte ptr [edi + edi - 0x75], 0x45; or al, 3; ret; 
0x1001a65f  # sal byte ptr [edx + eax + 0x33], 0xf6; mov eax, esi; pop esi; ret; 
0x10010311  # sal byte ptr [esp + esi - 0x7c], cl; div byte ptr [edi - 9]; ret 0; 
0x1001e2ca  # sal dword ptr [eax - 1], cl; call ptr [ecx - 0x75]; ret; 
0x100218ef  # sal dword ptr [ebx + 5], 0x66; mov eax, dword ptr [eax]; pop esi; ret; 
0x100206ee  # sal dword ptr [ebx + 5], 0xf; mov dh, 0; pop esi; ret; 
0x10010eb4  # sal dword ptr [edx - 0xe], 0x5f; pop esi; pop ebx; pop ebp; ret; 
0x1001fce8  # sal edi, 0xd8; sbb eax, eax; pop esi; and eax, ecx; pop ebp; ret; 
0x100152d1  # salc; pop esi; ret; 
0x100152c9  # salc; push dword ptr [0x100331ec]; call esi; pop esi; ret; 
0x1001613f  # sar bh, 0xff; add esp, 0xc; ret; 
0x10018157  # sar bh, cl; call ptr [ecx + 0x5f]; pop esi; pop ebx; leave; ret; 
0x10018177  # sar bh, cl; inc dword ptr [ebx - 0x3974f33c]; pop esi; ret; 
0x10022f65  # sar byte ptr [eax + 0xffff], 0x7c; add al, 0xf; mov bh, 0x45; dec cl; ret; 
0x1001b556  # sar byte ptr [ebx], cl; ret 0x870f; 
0x1001e590  # sar byte ptr [ebx], cl; ret 0xc756; 
0x10022eeb  # sar byte ptr [ecx], cl; push ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x10014096  # sar byte ptr [ecx], cl; push ebp; sbb byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x100150a5  # sar byte ptr [edi - 0x1d], 0x5f; pop esi; ret; 
0x100150dc  # sar byte ptr [edi - 0x1e], 0x5f; pop esi; pop ebx; ret; 
0x1001bf69  # sar dh, 0x5d; ret; 
0x1002107d  # sar dh, 0xff; pop ecx; ret; 
0x10018c28  # sar eax, 1; ret; 
0x100157cc  # sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x10019f10  # sar eax, 4; lea eax, [eax + ecx + 8]; ret; 
0x10014762  # sar eax, 5; add eax, 0x1c; push eax; call 0x15340; pop ecx; ret; 
0x100147b4  # sar eax, 5; add eax, 0x1c; push eax; call 0x153a1; pop ecx; ret; 
0x10011af1  # sar ecx, 5; lea eax, [eax + eax*8]; mov ecx, dword ptr [ecx*4 + 0x10038160]; mov al, byte ptr [ecx + eax*4 + 4]; and eax, 0x40; ret; 
0x10020f6c  # sar esi, 0xff; pop ecx; ret; 
0x10012c9f  # sbb al, 0; jne 0x12ca7; push 1; pop eax; ret; 
0x10022457  # sbb al, 0; pop edi; pop esi; ret; 
0x100186d3  # sbb al, 0x3b; ret; 
0x10014767  # sbb al, 0x50; call 0x15340; pop ecx; ret; 
0x100147b9  # sbb al, 0x50; call 0x153a1; pop ecx; ret; 
0x1001cfea  # sbb al, 0x5e; ret; 
0x10022227  # sbb al, 0x5e; test eax, eax; jne 0x22232; call 0x23164; ret 8; 
0x10022d70  # sbb al, 0x7b; add dl, byte ptr [eax]; mov eax, esi; pop esi; ret 4; 
0x10021c82  # sbb al, 0x83; add dh, bh; mov eax, dword ptr [ecx + 0x1c]; mov eax, dword ptr [eax]; ret; 
0x100113ad  # sbb al, 0x85; sal byte ptr [ebp + 2], 0xc9; ret; 
0x10015d8f  # sbb al, 0x85; sal byte ptr [ebx + ecx + 0x50], 0xe8; push es; ret; 
0x100154aa  # sbb al, 0x85; shl byte ptr [esi - 0x75], 0x45; or byte ptr [esp + eax + 0x66], dh; mov eax, dword ptr [ebp - 2]; leave; ret; 
0x10021d76  # sbb al, 0x89; adc byte ptr [ebx + 0x10892c41], cl; ret; 
0x10015c5b  # sbb al, 0x89; dec eax; adc byte ptr [esi + 0x5b], bl; leave; ret; 
0x10021c93  # sbb al, 0x8b; add dword ptr [ebp + 0x11890250], ecx; ret; 
0x100122a0  # sbb al, 0x8b; jne 0x122ac; push 9; call 0x153a1; pop ecx; ret; 
0x1001bcd2  # sbb al, 0x8b; ret; 
0x10021c72  # sbb al, 0x8d; or al, 0x12; add dword ptr [eax], ecx; ret 4; 
0x1001b81a  # sbb al, 0xf6; ret 0x7402; 
0x10017be9  # sbb al, 0xf6; ret; 
0x10023725  # sbb al, 0xff; call ptr [ecx + 0x5e]; ret; 
0x1001f5d0  # sbb al, ch; ret; 
0x10012a9c  # sbb bh, bh; jne 0x12a8c; call 0x12ad4; pop ecx; ret; 
0x1001d2c3  # sbb bh, byte ptr [eax]; sbb dword ptr [esi + edx + 0x3b], esi; ret; 
0x1001a566  # sbb byte ptr [eax - 0x18], dl; adc eax, 0x83ffff26; les ecx, ptr [eax]; pop ebp; ret 4; 
0x1001489b  # sbb byte ptr [eax], al; and dword ptr [esi], 0; and dword ptr [esi + 8], 0; pop ecx; pop esi; ret; 
0x1001a159  # sbb byte ptr [ebp + 0x10081], cl; add bl, ch; add dh, byte ptr [ebx]; rcr byte ptr [edi + 0x5e], 0x5b; leave; ret; 
0x10024551  # sbb byte ptr [ebx + 0x5fd38bc7], cl; pop ebx; pop esi; ret; 
0x1001d8f7  # sbb byte ptr [ebx + eax + 0x10], 0x72; in eax, dx; push 1; pop eax; ret; 
0x1001b931  # sbb byte ptr [ebx - 1], dl; adc eax, 0x1003699c; pop edi; pop esi; pop ebx; ret; 
0x10022e4c  # sbb byte ptr [ebx], bh; ret; 
0x10022e42  # sbb byte ptr [ebx], dh; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret; 
0x1002445c  # sbb byte ptr [ebx], dh; rcr byte ptr [esi + 0x5b], 0x5d; ret; 
0x10019912  # sbb byte ptr [ecx + 3], dh; adc byte ptr [eax], al; ret; 
0x10019093  # sbb byte ptr [ecx + 3], dh; adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x10022e19  # sbb byte ptr [edi + 0x5e], bl; pop ebx; pop ebp; ret; 
0x1001d2cd  # sbb byte ptr [edi + eax - 0x18], dh; xor eax, 0xeb000001; sbb ebp, eax; mov ecx, 0xeb000003; adc al, 0x3b; ret; 
0x10014099  # sbb byte ptr [edi], cl; xchg esp, eax; ret 0x5589; 
0x10017bb2  # sbb byte ptr [edx], al; add byte ptr [eax], al; add byte ptr [ebx + 0x61830841], cl; add al, 0; mov dword ptr [ecx], eax; ret; 
0x1001427b  # sbb cl, byte ptr [eax + 0x1b408a0e]; mov byte ptr [esi + 1], al; pop esi; ret; 
0x10020f0f  # sbb cl, byte ptr [edi]; add dl, byte ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10012c9a  # sbb dword ptr [ebp + 0xa], esi; cmp dword ptr [eax + 0x1c], 0; jne 0x12ca7; push 1; pop eax; ret; 
0x100246c1  # sbb dword ptr [ecx + 0x5959ffff], edi; ret; 
0x1001d2c5  # sbb dword ptr [esi + edx + 0x3b], esi; ret; 
0x10018464  # sbb eax, 0x100334c8; pop esi; pop ebx; pop ebp; ret; 
0x1001d228  # sbb eax, 0x100369c4; xor eax, eax; pop ebx; leave; ret; 
0x10015251  # sbb eax, 0x42e8; add bh, al; add byte ptr [0x5e000000], cl; ret; 
0x10021fc9  # sbb eax, 0x4d8b0000; hlt; pop esi; mov dword ptr fs:[0], ecx; leave; ret; 
0x10013311  # sbb eax, 0x5f000000; ret; 
0x1002012d  # sbb eax, 0xc68b0000; pop edi; pop esi; ret; 
0x1001ffe9  # sbb eax, 0xdff0000; dec esp; bound eax, qword ptr [ebx]; adc byte ptr [ebp - 0x6bf003b3], cl; ret; 
0x1001215c  # sbb eax, 0xeb0875ff; or ch, byte ptr [edx + 9]; call 0x153a1; pop ecx; ret; 
0x10020303  # sbb eax, dword ptr [eax]; add byte ptr [ebx - 0x36a1a03a], cl; ret; 
0x100202b5  # sbb eax, dword ptr [eax]; add byte ptr [esi - 0x37], bl; ret; 
0x100143c6  # sbb eax, eax; add eax, 3; pop ebx; leave; ret; 
0x1001b893  # sbb eax, eax; and eax, dword ptr [0x10036edc]; ret; 
0x10011cc2  # sbb eax, eax; mov byte ptr [edx], cl; and ax, 0xc000; add eax, esi; pop esi; ret; 
0x10018c42  # sbb eax, eax; not eax; and eax, dword ptr [0x100355ac]; ret; 
0x1002375b  # sbb eax, eax; pop ecx; inc eax; ret 4; 
0x10023776  # sbb eax, eax; pop ecx; neg eax; ret 4; 
0x1001c1d2  # sbb eax, eax; pop edi; and eax, ecx; pop esi; pop ebp; ret; 
0x1001fceb  # sbb eax, eax; pop esi; and eax, ecx; pop ebp; ret; 
0x10012336  # sbb eax, eax; ret; 
0x1001d2d6  # sbb ebp, eax; mov ecx, 0xeb000003; adc al, 0x3b; ret; 
0x10016a77  # sbb ecx, ecx; not ecx; and eax, ecx; ret; 
0x1002389f  # sbb edi, edi; inc edi; add byte ptr [esi], dl; add byte ptr [eax], al; add byte ptr [ebx + 0x5e5fffc8], al; ret; 
0x10017d2e  # sbb edx, 0; pop ebx; ret 0x10; 
0x10022ee9  # sbb esi, dword ptr [ebx]; sar byte ptr [ecx], cl; push ebp; or byte ptr [edi], cl; xchg ebp, eax; ret 0xff52; 
0x10014a93  # scasb al, byte ptr es:[edi]; add eax, 0xc4830000; or al, 0xe9; insd dword ptr es:[edi], dx; add eax, 0xbe0f0000; ret; 
0x10020f98  # scasb al, byte ptr es:[edi]; sar esi, 0xff; pop ecx; ret; 
0x1001eeee  # scasb al, byte ptr es:[edi]; xor edi, edi; inc dword ptr [ebx - 0x3974e73c]; pop esi; pop ebp; ret; 
0x10023795  # setg cl; mov eax, ecx; ret 4; 
0x10022a1a  # setne al; pop edi; pop esi; pop ebx; pop ebp; ret 0x10; 
0x10012ec9  # setne al; ret; 
0x10014771  # shl byte ptr [eax], 0x50; call dword ptr [0x10025074]; ret; 
0x100147c3  # shl byte ptr [eax], 0x50; call dword ptr [0x10025078]; ret; 
0x10011522  # shl byte ptr [eax], 0x5b; ret; 
0x10016be2  # shl byte ptr [eax], 0xc9; ret; 
0x1001bad1  # shl byte ptr [ebx], 0xc1; leave; ret; 
0x10018c45  # shl byte ptr [ebx], 1; add eax, 0x100355ac; ret; 
0x100154ac  # shl byte ptr [esi - 0x75], 0x45; or byte ptr [esp + eax + 0x66], dh; mov eax, dword ptr [ebp - 2]; leave; ret; 
0x1001ae7d  # shl dword ptr [eax], 0x74; add cl, byte ptr [ecx + eax]; test cl, 2; je 0x1ae8d; or eax, 0x80000; ret; 
0x1001467b  # shl eax, 3; cmp ecx, dword ptr [eax + 0x10032d68]; jne 0x1468d; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x100114f8  # shl eax, 8; or eax, ecx; pop ebx; leave; ret; 
0x1001e54b  # shl ecx, 1; or ecx, edx; pop edi; mov dword ptr [eax + 8], ecx; pop esi; ret; 
0x10013197  # shr bl, 1; pop es; push 1; pop eax; ret; 
0x10012a2d  # shr bl, 3; push 1; pop eax; pop edi; pop esi; ret; 
0x10021028  # shr byte ptr [ebp + 3], 0x10; call 0x212e9; ret; 
0x10020fe4  # shr byte ptr [ebx + eax + 0x10], 1; call 0x21405; ret; 
0x1001d79d  # shr eax, 2; and eax, 1; pop esi; leave; ret 4; 
0x1001dab7  # shr ebx, 0xce; ret; 
0x10016b37  # shr ebx, 3; or eax, 0xffffffff; pop ebx; leave; ret; 
0x1001fe36  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036a68; call 0x2008c; ret; 
0x1001fd96  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036af8; call 0x2008c; ret; 
0x1001fd52  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036b88; call 0x201a8; ret; 
0x1001fe07  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c20; call 0x2008c; ret; 
0x10021063  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c58; call 0x212e9; ret; 
0x10021092  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036c98; call 0x212e9; ret; 
0x10020fdb  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036cd0; call 0x21405; ret; 
0x1002101f  # sldt word ptr [eax]; add byte ptr [edx + 1], ch; push 0; mov ecx, 0x10036dc0; call 0x212e9; ret; 
0x1002222f  # sldt word ptr [eax]; ret 8; 
0x1001524e  # stc; and al, 0x77; sbb eax, 0x42e8; add bh, al; add byte ptr [0x5e000000], cl; ret; 
0x100247e1  # stc; mov bh, 0xff; call ptr [ecx + 0x59]; ret; 
0x10020eee  # stc; push cs; add dl, byte ptr [eax]; call 0xd14a; pop ecx; ret; 
0x10019d33  # std; adc byte ptr [edi], cl; popfd; ret 0x234a; 
0x1001fd38  # std; add dword ptr [eax], edx; call 0xd14a; pop ecx; ret; 
0x1001b8a6  # std; call 0x1b4b4; pop ecx; mov dword ptr [0x10038268], 1; ret; 
0x10016fb0  # std; lea eax, [ecx + eax*4 + 4]; mov eax, edi; pop edi; pop esi; ret; 
0x100139ed  # sti; or bh, byte ptr [ecx + edx - 0x75]; ret; 
0x1001dc07  # sti; xor byte ptr [edi], cl; test dword ptr [ebp - 0x74ffffff], esi; ret 0x1de9; 
0x1001f0f2  # stosb byte ptr es:[edi], al; xor bh, bh; call ptr [ecx + 0x3b]; ret; 
0x1001714d  # stosd dword ptr es:[edi], eax; mov eax, esi; pop edi; pop esi; ret; 
0x1001afdd  # stosd dword ptr es:[edi], eax; pop edi; ret; 
0x1001afdc  # stosd dword ptr es:[edi], eax; stosd dword ptr es:[edi], eax; pop edi; ret; 
0x1001afdb  # stosd dword ptr es:[edi], eax; stosd dword ptr es:[edi], eax; stosd dword ptr es:[edi], eax; pop edi; ret; 
0x10020ee3  # sub al, 0; adc al, ch; pop edi; ret 0xfffe; 
0x10013a5d  # sub al, 0x5e; leave; ret; 
0x1001cb6c  # sub al, 0x5e; ret; 
0x10014075  # sub al, 0xf6; ret; 
0x10021c7d  # sub al, 0xff; add byte ptr [ebx + 0x831c41], cl; dec byte ptr [ebx + 0x8b1c41]; ret; 
0x10021c8e  # sub al, 0xff; or byte ptr [ebx + 0x18b1c49], cl; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x1001ba7b  # sub al, byte ptr [eax]; add byte ptr [eax], al; or eax, 0xffffffff; pop ebp; ret; 
0x10011481  # sub al, byte ptr [ebx]; adc byte ptr [edx - 0x1f7ca7fc], cl; add al, byte ptr [ebp - 0x74fb8a40]; ret; 
0x1001d8de  # sub bh, bh; call ptr [ecx + 0x5e]; leave; ret; 
0x10014687  # sub byte ptr [ebp + ebp + 3], 0x10; ret; 
0x100108cd  # sub dword ptr [eax + 0x5f000000], -0x75; ret; 
0x10021c6e  # sub dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x1c]; lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x10021ca3  # sub dword ptr [eax], edx; mov eax, dword ptr [ecx + 0x20]; lea ecx, [edx + edx]; add dword ptr [eax], ecx; ret 4; 
0x100246b1  # sub dword ptr [ecx + 0x5959ffff], edi; ret; 
0x100130cd  # sub eax, 0x15ff1003; push edx; add dl, byte ptr [eax]; pop esi; ret; 
0x100113de  # sub eax, 0x20; pop ebx; ret; 
0x10014681  # sub eax, 0x7751003; mov eax, dword ptr [eax + 0x10032d6c]; ret; 
0x1001229d  # sub eax, 0x8b1ceb56; jne 0x122ac; push 9; call 0x153a1; pop ecx; ret; 
0x1001cd3b  # sub eax, 0xc0331003; pop edi; pop ebp; pop ebx; ret; 
0x1001b6bb  # sub eax, 0xd; je 0x1b6cc; dec eax; je 0x1b6c6; xor eax, eax; ret; 
0x100157c6  # sub eax, dword ptr [0x100366e8]; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x10015a1c  # sub eax, dword ptr [0x100366f0]; sar eax, 2; neg eax; pop edi; pop esi; ret; 
0x10018655  # sub eax, dword ptr [ebp - 0x10]; pop edi; pop esi; pop ebx; leave; ret; 
0x100189ed  # sub eax, dword ptr [esp + 4]; ret; 
0x10018c24  # sub eax, dword ptr [esp + 4]; sar eax, 1; ret; 
0x10016a39  # sub eax, ecx; pop ebx; leave; ret; 
0x1001be23  # sub eax, ecx; pop ebx; pop esi; leave; ret; 
0x100180b3  # sub esi, dword ptr [eax + ecx + 0x3a]; ret; 
0x1001d480  # test ah, 2; je 0x1d489; test al, 7; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x1001cb61  # test al, 0; add byte ptr [eax], al; call 0x120a0; add esp, 0x2c; pop esi; ret; 
0x10017831  # test al, 0xff; inc dword ptr [ebx + 0x333d425]; adc byte ptr [eax], al; mov eax, dword ptr [0x100333ec]; pop ecx; ret; 
0x1001a7f1  # test al, 1; adc byte ptr [eax], ah; test al, 1; adc byte ptr [ebx + 0x5f5e0845], cl; leave; ret; 
0x1001a7f5  # test al, 1; adc byte ptr [ebx + 0x5f5e0845], cl; leave; ret; 
0x1001acad  # test al, 1; add byte ptr [eax], al; pop ecx; leave; ret; 
0x1001d485  # test al, 7; jne 0x1d490; and dword ptr [0x10036a04], 0; ret; 
0x1001cd5e  # test al, al; jne 0x1cd4f; pop esi; ret; 
0x1001cf82  # test al, al; jne 0x1cf73; pop esi; ret; 
0x1001adc4  # test bh, 0x10; pop ebx; je 0x1adcf; or eax, 0x40000; ret; 
0x1001d6da  # test byte ptr [0x10036a04], 4; jne 0x1d6ea; and dword ptr [0x10036a04], 0; ret; 
0x1001d7ce  # test byte ptr [0x10036a04], 4; jne 0x1d7de; and dword ptr [0x10036a04], 0; ret; 
0x10015267  # test byte ptr [eax], dh; add edx, dword ptr [eax]; pop esi; mov dword ptr [eax], ecx; ret; 
0x10015fe4  # test byte ptr [ecx + eax*4 + 4], 1; lea eax, [ecx + eax*4]; je 0x15ff1; mov eax, dword ptr [eax]; ret; 
0x10021d2e  # test byte ptr [edx + 0x66831003], al; cmp byte ptr [eax], al; mov dword ptr [esi + 0x3c], eax; pop esi; ret 8; 
0x1001ae83  # test cl, 2; je 0x1ae8d; or eax, 0x80000; ret; 
0x1001383f  # test cl, cl; jne 0x13836; pop esi; ret; 
0x1001388c  # test dl, dl; mov byte ptr [eax], dl; jne 0x13888; ret; 
0x10017a45  # test dword ptr [ebx + 0x5e5fffc8], eax; pop ebx; pop ebp; ret; 
0x1001a98d  # test eax, 0x458b1001; or byte ptr [esi + 0x5f], bl; leave; ret; 
0x10024831  # test eax, 0x59ffffb7; pop ecx; ret; 
0x100137dd  # test eax, eax; je 0x137e6; push 0; call eax; ret; 
0x1001a65e  # test eax, eax; je 0x1a664; xor esi, esi; mov eax, esi; pop esi; ret; 
0x1001a67a  # test eax, eax; je 0x1a680; xor esi, esi; mov eax, esi; pop esi; ret; 
0x1001a692  # test eax, eax; je 0x1a698; xor esi, esi; mov eax, esi; pop esi; ret; 
0x100150a4  # test eax, eax; jg 0x1508b; pop edi; pop esi; ret; 
0x100150db  # test eax, eax; jg 0x150c1; pop edi; pop esi; pop ebx; ret; 
0x100113ae  # test eax, eax; jne 0x113b4; leave; ret; 
0x10014414  # test eax, eax; jne 0x14427; push dword ptr [0x10038144]; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x1001ba21  # test eax, eax; jne 0x1ba27; pop ebp; ret; 
0x1001bac0  # test eax, eax; jne 0x1bac8; xor eax, eax; leave; ret; 
0x1001bf5d  # test eax, eax; jne 0x1bf68; mov eax, 0x7fffffff; pop ebp; ret; 
0x10021f75  # test eax, eax; jne 0x21f7e; mov eax, 0x10027aa0; ret; 
0x10022229  # test eax, eax; jne 0x22232; call 0x23164; ret 8; 
0x10022b27  # test eax, eax; jne 0x22b30; mov eax, 0x10027aa0; ret; 
0x10023dca  # test eax, eax; jne 0x23dd3; mov eax, 0x10027b78; ret; 
0x100154ab  # test eax, eax; mov ax, word ptr [ebp + 8]; je 0x154b7; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10016c21  # test eax, eax; mov ax, word ptr [ebp + 8]; je 0x16c2d; mov ax, word ptr [ebp - 2]; leave; ret; 
0x10018d13  # test eax, eax; mov dword ptr [0x10037120], eax; jne 0x18d1d; ret; 
0x10022f64  # test eax, eax; mov eax, 0xffff; jl 0x22f71; movzx eax, word ptr [ebp - 2]; leave; ret; 
0x1001231a  # test eax, eax; pop ecx; je 0x12324; or eax, 0xffffffff; pop esi; ret; 
0x1001a5ad  # test eax, eax; pop ecx; je 0x1a5b6; push 1; pop eax; ret; 
0x10021b7f  # test eax, eax; pop ecx; jge 0x21b88; or eax, 0xffffffff; ret; 
0x100121d6  # test eax, eax; pop ecx; jne 0x121b9; xor eax, eax; ret; 
0x1001547f  # test eax, eax; pop ecx; jne 0x1548a; mov ax, word ptr [ebp + 8]; leave; ret; 
0x10016bf5  # test eax, eax; pop ecx; jne 0x16c00; mov ax, word ptr [ebp + 8]; leave; ret; 
0x10023793  # test eax, eax; setg cl; mov eax, ecx; ret 4; 
0x100153a9  # test eax, ebp; xor dword ptr [ebx], eax; adc bh, bh; adc eax, 0x10025078; pop ebp; ret; 
0x1001781d  # test ebp, ebp; pop ebp; pop ebx; jne 0x17829; mov eax, dword ptr [0x100333d4]; ret; 
0x100157e8  # test edi, edi; jne 0x157f0; xor eax, eax; pop edi; ret; 
0x10015a3e  # test edi, edi; jne 0x15a46; xor eax, eax; pop edi; ret; 
0x1001af25  # test esi, esi; jge 0x1af10; pop edi; pop esi; pop ebx; ret; 
0x10015ac2  # test esi, esi; jne 0x15ab7; pop esi; ret; 
0x10017488  # test esp, edx; xor eax, dword ptr [ebx]; adc cl, ch; ret; 
0x10015ac1  # test si, si; jne 0x15ab7; pop esi; ret; 
0x10023816  # ud0; inc dword ptr [ebx - 0x3974eb3c]; pop esi; pop ebp; ret; 
0x10014417  # ud0; xor eax, 0x10038144; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x100210ab  # wait; sar dh, 0xff; pop ecx; ret; 
0x10012241  # xchg byte ptr [eax], al; add byte ptr [eax], al; push 9; call 0x153a1; pop ecx; ret; 
0x1001232e  # xchg dword ptr [edx - 0x27090000], eax; pop ecx; pop esi; sbb eax, eax; ret; 
0x10022d18  # xchg ebp, eax; adc byte ptr [eax], al; add byte ptr [ebx + 0x645ef44d], cl; mov dword ptr [0], ecx; leave; ret; 
0x10013c07  # xchg ebp, eax; push 0; add byte ptr [ebx + 0x5f5e10c4], al; ret; 
0x10022a1b  # xchg ebp, eax; rcr byte ptr [edi + 0x5e], 0x5b; pop ebp; ret 0x10; 
0x10022ef0  # xchg ebp, eax; ret 0xff52; 
0x10024067  # xchg edi, eax; add byte ptr [eax], al; add byte ptr [ebx], ch; ret 0xc103; 
0x10012303  # xchg edi, eax; and al, 0; add byte ptr [ebx - 0x3874f33c], al; pop edi; pop esi; ret; 
0x1001acc1  # xchg esp, eax; add dword ptr [eax], eax; add byte ptr [ecx - 0x37], bl; ret; 
0x1001409b  # xchg esp, eax; ret 0x5589; 
0x10015636  # xchg esp, eax; ret; 
0x10015438  # xlatb; mov ax, word ptr [esp + 0x10]; pop edi; pop esi; pop ebx; ret; 
0x1001142b  # xlatb; mov eax, dword ptr [esp + 0x10]; pop edi; pop esi; pop ebx; ret; 
0x1001533c  # xlatb; pop edi; pop esi; ret; 
0x10010313  # xor al, 0x84; div byte ptr [edi - 9]; ret 0; 
0x100153a8  # xor al, 0x85; call 0xff1156e0; adc eax, 0x10025078; pop ebp; ret; 
0x1001afca  # xor al, 1; add eax, 4; dec edx; jne 0x1afc7; pop esi; ret; 
0x10018460  # xor al, 3; adc byte ptr [ecx + 0x334c81d], cl; adc byte ptr [esi + 0x5b], bl; pop ebp; ret; 
0x100180ad  # xor al, 3; adc byte ptr [edx + 0x742b3c06], cl; or byte ptr [edx], bh; ret; 
0x10018466  # xor al, 3; adc byte ptr [esi + 0x5b], bl; pop ebp; ret; 
0x10020eb2  # xor al, al; pop edi; pop esi; ret; 
0x1001f0f3  # xor bh, bh; call ptr [ecx + 0x3b]; ret; 
0x10021cb2  # xor bh, bh; or byte ptr [ebx + 0x18b2049], cl; lea edx, [eax + 2]; mov dword ptr [ecx], edx; ret; 
0x1001fde1  # xor byte ptr [ebx + 3], ch; adc al, ch; popfd; push es; add byte ptr [eax], al; ret; 
0x10023214  # xor byte ptr [ebx], cl; add byte ptr [eax], al; mov dword ptr [esi], 0x10027b58; mov eax, esi; pop esi; ret 4; 
0x1001cf61  # xor byte ptr [ebx], cl; ret; 
0x100108cb  # xor byte ptr [ecx + 0xa883], cl; add byte ptr [edi - 0x75], bl; ret; 
0x1001afc8  # xor byte ptr [ecx - 0x3f7cfecc], cl; add al, 0x4a; jne 0x1afc7; pop esi; ret; 
0x1001dc08  # xor byte ptr [edi], cl; test dword ptr [ebp - 0x74ffffff], esi; ret 0x1de9; 
0x100104c4  # xor byte ptr [edx], al; ret; 
0x10013946  # xor byte ptr [esi - 0x37], bl; ret; 
0x10012eeb  # xor cl, byte ptr [ebx + 0xc8b0849]; push cs; add ecx, edx; add eax, ecx; pop esi; ret; 
0x1002222e  # xor cl, byte ptr [edi]; add byte ptr [eax], al; ret 8; 
0x10010533  # xor dh, al; inc ecx; add eax, 0x241c63a; cmp al, byte ptr [edx]; ret; 
0x1001ac60  # xor dl, byte ptr [edi - 0x75]; ret 0x1174; 
0x1001e0ec  # xor dword ptr [ebx + 0x5b5e5fc1], ecx; ret; 
0x100153ab  # xor dword ptr [ebx], eax; adc bh, bh; adc eax, 0x10025078; pop ebp; ret; 
0x100152cd  # xor dword ptr [ebx], eax; adc bh, bh; salc; pop esi; ret; 
0x10015338  # xor dword ptr [ebx], eax; adc bh, bh; xlatb; pop edi; pop esi; ret; 
0x100131fb  # xor dword ptr [ecx], eax; adc bh, bh; adc eax, 0x10025278; mov dword ptr [0x100366c4], eax; ret; 
0x1001b1ee  # xor dword ptr [edi + 0x5e], ebx; pop ebx; leave; ret; 
0x10021c5f  # xor dword ptr [edi], eax; add byte ptr [eax], al; pop esi; ret 8; 
0x100130cb  # xor eax, 0x10032d20; call dword ptr [0x10025264]; pop esi; ret; 
0x100152cb  # xor eax, 0x100331ec; call esi; pop esi; ret; 
0x10019ded  # xor eax, 0x10038144; call dword ptr [0x10025254]; pop esi; ret; 
0x10014419  # xor eax, 0x10038144; call dword ptr [0x100252b4]; xor eax, eax; ret; 
0x10019dfd  # xor eax, 0x5eff1003; ret; 
0x1001d2d1  # xor eax, 0xeb000001; sbb ebp, eax; mov ecx, 0xeb000003; adc al, 0x3b; ret; 
0x10017c06  # xor eax, 0xf6590000; ret; 
0x1001324d  # xor eax, dword ptr [eax]; add byte ptr [eax], al; add esp, 0xc; ret; 
0x10017837  # xor eax, dword ptr [ebx]; adc byte ptr [eax], al; mov eax, dword ptr [0x100333ec]; pop ecx; ret; 
0x10017781  # xor eax, dword ptr [ebx]; adc byte ptr [edi + 0x5e], bl; pop ebx; leave; ret; 
0x1001748a  # xor eax, dword ptr [ebx]; adc cl, ch; ret; 
0x10012ec4  # xor eax, eax; cmp byte ptr [ebp + 0xc], al; setne al; ret; 
0x100137be  # xor eax, eax; leave; ret; 
0x10017112  # xor eax, eax; pop ebp; ret; 
0x1001703c  # xor eax, eax; pop ebx; leave; ret; 
0x1001cd3e  # xor eax, eax; pop edi; pop ebp; pop ebx; ret; 
0x100155f6  # xor eax, eax; pop edi; pop esi; pop ebp; pop ebx; ret; 
0x10016835  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret; 
0x1001fa46  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret; 
0x10016c67  # xor eax, eax; pop edi; pop esi; pop ebx; ret; 
0x10016332  # xor eax, eax; pop edi; pop esi; ret; 
0x100157ec  # xor eax, eax; pop edi; ret; 
0x10018cfb  # xor eax, eax; pop esi; pop ebp; ret; 
0x100164f3  # xor eax, eax; pop esi; pop ebx; leave; ret; 
0x100112b7  # xor eax, eax; pop esi; pop ebx; pop ebp; ret; 
0x100131f3  # xor eax, eax; pop esi; ret 4; 
0x10021b6c  # xor eax, eax; pop esi; ret 8; 
0x10010377  # xor eax, eax; pop esi; ret; 
0x10010483  # xor eax, eax; ret; 
0x1001afd9  # xor eax, eax; stosd dword ptr es:[edi], eax; stosd dword ptr es:[edi], eax; stosd dword ptr es:[edi], eax; pop edi; ret; 
0x1001aa69  # xor ebx, ebx; mov esi, dword ptr [ebp + 0xc]; push 9; call 0x153a1; pop ecx; ret; 
0x10023791  # xor ecx, ecx; test eax, eax; setg cl; mov eax, ecx; ret 4; 
0x100157e6  # xor ecx, ecx; test edi, edi; jne 0x157f0; xor eax, eax; pop edi; ret; 
0x10015a3c  # xor ecx, ecx; test edi, edi; jne 0x15a46; xor eax, eax; pop edi; ret; 
0x1001eeef  # xor edi, edi; inc dword ptr [ebx - 0x3974e73c]; pop esi; pop ebp; ret; 
0x100134de  # xor edi, edi; push 9; call 0x153a1; pop ecx; ret; 
0x10013636  # xor edi, edi; ret; 
0x10017caf  # xor edx, edx; mov eax, esi; pop esi; pop ebx; ret 0x10; 
0x1001a662  # xor esi, esi; mov eax, esi; pop esi; ret; 
0x50532523  # add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532534+edx*4] 
0x50532a2f  # add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532A40+edx*4] 
0x50532893  # add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505328A4+edx*4] 
0x505326bf  # add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505326D0+edx*4] 
0x50533c6c  # add byte [eax], al; add byte [eax], al; push ebx; push esi; call [ebp+0x10] 
0x505016c1  # add byte [eax], al; add byte [eax], al; add byte [eax], 0x00; jne 0x505016DC; call [0x5054A044] 
0x50501561  # add byte [eax], al; add byte [eax], al; add byte [eax], 0x00; jne 0x5050157F; call [0x5054A044] 
0x5053871c  # add byte [eax], al; add byte [eax], al; ret 
0x50526f95  # add byte [eax], al; add byte [eax], al; mov [eax+0x0000008C], 0x00000040; ret 
0x50502ab9  # add byte [eax], al; add byte [eax], al; mov [esi+0x000000A4], 0x00000001; xor eax, eax; pop esi; retn 0x0004 
0x50548bbd  # add byte [eax], al; add byte [eax], al; call ebx; lea eax, [ebp+0x000000A0]; push eax; call [0x5054A03C] 
0x50548a9b  # add byte [eax], al; add byte [eax], al; call ebx 
0x50509985  # add byte [eax], al; add byte [ecx], al; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; retn 0x0008 
0x50532524  # add byte [eax], al; add byte [ebx], al; lock add edi, eax; jmp [0x50532534+edx*4] 
0x50532a30  # add byte [eax], al; add byte [ebx], al; lock add edi, eax; jmp [0x50532A40+edx*4] 
0x50532894  # add byte [eax], al; add byte [ebx], al; lock add edi, eax; jmp [0x505328A4+edx*4] 
0x505326c0  # add byte [eax], al; add byte [ebx], al; lock add edi, eax; jmp [0x505326D0+edx*4] 
0x50539a4e  # add byte [eax], al; add byte [0x000000B4], al; push eax; call esi 
0x5050159a  # add byte [eax], al; add byte [eax], cl; je 0x505015AB; push 0x5055C960; call [0x5054A0D4] 
0x5052d2bf  # add byte [eax], al; add byte [ebx], cl; retn 0xB60F 
0x5050b174  # add byte [eax], al; add byte [edi], cl; test [esi+0x57000000], esi; call [0x5054A03C] 
0x50517d52  # add byte [eax], al; add byte [ebx], ch; retn 0x840F 
0x505380bd  # add byte [eax], al; add byte [ebx], dh; rcr byte [ecx+0x5B], 0x5F; pop esi; ret 
0x50547c70  # add byte [eax], al; add byte [ebx], dh; rcr byte [esi+0x5B], 0x5D; retn 0x000C 
0x5050deb2  # add byte [eax], al; add byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; retn 0x0008 
0x50514f70  # add byte [eax], al; add byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x50539880  # add byte [eax], al; add byte [ebx], dh; rol bl, 0x8B; call [ebp-0x75] 
0x5053c20e  # add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x50539893  # add byte [eax], al; add byte [ebx], dh; fist [edi+0x3B]; ret 
0x50522ca3  # add byte [eax], al; add byte [ebx], dh; fisttp [ebp-0x0000C37B]; call [ebx+0x50] 
0x50501f80  # add byte [eax], al; add byte [ecx], bh; mov fs, word [eax+eax+0x36750000]; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x505088d4  # add byte [eax], al; add byte [ebx], bh; ret 
0x50538385  # add byte [eax], al; add byte [ebx], bh; sti; jne 0x5053839B; call esi 
0x50526f9c  # add byte [eax], al; add byte [eax+0x00], al; add byte [eax], al; ret 
0x5050c77f  # add byte [eax], al; add byte [eax+0x00], al; add byte [ebp+eax+0x33], dh; rol byte [eax-0x15], 0x06; mov eax, [eax+0x000032D8]; retn 0x0004 
0x50544011  # add byte [eax], al; add byte [eax+0x68], al; add al, 0x21; push ebp; push eax; call [0x5054A0A8] 
0x50539cad  # add byte [eax], al; add byte [ecx+0x75], cl; ror byte [ebx-0x1A740383], 1; pop ebp; ret 
0x50516271  # add byte [eax], al; add byte [eax+0x53], dl; call [esi+0x04]; push [ebp+0x14]; push ebx; call [esi+0x08] 
0x50516271  # add byte [eax], al; add byte [eax+0x53], dl; call [esi+0x04] 
0x505493a4  # add byte [eax], al; add byte [eax+0x57], dl; call esi 
0x5052744b  # add byte [eax], al; add byte [eax+0x68], dl; inc eax; ret 
0x50548622  # add byte [eax], al; add byte [eax+0x6A], dl; add [ebp-0x00AF67BB], ecx; jne 0x505485C3; call [0x5054A00C] 
0x50548413  # add byte [eax], al; add byte [eax+0x74], dl; pop ss; push 0x80000001; call esi 
0x50516bb0  # add byte [eax], al; add byte [eax-0x01], dl; adc eax, 0x5054A028; ret 
0x50503072  # add byte [eax], al; add byte [eax-0x01], dl; adc eax, 0x5054A04C; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x50541436  # add byte [eax], al; add byte [eax-0x01], dl; jne 0x50541455; call esi 
0x50539e32  # add byte [eax], al; add byte [eax-0x01], dl; jne 0x50539E59; call esi 
0x5054848f  # add byte [eax], al; add byte [ecx+0x50], dl; cmp [ebp-0x7C], ecx; je 0x505484EB; push 0x80000001; call esi 
0x50539a6c  # add byte [eax], al; add byte [ebx+0x56], dl; mov esi, [0x5054A0D4]; push edi; call esi 
0x50516237  # add byte [eax], al; add byte [ebx+0x56], dl; mov esi, [eax+0x18]; call [esi] 
0x50533c6d  # add byte [eax], al; add byte [ebx+0x56], dl; call [ebp+0x10] 
0x50510ff7  # add byte [eax], al; add byte [esi-0x7D], dl; sal byte [eax+edx*2], 0x6A; inc eax; call [0x5054A100] 
0x50507e92  # add byte [eax], al; add byte [esi-0x18], dl; sal dh, 1; add eax, [eax]; mov ebx, [0x5054A188]; call ebx 
0x50517fad  # add byte [eax], al; add byte [esi-0x01], dl; xor cl, byte [ebx+0x32FFB455]; push eax; call [ecx+0x28] 
0x5051100e  # add byte [eax], al; add byte [edi+0x53], dl; lea edi, [esi+0x20]; push edi; call [0x5054A050] 
0x5050fc27  # add byte [eax], al; add byte [edi+0x57], dl; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x505053c9  # add byte [eax], al; add byte [edi-0x01], dl; jne 0x505053AC; lea eax, [esi+0x00000114]; push eax; call ebx 
0x50505158  # add byte [eax], al; add byte [ebx+0x5F], bl; pop esi; pop ebp; retn 0x0008 
0x5050feb0  # add byte [eax], al; add byte [ebx+0x5F], bl; pop esi; leave; retn 0x0014 
0x5052a1f4  # add byte [eax], al; add byte [ebx-0x37], bl; ret 
0x5050a8d5  # add byte [eax], al; add byte [ebp+0x5F], bl; pop esi; pop ebx; retn 0x0004 
0x50516957  # add byte [eax], al; add byte [esi+0x5F], bl; ret 
0x50516901  # add byte [eax], al; add byte [esi-0x3D], bl; mov eax, [esp+0x04]; test eax, eax; jne 0x5051690F; ret 
0x5052a560  # add byte [eax], al; add byte [esi-0x37], bl; ret 
0x50508f6e  # add byte [eax], al; add byte [edi+0x33], bl; rcr byte [ebx+0x5E], 0x5D; retn 0x0008 
0x50509989  # add byte [eax], al; add byte [edi+0x5B], bl; pop esi; retn 0x0008 
0x5053efb5  # add byte [eax], al; add byte [edi+0x5B], bl; pop esi; leave; ret 
0x5051a38b  # add byte [eax], al; add byte [edi+0x5B], bl; ret 
0x50528ef1  # add byte [eax], al; add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50509d10  # add byte [eax], al; add byte [edi+0x5E], bl; retn 0x0008 
0x5052f4f8  # add byte [eax], al; add byte [edi-0x37], bl; ret 
0x5050626c  # add byte [eax], al; add byte [esi+0x3B], ah; ret 
0x5054294b  # add byte [eax], al; add byte [eax-0x68], ch; and byte [ebp+0x50], dl; call [0x5054A08C] 
0x50504581  # add byte [eax], al; add byte [edx+0x20], ch; push edi; lea eax, [ebp+0x08]; push eax; call [0x5054A04C] 
0x5051fcbb  # add byte [eax], al; add byte [ebp+eax+0x6A], dh; add ebx, [eax-0x15]; jnp 0x10D50D0A; or bl, byte [ecx+0x0307E283]; retn 0xF8C1 
0x50510417  # add byte [eax], al; add byte [edi+ecx+0x53], dh; push ebx; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x5052f369  # add byte [eax], al; add byte [ebp+0x0A], dh; test byte [esi+0x20], 0x02; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x5050b1d7  # add byte [eax], al; add byte [ebp+0x10], dh; push edi; call [0x5054A03C] 
0x505031f3  # add byte [eax], al; add byte [ebp+0x12], dh; and [esi+0x000000DC], 0xFFFFFFF7; push 0x5055C960; call [0x5054A0D4] 
0x50501f86  # add byte [eax], al; add byte [ebp+0x36], dh; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x5051eb35  # add byte [eax], al; add byte [edi+0x75], bh; add eax, 0xC940C033; ret 
0x505016c2  # add byte [eax], al; add byte [eax+0x12750000], al; call [0x5054A044] 
0x50501562  # add byte [eax], al; add byte [eax+0x15750000], al; call [0x5054A044] 
0x50501721  # add byte [eax], al; add byte [eax+0x19750000], al; cmp [esp+0x10], 0x00000000; je 0x50501742; call [0x5054A044] 
0x5050f8a0  # add byte [eax], al; add byte [eax-0x1FA276AA], al; call [0x5054A0A8] 
0x50545f2b  # add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x50532ece  # add byte [eax], al; add byte [eax+0x5F5EC475], al; pop ebx; xor eax, eax; ret 
0x50548736  # add byte [eax], al; add byte [eax-0x00018217], al; call [edi-0x73] 
0x50548431  # add byte [eax], al; add byte [eax+0x458DE7EB], al; mov word [eax-0x01], ss; jne 0x505483C6; call [0x5054A014] 
0x50547dfe  # add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov edi, [0x5054A008]; mov [ebp-0x58], eax; call edi 
0x50547ebe  # add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x5050d1f5  # add byte [eax], al; add byte [ebx-0x247AFFDA], al; je 0x5050D27E; push ebx; call [0x5054A03C] 
0x5053ea9b  # add byte [eax], al; add byte [ebx+0x7600087D], al; int 0x80 
0x50501a36  # add byte [eax], al; add byte [ebx+0x53000C7D], al; je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x5050acd8  # add byte [eax], al; add byte [ebx+0x7D02107D], al; xor bh, bh; jne 0x5050ACDC; call [0x5054A048] 
0x5054973c  # add byte [eax], al; add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x5054A03C] 
0x50542121  # add byte [eax], al; add byte [ebx+0x7500DC7D], al; pop ss; lea ebx, [esi+0x0C]; push ebx; call [0x5054A020] 
0x505104fd  # add byte [eax], al; add byte [ebx+0x7D02E47D], al; xor bh, bh; jne 0x505104FD; call [0x5054A048] 
0x5050b16d  # add byte [eax], al; add byte [ebx+0x0032D8BB], al; add byte [eax], al; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1d0  # add byte [eax], al; add byte [ebx+0x0032D8BB], al; add byte [eax], al; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x50518062  # add byte [eax], al; add byte [ebx-0x3F7AF33C], al; je 0x50518074; mov ecx, [edi+0x58]; push eax; call [ecx+0x04] 
0x50533fda  # add byte [eax], al; add byte [ebx+0x5F5EFFC8], al; pop ebx; leave; ret 
0x5053b4e2  # add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; leave; ret 
0x5053c206  # add byte [eax], al; add byte [ebx-0x55160038], al; add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x5051087d  # add byte [eax], al; add byte [ebx+0x458DFFCB], al; mov ah, 0x50; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A0F8] 
0x50532428  # add byte [eax], al; add byte [ebx+0x0C7204E9], al; and eax, 0x03; add ecx, eax; jmp [0x50532448+eax*4] 
0x50532798  # add byte [eax], al; add byte [ebx+0x0C7204E9], al; and eax, 0x03; add ecx, eax; jmp [0x505327B8+eax*4] 
0x5053292c  # add byte [eax], al; add byte [ebx+0x0C7204F9], al; and eax, 0x03; sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325bc  # add byte [eax], al; add byte [ebx+0x0C7204F9], al; and eax, 0x03; sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5053fe51  # add byte [eax], al; add byte [ebx+0x1F7508FB], al; push [edi+0x64]; push ebx; call [ebp-0x20] 
0x505399e6  # add byte [eax], al; add byte [ebp+0x500374C0], al; call esi 
0x50518183  # add byte [eax], al; add byte [ebp-0x74F78B40], al; dec edi; pop esp; push eax; call [ecx+0x04] 
0x5051809c  # add byte [eax], al; add byte [ebp-0x74F78B40], al; dec edi; js 0x505180F7; call [ecx+0x08] 
0x505181ba  # add byte [eax], al; add byte [ebp-0x74F78B40], al; dec edi; jl 0x50518215; call [ecx+0x14] 
0x50549734  # add byte [eax], al; add byte [ebp-0x6E7BF025], al; add byte [eax], al; add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x5054A03C] 
0x50509923  # add byte [eax], al; add byte [ebp+0x531274DB], al; call [0x5054A03C] 
0x5053b55b  # add byte [eax], al; add byte [ebp+0x530B74F6], al; push [ebp-0x00000114]; call edi 
0x505108b1  # add byte [eax], al; add byte [ebp+0x562774F6], al; lea eax, [ebp+0x000002F4]; push eax; call [0x5054A050] 
0x5050cb6c  # add byte [eax], al; add byte [ebp+0x330475F6], al; shr bl, 0x1C; push esi; call [0x5054A03C] 
0x5051163a  # add byte [eax], al; add byte [ecx+0x15FFCC5D], cl; mov byte [ecx+0x45895054], ah; ror byte [ebx+0x5D891045], 1; aam 0x3B; ret 
0x5052a2d0  # add byte [eax], al; add byte [ecx+0x00008481], cl; add byte [ebx-0x37], bl; ret 
0x505087e0  # add byte [eax], al; add byte [ecx-0x00015B7B], cl; call [ebx-0x73] 
0x50503f60  # add byte [eax], al; add byte [ecx-0x0002237B], cl; jmp [0xFFFFEFFF] 
0x50516a80  # add byte [eax], al; add byte [ecx+0x00011088], cl; add byte [ebx-0x76EFDBB4], cl; mov byte [ecx+eax], ah; add byte [eax], al; ret 
0x50503f73  # add byte [eax], al; add byte [ecx-0x00022F73], cl; dec [ebx+0x0032C48E]; add byte [ebp-0x0002137B], cl; call [ebx+0x50] 
0x5052a1ee  # add byte [eax], al; add byte [ecx+0x0000848F], cl; add byte [ebx-0x37], bl; ret 
0x5050d4f6  # add byte [eax], al; add byte [ebx+0x5E118901], cl; retn 0x0008 
0x5052759b  # add byte [eax], al; add byte [ebx+0x34FF5307], cl; lea esi, [eax+0x575054C1]; call [eax+0x08] 
0x50526721  # add byte [eax], al; add byte [ebx+0x57006A07], cl; call [eax+0x1C] 
0x5051af0e  # add byte [eax], al; add byte [ebx+0x40C48307], cl; push [edi+0x04]; call [eax+0x04] 
0x50514722  # add byte [eax], al; add byte [ebx+0x54A18835], cl; push eax; call esi 
0x505094da  # add byte [eax], al; add byte [ebx+0x54A03C3D], cl; push eax; push esi; call edi 
0x50517f59  # add byte [eax], al; add byte [ebx+0x738D1840], cl; je 0x50517FB9; push [edi+0x0C]; call [eax+0x08] 
0x5053708b  # add byte [eax], al; add byte [ebx-0x74171BBB], cl; push ss; add byte [eax], al; ret 
0x50536f71  # add byte [eax], al; add byte [ebx-0x5A171BBB], cl; pop ss; add byte [eax], al; ret 
0x50536157  # add byte [eax], al; add byte [ebx-0x40171BBB], cl; and eax, 0x6AC30000; add al, 0xE8; mov edx, 0x5900002A; ret 
0x5053c355  # add byte [eax], al; add byte [ebx-0x3E171BBB], cl; ret 
0x50524381  # add byte [eax], al; add byte [ebx-0x3CC4D7BA], cl; je 0x505243C1; push eax; push [ebp+0x08]; call [edi+0x04] 
0x5052439b  # add byte [eax], al; add byte [ebx-0x3CC4D3BA], cl; je 0x505243BC; push eax; push [ebp+0x08]; call [edi+0x04] 
0x50517f78  # add byte [eax], al; add byte [ebx+0x31FFA44D], cl; mov ecx, [ebp-0x64]; push [ecx]; mov eax, [edi+0x0000008C]; call [eax] 
0x5052718d  # add byte [eax], al; add byte [ebx+0x068B4876], cl; push 0x00000001; push esi; call [eax+0x1C] 
0x50501ce5  # add byte [eax], al; add byte [ebx+0x00010886], cl; add byte [ebx], bh; ret 
0x505074ab  # add byte [eax], al; add byte [ebx+0x00388886], cl; add byte [ebx], dh; sar byte [ebx], cl; retn 0x1674 
0x50507d6a  # add byte [eax], al; add byte [ebx+0x0038AC86], cl; add byte [ebx], al; ret 
0x50514cda  # add byte [eax], al; add byte [ebx+0x00021887], cl; add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50503d05  # add byte [eax], al; add byte [ebx+0x5E5F5BC2], cl; retn 0x000C 
0x50504f21  # add byte [eax], al; add byte [ebx+0x5B5F5EC3], cl; leave; retn 0x000C 
0x5052f5c7  # add byte [eax], al; add byte [ebx-0x36A4A13A], cl; ret 
0x5050fcff  # add byte [eax], al; add byte [ebp-0x00AF47BB], cl; adc eax, 0x5054A268; lea eax, [ebp-0x48]; push eax; call [0x5054A278] 
0x5054824a  # add byte [eax], al; add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x5053cd2a  # add byte [eax], al; add byte [ebp-0x0001DF7B], cl; call [eax-0x73] 
0x50547ce8  # add byte [eax], al; add byte [ebp-0x0001837B], cl; call [eax-0x01] 
0x5053373d  # add byte [eax], al; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x50548073  # add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x50504243  # add byte [eax], al; add byte [ebp-0x0002037B], cl; call [eax+0x57] 
0x505097f1  # add byte [eax], al; add byte [ebp+0x00019486], cl; add byte [ebx], bh; ret 
0x5051626b  # add byte [eax], al; add byte [ebp+0x00009487], cl; add byte [eax+0x53], dl; call [esi+0x04] 
0x50538f16  # add byte [eax], al; add byte [ecx+0x50555D00], ah; mov [ebp-0x00000328], eax; mov eax, [0x50555D04]; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x5054240f  # add byte [eax], al; add byte [ebx+0x00001000], bh; push ebx; push 0x00000008; call [0x5054A180] 
0x5050fb99  # add byte [eax], al; add al, al; push [ebp+0x0C]; call [0x5054A0A8] 
0x50516836  # add byte [eax], al; add bl, al; xor eax, eax; ret 
0x505169ec  # add byte [eax], al; add bl, al; or eax, 0xFFFFFFFF; ret 
0x5052db03  # add byte [eax], al; add bl, al; mov eax, [eax+0x08]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x50516995  # add byte [eax], al; add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x505169A2; ret 
0x5051680e  # add byte [eax], al; add bl, al; mov eax, 0x000000A8; ret 
0x505284d9  # add byte [eax], al; add bh, al; test [edi+edi*8-0x01], ebp; call [eax] 
0x50517bb6  # add byte [eax], al; add cl, cl; ret 
0x50523fc6  # add byte [eax], al; add al, ch; push edi; sbb al, byte [eax]; add byte [ebx], al; ret 
0x50515d50  # add byte [eax], al; add al, ch; sahf; sbb eax, [ecx]; add byte [ebx+0x3B591046], cl; ret 
0x5053753c  # add byte [eax], al; add al, ch; fst qword [ecx]; add byte [eax], al; ret 
0x50507c5c  # add byte [eax], al; add bl, ch; sbb byte [ebx-0x4B76F3BB], cl; ret 
0x5050b115  # add byte [eax], al; add bl, ch; push esi; push edi; call [0x5054A03C] 
0x5050c66f  # add byte [eax], al; add bl, ch; push 0x5054ABF8; push edi; call ebx 
0x5053b97d  # add byte [eax], al; add bl, ch; retn 0xFF8B 
0x50542791  # add byte [eax], al; add bl, ch; jecxz 0x50542722; call [ebp-0x75] 
0x505031fb  # add byte [eax], al; add bh, dh; push 0x5055C960; call [0x5054A0D4] 
0x50509e86  # add byte [eax], al; add dh, bh; xor eax, eax; retn 0x0008 
0x50537846  # add byte [eax], al; add bh, bh; xor eax, 0x5055D548; push eax; call esi 
0x50505ca5  # add byte [eax], al; add bh, bh; jne 0x50505CBF; lea eax, [esi+0x000005A0]; push eax; call ebx 
0x50505cb6  # add byte [eax], al; add bh, bh; jne 0x50505CD4; lea eax, [esi+0x00000620]; push eax; call ebx 
0x50505cce  # add byte [eax], al; add bh, bh; jne 0x50505CF0; lea eax, [esi+0x00000114]; push eax; call ebx 
0x5050fc9b  # add byte [eax], al; add bh, bh; jne 0x5050FC8D; call [0x5054A048] 
0x5050f057  # add byte [eax], al; add bh, bh; jne 0x5050F059; call [0x5054A0D8] 
0x50538694  # add byte [eax], al; add bh, bh; jbe 0x505386FE; push 0x00000008; call ebx 
0x5053cd24  # add byte [eax], al; add bh, bh; mov al, 0xAC; add byte [eax], al; add byte [ebp-0x0001DF7B], cl; call [eax-0x73] 
0x50502ac1  # add byte [eax], al; add [eax], eax; add byte [eax], al; xor eax, eax; pop esi; retn 0x0004 
0x5051a388  # add byte [eax], al; add [eax], eax; add byte [eax], al; pop edi; pop ebx; ret 
0x505104a9  # add byte [eax], al; add [eax], eax; add byte [eax], al; call [0x5054A060] 
0x50509e7e  # add byte [eax], al; add ebx, ebp; pop es; and [eax+0x000000DC], 0xFFFFFFFE; xor eax, eax; retn 0x0008 
0x50532525  # add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532534+edx*4] 
0x50532a31  # add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532A40+edx*4] 
0x50532895  # add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505328A4+edx*4] 
0x505326c1  # add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505326D0+edx*4] 
0x50545b79  # add byte [eax], al; add al, 0x00; je 0x50545B84; or eax, 0x00001000; ret 
0x5051a6d5  # add byte [eax], al; add al, 0x75; add eax, 0x5D5EC033; ret 
0x5054268f  # add byte [eax], al; add eax, 0x00004000; pop ebp; ret 
0x505317d2  # add byte [eax], al; add eax, 0xC0330474; leave; ret 
0x50539a4f  # add byte [eax], al; add eax, 0x000000B4; push eax; call esi 
0x5054681f  # add byte [eax], al; jc 0x50546AEC; push 0x00000002; push [0x5055E07C]; call esi 
0x50539550  # add byte [eax], al; je 0x505396BC; movzx eax, di; push eax; call [0x5054A1F8] 
0x505030d0  # add byte [eax], al; jne 0x5050316E; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x5050b175  # add byte [eax], al; jne 0x5050B233; push edi; call [0x5054A03C] 
0x50539556  # add byte [eax], al; movzx eax, di; push eax; call [0x5054A1F8] 
0x5053d7a9  # add byte [eax], al; adc byte [eax], al; push edi; call [0x5054A220] 
0x5050977e  # add byte [eax], al; xor eax, [0x50555868+edx*4]; mov [ecx], eax; ret 
0x5051401b  # add byte [eax], al; xor eax, eax; inc eax; pop ecx; pop ecx; retn 0x0004 
0x5050d527  # add byte [eax], al; xor eax, eax; inc eax; retn 0x000C 
0x5051c790  # add byte [eax], al; xor eax, eax; pop ebp; ret 
0x50547c71  # add byte [eax], al; xor eax, eax; pop esi; pop ebx; pop ebp; retn 0x000C 
0x5053622f  # add byte [eax], al; xor eax, eax; pop esi; pop ebp; ret 
0x5050d660  # add byte [eax], al; xor eax, eax; pop esi; pop edi; retn 0x0008 
0x50502ac5  # add byte [eax], al; xor eax, eax; pop esi; retn 0x0004 
0x5052ef2b  # add byte [eax], al; xor eax, eax; pop esi; ret 
0x50513e43  # add byte [eax], al; xor eax, eax; pop edi; inc eax; pop esi; ret 
0x5050deb3  # add byte [eax], al; xor eax, eax; pop edi; pop esi; pop ebx; retn 0x0008 
0x50513e10  # add byte [eax], al; xor eax, eax; add esp, 0x0C; inc eax; ret 
0x50513fef  # add byte [eax], al; xor eax, eax; add esp, 0x1C; inc eax; pop ebp; retn 0x0010 
0x5050ab6f  # add byte [eax], al; xor eax, eax; retn 0x0008 
0x50539881  # add byte [eax], al; xor eax, eax; ret 
0x50537d68  # add byte [eax], al; xor edi, edi; mov [ebp-0x04], edi; lea eax, [ebp-0x64]; push eax; call [0x5054A1C4] 
0x5051bf6c  # add byte [eax], al; cmp [eax], ebx; je 0x5051BF7A; push edi; push esi; call [eax] 
0x50501e9c  # add byte [eax], al; cmp [edi], ebx; je 0x50501EB5; call [0x5054A188] 
0x5050eda5  # add byte [eax], al; cmp [ebp-0x04], ebx; je 0x5050EDB8; push [ebp-0x04]; call [0x5054A0DC] 
0x5050799a  # add byte [eax], al; cmp [ebp-0x08], esi; je 0x505079AA; push [ebp-0x08]; call [0x5055CA20] 
0x50506042  # add byte [eax], al; cmp [ebp+0x08], edi; je 0x5050618B; push [ebp+0x08]; call [0x5054A03C] 
0x505363a8  # add byte [eax], al; cmp [ebp-0x20], edi; jne 0x5053641B; mov esi, eax; call [0x5054A0E4] 
0x50501f81  # add byte [eax], al; cmp [esi+0x000000A4], ecx; jne 0x50501FC1; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x505031ee  # add byte [eax], al; cmp [ebp+0x00000080], ebx; jne 0x5050320A; and [esi+0x000000DC], 0xFFFFFFF7; push 0x5055C960; call [0x5054A0D4] 
0x505030ca  # add byte [eax], al; cmp [esi+0x000000F8], edi; jne 0x5050316E; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x50516989  # add byte [eax], al; cmp eax, ecx; jl 0x50516992; lea eax, [ecx-0x01]; mov [edx+0x000000F0], eax; ret 
0x50506fb3  # add byte [eax], al; cmp eax, esi; je 0x50506FC7; push esi; push eax; call [0x5055CA08] 
0x5050f522  # add byte [eax], al; cmp esi, edi; je 0x5050F66E; push esi; call [0x5054A03C] 
0x50538386  # add byte [eax], al; cmp edi, ebx; jne 0x5053839B; call esi 
0x5050aea0  # add byte [eax], al; inc eax; pop esi; pop edi; retn 0x0004 
0x50544012  # add byte [eax], al; inc eax; push 0x50552104; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544012  # add byte [eax], al; inc eax; push 0x50552104; call [0x5054A0A8] 
0x50536960  # add byte [eax], al; inc eax; mov [ebp-0x0000031C], esi; mov [ebp-0x000002D4], eax; call [0x5054A1A8] 
0x5051e2de  # add byte [eax], al; inc eax; push [esp+0x20]; call [0x5054A0A8] 
0x50509840  # add byte [eax], al; push eax; push ebx; push 0x5054AAD4; push edi; call [0x5054A260] 
0x50516272  # add byte [eax], al; push eax; push ebx; call [esi+0x04] 
0x5052ef11  # add byte [eax], al; push eax; push ebx; push [esi+0x08]; call [edi+0x08] 
0x5052e04c  # add byte [eax], al; push eax; push ebx; push [edi+0x08]; call [esi] 
0x5052f321  # add byte [eax], al; push eax; push edi; push [esi]; call [0x5054A140] 
0x505493a5  # add byte [eax], al; push eax; push edi; call esi 
0x5050f619  # add byte [eax], al; push eax; push 0x5054AC9C; push esi; call [0x5054A260] 
0x5050b81a  # add byte [eax], al; push eax; push 0x5054ABAC; push [esi+0x08]; call [0x5054A03C] 
0x50507c93  # add byte [eax], al; push eax; push 0x00000004; lea eax, [ebx+edi*8+0x0000389C]; push eax; call [0x5055C9A4] 
0x50548414  # add byte [eax], al; push eax; je 0x50548430; push 0x80000001; call esi 
0x5050e819  # add byte [eax], al; push eax; add edi, 0x00000314; push edi; call [0x5054A04C] 
0x5050ac31  # add byte [eax], al; push eax; mov [esi+0x000000D0], ebx; mov [esi+0x00000AA8], ebx; mov byte [esi+0x000006A0], bl; call [0x5054A04C] 
0x5050eaa6  # add byte [eax], al; push eax; lea eax, [ebp-0x54]; push eax; call [0x5054A04C] 
0x5050d5c6  # add byte [eax], al; push eax; lea eax, [esi+0x14]; push eax; call ebx 
0x5052e123  # add byte [eax], al; push eax; lea eax, [ebp+0x00000290]; push eax; push [edi+0x08]; call [esi] 
0x50503ed4  # add byte [eax], al; push eax; lea eax, [ebp-0x00000204]; push eax; call [0x5054A04C] 
0x5050d5d4  # add byte [eax], al; push eax; lea eax, [esi+0x00000214]; push eax; call ebx 
0x5050547f  # add byte [eax], al; push eax; lea eax, [esi+0x00000314]; push eax; call ebx 
0x50549378  # add byte [eax], al; push eax; call [0x5054A224] 
0x50516bb1  # add byte [eax], al; push eax; call [0x5054A028]; ret 
0x50516bb1  # add byte [eax], al; push eax; call [0x5054A028] 
0x5050cbcf  # add byte [eax], al; push eax; call [0x5054A038] 
0x50503080  # add byte [eax], al; push eax; call [0x5054A03C] 
0x5050c8d6  # add byte [eax], al; push eax; call [0x5054A04C]; xor eax, eax; retn 0x0008 
0x50503073  # add byte [eax], al; push eax; call [0x5054A04C]; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x50503073  # add byte [eax], al; push eax; call [0x5054A04C] 
0x505107d9  # add byte [eax], al; push eax; call [0x5054A050] 
0x5050643a  # add byte [eax], al; push eax; call [0x5054A074] 
0x50506584  # add byte [eax], al; push eax; call [0x5054A190]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50506584  # add byte [eax], al; push eax; call [0x5054A190] 
0x50507565  # add byte [eax], al; push eax; call [0x5055C9A4] 
0x5050fc30  # add byte [eax], al; push eax; call [0x5054A0EC] 
0x5051088b  # add byte [eax], al; push eax; call [0x5054A0F8] 
0x50501235  # add byte [eax], al; push eax; push [0x5055C93C]; push 0x00001A00; call [0x5054A034] 
0x5050c7fd  # add byte [eax], al; push eax; push [ebp+0x0C]; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7fd  # add byte [eax], al; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x50541437  # add byte [eax], al; push eax; push [ebp+0x18]; call esi 
0x50539e33  # add byte [eax], al; push eax; push [ebp+0x20]; call esi 
0x5052e12a  # add byte [eax], al; push eax; push [edi+0x08]; call [esi] 
0x505053d4  # add byte [eax], al; push eax; call ebx 
0x50539a54  # add byte [eax], al; push eax; call esi 
0x505103a1  # add byte [eax], al; push eax; call edi 
0x5052e596  # add byte [eax], al; push edx; push eax; call [ecx+0x08] 
0x5051357c  # add byte [eax], al; push ebx; push eax; call edi 
0x5053d666  # add byte [eax], al; push ebx; push ecx; call esi 
0x50502fac  # add byte [eax], al; push ebx; push esi; push 0x00003A98; call [0x5054A048] 
0x50539a6d  # add byte [eax], al; push ebx; push esi; mov esi, [0x5054A0D4]; push edi; call esi 
0x50516238  # add byte [eax], al; push ebx; push esi; mov esi, [eax+0x18]; call [esi] 
0x50533c6e  # add byte [eax], al; push ebx; push esi; call [ebp+0x10] 
0x50542415  # add byte [eax], al; push ebx; push 0x00000008; call [0x5054A180]; push eax; call [0x5054A07C] 
0x50542415  # add byte [eax], al; push ebx; push 0x00000008; call [0x5054A180] 
0x50539d98  # add byte [eax], al; push ebx; call [0x5054A200] 
0x505097cb  # add byte [eax], al; push ebx; call [0x5054A03C] 
0x5050395e  # add byte [eax], al; push ebx; call [0x5054A050] 
0x5050716a  # add byte [eax], al; push ebx; call [0x5054A098]; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx 
0x5050716a  # add byte [eax], al; push ebx; call [0x5054A098] 
0x50502989  # add byte [eax], al; push esi; push edi; call [0x5054A04C]; push edi; call [0x5054A03C] 
0x50502989  # add byte [eax], al; push esi; push edi; call [0x5054A04C] 
0x50510ff8  # add byte [eax], al; push esi; add eax, 0x34; push eax; push 0x00000040; call [0x5054A100] 
0x50548e25  # add byte [eax], al; push esi; mov esi, [0x5054A03C]; call esi 
0x5051080e  # add byte [eax], al; push esi; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A050] 
0x50546c95  # add byte [eax], al; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x5050dbb5  # add byte [eax], al; push esi; call [0x5054A03C] 
0x50507619  # add byte [eax], al; push esi; call [0x5055C988] 
0x5052ef83  # add byte [eax], al; push esi; call [eax+0x04] 
0x50502fd5  # add byte [eax], al; push edi; xor edi, edi; inc edi; call [0x5054A188] 
0x5051100f  # add byte [eax], al; push edi; push ebx; lea edi, [esi+0x20]; push edi; call [0x5054A050] 
0x5051f08f  # add byte [eax], al; push edi; push edi; push eax; call [ecx+0x04] 
0x5050fc28  # add byte [eax], al; push edi; push edi; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x5053d838  # add byte [eax], al; push edi; call [0x5054A220] 
0x5050d71a  # add byte [eax], al; push edi; call [0x5054A038] 
0x5050b17b  # add byte [eax], al; push edi; call [0x5054A03C] 
0x50537a54  # add byte [eax], al; push edi; call [0x5054A048]; push [ebp+0x08]; call [0x5054A1B0] 
0x50537a54  # add byte [eax], al; push edi; call [0x5054A048] 
0x5052e235  # add byte [eax], al; push edi; call [eax+0x04] 
0x505053ca  # add byte [eax], al; push edi; push [ebp-0x24]; lea eax, [esi+0x00000114]; push eax; call ebx 
0x5050c722  # add byte [eax], al; push edi; push [ebp-0x10]; call [0x5054A04C] 
0x50547cca  # add byte [eax], al; push edi; call esi 
0x50516708  # add byte [eax], al; pop ecx; add eax, esi; pop esi; ret 
0x5053c272  # add byte [eax], al; pop ecx; push eax; call [0x5054A21C] 
0x5053a691  # add byte [eax], al; pop ecx; push eax; call [0x5054A060] 
0x50511378  # add byte [eax], al; pop ecx; pop ecx; retn 0x0008 
0x5051498d  # add byte [eax], al; pop ecx; pop ecx; ret 
0x50521e61  # add byte [eax], al; pop ecx; pop ecx; leave; ret 
0x50531a1b  # add byte [eax], al; pop ecx; pop ecx; call [0x5054A044] 
0x50542494  # add byte [eax], al; pop ecx; pop ecx; push [ebp-0x04]; push 0x00000000; call [0x5054A180] 
0x50519723  # add byte [eax], al; pop ecx; pop ebx; leave; ret 
0x50536012  # add byte [eax], al; pop ecx; pop ebp; ret 
0x50516007  # add byte [eax], al; pop ecx; pop esi; ret 
0x50538f63  # add byte [eax], al; pop ecx; push 0xC0000409; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538f63  # add byte [eax], al; pop ecx; push 0xC0000409; call [0x5054A128] 
0x50538b3a  # add byte [eax], al; pop ecx; push 0xC0000417; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538b3a  # add byte [eax], al; pop ecx; push 0xC0000417; call [0x5054A128] 
0x50538f3f  # add byte [eax], al; pop ecx; push 0x00000000; call [0x5054A1A8]; push 0x50550FE0; call [0x5054A1A4] 
0x50538f3f  # add byte [eax], al; pop ecx; push 0x00000000; call [0x5054A1A8] 
0x505374f1  # add byte [eax], al; pop ecx; and [ebp-0x04], 0x00000000; push [esi+0x68]; call [0x5054A15C] 
0x50514243  # add byte [eax], al; pop ecx; cmp eax, 0x07; jnbe 0x5051427C; jmp [0x50514286+eax*4] 
0x505142e3  # add byte [eax], al; pop ecx; cmp eax, 0x07; jnbe 0x5051432A; jmp [0x5051434A+eax*4] 
0x50537b50  # add byte [eax], al; pop ecx; test eax, eax; je 0x50537B61; push [ebp+0x08]; call [0x50550E88] 
0x50513c0f  # add byte [eax], al; pop ecx; test eax, eax; jne 0x50513C18; pop esi; ret 
0x50514744  # add byte [eax], al; pop ecx; test eax, eax; jl 0x505147A2; call esi 
0x50531cd8  # add byte [eax], al; pop ecx; mov [0x5055D530], ebx; push 0x5055D480; call [0x5054A19C] 
0x505119be  # add byte [eax], al; pop ecx; mov [edi+0x20], eax; call [0x5054A188] 
0x5051e498  # add byte [eax], al; pop ecx; mov [ebp-0x18], esi; call edi 
0x505168a2  # add byte [eax], al; pop ecx; mov [esi+0x000000E0], eax; pop esi; ret 
0x505168fb  # add byte [eax], al; pop ecx; mov [esi+0x000000E4], eax; pop esi; ret 
0x50516a42  # add byte [eax], al; pop ecx; mov eax, [esp+0x0C]; mov [esi], eax; pop esi; ret 
0x505375e9  # add byte [eax], al; pop ecx; mov eax, esi; pop esi; ret 
0x5051e87e  # add byte [eax], al; pop ecx; mov [0x5055CF2C], eax; ret 
0x50511367  # add byte [eax], al; pop ecx; retn 0x0004 
0x50513c7a  # add byte [eax], al; pop ecx; ret 
0x505337ef  # add byte [eax], al; pop ecx; push [ebp-0x0000024C]; call [0x5054A0F0] 
0x50505159  # add byte [eax], al; pop ebx; pop edi; pop esi; pop ebp; retn 0x0008 
0x5050feb1  # add byte [eax], al; pop ebx; pop edi; pop esi; leave; retn 0x0014 
0x5051497d  # add byte [eax], al; pop ebx; ret 
0x5052a1f5  # add byte [eax], al; pop ebx; leave; ret 
0x5050a8d6  # add byte [eax], al; pop ebp; pop edi; pop esi; pop ebx; retn 0x0004 
0x50532b90  # add byte [eax], al; pop ebp; ret 
0x50516fe1  # add byte [eax], al; pop esi; pop ebp; pop ebx; ret 
0x50516958  # add byte [eax], al; pop esi; pop edi; ret 
0x50502f05  # add byte [eax], al; pop esi; or eax, 0xFFFFFFFF; retn 0x000C 
0x5050d4d2  # add byte [eax], al; pop esi; retn 0x0004 
0x505168a9  # add byte [eax], al; pop esi; ret 
0x5052a561  # add byte [eax], al; pop esi; leave; ret 
0x5050998a  # add byte [eax], al; pop edi; pop ebx; pop esi; retn 0x0008 
0x5053efb6  # add byte [eax], al; pop edi; pop ebx; pop esi; leave; ret 
0x5051a38c  # add byte [eax], al; pop edi; pop ebx; ret 
0x505033df  # add byte [eax], al; pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x50501df9  # add byte [eax], al; pop edi; pop esi; pop ebx; leave; retn 0x0008 
0x50514ce1  # add byte [eax], al; pop edi; pop esi; pop ebx; leave; ret 
0x5050a7e8  # add byte [eax], al; pop edi; pop esi; pop ebp; retn 0x0004 
0x5051c3e6  # add byte [eax], al; pop edi; pop esi; pop ebp; ret 
0x50509d11  # add byte [eax], al; pop edi; pop esi; retn 0x0008 
0x5052b413  # add byte [eax], al; pop edi; mov [ebx+0x0000104C], eax; pop esi; leave; ret 
0x5052f4f9  # add byte [eax], al; pop edi; leave; ret 
0x50541128  # add byte [eax], al; cmp word [eax+0x18], cx; sete dl; mov eax, edx; pop ebp; ret 
0x5053d7a6  # add byte [eax], al; push 0x00100000; push edi; call [0x5054A220] 
0x50503063  # add byte [eax], al; push 0x00000100; push 0x5054A2C8; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x5050cf9d  # add byte [eax], al; push 0x00000200; push [ebp+0x0C]; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x50513553  # add byte [eax], al; push 0x00000200; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x505485b5  # add byte [eax], al; push 0x80000001; call [0x5054A000] 
0x505038fc  # add byte [eax], al; push 0x5054A304; push [ebp+0x0C]; call [0x5054A05C] 
0x5050c62e  # add byte [eax], al; push 0x5054AC04; push edi; call ebx 
0x5050c548  # add byte [eax], al; push 0x5054AC0C; push edi; call ebx 
0x5050c502  # add byte [eax], al; push 0x5054AC28; push edi; call ebx 
0x50513e33  # add byte [eax], al; push 0x5055CA4C; call [0x5054A108] 
0x5050bead  # add byte [eax], al; push 0x5054AB94; push edi; call [0x5054A0B8] 
0x5054294c  # add byte [eax], al; push 0x50552098; call [0x5054A08C] 
0x5054637f  # add byte [eax], al; push 0x505523B0; call [0x5054A08C]; push ebx; mov [0x5055E078], eax; call esi 
0x5054637f  # add byte [eax], al; push 0x505523B0; call [0x5054A08C] 
0x505374c2  # add byte [eax], al; push 0x50550EC0; push [ebp-0x1C]; call ebx 
0x50503068  # add byte [eax], al; push 0x5054A2C8; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x505039a0  # add byte [eax], al; push 0x5054A2FC; push ebx; call edi; push ebx; call [0x5054A03C] 
0x505039a0  # add byte [eax], al; push 0x5054A2FC; push ebx; call edi 
0x50506475  # add byte [eax], al; push 0x00000000; call [0x5054A074] 
0x5053850e  # add byte [eax], al; push 0x00000000; push [esi-0x04]; call [0x5054A1DC] 
0x50508b83  # add byte [eax], al; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50546825  # add byte [eax], al; push 0x00000002; push [0x5055E07C]; call esi 
0x5053d78a  # add byte [eax], al; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50504582  # add byte [eax], al; push 0x00000020; push edi; lea eax, [ebp+0x08]; push eax; call [0x5054A04C] 
0x5050c6cf  # add byte [eax], al; push 0x00000040; push esi; push eax; call [0x5054A04C] 
0x50508013  # add byte [eax], al; push 0x0000005A; push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x50547a4b  # add byte [eax], al; jc 0x50547A1E; pop edi; pop esi; retn 0x000C 
0x505479fd  # add byte [eax], al; jc 0x505479E9; xor eax, eax; retn 0x0004 
0x5050779f  # add byte [eax], al; je 0x505077AA; push eax; call [0x5055C988] 
0x50507784  # add byte [eax], al; je 0x5050778F; push eax; call [0x5055C99C] 
0x5052f386  # add byte [eax], al; je 0x5052F39F; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5052f36a  # add byte [eax], al; jne 0x5052F378; test byte [esi+0x20], 0x02; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x5050b1d8  # add byte [eax], al; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x505031f4  # add byte [eax], al; jne 0x5050320A; and [esi+0x000000DC], 0xFFFFFFF7; push 0x5055C960; call [0x5054A0D4] 
0x505016c6  # add byte [eax], al; jne 0x505016DC; call [0x5054A044] 
0x50501566  # add byte [eax], al; jne 0x5050157F; call [0x5054A044] 
0x50503db2  # add byte [eax], al; jne 0x50503DCE; mov esi, 0x5055C960; push esi; call [0x5054A0D4] 
0x50507ee7  # add byte [eax], al; jne 0x50507F03; call ebx 
0x50501725  # add byte [eax], al; jne 0x50501742; cmp [esp+0x10], 0x00000000; je 0x50501742; call [0x5054A044] 
0x50501f87  # add byte [eax], al; jne 0x50501FC1; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x50503d4c  # add byte [eax], al; jne 0x50503DCE; push 0x5055C960; call [0x5054A15C] 
0x5052f3cb  # add byte [eax], al; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C]; mov [esi+0x18], 0x00000001; ret 
0x5052f3cb  # add byte [eax], al; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C] 
0x5051eb36  # add byte [eax], al; jnle 0x5051EBAF; add eax, 0xC940C033; ret 
0x5050c66c  # add byte [eax], al; add byte [eax], 0x00; add bl, ch; push 0x5054ABF8; push edi; call ebx 
0x505016c3  # add byte [eax], al; add byte [eax], 0x00; jne 0x505016DC; call [0x5054A044] 
0x50501563  # add byte [eax], al; add byte [eax], 0x00; jne 0x5050157F; call [0x5054A044] 
0x50501722  # add byte [eax], al; add byte [eax], 0x00; jne 0x50501742; cmp [esp+0x10], 0x00000000; je 0x50501742; call [0x5054A044] 
0x505097c2  # add byte [eax], al; cmp byte [ebx], 0x00; je 0x5050988E; push ebx; call [0x5054A03C] 
0x50545f2c  # add byte [eax], al; sbb byte [edi+0x5E], 0x5B; leave; ret 
0x50532ecf  # add byte [eax], al; xor byte [ebp-0x3C], 0x5E; pop edi; pop ebx; xor eax, eax; ret 
0x50548432  # add byte [eax], al; sub bl, 0xE7; lea eax, [ebp-0x74]; push eax; push [ebp-0x78]; call [0x5054A014] 
0x50547dff  # add byte [eax], al; cmp bh, 0xD6; push [ebp-0x54]; mov edi, [0x5054A008]; mov [ebp-0x58], eax; call edi 
0x50547ebf  # add byte [eax], al; cmp bh, 0xD6; push [ebp-0x54]; mov esi, eax; call edi 
0x50546818  # add byte [eax], al; cmp [ebp-0x10], 0x0000178E; jc 0x50546AEC; push 0x00000002; push [0x5055E07C]; call esi 
0x5050394b  # add byte [eax], al; and [esi+0x000000DC], 0xEFFFFFFF; push [ebp+0x0C]; lea ebx, [esi+0x00002AC0]; push ebx; call [0x5054A050] 
0x50527ebb  # add byte [eax], al; add ebp, 0x0000400C; leave; ret 
0x5052e2f6  # add byte [eax], al; add ebp, 0x00000450; leave; ret 
0x505316ea  # add byte [eax], al; add ebp, 0x00000188; leave; ret 
0x5052d8c4  # add byte [eax], al; add ebp, 0x0000008C; leave; ret 
0x5052e8da  # add byte [eax], al; add ebp, 0x00000198; leave; ret 
0x5052eee0  # add byte [eax], al; add ebp, 0x000001E0; leave; ret 
0x5053954a  # add byte [eax], al; cmp edi, 0x0000FDE9; je 0x505396BC; movzx eax, di; push eax; call [0x5054A1F8] 
0x50521e6e  # add byte [eax], al; add [esi], 0x14; add [edi], 0xFFFFFFEC; pop ecx; pop ecx; ret 
0x50503d37  # add byte [eax], al; or [esi], 0x08; call [0x5054A188] 
0x5051e8bb  # add byte [eax], al; and [0x5055CF2C], 0x00000000; pop ecx; pop esi; ret 
0x5050d1f6  # add byte [eax], al; and [esi], 0x00000000; test ebx, ebx; je 0x5050D27E; push ebx; call [0x5054A03C] 
0x5051ab92  # add byte [eax], al; cmp [eax], 0x00000000; je 0x5051ABA1; push ebx; push esi; call [eax] 
0x50504834  # add byte [eax], al; and [ebp-0x0C], 0x00000000; sub ebx, edi; cmp ebx, 0x0A; jc 0x50504853; call [0x5054A188] 
0x50501a37  # add byte [eax], al; cmp [ebp+0x0C], 0x00000000; push ebx; je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x505094d1  # add byte [eax], al; cmp [ebp+0x10], 0x00000000; je 0x505095AF; mov edi, [0x5054A03C]; push esi; call edi 
0x5050acd9  # add byte [eax], al; cmp [ebp+0x10], 0x02; jnl 0x5050AD11; push [ebp-0x08]; call [0x5054A048] 
0x5054973d  # add byte [eax], al; cmp [ebp+0x14], 0x01; jl 0x505497D0; push eax; call [0x5054A03C] 
0x50542122  # add byte [eax], al; cmp [ebp-0x24], 0x00000000; jne 0x50542141; lea ebx, [esi+0x0C]; push ebx; call [0x5054A020] 
0x5050fc92  # add byte [eax], al; cmp [ebp-0x24], 0x02; jl 0x5050FD25; push [ebp-0x14]; call [0x5054A048] 
0x505104fe  # add byte [eax], al; cmp [ebp-0x1C], 0x02; jnl 0x50510538; push [ebp-0x0C]; call [0x5054A048] 
0x5050b16e  # add byte [eax], al; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1d1  # add byte [eax], al; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x505263ef  # add byte [eax], al; add esp, 0x0C; add [0x5055D440], esi; pop esi; pop ebx; ret 
0x5051638d  # add byte [eax], al; add esp, 0x0C; pop ebx; leave; ret 
0x50532dbb  # add byte [eax], al; add esp, 0x0C; pop ebp; ret 
0x50517cf1  # add byte [eax], al; add esp, 0x0C; pop esi; pop ebx; leave; ret 
0x50526e32  # add byte [eax], al; add esp, 0x0C; pop esi; ret 
0x5052d4a8  # add byte [eax], al; add esp, 0x0C; pop esi; leave; ret 
0x5052d59c  # add byte [eax], al; add esp, 0x0C; pop edi; leave; ret 
0x5052513c  # add byte [eax], al; add esp, 0x0C; mov [edi], esi; mov eax, edi; pop edi; ret 
0x5051162e  # add byte [eax], al; add esp, 0x0C; mov [ebp-0x48], eax; mov [ebp-0x44], 0x00000001; mov [ebp-0x34], ebx; call [0x5054A188] 
0x50525174  # add byte [eax], al; add esp, 0x0C; mov eax, edi; pop edi; pop esi; ret 
0x50526429  # add byte [eax], al; add esp, 0x0C; mov [0x5055E118], eax; ret 
0x505162cd  # add byte [eax], al; add esp, 0x0C; ret 
0x50518f5e  # add byte [eax], al; add esp, 0x10; pop edi; pop ebx; leave; ret 
0x50515f53  # add byte [eax], al; add esp, 0x10; pop edi; pop esi; pop ebx; ret 
0x505160b4  # add byte [eax], al; add esp, 0x10; pop edi; pop esi; leave; ret 
0x5052bac2  # add byte [eax], al; add esp, 0x14; pop esi; ret 
0x505156be  # add byte [eax], al; add esp, 0x14; pop edi; pop ebx; leave; ret 
0x505157b8  # add byte [eax], al; add esp, 0x14; test eax, eax; jnl 0x505157C4; xor eax, eax; ret 
0x5051438f  # add byte [eax], al; add esp, 0x18; pop ecx; ret 
0x5051675b  # add byte [eax], al; add esp, 0x18; pop edi; mov eax, esi; pop esi; ret 
0x505152fb  # add byte [eax], al; add esp, 0x1C; pop edi; pop esi; ret 
0x505265d1  # add byte [eax], al; add esp, 0x1C; mov [0x5055E118], eax; pop esi; inc [0x5055D448]; ret 
0x50533791  # add byte [eax], al; add esp, 0x1C; push [ebp-0x0000024C]; mov [edi+0x20], eax; call [0x5054A0F0] 
0x5052d7af  # add byte [eax], al; add esp, 0x28; leave; ret 
0x50512afc  # add byte [eax], al; add esp, 0x28; call [0x5054A188] 
0x505277e4  # add byte [eax], al; add ebp, 0x5C; leave; ret 
0x50522e49  # add byte [eax], al; add ebp, 0x68; leave; ret 
0x50528a2a  # add byte [eax], al; add ebp, 0x6C; leave; ret 
0x505223fb  # add byte [eax], al; add ebp, 0x74; leave; ret 
0x50541f59  # add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x50532429  # add byte [eax], al; sub ecx, 0x04; jc 0x5053243C; and eax, 0x03; add ecx, eax; jmp [0x50532448+eax*4] 
0x50532799  # add byte [eax], al; sub ecx, 0x04; jc 0x505327AC; and eax, 0x03; add ecx, eax; jmp [0x505327B8+eax*4] 
0x505166e2  # add byte [eax], al; cmp ecx, 0x01; jne 0x505166ED; mov eax, esi; pop esi; ret 
0x5053292d  # add byte [eax], al; cmp ecx, 0x04; jc 0x50532940; and eax, 0x03; sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325bd  # add byte [eax], al; cmp ecx, 0x04; jc 0x505325D0; and eax, 0x03; sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5053fe52  # add byte [eax], al; cmp ebx, 0x08; jne 0x5053FE78; push [edi+0x64]; push ebx; call [ebp-0x20] 
0x505399e7  # add byte [eax], al; test eax, eax; je 0x505399F0; push eax; call esi 
0x50518184  # add byte [eax], al; test eax, eax; je 0x50518192; mov ecx, [edi+0x5C]; push eax; call [ecx+0x04] 
0x5051809d  # add byte [eax], al; test eax, eax; je 0x505180AB; mov ecx, [edi+0x78]; push eax; call [ecx+0x08] 
0x505181bb  # add byte [eax], al; test eax, eax; je 0x505181C9; mov ecx, [edi+0x7C]; push eax; call [ecx+0x14] 
0x50548c4e  # add byte [eax], al; test eax, eax; je 0x50548C62; push [ebp-0x64]; call [0x5054A008] 
0x5050cba2  # add byte [eax], al; test eax, eax; je 0x5050CBCA; push eax; call [0x5054A03C] 
0x5051678f  # add byte [eax], al; test eax, eax; jnl 0x5051679A; mov eax, 0x7FFFFFFF; ret 
0x5050e9f0  # add byte [eax], al; test ebx, ebx; je 0x5050EC76; push ebx; call [0x5054A03C] 
0x50509924  # add byte [eax], al; test ebx, ebx; je 0x5050993C; push ebx; call [0x5054A03C] 
0x5053b55c  # add byte [eax], al; test esi, esi; je 0x5053B56D; push ebx; push [ebp-0x00000114]; call edi 
0x50513e6d  # add byte [eax], al; test esi, esi; jnle 0x50513E7C; push 0xFFFFFFFF; push edi; call [0x5054A18C] 
0x505201f4  # add byte [eax], al; mov byte [eax+ecx], bl; inc [esi+0x000081A4]; pop ebx; ret 
0x505144a0  # add byte [eax], al; mov byte [ebp+0x0000064C], bl; call [0x5054A050] 
0x5051448a  # add byte [eax], al; mov byte [ebp+0x000003C8], bl; mov [ebp+0x000005C8], 0x00000050; mov byte [ebp+0x000005CC], bl; mov byte [ebp+0x0000064C], bl; call [0x5054A050] 
0x5051449a  # add byte [eax], al; mov byte [ebp+0x000005CC], bl; mov byte [ebp+0x0000064C], bl; call [0x5054A050] 
0x5050ac3e  # add byte [eax], al; mov byte [esi+0x000006A0], bl; call [0x5054A04C] 
0x50502e7c  # add byte [eax], al; mov [ecx], eax; xor eax, eax; retn 0x000C 
0x50516aff  # add byte [eax], al; mov [ecx], edx; mov eax, [eax+0x00000118]; ret 
0x5051691b  # add byte [eax], al; mov [ecx], edx; mov eax, [eax+0x000000EC]; ret 
0x50505289  # add byte [eax], al; mov [ebp+0x1C], eax; push ecx; call [0x5054A070] 
0x50505a19  # add byte [eax], al; mov [ebp-0x0C], eax; cmp [ebp+0x10], ebx; je 0x50505A41; push [ebp+0x10]; call edi 
0x50505e38  # add byte [eax], al; mov [ebp-0x0C], eax; cmp [ebp+0x18], ebx; je 0x50505E60; push [ebp+0x18]; call esi 
0x50508606  # add byte [eax], al; mov [ebp-0x04], eax; push [ebp-0x04]; call edi 
0x5051163b  # add byte [eax], al; mov [ebp-0x34], ebx; call [0x5054A188] 
0x505086db  # add byte [eax], al; mov [ebp-0x2C], ebx; call [0x5055C990] 
0x505086d1  # add byte [eax], al; mov [ebp-0x20], ebx; mov [ebp-0x28], 0x00000001; mov [ebp-0x2C], ebx; call [0x5055C990] 
0x505034a5  # add byte [eax], al; mov [esi+0x10], ebx; mov [esi+0x14], ebx; mov [esi+0x18], ebx; call [0x5054A050] 
0x50507b3f  # add byte [eax], al; mov [ebp-0x5C], esi; call [0x5055C990] 
0x5050770e  # add byte [eax], al; mov [ebp-0x2C], esi; call [0x5055C990] 
0x505076c0  # add byte [eax], al; mov [ebp-0x2C], esi; call [0x5055C9A0] 
0x50507dbc  # add byte [eax], al; mov [ebp-0x28], esi; mov [ebp-0x20], esi; mov [ebp-0x1C], 0x00000004; call [0x5055C9DC] 
0x5051298f  # add byte [eax], al; mov [ebp+0x0C], edi; mov [ebp+0x10], eax; call [0x5054A188] 
0x50507846  # add byte [eax], al; mov [ebp+0x0C], edi; push [ebp+0x0C]; call [0x5054A03C] 
0x505125ca  # add byte [eax], al; mov [ebp-0x44], edi; mov [ebp-0x40], eax; call [0x5054A188] 
0x505318b9  # add byte [eax], al; mov [ebp-0x3C], edi; mov [ebp-0x30], edi; call [0x5054A148] 
0x50531829  # add byte [eax], al; mov [ebp-0x18], edi; call ebx 
0x5052a2d1  # add byte [eax], al; mov [ecx+0x00000084], eax; pop ebx; leave; ret 
0x50508b7d  # add byte [eax], al; mov [ebx+0x00003804], eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50508bdc  # add byte [eax], al; mov [ebx+0x0000380C], eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x5053349a  # add byte [eax], al; mov [ebp-0x00000268], eax; lea eax, [ebp-0x00000248]; push eax; push esi; call [0x5054A0F8] 
0x50538b08  # add byte [eax], al; mov [ebp-0x0000031C], eax; call [0x5054A1E8]; push 0x00000000; mov ebx, eax; call [0x5054A1A8] 
0x50538b08  # add byte [eax], al; mov [ebp-0x0000031C], eax; call [0x5054A1E8] 
0x50526cf4  # add byte [eax], al; mov [esi+0x00000128], eax; mov ecx, [edi]; push edi; call [ecx+0x1C] 
0x50503d46  # add byte [eax], al; mov [edi+0x000032C0], eax; jne 0x50503DCE; push 0x5055C960; call [0x5054A15C] 
0x5050ae9a  # add byte [eax], al; mov [edi+0x000037E8], eax; inc eax; pop esi; pop edi; retn 0x0004 
0x5051f744  # add byte [eax], al; mov [eax+0x00038000], ecx; ret 
0x50516a81  # add byte [eax], al; mov [eax+0x00000110], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000124], ecx; ret 
0x5052b4f4  # add byte [eax], al; mov [eax+0x0000104C], ecx; pop ebx; leave; ret 
0x5052a1ef  # add byte [eax], al; mov [edi+0x00000084], ecx; pop ebx; leave; ret 
0x50502eff  # add byte [eax], al; mov [eax+0x00000110], edx; pop esi; or eax, 0xFFFFFFFF; retn 0x000C 
0x5050ac38  # add byte [eax], al; mov [esi+0x00000AA8], ebx; mov byte [esi+0x000006A0], bl; call [0x5054A04C] 
0x505062b5  # add byte [eax], al; mov [esi+0x00000AA8], ebp; mov [esi+0x000037DC], ebp; call [0x5054A188] 
0x505062a9  # add byte [eax], al; mov [esi+0x000000D0], ebp; mov [esi+0x000032D0], ebp; mov [esi+0x00000AA8], ebp; mov [esi+0x000037DC], ebp; call [0x5054A188] 
0x505062af  # add byte [eax], al; mov [esi+0x000032D0], ebp; mov [esi+0x00000AA8], ebp; mov [esi+0x000037DC], ebp; call [0x5054A188] 
0x505062bb  # add byte [eax], al; mov [esi+0x000037DC], ebp; call [0x5054A188] 
0x505182cb  # add byte [eax], al; mov [edi+0x00002D1C], esi; call [0x5054A188] 
0x505049fa  # add byte [eax], al; mov [esi+0x000032D0], edi; mov [esi+0x000032C8], eax; call [0x5054A188] 
0x5050d4f7  # add byte [eax], al; mov eax, [ecx]; mov [ecx], edx; pop esi; retn 0x0008 
0x5050d566  # add byte [eax], al; mov eax, [ecx]; mov [ecx], edx; retn 0x0008 
0x50527302  # add byte [eax], al; mov eax, [ebx]; push esi; push ebx; call [eax+0x18] 
0x50515c98  # add byte [eax], al; mov eax, [esi]; add [edi], eax; and [esi], 0x00000000; add esp, 0x0C; ret 
0x5052dbf3  # add byte [eax], al; mov eax, [esi]; push esi; call [eax+0x1C] 
0x5052759c  # add byte [eax], al; mov eax, [edi]; push ebx; push [0x5054C1B0+ecx*4]; push edi; call [eax+0x08] 
0x50526722  # add byte [eax], al; mov eax, [edi]; push 0x00000000; push edi; call [eax+0x1C] 
0x5051af0f  # add byte [eax], al; mov eax, [edi]; add esp, 0x40; push [edi+0x04]; call [eax+0x04] 
0x505269b3  # add byte [eax], al; mov ecx, [eax]; lea edx, [ebp-0x18]; push edx; push eax; call [ecx+0x08] 
0x50526acc  # add byte [eax], al; mov ecx, [eax]; call [ecx+0x08] 
0x50526cfa  # add byte [eax], al; mov ecx, [edi]; push edi; call [ecx+0x1C] 
0x50506fc5  # add byte [eax], al; mov ebx, [0x5054A03C]; cmp [ebp+0x0C], esi; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x5050ba95  # add byte [eax], al; mov ebx, [0x5054A03C]; inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x505051f1  # add byte [eax], al; mov ebx, [0x5054A03C]; push edi; call ebx 
0x5050c4db  # add byte [eax], al; mov ebx, [0x5054A0B8]; push 0x5054AC30; push edi; call ebx 
0x505072a1  # add byte [eax], al; mov esi, [0x5054A03C]; test ebx, ebx; jne 0x505072C1; push 0x00000000; call esi 
0x5050a1b5  # add byte [eax], al; mov esi, [0x5054A04C]; push eax; push edi; call esi 
0x50542961  # add byte [eax], al; mov esi, [0x5054A088]; push 0x5055208C; push edi; call esi 
0x505463a5  # add byte [eax], al; mov esi, [0x5054A088]; push 0x505523A8; push eax; call esi 
0x50506661  # add byte [eax], al; mov esi, [0x5054A088]; push 0x5054A5B0; push eax; call esi 
0x505467b7  # add byte [eax], al; mov esi, [0x5054A088]; push 0x505523BC; push eax; call esi 
0x505377b0  # add byte [eax], al; mov esi, [0x5054A088]; push 0x50550EF0; push edi; call esi 
0x50514723  # add byte [eax], al; mov esi, [0x5054A188]; call esi 
0x505010d2  # add byte [eax], al; mov esi, [0x5054A18C]; push 0xFFFFFFFF; push 0x50555210; call esi 
0x50506606  # add byte [eax], al; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x505419f7  # add byte [eax], al; mov esi, [0x5054A1EC]; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x5050d324  # add byte [eax], al; mov edi, [0x5054A03C]; push ebx; call edi 
0x505094db  # add byte [eax], al; mov edi, [0x5054A03C]; push esi; call edi 
0x50538e6e  # add byte [eax], al; mov eax, [eax+0x04]; ret 
0x5050707d  # add byte [eax], al; mov eax, [eax+0x18]; cmp eax, esi; je 0x505070C4; push eax; call ebx 
0x50517f5a  # add byte [eax], al; mov eax, [eax+0x18]; lea esi, [ebx+0x74]; push esi; push [edi+0x0C]; call [eax+0x08] 
0x50518c1f  # add byte [eax], al; mov eax, [eax+0x18]; call [eax] 
0x50536008  # add byte [eax], al; mov eax, [ebp+0x0C]; or [eax+0x0C], 0x00008000; pop ecx; pop ebp; ret 
0x5051245a  # add byte [eax], al; mov eax, [ebp+0x10]; add esp, 0x28; push [eax]; call [0x5054A0D8]; call [0x5054A188] 
0x5051245a  # add byte [eax], al; mov eax, [ebp+0x10]; add esp, 0x28; push [eax]; call [0x5054A0D8] 
0x50505228  # add byte [eax], al; mov eax, [ebp-0x38]; test eax, eax; je 0x5050599B; push [eax+0x0C]; call ebx 
0x5050eee6  # add byte [eax], al; mov eax, [ebp-0x0C]; push eax; push 0x00000042; mov [ebp+0x0C], eax; call [0x5054A194] 
0x50508bb3  # add byte [eax], al; mov eax, [ebp-0x08]; cmp [eax+0x44], 0x00000000; je 0x50508BFA; push [ebx+0x00003808]; call edi 
0x5052a693  # add byte [eax], al; mov eax, [ebp-0x08]; mov [edi+0x00000084], eax; pop esi; leave; ret 
0x505030d6  # add byte [eax], al; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x505169d5  # add byte [eax], al; mov ecx, [ecx+0x10]; mov [eax+0x00000104], ecx; ret 
0x50516bcb  # add byte [eax], al; mov ecx, [esp+0x08]; mov [eax+0x00000134], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000138], ecx; ret 
0x50516b1a  # add byte [eax], al; mov ecx, [esp+0x0C]; mov [eax+0x0000011C], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x50516b24  # add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x50516a87  # add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000124], ecx; ret 
0x50516bd5  # add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000138], ecx; ret 
0x50531b6f  # add byte [eax], al; mov ecx, [ebp+0x08]; mov [eax], ecx; pop ebp; ret 
0x5052b7b9  # add byte [eax], al; mov ecx, [ebp-0x08]; mov [eax+0x0000104C], ecx; pop esi; leave; ret 
0x5052a558  # add byte [eax], al; mov ecx, [ebp-0x08]; mov [eax+0x00000084], ecx; pop esi; leave; ret 
0x505169cc  # add byte [eax], al; mov edx, [ecx+0x0C]; mov [eax+0x00000100], edx; mov ecx, [ecx+0x10]; mov [eax+0x00000104], ecx; ret 
0x50514f14  # add byte [eax], al; mov edx, [edx+0x10]; add edx, ecx; push edx; push [edi+0x64]; call [eax+0x14] 
0x50515661  # add byte [eax], al; mov edx, [esp+0x04]; mov [ecx+eax*4], edx; inc [esi+0x0000017C]; ret 
0x5050e7ae  # add byte [eax], al; mov ebx, [ebp+0x0C]; test ebx, ebx; je 0x5050E7C2; push ebx; call [0x5054A03C] 
0x5053973c  # add byte [eax], al; mov esi, [ebp-0x24]; push [esi+0x68]; call [0x5054A0D4] 
0x5052e4d3  # add byte [eax], al; mov esi, [esi+0x0C]; push esi; mov eax, [esi]; call [eax+0x04] 
0x5052e8bb  # add byte [eax], al; mov esi, [esi+0x0C]; mov eax, [esi]; push esi; call [eax+0x04] 
0x5051f134  # add byte [eax], al; mov esi, [esi+0x0C]; push [ebp-0x78]; mov eax, [esi]; push esi; call [eax+0x10] 
0x5052718e  # add byte [eax], al; mov esi, [esi+0x48]; mov eax, [esi]; push 0x00000001; push esi; call [eax+0x1C] 
0x50518c19  # add byte [eax], al; mov eax, [esi+0x00000088]; mov eax, [eax+0x18]; call [eax] 
0x505201ee  # add byte [eax], al; mov eax, [esi+0x000081A0]; mov byte [eax+ecx], bl; inc [esi+0x000081A4]; pop ebx; ret 
0x505049f4  # add byte [eax], al; mov eax, [esi+0x000032C4]; mov [esi+0x000032D0], edi; mov [esi+0x000032C8], eax; call [0x5054A188] 
0x5051565b  # add byte [eax], al; mov ecx, [esi+0x00000178]; mov edx, [esp+0x04]; mov [ecx+eax*4], edx; inc [esi+0x0000017C]; ret 
0x50514b76  # add byte [eax], al; mov ecx, [edi+0x00000218]; push [ecx+0x10]; push [edi+0x50]; call [eax+0x10] 
0x50514dbd  # add byte [eax], al; mov ecx, [edi+0x0000023C]; push [ecx+0x10]; push [edi+0x64]; call [eax+0x14] 
0x50503d06  # add byte [eax], al; mov eax, edx; pop ebx; pop edi; pop esi; retn 0x000C 
0x5051eaaa  # add byte [eax], al; mov eax, esi; pop esi; pop ebx; ret 
0x5052f5c8  # add byte [eax], al; mov eax, esi; pop esi; pop ebx; leave; ret 
0x50548923  # add byte [eax], al; mov eax, esi; pop esi; pop ebp; retn 0x0010 
0x5051f35e  # add byte [eax], al; mov eax, esi; pop esi; ret 
0x50547bba  # add byte [eax], al; mov eax, edi; pop esi; pop edi; retn 0x0004 
0x5053643a  # add byte [eax], al; mov esi, eax; call [0x5054A0E4] 
0x50526dd2  # add byte [eax], al; mov edi, eax; mov [esi+0x0C], edi; mov eax, [edi]; push edi; call [eax+0x20] 
0x5050496e  # add byte [eax], al; lea eax, [ebp+0x28]; push 0x5054A358; push eax; call [0x5054A260] 
0x505493d5  # add byte [eax], al; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x505130b3  # add byte [eax], al; lea eax, [ebp-0x74]; push eax; push [ebp-0x0080]; call [0x5054A04C] 
0x5050d8b1  # add byte [eax], al; lea eax, [ebp-0x70]; push eax; push esi; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x50539568  # add byte [eax], al; lea eax, [ebp-0x18]; push eax; push edi; call [0x5054A1EC] 
0x5051364f  # add byte [eax], al; lea eax, [ebp-0x08]; push eax; push edi; call [0x5054A0CC] 
0x505081e2  # add byte [eax], al; lea eax, [ebp-0x04]; push eax; push 0x00000053; push [ebp+0x0C]; call [0x5055C9A4] 
0x50548d42  # add byte [eax], al; lea eax, [esi+0x34]; push eax; call [0x5054A03C] 
0x5054867b  # add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5053362a  # add byte [eax], al; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x5054A0B4] 
0x50505608  # add byte [eax], al; lea eax, [esi+0x00000114]; push eax; call [0x5054A04C] 
0x50503ece  # add byte [eax], al; lea eax, [esi+0x00000314]; push eax; lea eax, [ebp-0x00000204]; push eax; call [0x5054A04C] 
0x50505c98  # add byte [eax], al; lea eax, [esi+0x00000520]; push eax; call ebx 
0x5051626c  # add byte [eax], al; lea eax, [edi+0x00000094]; push eax; push ebx; call [esi+0x04] 
0x5050a1af  # add byte [eax], al; lea edi, [esi+0x00000314]; mov esi, [0x5054A04C]; push eax; push edi; call esi 
0x50538f17  # add byte [eax], al; mov eax, [0x50555D00]; mov [ebp-0x00000328], eax; mov eax, [0x50555D04]; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x5051a2c3  # add byte [eax], al; mov ch, 0x63; push ecx; push eax; pop edi; ret 
0x50542410  # add byte [eax], al; mov ebx, 0x00001000; push ebx; push 0x00000008; call [0x5054A180] 
0x5053df47  # add byte [eax], al; mov esi, 0x5055DB81; push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x50538295  # add byte [eax], al; mov esi, 0x5055D590; push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x50537480  # add byte [eax], al; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x50541226  # add byte [eax], al; ror byte [edi], 0x94; retn 0xC28B 
0x50539111  # add byte [eax], al; sal byte [ebx+eax+0x33], 0xC0; ret 
0x5053d82d  # add byte [eax], al; shl edi, 0x0F; add edi, [ecx+0x0C]; push 0x00008000; push edi; call [0x5054A220] 
0x50502aee  # add byte [eax], al; retn 0x0004 
0x50502e31  # add byte [eax], al; retn 0x0008 
0x5051566e  # add byte [eax], al; ret 
0x5050f51f  # add byte [eax], al; mov byte [eax], 0x00; cmp esi, edi; je 0x5050F66E; push esi; call [0x5054A03C] 
0x50536229  # add byte [eax], al; mov [eax], 0x0000000C; xor eax, eax; pop esi; pop ebp; ret 
0x50533a95  # add byte [eax], al; mov [eax], 0x0000000C; xor eax, eax; pop esi; ret 
0x50526f97  # add byte [eax], al; mov [eax+0x0000008C], 0x00000040; ret 
0x5051a2a9  # add byte [eax], al; mov [edx+0x00002904], 0x50516395; mov [edx+0x00002908], 0x505317BC; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x50514490  # add byte [eax], al; mov [ebp+0x000005C8], 0x00000050; mov byte [ebp+0x000005CC], bl; mov byte [ebp+0x0000064C], bl; call [0x5054A050] 
0x50502abb  # add byte [eax], al; mov [esi+0x000000A4], 0x00000001; xor eax, eax; pop esi; retn 0x0004 
0x5050326a  # add byte [eax], al; leave; retn 0x0004 
0x5050738b  # add byte [eax], al; leave; retn 0x0008 
0x5050d932  # add byte [eax], al; leave; retn 0x000C 
0x505128d2  # add byte [eax], al; leave; retn 0x0010 
0x505147ed  # add byte [eax], al; leave; retn 0x0020 
0x50517bb7  # add byte [eax], al; leave; ret 
0x505366a4  # add byte [eax], al; fnclex; pop ebp; ret 
0x50501595  # add byte [eax], al; test byte [esi+0x000000DC], 0x08; je 0x505015AB; push 0x5055C960; call [0x5054A0D4] 
0x505031fc  # add byte [eax], al; imul [eax+0x60]; leave; push ebp; push eax; call [0x5054A0D4] 
0x5050155c  # add byte [eax], al; test [esi+0x000000DC], 0x00008000; jne 0x5050157F; call [0x5054A044] 
0x5052f7d5  # add byte [eax], al; neg eax; push eax; push ecx; push esi; call [esi+0x00001030] 
0x5051f619  # add byte [eax], al; idiv ecx; mov eax, edx; ret 
0x50517f89  # add byte [eax], al; call [eax] 
0x505480ea  # add byte [eax], al; call [0x5054A010]; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x505480ea  # add byte [eax], al; call [0x5054A010] 
0x505072fb  # add byte [eax], al; call [0x5055CA10] 
0x5053baee  # add byte [eax], al; call [0x5054A214] 
0x5050735d  # add byte [eax], al; call [0x5055CA14] 
0x50507319  # add byte [eax], al; call [0x5055CA30] 
0x50501241  # add byte [eax], al; call [0x5054A034] 
0x5050c6fa  # add byte [eax], al; call [0x5054A03C] 
0x50540340  # add byte [eax], al; call [0x5054A240]; mov [ebp-0x10], eax; test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x50509688  # add byte [eax], al; call [0x5054A240] 
0x5050322f  # add byte [eax], al; call [0x5054A048]; push [0x5055C960]; push esi; call [0x5054A18C] 
0x50502fb3  # add byte [eax], al; call [0x5054A048]; push [0x5055C960]; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x50502fb3  # add byte [eax], al; call [0x5054A048] 
0x5050ac44  # add byte [eax], al; call [0x5054A04C] 
0x505144a6  # add byte [eax], al; call [0x5054A050] 
0x505492e4  # add byte [eax], al; call [0x5054A054] 
0x505104ad  # add byte [eax], al; call [0x5054A060] 
0x50503a0f  # add byte [eax], al; call [0x5054A188] 
0x505470bd  # add byte [eax], al; call [0x5055DF88] 
0x50509581  # add byte [eax], al; call [0x5054A190] 
0x5053194d  # add byte [eax], al; call [0x5054A198] 
0x505103e4  # add byte [eax], al; call [0x5054A0A8]; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x50510414; call [0x5054A0E4] 
0x505103e4  # add byte [eax], al; call [0x5054A0A8] 
0x50547d79  # add byte [eax], al; call [0x5054A1B4] 
0x50507dc9  # add byte [eax], al; call [0x5055C9DC] 
0x505088ae  # add byte [eax], al; call [0x5055C9E0] 
0x505394b7  # add byte [eax], al; call [0x5054A1F0] 
0x50539494  # add byte [eax], al; call [0x5054A1F4] 
0x5053f1de  # add byte [eax], al; jmp [0x5053FBDB+eax*4] 
0x50544b6c  # add byte [eax], al; jmp [0x505451A3+ecx*4] 
0x50534af3  # add byte [eax], al; jmp [0x50535C2E+edi*4] 
0x5050ca5b  # add byte [eax], al; push [eax]; push edi; call ebx 
0x50537847  # add byte [eax], al; push [0x5055D548]; push eax; call esi 
0x50518008  # add byte [eax], al; call [eax+0x04] 
0x50517fce  # add byte [eax], al; call [eax+0x08]; push [ebx+0x70]; mov [ebx+0x60], eax; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x50517fce  # add byte [eax], al; call [eax+0x08] 
0x5051544d  # add byte [eax], al; call [eax+0x0C] 
0x50517025  # add byte [eax], al; call [eax+0x1C] 
0x50517fdd  # add byte [eax], al; call [eax+0x24] 
0x50514fb7  # add byte [eax], al; call [ecx+0x18] 
0x50505233  # add byte [eax], al; push [eax+0x0C]; call ebx 
0x50514b7c  # add byte [eax], al; push [ecx+0x10]; push [edi+0x50]; call [eax+0x10] 
0x50514dc3  # add byte [eax], al; push [ecx+0x10]; push [edi+0x64]; call [eax+0x14] 
0x50514f4f  # add byte [eax], al; push [ecx+0x10]; push [edi+0x74]; call [eax+0x10] 
0x50517fff  # add byte [eax], al; push [ebx+0x70]; mov eax, [edi+0x0000008C]; call [eax+0x04] 
0x5050c8cd  # add byte [eax], al; push [esp+0x0C]; add eax, 0x000032DC; push eax; call [0x5054A04C] 
0x50516c04  # add byte [eax], al; push [esp+0x10]; push edx; push eax; call ecx; ret 
0x50516c04  # add byte [eax], al; push [esp+0x10]; push edx; push eax; call ecx 
0x5054198b  # add byte [eax], al; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x5050604b  # add byte [eax], al; push [ebp+0x08]; call [0x5054A03C] 
0x5050cfa2  # add byte [eax], al; push [ebp+0x0C]; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x5050cf83  # add byte [eax], al; push [ebp+0x0C]; push ebx; call [0x5054A04C] 
0x50513558  # add byte [eax], al; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x50505c8f  # add byte [eax], al; push [ebp+0x0C]; mov [esi+0x0000051C], eax; lea eax, [esi+0x00000520]; push eax; call ebx 
0x5050fac8  # add byte [eax], al; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x50510398  # add byte [eax], al; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call edi 
0x5050706a  # add byte [eax], al; push [ebp+0x0C]; call ebx 
0x505275f1  # add byte [eax], al; push [ebp+0x10]; mov eax, [ebx]; push edi; push ebx; call [eax+0x08] 
0x5050fad9  # add byte [eax], al; push [ebp+0x10]; lea eax, [esi+0x000008A0]; push eax; call ebx 
0x505103a9  # add byte [eax], al; push [ebp+0x10]; lea eax, [esi+0x000008A0]; push eax; call edi 
0x50505ca6  # add byte [eax], al; push [ebp+0x14]; lea eax, [esi+0x000005A0]; push eax; call ebx 
0x50505cb7  # add byte [eax], al; push [ebp+0x18]; lea eax, [esi+0x00000620]; push eax; call ebx 
0x50505ccf  # add byte [eax], al; push [ebp+0x1C]; lea eax, [esi+0x00000114]; push eax; call ebx 
0x505055ff  # add byte [eax], al; push [ebp-0x24]; mov [esi+0x00000104], eax; lea eax, [esi+0x00000114]; push eax; call [0x5054A04C] 
0x5053ad80  # add byte [eax], al; push [ebp-0x1C]; call [0x5054A1C0] 
0x5050fc9c  # add byte [eax], al; push [ebp-0x14]; call [0x5054A048] 
0x50507157  # add byte [eax], al; push [ebp-0x08]; lea eax, [ebp-0x18]; push eax; call [0x5055CA38] 
0x5050ef17  # add byte [eax], al; push [ebp-0x04]; add [ebp+0x0C], eax; mov [ebp-0x0C], eax; call [0x5054A0D8] 
0x5050f058  # add byte [eax], al; push [ebp-0x04]; call [0x5054A0D8] 
0x50515f45  # add byte [eax], al; push [esi+0x0C]; push ebx; push eax; call [esi+0x08] 
0x50538695  # add byte [eax], al; push [esi+0x64]; push 0x00000008; call ebx 
0x50537a9b  # add byte [eax], al; call eax; add esp, 0x0C; pop ebp; ret 
0x50537a9b  # add byte [eax], al; call eax 
0x50548bbf  # add byte [eax], al; call ebx; lea eax, [ebp+0x000000A0]; push eax; call [0x5054A03C] 
0x50548a9d  # add byte [eax], al; call ebx 
0x50546793  # add byte [eax], al; call esi; push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x50506611  # add byte [eax], al; call esi 
0x50508b63  # add byte [eax], al; call edi 
0x5050feae  # add byte [ecx], al; add byte [eax], al; add byte [ebx+0x5F], bl; pop esi; leave; retn 0x0014 
0x50509987  # add byte [ecx], al; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; retn 0x0008 
0x5051a389  # add byte [ecx], al; add byte [eax], al; add byte [edi+0x5B], bl; ret 
0x50507c5a  # add byte [ecx], al; add byte [eax], al; add bl, ch; sbb byte [ebx-0x4B76F3BB], cl; ret 
0x50539d96  # add byte [ecx], al; add byte [eax], al; push ebx; call [0x5054A200] 
0x50503066  # add byte [ecx], al; add byte [eax], al; push 0x5054A2C8; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x505318b7  # add byte [ecx], al; add byte [eax], al; mov [ebp-0x3C], edi; mov [ebp-0x30], edi; call [0x5054A148] 
0x505169d3  # add byte [ecx], al; add byte [eax], al; mov ecx, [ecx+0x10]; mov [eax+0x00000104], ecx; ret 
0x505493d3  # add byte [ecx], al; add byte [eax], al; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x505480e8  # add byte [ecx], al; add byte [eax], al; call [0x5054A010]; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x505480e8  # add byte [ecx], al; add byte [eax], al; call [0x5054A010] 
0x5050c8cb  # add byte [ecx], al; add byte [eax], al; push [esp+0x0C]; add eax, 0x000032DC; push eax; call [0x5054A04C] 
0x505096e9  # add byte [ecx], al; and eax, [ebp+0x67]; mov [eax+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x5051ebe7  # add byte [ecx], al; ret 
0x5050b113  # add byte [edx], al; add byte [eax], al; add bl, ch; push esi; push edi; call [0x5054A03C] 
0x5050e817  # add byte [edx], al; add byte [eax], al; push eax; add edi, 0x00000314; push edi; call [0x5054A04C] 
0x5050547d  # add byte [edx], al; add byte [eax], al; push eax; lea eax, [esi+0x00000314]; push eax; call ebx 
0x50506582  # add byte [edx], al; add byte [eax], al; push eax; call [0x5054A190] 
0x5050ca8b  # add byte [edx], al; add byte [eax], al; push eax; call ebx 
0x5051357a  # add byte [edx], al; add byte [eax], al; push ebx; push eax; call edi 
0x5050cba0  # add byte [edx], al; add byte [eax], al; test eax, eax; je 0x5050CBCA; push eax; call [0x5054A03C] 
0x50507317  # add byte [edx], al; add byte [eax], al; call [0x5055CA30] 
0x5050ca59  # add byte [edx], al; add byte [eax], al; push [eax]; push edi; call ebx 
0x5050cfa0  # add byte [edx], al; add byte [eax], al; push [ebp+0x0C]; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x5050cf81  # add byte [edx], al; add byte [eax], al; push [ebp+0x0C]; push ebx; call [0x5054A04C] 
0x50513556  # add byte [edx], al; add byte [eax], al; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x5050fac6  # add byte [edx], al; add byte [eax], al; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x50510396  # add byte [edx], al; add byte [eax], al; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call edi 
0x5050fad7  # add byte [edx], al; add byte [eax], al; push [ebp+0x10]; lea eax, [esi+0x000008A0]; push eax; call ebx 
0x505103a7  # add byte [edx], al; add byte [eax], al; push [ebp+0x10]; lea eax, [esi+0x000008A0]; push eax; call edi 
0x505480a7  # add byte [edx], al; add byte [edx+0x00], ch; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x5054A004] 
0x50545cba  # add byte [edx], al; add bh, dh; ret 
0x5051f610  # add byte [ebx], al; retn 0xC103 
0x50507d72  # add byte [ebx], al; ret 
0x50532526  # add byte [ebx], al; lock add edi, eax; jmp [0x50532534+edx*4] 
0x50532a32  # add byte [ebx], al; lock add edi, eax; jmp [0x50532A40+edx*4] 
0x50532896  # add byte [ebx], al; lock add edi, eax; jmp [0x505328A4+edx*4] 
0x505326c2  # add byte [ebx], al; lock add edi, eax; jmp [0x505326D0+edx*4] 
0x5053abf8  # add byte [eax+eax], al; add byte [ebx], bh; sar [edi+0x00000100], 0x7F; cmp esi, [eax+esi+0x3B]; ret 
0x50501233  # add byte [eax+eax], al; add byte [eax-0x01], dl; xor eax, 0x5055C93C; push 0x00001A00; call [0x5054A034] 
0x50545ba6  # add byte [eax+eax], al; add dh, dh; retn 0x7402 
0x50545b7a  # add byte [eax+eax], al; je 0x50545B84; or eax, 0x00001000; ret 
0x5051a6d6  # add byte [0x5EC03305+esi*2], al; pop ebp; ret 
0x5050116b  # add byte [eax+eax*4], al; cmp eax, 0xFFFFFFFF; je 0x5050117B; push esi; push eax; call [0x5054A02C] 
0x50542690  # add byte [0x00004000], al; pop ebp; ret 
0x505317d3  # add byte [0xC0330474], al; leave; ret 
0x5050b7ef  # add byte [0xB0681775], al; stosd; push esp; push eax; push eax; call [0x5054A05C] 
0x50539a50  # add byte [0x000000B4], al; push eax; call esi 
0x50507352  # add byte [edi], al; add byte [edx+0x00], ch; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x5050159c  # add byte [eax], cl; je 0x505015AB; push 0x5055C960; call [0x5054A0D4] 
0x50505156  # add byte [edx], cl; add byte [eax], al; add byte [ebx+0x5F], bl; pop esi; pop ebp; retn 0x0008 
0x50504f1f  # add byte [edx], cl; add byte [eax], al; add byte [ebx+0x5B5F5EC3], cl; leave; retn 0x000C 
0x5052d2c1  # add byte [ebx], cl; retn 0xB60F 
0x5053622c  # add byte [eax+eax], cl; add byte [eax], al; xor eax, eax; pop esi; pop ebp; ret 
0x50533a98  # add byte [eax+eax], cl; add byte [eax], al; xor eax, eax; pop esi; ret 
0x5052b9e9  # add byte [eax+eax], cl; add byte [ecx+0x44893A0C], cl; cmp al, byte [esp+edi*2+0x00]; rcr byte [edi+0x5B], cl; leave; ret 
0x50547e71  # add byte [edi], cl; add byte [edx+0x00], ch; push 0x5054ABA8; push ebx; call esi 
0x50547e3d  # add byte [edi], cl; add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x505481ce  # add byte [edi], cl; add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x5054A004] 
0x50547eb4  # add byte [edi], cl; add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x50517171  # add byte [edi], cl; test byte [0x33000004], dh; shr byte [ebx], cl; retn 0xC7B9 
0x50539551  # add byte [edi], cl; test byte [ecx+eax+0x00], ah; add byte [edi], cl; mov bh, 0xC7; push eax; call [0x5054A1F8] 
0x50525807  # add byte [edi], cl; test byte [esi-0x75000000], bl; ret 
0x5050a905  # add byte [edi], cl; test byte [esi-0x00FFFFFF], ch; jne 0x5050A91B; mov ebx, [0x5054A03C]; call ebx 
0x505088d0  # add byte [edi], cl; test bl, dl; add byte [eax], al; add byte [ebx], bh; ret 
0x50517d4e  # add byte [edi], cl; test ah, bh; add byte [eax], al; add byte [ebx], ch; retn 0x840F 
0x50546349  # add byte [edi], cl; test [ebx+eax+0x358B0000], edx; nop; mov al, byte [0x00685054]; add byte [eax], 0x00; call esi 
0x5050b176  # add byte [edi], cl; test [esi+0x57000000], esi; call [0x5054A03C] 
0x505384c1  # add byte [edi], cl; xchg eax, esp; shr byte [eax+0x00], 0x10; add byte [eax], al; push eax; call [0x5054A074] 
0x50535b3c  # add byte [edi], cl; mov dh, 0x41; add [edi], ecx; mov dh, 0x56; add [ebx], ebp; retn 0x1574 
0x50535b5d  # add byte [edi], cl; mov dh, 0x41; add cl, byte [edi]; mov dh, 0x56; add ch, byte [ebx]; retn 0x1574 
0x5051f324  # add byte [edi], cl; mov bh, 0xC0; ret 
0x50539557  # add byte [edi], cl; mov bh, 0xC7; push eax; call [0x5054A1F8] 
0x505384c6  # add byte [eax], dl; add byte [eax], al; push eax; call [0x5054A074] 
0x50542413  # add byte [eax], dl; add byte [eax], al; push ebx; push 0x00000008; call [0x5054A180] 
0x50505287  # add byte [eax], dl; add byte [eax], al; mov [ebp+0x1C], eax; push ecx; call [0x5054A070] 
0x505167dc  # add byte [eax], dl; add byte [eax], al; ret 
0x50507155  # add byte [eax], dl; add byte [eax], al; push [ebp-0x08]; lea eax, [ebp-0x18]; push eax; call [0x5055CA38] 
0x50533fd8  # add byte [esi], dl; add byte [eax], al; add byte [ebx+0x5F5EFFC8], al; pop ebx; leave; ret 
0x5053b4e0  # add byte [esi], dl; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; leave; ret 
0x5050123f  # add byte [edx], bl; add byte [eax], al; call [0x5054A034] 
0x5053d7a4  # add byte [eax], ah; add byte [eax], al; push 0x00100000; push edi; call [0x5054A220] 
0x5051c3e3  # add byte [edx], ah; or eax, [eax]; add byte [edi+0x5E], bl; pop ebp; ret 
0x505464d6  # add byte [ebx], ah; push ebp; push eax; push [0x5055E078]; mov [0x5055DF48], eax; call esi 
0x5053afd2  # add byte [ebx], ah; retn 0xC483 
0x5053abf4  # add byte [ebx], ah; retn 0x00B9 
0x50515f43  # add byte [ecx], ch; add byte [eax], al; push [esi+0x0C]; push ebx; push eax; call [esi+0x08] 
0x505229c2  # add byte [edx], ch; ret 
0x50517d54  # add byte [ebx], ch; retn 0x840F 
0x5051bffb  # add byte [ebx], ch; ret 
0x50504839  # add byte [ebx], ch; fild word [ebx+0x12720AFB]; call [0x5054A188] 
0x50506bee  # add byte [esi], ch; mov eax, [edi+0x14]; test eax, eax; je 0x50506BFE; push eax; call ebx 
0x5051401c  # add byte [ebx], dh; rol byte [eax+0x59], 0x59; retn 0x0004 
0x5051c328  # add byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x5051f088  # add byte [ebx], dh; rol byte [eax-0x17], 0xB8; add [eax], eax; add byte [edi+0x57], dl; push eax; call [ecx+0x04] 
0x50511339  # add byte [ebx], dh; rol byte [eax-0x15], 0xF7; push [0x50555CA4]; push 0x50555CA4; call [0x5054A18C] 
0x50547565  # add byte [ebx], dh; rol byte [eax-0x15], 0xF8; mov eax, [0x5055DF88]; test eax, eax; jne 0x5054757A; jmp [0x5054A028] 
0x505380bf  # add byte [ebx], dh; rcr byte [ecx+0x5B], 0x5F; pop esi; ret 
0x50547c72  # add byte [ebx], dh; rcr byte [esi+0x5B], 0x5D; retn 0x000C 
0x50513e44  # add byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x505019bb  # add byte [ebx], dh; rcr byte [edi+0x5B], 0x5E; leave; retn 0x0010 
0x5050deb4  # add byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; retn 0x0008 
0x50514f72  # add byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x505119ec  # add byte [ebx], dh; rol byte [ebx+0x5F4010C4], 0x5E; retn 0x0004 
0x50539882  # add byte [ebx], dh; rol bl, 0x8B; call [ebp-0x75] 
0x50517177  # add byte [ebx], dh; shr byte [ebx], cl; retn 0xC7B9 
0x505074b3  # add byte [ebx], dh; sar byte [ebx], cl; retn 0x1674 
0x505166b9  # add byte [ebx], dh; rcl byte [esi+0x3B], cl; retn 0x4E74 
0x50515e8e  # add byte [ebx], dh; fstp tword [ebx]; ret 
0x50539895  # add byte [ebx], dh; fist [edi+0x3B]; ret 
0x50522ca5  # add byte [ebx], dh; fisttp [ebp-0x0000C37B]; call [ebx+0x50] 
0x5050a96d  # add byte [ebx], dh; imul bl; lock push [ebp+0x0C]; call ebx 
0x505044eb  # add byte [ebx], dh; call [edi+0x53] 
0x50511a94  # add byte [ebx], dh; call [edi+0x57] 
0x50537d69  # add byte [ebx], dh; dec [ecx+0x458DFC7D]; pushfd; push eax; call [0x5054A1C4] 
0x50508b7b  # add byte [eax], bh; add byte [eax], al; mov [ebx+0x00003804], eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50508b61  # add byte [eax], bh; add byte [eax], al; call edi 
0x5051bf6d  # add byte [ecx], bh; sbb byte [eax+ecx+0x57], dh; push esi; call [eax] 
0x50501e9d  # add byte [ecx], bh; pop ds; je 0x50501EB5; call [0x5054A188] 
0x50507795  # add byte [ecx], bh; xor byte [ebp+0x09], dh; cmp [ebx+edi*8+0x00003890], esi; je 0x505077AA; push eax; call [0x5055C988] 
0x5050777a  # add byte [ecx], bh; xor byte [ebp+0x09], dh; cmp [ebx+edi*8+0x000038A0], esi; je 0x5050778F; push eax; call [0x5055C99C] 
0x5050eda6  # add byte [ecx], bh; pop ebp; cld; je 0x5050EDB8; push [ebp-0x04]; call [0x5054A0DC] 
0x5050799b  # add byte [ecx], bh; jne 0x50507997; je 0x505079AA; push [ebp-0x08]; call [0x5055CA20] 
0x50506043  # add byte [ecx], bh; jnl 0x5050604F; je 0x5050618B; push [ebp+0x08]; call [0x5054A03C] 
0x505363a9  # add byte [ecx], bh; jnl 0x5053638D; jne 0x5053641B; mov esi, eax; call [0x5054A0E4] 
0x50501f82  # add byte [ecx], bh; mov fs, word [eax+eax+0x36750000]; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x505030cb  # add byte [ecx], bh; mov esi, 0x000000F8; jne 0x5050316E; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x5054348e  # add byte [edx], bh; ret 
0x50503a01  # add byte [ebx], bh; inc ebp; adc byte [edi], cl; test [ebp-0x77000000], esp; mov esi, 0x000000A8; call [0x5054A188] 
0x50517169  # add byte [ebx], bh; ror [edi], 0xFFFFFF8F; or byte [0x840F0000], al; xor eax, 0x33000004; shr byte [ebx], cl; retn 0xC7B9 
0x5053abfb  # add byte [ebx], bh; sar [edi+0x00000100], 0x7F; cmp esi, [eax+esi+0x3B]; ret 
0x505421ab  # add byte [ebx], bh; retn 0x1773 
0x505166f7  # add byte [ebx], bh; retn 0xED74 
0x50501c72  # add byte [ebx], bh; ret 
0x5050ab64  # add byte [ebx], bh; sar [esi+0x02], 1; mov edx, ecx; mov [eax+0x00000108], edx; xor eax, eax; retn 0x0008 
0x50509959  # add byte [ebx], bh; fdiv [ecx+ecx+0x57]; push ebx; push eax; call [0x5054A04C] 
0x50538387  # add byte [ebx], bh; sti; jne 0x5053839B; call esi 
0x50539107  # add byte [0xC0000005], bh; je 0x50539119; cmp eax, 0xC000001D; je 0x50539119; xor eax, eax; ret 
0x50507ee3  # add byte [0x00002733], bh; jne 0x50507F03; call ebx 
0x50526f9e  # add byte [eax+0x00], al; add byte [eax], al; ret 
0x5051a679  # add byte [eax+0x00], al; add byte [edi-0x75], dl; ret 
0x5050c781  # add byte [eax+0x00], al; add byte [ebp+eax+0x33], dh; rol byte [eax-0x15], 0x06; mov eax, [eax+0x000032D8]; retn 0x0004 
0x50545ed2  # add byte [eax+0x00], al; add byte [esp+ecx+0x3B], dh; ret 
0x50504fa4  # add byte [eax+0x00], al; add byte [ebx+edi-0x18], dh; ret 
0x50503db0  # add byte [eax+0x00], al; add byte [ebp+0x18], dh; mov esi, 0x5055C960; push esi; call [0x5054A0D4] 
0x50503d44  # add byte [eax+0x00], al; add byte [ecx+0x0032C087], cl; add byte [ebp+0x7E], dh; push 0x5055C960; call [0x5054A15C] 
0x50507230  # add byte [eax+0x01], al; add byte [esi+0x56], dl; push 0x0000000A; call [0x5055CA00] 
0x505071d9  # add byte [eax+0x02], al; add byte [esi+0x56], dl; push 0x0000000A; call [0x5055CA00] 
0x5050aea1  # add byte [eax+0x5E], al; pop edi; retn 0x0004 
0x50544013  # add byte [eax+0x68], al; add al, 0x21; push ebp; push eax; call [0x5054A0A8] 
0x505494cd  # add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x505495e0  # add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0014 
0x5051618a  # add byte [eax+0x61], cl; push ecx; push eax; pop edi; ret 
0x50538ff3  # add byte [ecx+0x75], cl; mov [0x8BF8758B], eax; jnl 0x50538FF9; mov esp, ebp; pop ebp; ret 
0x50539caf  # add byte [ecx+0x75], cl; ror byte [ebx-0x1A740383], 1; pop ebp; ret 
0x50514497  # add byte [eax+0x00], dl; add byte [eax], al; mov byte [ebp+0x000005CC], bl; mov byte [ebp+0x0000064C], bl; call [0x5054A050] 
0x5052e0b4  # add byte [eax+0x33], dl; fucomi st0, st0; ret 
0x50509841  # add byte [eax+0x53], dl; push 0x5054AAD4; push edi; call [0x5054A260] 
0x50516273  # add byte [eax+0x53], dl; call [esi+0x04]; push [ebp+0x14]; push ebx; call [esi+0x08] 
0x50516273  # add byte [eax+0x53], dl; call [esi+0x04] 
0x5052ef12  # add byte [eax+0x53], dl; push [esi+0x08]; call [edi+0x08] 
0x5052e04d  # add byte [eax+0x53], dl; push [edi+0x08]; call [esi] 
0x5052f2d3  # add byte [eax+0x55], dl; lea eax, [esi+0x24]; push eax; push [esi]; call [0x5054A0C0] 
0x505075fd  # add byte [eax+0x57], dl; push 0x00000002; push 0x5054A5F4; push edi; call [0x5055C984] 
0x5052f322  # add byte [eax+0x57], dl; push [esi]; call [0x5054A140] 
0x505493a6  # add byte [eax+0x57], dl; call esi 
0x5052744d  # add byte [eax+0x68], dl; inc eax; ret 
0x50548624  # add byte [eax+0x6A], dl; add [ebp-0x00AF67BB], ecx; jne 0x505485C3; call [0x5054A00C] 
0x505179ea  # add byte [eax+0x6A], dl; call [ebx-0x77] 
0x50548415  # add byte [eax+0x74], dl; pop ss; push 0x80000001; call esi 
0x5052dc6d  # add byte [eax-0x77], dl; dec eax; push eax; call [eax+0x48] 
0x5051c365  # add byte [eax-0x75], dl; ret 
0x505048e4  # add byte [eax-0x73], dl; inc ebp; dec eax; push eax; call [0x5054A050] 
0x50548a8c  # add byte [eax-0x73], dl; inc ebp; mov al, byte [0x9C75FF50]; mov [ebp-0x68], edi; mov byte [ebp+0x000000A0], 0x00; call ebx 
0x5050eaa7  # add byte [eax-0x73], dl; inc ebp; lodsb; push eax; call [0x5054A04C] 
0x5050d5c7  # add byte [eax-0x73], dl; inc esi; adc al, 0x50; call ebx 
0x5052e124  # add byte [eax-0x73], dl; test [eax+0x50000002], edx; push [edi+0x08]; call [esi] 
0x5050d5d5  # add byte [eax-0x73], dl; xchg byte [edx+eax], dl; add byte [eax], al; push eax; call ebx 
0x50505480  # add byte [eax-0x73], dl; xchg byte [ebx+eax], dl; add byte [eax], al; push eax; call ebx 
0x505269d9  # add byte [eax-0x18], dl; lock ret 
0x5050408f  # add byte [eax-0x17], dl; add byte [edx], 0x00; add byte [ebp-0x00021773], cl; call [ecx+0x68] 
0x5050cd8b  # add byte [eax-0x17], dl; ret 
0x50516bb2  # add byte [eax-0x01], dl; adc eax, 0x5054A028; ret 
0x50537783  # add byte [eax-0x01], dl; adc eax, 0x5054A02C; pop ebp; ret 
0x50546746  # add byte [eax-0x01], dl; adc eax, 0x5054A02C; jmp [0x5055DF84] 
0x5050c8d7  # add byte [eax-0x01], dl; adc eax, 0x5054A04C; xor eax, eax; retn 0x0008 
0x50503074  # add byte [eax-0x01], dl; adc eax, 0x5054A04C; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x5050643b  # add byte [eax-0x01], dl; adc eax, 0x5054A074; mov [0x5055C970], eax; test eax, eax; jne 0x5050644C; ret 
0x50506517  # add byte [eax-0x01], dl; adc eax, 0x5054A084; retn 0x0004 
0x50506563  # add byte [eax-0x01], dl; adc eax, 0x5054A084; retn 0x0008 
0x50506585  # add byte [eax-0x01], dl; adc eax, 0x5054A190; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50501236  # add byte [eax-0x01], dl; xor eax, 0x5055C93C; push 0x00001A00; call [0x5054A034] 
0x5052f106  # add byte [eax-0x01], dl; push ecx; sbb al, 0x6A; call [edi-0x01] 
0x5050c7fe  # add byte [eax-0x01], dl; jne 0x5050C80F; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7fe  # add byte [eax-0x01], dl; jne 0x5050C80F; call [0x5054A04C] 
0x50541438  # add byte [eax-0x01], dl; jne 0x50541455; call esi 
0x50539e34  # add byte [eax-0x01], dl; jne 0x50539E59; call esi 
0x5052e12b  # add byte [eax-0x01], dl; jnbe 0x5052E138; call [esi] 
0x505053d5  # add byte [eax-0x01], dl; rcl [edi-0x01], cl; jne 0x505053AD; lea eax, [esi+0x00000194]; push eax; call ebx 
0x505053e2  # add byte [eax-0x01], dl; rcl [edi-0x01], cl; jne 0x505053CA; lea eax, [esi+0x00000214]; push eax; call ebx 
0x50510833  # add byte [eax-0x01], dl; xlatb; push ebx; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x50548491  # add byte [ecx+0x50], dl; cmp [ebp-0x7C], ecx; je 0x505484EB; push 0x80000001; call esi 
0x505076b5  # add byte [ecx+0x50], dl; mov [ebp-0x1C], edi; mov [ebp-0x20], 0x00000004; mov [ebp-0x2C], esi; call [0x5055C9A0] 
0x5052e597  # add byte [edx+0x50], dl; call [ecx+0x08] 
0x505073cc  # add byte [ebx+0x39], dl; cmp byte [esp+edi-0x75], dh; add byte [ebx+0x588B2078], cl; sbb al, 0x85; push [eax+esi+0x57]; call [0x5054A03C] 
0x5051357d  # add byte [ebx+0x50], dl; call edi 
0x5053d667  # add byte [ebx+0x51], dl; call esi 
0x50502fad  # add byte [ebx+0x56], dl; push 0x00003A98; call [0x5054A048] 
0x50539a6e  # add byte [ebx+0x56], dl; mov esi, [0x5054A0D4]; push edi; call esi 
0x50516239  # add byte [ebx+0x56], dl; mov esi, [eax+0x18]; call [esi] 
0x50533c6f  # add byte [ebx+0x56], dl; call [ebp+0x10] 
0x50542416  # add byte [ebx+0x6A], dl; or bh, bh; adc eax, 0x5054A180; push eax; call [0x5054A07C] 
0x50501a3c  # add byte [ebx+0x74], dl; jno 0x50501A40; jne 0x50501A4F; call [0x5054A03C] 
0x5050825f  # add byte [ebx-0x7D], dl; sal byte [eax], 0x50; push edi; call [0x5055CA2C] 
0x505087db  # add byte [ebx-0x77], dl; sahf; movsb; add byte [eax], al; add byte [ecx-0x00015B7B], cl; call [ebx-0x73] 
0x5054844b  # add byte [ebx-0x73], dl; inc ebp; mov word [eax+0x6A], ss; add bh, bh; jne 0x505483DE; call [0x5054A018] 
0x505033b8  # add byte [ebx-0x15], dl; retn 0x1468 
0x5050716b  # add byte [ebx-0x01], dl; adc eax, 0x5054A098; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx 
0x5050d5c0  # add byte [ebp-0x73], dl; xchg [eax+0x50000006], esp; lea eax, [esi+0x14]; push eax; call ebx 
0x5050134c  # add byte [ebp-0x18], dl; retn 0xFFFD 
0x505071dc  # add byte [esi+0x56], dl; push 0x0000000A; call [0x5055CA00] 
0x505010ad  # add byte [esi+0x57], dl; mov edi, [0x5054A0D4]; mov esi, 0x5055520C; push esi; call edi 
0x5050298a  # add byte [esi+0x57], dl; call [0x5054A04C]; push edi; call [0x5054A03C] 
0x5050298a  # add byte [esi+0x57], dl; call [0x5054A04C] 
0x50546cbe  # add byte [esi+0x74], dl; adc byte [esi-0x01], dl; adc eax, 0x5055DF10; push eax; call [0x5055DFE4] 
0x50549126  # add byte [esi+0x74], dl; cmp bh, bh; jne 0x50549139; call [0x5054A03C] 
0x50510ff9  # add byte [esi-0x7D], dl; sal byte [eax+edx*2], 0x6A; inc eax; call [0x5054A100] 
0x50506a47  # add byte [esi-0x77], dl; jo 0x50506A5C; call [0x5054A03C] 
0x50506ca4  # add byte [esi-0x77], dl; jo 0x50506CB9; call [0x5054A040] 
0x50506a85  # add byte [esi-0x77], dl; jo 0x50506A9E; call [0x5054A03C] 
0x50506ce2  # add byte [esi-0x77], dl; jo 0x50506CFB; call [0x5054A040] 
0x50506ac3  # add byte [esi-0x77], dl; jo 0x50506AE0; call [0x5054A03C] 
0x50506b01  # add byte [esi-0x77], dl; jo 0x50506B22; call [0x5054A03C] 
0x50506d5e  # add byte [esi-0x77], dl; jo 0x50506D7F; call [0x5054A040] 
0x50506b3f  # add byte [esi-0x77], dl; jo 0x50506B64; call [0x5054A03C] 
0x50506d9c  # add byte [esi-0x77], dl; jo 0x50506DC1; call [0x5054A040] 
0x50506b7b  # add byte [esi-0x77], dl; jo 0x50506BA4; call [0x5054A03C] 
0x50506dd8  # add byte [esi-0x77], dl; jo 0x50506E01; call [0x5054A040] 
0x50548e26  # add byte [esi-0x75], dl; xor eax, 0x5054A03C; call esi 
0x5050104b  # add byte [esi-0x75], dl; xor eax, 0x5054A15C; push edi; mov edi, 0x5055520C; push edi; call esi 
0x50512955  # add byte [esi-0x75], dl; ret 
0x50546c96  # add byte [esi-0x39], dl; inc ebp; cld; add al, 0x00; add byte [eax], al; call eax 
0x5052792e  # add byte [esi-0x18], dl; add eax, 0x83000000; les ecx, [esi+ebx*2]; ret 
0x50521f34  # add byte [esi-0x18], dl; sub ebp, [edx-0x3B7C0001]; adc al, 0x5E; ret 
0x5051792f  # add byte [esi-0x18], dl; dec edx; retn 0x0001 
0x50513c75  # add byte [esi-0x18], dl; xchg eax, esi; daa; add byte [eax], al; pop ecx; ret 
0x50547818  # add byte [esi-0x18], dl; mov byte [0x3B000002], al; ret 
0x5050b007  # add byte [esi-0x18], dl; retn 0x027D 
0x5051dac5  # add byte [esi-0x18], dl; ret 
0x50507e94  # add byte [esi-0x18], dl; sal dh, 1; add eax, [eax]; mov ebx, [0x5054A188]; call ebx 
0x50514988  # add byte [esi-0x18], dl; xlatb; jnle 0x5051498E; add byte [ecx+0x59], bl; ret 
0x5052babd  # add byte [esi-0x18], dl; cld; push 0xC4830000; adc al, 0x5E; ret 
0x50517faf  # add byte [esi-0x01], dl; xor cl, byte [ebx+0x32FFB455]; push eax; call [ecx+0x28] 
0x505485ab  # add byte [edi+0x50], dl; test bl, 0x01; je 0x50548735; push 0x80000001; call [0x5054A000] 
0x50548a44  # add byte [edi+0x50], dl; test bl, 0x01; je 0x50548A65; push 0x80000001; call [0x5054A004] 
0x50511010  # add byte [edi+0x53], dl; lea edi, [esi+0x20]; push edi; call [0x5054A050] 
0x5051f090  # add byte [edi+0x57], dl; push eax; call [ecx+0x04] 
0x5050fc29  # add byte [edi+0x57], dl; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x5051e8fc  # add byte [edi+0x6A], dl; add [ecx+0x00E88045], ecx; loopne 0x5051E906; call [edi+0x33] 
0x5051a67c  # add byte [edi-0x75], dl; ret 
0x50513c50  # add byte [edi-0x18], dl; jl 0x14D43C59; cmp byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x50504e11  # add byte [edi-0x18], dl; insb; enter 0xFFFF, 0x3B; ret 
0x50537a55  # add byte [edi-0x01], dl; adc eax, 0x5054A048; push [ebp+0x08]; call [0x5054A1B0] 
0x505053cb  # add byte [edi-0x01], dl; jne 0x505053AC; lea eax, [esi+0x00000114]; push eax; call ebx 
0x5050c723  # add byte [edi-0x01], dl; jne 0x5050C718; call [0x5054A04C] 
0x50531a43  # add byte [ecx+0x33], bl; rol byte [eax+0x5F], 0x5E; pop ebp; retn 0x000C 
0x5051391f  # add byte [ecx+0x33], bl; rcr byte [ecx+0x5B], 0x5F; pop esi; leave; retn 0x000C 
0x5051368c  # add byte [ecx+0x33], bl; rcr byte [ecx+0x5E], 0x5F; pop ebx; leave; retn 0x000C 
0x505165de  # add byte [ecx+0x3B], bl; ret 
0x5053c273  # add byte [ecx+0x50], bl; call [0x5054A21C]; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x5053c273  # add byte [ecx+0x50], bl; call [0x5054A21C] 
0x5053a692  # add byte [ecx+0x50], bl; call [0x5054A060]; test eax, eax; jne 0x5053A6A9; call [0x5054A0E4] 
0x5053a692  # add byte [ecx+0x50], bl; call [0x5054A060] 
0x50513193  # add byte [ecx+0x59], bl; xor eax, eax; pop ebx; pop esi; retn 0x0008 
0x50542fac  # add byte [ecx+0x59], bl; xor eax, eax; pop esi; pop ebp; ret 
0x50513fae  # add byte [ecx+0x59], bl; xor eax, eax; pop edi; pop esi; pop ebx; retn 0x0008 
0x505132a1  # add byte [ecx+0x59], bl; xor eax, eax; pop edi; pop esi; retn 0x0008 
0x5051c961  # add byte [ecx+0x59], bl; pop ebp; ret 
0x5053a63b  # add byte [ecx+0x59], bl; pop edi; pop esi; pop ebx; leave; ret 
0x5051f3de  # add byte [ecx+0x59], bl; pop edi; mov eax, esi; pop esi; pop ebx; ret 
0x505271c8  # add byte [ecx+0x59], bl; jne 0x505271D1; xor eax, eax; pop esi; ret 
0x5051f2d8  # add byte [ecx+0x59], bl; test eax, eax; je 0x5051F2E3; mov eax, [eax+0x08]; ret 
0x5050c6f1  # add byte [ecx+0x59], bl; test eax, eax; je 0x5050C71F; push edi; mov byte [eax], 0x00; call [0x5054A03C] 
0x50528383  # add byte [ecx+0x59], bl; test eax, eax; jne 0x50528390; mov eax, 0x5054BCD4; ret 
0x5050ba06  # add byte [ecx+0x59], bl; test eax, eax; jne 0x5050BA2C; push [esp+0x30]; call [0x5054A03C] 
0x50515ec5  # add byte [ecx+0x59], bl; test eax, eax; jne 0x50515E99; pop ebx; ret 
0x50524217  # add byte [ecx+0x59], bl; mov ecx, [esp+0x04]; mov [eax+0x04], ecx; ret 
0x5053686a  # add byte [ecx+0x59], bl; mov eax, esi; pop esi; pop ebx; leave; ret 
0x50511379  # add byte [ecx+0x59], bl; retn 0x0008 
0x505115a1  # add byte [ecx+0x59], bl; ret 
0x50524e6c  # add byte [ecx+0x59], bl; mov [eax+0x04], 0x00001000; ret 
0x50515825  # add byte [ecx+0x59], bl; leave; ret 
0x50531a1c  # add byte [ecx+0x59], bl; call [0x5054A044] 
0x50542495  # add byte [ecx+0x59], bl; push [ebp-0x04]; push 0x00000000; call [0x5054A180]; push eax; call [0x5054A084] 
0x50542495  # add byte [ecx+0x59], bl; push [ebp-0x04]; push 0x00000000; call [0x5054A180] 
0x50519724  # add byte [ecx+0x5B], bl; leave; ret 
0x50536013  # add byte [ecx+0x5D], bl; ret 
0x50516008  # add byte [ecx+0x5E], bl; ret 
0x50541212  # add byte [ecx+0x5F], bl; pop esi; pop ebx; mov esp, ebp; pop ebp; ret 
0x50538f40  # add byte [ecx+0x6A], bl; add bh, bh; adc eax, 0x5054A1A8; push 0x50550FE0; call [0x5054A1A4] 
0x5053352b  # add byte [ecx+0x6A], bl; call [ebx+0x53] 
0x50522bbf  # add byte [ecx+0x75], bl; in al, 0x8B; ret 
0x50537680  # add byte [ecx-0x7D], bl; cld; add byte [ebx-0x007A9782], cl; je 0x505376A7; push edi; call [0x5054A0D4] 
0x505374f2  # add byte [ecx-0x7D], bl; cld; add bh, bh; jbe 0x50537563; call [0x5054A15C] 
0x50514244  # add byte [ecx-0x7D], bl; clc; pop es; jnbe 0x5051427C; jmp [0x50514286+eax*4] 
0x505142e4  # add byte [ecx-0x7D], bl; clc; pop es; jnbe 0x5051432A; jmp [0x5051434A+eax*4] 
0x50537ba9  # add byte [ecx-0x7B], bl; sal byte [esp+ecx+0x6A], 0x00; push 0x00000002; push 0x00000000; call [0x5055E270] 
0x50513c10  # add byte [ecx-0x7B], bl; sal byte [ebp+0x02], 0x5E; ret 
0x5051c39e  # add byte [ecx-0x7B], bl; sar byte [esi+0x11], 0x8B; ret 
0x50531cd9  # add byte [ecx-0x77], bl; sbb eax, 0x5055D530; push 0x5055D480; call [0x5054A19C] 
0x5051e499  # add byte [ecx-0x77], bl; jne 0x5051E486; call edi 
0x50516a43  # add byte [ecx-0x75], bl; inc esp; and al, 0x0C; mov [esi], eax; pop esi; ret 
0x5051649d  # add byte [ecx-0x75], bl; xchg [eax+0x3B000000], edi; ret 
0x50513a7c  # add byte [ecx-0x75], bl; ret 
0x5051e87f  # add byte [ecx-0x5D], bl; sub al, 0xCF; push ebp; push eax; ret 
0x50532374  # add byte [ecx-0x3D], bl; cmp ecx, [0x50555D00]; jne 0x50532381; rep ret 
0x505364ad  # add byte [ecx-0x3D], bl; push esi; push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x5051684c  # add byte [ecx-0x3D], bl; or eax, 0xFFFFFFFF; ret 
0x5053755a  # add byte [ecx-0x3D], bl; mov edi, edi; push esi; push edi; call [0x5054A0E4] 
0x50535fe3  # add byte [ecx-0x15], bl; or al, byte [ebx-0x00A9DF3A]; adc eax, 0x5054A020; pop esi; pop ebp; ret 
0x50536753  # add byte [ebx+0x5E], bl; pop edi; retn 0x0010 
0x5050515a  # add byte [ebx+0x5F], bl; pop esi; pop ebp; retn 0x0008 
0x5050feb2  # add byte [ebx+0x5F], bl; pop esi; leave; retn 0x0014 
0x5052a1f6  # add byte [ebx-0x37], bl; ret 
0x50532379  # add byte [ebp+0x55], bl; push eax; jne 0x50532381; rep ret 
0x50538f1a  # add byte [ebp+0x55], bl; push eax; mov [ebp-0x00000328], eax; mov eax, [0x50555D04]; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50542f18  # add byte [ebp+0x5E], bl; pop edi; retn 0x0010 
0x50543533  # add byte [ebp+0x5F], bl; pop esi; pop ebx; mov esp, ebp; pop ebp; ret 
0x5050a8d7  # add byte [ebp+0x5F], bl; pop esi; pop ebx; retn 0x0004 
0x50516fe2  # add byte [esi+0x5D], bl; pop ebx; ret 
0x5051f2be  # add byte [esi+0x5D], bl; ret 
0x50516959  # add byte [esi+0x5F], bl; ret 
0x5053e3b3  # add byte [esi+0x74], bl; pop es; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x505168aa  # add byte [esi-0x3D], bl; mov eax, [esp+0x04]; test eax, eax; je 0x505168BC; mov eax, [eax+0x000000E4]; ret 
0x50516903  # add byte [esi-0x3D], bl; mov eax, [esp+0x04]; test eax, eax; jne 0x5051690F; ret 
0x5052a562  # add byte [esi-0x37], bl; ret 
0x50508f70  # add byte [edi+0x33], bl; rcr byte [ebx+0x5E], 0x5D; retn 0x0008 
0x50515c53  # add byte [edi+0x40], bl; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x5050998b  # add byte [edi+0x5B], bl; pop esi; retn 0x0008 
0x5053efb7  # add byte [edi+0x5B], bl; pop esi; leave; ret 
0x5051a38d  # add byte [edi+0x5B], bl; ret 
0x505033e0  # add byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0010 
0x50501dfa  # add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0008 
0x50514ce2  # add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50523418  # add byte [edi+0x5E], bl; pop ebp; pop ebx; ret 
0x5050a7e9  # add byte [edi+0x5E], bl; pop ebp; retn 0x0004 
0x5051c3e7  # add byte [edi+0x5E], bl; pop ebp; ret 
0x50509d12  # add byte [edi+0x5E], bl; retn 0x0008 
0x50526510  # add byte [edi-0x77], bl; xor eax, 0x5055D3E8; pop esi; pop ebx; leave; ret 
0x5052b414  # add byte [edi-0x77], bl; or [eax+edx+0x00], 0x00000000; pop esi; leave; ret 
0x50534394  # add byte [edi-0x3D], bl; mov word [edi], dx; mov eax, [esp+0x08]; pop edi; ret 
0x5052f4fa  # add byte [edi-0x37], bl; ret 
0x50541129  # add byte [esi+0x39], ah; dec eax; sbb byte [edi], cl; xchg eax, esp; retn 0xC28B 
0x5050626e  # add byte [esi+0x3B], ah; ret 
0x50513554  # add byte [eax+0x00], ch; add al, byte [eax]; add bh, bh; jne 0x50513569; push esi; call [0x5054A04C] 
0x5050c62f  # add byte [eax+0x04], ch; lodsb; push esp; push eax; push edi; call ebx 
0x5050c549  # add byte [eax+0x0C], ch; lodsb; push esp; push eax; push edi; call ebx 
0x5050c503  # add byte [eax+0x28], ch; lodsb; push esp; push eax; push edi; call ebx 
0x505010e4  # add byte [eax+0x3C], ch; leave; push ebp; push eax; mov edi, eax; call esi 
0x50531651  # add byte [eax+0x40], ch; pop ds; add byte [eax], al; push esi; call [eax+0x04] 
0x5052e231  # add byte [eax+0x40], ch; pop ds; add byte [eax], al; push edi; call [eax+0x04] 
0x5052ef7f  # add byte [eax+0x41], ch; pop ds; add byte [eax], al; push esi; call [eax+0x04] 
0x5052e2d8  # add byte [eax+0x41], ch; pop ds; add byte [eax], al; push edi; call [eax+0x04] 
0x505064a2  # add byte [eax+0x70], ch; leave; push ebp; push eax; call [0x5054A18C]; ret 
0x505064a2  # add byte [eax+0x70], ch; leave; push ebp; push eax; call [0x5054A18C] 
0x50548247  # add byte [eax-0x0080], ch; add byte [eax], al; add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x50546727  # add byte [eax-0x0080], ch; loopne 0x50546781; push eax; call [0x5054A0D4] 
0x5050beae  # add byte [eax-0x6C], ch; stosd; push esp; push eax; push edi; call [0x5054A0B8] 
0x5054294d  # add byte [eax-0x68], ch; and byte [ebp+0x50], dl; call [0x5054A08C] 
0x50547e75  # add byte [eax-0x58], ch; stosd; push esp; push eax; push ebx; call esi 
0x50546380  # add byte [eax-0x50], ch; and edx, [ebp+0x50]; call [0x5054A08C]; push ebx; mov [0x5055E078], eax; call esi 
0x50546380  # add byte [eax-0x50], ch; and edx, [ebp+0x50]; call [0x5054A08C] 
0x505374c3  # add byte [eax-0x40], ch; push cs; push ebp; push eax; push [ebp-0x1C]; call ebx 
0x50503069  # add byte [eax-0x38], ch; mov byte [0x858D5054], al; test byte [eax], al; add byte [eax], al; push eax; call [0x5054A04C] 
0x50522ca0  # add byte [eax-0x2C], ch; add byte [eax], al; add byte [ebx], dh; fisttp [ebp-0x0000C37B]; call [ebx+0x50] 
0x5054033c  # add byte [eax-0x17], ch; std; add byte [eax], al; call [0x5054A240] 
0x505039a1  # add byte [eax-0x04], ch; mov byte [0xFF535054], al; xlatb; push ebx; call [0x5054A03C] 
0x50506471  # add byte [eax-0x01], ch; inc [eax]; add byte [edx+0x00], ch; call [0x5054A074] 
0x5050825d  # add byte [edx+0x00], ch; push ebx; add eax, 0x30; push eax; push edi; call [0x5055CA2C] 
0x5052672f  # add byte [edx+0x00], ch; push edi; call [eax+0x08] 
0x50515c77  # add byte [edx+0x00], ch; push edi; call [edi+0x00000244] 
0x50547e73  # add byte [edx+0x00], ch; push 0x5054ABA8; push ebx; call esi 
0x50507354  # add byte [edx+0x00], ch; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x50547e3f  # add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x505481d0  # add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x5054A004] 
0x50547eb6  # add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x505480a9  # add byte [edx+0x00], ch; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x5054A004] 
0x50506476  # add byte [edx+0x00], ch; call [0x5054A074] 
0x50543878  # add byte [edx+0x00], ch; push [ebp+0x18]; push [ebp-0x1C]; push 0x00000009; push [ebp+0x1C]; call esi 
0x5053850f  # add byte [edx+0x00], ch; push [esi-0x04]; call [0x5054A1DC] 
0x50508b84  # add byte [edx+0x01], ch; push 0x00000000; call [0x5054A240] 
0x50507356  # add byte [edx+0x01], ch; push [edi+0x000037F4]; call [0x5055CA14] 
0x5051e2d7  # add byte [edx+0x02], ch; push eax; push eax; push 0x40000000; push [esp+0x20]; call [0x5054A0A8] 
0x50537bb0  # add byte [edx+0x02], ch; push 0x00000000; call [0x5055E270]; xor eax, eax; pop ebp; ret 
0x50537bb0  # add byte [edx+0x02], ch; push 0x00000000; call [0x5055E270] 
0x50546826  # add byte [edx+0x02], ch; push [0x5055E07C]; call esi 
0x5050fbc3  # add byte [edx+0x03], ch; push edi; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5053d78b  # add byte [edx+0x08], ch; push [0x5055D69C]; call [0x5054A07C] 
0x50504583  # add byte [edx+0x20], ch; push edi; lea eax, [ebp+0x08]; push eax; call [0x5054A04C] 
0x5050eaa0  # add byte [edx+0x40], ch; add eax, 0x00000AC0; push eax; lea eax, [ebp-0x54]; push eax; call [0x5054A04C] 
0x5050c6d0  # add byte [edx+0x40], ch; push esi; push eax; call [0x5054A04C] 
0x50508014  # add byte [edx+0x5A], ch; push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x50547a4c  # add byte [edx-0x31], dh; pop edi; pop esi; retn 0x000C 
0x505479fe  # add byte [edx-0x18], dh; xor eax, eax; retn 0x0004 
0x5052428b  # add byte [ecx+eax+0x40], dh; add ecx, 0x04; dec edx; jne 0x50524289; ret 
0x50545f27  # add byte [ebp+eax+0x0D], dh; add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x50545b7c  # add byte [ebp+eax+0x0D], dh; add byte [eax], dl; add byte [eax], al; ret 
0x5050c784  # add byte [ebp+eax+0x33], dh; rol byte [eax-0x15], 0x06; mov eax, [eax+0x000032D8]; retn 0x0004 
0x5051fcbd  # add byte [ebp+eax+0x6A], dh; add ebx, [eax-0x15]; jnp 0x10D50D0A; or bl, byte [ecx+0x0307E283]; retn 0xF8C1 
0x50540e14  # add byte [edi+eax+0x40], dh; inc ecx; cmp eax, [ebp+0x0C]; jc 0x50540E12; pop ebp; ret 
0x505077a0  # add byte [edi+eax+0x50], dh; call [0x5055C988] 
0x50507785  # add byte [edi+eax+0x50], dh; call [0x5055C99C] 
0x5053310f  # add byte [edi+eax-0x75], dh; dec ebp; lock and [ecx+0x70], 0xFFFFFFFD; pop ebx; leave; ret 
0x50532b66  # add byte [edi+eax-0x75], dh; dec ebp; clc; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x5051ab96  # add byte [eax+ecx+0x53], dh; push esi; call [eax] 
0x50537cd9  # add byte [eax+ecx+0x6A], dh; or al, ch; inc ecx; sldt word [eax]; pop ecx; ret 
0x50508398  # add byte [ecx+ecx-0x01], dh; jne 0x505083B2; call ebx 
0x505083a7  # add byte [ecx+ecx-0x01], dh; jne 0x505083C5; call ebx 
0x505083b6  # add byte [ecx+ecx-0x01], dh; jne 0x505083D8; call ebx 
0x50505bee  # add byte [edx+ecx+0x68], dh; test eax, 0xE980042F; mov edx, 0x8B000001; inc ebp; or byte [ebx], bh; ret 
0x50537fcc  # add byte [edx+ecx-0x73], dh; inc edi; or al, 0x50; call [0x5054A154] 
0x5050997f  # add byte [edx+ecx-0x39], dh; xchg byte [eax+0x01000000], bl; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; retn 0x0008 
0x50545ed5  # add byte [esp+ecx+0x3B], dh; ret 
0x50534256  # add byte [esp+ecx-0x09], dh; retn 0x0000 
0x505052ab  # add byte [esp+ecx-0x01], dh; jne 0x50505291; call ebx 
0x5050650f  # add byte [ebp+ecx-0x01], dh; je 0x50506539; add al, 0x6A; add byte [eax-0x01], dl; adc eax, 0x5054A084; retn 0x0004 
0x5050655b  # add byte [ebp+ecx-0x01], dh; je 0x50506585; or byte [edx+0x00], ch; push eax; call [0x5054A084]; retn 0x0008 
0x5050655b  # add byte [ebp+ecx-0x01], dh; je 0x50506585; or byte [edx+0x00], ch; push eax; call [0x5054A084] 
0x505107aa  # add byte [ebp+ecx-0x01], dh; jne 0x5051075C; call edi 
0x50510419  # add byte [edi+ecx+0x53], dh; push ebx; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x50534375  # add byte [edx+edx-0x09], dh; retn 0x0000 
0x5050844d  # add byte [edx+edx-0x01], dh; jne 0x5050846F; push esi; call [0x5054A050] 
0x5051e39c  # add byte [esp+edx+0x48], dh; je 0x5051E3AE; dec eax; je 0x5051E3A9; or eax, 0xFFFFFFFF; ret 
0x505083f9  # add byte [esi+edx-0x01], dh; jne 0x5050840F; push esi; call [0x5054A050] 
0x50508415  # add byte [esi+edx-0x01], dh; jne 0x5050842F; push esi; call [0x5054A050] 
0x50508431  # add byte [esi+edx-0x01], dh; jne 0x5050844F; push esi; call [0x5054A050] 
0x50546faf  # add byte [edi+edx-0x01], dh; jne 0x50546FC1; push [ebp+0x08]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50508145  # add byte [edx+ebx+0x2B], dh; retn 0x1174 
0x50545ece  # add byte [ebx+ebx+0x3D], dh; add byte [eax+0x00], al; add byte [esp+ecx+0x3B], dh; ret 
0x505052bd  # add byte [eax-0x01], dh; jne 0x5050529B; call [0x5054A280] 
0x5050fb91  # add byte [esp+0x6A], dh; add al, 0x57; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x50503cc9  # add byte [edi+0x3B], dh; sal [eax+edi+0x68], cl; test eax, 0xEB80042F; and [ebx], edi; ret 
0x5052de32  # add byte [edx+ebp-0x75], dh; ret 
0x50504fa7  # add byte [ebx+edi-0x18], dh; ret 
0x50546b5e  # add byte [esp+eax*2-0x01], dh; jne 0x50546B70; call [0x5054A03C] 
0x5053ac4b  # add byte [eax+0x3B], dh; retn 0x850F 
0x50515d22  # add byte [edx+ebx*4+0x5E], dh; pop ebx; pop edi; leave; ret 
0x505064ef  # add byte [ebp+esi*8-0x01], dh; je 0x50506519; add al, 0x6A; or byte [eax-0x01], dl; adc eax, 0x5054A07C; retn 0x0004 
0x50506537  # add byte [ebp+esi*8-0x01], dh; je 0x50506561; or byte [edx+0x08], ch; push eax; call [0x5054A07C]; retn 0x0008 
0x50506537  # add byte [ebp+esi*8-0x01], dh; je 0x50506561; or byte [edx+0x08], ch; push eax; call [0x5054A07C] 
0x50524782  # add byte [ebp+0x03], dh; xor eax, eax; ret 
0x5051488f  # add byte [ebp+0x05], dh; neg eax; sbb eax, eax; ret 
0x5052f36b  # add byte [ebp+0x0A], dh; test byte [esi+0x20], 0x02; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x50511092  # add byte [ebp+0x10], dh; push esi; call [0x5054A070] 
0x5050b1d9  # add byte [ebp+0x10], dh; push edi; call [0x5054A03C] 
0x5052dbe9  # add byte [ebp+0x11], dh; mov esi, [esi+0x08]; push [ebp+0x00000198]; mov eax, [esi]; push esi; call [eax+0x1C] 
0x505031f5  # add byte [ebp+0x12], dh; and [esi+0x000000DC], 0xFFFFFFF7; push 0x5055C960; call [0x5054A0D4] 
0x505016c7  # add byte [ebp+0x12], dh; call [0x5054A044] 
0x50501567  # add byte [ebp+0x15], dh; call [0x5054A044] 
0x50542127  # add byte [ebp+0x17], dh; lea ebx, [esi+0x0C]; push ebx; call [0x5054A020] 
0x50503db3  # add byte [ebp+0x18], dh; mov esi, 0x5055C960; push esi; call [0x5054A0D4] 
0x50507ee8  # add byte [ebp+0x18], dh; call ebx 
0x50501726  # add byte [ebp+0x19], dh; cmp [esp+0x10], 0x00000000; je 0x50501742; call [0x5054A044] 
0x5050646d  # add byte [ebp+0x1A], dh; push 0x00000000; push 0x0000FFFF; push 0x00000000; call [0x5054A074] 
0x5052f3c2  # add byte [ebp+0x1A], dh; cmp [esp+0x04], 0x00008000; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C] 
0x50537730  # add byte [ebp+0x27], dh; push esi; push [0x50555FB4]; mov esi, [0x5054A030]; call esi 
0x50508d13  # add byte [ebp+0x2B], dh; mov eax, ecx; push [eax+0x04]; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50501f88  # add byte [ebp+0x36], dh; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x5052f30e  # add byte [ebp+0x3B], dh; push 0xFFFFFFFF; push [edi+0x10]; call [0x5054A144] 
0x50503d4d  # add byte [ebp+0x7E], dh; push 0x5055C960; call [0x5054A15C] 
0x50528e18  # add byte [ebp-0x3C], dh; mov eax, edi; pop edi; pop esi; ret 
0x50524e46  # add byte [ebp-0x28], dh; mov eax, [ebp+0x08]; pop ebp; ret 
0x5051cfbf  # add byte [ebp-0x25], dh; xor eax, eax; inc eax; pop edi; leave; ret 
0x50515c58  # add byte [ebp-0x15], dh; ret 
0x5051ca7f  # add byte [ebp-0x12], dh; and [esi+0x04], 0x00000000; and [esi+0x08], 0x00000000; pop esi; ret 
0x50509ef0  # add byte [esi+0x1C], dh; push [ebp+0x10]; lea eax, [ebp-0x44]; push 0x5054AB24; push eax; call [0x5054A03C] 
0x50537a71  # add byte [edi+0x04], dh; test eax, eax; je 0x50537A56; pop edi; pop ebp; ret 
0x5052f3cc  # add byte [ebp+0x10], bh; push [esi+0x08]; call [0x5054A13C]; mov [esi+0x18], 0x00000001; ret 
0x5052f3cc  # add byte [ebp+0x10], bh; push [esi+0x08]; call [0x5054A13C] 
0x5051eb37  # add byte [edi+0x75], bh; add eax, 0xC940C033; ret 
0x5051cb3e  # add byte [edi-0x55], bh; pop edi; pop esi; pop ebx; pop ebp; ret 
0x5053f05c  # add byte [edi-0x2B], bh; pop esi; pop ebx; pop ebp; ret 
0x5053f010  # add byte [edi-0x19], bh; pop esi; pop ebp; ret 
0x5050c66d  # add byte [eax-0x15000000], al; push 0x5054ABF8; push edi; call ebx 
0x5053d664  # add byte [eax+0x51530000], al; call esi 
0x50536010  # add byte [eax+0x5D590000], al; ret 
0x50535fe0  # add byte [eax-0x14A70000], al; or al, byte [ebx-0x00A9DF3A]; adc eax, 0x5054A020; pop esi; pop ebp; ret 
0x505016c4  # add byte [eax+0x12750000], al; call [0x5054A044] 
0x50501564  # add byte [eax+0x15750000], al; call [0x5054A044] 
0x50501723  # add byte [eax+0x19750000], al; cmp [esp+0x10], 0x00000000; je 0x50501742; call [0x5054A044] 
0x5052f3c9  # add byte [eax+0x107D0000], al; push [esi+0x08]; call [0x5054A13C]; mov [esi+0x18], 0x00000001; ret 
0x5052f3c9  # add byte [eax+0x107D0000], al; push [esi+0x08]; call [0x5054A13C] 
0x50545c16  # add byte [eax-0x7C3D0000], al; enter 0xC340, 0x0D; inc eax; add byte [eax], 0x00; ret 
0x50546791  # add byte [eax-0x29010000], al; push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x50546357  # add byte [eax-0x29010000], al; mov ebx, eax; test edi, edi; je 0x50546371; push edi; call [0x5054A03C] 
0x5051f676  # add byte [eax-0x7CFFFFFD], al; mov byte [0x00038FF8], al; add byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x505271c4  # add byte [eax+0x5900303C], al; pop ecx; jne 0x505271D1; xor eax, eax; pop esi; ret 
0x5050f8a2  # add byte [eax-0x1FA276AA], al; call [0x5054A0A8]; mov esi, eax; cmp esi, 0xFFFFFFFF; jne 0x5050F8D2; call [0x5054A0E4] 
0x5050f8a2  # add byte [eax-0x1FA276AA], al; call [0x5054A0A8] 
0x50545f2d  # add byte [eax-0x36A4A1A1], al; ret 
0x50532ed0  # add byte [eax+0x5F5EC475], al; pop ebx; xor eax, eax; ret 
0x5054962f  # add byte [eax-0x7CB7FA87], al; enter 0x40F8, 0x85; sar byte [edi+0x4D], 0x8B; ret 
0x50532b62  # add byte [eax+0x7400FC7D], al; pop es; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x50548738  # add byte [eax-0x00018217], al; call [edi-0x73] 
0x50548433  # add byte [eax+0x458DE7EB], al; mov word [eax-0x01], ss; jne 0x505483C6; call [0x5054A014] 
0x5054849c  # add byte [eax-0x3F7A2901], al; jne 0x505484BB; push [ebp-0x0080]; push [ebp-0x78]; call [0x5054A014] 
0x50547ec0  # add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x5051f86f  # add byte [eax+0x2B42FFFF], al; retn 0xF88B 
0x50546819  # add byte [ecx+0x178EF07D], al; add byte [eax], al; jc 0x50546AEC; push 0x00000002; push [0x5055E07C]; call esi 
0x50527ebc  # add byte [ecx+0x00400CC5], al; add cl, cl; ret 
0x505128cd  # add byte [ecx+0x001014C5], al; add cl, cl; retn 0x0010 
0x505147e8  # add byte [ecx+0x002640C5], al; add cl, cl; retn 0x0020 
0x5052e2f7  # add byte [ecx+0x000450C5], al; add cl, cl; ret 
0x505316eb  # add byte [ecx+0x000188C5], al; add cl, cl; ret 
0x5052d8c5  # add byte [ecx+0x00008CC5], al; add cl, cl; ret 
0x50503265  # add byte [ecx+0x00018CC5], al; add cl, cl; retn 0x0004 
0x50507386  # add byte [ecx+0x00018CC5], al; add cl, cl; retn 0x0008 
0x505130dd  # add byte [ecx+0x000F90C5], al; add cl, cl; retn 0x000C 
0x5051ea6b  # add byte [ecx+0x001F90C5], al; add cl, cl; ret 
0x5050d92d  # add byte [ecx+0x000F94C5], al; add cl, cl; retn 0x000C 
0x5052e8db  # add byte [ecx+0x000198C5], al; add cl, cl; ret 
0x50519650  # add byte [ecx+0x0003A0C5], al; add cl, cl; ret 
0x5051f257  # add byte [ecx+0x004FA0C5], al; add cl, cl; ret 
0x50517bb2  # add byte [ecx+0x0000A8C5], al; add cl, cl; ret 
0x5051a1b9  # add byte [ecx+0x0000B4C5], al; add cl, cl; ret 
0x5052eee1  # add byte [ecx+0x0001E0C5], al; add cl, cl; ret 
0x5050f689  # add byte [ecx+0x001FFCC5], al; add cl, cl; retn 0x000C 
0x505212ff  # add byte [ecx+0x3707D6C6], al; ret 
0x50521e6f  # add byte [ebx+0x07831406], al; in al, dx; pop ecx; pop ecx; ret 
0x50503daa  # add byte [ebx+0x00F7F720], al; add byte [eax+0x00], al; add byte [ebp+0x18], dh; mov esi, 0x5055C960; push esi; call [0x5054A0D4] 
0x5051e8bc  # add byte [ebx+0x55CF2C25], al; push eax; add byte [ecx+0x5E], bl; ret 
0x5050d1f7  # add byte [ebx-0x247AFFDA], al; je 0x5050D27E; push ebx; call [0x5054A03C] 
0x5051ab93  # add byte [ebx+0x08740038], al; push ebx; push esi; call [eax] 
0x50540411  # add byte [ebx+0x6A021045], al; add byte [ebp+0x6A50E845], cl; add cl, byte [ebp-0x74AF07BB]; pop es; push [esi+eax]; call [0x5054A0C0] 
0x505241a1  # add byte [ebx-0x74FF1B9B], al; ret 
0x50504835  # add byte [ebx+0x2B00F465], al; fild word [ebx+0x12720AFB]; call [0x5054A188] 
0x5051ca85  # add byte [ebx+0x5E000866], al; ret 
0x5051f2ba  # add byte [ebx+0x5E002C66], al; pop ebp; ret 
0x50501092  # add byte [ebx+0x000C247C], al; je 0x505010A9; push [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x5053ea9d  # add byte [ebx+0x7600087D], al; int 0x80 
0x5050a901  # add byte [ebx+0x0F000C7D], al; test byte [esi-0x00FFFFFF], ch; jne 0x5050A91B; mov ebx, [0x5054A03C]; call ebx 
0x50501a38  # add byte [ebx+0x53000C7D], al; je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x5050acda  # add byte [ebx+0x7D02107D], al; xor bh, bh; jne 0x5050ACDC; call [0x5054A048] 
0x5054973e  # add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x5054A03C] 
0x50542123  # add byte [ebx+0x7500DC7D], al; pop ss; lea ebx, [esi+0x0C]; push ebx; call [0x5054A020] 
0x5050fc93  # add byte [ebx+0x0F02DC7D], al; lea eax, [edi-0x01000000]; jne 0x5050FC8D; call [0x5054A048] 
0x505104ff  # add byte [ebx+0x7D02E47D], al; xor bh, bh; jne 0x505104FD; call [0x5054A048] 
0x5053f353  # add byte [ebx-0x00020F73], al; call [eax] 
0x5053f35f  # add byte [ebx-0x00020F73], al; jmp [eax] 
0x5050b16f  # add byte [ebx+0x0032D8BB], al; add byte [eax], al; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1d2  # add byte [ebx+0x0032D8BB], al; add byte [eax], al; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x5053cc77  # add byte [ebx-0x0001A343], al; jmp [ebx+0x74] 
0x5053ca2b  # add byte [ebx-0x00018743], al; jmp [ebp+0x74] 
0x5053883c  # add byte [ebx-0x3F7AFB3C], al; je 0x50538853; mov edx, [ebp+0x08]; push 0x00000001; push edx; call [0x5055E13C] 
0x5050edd7  # add byte [ebx+0x5D390CC4], al; cld; je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8] 
0x5050c39a  # add byte [ebx-0x0CC4F33C], al; je 0x5050C3BD; push esi; call [0x5054A03C] 
0x5051638e  # add byte [ebx-0x36A4F33C], al; ret 
0x50517cf2  # add byte [ebx+0x5B5E0CC4], al; leave; ret 
0x5052d4a9  # add byte [ebx-0x36A1F33C], al; ret 
0x5050e594  # add byte [ebx+0x5B5F0CC4], al; leave; ret 
0x5050f460  # add byte [ebx+0x5E5F0CC4], al; pop ebx; leave; retn 0x0004 
0x5052d59d  # add byte [ebx-0x36A0F33C], al; ret 
0x50518064  # add byte [ebx-0x3F7AF33C], al; je 0x50518074; mov ecx, [edi+0x58]; push eax; call [ecx+0x04] 
0x505157e5  # add byte [ebx-0x3F7AF33C], al; jnl 0x505157F1; xor eax, eax; leave; ret 
0x5052513d  # add byte [ebx+0x37890CC4], al; mov eax, edi; pop edi; ret 
0x505219e4  # add byte [ebx+0x7E890CC4], al; push eax; pop edi; pop esi; leave; ret 
0x5053129f  # add byte [ebx+0x7E890CC4], al; pushad; pop edi; pop esi; leave; ret 
0x50525175  # add byte [ebx-0x3874F33C], al; pop edi; pop esi; ret 
0x5050343e  # add byte [ebx+0x458D0CC4], al; aam 0x50; mov [ebp-0x2C], edi; call [0x5054A054] 
0x505065ef  # add byte [ebx+0x458D0CC4], al; loopne 0x50506647; mov [ebp-0x20], esi; call [0x5054A054] 
0x50506882  # add byte [ebx-0x7A72F33C], al; push 0x50FFFFFF; mov [ebp-0x00000098], edi; call [0x5054A054] 
0x5052642a  # add byte [ebx+0x18A30CC4], al; loope 0x50526487; push eax; ret 
0x5052f7e1  # add byte [ebx+0x2AEB0CC4], al; push eax; lea eax, [esi+0x28]; push eax; push esi; call [esi+0x00001030] 
0x5053e023  # add byte [ebx+0x32EB0CC4], al; push 0xFFFFFFF4; call [0x5054A1BC] 
0x5050ec28  # add byte [ebx+0x33EB0CC4], al; lea eax, [ebp-0x00000310]; push eax; lea eax, [ebp-0x64]; push eax; call [0x5054A0CC] 
0x5050f0e2  # add byte [ebx+0x75FF0CC4], al; cld; call [0x5054A0D8] 
0x50518f5f  # add byte [ebx+0x5B5F10C4], al; leave; ret 
0x50515f54  # add byte [ebx+0x5E5F10C4], al; pop ebx; ret 
0x505153b5  # add byte [ebx+0x5E5F10C4], al; pop ebx; leave; ret 
0x505160b5  # add byte [ebx+0x5E5F10C4], al; leave; ret 
0x50536c41  # add byte [ebx-0x3FCCEB3C], al; pop edi; pop esi; pop ebx; leave; ret 
0x50533d04  # add byte [ebx+0x5B5E14C4], al; mov esp, ebp; pop ebp; ret 
0x50516c6e  # add byte [ebx-0x3CA1EB3C], al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516C7D; ret 
0x505156bf  # add byte [ebx+0x5B5F14C4], al; leave; ret 
0x50533d35  # add byte [ebx+0x5E5F14C4], al; pop ebx; mov esp, ebp; pop ebp; ret 
0x505157b9  # add byte [ebx-0x3F7AEB3C], al; jnl 0x505157C4; xor eax, eax; ret 
0x505150dc  # add byte [ebx-0x0FC4E73C], al; jne 0x505150A1; xor eax, eax; pop esi; leave; ret 
0x5051d756  # add byte [ebx+0x468918C4], al; or al, 0x5F; mov [esi+0x10], edx; mov eax, esi; pop esi; ret 
0x505152fc  # add byte [ebx+0x5E5F1CC4], al; ret 
0x505265d2  # add byte [ebx+0x18A31CC4], al; loope 0x5052662F; push eax; pop esi; inc [0x5055D448]; ret 
0x50512d5d  # add byte [ebx+0x458924C4], al; in al, 0x3B; ret 
0x505116b5  # add byte [ebx+0x458928C4], al; adc byte [ebx], bh; ret 
0x5052a9e6  # add byte [ebx+0x5E5F2CC4], al; pop ebx; leave; ret 
0x50513c56  # add byte [ebx-0x3FCCC73C], al; pop edi; inc eax; pop esi; ret 
0x50511b94  # add byte [ebx+0x5959FFC8], al; pop ebx; pop edi; pop esi; leave; retn 0x000C 
0x50533fdc  # add byte [ebx+0x5F5EFFC8], al; pop ebx; leave; ret 
0x5053b4e4  # add byte [ebx+0x5E5FFFC8], al; pop ebx; leave; ret 
0x50541ead  # add byte [ebx+0x5E5FFFC8], al; pop ebp; ret 
0x5053c208  # add byte [ebx-0x55160038], al; add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x5051a751  # add byte [ebx-0x16A10037], al; out dx, al; mov dh, 0xFF; call [edi-0x41] 
0x5051087f  # add byte [ebx+0x458DFFCB], al; mov ah, 0x50; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A0F8] 
0x50504229  # add byte [ebx-0x39C40032], al; je 0x5050425B; lea eax, [ebp-0x00000204]; push eax; call [0x5054A03C] 
0x505473c6  # add byte [ebx-0x00AF0320], al; xor eax, 0x50556FF8; call [0x5054A02C] 
0x5053242a  # add byte [ebx+0x0C7204E9], al; and eax, 0x03; add ecx, eax; jmp [0x50532448+eax*4] 
0x5053279a  # add byte [ebx+0x0C7204E9], al; and eax, 0x03; add ecx, eax; jmp [0x505327B8+eax*4] 
0x5053a8ad  # add byte [ebx+0x1D7402F8], al; cmp eax, 0x03; je 0x5053A8CB; cmp eax, edi; je 0x5053A874; call [0x5054A0E4] 
0x50508857  # add byte [ebx-0x7BF00008], al; sti; add [eax], eax; add byte [ebx], bh; ret 
0x505046c5  # add byte [ebx-0x7AF00008], al; ret 
0x505166e3  # add byte [ebx+0x047501F9], al; mov eax, esi; pop esi; ret 
0x505167ba  # add byte [ebx+0x0B7501F9], al; mov eax, [eax+0x4C]; test eax, eax; je 0x505167DB; mov eax, [eax+0x14]; ret 
0x50520361  # add byte [ebx-0x7AF0FD07], al; retn 0xFFFE 
0x5053292e  # add byte [ebx+0x0C7204F9], al; and eax, 0x03; sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325be  # add byte [ebx+0x0C7204F9], al; and eax, 0x03; sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5053fe53  # add byte [ebx+0x1F7508FB], al; push [edi+0x64]; push ebx; call [ebp-0x20] 
0x50548095  # add byte [ebp-0x577BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x5054806d  # add byte [ebp-0x2F7BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x505399e8  # add byte [ebp+0x500374C0], al; call esi 
0x5050d610  # add byte [ebp+0x2B0474C0], al; shr ebx, 0x0C; call [0x5054A188] 
0x50518185  # add byte [ebp-0x74F78B40], al; dec edi; pop esp; push eax; call [ecx+0x04] 
0x5051809e  # add byte [ebp-0x74F78B40], al; dec edi; js 0x505180F7; call [ecx+0x08] 
0x505181bc  # add byte [ebp-0x74F78B40], al; dec edi; jl 0x50518215; call [ecx+0x14] 
0x50548c4f  # add byte [ebp-0x00F18B40], al; jne 0x50548BF3; call [0x5054A008] 
0x5050cba3  # add byte [ebp+0x502274C0], al; call [0x5054A03C] 
0x5051748e  # add byte [ebp+0x3B2F74C0], al; retn 0x2B74 
0x5050194e  # add byte [ebp+0x334274C0], al; sar byte [ebx], 0xF8; je 0x5050199A; push edi; call [0x5054A280] 
0x50504eec  # add byte [ebp-0x17E68A40], al; pushfd; retn 0xFFFF 
0x5050ed5f  # add byte [ebp+0x392675C0], al; pop ebp; cld; je 0x5050ED72; push [ebp-0x04]; call [0x5054A0E0] 
0x50503304  # add byte [ebp+0x530974C9], al; push ecx; push eax; call [0x5054A04C] 
0x50549736  # add byte [ebp-0x6E7BF025], al; add byte [eax], al; add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x5054A03C] 
0x505107b9  # add byte [ebp+0x530774DB], al; call edi 
0x50509925  # add byte [ebp+0x531274DB], al; call [0x5054A03C] 
0x5050d1fa  # add byte [ebp+0x537F74DB], al; call [0x5054A03C] 
0x5050d6f0  # add byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x5053b55d  # add byte [ebp+0x530B74F6], al; push [ebp-0x00000114]; call edi 
0x505108b3  # add byte [ebp+0x562774F6], al; lea eax, [ebp+0x000002F4]; push eax; call [0x5054A050] 
0x5050cb6e  # add byte [ebp+0x330475F6], al; shr bl, 0x1C; push esi; call [0x5054A03C] 
0x50513e6e  # add byte [ebp+0x6A097FF6], al; call [edi-0x01] 
0x5050c71a  # add byte [ebp+0x68E77FF6], al; add byte [edx], al; add byte [eax], al; push edi; push [ebp-0x10]; call [0x5054A04C] 
0x50511046  # add byte [eax+0x08458903], cl; cmp [0x50555C74], eax; je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x5050dd76  # add byte [eax-0x797503BB], cl; retn 0x000A 
0x50517047  # add byte [eax+0x458DFF45], cl; push [ebx]; call [eax+0x47] 
0x5050a8cf  # add byte [ecx-0x277974FF], cl; add byte [eax], al; add byte [ebp+0x5F], bl; pop esi; pop ebx; retn 0x0004 
0x5052527e  # add byte [ecx+0x33C28B01], cl; ror byte [ebx+0x04C183F0], cl; or esi, edx; jne 0x50525278; pop esi; ret 
0x50535d55  # add byte [ecx-0x3C74A1FA], cl; pop ebx; pop ebp; ret 
0x50527716  # add byte [ecx+0x48468907], cl; mov eax, [edi]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5050c343  # add byte [ecx+0x40C03308], cl; pop edi; pop esi; pop ebx; leave; retn 0x0008 
0x5052b9ec  # add byte [ecx+0x44893A0C], cl; cmp al, byte [esp+edi*2+0x00]; rcr byte [edi+0x5B], cl; leave; ret 
0x50531ed7  # add byte [ecx+0x6842E830], cl; add byte [eax], al; ret 
0x50516af3  # add byte [ecx-0x367AA1CE], cl; je 0x50516B03; mov edx, [eax+0x00000120]; mov [ecx], edx; mov eax, [eax+0x00000118]; ret 
0x50507d62  # add byte [ecx+0x45C7B045], cl; mov ah, 0x07; add byte [eax], al; add byte [ebx+0x0038AC86], cl; add byte [ebx], al; ret 
0x505412eb  # add byte [ecx-0x36CC1FBB], cl; cmp eax, 0xC0000017; sete cl; mov eax, ecx; ret 
0x50505a1a  # add byte [ecx+0x5D39F445], cl; adc byte [esi+ebx-0x01], dh; jne 0x50505A36; call edi 
0x50505e39  # add byte [ecx+0x5D39F445], cl; sbb byte [esi+ebx-0x01], dh; jne 0x50505E5D; call esi 
0x50503685  # add byte [ecx-0x3FCC07BB], cl; cmp [ebp+0x08], eax; je 0x505036B0; push [ebp+0x08]; call [0x5054A040] 
0x50508607  # add byte [ecx+0x75FFFC45], cl; cld; call edi 
0x5051c4ae  # add byte [ecx+0x088B1046], cl; push eax; call [ecx+0x20] 
0x5051163c  # add byte [ecx+0x15FFCC5D], cl; mov byte [ecx+0x45895054], ah; ror byte [ebx+0x5D891045], 1; aam 0x3B; ret 
0x505318ba  # add byte [ecx+0x7D89C47D], cl; sar bh, 1; adc eax, 0x5054A148; push [ebp-0x08]; mov ebx, [0x5054A060]; call ebx 
0x50511285  # add byte [ecx-0x2D17F382], cl; sbb eax, [edx]; add byte [ebx-0x7AA6A608], cl; push [esi+eax*4+0x57]; lea ebx, [edi+0x01]; call [0x5054A03C] 
0x5052a2d2  # add byte [ecx+0x00008481], cl; add byte [ebx-0x37], bl; ret 
0x50508b7e  # add byte [ecx+0x00380483], cl; add byte [edx+0x01], ch; push 0x00000000; call [0x5054A240] 
0x50508bdd  # add byte [ecx+0x00380C83], cl; add byte [edx+0x01], ch; push 0x00000000; call [0x5054A240] 
0x5053349b  # add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56]; call [0x5054A0F8] 
0x5053349b  # add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56] 
0x505087e2  # add byte [ecx-0x00015B7B], cl; call [ebx-0x73] 
0x50503f62  # add byte [ecx-0x0002237B], cl; jmp [0xFFFFEFFF] 
0x505033b2  # add byte [ecx+0x000AA486], cl; add byte [ebx-0x15], dl; retn 0x1468 
0x50501dee  # add byte [ecx+0x0032D086], cl; add byte [ecx+0x0032C88E], cl; add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0008 
0x50503d47  # add byte [ecx+0x0032C087], cl; add byte [ebp+0x7E], dh; push 0x5055C960; call [0x5054A15C] 
0x5050ae95  # add byte [ecx+0x0037E487], cl; add byte [ecx+0x0037E887], cl; add byte [eax+0x5E], al; pop edi; retn 0x0004 
0x5050ae9b  # add byte [ecx+0x0037E887], cl; add byte [eax+0x5E], al; pop edi; retn 0x0004 
0x50516a82  # add byte [ecx+0x00011088], cl; add byte [ebx-0x76EFDBB4], cl; mov byte [ecx+eax], ah; add byte [eax], al; ret 
0x5052b4f5  # add byte [ecx+0x00104C88], cl; add byte [ebx-0x37], bl; ret 
0x50503f75  # add byte [ecx-0x00022F73], cl; dec [ebx+0x0032C48E]; add byte [ebp-0x0002137B], cl; call [ebx+0x50] 
0x50501df4  # add byte [ecx+0x0032C88E], cl; add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0008 
0x5052a1f0  # add byte [ecx+0x0000848F], cl; add byte [ebx-0x37], bl; ret 
0x50516524  # add byte [ecx+0x002D009F], cl; add byte [ebx], bh; ret 
0x5051651e  # add byte [ecx+0x002D049F], cl; add byte [ecx+0x002D009F], cl; add byte [ebx], bh; ret 
0x50508f6a  # add byte [ecx+0x0000BCAE], cl; add byte [edi+0x33], bl; rcr byte [ebx+0x5E], 0x5D; retn 0x0008 
0x5053f3df  # add byte [ecx-0x00026B4B], cl; dec [ebp-0x00025B7B]; call [eax+0x0F] 
0x505326f7  # add byte [edx+0x47880346], cl; add ecx, [edx+0x47880246]; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x505412e9  # add byte [ebx-0x1FBA7700], cl; xor ecx, ecx; cmp eax, 0xC0000017; sete cl; mov eax, ecx; ret 
0x5050d4f8  # add byte [ebx+0x5E118901], cl; retn 0x0008 
0x50502f7a  # add byte [ebx-0x14C676FF], cl; or eax, 0x04271E68; sub al, 0x1F; loop 0x50502F89; inc [ebx+0x5E5FFFC8]; retn 0x0008 
0x50507760  # add byte [ebx+0x74C63B07], cl; or dl, byte [esi+0x50]; call [0x5055CA08] 
0x5052759d  # add byte [ebx+0x34FF5307], cl; lea esi, [eax+0x575054C1]; call [eax+0x08] 
0x50526723  # add byte [ebx+0x57006A07], cl; call [eax+0x1C] 
0x5051af10  # add byte [ebx+0x40C48307], cl; push [edi+0x04]; call [eax+0x04] 
0x5052d95f  # add byte [ebx+0x016A5708], cl; push eax; call [ecx+0x1C] 
0x505269b4  # add byte [ebx-0x17AA72F8], cl; push edx; push eax; call [ecx+0x08] 
0x5051d0df  # add byte [ebx+0x76C83B09], cl; add al, 0x83; enter 0xC3FF, 0x1B; sal bh, 0xD8; ret 
0x50515537  # add byte [ebx+0x51CB030E], cl; push [esi+0x10]; push [edi+0x70]; call [eax+0x0C] 
0x50506fc6  # add byte [ebx+0x54A03C1D], cl; push eax; cmp [ebp+0x0C], esi; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x5050ba96  # add byte [ebx+0x54A03C1D], cl; push eax; inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x505051f2  # add byte [ebx+0x54A03C1D], cl; push eax; push edi; call ebx 
0x50507e9a  # add byte [ebx+0x54A1881D], cl; push eax; call ebx 
0x5050c4dc  # add byte [ebx+0x54A0B81D], cl; push eax; push 0x5054AC30; push edi; call ebx 
0x505072a2  # add byte [ebx+0x54A03C35], cl; push eax; test ebx, ebx; jne 0x505072C1; push 0x00000000; call esi 
0x5050a1b6  # add byte [ebx+0x54A04C35], cl; push eax; push eax; push edi; call esi 
0x50542962  # add byte [ebx+0x54A08835], cl; push eax; push 0x5055208C; push edi; call esi 
0x505463a6  # add byte [ebx+0x54A08835], cl; push eax; push 0x505523A8; push eax; call esi 
0x50506662  # add byte [ebx+0x54A08835], cl; push eax; push 0x5054A5B0; push eax; call esi 
0x505467b8  # add byte [ebx+0x54A08835], cl; push eax; push 0x505523BC; push eax; call esi 
0x505377b1  # add byte [ebx+0x54A08835], cl; push eax; push 0x50550EF0; push edi; call esi 
0x50514724  # add byte [ebx+0x54A18835], cl; push eax; call esi 
0x505010d3  # add byte [ebx+0x54A18C35], cl; push eax; push 0xFFFFFFFF; push 0x50555210; call esi 
0x50506607  # add byte [ebx+0x54A09035], cl; push eax; push 0x00008000; call esi 
0x505419f8  # add byte [ebx+0x54A1EC35], cl; push eax; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x5050d325  # add byte [ebx+0x54A03C3D], cl; push eax; push ebx; call edi 
0x505094dc  # add byte [ebx+0x54A03C3D], cl; push eax; push esi; call edi 
0x50508b56  # add byte [ebx+0x54A03C3D], cl; push eax; je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x50538e6f  # add byte [ebx-0x743CFBC0], cl; call [ebp-0x75] 
0x5050707e  # add byte [ebx-0x39C4E7C0], cl; je 0x505070C4; push eax; call ebx 
0x50517f5b  # add byte [ebx+0x738D1840], cl; je 0x50517FB9; push [edi+0x0C]; call [eax+0x08] 
0x505364ea  # add byte [ebx+0x45890845], cl; loopne 0x5053647B; inc ebp; in al, 0x33; fstp tword [ebx]; ret 
0x5051537b  # add byte [ebx-0x3B7CF3BB], cl; or al, 0x89; xor byte [ebx+0x5B5E5FC7], cl; leave; ret 
0x5053e410  # add byte [ebx+0x4D8B0C45], cl; or byte [ecx+0x0CC48308], cl; leave; ret 
0x5050ab9e  # add byte [ebx+0x3B571045], cl; ret 
0x5051245b  # add byte [ebx-0x3B7CEFBB], cl; sub bh, bh; xor bh, bh; adc eax, 0x5054A0D8; call [0x5054A188] 
0x50528789  # add byte [ebx+0x7C8D8045], cl; xor byte [ebx+ecx*4], al; ret 
0x50505229  # add byte [ebx-0x3F7A37BB], cl; je 0x5050599B; push [eax+0x0C]; call ebx 
0x5053a88e  # add byte [ebx-0x75171BBB], cl; fdivp st7, st0; inc ebx; push [eax]; call [0x5054A1C0] 
0x5053708d  # add byte [ebx-0x74171BBB], cl; push ss; add byte [eax], al; ret 
0x50536f73  # add byte [ebx-0x5A171BBB], cl; pop ss; add byte [eax], al; ret 
0x50536159  # add byte [ebx-0x40171BBB], cl; and eax, 0x6AC30000; add al, 0xE8; mov edx, 0x5900002A; ret 
0x5053c357  # add byte [ebx-0x3E171BBB], cl; ret 
0x5050eee7  # add byte [ebx+0x6A50F445], cl; inc edx; mov [ebp+0x0C], eax; call [0x5054A194] 
0x5054410f  # add byte [ebx-0x357C0BBB], cl; call ebx 
0x50508c37  # add byte [ebx-0x00A907BB], cl; jo 0x50508C87; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x5052a694  # add byte [ebx-0x787607BB], cl; test byte [eax], al; add byte [eax], al; pop esi; leave; ret 
0x50508c13  # add byte [ebx+0x408BF845], cl; dec eax; test eax, eax; je 0x50508C55; push eax; call edi 
0x50515d57  # add byte [ebx+0x3B591046], cl; ret 
0x50524383  # add byte [ebx-0x3CC4D7BA], cl; je 0x505243C1; push eax; push [ebp+0x08]; call [edi+0x04] 
0x5052439d  # add byte [ebx-0x3CC4D3BA], cl; je 0x505243BC; push eax; push [ebp+0x08]; call [edi+0x04] 
0x50516626  # add byte [ebx-0x3B7CABB9], cl; sbb byte [ebx], bh; ret 
0x5052f522  # add byte [ebx-0x37C4F7B7], cl; jbe 0x5052F52E; or eax, 0xFFFFFFFF; ret 
0x505169d6  # add byte [ebx-0x7776EFB7], cl; add al, 0x01; add byte [eax], al; ret 
0x50516bcc  # add byte [ebx-0x76F7DBB4], cl; mov byte [ecx+eax], dh; add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000138], ecx; ret 
0x50516b1b  # add byte [ebx-0x76F3DBB4], cl; mov byte [ecx+eax], bl; add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x50516a88  # add byte [ebx-0x76EFDBB4], cl; mov byte [ecx+eax], ah; add byte [eax], al; ret 
0x50531b70  # add byte [ebx+0x0889084D], cl; pop ebp; ret 
0x50522f8d  # add byte [ebx+0x0488104D], cl; cmp [eax+eax*8+0x468BF174], eax; add al, 0xFF; inc ebp; adc byte [ebx], ch; ret 
0x505333f1  # add byte [ebx-0x3B7CEBB3], cl; or al, 0x89; add [edi+0x5E], ebx; pop ebp; ret 
0x50517f7a  # add byte [ebx+0x31FFA44D], cl; mov ecx, [ebp-0x64]; push [ecx]; mov eax, [edi+0x0000008C]; call [eax] 
0x5052b7ba  # add byte [ebx-0x777607B3], cl; dec esp; adc byte [eax], al; add byte [esi-0x37], bl; ret 
0x5052a559  # add byte [ebx-0x777607B3], cl; test byte [eax], al; add byte [eax], al; pop esi; leave; ret 
0x505169cd  # add byte [ebx-0x6F76F3AF], cl; add byte [ecx], al; add byte [eax], al; mov ecx, [ecx+0x10]; mov [eax+0x00000104], ecx; ret 
0x50514f15  # add byte [ebx-0x2EFCEFAE], cl; push edx; push [edi+0x64]; call [eax+0x14] 
0x50515662  # add byte [ebx-0x76FBDBAC], cl; adc al, 0x81; inc [esi+0x0000017C]; ret 
0x5052e884  # add byte [ebx+0x468B8455], cl; or byte [ebx+0x1A548D08], cl; add edx, [edx-0x73]; push ebp; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x50526c4a  # add byte [ebx+0x0389085D], cl; mov [esi+0x0C], eax; mov eax, [ebx]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5050e7af  # add byte [ebx-0x247AF3A3], cl; je 0x5050E7C2; push ebx; call [0x5054A03C] 
0x50524f8d  # add byte [ebx+0x048D0C5D], cl; cmp ecx, [ebx+0x72D83BF3]; or dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x5052e4d4  # add byte [ebx-0x74A9F38A], cl; push es; call [eax+0x04] 
0x5052e8bc  # add byte [ebx+0x068B0C76], cl; push esi; call [eax+0x04] 
0x5052718f  # add byte [ebx+0x068B4876], cl; push 0x00000001; push esi; call [eax+0x1C] 
0x505073d3  # add byte [ebx+0x588B2078], cl; sbb al, 0x85; push [eax+esi+0x57]; call [0x5054A03C] 
0x50545cca  # add byte [ebx+0x4D8B0C7D], cl; or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x50537685  # add byte [ebx-0x007A9782], cl; je 0x505376A7; push edi; call [0x5054A0D4] 
0x50531554  # add byte [ebx+0x078B0C7F], cl; push 0x00001F40; push edi; call [eax+0x04] 
0x5051468f  # add byte [ebx+0x00266085], cl; add byte [ebx], bh; ret 
0x50504166  # add byte [ebx-0x0002237B], cl; jmp [0x00001000] 
0x50501ce7  # add byte [ebx+0x00010886], cl; add byte [ebx], bh; ret 
0x50515e88  # add byte [ebx+0x00014C86], cl; add byte [ebx], dh; fstp tword [ebx]; ret 
0x505074ad  # add byte [ebx+0x00388886], cl; add byte [ebx], dh; sar byte [ebx], cl; retn 0x1674 
0x50507d6c  # add byte [ebx+0x0038AC86], cl; add byte [ebx], al; ret 
0x5050c2be  # add byte [ebx+0x0037DC86], cl; add byte [ebx], bh; ret 
0x50514cdc  # add byte [ebx+0x00021887], cl; add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x5051658d  # add byte [ebx+0x00016487], cl; add byte [ebx], bh; ret 
0x505165d8  # add byte [ebx+0x0001A887], cl; add byte [ecx+0x3B], bl; ret 
0x50507078  # add byte [ebx+0x0038FC87], cl; add byte [ebx-0x39C4E7C0], cl; je 0x505070C4; push eax; call ebx 
0x505166dd  # add byte [ebx+0x0001AC88], cl; add byte [ebx+0x047501F9], al; mov eax, esi; pop esi; ret 
0x50528737  # add byte [ebx-0x0000A773], cl; dec [ecx-0x0000977B]; inc [ebx]; ret 
0x5051565c  # add byte [ebx+0x0001788E], cl; add byte [ebx-0x76FBDBAC], cl; adc al, 0x81; inc [esi+0x0000017C]; ret 
0x50514b77  # add byte [ebx+0x0002188F], cl; add bh, bh; jno 0x50514B91; push [edi+0x50]; call [eax+0x10] 
0x50514dbe  # add byte [ebx+0x00023C8F], cl; add bh, bh; jno 0x50514DD8; push [edi+0x64]; call [eax+0x14] 
0x5050482f  # add byte [ebx+0x0001109E], cl; add byte [ebx+0x2B00F465], al; fild word [ebx+0x12720AFB]; call [0x5054A188] 
0x50503d07  # add byte [ebx+0x5E5F5BC2], cl; retn 0x000C 
0x50522190  # add byte [ebx+0x5B5F5DC3], cl; pop esi; ret 
0x50504f23  # add byte [ebx+0x5B5F5EC3], cl; leave; retn 0x000C 
0x5050523f  # add byte [ebx+0x74C085C4], cl; adc byte [ebx+0x71FFC84D], cl; or al, 0x50; call [0x5054A050] 
0x5052f5c9  # add byte [ebx-0x36A4A13A], cl; ret 
0x50542945  # add byte [ebx-0x717AF028], cl; add byte [eax], al; add byte [eax-0x68], ch; and byte [ebp+0x50], dl; call [0x5054A08C] 
0x50505a3e  # add byte [ebx+0x39C033D8], cl; inc ebp; or byte [esp+ebx-0x01], dh; jne 0x50505A53; call edi 
0x50503af3  # add byte [ebx+0x39C033D8], cl; inc ebp; or al, 0x74; sbb al, 0xFF; jne 0x50503B0C; call edi 
0x50505e5d  # add byte [ebx+0x39FF33D8], cl; jnl 0x50505E79; je 0x50505E85; push [ebp+0x14]; call esi 
0x50501b5c  # add byte [ebx+0x74F73BF0], cl; and eax, 0xFFF5EFE8; call [edi-0x01] 
0x505319f0  # add byte [ebx+0x3B5959F0], cl; test [edi], 0xFFFF3684; call [esi-0x01] 
0x505179e2  # add byte [ebx+0x4C878DF0], cl; add al, byte [eax]; add byte [eax+0x6A], dl; call [ebx-0x77] 
0x5050d06f  # add byte [ebx+0x330475F4], cl; shr bl, 0x20; push [ebp+0x0C]; call [0x5054A040] 
0x50505e82  # add byte [ebx+0x39C033F8], cl; inc ebp; or al, 0x74; sbb al, 0xFF; jne 0x50505E9B; call esi 
0x5050b5ba  # add byte [ebx-0x7AA6A608], cl; push [esi+edi-0x73]; inc esp; and al, 0x18; push eax; call [0x5054A0BC] 
0x5051128d  # add byte [ebx-0x7AA6A608], cl; push [esi+eax*4+0x57]; lea ebx, [edi+0x01]; call [0x5054A03C] 
0x50526dd3  # add byte [ebx+0x0C7E89F8], cl; mov eax, [edi]; push edi; call [eax+0x20] 
0x50536ac4  # add byte [ebx-0x1374AA01], cl; push ecx; push ecx; lea eax, [ebp-0x08]; push eax; call [0x5054A1AC] 
0x50537404  # add byte [ebx+0x35FF56FF], cl; mov ah, 0x5F; push ebp; push eax; call [0x5054A030] 
0x50547e41  # add byte [ebp+0x53503045], cl; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x50547e41  # add byte [ebp+0x53503045], cl; call esi 
0x50547eb8  # add byte [ebp+0x68503045], cl; add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x5050f5cf  # add byte [ebp+0x53508C45], cl; lea eax, [ebp-0x18]; push eax; push [ebp-0x78]; call edi 
0x505130b4  # add byte [ebp-0x00AF73BB], cl; jne 0x5051303C; call [0x5054A04C] 
0x5050d8b2  # add byte [ebp+0x56509045], cl; mov [ebp-0x74], edi; call [0x5054A0C0]; push esi; mov edi, eax; call [0x5054A060] 
0x5050d8b2  # add byte [ebp+0x56509045], cl; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x5050fd01  # add byte [ebp-0x00AF47BB], cl; adc eax, 0x5054A268; lea eax, [ebp-0x48]; push eax; call [0x5054A278] 
0x50547274  # add byte [ebp-0x00AF1FBB], cl; jne 0x5054726C; push [ebp-0x08]; push [ebp-0x0C]; push [ebp+0x08]; call [0x5055DF4C] 
0x50539569  # add byte [ebp+0x5750E845], cl; call [0x5054A1EC] 
0x505401ee  # add byte [ebp+0x6A50E845], cl; add [ebp-0x74AF00BB], ecx; pop es; push [esi+eax]; call [0x5054A0C0] 
0x50540417  # add byte [ebp+0x6A50E845], cl; add cl, byte [ebp-0x74AF07BB]; pop es; push [esi+eax]; call [0x5054A0C0] 
0x50513650  # add byte [ebp+0x5750F845], cl; call [0x5054A0CC] 
0x505081e3  # add byte [ebp+0x6A50FC45], cl; push ebx; push [ebp+0x0C]; call [0x5055C9A4] 
0x5051e2ab  # add byte [ebp-0x00AF03BB], cl; jne 0x5051E2C3; mov eax, [ebp+0x08]; push [ebp+0x0C]; push [eax]; call [0x5054A0C0] 
0x5051e358  # add byte [ebp-0x00AF03BB], cl; jne 0x5051E370; mov eax, [ebp+0x08]; push [ebp+0x0C]; push [eax]; call [0x5054A0E8] 
0x50541ff7  # add byte [ebp-0x17AFF3BA], cl; ret 
0x50519d03  # add byte [ebp+0x7D8DE075], cl; in al, 0x8B; ret 
0x505287b7  # add byte [ebp-0x74FBE084], cl; popfd; push 0x8BFFFFFF; ret 
0x5054824c  # add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x5052d78b  # add byte [ebp-0x0003EF7B], cl; call [eax-0x01] 
0x5053cd2c  # add byte [ebp-0x0001DF7B], cl; call [eax-0x73] 
0x5053bddb  # add byte [ebp-0x001AD37B], cl; call [eax+0x53] 
0x5053bfaa  # add byte [ebp-0x001AD37B], cl; call [eax-0x75]; ret 
0x5053bfaa  # add byte [ebp-0x001AD37B], cl; call [eax-0x75] 
0x5053bbf1  # add byte [ebp-0x001AC37B], cl; call [eax+0x56] 
0x5053bc45  # add byte [ebp-0x001AC37B], cl; call [eax+0x6A] 
0x50522c5d  # add byte [ebp-0x0000C37B], cl; call [eax-0x18] 
0x5052317b  # add byte [ebp-0x0000A37B], cl; call [eax+0x43] 
0x50547cea  # add byte [ebp-0x0001837B], cl; call [eax-0x01] 
0x5052e0ae  # add byte [ebp+0x00029085], cl; add byte [eax+0x33], dl; fucomi st0, st0; ret 
0x5053362b  # add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x505025d5  # add byte [ebp-0x0001377B], cl; call [eax+0x6A] 
0x50503f81  # add byte [ebp-0x0002137B], cl; call [ebx+0x50] 
0x5053f588  # add byte [ebp-0x00020B7B], cl; call [eax-0x73] 
0x5052e35d  # add byte [ebp-0x00020B7B], cl; call [eax-0x01] 
0x50548075  # add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x505334e1  # add byte [ebp-0x0001077B], cl; call [esi+0x50] 
0x50546b8e  # add byte [ebp-0x0004037B], cl; call [eax-0x75] 
0x50504245  # add byte [ebp-0x0002037B], cl; call [eax+0x57] 
0x50547d14  # add byte [ebp-0x0001037B], cl; call [eax+0x74] 
0x50504d08  # add byte [ebp-0x0001037B], cl; call [eax-0x01] 
0x505097f3  # add byte [ebp+0x00019486], cl; add byte [ebx], bh; ret 
0x50548a3e  # add byte [ebp+0x0002B486], cl; add byte [edi+0x50], dl; test bl, 0x01; je 0x50548A65; push 0x80000001; call [0x5054A004] 
0x5051626d  # add byte [ebp+0x00009487], cl; add byte [eax+0x53], dl; call [esi+0x04]; push [ebp+0x14]; push ebx; call [esi+0x08] 
0x5051626d  # add byte [ebp+0x00009487], cl; add byte [eax+0x53], dl; call [esi+0x04] 
0x5053c00e  # add byte [ebp-0x001AD373], cl; call [ecx-0x01]; jne 0x5053C029; push [ebp-0x00001ACC]; push [eax]; call [0x5054A0E8] 
0x5053c00e  # add byte [ebp-0x001AD373], cl; call [ecx-0x01] 
0x50511dd3  # add byte [ebp-0x00009B73], cl; call [ecx+0x50] 
0x50504095  # add byte [ebp-0x00021773], cl; call [ecx+0x68] 
0x5053bf7a  # add byte [ebp-0x00140F73], cl; call [ecx-0x73] 
0x5050a1b0  # add byte [ebp+0x000314BE], cl; add byte [ebx+0x54A04C35], cl; push eax; push eax; push edi; call esi 
0x50538f18  # add byte [ecx+0x50555D00], ah; mov [ebp-0x00000328], eax; mov eax, [0x50555D04]; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50547c7a  # add byte [ecx+0x5055E108], ah; ret 
0x50506490  # add byte [ecx+0x5055C970], ah; test eax, eax; je 0x505064AE; push eax; call [0x5054A078] 
0x505068a0  # add byte [ecx+0x5055C9F0], ah; mov edi, [0x5054A094]; cmp eax, esi; je 0x505068B9; push eax; call edi 
0x50539eb1  # add byte [edx+0x53535054], ah; push edi; push [ebp-0x0C]; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x50503980  # add byte [ebx-0x00ACAFAC], ah; xlatb; push [ebp+0x10]; push ebx; call edi 
0x50513574  # add byte [ebp-0x7972AFAC], ch; add byte [edx], al; add byte [eax], al; push ebx; push eax; call edi 
0x5051a2c4  # add byte [ebp+0x5F505163], dh; ret 
0x50542411  # add byte [ebx+0x00001000], bh; push ebx; push 0x00000008; call [0x5054A180]; push eax; call [0x5054A07C] 
0x50542411  # add byte [ebx+0x00001000], bh; push ebx; push 0x00000008; call [0x5054A180] 
0x5053df48  # add byte [esi+0x5055DB81], bh; push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x50538296  # add byte [esi+0x5055D590], bh; push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x50537481  # add byte [esi+0x50550EA4], bh; push esi; call [0x5054A1B0] 
0x50509b23  # add byte [edi+0x5054AAEC], bh; je 0x50509B34; push [ebp+0x10]; call esi 
0x5054268d  # add al, al; add byte [eax], al; add eax, 0x00004000; pop ebp; ret 
0x505412f4  # add al, al; sete cl; mov eax, ecx; ret 
0x50541227  # add al, al; sete dl; mov eax, edx; ret 
0x50539112  # add al, al; je 0x50539119; xor eax, eax; ret 
0x5053868c  # add al, al; jne 0x50538697; mov [esi+0x64], 0x0000008A; push [esi+0x64]; push 0x00000008; call ebx 
0x50541304  # add al, al; jne 0x50541310; push 0x00000008; call [0x5054A028] 
0x50538afe  # add al, al; mov [ebp-0x00000324], 0x00000001; mov [ebp-0x0000031C], eax; call [0x5054A1E8] 
0x50538f69  # add al, al; call [0x5054A128]; push eax; call [0x5054A1E4]; leave; ret 
0x50538b40  # add al, al; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538b40  # add al, al; call [0x5054A128] 
0x5050fb9b  # add al, al; push [ebp+0x0C]; call [0x5054A0A8] 
0x5053d82e  # add cl, al; out 0x0F, eax; add edi, [ecx+0x0C]; push 0x00008000; push edi; call [0x5054A220] 
0x50533fb0  # add cl, al; clc; add al, byte [ebx]; retn 0x848D 
0x50523553  # add cl, al; clc; or byte [eax+0x76FF0247], cl; or al, ch; ret 
0x505167a8  # add bl, al; xor eax, eax; ret 
0x50545c19  # add bl, al; or eax, 0x40; ret 
0x505169ee  # add bl, al; or eax, 0xFFFFFFFF; ret 
0x5052db05  # add bl, al; mov eax, [eax+0x08]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5051677b  # add bl, al; mov eax, [esp+0x04]; cmp [eax+0x10], 0x00000000; je 0x5051678B; or eax, 0xFFFFFFFF; ret 
0x505169df  # add bl, al; mov eax, [esp+0x04]; test eax, eax; je 0x505169F0; mov eax, [eax+0x000000D4]; ret 
0x50516a05  # add bl, al; mov eax, [esp+0x04]; test eax, eax; je 0x50516A16; mov eax, [eax+0x000000D8]; ret 
0x50516997  # add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x505169A2; ret 
0x50516a92  # add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516AA0; or eax, 0xFFFFFFFF; ret 
0x50516b78  # add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516B88; jmp [0x5054A0E4] 
0x5051f279  # add bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x04]; ret 
0x505391c4  # add bl, al; mov eax, 0x00000804; ret 
0x505391ca  # add bl, al; mov eax, 0x00000411; ret 
0x505391be  # add bl, al; mov eax, 0x00000412; ret 
0x50516810  # add bl, al; mov eax, 0x000000A8; ret 
0x50526a3e  # add dh, al; inc esi; and [edx-0x75], ebx; or byte [edi+0x50], dl; call [ecx+0x08] 
0x50533a96  # add bh, al; add byte [eax+eax], cl; add byte [eax], al; xor eax, eax; pop esi; ret 
0x505284db  # add bh, al; test [edi+edi*8-0x01], ebp; call [eax] 
0x50502abc  # add bh, al; xchg byte [eax+eax+0x00010000], ah; add byte [eax], al; xor eax, eax; pop esi; retn 0x0004 
0x5050326b  # add cl, cl; retn 0x0004 
0x50501343  # add cl, cl; retn 0x0008 
0x50501274  # add cl, cl; retn 0x000C 
0x50504c57  # add cl, cl; retn 0x0010 
0x5050ae47  # add cl, cl; retn 0x0014 
0x50505bab  # add cl, cl; retn 0x001C 
0x50508595  # add cl, cl; retn 0x0020 
0x505059ba  # add cl, cl; retn 0x0024 
0x50505ee9  # add cl, cl; retn 0x002C 
0x5050693c  # add cl, cl; ret 
0x5050667d  # add dl, cl; push ebp; push eax; call esi 
0x505497e2  # add ah, cl; jmp [0x5054A228] 
0x505366a5  # add bl, bl; loop 0x50536706; ret 
0x50546947  # add al, ah; push ebp; push eax; call esi 
0x50547c6d  # add al, ch; push cs; add byte [eax], al; add byte [ebx], dh; rcr byte [esi+0x5B], 0x5D; retn 0x000C 
0x5051060f  # add al, ch; xor eax, 0xFFFFFF5F; jne 0x5051062C; call [0x5054A060] 
0x50502ddf  # add al, ch; push ecx; jecxz 0x50502DE3; dec [ebx+0x5E5B5FC3]; pop ebp; retn 0x0008 
0x50523fc8  # add al, ch; push edi; sbb al, byte [eax]; add byte [ebx], al; ret 
0x50542438  # add al, ch; push edi; jnl 0x5054243C; dec [ebx+0x5B5E5F00]; leave; ret 
0x505165d3  # add al, ch; lea esp, [ebx+0x00]; add byte [ebx+0x0001A887], cl; add byte [ecx+0x3B], bl; ret 
0x50515d52  # add al, ch; sahf; sbb eax, [ecx]; add byte [ebx+0x3B591046], cl; ret 
0x505010ce  # add al, ch; mov ebp, 0x8B000053; xor eax, 0x5054A18C; push 0xFFFFFFFF; push 0x50555210; call esi 
0x5051add6  # add al, ch; fsub qword [edi+edi*8-0x72F97401]; lea edi, [edi+edi*8-0x01]; call [ecx-0x01]; jbe 0x5051ADEC; call [eax+0x0C] 
0x5051add6  # add al, ch; fsub qword [edi+edi*8-0x72F97401]; lea edi, [edi+edi*8-0x01]; call [ecx-0x01] 
0x5053753e  # add al, ch; fst qword [ecx]; add byte [eax], al; ret 
0x50519cfe  # add cl, ch; push ds; add [eax], eax; add byte [ebp+0x7D8DE075], cl; in al, 0x8B; ret 
0x5053ad7c  # add cl, ch; je 0x5053AD84; add byte [eax], al; push [ebp-0x1C]; call [0x5054A1C0] 
0x5054637b  # add cl, ch; xchg eax, ebx; add eax, [eax]; add byte [eax-0x50], ch; and edx, [ebp+0x50]; call [0x5054A08C] 
0x5050e807  # add cl, ch; retn 0x0000 
0x50511e62  # add cl, ch; retn 0x0002 
0x5050c273  # add cl, ch; ret 
0x5051c4c2  # add bl, ch; add dh, byte [ebx]; rcr byte [edi+0x5B], 0xC9; ret 
0x50515fb5  # add bl, ch; add ecx, [ecx-0x7976EFBF]; add al, 0x2D; add byte [eax], al; ret 
0x50516550  # add bl, ch; or eax, 0x3B30468B; ret 
0x50519970  # add bl, ch; or eax, 0x3B30478B; ret 
0x50539e6e  # add bl, ch; adc [eax-0x18], edx; cmc; retn 0xFFFF 
0x5050da49  # add bl, ch; adc dl, byte [ebx-0x73]; inc esi; add al, 0x50; call [0x5054A0B8] 
0x50507c5e  # add bl, ch; sbb byte [ebx-0x4B76F3BB], cl; ret 
0x50503663  # add bl, ch; and edi, edi; jne 0x50503675; call [0x5054A040] 
0x50542d3b  # add bl, ch; and al, 0x33; fstp tword [ebx]; ret 
0x50537345  # add bl, ch; daa; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x50541db9  # add bl, ch; sub byte [ebp+0x5750F845], cl; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x50526b54  # add bl, ch; mov byte [ebp-0x17], 0x08; mov ecx, [eax]; call [ecx+0x08] 
0x5050b117  # add bl, ch; push esi; push edi; call [0x5054A03C] 
0x5050c671  # add bl, ch; push 0x5054ABF8; push edi; call ebx 
0x5053a60e  # add bl, ch; mov byte [ebx], bh; ret 
0x5053b97f  # add bl, ch; retn 0xFF8B 
0x50514ee9  # add bl, ch; retn 0x87C7 
0x50504fd0  # add bl, ch; retn 0x67E8 
0x50542793  # add bl, ch; jecxz 0x50542722; call [ebp-0x75] 
0x505475cf  # add bl, ch; in eax, 0x83; enter 0x5002, 0xFF; xor eax, 0x50556FF8; call [0x5054A02C] 
0x50545bb3  # add dh, dh; retn 0x7401 
0x5050f7c0  # add dh, dh; retn 0x0F02 
0x50545ba9  # add dh, dh; retn 0x7402 
0x50545b98  # add dh, dh; retn 0x7408 
0x5053d93d  # add dh, dh; ret 
0x505031fd  # add bh, dh; push 0x5055C960; call [0x5054A0D4] 
0x50545bc2  # add bh, dh; retn 0x0000 
0x50545cbc  # add bh, dh; ret 
0x5052839d  # add bh, dh; fcomp [ebx]; rcr byte [ecx-0x09], 0xD0; pop ecx; and eax, 0x5054BC28; ret 
0x5052f7d6  # add bh, dh; fcom [eax+0x51]; push esi; call [esi+0x00001030] 
0x5054886a  # add bh, dh; int1; pop esi; retn 0x0004 
0x50549225  # add bh, dh; stc; imul eax, eax, 0x00015180; leave; ret 
0x5051f61a  # add bh, dh; stc; mov eax, edx; ret 
0x50509e88  # add dh, bh; xor eax, eax; retn 0x0008 
0x50534254  # add bh, bh; add byte [esp+ecx-0x09], dh; retn 0x0000 
0x50534373  # add bh, bh; add byte [edx+edx-0x09], dh; retn 0x0000 
0x50538273  # add bh, bh; add ecx, ecx; ret 
0x505480eb  # add bh, bh; adc eax, 0x5054A010; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x50540341  # add bh, bh; adc eax, 0x5054A240; mov [ebp-0x10], eax; test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x5050103e  # add bh, bh; adc eax, 0x5054A240; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50503230  # add bh, bh; adc eax, 0x5054A048; push [0x5055C960]; push esi; call [0x5054A18C] 
0x50502fb4  # add bh, bh; adc eax, 0x5054A048; push [0x5055C960]; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x50537bb4  # add bh, bh; adc eax, 0x5055E270; xor eax, eax; pop ebp; ret 
0x5054249c  # add bh, bh; adc eax, 0x5054A180; push eax; call [0x5054A084] 
0x505103e5  # add bh, bh; adc eax, 0x5054A0A8; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x50510414; call [0x5054A0E4] 
0x50538f43  # add bh, bh; adc eax, 0x5054A1A8; push 0x50550FE0; call [0x5054A1A4] 
0x5051012a  # add bh, bh; xor byte [ebp-0x0002037B], cl; call [eax-0x01] 
0x5051159a  # add bh, bh; xor al, ch; dec esi; and eax, 0x59590002; ret 
0x5053bc05  # add bh, bh; xor al, 0x07; call [0x5054A0E8] 
0x5053a957  # add bh, bh; xor al, 0x18; call [0x5054A208] 
0x5053a91f  # add bh, bh; xor al, 0x18; call [0x5054A20C] 
0x50537848  # add bh, bh; xor eax, 0x5055D548; push eax; call esi 
0x50546aeb  # add bh, bh; xor eax, 0x5055E07C; call [0x5054A094] 
0x50536363  # add bh, bh; xor eax, 0x5055D69C; call [0x5054A080] 
0x505364b2  # add bh, bh; xor eax, 0x5055D69C; call [0x5054A084] 
0x505361dc  # add bh, bh; xor eax, 0x5055D69C; call edi 
0x5051e0e9  # add bh, bh; pop edi; pop esi; ret 
0x50505cca  # add bh, bh; push 0x00000080; push [ebp+0x1C]; lea eax, [esi+0x00000114]; push eax; call ebx 
0x50505234  # add bh, bh; jo 0x50505244; call ebx 
0x5053d6c1  # add bh, bh; jo 0x5053D6D1; call esi 
0x50514b7d  # add bh, bh; jno 0x50514B91; push [edi+0x50]; call [eax+0x10] 
0x50514dc4  # add bh, bh; jno 0x50514DD8; push [edi+0x64]; call [eax+0x14] 
0x50514f50  # add bh, bh; jno 0x50514F64; push [edi+0x74]; call [eax+0x10] 
0x50516c05  # add bh, bh; je 0x50516C2D; adc byte [edx+0x50], dl; call ecx; ret 
0x50516c05  # add bh, bh; je 0x50516C2D; adc byte [edx+0x50], dl; call ecx 
0x50518de3  # add bh, bh; je 0x50518E0B; adc al, 0xFF; je 0x50518E0F; adc al, 0x56; call eax 
0x5054198c  # add bh, bh; jne 0x50541998; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x5050604c  # add bh, bh; jne 0x50506058; call [0x5054A03C] 
0x50542591  # add bh, bh; jne 0x505425A1; push eax; call [0x5054A0EC] 
0x5050cfa3  # add bh, bh; jne 0x5050CFB3; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x5050cf84  # add bh, bh; jne 0x5050CF94; push ebx; call [0x5054A04C] 
0x50513559  # add bh, bh; jne 0x50513569; push esi; call [0x5054A04C] 
0x50505c90  # add bh, bh; jne 0x50505CA0; mov [esi+0x0000051C], eax; lea eax, [esi+0x00000520]; push eax; call ebx 
0x5050fac9  # add bh, bh; jne 0x5050FAD9; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x50510399  # add bh, bh; jne 0x505103A9; lea eax, [esi+0x000006A0]; push eax; call edi 
0x505412d3  # add bh, bh; jne 0x505412E3; push [ebp+0x08]; call [0x5054A108] 
0x5050706b  # add bh, bh; jne 0x5050707B; call ebx 
0x505275f2  # add bh, bh; jne 0x50527606; mov eax, [ebx]; push edi; push ebx; call [eax+0x08] 
0x5050fada  # add bh, bh; jne 0x5050FAEE; lea eax, [esi+0x000008A0]; push eax; call ebx 
0x505103aa  # add bh, bh; jne 0x505103BE; lea eax, [esi+0x000008A0]; push eax; call edi 
0x50505ca7  # add bh, bh; jne 0x50505CBF; lea eax, [esi+0x000005A0]; push eax; call ebx 
0x50505cb8  # add bh, bh; jne 0x50505CD4; lea eax, [esi+0x00000620]; push eax; call ebx 
0x5054387a  # add bh, bh; jne 0x50543896; push [ebp-0x1C]; push 0x00000009; push [ebp+0x1C]; call esi 
0x50505cd0  # add bh, bh; jne 0x50505CF0; lea eax, [esi+0x00000114]; push eax; call ebx 
0x505484d7  # add bh, bh; jne 0x50548463; call [0x5054A008] 
0x50548452  # add bh, bh; jne 0x505483DE; call [0x5054A018] 
0x5053ad81  # add bh, bh; jne 0x5053AD69; call [0x5054A1C0] 
0x50508711  # add bh, bh; jne 0x505086FD; mov esi, eax; call [0x5055C9B8] 
0x50507b7d  # add bh, bh; jne 0x50507B6D; mov [ebp-0x20], eax; call [0x5055C9B8] 
0x5050fc9d  # add bh, bh; jne 0x5050FC8D; call [0x5054A048] 
0x50507158  # add bh, bh; jne 0x50507154; lea eax, [ebp-0x18]; push eax; call [0x5055CA38] 
0x5050ef18  # add bh, bh; jne 0x5050EF18; add [ebp+0x0C], eax; mov [ebp-0x0C], eax; call [0x5054A0D8] 
0x5050f059  # add bh, bh; jne 0x5050F059; call [0x5054A0D8] 
0x50515f46  # add bh, bh; jbe 0x50515F56; push ebx; push eax; call [esi+0x08] 
0x50538696  # add bh, bh; jbe 0x505386FE; push 0x00000008; call ebx 
0x505374f7  # add bh, bh; jbe 0x50537563; call [0x5054A15C] 
0x50538511  # add bh, bh; jbe 0x50538511; call [0x5054A1DC] 
0x5053cd26  # add bh, bh; mov al, 0xAC; add byte [eax], al; add byte [ebp-0x0001DF7B], cl; call [eax-0x73] 
0x505072f6  # add bh, bh; mov bh, 0xF4; aaa; add byte [eax], al; call [0x5055CA10] 
0x50541268  # add bh, bh; shr bl, 1; pop es; xor eax, eax; inc eax; ret 
0x50546794  # add bh, bh; salc; push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x50502ac3  # add [eax], eax; add byte [eax], al; xor eax, eax; pop esi; retn 0x0004 
0x5052ef29  # add [eax], eax; add byte [eax], al; xor eax, eax; pop esi; ret 
0x5053987f  # add [eax], eax; add byte [eax], al; xor eax, eax; ret 
0x50541435  # add [eax], eax; add byte [eax], al; push eax; push [ebp+0x18]; call esi 
0x50539e31  # add [eax], eax; add byte [eax], al; push eax; push [ebp+0x20]; call esi 
0x50526763  # add [eax], eax; add byte [eax], al; pop esi; pop edi; ret 
0x50527970  # add [eax], eax; add byte [eax], al; pop esi; ret 
0x50509988  # add [eax], eax; add byte [eax], al; pop edi; pop ebx; pop esi; retn 0x0008 
0x5051a38a  # add [eax], eax; add byte [eax], al; pop edi; pop ebx; ret 
0x5052f4f7  # add [eax], eax; add byte [eax], al; pop edi; leave; ret 
0x5050b16c  # add [eax], eax; add byte [eax], al; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1cf  # add [eax], eax; add byte [eax], al; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x50511639  # add [eax], eax; add byte [eax], al; mov [ebp-0x34], ebx; call [0x5054A188] 
0x505086d9  # add [eax], eax; add byte [eax], al; mov [ebp-0x2C], ebx; call [0x5055C990] 
0x50507b3d  # add [eax], eax; add byte [eax], al; mov [ebp-0x5C], esi; call [0x5055C990] 
0x5051298d  # add [eax], eax; add byte [eax], al; mov [ebp+0x0C], edi; mov [ebp+0x10], eax; call [0x5054A188] 
0x505125c8  # add [eax], eax; add byte [eax], al; mov [ebp-0x44], edi; mov [ebp-0x40], eax; call [0x5054A188] 
0x50538b06  # add [eax], eax; add byte [eax], al; mov [ebp-0x0000031C], eax; call [0x5054A1E8] 
0x50526cf2  # add [eax], eax; add byte [eax], al; mov [esi+0x00000128], eax; mov ecx, [edi]; push edi; call [ecx+0x1C] 
0x50516a7f  # add [eax], eax; add byte [eax], al; mov [eax+0x00000110], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000124], ecx; ret 
0x5051d187  # add [eax], eax; add byte [eax], al; ret 
0x505104ab  # add [eax], eax; add byte [eax], al; call [0x5054A060] 
0x505394b5  # add [eax], eax; add byte [eax], al; call [0x5054A1F0] 
0x50539492  # add [eax], eax; add byte [eax], al; call [0x5054A1F4] 
0x5051a387  # add [eax], eax; add byte [ecx], al; add byte [eax], al; add byte [edi+0x5B], bl; ret 
0x5051f60e  # add [eax], eax; add byte [ebx], al; retn 0xC103 
0x5051a6d4  # add [eax], eax; add byte [0x5EC03305+esi*2], al; pop ebp; ret 
0x50539555  # add [eax], eax; add byte [edi], cl; mov bh, 0xC7; push eax; call [0x5054A1F8] 
0x5051c3e1  # add [eax], eax; add byte [edx], ah; or eax, [eax]; add byte [edi+0x5E], bl; pop ebp; ret 
0x5051bff9  # add [eax], eax; add byte [ebx], ch; ret 
0x5051c326  # add [eax], eax; add byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x50515e8c  # add [eax], eax; add byte [ebx], dh; fstp tword [ebx]; ret 
0x5050a96b  # add [eax], eax; add byte [ebx], dh; imul bl; lock push [ebp+0x0C]; call ebx 
0x50501e9b  # add [eax], eax; add byte [ecx], bh; pop ds; je 0x50501EB5; call [0x5054A188] 
0x50506041  # add [eax], eax; add byte [ecx], bh; jnl 0x5050604F; je 0x5050618B; push [ebp+0x08]; call [0x5054A03C] 
0x505166f5  # add [eax], eax; add byte [ebx], bh; retn 0xED74 
0x50501ceb  # add [eax], eax; add byte [ebx], bh; ret 
0x5050983f  # add [eax], eax; add byte [eax+0x53], dl; push 0x5054AAD4; push edi; call [0x5054A260] 
0x5052e595  # add [eax], eax; add byte [edx+0x50], dl; call [ecx+0x08] 
0x50502fab  # add [eax], eax; add byte [ebx+0x56], dl; push 0x00003A98; call [0x5054A048] 
0x50547816  # add [eax], eax; add byte [esi-0x18], dl; mov byte [0x3B000002], al; ret 
0x5051f08e  # add [eax], eax; add byte [edi+0x57], dl; push eax; call [ecx+0x04] 
0x505165dc  # add [eax], eax; add byte [ecx+0x3B], bl; ret 
0x50542493  # add [eax], eax; add byte [ecx+0x59], bl; push [ebp-0x04]; push 0x00000000; call [0x5054A180] 
0x50541127  # add [eax], eax; add byte [esi+0x39], ah; dec eax; sbb byte [edi], cl; xchg eax, esp; retn 0xC28B 
0x50548245  # add [eax], eax; add byte [eax-0x0080], ch; add byte [eax], al; add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x5054849a  # add [eax], eax; add byte [eax-0x3F7A2901], al; jne 0x505484BB; push [ebp-0x0080]; push [ebp-0x78]; call [0x5054A014] 
0x50504833  # add [eax], eax; add byte [ebx+0x2B00F465], al; fild word [ebx+0x12720AFB]; call [0x5054A188] 
0x5050a8ff  # add [eax], eax; add byte [ebx+0x0F000C7D], al; test byte [esi-0x00FFFFFF], ch; jne 0x5050A91B; mov ebx, [0x5054A03C]; call ebx 
0x5050fc91  # add [eax], eax; add byte [ebx+0x0F02DC7D], al; lea eax, [edi-0x01000000]; jne 0x5050FC8D; call [0x5054A048] 
0x5053ca29  # add [eax], eax; add byte [ebx-0x00018743], al; jmp [ebp+0x74] 
0x505166e1  # add [eax], eax; add byte [ebx+0x047501F9], al; mov eax, esi; pop esi; ret 
0x5052035f  # add [eax], eax; add byte [ebx-0x7AF0FD07], al; retn 0xFFFE 
0x50508605  # add [eax], eax; add byte [ecx+0x75FFFC45], cl; cld; call edi 
0x5051651c  # add [eax], eax; add byte [ecx+0x002D049F], cl; add byte [ecx+0x002D009F], cl; add byte [ebx], bh; ret 
0x505269b2  # add [eax], eax; add byte [ebx-0x17AA72F8], cl; push edx; push eax; call [ecx+0x08] 
0x50515535  # add [eax], eax; add byte [ebx+0x51CB030E], cl; push [esi+0x10]; push [edi+0x70]; call [eax+0x0C] 
0x5050c4da  # add [eax], eax; add byte [ebx+0x54A0B81D], cl; push eax; push 0x5054AC30; push edi; call ebx 
0x50542960  # add [eax], eax; add byte [ebx+0x54A08835], cl; push eax; push 0x5055208C; push edi; call esi 
0x50506660  # add [eax], eax; add byte [ebx+0x54A08835], cl; push eax; push 0x5054A5B0; push eax; call esi 
0x505377af  # add [eax], eax; add byte [ebx+0x54A08835], cl; push eax; push 0x50550EF0; push edi; call esi 
0x5050d323  # add [eax], eax; add byte [ebx+0x54A03C3D], cl; push eax; push ebx; call edi 
0x5050d78b  # add [eax], eax; add byte [ebx+0x54A03C3D], cl; push eax; push esi; call edi 
0x5050eee5  # add [eax], eax; add byte [ebx+0x6A50F445], cl; inc edx; mov [ebp+0x0C], eax; call [0x5054A194] 
0x505169d4  # add [eax], eax; add byte [ebx-0x7776EFB7], cl; add al, 0x01; add byte [eax], al; ret 
0x50516a86  # add [eax], eax; add byte [ebx-0x76EFDBB4], cl; mov byte [ecx+eax], ah; add byte [eax], al; ret 
0x50515660  # add [eax], eax; add byte [ebx-0x76FBDBAC], cl; adc al, 0x81; inc [esi+0x0000017C]; ret 
0x5050e7ad  # add [eax], eax; add byte [ebx-0x247AF3A3], cl; je 0x5050E7C2; push ebx; call [0x5054A03C] 
0x50504164  # add [eax], eax; add byte [ebx-0x0002237B], cl; jmp [0x00001000] 
0x50515e86  # add [eax], eax; add byte [ebx+0x00014C86], cl; add byte [ebx], dh; fstp tword [ebx]; ret 
0x5051658b  # add [eax], eax; add byte [ebx+0x00016487], cl; add byte [ebx], bh; ret 
0x50507076  # add [eax], eax; add byte [ebx+0x0038FC87], cl; add byte [ebx-0x39C4E7C0], cl; je 0x505070C4; push eax; call ebx 
0x505166db  # add [eax], eax; add byte [ebx+0x0001AC88], cl; add byte [ebx+0x047501F9], al; mov eax, esi; pop esi; ret 
0x5051565a  # add [eax], eax; add byte [ebx+0x0001788E], cl; add byte [ebx-0x76FBDBAC], cl; adc al, 0x81; inc [esi+0x0000017C]; ret 
0x50514b75  # add [eax], eax; add byte [ebx+0x0002188F], cl; add bh, bh; jno 0x50514B91; push [edi+0x50]; call [eax+0x10] 
0x50539567  # add [eax], eax; add byte [ebp+0x5750E845], cl; call [0x5054A1EC] 
0x50519d01  # add [eax], eax; add byte [ebp+0x7D8DE075], cl; in al, 0x8B; ret 
0x50533629  # add [eax], eax; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x505334df  # add [eax], eax; add byte [ebp-0x0001077B], cl; call [esi+0x50] 
0x50547d12  # add [eax], eax; add byte [ebp-0x0001037B], cl; call [eax+0x74] 
0x50504d06  # add [eax], eax; add byte [ebp-0x0001037B], cl; call [eax-0x01] 
0x5053df46  # add [eax], eax; add byte [esi+0x5055DB81], bh; push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x50538294  # add [eax], eax; add byte [esi+0x5055D590], bh; push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x50533fae  # add [eax], eax; add cl, al; clc; add al, byte [ebx]; retn 0x848D 
0x505167a6  # add [eax], eax; add bl, al; xor eax, eax; ret 
0x50516aa3  # add [eax], eax; add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516AB0; ret 
0x50516b76  # add [eax], eax; add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516B88; jmp [0x5054A0E4] 
0x50503269  # add [eax], eax; add cl, cl; retn 0x0004 
0x5050738a  # add [eax], eax; add cl, cl; retn 0x0008 
0x5052dc0f  # add [eax], eax; add cl, cl; ret 
0x505165d1  # add [eax], eax; add al, ch; lea esp, [ebx+0x00]; add byte [ebx+0x0001A887], cl; add byte [ecx+0x3B], bl; ret 
0x5051add4  # add [eax], eax; add al, ch; fsub qword [edi+edi*8-0x72F97401]; lea edi, [edi+edi*8-0x01]; call [ecx-0x01] 
0x50537343  # add [eax], eax; add bl, ch; daa; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x50526b52  # add [eax], eax; add bl, ch; mov byte [ebp-0x17], 0x08; mov ecx, [eax]; call [ecx+0x08] 
0x5050f7be  # add [eax], eax; add dh, dh; retn 0x0F02 
0x5053d93b  # add [eax], eax; add dh, dh; ret 
0x50545bc0  # add [eax], eax; add bh, dh; retn 0x0000 
0x505480e9  # add [eax], eax; add bh, bh; adc eax, 0x5054A010; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x50516c03  # add [eax], eax; add bh, bh; je 0x50516C2D; adc byte [edx+0x50], dl; call ecx; ret 
0x50516c03  # add [eax], eax; add bh, bh; je 0x50516C2D; adc byte [edx+0x50], dl; call ecx 
0x5050604a  # add [eax], eax; add bh, bh; jne 0x50506058; call [0x5054A03C] 
0x50507069  # add [eax], eax; add bh, bh; jne 0x5050707B; call ebx 
0x50508212  # add [eax], eax; add [eax], eax; push edi; call [0x5055CA2C] 
0x50507232  # add [eax], eax; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x50508214  # add [eax], eax; push edi; call [0x5055CA2C] 
0x5051c960  # add [eax], eax; pop ecx; pop ecx; pop ebp; ret 
0x505148a5  # add [eax], eax; pop ecx; pop ecx; ret 
0x50515824  # add [eax], eax; pop ecx; pop ecx; leave; ret 
0x5051c92c  # add [eax], eax; pop ecx; ret 
0x505128cc  # add [eax], eax; add ebp, 0x00001014; leave; retn 0x0010 
0x505147e7  # add [eax], eax; add ebp, 0x00002640; leave; retn 0x0020 
0x505130dc  # add [eax], eax; add ebp, 0x00000F90; leave; retn 0x000C 
0x5051ea6a  # add [eax], eax; add ebp, 0x00001F90; leave; ret 
0x5051964f  # add [eax], eax; add ebp, 0x000003A0; leave; ret 
0x5051f256  # add [eax], eax; add ebp, 0x00004FA0; leave; ret 
0x50517bb1  # add [eax], eax; add ebp, 0x000000A8; leave; ret 
0x5051a1b8  # add [eax], eax; add ebp, 0x000000B4; leave; ret 
0x50521dda  # add [eax], eax; add esp, 0x0C; pop ebx; leave; ret 
0x5051ec13  # add [eax], eax; add esp, 0x0C; pop ebp; ret 
0x505151ae  # add [eax], eax; add esp, 0x0C; pop esi; ret 
0x50516c6d  # add [eax], eax; add esp, 0x14; pop esi; ret 
0x5051c995  # add [eax], eax; add esp, 0x14; pop edi; mov eax, esi; pop esi; ret 
0x5051d1a3  # add [eax], eax; add esp, 0x14; mov byte [edi+esi], 0x00; mov eax, edi; pop edi; ret 
0x50512c08  # add [eax], eax; add ebp, 0x64; leave; retn 0x0014 
0x505172c5  # add [eax], eax; add ebp, 0x78; leave; ret 
0x5051c4ad  # add [eax], eax; mov [esi+0x10], eax; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5051c970  # add [eax], eax; ret 
0x5051834a  # add [eax], eax; leave; ret 
0x50548869  # add [eax], eax; div ecx; pop esi; retn 0x0004 
0x50549224  # add [eax], eax; idiv ecx; imul eax, eax, 0x00015180; leave; ret 
0x5051497b  # add [ecx], eax; add byte [eax], al; pop ebx; ret 
0x50515823  # add [ecx], eax; add byte [ecx+0x59], bl; leave; ret 
0x505157e3  # add [ecx], eax; add byte [ebx-0x3F7AF33C], al; jnl 0x505157F1; xor eax, eax; leave; ret 
0x5051654e  # add [ecx], eax; add bl, ch; or eax, 0x3B30468B; ret 
0x50534244  # add [ecx], eax; xor [esp+ebx*8-0x7C], 0x842C74D2; div byte [esi+ebx-0x09]; retn 0x0000 
0x50534363  # add [ecx], eax; xor [ecx-0x7C], 0x843474D2; div byte [edi-0x09]; retn 0x0000 
0x5053115d  # add [ebx], eax; retn 0x558B 
0x50542923  # add [ebx+eax*4], eax; loopne 0x50542968; pop esi; pop ebp; ret 
0x50515c9c  # add [edi], eax; and [esi], 0x00000000; add esp, 0x0C; ret 
0x5051c8b6  # add [ebx+ecx*4], ecx; dec esp; and al, 0x08; mov [ecx], eax; ret 
0x50531572  # add [esi], ecx; add byte [eax], al; leave; ret 
0x505485b0  # add [edi], ecx; test byte [esi+0x01], bh; add byte [eax], al; push 0x80000001; call [0x5054A000] 
0x50548d3d  # add [edi], ecx; test byte [eax-0x73000000], cl; inc esi; xor al, 0x50; call [0x5054A03C] 
0x50538381  # add [edi], ecx; test [ecx+0x3B000000], eax; sti; jne 0x5053839B; call esi 
0x50549742  # add [edi], ecx; mov word [edi+0x50000000], es; call [0x5054A03C] 
0x50545adc  # add [edi], ecx; xchg eax, ebp; retn 0xCAFE 
0x50535bc5  # add [edi], ecx; mov dh, 0x56; add [ebx], ebp; retn 0x1174 
0x50535b40  # add [edi], ecx; mov dh, 0x56; add [ebx], ebp; retn 0x1574 
0x50521e28  # add [eax], edx; mov eax, [esi]; sub [ecx], eax; pop edi; pop ebx; ret 
0x505096ea  # add [ebx], esp; inc ebp; mov [bx+si+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x50518299  # add [ebx], ebp; retn 0x840F 
0x50535bc9  # add [ebx], ebp; retn 0x1174 
0x50535b44  # add [ebx], ebp; retn 0x1574 
0x505183f3  # add [ebx], ebp; retn 0x7674 
0x505491ec  # add [edx], esi; retn 0x0688 
0x505203ee  # add [ebx], esi; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x5050aeff  # add [ebx], esi; rol byte [eax+0x5F], 0x5E; retn 0x0008 
0x50547229  # add [ebx], esi; rcl byte [eax+0x50], 0x50; lea eax, [ebp-0x40]; push eax; call ebx 
0x50501f3f  # add [ebx], esi; rcl byte [eax+0x50], 0x50; lea eax, [ebp-0x24]; push eax; call [0x5054A264] 
0x5051fde2  # add [ebx], esi; rcr byte [esi+0x40], 0x5B; pop ebp; ret 
0x50542fbb  # add [ebx], esi; leave; cmp [0x5055DED0], eax; sete cl; mov eax, ecx; ret 
0x50541221  # add [ebx], esi; sar byte [0xC0000005], cl; sete dl; mov eax, edx; ret 
0x50524821  # add [ebx], esi; rol byte [ebx-0x3DC4F314], cl; jne 0x5052482F; xor eax, eax; leave; ret 
0x505263f4  # add [0x5055D440], esi; pop esi; pop ebx; ret 
0x5053b6f8  # add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x50532faf  # add [edx], edi; retn 0x0A74 
0x50532fa2  # add [edx], edi; retn 0x1774 
0x5051e78f  # add [edx], edi; ret 
0x5051f9d2  # add [ebx], edi; ror byte [ebx+0x447E0845], 1; push [ebp-0x10]; push eax; call [eax+0x08] 
0x5052428d  # add [eax-0x7D], eax; rol [edx+ecx*2], 0x75; hlt; ret 
0x50545afd  # add [eax-0x0A], eax; ret 
0x5050ef1c  # add [ebp+0x0C], eax; mov [ebp-0x0C], eax; call [0x5054A0D8] 
0x5050ef80  # add [ebp-0x10], eax; add edi, eax; cmp [ebp-0x14], 0x02; jnl 0x5050EFBB; push [ebp-0x18]; call [0x5054A048] 
0x505157c4  # add [esi+0x18], eax; xor eax, eax; inc eax; ret 
0x505157f1  # add [esi+0x18], eax; mov eax, [ebp-0x04]; leave; ret 
0x505363df  # add [esi+0x56], eax; push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x5051d9ab  # add [edi+0x1C], eax; add esp, 0x30; pop edi; pop esi; ret 
0x5051ceb7  # add [eax+0x0C], ecx; xor eax, eax; inc eax; pop esi; ret 
0x5051577c  # add [eax+0x18], ecx; ret 
0x505436a6  # add [eax+0x57], edx; push edi; call [0x5054A16C] 
0x5052dcf3  # add [eax-0x77], edx; dec eax; pushad; call [eax+0x48] 
0x50547147  # add [eax-0x01], edx; xor eax, 0x50556FF8; call [0x5054A02C] 
0x5050ef95  # add [ebx+0x53], edx; push ebx; lea eax, [ebp-0x44]; push eax; call [0x5054A264] 
0x50512dac  # add [ebx+0x53], edx; push ebx; lea eax, [ebp-0x3C]; push eax; call esi 
0x5050aceb  # add [ebx+0x53], edx; push ebx; lea eax, [ebp-0x38]; push eax; call [0x5054A264] 
0x5051e4d5  # add [ebx+0x53], edx; push ebx; lea eax, [ebp-0x34]; push eax; call esi 
0x50508f3b  # add [ebx-0x01], edx; jbe 0x50508F60; push [esi+0x18]; call edi 
0x50542896  # add [esi+0x6A], edx; or edi, edi; jo 0x505428A1; call [0x5054A240] 
0x5050fd17  # add [edi+0x57], edx; push edi; lea eax, [ebp-0x48]; push eax; call esi 
0x50504ee2  # add [edi-0x7B], edx; sal byte [eax+ebx-0x18], 0xC7; sub byte [eax], al; add byte [ebp-0x17E68A40], al; pushfd; retn 0xFFFF 
0x50521e2d  # add [edi+0x5B], ebx; ret 
0x505333f9  # add [edi+0x5E], ebx; pop ebp; ret 
0x5052d81b  # add [edi-0x37], ebx; ret 
0x5051e30e  # add [eax+0x00], ebp; add byte [eax], al; inc eax; push [esp+0x20]; call [0x5054A0A8] 
0x50547d0f  # add [eax+0x00], ebp; add [eax], eax; add byte [ebp-0x0001037B], cl; call [eax+0x74] 
0x5050103c  # add [edx+0x00], ebp; call [0x5054A240]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x5050103c  # add [edx+0x00], ebp; call [0x5054A240] 
0x5051ce08  # add [ebx+0x03], esi; xor eax, eax; ret 
0x50545c3b  # add [ebx+eax+0x6A], esi; adc byte [edx-0x0A], bl; ret 
0x50508f37  # add [ebx+ecx+0x6A], esi; add [ebx-0x01], edx; jbe 0x50508F60; push [esi+0x18]; call edi 
0x50538be6  # add [ebp+ecx+0x57], esi; call ebx 
0x5054711c  # add [ebp+ecx+0x68], esi; xor al, 0x27; add byte [eax], al; call [0x5055DF88] 
0x50546c64  # add [eax+edx-0x7D], esi; enter 0x5002, 0xFF; xor eax, 0x50556FF8; call [0x5054A02C] 
0x5053b6f3  # add [esp+edx-0x73], esi; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x50542137  # add [ebx+ebx+0x53], esi; call [0x5054A024] 
0x505071f8  # add [ecx+ecx*2+0x39], esi; jne 0x5050720A; je 0x50507229; push [ebp+0x0C]; call ebx 
0x50537e95  # add [ebx+ecx*2-0x58], esi; or byte [ebp+0x0B], dh; push ecx; call [0x5054A1C0] 
0x5053b17b  # add [esi+esi*2-0x01], esi; jne 0x5053B165; call [0x5054A060] 
0x50538c10  # add [ebp+0x03], esi; push eax; call ebx 
0x50533394  # add [ebp+0x04], esi; xor eax, eax; inc eax; ret 
0x5052ef4f  # add [ebp+0x04], esi; xor eax, eax; pop esi; ret 
0x505166e6  # add [ebp+0x04], esi; mov eax, esi; pop esi; ret 
0x505167bd  # add [ebp+0x0B], esi; mov eax, [eax+0x4C]; test eax, eax; je 0x505167DB; mov eax, [eax+0x14]; ret 
0x50541a13  # add [ebp+0x58], esi; lea eax, [ebp-0x18]; push eax; push [ebp+0x0C]; call esi 
0x50541cad  # add [ebp-0x29], esi; xor eax, eax; pop ebp; ret 
0x505341e3  # add [ebp-0x13], esi; mov eax, [esp+0x10]; pop ebx; pop esi; pop edi; ret 
0x5053421a  # add [ebp-0x0A], esi; pop ebx; pop esi; mov eax, [esp+0x08]; pop edi; ret 
0x50532e3c  # add [ebp-0x0A], esi; mov eax, [esp+0x08]; pop edi; ret 
0x5050c7f4  # add [ebp+ebx-0x01], edi; jne 0x5050C80A; add eax, 0x000032DC; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x505466f1  # add [eax+esi*8-0x7D], edi; cmp eax, 0x50556FF8; push [ebp+0x0B]; call [0x5054A184] 
0x50546ad6  # add [eax+esi*8-0x01], edi; jne 0x50546AE8; push [ebp+0x08]; call [0x5055DFC0] 
0x50525929  # add [ecx+esi*8-0x73], edi; add al, 0x81; dec [eax]; ret 
0x5051570f  # add [ebp+0x03], edi; xor eax, eax; ret 
0x5050a472  # add [edi+0x02], edi; add cl, cl; retn 0x0008 
0x5054219c  # add [ebx+0x55E14405], eax; push eax; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x50508411  # add [ebx+0x7400147D], eax; push ss; push [ebp+0x14]; push esi; call [0x5054A050] 
0x505083a3  # add [ebx+0x7400187D], eax; or edi, edi; jne 0x505083C5; call ebx 
0x5050842d  # add [ebx+0x7400187D], eax; push ss; push [ebp+0x18]; push esi; call [0x5054A050] 
0x505083b2  # add [ebx+0x74001C7D], eax; or edi, edi; jne 0x505083D8; call ebx 
0x50508449  # add [ebx+0x74001C7D], eax; adc bh, bh; jne 0x5050846F; push esi; call [0x5054A050] 
0x50532492  # add [ebx-0x387CFD3A], eax; add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x50532534+edx*4] 
0x50532802  # add [ebx-0x387CFD3A], eax; add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x505328A4+edx*4] 
0x5052d574  # add [ebx-0x3F7CFB39], eax; add al, 0x83; call [eax] 
0x50532e39  # add [ebx-0x098AFE16], eax; mov eax, [esp+0x08]; pop edi; ret 
0x50534217  # add [ebx-0x098AFE15], eax; pop ebx; pop esi; mov eax, [esp+0x08]; pop edi; ret 
0x505324b6  # add [ebx-0x778DF707], eax; rep movsd; jmp [0x50532534+edx*4] 
0x50532826  # add [ebx-0x778DF707], eax; rep movsd; jmp [0x505328A4+edx*4] 
0x50532964  # add [ebx-0x4D8DF707], eax; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x505325f4  # add [ebx-0x4D8DF707], eax; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x5051e831  # add [eax+eax*8-0x3FCCE88B], eax; mov byte [edx], 0x00; inc eax; ret 
0x5051e856  # add [eax+eax*8-0x26142F8B], eax; xor eax, eax; ret 
0x50516b4d  # add [eax+0x00000124], ecx; ret 
0x50532572  # add [eax+0x468A0147], ecx; add cl, byte [eax+0x458B0247]; or byte [esi+0x5F], bl; leave; ret 
0x5053255e  # add [eax+0x458B0147], ecx; or byte [esi+0x5F], bl; leave; ret 
0x50509726  # add [eax-0x3F7CFDAF], ecx; add al, 0x83; rol [esi+ecx*2], 0x75; loope 0x50509792; ret 
0x5050f0c6  # add [ecx+0x5030EB37], ecx; call [0x5054A0DC] 
0x5051e8ff  # add [ecx+0x00E88045], ecx; loopne 0x5051E906; call [edi+0x33] 
0x50532575  # add [edx+0x47880246], ecx; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x50532463  # add [edx-0x163EFDBA], ecx; add cl, byte [eax-0x397CFDB9]; add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x50532534+edx*4] 
0x505327d3  # add [edx-0x163EFDBA], ecx; add cl, byte [eax-0x397CFDB9]; add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50509723  # add [edx+0x51880150], ecx; add al, byte [ebx-0x3E7CFB40]; add al, 0x4E; jne 0x50509714; pop esi; ret 
0x50506ecf  # add [ebx-0x3F7AEBBD], ecx; je 0x50506EE9; push eax; push edi; call [0x5054A050] 
0x50506e34  # add [ebx-0x38C4E7BD], ecx; je 0x50506E43; push eax; call ebp 
0x50506ee8  # add [ebx-0x3F7AE7BD], ecx; je 0x50506F02; push eax; push edi; call [0x5054A050] 
0x50506e42  # add [ebx-0x38C4E3BD], ecx; je 0x50506E51; push eax; call ebp 
0x50506f01  # add [ebx-0x3F7AE3BD], ecx; je 0x50506F1B; push eax; push edi; call [0x5054A050] 
0x50506e50  # add [ebx-0x38C4DFBD], ecx; je 0x50506E5F; push eax; call ebp 
0x50506f1a  # add [ebx-0x3F7ADFBD], ecx; je 0x50506F34; push eax; push edi; call [0x5054A050] 
0x50506e5e  # add [ebx-0x38C4DBBD], ecx; je 0x50506E6D; push eax; call ebp 
0x50532561  # add [ebx+0x5F5E0845], ecx; leave; ret 
0x5051e29d  # add [ebx+0x5E5FFC45], ecx; pop ebx; leave; ret 
0x5051fdd9  # add [ebx+0x4D8B0446], ecx; sbb byte [edi-0x77], bl; add [ebx], esi; rcr byte [esi+0x40], 0x5B; pop ebp; ret 
0x50506a55  # add [ebx-0x3F7AEBB9], ecx; je 0x50506A94; push eax; call ebx 
0x505069a0  # add [ebx-0x3F7AE7B9], ecx; je 0x505069AF; push eax; call ebx 
0x50506a93  # add [ebx-0x3F7AE7B9], ecx; je 0x50506AD2; push eax; call ebx 
0x505069ae  # add [ebx-0x3F7AE3B9], ecx; je 0x505069BD; push eax; call ebx 
0x50506ad1  # add [ebx-0x3F7AE3B9], ecx; je 0x50506B10; push eax; call ebx 
0x505069bc  # add [ebx-0x3F7ADFB9], ecx; je 0x505069CB; push eax; call ebx 
0x50506b0f  # add [ebx-0x3F7ADFB9], ecx; je 0x50506B4E; push eax; call ebx 
0x505069ca  # add [ebx-0x3F7ADBB9], ecx; je 0x505069D9; push eax; call ebx 
0x50506b4d  # add [ebx-0x3F7ADBB9], ecx; je 0x50506B86; push eax; call ebx 
0x5051c8b0  # add [ebx+0x448D0848], ecx; add [ebx+ecx*4], ecx; dec esp; and al, 0x08; mov [ecx], eax; ret 
0x50506f33  # add [ebx-0x247ADBA5], ecx; je 0x50506F49; push ebx; push edi; call [0x5054A050] 
0x5050a8d1  # add [ebx+0x0000D886], ecx; add byte [ebp+0x5F], bl; pop esi; pop ebx; retn 0x0004 
0x50525280  # add [ebx-0x742DCC3E], ecx; lock add ecx, 0x04; or esi, edx; jne 0x50525278; pop esi; ret 
0x50542746  # add [ebp+0x56500845], ecx; call [0x5054A178]; push eax; call [0x5054A190] 
0x50542746  # add [ebp+0x56500845], ecx; call [0x5054A178] 
0x5051625f  # add [ebp+0x53501045], ecx; call [esi+0x04] 
0x50547e93  # add [ebp-0x00AFCFBB], ecx; jne 0x50547E47; call [0x5054A00C] 
0x50548627  # add [ebp-0x00AF67BB], ecx; jne 0x505485C3; call [0x5054A00C] 
0x5051e3e0  # add [ebp-0x74AF07BB], ecx; inc ebp; or byte [edx+0x00], ch; push [eax]; call [0x5054A0EC] 
0x505401f4  # add [ebp-0x74AF00BB], ecx; pop es; push [esi+eax]; call [0x5054A0C0] 
0x5052f45c  # add [ebp+0x57502C46], ecx; push [esi]; call [0x5054A140] 
0x50542713  # add [ebp+0x5051084D], ecx; call [0x5054A174] 
0x505430dd  # add [ebp+0x5351144D], ecx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x5054A190] 
0x5053bbca  # add [ebp-0x001ABF73], ecx; call [ecx+0x50]; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x5054A190] 
0x5053bbca  # add [ebp-0x001ABF73], ecx; call [ecx+0x50] 
0x505169a0  # add ebx, eax; add eax, 0x000000F4; ret 
0x50516a54  # add ebx, eax; mov eax, [eax+0x0000010C]; ret 
0x50516aae  # add ebx, eax; mov eax, [eax+0x00000114]; ret 
0x50516b38  # add ebx, eax; mov eax, [eax+0x00000124]; ret 
0x50516c7b  # add ebx, eax; mov eax, [eax+0x00000130]; ret 
0x505266f7  # add ebx, eax; push [esp+0x0C]; mov ecx, [eax]; push [esp+0x0C]; push eax; call [ecx+0x08] 
0x5052a6c5  # add eax, ebp; cmp eax, 0x59FFFF22; pop ecx; ret 
0x50524e64  # add eax, ebp; sahf; jp 0x50524E68; inc [ebx+0x59590020]; mov [eax+0x04], 0x00001000; ret 
0x5053c362  # add eax, ebp; mov esp, 0x59FFFFC8; ret 
0x5052f540  # add eax, ebp; retn 0xFED3 
0x5051dc40  # add eax, ebp; retn 0xFFEC 
0x5052420f  # add eax, ebp; xchg bh, bh; inc [ebx+0x59590020]; mov ecx, [esp+0x04]; mov [eax+0x04], ecx; ret 
0x5051471f  # add ecx, ebp; mov dl, 0x00; add byte [eax], al; mov esi, [0x5054A188]; call esi 
0x50509e80  # add ebx, ebp; pop es; and [eax+0x000000DC], 0xFFFFFFFE; xor eax, eax; retn 0x0008 
0x5050701e  # add ebx, ebp; fcos; jne 0x50507030; call [0x5054A0AC] 
0x50508e51  # add edi, edi; jo 0x50508E59; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x5051309c  # add edi, edi; jno 0x505130BC; push 0x5054ACCC; push eax; call [0x5054A260] 
0x50541a77  # add edi, edi; jne 0x50541A83; call ebx 
0x505414a3  # add edi, edi; jne 0x505414BF; call esi 
0x50543869  # add edi, edi; jne 0x50543889; call esi 
0x50539ea1  # add edi, edi; jne 0x50539EC5; call esi 
0x50531875  # add edi, edi; jne 0x505318A1; call ebx 
0x5053186d  # add edi, edi; jne 0x50531865; call ebx 
0x5050226c  # add edi, edi; jbe 0x50502280; push [esi+0x20]; push [esi+0x18]; call [0x5054A27C] 
0x505231ee  # add edi, edi; lea edx, [edi+edi*8-0x01]; call [eax-0x01] 
0x50507358  # add edi, edi; mov bh, 0xF4; aaa; add byte [eax], al; call [0x5055CA14] 
0x505086cf  # add al, byte [eax]; add byte [eax], al; mov [ebp-0x20], ebx; mov [ebp-0x28], 0x00000001; mov [ebp-0x2C], ebx; call [0x5055C990] 
0x50503399  # add al, byte [eax]; add byte [ebx], bh; ret 
0x50509957  # add al, byte [eax]; add byte [ebx], bh; fdiv [ecx+ecx+0x57]; push ebx; push eax; call [0x5054A04C] 
0x5052e0b2  # add al, byte [eax]; add byte [eax+0x33], dl; fucomi st0, st0; ret 
0x505179e8  # add al, byte [eax]; add byte [eax+0x6A], dl; call [ebx-0x77] 
0x5050547e  # add al, byte [eax]; add byte [eax-0x73], dl; xchg byte [ebx+eax], dl; add byte [eax], al; push eax; call ebx 
0x50506583  # add al, byte [eax]; add byte [eax-0x01], dl; adc eax, 0x5054A190; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x5052e129  # add al, byte [eax]; add byte [eax-0x01], dl; jnbe 0x5052E138; call [esi] 
0x5051357b  # add al, byte [eax]; add byte [ebx+0x50], dl; call edi 
0x5050d5be  # add al, byte [eax]; add byte [ebp-0x73], dl; xchg [eax+0x50000006], esp; lea eax, [esi+0x14]; push eax; call ebx 
0x50548e24  # add al, byte [eax]; add byte [esi-0x75], dl; xor eax, 0x5054A03C; call esi 
0x50512953  # add al, byte [eax]; add byte [esi-0x75], dl; ret 
0x505485a9  # add al, byte [eax]; add byte [edi+0x50], dl; test bl, 0x01; je 0x50548735; push 0x80000001; call [0x5054A000] 
0x50548a42  # add al, byte [eax]; add byte [edi+0x50], dl; test bl, 0x01; je 0x50548A65; push 0x80000001; call [0x5054A004] 
0x5050c721  # add al, byte [eax]; add byte [edi-0x01], dl; jne 0x5050C718; call [0x5054A04C] 
0x50535e53  # add al, byte [eax]; add byte [ecx+0x59], bl; ret 
0x50514ce0  # add al, byte [eax]; add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50546824  # add al, byte [eax]; add byte [edx+0x02], ch; push [0x5055E07C]; call esi 
0x5050c6ce  # add al, byte [eax]; add byte [edx+0x40], ch; push esi; push eax; call [0x5054A04C] 
0x5050c66b  # add al, byte [eax]; add byte [eax-0x15000000], al; push 0x5054ABF8; push edi; call ebx 
0x5050cba1  # add al, byte [eax]; add byte [ebp+0x502274C0], al; call [0x5054A03C] 
0x50503302  # add al, byte [eax]; add byte [ebp+0x530974C9], al; push ecx; push eax; call [0x5054A04C] 
0x5050d6ee  # add al, byte [eax]; add byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x50506605  # add al, byte [eax]; add byte [ebx+0x54A09035], cl; push eax; push 0x00008000; call esi 
0x5050ab9c  # add al, byte [eax]; add byte [ebx+0x3B571045], cl; ret 
0x5053a88c  # add al, byte [eax]; add byte [ebx-0x75171BBB], cl; fdivp st7, st0; inc ebx; push [eax]; call [0x5054A1C0] 
0x50514f13  # add al, byte [eax]; add byte [ebx-0x2EFCEFAE], cl; push edx; push [edi+0x64]; call [eax+0x14] 
0x50514dbc  # add al, byte [eax]; add byte [ebx+0x00023C8F], cl; add bh, bh; jno 0x50514DD8; push [edi+0x64]; call [eax+0x14] 
0x5051364e  # add al, byte [eax]; add byte [ebp+0x5750F845], cl; call [0x5054A0CC] 
0x5053f586  # add al, byte [eax]; add byte [ebp-0x00020B7B], cl; call [eax-0x73] 
0x5052e35b  # add al, byte [eax]; add byte [ebp-0x00020B7B], cl; call [eax-0x01] 
0x50504093  # add al, byte [eax]; add byte [ebp-0x00021773], cl; call [ecx+0x68] 
0x50514ee7  # add al, byte [eax]; add bl, ch; retn 0x87C7 
0x50545b96  # add al, byte [eax]; add dh, dh; retn 0x7408 
0x50514b7b  # add al, byte [eax]; add bh, bh; jno 0x50514B91; push [edi+0x50]; call [eax+0x10] 
0x50514dc2  # add al, byte [eax]; add bh, bh; jno 0x50514DD8; push [edi+0x64]; call [eax+0x14] 
0x50514f4e  # add al, byte [eax]; add bh, bh; jno 0x50514F64; push [edi+0x74]; call [eax+0x10] 
0x5050cfa1  # add al, byte [eax]; add bh, bh; jne 0x5050CFB3; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x5050cf82  # add al, byte [eax]; add bh, bh; jne 0x5050CF94; push ebx; call [0x5054A04C] 
0x50513557  # add al, byte [eax]; add bh, bh; jne 0x50513569; push esi; call [0x5054A04C] 
0x5050fac7  # add al, byte [eax]; add bh, bh; jne 0x5050FAD9; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x50510397  # add al, byte [eax]; add bh, bh; jne 0x505103A9; lea eax, [esi+0x000006A0]; push eax; call edi 
0x5050fad8  # add al, byte [eax]; add bh, bh; jne 0x5050FAEE; lea eax, [esi+0x000008A0]; push eax; call ebx 
0x505103a8  # add al, byte [eax]; add bh, bh; jne 0x505103BE; lea eax, [esi+0x000008A0]; push eax; call edi 
0x5051f323  # add al, byte [eax]; movzx eax, ax; ret 
0x5051e437  # add al, byte [eax]; xor eax, eax; ret 
0x5051e839  # add al, byte [eax]; inc eax; ret 
0x505071db  # add al, byte [eax]; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x505115a0  # add al, byte [eax]; pop ecx; pop ecx; ret 
0x50534393  # add al, byte [eax]; pop edi; ret 
0x505480a8  # add al, byte [eax]; push 0x00000000; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x5054A004] 
0x50503264  # add al, byte [eax]; add ebp, 0x0000018C; leave; retn 0x0004 
0x50507385  # add al, byte [eax]; add ebp, 0x0000018C; leave; retn 0x0008 
0x5050d92c  # add al, byte [eax]; add ebp, 0x00000F94; leave; retn 0x000C 
0x5050f688  # add al, byte [eax]; add ebp, 0x00001FFC; leave; retn 0x000C 
0x5051f2b9  # add al, byte [eax]; and [esi+0x2C], 0x00000000; pop esi; pop ebp; ret 
0x5050edd6  # add al, byte [eax]; add esp, 0x0C; cmp [ebp-0x04], ebx; je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8] 
0x5050c399  # add al, byte [eax]; add esp, 0x0C; cmp esi, ebx; je 0x5050C3BD; push esi; call [0x5054A03C] 
0x5050e593  # add al, byte [eax]; add esp, 0x0C; pop edi; pop ebx; leave; ret 
0x5050343d  # add al, byte [eax]; add esp, 0x0C; lea eax, [ebp-0x2C]; push eax; mov [ebp-0x2C], edi; call [0x5054A054] 
0x5050d39b  # add al, byte [eax]; add esp, 0x0C; lea eax, [ebp-0x24]; push eax; call edi 
0x505065ee  # add al, byte [eax]; add esp, 0x0C; lea eax, [ebp-0x20]; push eax; mov [ebp-0x20], esi; call [0x5054A054] 
0x50506881  # add al, byte [eax]; add esp, 0x0C; lea eax, [ebp-0x00000098]; push eax; mov [ebp-0x00000098], edi; call [0x5054A054] 
0x5050f0e1  # add al, byte [eax]; add esp, 0x0C; push [ebp-0x04]; call [0x5054A0D8] 
0x5050f939  # add al, byte [eax]; add ebp, 0x68; leave; retn 0x0010 
0x505035e5  # add al, byte [eax]; add ebp, 0x6C; leave; retn 0x000C 
0x505028f8  # add al, byte [eax]; add ebp, 0x74; leave; retn 0x0004 
0x50506852  # add al, byte [eax]; add ebp, 0x78; leave; ret 
0x50504380  # add al, byte [eax]; leave; retn 0x0004 
0x505051ad  # add al, byte [eax]; leave; retn 0x0008 
0x50502a1a  # add al, byte [eax]; leave; retn 0x000C 
0x50504c56  # add al, byte [eax]; leave; retn 0x0010 
0x5050ae46  # add al, byte [eax]; leave; retn 0x0014 
0x50505baa  # add al, byte [eax]; leave; retn 0x001C 
0x50508594  # add al, byte [eax]; leave; retn 0x0020 
0x505059b9  # add al, byte [eax]; leave; retn 0x0024 
0x50505ee8  # add al, byte [eax]; leave; retn 0x002C 
0x5050693b  # add al, byte [eax]; leave; ret 
0x50512137  # add al, byte [edx]; add cl, cl; retn 0x0010 
0x50533fb3  # add al, byte [ebx]; retn 0x848D 
0x5053e8d9  # add al, byte [ebx]; ret 
0x5050b432  # add al, byte [ebx]; fild word [ebx]; ret 
0x50545b73  # add cl, byte [ebx]; retn 0xF75E 
0x50545b9d  # add cl, byte [ebx]; ret 
0x505413f4  # add cl, byte [edi]; test bh, cl; add byte [eax], al; add byte [ebx], bh; ret 
0x5052f371  # add cl, byte [edi]; test [0xFFFFFFFF], edi; jbe 0x5052F37F; call [0x5054A13C] 
0x5050fc97  # add cl, byte [edi]; lea eax, [edi-0x01000000]; jne 0x5050FC8D; call [0x5054A048] 
0x5051571d  # add cl, byte [edi]; xchg eax, ebp; ret 
0x50535b61  # add cl, byte [edi]; mov dh, 0x56; add ch, byte [ebx]; retn 0x1574 
0x50501271  # add dl, byte [ecx]; add eax, [eax]; leave; retn 0x000C 
0x50535b65  # add ch, byte [ebx]; retn 0x1574 
0x50507631  # add dh, byte [ebx]; rcr byte [ebx+0x5F], 0x5E; leave; retn 0x0008 
0x5051c4c4  # add dh, byte [ebx]; rcr byte [edi+0x5B], 0xC9; ret 
0x505494d0  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x505495e3  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0014 
0x50545f81  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x50549583  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; retn 0x000C 
0x50508a7b  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; retn 0x0010 
0x5051d8eb  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x5053a6d8  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5D; ret 
0x505297ca  # add dh, byte [ebx]; retn 0x3325 
0x50528f33  # add dh, byte [ebx]; ret 
0x5050ffab  # add dh, byte [ebx]; fild [ebp+0x571374FF]; call esi 
0x505107a4  # add dh, byte [ebx]; test byte [ebx+0x7400AC7D], 0x0D; push [ebp-0x54]; call edi 
0x5053a6a8  # add dh, byte [ebx]; call [esi-0x18] 
0x50513689  # add dh, byte [0x33590000]; rcr byte [ecx+0x5E], 0x5F; pop ebx; leave; retn 0x000C 
0x5051c86c  # add bh, byte [0x5F02FF83]; jle 0x5051C881; and eax, 0x3F; mov al, byte [eax+0x5054B5C0]; mov byte [ecx+0x03], al; ret 
0x50544c6f  # add al, byte [edx+0x3A]; ret 
0x50546ee3  # add al, byte [edx-0x75]; retn 0x4848 
0x5050a9a9  # add dl, byte [eax+0x0F]; mov bh, 0x06; push eax; push 0x5054AB70; push ebx; call [0x5054A260] 
0x5051e2d9  # add dl, byte [eax+0x50]; push 0x40000000; push [esp+0x20]; call [0x5054A0A8] 
0x505475d4  # add dl, byte [eax-0x01]; xor eax, 0x50556FF8; call [0x5054A02C]; xor eax, eax; ret 
0x50546c69  # add dl, byte [eax-0x01]; xor eax, 0x50556FF8; call [0x5054A02C] 
0x5052e2bd  # add dl, byte [ebx-0x18]; sub al, 0xFE; call [edi-0x18] 
0x50508f4c  # add dl, byte [ebx-0x01]; jbe 0x50508F71; push [esi+0x18]; call edi 
0x505070f1  # add dl, byte [esi+0x53]; call [0x5054A0A4] 
0x5052dcb4  # add dl, byte [esi-0x77]; inc esi; push esp; mov [esi+0x58], ebx; mov [esi+0x5C], edi; call [esi+0x48] 
0x5050fcaa  # add dl, byte [edi+0x57]; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x50508033  # add bl, byte [edx+0x2B]; retn 0x2B74 
0x5052e208  # add bl, byte [ebx+0x3B]; ret 
0x505384d9  # add bl, byte [ebp-0x3D]; xor eax, eax; inc eax; mov [0x5055E140], eax; pop ebp; ret 
0x505074e8  # add ch, byte [eax-0x0C]; movsd; push esp; push eax; push edx; call [0x5055C984] 
0x50507601  # add ch, byte [eax-0x0C]; movsd; push esp; push eax; push edi; call [0x5055C984] 
0x50537bb2  # add ch, byte [edx+0x00]; call [0x5055E270]; xor eax, eax; pop ebp; ret 
0x50537bb2  # add ch, byte [edx+0x00]; call [0x5055E270] 
0x50545c0e  # add dh, byte [edx+ecx+0x3B]; sal [ebp+0x0F], 1; or eax, 0x00008000; ret 
0x50508f48  # add dh, byte [ebx+ecx+0x6A]; add dl, byte [ebx-0x01]; jbe 0x50508F71; push [esi+0x18]; call edi 
0x505071a1  # add dh, byte [ecx+ecx*2+0x39]; jne 0x505071B3; je 0x505071D2; push [ebp+0x0C]; call ebx 
0x505167cd  # add dh, byte [ebp+0x0B]; mov eax, [eax+0x58]; test eax, eax; je 0x505167DB; mov eax, [eax+0x1C]; ret 
0x5051681a  # add dh, byte [ebp+0x0B]; mov eax, [eax+0x58]; test eax, eax; je 0x50516828; mov eax, [eax+0x24]; ret 
0x50542729  # add dh, byte [ebp-0x26]; call [0x5054A0E4] 
0x50534403  # add bh, byte [ecx+ecx*8-0x7D]; jnl 0x5053441D; and al, 0x7F; ret 
0x5050ef88  # add bh, byte [ebp+0x30]; push [ebp-0x18]; call [0x5054A048] 
0x5050acde  # add bh, byte [ebp+0x30]; push [ebp-0x08]; call [0x5054A048] 
0x50510503  # add bh, byte [ebp+0x32]; push [ebp-0x0C]; call [0x5054A048] 
0x50509729  # add al, byte [ebx-0x3E7CFB40]; add al, 0x4E; jne 0x50509714; pop esi; ret 
0x5053246c  # add al, byte [ebx-0x387CFC3A]; add eax, [ebx-0x338DF707]; rep movsd; jmp [0x50532534+edx*4] 
0x505327dc  # add al, byte [ebx-0x387CFC3A]; add eax, [ebx-0x338DF707]; rep movsd; jmp [0x505328A4+edx*4] 
0x505324b3  # add al, byte [ebx-0x067CFE39]; or byte [edx-0x78], dh; rep movsd; jmp [0x50532534+edx*4] 
0x50532823  # add al, byte [ebx-0x067CFE39]; or byte [edx-0x78], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50532495  # add al, byte [ebx-0x067CFD39]; or byte [edx-0x5A], dh; rep movsd; jmp [0x50532534+edx*4] 
0x50532805  # add al, byte [ebx-0x067CFD39]; or byte [edx-0x5A], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50532906  # add al, byte [ebx-0x067CFC1E]; or byte [edx+0x0D], dh; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x50532596  # add al, byte [ebx-0x067CFC1E]; or byte [edx+0x0D], dh; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532411  # add al, byte [ebx-0x067CFC1E]; or byte [edx+0x2A], dh; rep movsd; jmp [0x50532534+edx*4] 
0x50532781  # add al, byte [ebx-0x067CFC1E]; or byte [edx+0x2A], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50532988  # add al, byte [ebx-0x107CFD12]; add al, byte [ebx-0x778DF707]; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x50532618  # add al, byte [ebx-0x107CFD12]; add al, byte [ebx-0x778DF707]; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532961  # add al, byte [ebx-0x067CFE11]; or byte [edx-0x4E], dh; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x505325f1  # add al, byte [ebx-0x067CFE11]; or byte [edx-0x4E], dh; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x5053298b  # add al, byte [ebx-0x067CFD11]; or byte [edx-0x78], dh; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x5053261b  # add al, byte [ebx-0x067CFD11]; or byte [edx-0x78], dh; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x5053298e  # add al, byte [ebx-0x778DF707]; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x5053261e  # add al, byte [ebx-0x778DF707]; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532498  # add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x50532534+edx*4] 
0x50532808  # add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x505328A4+edx*4] 
0x505476e7  # add cl, byte [eax+0x0FF33B19]; test byte [esi+0x56000000], cl; call [0x5054A03C] 
0x5053248f  # add cl, byte [eax-0x397CFEB9]; add al, byte [ebx-0x067CFD39]; or byte [edx-0x5A], dh; rep movsd; jmp [0x50532534+edx*4] 
0x505327ff  # add cl, byte [eax-0x397CFEB9]; add al, byte [ebx-0x067CFD39]; or byte [edx-0x5A], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50532469  # add cl, byte [eax-0x397CFDB9]; add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x50532534+edx*4] 
0x505327d9  # add cl, byte [eax-0x397CFDB9]; add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50532714  # add cl, byte [eax+0x468A0247]; add [eax+0x458B0147], ecx; or byte [esi+0x5F], bl; leave; ret 
0x50532578  # add cl, byte [eax+0x458B0247]; or byte [esi+0x5F], bl; leave; ret 
0x50536b0e  # add cl, byte [ecx-0x743C36FF]; call [ebp-0x75] 
0x50548819  # add cl, byte [ecx+0x40C03306]; pop esi; retn 0x000C 
0x5051e12b  # add cl, byte [ecx+0x5FC78B10]; pop esi; mov edx, ecx; pop ebx; ret 
0x505473f1  # add cl, byte [ecx+0x2714681E]; add byte [eax], al; call [0x5055DF88] 
0x505473e8  # add cl, byte [ecx+0x14758B1F]; cmp esi, ebx; je 0x505473F4; mov [esi], ebx; push 0x00002714; call [0x5055DF88] 
0x50516dd8  # add cl, byte [ecx-0x72A1A0C8]; inc ebx; add al, 0x5B; leave; ret 
0x50501dbc  # add cl, byte [ecx+0x7DC73B39]; and byte [ebx], bh; ret 
0x50506618  # add cl, byte [ecx+0x2775DC45]; cmp [ebp-0x1C], 0x04; jbe 0x50506645; mov ebx, [0x5054A08C]; push 0x5054A5CC; call ebx 
0x50532717  # add cl, byte [edx+0x47880146]; add [ebx+0x5F5E0845], ecx; leave; ret 
0x50501552  # add cl, byte [ebx-0x097AF8CC]; je 0x50501617; test [esi+0x000000DC], 0x00008000; jne 0x5050157F; call [0x5054A044] 
0x5053257b  # add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x50506cb2  # add cl, byte [ebx-0x3F7AEBB9]; je 0x50506CF1; push eax; call ebx 
0x50506bfd  # add cl, byte [ebx-0x3F7AE7B9]; je 0x50506C0C; push eax; call ebx 
0x50506cf0  # add cl, byte [ebx-0x3F7AE7B9]; je 0x50506D2F; push eax; call ebx 
0x50506d2e  # add cl, byte [ebx-0x3F7AE3B9]; je 0x50506D6D; push eax; call ebx 
0x50506c19  # add cl, byte [ebx-0x3F7ADFB9]; je 0x50506C28; push eax; call ebx 
0x50506d6c  # add cl, byte [ebx-0x3F7ADFB9]; je 0x50506DAB; push eax; call ebx 
0x50506c27  # add cl, byte [ebx-0x3F7ADBB9]; je 0x50506C36; push eax; call ebx 
0x50506daa  # add cl, byte [ebx-0x3F7ADBB9]; je 0x50506DE3; push eax; call ebx 
0x50537103  # add cl, byte [ebx+0x2440F6C2]; xor byte [edi+ebx-0x18], 0x84; xor byte [eax], al; add byte [ebx], dh; call [edi+0x57] 
0x5051e079  # add cl, byte [ebx+0x5E5F5DC5]; ret 
0x50514218  # add cl, byte [ebx+0x5E5F5BC7]; leave; retn 0x0008 
0x50514146  # add cl, byte [ebx+0x5E5F5BC7]; leave; retn 0x000C 
0x50532f76  # add cl, byte [ebx-0x36A00339]; ret 
0x5051496a  # add cl, byte [ebx+0x2BC78BFE]; ret 
0x5054041d  # add cl, byte [ebp-0x74AF07BB]; pop es; push [esi+eax]; call [0x5054A0C0] 
0x505268e7  # add cl, byte [ebp-0x39AD1FAB]; inc ebp; loopne 0x505268F5; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5053bb81  # add cl, byte [ebp-0x001ABF7B]; call [ebx+0x50] 
0x50531495  # add cl, byte [ebp-0x00011B7B]; call [eax+0x56] 
0x5051d05c  # add cl, cl; ret 
0x50542f40  # add ch, al; xor eax, 0x59FFFF4B; ret 
0x5053237e  # add dh, bl; ret 
0x50545c58  # add dh, dh; ret 
0x50543b5c  # add dh, bh; fcomp [esi+0x5D]; ret 
0x5053cef5  # add bh, dh; ret 
0x50546828  # add bh, bh; xor eax, 0x5055E07C; call esi 
0x50537b08  # add bh, bh; rol byte [ebx+0x753B04C6], 1; or byte [edx-0x10], dh; pop esi; pop ebp; ret 
0x50538483  # add bh, bh; rol byte [ebx-0x01C4FB39], 1; jc 0x5053847E; pop edi; pop esi; ret 
0x5052f136  # add bh, bh; inc [ebx+0x5E5F1CC4]; pop ebx; leave; ret 
0x5052f0ed  # add bh, bh; dec [ecx+0x088B0847]; push eax; call [ecx+0x20] 
0x50517d4c  # add eax, [eax]; add byte [edi], cl; test ah, bh; add byte [eax], al; add byte [ebx], ch; retn 0x840F 
0x5051f67f  # add eax, [eax]; add byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x505044e9  # add eax, [eax]; add byte [ebx], dh; call [edi+0x53] 
0x5051e508  # add eax, [eax]; add byte [ebx-0x01], dl; jne 0x5051E4FF; push [ebp-0x04]; call [0x5054A114] 
0x50537a53  # add eax, [eax]; add byte [edi-0x01], dl; adc eax, 0x5054A048; push [ebp+0x08]; call [0x5054A1B0] 
0x5052d3d7  # add eax, [eax]; add byte [ecx+0x59], bl; ret 
0x5051e497  # add eax, [eax]; add byte [ecx-0x77], bl; jne 0x5051E486; call edi 
0x5054637e  # add eax, [eax]; add byte [eax-0x50], ch; and edx, [ebp+0x50]; call [0x5054A08C] 
0x5053cc75  # add eax, [eax]; add byte [ebx-0x0001A343], al; jmp [ebx+0x74] 
0x5050a1b4  # add eax, [eax]; add byte [ebx+0x54A04C35], cl; push eax; push eax; push edi; call esi 
0x505463a4  # add eax, [eax]; add byte [ebx+0x54A08835], cl; push eax; push 0x505523A8; push eax; call esi 
0x505467b6  # add eax, [eax]; add byte [ebx+0x54A08835], cl; push eax; push 0x505523BC; push eax; call esi 
0x5054634d  # add eax, [eax]; add byte [ebx+0x54A09035], cl; push eax; push 0x00008000; call esi 
0x50508008  # add eax, [eax]; add byte [ebp-0x72AE23B3], cl; sbb [eax+edi+0x5A6A0000], 0x50; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x50519654  # add eax, [eax]; add cl, cl; ret 
0x50507ee2  # add eax, [eax]; cmp eax, 0x00002733; jne 0x50507F03; call ebx 
0x5051f73d  # add eax, [eax]; inc ecx; and ecx, 0x00007FFF; mov [eax+0x00038000], ecx; ret 
0x50501091  # add eax, [eax]; cmp [esp+0x0C], 0x00000000; je 0x505010A9; push [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x50507e99  # add eax, [eax]; mov ebx, [0x5054A188]; call ebx 
0x5051f737  # add eax, [eax]; mov ecx, [eax+0x00038000]; inc ecx; and ecx, 0x00007FFF; mov [eax+0x00038000], ecx; ret 
0x5051f74a  # add eax, [eax]; ret 
0x50501342  # add eax, [eax]; leave; retn 0x0008 
0x50501273  # add eax, [eax]; leave; retn 0x000C 
0x50508710  # add eax, [eax]; push [ebp-0x18]; mov esi, eax; call [0x5055C9B8] 
0x50507b7c  # add eax, [eax]; push [ebp-0x14]; mov [ebp-0x20], eax; call [0x5055C9B8] 
0x50532b8e  # add eax, [ecx]; add byte [eax], al; pop ebp; ret 
0x5052d12f  # add eax, [ebx]; retn 0x5653 
0x5050b42d  # add eax, [ebx]; retn 0xF8C1 
0x50532432  # add eax, [ebx]; enter 0x24FF, 0x85; dec eax; and al, 0x53; push eax; jmp [0x50532544+ecx*4] 
0x50545f25  # add ecx, [eax]; add byte [ebp+eax+0x0D], dh; add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x505088ce  # add ecx, [ecx]; add byte [edi], cl; test bl, dl; add byte [eax], al; add byte [ebx], bh; ret 
0x5053efe9  # add ecx, [ecx]; push es; ret 
0x505052a4  # add esp, [ecx]; inc ebp; rol byte [ebx+0x7400E07D], 1; or al, 0xFF; jne 0x50505291; call ebx 
0x5053ab50  # add ebp, [ebx]; ret 
0x50532936  # add ebp, [ebx]; enter 0x24FF, 0x85; inc esp; sub [ebx+0x50], edx; jmp [0x50532A40+ecx*4] 
0x505325c6  # add ebp, [ebx]; enter 0x24FF, 0x85; aam 0x25; push ebx; push eax; jmp [0x505326D0+ecx*4] 
0x5051c414  # add esi, [ebx]; rol byte [eax+0x5E], 0x5B; ret 
0x50507cb7  # add esi, [ebx]; rol byte [eax+0x5F], 0x5E; pop ebx; leave; retn 0x0008 
0x505266e1  # add esi, [ebx]; rol byte [eax-0x75], 0x0E; push eax; push esi; call [ecx+0x1C] 
0x50547596  # add esi, [ebx]; rol bl, 0x50; call [0x5054A030]; movzx eax, al; and eax, 0x01; ret 
0x50547596  # add esi, [ebx]; rol bl, 0x50; call [0x5054A030] 
0x5051ce2c  # add esi, [ebx]; rol bl, 0x8B; adc [ebx], eax; retn 0xB60F 
0x505391b6  # add esi, [ebx]; rol bl, 0xB8; add al, 0x04; add byte [eax], al; ret 
0x5053d781  # add esi, [0x5055E124]; push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50525a73  # add eax, [eax+0x59]; inc eax; ret 
0x505260e8  # add eax, [ecx-0x7D]; retn 0x3B04 
0x5052a33a  # add eax, [ebx+0x0F]; mov dh, 0x46; add al, 0x0F; mov dh, 0x56; add eax, 0x0B08E0C1; retn 0xB60F 
0x5054027c  # add eax, [ebx-0x75]; ret 
0x505162af  # add eax, [ebp+0x14]; push eax; push ebx; call [esi+0x08] 
0x5050b82b  # add eax, [esi+0x08]; mov edi, [0x5054A260]; push eax; call edi 
0x5050d7c0  # add eax, [esi-0x15]; push ss; mov esi, [ebp-0x74]; push esi; call edi 
0x5053d660  # add ecx, [eax+0x0C]; mov ebx, 0x00008000; push ebx; push ecx; call esi 
0x5051e1bd  # add ecx, [ebp+0x10]; add eax, ecx; pop ebp; ret 
0x5052dd1f  # add edx, [eax-0x77]; dec eax; call [fs:eax+0x48] 
0x5053b18f  # add edx, [eax-0x01]; jne 0x5053B184; and edi, 0x7FFFFFFF; push edi; push [ebp+0x0C]; call [0x5054A0A8] 
0x5054404d  # add edx, [eax-0x01]; salc; pop esi; ret 
0x5052e890  # add edx, [edx-0x73]; push ebp; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x505275b2  # add edx, [ebx+0x68]; rol cl, 1; push esp; push eax; push edi; call [eax+0x08] 
0x50527305  # add edx, [esi+0x53]; call [eax+0x18] 
0x505275f7  # add edx, [edi+0x53]; call [eax+0x08] 
0x5050fbc5  # add edx, [edi+0x57]; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5051fcc1  # add ebx, [eax-0x15]; jnp 0x10D50D0A; or bl, byte [ecx+0x0307E283]; retn 0xF8C1 
0x50533df0  # add ebx, [ebp+0x10]; cmp ebx, [ebp-0x08]; jnbe 0x50533E04; push edi; push ebx; call [ebp+0x14] 
0x50533dd4  # add ebx, [ebp+0x10]; cmp ebx, edi; jnc 0x50533DF0; push edi; push ebx; call [ebp+0x14] 
0x5054400f  # add ebp, [eax+0x00]; add byte [eax], al; inc eax; push 0x50552104; call [0x5054A0A8] 
0x50518fcf  # add esi, [ebp+eax-0x7D]; clc; add al, 0x75; add ecx, [ecx+0x5F5B305E]; pop esi; ret 
0x5052e45d  # add esi, [ebp+0x10]; mov eax, [esi+0x0C]; push [esi+0x64]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5052e5d6  # add esi, [ebp+0x13]; mov eax, [esi+0x0C]; push [esi+0x64]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5052e17e  # add esi, [ebp+0x13]; mov eax, [edi+0x0C]; push [edi+0x64]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5053d832  # add edi, [ecx+0x0C]; push 0x00008000; push edi; call [0x5054A220] 
0x50538270  # add eax, [ebx+0x01FF0020]; leave; ret 
0x50516adc  # add eax, [ebx+0x448B0021]; and al, 0x04; test eax, eax; jne 0x50516AE9; ret 
0x50508299  # add eax, [ebx+0x575030C0]; call [0x5055CA2C] 
0x5053246f  # add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x50532534+edx*4] 
0x505327df  # add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50522f22  # add eax, [ebx+0x5F5EFFC8]; pop ebx; pop ebp; ret 
0x50546f3a  # add eax, [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0004 
0x5053832a  # add eax, [ebx+0x5E5FFFC8]; pop ebx; leave; ret 
0x50532599  # add eax, [ebx+0x0D7208F9]; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532414  # add eax, [ebx+0x2A7208F9]; rep movsd; jmp [0x50532534+edx*4] 
0x50532784  # add eax, [ebx+0x2A7208F9]; rep movsd; jmp [0x505328A4+edx*4] 
0x50532472  # add eax, [ebx-0x338DF707]; rep movsd; jmp [0x50532534+edx*4] 
0x505327e2  # add eax, [ebx-0x338DF707]; rep movsd; jmp [0x505328A4+edx*4] 
0x50539a2b  # add eax, [ebp+0x500374C0]; call esi 
0x5051e850  # add ecx, [eax-0x75BEBDFE]; add [eax+eax*8-0x26142F8B], eax; xor eax, eax; ret 
0x5053270e  # add ecx, [eax+0x468A0347]; add cl, byte [eax+0x468A0247]; add [eax+0x458B0147], ecx; or byte [esi+0x5F], bl; leave; ret 
0x505326fa  # add ecx, [eax+0x468A0347]; add cl, byte [eax+0x458B0247]; or byte [esi+0x5F], bl; leave; ret 
0x505326ea  # add ecx, [eax+0x458B0347]; or byte [esi+0x5F], bl; leave; ret 
0x50515fb7  # add ecx, [ecx-0x7976EFBF]; add al, 0x2D; add byte [eax], al; ret 
0x5053dbc3  # add ecx, [ecx+0x33FC1844]; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x50526c4f  # add ecx, [ecx+0x038B0C46]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5051ef08  # add ecx, [ecx+0x5E5F5446]; pop ebx; leave; ret 
0x5052da4b  # add ecx, [ecx+0x56C30C51]; mov esi, [esp+0x08]; mov eax, [esi+0x08]; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x50518fd6  # add ecx, [ecx+0x5F5B305E]; pop esi; ret 
0x5052f442  # add ecx, [ecx-0x02C4CF92]; je 0x5052F47E; cmp ebx, ebp; jne 0x5052F47E; call [0x5054A0E4] 
0x50532711  # add ecx, [edx+0x47880246]; add cl, byte [edx+0x47880146]; add [ebx+0x5F5E0845], ecx; leave; ret 
0x505326fd  # add ecx, [edx+0x47880246]; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x5053c1e3  # add ecx, [ebx+0x5D5E1040]; ret 
0x505326ed  # add ecx, [ebx+0x5F5E0845]; leave; ret 
0x50505296  # add ecx, [ebx-0x097AF383]; je 0x505052A8; push esi; call ebx 
0x50533e6c  # add ecx, [ebp+0x752B0049]; adc byte [ebx-0x0FC403BB], cl; jbe 0x50533E89; push edi; push esi; call [ebp+0x14] 
0x50526ac2  # add ecx, [ebp+0x5052E855]; jne 0x50526B57; mov ecx, [eax]; call [ecx+0x08] 
0x50511585  # add ecx, [ebp-0x3974FE90]; pop esi; ret 
0x5053c9cd  # add ecx, [ebp-0x0001CF7B]; call [eax-0x73]; test [esi+edi*8-0x01], edi; call [eax+0x43] 
0x5053c9cd  # add ecx, [ebp-0x0001CF7B]; call [eax-0x73] 
0x50521fe2  # add ebx, [ecx+0x0303E283]; retn 0xF8C1 
0x50537e93  # add ebp, [eax-0x57B48BFF]; or byte [ebp+0x0B], dh; push ecx; call [0x5054A1C0] 
0x5050df61  # add ebp, [edi-0x3E0A83F1]; rol byte [edi], 0x03; retn 0x4589 
0x5051e1c0  # add eax, ecx; pop ebp; ret 
0x50515573  # add eax, ecx; pop esi; add eax, ebx; pop ebx; leave; ret 
0x5051f613  # add eax, ecx; cdq; mov ecx, 0x000007F7; idiv ecx; mov eax, edx; ret 
0x5051c7fc  # add eax, ecx; out 0x1E, al; mov eax, esi; pop esi; leave; ret 
0x50546b42  # add eax, edx; or al, 0x00; jmp eax 
0x505311a8  # add eax, edx; pop esi; mov [ecx+0x1C], eax; pop ebx; leave; ret 
0x50525a6f  # add eax, edx; sar eax, 0x03; inc eax; pop ecx; inc eax; ret 
0x50525a88  # add eax, edx; sar eax, 0x03; pop ecx; add eax, 0x04; ret 
0x5051fccf  # add eax, edx; sar eax, 0x03; add eax, 0x04; ret 
0x50515576  # add eax, ebx; pop ebx; leave; ret 
0x50525a1e  # add eax, ebx; pop edi; pop esi; pop ebx; pop ebp; ret 
0x50533d80  # add eax, ebx; mov edi, eax; push edi; push ebx; call [ebp+0x14] 
0x5051c87f  # add eax, ebx; mov byte [ecx+0x03], 0x3D; ret 
0x50515c51  # add eax, esi; add byte [edi+0x40], bl; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x5052331e  # add eax, esi; pop edi; lea eax, [0x00000014+eax*4]; pop esi; ret 
0x50534ae8  # add eax, edi; add ecx, edi; cmp edi, 0x1F; ja 0x50534ECF; jmp [0x50535C2E+edi*4] 
0x5051518a  # add eax, edi; mov [esi+0x14], eax; pop edi; pop ebx; ret 
0x50532433  # add ecx, eax; jmp [0x50532448+eax*4] 
0x505327a3  # add ecx, eax; jmp [0x505327B8+eax*4] 
0x50507ef3  # add ecx, edx; cmp eax, ecx; jnbe 0x50507F03; push 0x0000000A; call [0x5054A048] 
0x50515790  # add ecx, edx; mov [eax+0x18], ecx; mov eax, [eax+0x14]; sub eax, edx; add eax, ecx; ret 
0x50515558  # add ecx, ebx; push ecx; push [esi+0x10]; push [edi+0x60]; call [eax+0x10] 
0x5051553a  # add ecx, ebx; push ecx; push [esi+0x10]; push [edi+0x70]; call [eax+0x0C] 
0x50515446  # add ecx, edi; push ecx; push [ebx+0x00000080]; call [eax+0x0C] 
0x50534aea  # add ecx, edi; cmp edi, 0x1F; ja 0x50534ECF; jmp [0x50535C2E+edi*4] 
0x50514f19  # add edx, ecx; push edx; push [edi+0x64]; call [eax+0x14] 
0x50515776  # add edx, ecx; mov [edi], edx; mov ecx, [esi]; add [eax+0x18], ecx; ret 
0x5053678e  # add edx, ebx; pop ebx; retn 0x0010 
0x50536786  # add ebx, eax; mov eax, [esp+0x08]; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x505287b2  # add ebp, eax; or byte [eax+eax+0x1F7C8D00], bl; add al, 0x8B; popfd; push 0x8BFFFFFF; ret 
0x50524368  # add ebp, ebx; push ebx; push [esi+0x24]; push [ebp+0x08]; call [edi+0x04] 
0x50532527  # add esi, eax; add edi, eax; jmp [0x50532534+edx*4] 
0x50532a33  # add esi, eax; add edi, eax; jmp [0x50532A40+edx*4] 
0x50532897  # add esi, eax; add edi, eax; jmp [0x505328A4+edx*4] 
0x505326c3  # add esi, eax; add edi, eax; jmp [0x505326D0+edx*4] 
0x5050ef83  # add edi, eax; cmp [ebp-0x14], 0x02; jnl 0x5050EFBB; push [ebp-0x18]; call [0x5054A048] 
0x50532529  # add edi, eax; jmp [0x50532534+edx*4] 
0x50532a35  # add edi, eax; jmp [0x50532A40+edx*4] 
0x50532899  # add edi, eax; jmp [0x505328A4+edx*4] 
0x505326c5  # add edi, eax; jmp [0x505326D0+edx*4] 
0x50514ee1  # add edi, edi; or bh, bh; xchg [eax], esi; add al, byte [eax]; add bl, ch; retn 0x87C7 
0x50546832  # add edi, edi; xor eax, 0x5055E07C; mov [0x5055DFC4], eax; call esi 
0x50544c6a  # add edi, edi; inc ebp; mov al, 0x8A; add al, byte [edx+0x3A]; ret 
0x5053c318  # add edi, edi; inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x50510e93  # add edi, edi; push [ebx]; rcr byte [esi+0x5F], 0xC9; retn 0x001C 
0x505076be  # add al, 0x00; add byte [eax], al; mov [ebp-0x2C], esi; call [0x5055C9A0] 
0x50507dc7  # add al, 0x00; add byte [eax], al; call [0x5055C9DC] 
0x505088ac  # add al, 0x00; add byte [eax], al; call [0x5055C9E0] 
0x50546c9b  # add al, 0x00; add byte [eax], al; call eax 
0x505317d1  # add al, 0x00; add byte [0xC0330474], al; leave; ret 
0x50517175  # add al, 0x00; add byte [ebx], dh; shr byte [ebx], cl; retn 0xC7B9 
0x5053abf9  # add al, 0x00; add byte [ebx], bh; sar [edi+0x00000100], 0x7F; cmp esi, [eax+esi+0x3B]; ret 
0x50501234  # add al, 0x00; add byte [eax-0x01], dl; xor eax, 0x5055C93C; push 0x00001A00; call [0x5054A034] 
0x5051c39c  # add al, 0x00; add byte [ecx-0x7B], bl; sar byte [esi+0x11], 0x8B; ret 
0x505391c2  # add al, 0x00; add bl, al; mov eax, 0x00000804; ret 
0x505391bc  # add al, 0x00; add bl, al; mov eax, 0x00000412; ret 
0x5052e2fb  # add al, 0x00; add cl, cl; ret 
0x50545ba7  # add al, 0x00; add dh, dh; retn 0x7402 
0x5053ad7f  # add al, 0x00; add bh, bh; jne 0x5053AD69; call [0x5054A1C0] 
0x5051482f  # add al, 0x00; xor eax, eax; ret 
0x50502c94  # add al, 0x00; cmp eax, ebx; je 0x50502CA3; push ebx; call [0x5054A048] 
0x50502bb8  # add al, 0x00; cmp eax, esi; je 0x50502BC7; push esi; call [0x5054A048] 
0x505048e3  # add al, 0x00; push eax; lea eax, [ebp+0x48]; push eax; call [0x5054A050] 
0x50545b7b  # add al, 0x00; je 0x50545B84; or eax, 0x00001000; ret 
0x5050650e  # add al, 0x00; je 0x5050651F; push [esp+0x04]; push 0x00000000; push eax; call [0x5054A084] 
0x505064ee  # add al, 0x00; je 0x505064E7; push [esp+0x04]; push 0x00000008; push eax; call [0x5054A07C] 
0x50524781  # add al, 0x00; jne 0x50524788; xor eax, eax; ret 
0x5051488e  # add al, 0x00; jne 0x50514897; neg eax; sbb eax, eax; ret 
0x5052f3c8  # add al, 0x00; add byte [eax], 0x00; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C] 
0x505279ca  # add al, 0x00; and [esi], 0x00000000; add esp, 0x0C; mov [esi+0x10], eax; ret 
0x505474f0  # add al, 0x00; cmp [0x5055E024], 0x00000000; je 0x5054750E; push [esp+0x04]; push [esp+0x08]; call eax 
0x5051ca84  # add al, 0x00; and [esi+0x08], 0x00000000; pop esi; ret 
0x505031de  # add al, 0x00; test eax, eax; jnle 0x5050319B; call [0x5054A188] 
0x50537403  # add al, 0x00; mov edi, edi; push esi; push [0x50555FB4]; call [0x5054A030] 
0x5050648f  # add al, 0x00; mov eax, [0x5055C970]; test eax, eax; je 0x505064AE; push eax; call [0x5054A078] 
0x50538f68  # add al, 0x00; sar bh, 0x15; sub byte [ecx-0x00AFAFAC], ah; adc eax, 0x5054A1E4; leave; ret 
0x5054364e  # add al, 0x00; call eax; ret 
0x5054364e  # add al, 0x00; call eax 
0x50546dec  # add al, 0x00; jmp eax 
0x505182c9  # add al, 0x01; add byte [eax], al; mov [edi+0x00002D1C], esi; call [0x5054A188] 
0x50505606  # add al, 0x01; add byte [eax], al; lea eax, [esi+0x00000114]; push eax; call [0x5054A04C] 
0x505169dc  # add al, 0x01; add byte [eax], al; ret 
0x50538be5  # add al, 0x01; je 0x50538BF6; push edi; call ebx 
0x50542136  # add al, 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x50538c0f  # add al, 0x01; jne 0x50538C16; push eax; call ebx 
0x5051ebe0  # add al, 0x02; setne al; lea eax, [eax+eax+0x01]; ret 
0x5051e11a  # add al, 0x03; retn 0xF799 
0x505391bb  # add al, 0x04; add byte [eax], al; ret 
0x5053c327  # add al, 0x06; add eax, 0x20; push eax; call [0x5054A154] 
0x505391c7  # add al, 0x08; add byte [eax], al; ret 
0x50525b0f  # add al, 0x09; adc byte [esi-0x3D], bl; not edx; and [eax], edx; pop esi; ret 
0x50525289  # add al, 0x0B; jne 0x50525278; pop esi; ret 
0x5052a827  # add al, 0x0F; mov dh, 0x51; add eax, 0x0B08E0C1; retn 0xB60F 
0x5052a154  # add al, 0x0F; mov dh, 0x56; add eax, 0x0B08E0C1; retn 0xB60F 
0x50541989  # add al, 0x10; add byte [eax], al; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x5052218e  # add al, 0x1F; add byte [ebx+0x5B5F5DC3], cl; pop esi; ret 
0x50544016  # add al, 0x21; push ebp; push eax; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544016  # add al, 0x21; push ebp; push eax; call [0x5054A0A8] 
0x5054661a  # add al, 0x22; push ebp; push eax; push [0x5055E078]; mov [0x5055DF8C], eax; call esi 
0x50521f62  # add al, 0x23; rol [ebx], cl; retn 0xF88B 
0x505429aa  # add al, 0x24; dec esp; and byte [ebp+0x50], dl; push edi; mov [0x5055DEC0], eax; call esi 
0x50542995  # add al, 0x24; push 0x57505520; mov [0x5055DEBC], eax; call esi 
0x50532f3f  # add al, 0x24; ret 
0x5050d614  # add al, 0x2B; shr ebx, 0x0C; call [0x5054A188] 
0x50522fa8  # add al, 0x2B; ret 
0x5051ce25  # add al, 0x2B; rol byte [ebx+0x037304FA], 1; xor eax, eax; ret 
0x5051ce03  # add al, 0x2B; rol [ebx+0x037301FA], 1; xor eax, eax; ret 
0x50515fbd  # add al, 0x2D; add byte [eax], al; ret 
0x50533396  # add al, 0x33; rol byte [eax-0x3D], 0x33; rol bl, 0x8B; call [ebp-0x75] 
0x505157ec  # add al, 0x33; ror cl, 0xC3; add [esi+0x18], eax; mov eax, [ebp-0x04]; leave; ret 
0x50506485  # add al, 0x33; shr bl, 0x03; mov eax, [esi+0x34]; pop esi; retn 0x0004 
0x50546b1c  # add al, 0x33; shr bl, 0x16; push esi; call [0x5054A0D4] 
0x505036eb  # add al, 0x33; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x5050cb72  # add al, 0x33; shr bl, 0x1C; push esi; call [0x5054A03C] 
0x505029df  # add al, 0x33; shr bl, 0x1C; push edi; call [0x5054A03C] 
0x5050d073  # add al, 0x33; shr bl, 0x20; push [ebp+0x0C]; call [0x5054A040] 
0x505092fd  # add al, 0x33; shr bl, 0x7B; push edi; call [0x5054A03C] 
0x5051c889  # add al, 0x33; leave; mov [eax+0x04], ecx; mov [eax], ecx; mov [eax+0x08], ecx; ret 
0x50508b81  # add al, 0x38; add byte [eax], al; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50527833  # add al, 0x39; inc esp; and al, 0x08; jbe 0x5052783E; or eax, 0xFFFFFFFF; ret 
0x50512f1e  # add al, 0x3A; add byte [eax], al; add esp, 0x1C; mov [ebp-0x58], esi; call [0x5054A188] 
0x50537b31  # add al, 0x3B; jne 0x50537B41; jc 0x50537B23; pop esi; pop ebp; ret 
0x50503b7b  # add al, 0x3B; ret 
0x50523416  # add al, 0x3E; add byte [edi+0x5E], bl; pop ebp; pop ebx; ret 
0x50532b8b  # add al, 0x41; and eax, 0x00000103; pop ebp; ret 
0x50532d95  # add al, 0x41; and eax, 0x00000107; pop ebp; ret 
0x50532c90  # add al, 0x41; and eax, 0x00000080; pop ebp; ret 
0x50532d11  # add al, 0x41; and eax, 0x08; pop ebp; ret 
0x50509768  # add al, 0x49; jne 0x50509743; pop edi; pop esi; ret 
0x50524291  # add al, 0x4A; jne 0x50524289; ret 
0x5050972f  # add al, 0x4E; jne 0x50509714; pop esi; ret 
0x5052f5b3  # add al, 0x50; push 0x5052F273; push edi; push edi; call [0x5054A06C] 
0x5052f65c  # add al, 0x50; push 0x5052F3E0; push edi; push edi; call [0x5054A06C] 
0x50507116  # add al, 0x50; call [0x5054A0A0] 
0x5050d9e3  # add al, 0x50; call [0x5054A0B8] 
0x5052f251  # add al, 0x50; call [ebp+0x08]; pop ecx; pop ecx; call [0x5054A138] 
0x5052f251  # add al, 0x50; call [ebp+0x08] 
0x5052d3d2  # add al, 0x50; call [eax+0x000003C0]; pop ecx; pop ecx; ret 
0x5052d3d2  # add al, 0x50; call [eax+0x000003C0] 
0x5052d3e0  # add al, 0x50; call [eax+0x000003C4]; pop ecx; pop ecx; ret 
0x5052d3e0  # add al, 0x50; call [eax+0x000003C4] 
0x5050d815  # add al, 0x50; call edi 
0x50514f49  # add al, 0x51; mov ecx, [edi+0x0000023C]; push [ecx+0x10]; push [edi+0x74]; call [eax+0x10] 
0x50516dc7  # add al, 0x52; push [ecx+0x50]; call [eax+0x0C] 
0x50503d65  # add al, 0x53; push 0x50502F93; push ebx; push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x50515113  # add al, 0x53; push [ebp+0x0C]; push [ebp+0x08]; call [esi+0x04] 
0x50508f5d  # add al, 0x53; push [esi+0x20]; push [esi+0x18]; call edi 
0x5050fb95  # add al, 0x57; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x50527279  # add al, 0x59; pop ecx; pop edi; pop esi; ret 
0x5051ccc5  # add al, 0x59; mov [esi+0x0C], eax; ret 
0x5053f1d0  # add al, 0x59; mov [ebp-0x0000026C], eax; cmp eax, ecx; ja 0x5053FB8D; jmp [0x5053FBDB+eax*4] 
0x50518072  # add al, 0x59; mov eax, [ebx+0x40]; mov [edi+0x58], eax; call [eax] 
0x50518190  # add al, 0x59; mov eax, [ebx+0x44]; mov [edi+0x5C], eax; call [eax] 
0x5051808c  # add al, 0x59; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x505181aa  # add al, 0x59; mov eax, [ebx+0x4C]; mov [edi+0x6C], eax; call [eax] 
0x50516ddf  # add al, 0x5B; leave; ret 
0x50538f25  # add al, 0x5D; push ebp; push eax; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x5054751b  # add al, 0x5D; retn 0x0008 
0x50532c10  # add al, 0x5D; ret 
0x50527b89  # add al, 0x5E; pop ebx; leave; ret 
0x5053ff45  # add al, 0x5E; pop ebp; ret 
0x50521e4b  # add al, 0x5E; test eax, eax; jne 0x50521E55; xor eax, eax; leave; ret 
0x5052af3b  # add al, 0x5E; mov [edi], eax; pop ebx; leave; ret 
0x50527947  # add al, 0x5E; ret 
0x5053deaf  # add al, 0x5F; pop esi; pop ebx; leave; ret 
0x5050be11  # add al, 0x66; mov [esi+0x30], eax; push 0x5054A934; push edi; call [0x5054A0B8] 
0x5053d7a2  # add al, 0x68; add byte [eax], ah; add byte [eax], al; push 0x00100000; push edi; call [0x5054A220] 
0x50547c84  # add al, 0x68; or cl, ah; push ebp; push eax; call [0x5054A18C]; retn 0x0004 
0x50547c84  # add al, 0x68; or cl, ah; push ebp; push eax; call [0x5054A18C] 
0x50506515  # add al, 0x6A; add byte [eax-0x01], dl; adc eax, 0x5054A084; retn 0x0004 
0x5051625d  # add al, 0x6A; add [ebp+0x53501045], ecx; call [esi+0x04] 
0x505064f5  # add al, 0x6A; or byte [eax-0x01], dl; adc eax, 0x5054A07C; retn 0x0004 
0x50508d1a  # add al, 0x6A; cld; push [eax]; call [0x5054A284] 
0x5053242d  # add al, 0x72; or al, 0x83; loopne 0x50532436; add ecx, eax; jmp [0x50532448+eax*4] 
0x5053279d  # add al, 0x72; or al, 0x83; loopne 0x505327A6; add ecx, eax; jmp [0x505327B8+eax*4] 
0x50532931  # add al, 0x72; or al, 0x83; loopne 0x5053293A; sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325c1  # add al, 0x72; or al, 0x83; loopne 0x505325CA; sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5051ce2a  # add al, 0x73; add esi, [ebx]; rol bl, 0x8B; adc [ebx], eax; retn 0xB60F 
0x50545ba2  # add al, 0x74; add eax, 0x0004000D; add dh, dh; retn 0x7402 
0x50508f59  # add al, 0x74; or ebp, [edx+0x04]; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x5054712d  # add al, 0x74; adc eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5055DF4C] 
0x50518fd4  # add al, 0x75; add ecx, [ecx+0x5F5B305E]; pop esi; ret 
0x5051a6d7  # add al, 0x75; add eax, 0x5D5EC033; ret 
0x505470f4  # add al, 0x75; sbb eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5051e86a  # add al, 0x76; add al, 0x83; enter 0xC3FF, 0x1B; sal bh, 0xD8; ret 
0x50506621  # add al, 0x76; and [ebx+0x54A08C1D], ecx; push eax; push 0x5054A5CC; call ebx 
0x5053c3e3  # add al, 0x78; or [ebx+0x01B60F0A], ecx; inc ecx; mov [edx], ecx; ret 
0x5052b9f3  # add al, 0x7C; rcr byte [edi+0x5B], cl; leave; ret 
0x5053ad65  # add al, 0x80; and dh, bh; call [0x5054A0E4] 
0x5053ab47  # add al, 0x80; dec ebp; inc [eax-0x1F7C3E75]; add ebp, [ebx]; ret 
0x5050116c  # add al, 0x80; cmp eax, 0xFFFFFFFF; je 0x5050117B; push esi; push eax; call [0x5054A02C] 
0x505215c5  # add al, 0x81; ret 
0x5052592d  # add al, 0x81; dec [eax]; ret 
0x5051108f  # add al, 0x83; add byte [ebp+0x10], dh; push esi; call [0x5054A070] 
0x5051e47c  # add al, 0x83; dec ebp; hlt; call [ebx+0x56] 
0x5052485f  # add al, 0x83; dec ebp; clc; call [edi+0x33] 
0x505107b5  # add al, 0x83; lodsb; add byte [ebp+0x530774DB], al; call edi 
0x5052477e  # add al, 0x83; js 0x50524786; add byte [ebp+0x03], dh; xor eax, eax; ret 
0x50509765  # add al, 0x83; rol byte [ecx+ecx*2], 0x75; xlatb; pop edi; pop esi; ret 
0x5052f85e  # add al, 0x83; ror byte [eax], 0x4A; jne 0x5052F853; pop esi; ret 
0x5052d71d  # add al, 0x83; rol [edx+ecx*2], 0x75; xlatb; pop edi; pop esi; ret 
0x5050972c  # add al, 0x83; rol [esi+ecx*2], 0x75; loope 0x50509792; ret 
0x50533b26  # add al, 0x83; retn 0x0A04 
0x50522a38  # add al, 0x83; ret 
0x5052ef47  # add al, 0x83; les ecx, [esi+ebx*2]; ret 
0x50515150  # add al, 0x83; les ecx, [ecx+ecx*8]; ret 
0x50526688  # add al, 0x83; les edx, [eax]; pop edi; pop esi; ret 
0x5051511d  # add al, 0x83; les ebx, [eax]; leave; ret 
0x5053e2c3  # add al, 0x83; enter 0x5FFF, 0x5E; pop ebp; ret 
0x5051e071  # add al, 0x83; enter 0x89FF, 0x46; or al, 0xEB; add cl, byte [ebx+0x5E5F5DC5]; ret 
0x5051d0e5  # add al, 0x83; enter 0xC3FF, 0x1B; sal bh, 0xD8; ret 
0x50516a9b  # add al, 0x83; enter 0xC3FF, 0x8B; adc byte [eax], 0x01; add byte [eax], al; ret 
0x50516b5b  # add al, 0x83; enter 0xC3FF, 0x8B; sub byte [eax], 0x01; add byte [eax], al; ret 
0x50516964  # add al, 0x83; enter 0xC3FF, 0x8B; xor al, 0x00; add byte [eax], al; ret 
0x50542924  # add al, 0x83; loopne 0x50542968; pop esi; pop ebp; ret 
0x5052d57a  # add al, 0x83; call [eax] 
0x5053da1d  # add al, 0x83; jmp [eax] 
0x50523322  # add al, 0x85; adc al, 0x00; add byte [eax], al; pop esi; ret 
0x5051f32f  # add al, 0x85; sal byte [esp+eax-0x75], 0x40; or bl, al; or eax, 0xFFFFFFFF; ret 
0x505169e4  # add al, 0x85; sal byte [edi+eax-0x75], 0x80; aam 0x00; add byte [eax], al; ret 
0x50516856  # add al, 0x85; sal byte [edi+eax-0x75], 0x80; loopne 0x5051685F; add byte [eax], al; ret 
0x505168b0  # add al, 0x85; sal byte [edi+eax-0x75], 0x80; in al, 0x00; add byte [eax], al; ret 
0x50516b44  # add al, 0x85; sal byte [edx+ecx-0x75], 0x4C; and al, 0x08; add [eax+0x00000124], ecx; ret 
0x50516aba  # add al, 0x85; sal byte [edx+ecx-0x75], 0x4C; and al, 0x08; mov [eax+0x00000114], ecx; ret 
0x50516b6a  # add al, 0x85; sal byte [edx+ecx-0x75], 0x4C; and al, 0x08; mov [eax+0x00000128], ecx; ret 
0x505169f7  # add al, 0x85; sal byte [edx+ecx-0x75], 0x4C; and al, 0x08; mov [eax+0x000000D8], ecx; ret 
0x50516840  # add al, 0x85; sal byte [edx+ecx-0x01], 0x70; adc al, ch; fisttp word [edx-0x3CA70000]; or eax, 0xFFFFFFFF; ret 
0x5053883f  # add al, 0x85; sal byte [edi+ecx-0x75], 0x55; or byte [edx+0x01], ch; push edx; call [0x5055E13C] 
0x50537a73  # add al, 0x85; sal byte [esi+ebx*8+0x5F], 0x5D; ret 
0x5051699c  # add al, 0x85; sal byte [ebp+0x01], 0xC3; add eax, 0x000000F4; ret 
0x50516a1c  # add al, 0x85; sal byte [ebp+0x01], 0xC3; mov eax, [eax+0x00000108]; ret 
0x50516a50  # add al, 0x85; sal byte [ebp+0x01], 0xC3; mov eax, [eax+0x0000010C]; ret 
0x50516aaa  # add al, 0x85; sal byte [ebp+0x01], 0xC3; mov eax, [eax+0x00000114]; ret 
0x50516b34  # add al, 0x85; sal byte [ebp+0x01], 0xC3; mov eax, [eax+0x00000124]; ret 
0x50516c77  # add al, 0x85; sal byte [ebp+0x01], 0xC3; mov eax, [eax+0x00000130]; ret 
0x50516a97  # add al, 0x85; sal byte [ebp+0x04], 0x83; enter 0xC3FF, 0x8B; adc byte [eax], 0x01; add byte [eax], al; ret 
0x50516b57  # add al, 0x85; sal byte [ebp+0x04], 0x83; enter 0xC3FF, 0x8B; sub byte [eax], 0x01; add byte [eax], al; ret 
0x50516960  # add al, 0x85; sal byte [ebp+0x04], 0x83; enter 0xC3FF, 0x8B; xor al, 0x00; add byte [eax], al; ret 
0x50516b7d  # add al, 0x85; sal byte [ebp+0x06], 0xFF; and eax, 0x5054A0E4; mov eax, [eax+0x000000DC]; ret 
0x50516ba8  # add al, 0x85; leave; je 0x50516BB3; mov [ecx+0x000000DC], eax; push eax; call [0x5054A028] 
0x5050aefd  # add al, 0x89; add [ebx], esi; rol byte [eax+0x5F], 0x5E; retn 0x0008 
0x5051c88e  # add al, 0x89; or byte [ecx-0x743CF7B8], cl; inc esp; and al, 0x04; mov eax, [eax+0x08]; ret 
0x50515666  # add al, 0x89; adc al, 0x81; inc [esi+0x0000017C]; ret 
0x50501425  # add al, 0x89; call [0x5054A044] 
0x50521901  # add al, 0x89; inc ecx; or al, 0x5B; leave; ret 
0x5051f267  # add al, 0x89; inc ecx; adc bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x10]; ret 
0x505317af  # add al, 0x89; inc ecx; sbb al, 0xC3; mov eax, [esp+0x04]; mov eax, [eax+0x1C]; ret 
0x505311bf  # add al, 0x89; inc ecx; pushad; mov [ecx+0x68], eax; mov [ecx+0x64], eax; ret 
0x50543641  # add al, 0x89; imul ecx, [0x59585051+edx*2], 0x5D; pop ecx; pop ebx; retn 0x0004 
0x505096f0  # add al, 0x89; stosd; int 0xEF; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x5053ce0f  # add al, 0x8A; retn 0xD18A 
0x5051f277  # add al, 0x8B; add bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x04]; ret 
0x50508e07  # add al, 0x8B; push es; and [eax+0x08], 0x00000000; push 0xFFFFFFFC; push ebx; call [0x5054A284] 
0x5051f2de  # add al, 0x8B; inc eax; or bl, al; or eax, 0xFFFFFFFF; ret 
0x5051f26f  # add al, 0x8B; inc eax; adc bl, al; mov eax, [esp+0x04]; mov eax, [eax]; ret 
0x505167d6  # add al, 0x8B; inc eax; sbb al, 0xC3; mov eax, 0x00001000; ret 
0x505317b7  # add al, 0x8B; inc eax; sbb al, 0xC3; ret 
0x50516823  # add al, 0x8B; inc eax; and al, 0xC3; xor eax, eax; ret 
0x5053116c  # add al, 0x8B; inc ecx; or byte [ebx], al; retn 0x558B 
0x5051e1a4  # add al, 0x8B; push esp; and al, 0x08; ret 
0x50516775  # add al, 0x8B; or al, 0x00; add byte [eax], al; ret 
0x505287bb  # add al, 0x8B; popfd; push 0x8BFFFFFF; ret 
0x50542c71  # add al, 0x8B; retn 0x02EB 
0x50524c54  # add al, 0x8B; retn 0x09EB 
0x50534ea9  # add al, 0x8B; retn 0x1DEB 
0x505056e2  # add al, 0x8B; ret 
0x50514966  # add al, 0x8B; fsubp st3, st0; add cl, byte [ebx+0x2BC78BFE]; ret 
0x50532521  # add al, 0x8D; add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532534+edx*4] 
0x50532a2d  # add al, 0x8D; add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532A40+edx*4] 
0x50532891  # add al, 0x8D; add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505328A4+edx*4] 
0x505326bd  # add al, 0x8D; add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505326D0+edx*4] 
0x50523149  # add al, 0x8D; test [edi+edi*8-0x01], eax; call [eax-0x73]; test [edi+edi*8-0x01], ebx; call [eax-0x18] 
0x50523149  # add al, 0x8D; test [edi+edi*8-0x01], eax; call [eax-0x73] 
0x505038ff  # add al, 0xA3; push esp; push eax; push [ebp+0x0C]; call [0x5054A05C] 
0x5050c631  # add al, 0xAC; push esp; push eax; push edi; call ebx 
0x50508df0  # add al, 0xB9; push ebx; mov [eax], ebx; lea esi, [ecx+edi*4]; call [0x5054A25C] 
0x50525ac3  # add al, 0xC1; loope 0x50525ACA; shr eax, cl; pop esi; and eax, 0x000000FF; ret 
0x50541433  # add al, 0xC5; add [eax], eax; add byte [eax], al; push eax; push [ebp+0x18]; call esi 
0x50539e2f  # add al, 0xC5; add [eax], eax; add byte [eax], al; push eax; push [ebp+0x20]; call esi 
0x5050668f  # add al, 0xCA; push ebp; push eax; call esi 
0x5054694e  # add al, 0xE0; push ebp; push eax; push 0x00000016; push [0x5055E07C]; call esi 
0x50517415  # add al, 0xE8; sub [ebx-0x3B7D0000], edi; or al, 0x85; ror byte [edi], 0x84; retn 0xFFFE 
0x5051d5e0  # add al, 0xE8; inc ebp; idiv edi; call [esi-0x01] 
0x505364a8  # add al, 0xE8; jbe 0x505364D3; add byte [eax], al; pop ecx; ret 
0x5053637b  # add al, 0xE8; mov [0x59000028], eax; ret 
0x50536164  # add al, 0xE8; mov edx, 0x5900002A; ret 
0x5052f7f6  # add al, 0xE8; mov ebp, 0x83FFFFFB; les edx, [eax]; pop esi; ret 
0x50502cbd  # add al, 0xE8; shr ecx, 0xFFFFFFFF; inc [ebp-0x7CFA8A40]; enter 0xEBFF, 0x06; mov eax, [eax+0x00000514]; retn 0x0004 
0x50522aaf  # add al, 0xE8; ret 
0x50513e85  # add al, 0xE8; enter 0x0029, 0x00; pop ecx; retn 0x0004 
0x50545b06  # add al, 0xF6; ret 
0x50546841  # add al, 0xFF; xor eax, 0x5055E07C; mov [0x5055DFC0], eax; call esi 
0x50522f9a  # add al, 0xFF; inc ebp; adc byte [ebx], ch; ret 
0x50516278  # add al, 0xFF; jne 0x50516290; push ebx; call [esi+0x08]; add esp, 0x2C; call [esi] 
0x50516278  # add al, 0xFF; jne 0x50516290; push ebx; call [esi+0x08] 
0x505162a1  # add al, 0xFF; jbe 0x505162B1; push [ebp+0x14]; push ebx; call [esi+0x04] 
0x50516267  # add al, 0xFF; mov bh, 0xB4; add byte [eax], al; add byte [ebp+0x00009487], cl; add byte [eax+0x53], dl; call [esi+0x04] 
0x50546b30  # add al, 0xFF; ror byte [ebx+0x5FC78BF8], 1; pop esi; ret 
0x5052f55d  # add al, 0xFF; rcl [edi+0x57], cl; push edi; push edi; mov [esi+0x08], eax; call ebx 
0x50531779  # add al, 0xFF; xlatb; push [esi+0x08]; call edi 
0x50527931  # add eax, 0x83000000; les ecx, [esi+ebx*2]; ret 
0x50536e93  # add eax, 0x8B000000; inc ebp; in al, 0xEB; ret 
0x5051716f  # add eax, 0x840F0000; xor eax, 0x33000004; shr byte [ebx], cl; retn 0xC7B9 
0x50514495  # add eax, 0x00500000; add byte [eax], al; mov byte [ebp+0x000005CC], bl; mov byte [ebp+0x0000064C], bl; call [0x5054A050] 
0x5051449f  # add eax, 0x9D880000; dec esp; push es; add byte [eax], al; call [0x5054A050] 
0x50505f72  # add eax, 0x45890000; hlt; cmp [ebp+0x18], ebx; je 0x50505F9B; push [ebp+0x18]; call esi 
0x50505f96  # add eax, 0xD88B0000; xor edi, edi; cmp [ebp+0x14], edi; je 0x50505FC0; push [ebp+0x14]; call esi 
0x50505fbb  # add eax, 0xF88B0000; xor eax, eax; cmp [ebp+0x0C], eax; je 0x50505FE3; push [ebp+0x0C]; call esi 
0x50541225  # add eax, 0x0FC00000; xchg eax, esp; retn 0xC28B 
0x50542691  # add eax, 0x00004000; pop ebp; ret 
0x505477c5  # add eax, 0x56000001; call [0x5054A03C] 
0x50515189  # add eax, 0x4689C703; adc al, 0x5F; pop ebx; ret 
0x50545f29  # add eax, 0x0000000D; sbb byte [edi+0x5E], 0x5B; leave; ret 
0x50545ba4  # add eax, 0x0004000D; add dh, dh; retn 0x7402 
0x50545bae  # add eax, 0x0008000D; add dh, dh; retn 0x7401 
0x505394b0  # add eax, 0x5055DB1C; add [eax], eax; add byte [eax], al; call [0x5054A1F0] 
0x5053948d  # add eax, 0x5055DB1C; add [eax], eax; add byte [eax], al; call [0x5054A1F4] 
0x505215c2  # add eax, 0x8104881D; ret 
0x50527944  # add eax, 0x5E044621; ret 
0x5053e0c6  # add eax, 0x5D40C033; ret 
0x50526e18  # add eax, 0x5E40C033; ret 
0x5051eb3a  # add eax, 0xC940C033; ret 
0x5050c786  # add eax, 0xEB40C033; push es; mov eax, [eax+0x000032D8]; retn 0x0004 
0x5051a6d9  # add eax, 0x5D5EC033; ret 
0x505427b8  # add eax, 0x8966C933; or byte [ebx], dh; rcr byte [esi+0x5B], 0xC9; ret 
0x50533391  # add eax, 0x75015038; add al, 0x33; rol byte [eax-0x3D], 0x33; rol bl, 0x8B; call [ebp-0x75] 
0x5053ab42  # add eax, 0x74E04539; add al, 0x80; dec ebp; inc [eax-0x1F7C3E75]; add ebp, [ebx]; ret 
0x505087b5  # add eax, 0x75185E39; je 0x50508747; xchg byte [eax], cl; add [eax], eax; add byte [ebx], bh; ret 
0x5050c6cc  # add eax, 0x00000240; push 0x00000040; push esi; push eax; call [0x5054A04C] 
0x5054219e  # add eax, 0x5055E144; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x5050f79a  # add eax, 0x751E3846; in eax, dx; push esi; lea eax, [ebp-0x1C]; push eax; call [0x5054A0B8] 
0x505265dd  # add eax, 0x5055D448; ret 
0x50549506  # add eax, 0xF8CE834E; inc esi; and [eax], 0x00000000; push edi; call [0x5054A03C] 
0x50514fad  # add eax, 0x05C08352; push eax; push [edi+0x00000084]; call [ecx+0x18] 
0x50537933  # add eax, 0x5055D554; jbe 0x50537959; push esi; call [0x5054A048] 
0x5051543e  # add eax, 0x51CF2B5F; mov ecx, [esi+0x10]; add ecx, edi; push ecx; push [ebx+0x00000080]; call [eax+0x0C] 
0x50547dfc  # add eax, 0x00000068; cmp bh, 0xD6; push [ebp-0x54]; mov edi, [0x5054A008]; mov [ebp-0x58], eax; call edi 
0x50501ab0  # add eax, 0x04271E68; sub al, 0xEF; idiv bh; inc [ebx+0x5E5BFFC8]; pop ebp; retn 0x000C 
0x50543b55  # add eax, 0x5055D568; sar eax, 0x02; neg eax; pop esi; pop ebp; ret 
0x5053ee4e  # add eax, 0xD0FF006A; ret 
0x5051fcbf  # add eax, 0xEB58036A; jnp 0x10D50D0A; or bl, byte [ecx+0x0307E283]; retn 0xF8C1 
0x50541097  # add eax, 0x5E58186A; ret 
0x50535f2c  # add eax, 0x5E581A6A; ret 
0x50537f16  # add eax, 0xEB58F66A; or cl, byte [ebx-0x2708B73D]; sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x5054A1BC] 
0x5053987a  # add eax, 0x5055E26C; add [eax], eax; add byte [eax], al; xor eax, eax; ret 
0x505317d4  # add eax, 0xC0330474; leave; ret 
0x5051104d  # add eax, 0x50555C74; je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x5050b7f0  # add eax, 0xB0681775; stosd; push esp; push eax; push eax; call [0x5054A05C] 
0x5053ee24  # add eax, 0xC033057A; inc eax; leave; ret 
0x5052dfd3  # add eax, 0x7509F980; or eax, 0x42404240; cmp eax, [esp+0x04]; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x50515c4c  # add eax, 0x7520F980; add eax, esi; add byte [edi+0x40], bl; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x5051fff4  # add eax, 0x5BFFC883; ret 
0x50526e1f  # add eax, 0x5EFFC883; ret 
0x5051e2c4  # add eax, 0xC9FFC883; ret 
0x5050ab3b  # add eax, 0xEBFFC883; push es; mov eax, [eax+0x00000108]; retn 0x0004 
0x50502cc6  # add eax, 0xEBFFC883; push es; mov eax, [eax+0x00000514]; retn 0x0004 
0x5050d53d  # add eax, 0xEBFFC883; push es; mov eax, [eax+0x00000AB4]; retn 0x0004 
0x50502f1a  # add eax, 0xEBFFC883; push es; mov eax, [eax+0x00000AB8]; retn 0x0004 
0x50502ce1  # add eax, 0xEBFFC883; push es; mov eax, [eax+0x000032CC]; retn 0x0004 
0x5050ddd7  # add eax, 0xEBFFC883; push es; mov eax, [eax+0x000000E4]; retn 0x0004 
0x50502a5c  # add eax, 0xEBFFC883; call [di] 
0x50541caa  # add eax, 0x7501F883; xlatb; xor eax, eax; pop ebp; ret 
0x50518fd1  # add eax, 0x7504F883; add ecx, [ecx+0x5F5B305E]; pop esi; ret 
0x50524854  # add eax, 0xEBF84589; or al, byte [ebx+0x7503147D]; add al, 0x83; dec ebp; clc; call [edi+0x33] 
0x505059f9  # add eax, 0xEBF45D89; pop ds; push [ebp+0x14]; call edi 
0x50505e18  # add eax, 0xEBF45D89; pop ds; push [ebp+0x1C]; call esi 
0x50509bbb  # add eax, 0xEBF85D89; pop ds; push [ebp+0x14]; call edi 
0x5052cd8a  # add eax, 0x10BD3C8B; call [eax+edx*2+0x33] 
0x5052487a  # add eax, 0xEBF8458B; or al, 0x50; push [ebp+0x0C]; call [ebp+0x10] 
0x50524744  # add eax, 0x8908478B; cmp byte [ebx+0x5E5FE845], cl; pop ebx; leave; ret 
0x5054458d  # add eax, 0x890C4D8B; sbb [edi+0x5B], ebx; leave; ret 
0x50524915  # add eax, 0x89FC558B; adc [edi+0x5B], ebx; pop esi; leave; ret 
0x50542740  # add eax, 0x50F4458D; push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x5054A178] 
0x50536673  # add eax, 0x50556A98; jecxz 0x505366CE; push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x50507562  # add eax, 0x0000389C; push eax; call [0x5055C9A4] 
0x50539a51  # add eax, 0x000000B4; push eax; call esi 
0x50514329  # add eax, 0x54AD04B8; push eax; push [ebp+0x10]; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x5050f8c9  # add eax, 0x042712B8; adc byte [eax-0x15], 0x55; push ebx; push esi; call [0x5054A09C] 
0x5051752f  # add eax, 0x54D2F0B8; push eax; mov [edi+0x4C], eax; call [eax] 
0x5053f501  # add eax, 0xFFFFFFB9; jnle 0x5053F48B; mov [edi+esi*8], 0xFFFDF085; call [eax] 
0x5050eaa3  # add eax, 0x00000AC0; push eax; lea eax, [ebp-0x54]; push eax; call [0x5054A04C] 
0x5052a158  # add eax, 0x0B08E0C1; retn 0xB60F 
0x50542fbf  # add eax, 0x5055DED0; sete cl; mov eax, ecx; ret 
0x5050c8d3  # add eax, 0x000032DC; push eax; call [0x5054A04C]; xor eax, eax; retn 0x0008 
0x5050c8d3  # add eax, 0x000032DC; push eax; call [0x5054A04C] 
0x5050c7fa  # add eax, 0x000032DC; push eax; push [ebp+0x0C]; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7fa  # add eax, 0x000032DC; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x505366a0  # add eax, 0x008721E8; add bl, bl; loop 0x50536706; ret 
0x505265ee  # add eax, 0xFFFE47E8; jmp [ecx+0x5055D3E8] 
0x50533496  # add eax, 0x008051E8; add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56]; call [0x5054A0F8] 
0x50533496  # add eax, 0x008051E8; add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56] 
0x50516498  # add eax, 0x009C69E8; add byte [ecx-0x75], bl; xchg [eax+0x3B000000], edi; ret 
0x50542fa7  # add eax, 0x002C78E8; add byte [ecx+0x59], bl; xor eax, eax; pop esi; pop ebp; ret 
0x50538e6a  # add eax, 0x000CC5E8; add byte [ebx-0x743CFBC0], cl; call [ebp-0x75] 
0x50521382  # add eax, 0x8101E3E9; ret 
0x505169a2  # add eax, 0x000000F4; ret 
0x50514891  # add eax, 0xC01BD8F7; ret 
0x50516140  # add eax, 0x5FFFFFFD; pop esi; leave; ret 
0x5051ffe1  # add eax, 0x83FFFFFE; les ebx, [eax]; pop edi; pop esi; leave; ret 
0x50546850  # add eax, 0xE07C35FF; push ebp; push eax; mov [0x5055DFD0], eax; call esi 
0x50516493  # add eax, 0xEB1450FF; add eax, 0x009C69E8; add byte [ecx-0x75], bl; xchg [eax+0x3B000000], edi; ret 
0x50504117  # add eax, 0xEB0875FF; cmp ecx, [ebp-0x0002177B]; call [eax+0x68] 
0x5050d5c5  # push es; add byte [eax], al; push eax; lea eax, [esi+0x14]; push eax; call ebx 
0x50505cbf  # push es; add byte [eax], al; push eax; call ebx 
0x505103a0  # push es; add byte [eax], al; push eax; call edi 
0x5050ac43  # push es; add byte [eax], al; call [0x5054A04C] 
0x505144a5  # push es; add byte [eax], al; call [0x5054A050] 
0x50503d43  # push es; add byte [eax+0x00], al; add byte [ecx+0x0032C087], cl; add byte [ebp+0x7E], dh; push 0x5055C960; call [0x5054A15C] 
0x505494cc  # push es; add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x505495df  # push es; add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0014 
0x50521c82  # push es; add [eax], eax; leave; ret 
0x50515c9b  # push es; add [edi], eax; and [esi], 0x00000000; add esp, 0x0C; ret 
0x50508410  # push es; add [ebx+0x7400147D], eax; push ss; push [ebp+0x14]; push esi; call [0x5054A050] 
0x505083a2  # push es; add [ebx+0x7400187D], eax; or edi, edi; jne 0x505083C5; call ebx 
0x5050842c  # push es; add [ebx+0x7400187D], eax; push ss; push [ebp+0x18]; push esi; call [0x5054A050] 
0x505083b1  # push es; add [ebx+0x74001C7D], eax; or edi, edi; jne 0x505083D8; call ebx 
0x50508448  # push es; add [ebx+0x74001C7D], eax; adc bh, bh; jne 0x5050846F; push esi; call [0x5054A050] 
0x50506e33  # push es; add [ebx-0x38C4E7BD], ecx; je 0x50506E43; push eax; call ebp 
0x50506e41  # push es; add [ebx-0x38C4E3BD], ecx; je 0x50506E51; push eax; call ebp 
0x50506e4f  # push es; add [ebx-0x38C4DFBD], ecx; je 0x50506E5F; push eax; call ebp 
0x50506e5d  # push es; add [ebx-0x38C4DBBD], ecx; je 0x50506E6D; push eax; call ebp 
0x50506a54  # push es; add [ebx-0x3F7AEBB9], ecx; je 0x50506A94; push eax; call ebx 
0x5050699f  # push es; add [ebx-0x3F7AE7B9], ecx; je 0x505069AF; push eax; call ebx 
0x50506a92  # push es; add [ebx-0x3F7AE7B9], ecx; je 0x50506AD2; push eax; call ebx 
0x505069ad  # push es; add [ebx-0x3F7AE3B9], ecx; je 0x505069BD; push eax; call ebx 
0x50506ad0  # push es; add [ebx-0x3F7AE3B9], ecx; je 0x50506B10; push eax; call ebx 
0x505069bb  # push es; add [ebx-0x3F7ADFB9], ecx; je 0x505069CB; push eax; call ebx 
0x50506b0e  # push es; add [ebx-0x3F7ADFB9], ecx; je 0x50506B4E; push eax; call ebx 
0x505069c9  # push es; add [ebx-0x3F7ADBB9], ecx; je 0x505069D9; push eax; call ebx 
0x50506b4c  # push es; add [ebx-0x3F7ADBB9], ecx; je 0x50506B86; push eax; call ebx 
0x50536999  # push es; shld edx, eax, cl; shl eax, cl; ret 
0x50542f29  # push es; shrd eax, edx, cl; shr edx, cl; ret 
0x5054291f  # push es; movsx eax, byte [ecx+eax+0x04]; and eax, 0x40; pop esi; pop ebp; ret 
0x50521e2b  # push es; sub [ecx], eax; pop edi; pop ebx; ret 
0x505152a9  # push es; sub al, byte [esi+0x18]; mov ecx, [esi+0x10]; mov edx, [esi+0x18]; mov byte [ecx+edx-0x01], al; ret 
0x5054881b  # push es; xor eax, eax; inc eax; pop esi; retn 0x000C 
0x50513132  # push es; xor eax, eax; inc eax; pop esi; leave; retn 0x000C 
0x5051f35b  # push es; daa; add byte [eax], al; mov eax, esi; pop esi; ret 
0x50518f5c  # push es; cmp al, byte [eax]; add byte [ebx+0x5B5F10C4], al; leave; ret 
0x5050a9ad  # push es; push eax; push 0x5054AB70; push ebx; call [0x5054A260] 
0x50526684  # push es; push esi; call [eax+0x04] 
0x5051f240  # push es; push esi; call [eax+0x08] 
0x5052daea  # push es; push esi; call [eax+0x0C] 
0x5051f13d  # push es; push esi; call [eax+0x10] 
0x5052669e  # push es; push esi; call [eax+0x18] 
0x5052dbf6  # push es; push esi; call [eax+0x1C] 
0x5051f07a  # push es; push edi; push edx; push esi; call [eax+0x04] 
0x5052666a  # push es; push edi; push esi; call [eax+0x18] 
0x50526bad  # push es; push edi; push esi; call [eax+0x1C] 
0x50531adf  # push es; push edi; push 0x00000000; push ebx; call eax 
0x50515206  # push es; pop ecx; mov [esi+0x18], eax; ret 
0x50535d57  # push es; pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x50516a4a  # push es; pop esi; ret 
0x5053164f  # push es; push 0x00000000; push 0x00001F40; push esi; call [eax+0x04] 
0x5052ef7d  # push es; push 0x00000000; push 0x00001F41; push esi; call [eax+0x04] 
0x50527194  # push es; push 0x00000001; push esi; call [eax+0x1C] 
0x5051ab6d  # push es; js 0x5051AB71; add cl, cl; ret 
0x5053c328  # push es; add eax, 0x20; push eax; call [0x5054A154] 
0x5050e5a8  # push es; or eax, 0xFFFFFFFF; retn 0x0008 
0x50546d21  # push es; or eax, 0xFFFFFFFF; retn 0x000C 
0x5053c3d8  # push es; and eax, 0xFFFFFFDF; sub eax, 0x07; pop ebp; ret 
0x5053edbe  # push es; cmp edi, 0x28; jc 0x5053EDAC; pop edi; pop esi; ret 
0x5050c4a6  # push es; test al, al; jne 0x5050C496; push esi; call [0x5054A03C] 
0x50537b04  # push es; test eax, eax; je 0x50537B0B; call eax 
0x50521f46  # push es; test eax, eax; jne 0x50521F4D; pop esi; ret 
0x50527940  # push es; test eax, eax; jne 0x5052794A; and [esi+0x04], eax; pop esi; ret 
0x5053ff3f  # push es; mov [esi+0x08], eax; mov [esi+0x04], eax; pop esi; pop ebp; ret 
0x5052892f  # push es; mov [esi+0x08], ecx; call [eax+0x14] 
0x50516bac  # push es; mov [ecx+0x000000DC], eax; push eax; call [0x5054A028]; ret 
0x50516bac  # push es; mov [ecx+0x000000DC], eax; push eax; call [0x5054A028] 
0x50509dad  # push es; mov [esi+0x000000F0], edi; pop edi; pop esi; retn 0x0008 
0x50509e4e  # push es; mov [esi+0x000000F4], edi; pop edi; pop esi; retn 0x0008 
0x5051686d  # push es; mov eax, [esp+0x0C]; pop esi; ret 
0x5051694f  # push es; mov eax, [esp+0x14]; mov [edi+0x000000EC], eax; pop esi; pop edi; ret 
0x50543bc1  # push es; mov eax, [ebp-0x04]; pop esi; pop edi; leave; ret 
0x5050ab40  # push es; mov eax, [eax+0x00000108]; retn 0x0004 
0x50502ccb  # push es; mov eax, [eax+0x00000514]; retn 0x0004 
0x50502ae9  # push es; mov eax, [eax+0x000000A0]; retn 0x0004 
0x50502aff  # push es; mov eax, [eax+0x000000AC]; retn 0x0004 
0x5050d542  # push es; mov eax, [eax+0x00000AB4]; retn 0x0004 
0x50502f1f  # push es; mov eax, [eax+0x00000AB8]; retn 0x0004 
0x50502ce6  # push es; mov eax, [eax+0x000032CC]; retn 0x0004 
0x5050c78b  # push es; mov eax, [eax+0x000032D8]; retn 0x0004 
0x5050dddc  # push es; mov eax, [eax+0x000000E4]; retn 0x0004 
0x5050a7e3  # push es; mov eax, [esi+0x000032D4]; pop edi; pop esi; pop ebp; retn 0x0004 
0x5053ad61  # push es; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x5054A0E4] 
0x50546ac2  # push es; lea ecx, [ebp-0x08]; push ecx; call eax; push 0x5055E084; call [0x5054A15C] 
0x50546ac2  # push es; lea ecx, [ebp-0x08]; push ecx; call eax 
0x5051addd  # push es; lea ecx, [ebp-0x00000084]; push ecx; push [esi+0x04]; call [eax+0x0C] 
0x5051c78e  # push es; sahf; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x5053a19d  # push es; mov eax, 0x505569B8; ret 
0x5053a1b0  # push es; mov eax, 0x505569BC; ret 
0x50528389  # push es; mov eax, 0x5054BCD4; ret 
0x5051cbb7  # push es; ret 
0x50546cd1  # push es; call [0x5055DF10]; pop esi; leave; retn 0x0004 
0x50546cd1  # push es; call [0x5055DF10] 
0x5051ee2f  # push es; call [0x5054A118] 
0x50501641  # push es; call [0x5054A044] 
0x505401fd  # push es; call [0x5054A0C0]; test eax, eax; jne 0x50540212; call [0x5054A0E4] 
0x50540145  # push es; call [0x5054A0C0] 
0x50547573  # push es; jmp [0x5054A028] 
0x50516b81  # push es; jmp [0x5054A0E4] 
0x50510119  # push es; push [eax]; lea eax, [ebp-0x00000204]; push eax; call edi 
0x5053bac6  # push es; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x5054A218] 
0x5053bdec  # push es; push [edi+eax]; call [0x5054A0E8] 
0x5054685f  # push es; push [0x5055E07C]; mov [0x5055DFD8], eax; call esi 
0x5052e4da  # push es; call [eax+0x04] 
0x50546f8c  # push es; push [esp+0x04]; call eax; retn 0x0004 
0x50546f8c  # push es; push [esp+0x04]; call eax 
0x5052dcd3  # push es; push [ebp+0x0C]; push esi; call [eax+0x08] 
0x50537c50  # push es; call edi 
0x50507d69  # pop es; add byte [eax], al; add byte [ebx+0x0038AC86], cl; add byte [ebx], al; ret 
0x505051f0  # pop es; add byte [eax], al; mov ebx, [0x5054A03C]; push edi; call ebx 
0x50537fae  # pop es; add byte [eax], al; ret 
0x5051f618  # pop es; add byte [eax], al; idiv ecx; mov eax, edx; ret 
0x50505232  # pop es; add byte [eax], al; push [eax+0x0C]; call ebx 
0x50507351  # pop es; add byte [edi], al; add byte [edx+0x00], ch; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x50507353  # pop es; add byte [edx+0x00], ch; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x50526a3d  # pop es; add dh, al; inc esi; and [edx-0x75], ebx; or byte [edi+0x50], dl; call [ecx+0x08] 
0x50521bdb  # pop es; add [eax], eax; leave; ret 
0x50506ece  # pop es; add [ebx-0x3F7AEBBD], ecx; je 0x50506EE9; push eax; push edi; call [0x5054A050] 
0x50506ee7  # pop es; add [ebx-0x3F7AE7BD], ecx; je 0x50506F02; push eax; push edi; call [0x5054A050] 
0x50506f19  # pop es; add [ebx-0x3F7ADFBD], ecx; je 0x50506F34; push eax; push edi; call [0x5054A050] 
0x50506f32  # pop es; add [ebx-0x247ADBA5], ecx; je 0x50506F49; push ebx; push edi; call [0x5054A050] 
0x50525a87  # pop es; add eax, edx; sar eax, 0x03; pop ecx; add eax, 0x04; ret 
0x5051fcce  # pop es; add eax, edx; sar eax, 0x03; add eax, 0x04; ret 
0x5053da1c  # pop es; add al, 0x83; jmp [eax] 
0x5053331d  # pop es; or eax, edi; pop edi; pop esi; pop ebp; ret 
0x5054126c  # pop es; xor eax, eax; inc eax; ret 
0x505212fd  # pop es; aaa; add byte [ecx+0x3707D6C6], al; ret 
0x5050e1e7  # pop es; aaa; ret 
0x50507762  # pop es; cmp eax, esi; je 0x50507771; push esi; push eax; call [0x5055CA08] 
0x505077a2  # pop es; push eax; call [0x5055C988] 
0x50507787  # pop es; push eax; call [0x5055C99C] 
0x50506999  # pop es; push eax; call ebx 
0x50506e2d  # pop es; push eax; call ebp 
0x505085fa  # pop es; push eax; call edi 
0x505275c8  # pop es; push ebx; lea ecx, [ebp-0x44]; push ecx; push edi; call [eax+0x08] 
0x505316aa  # pop es; push ebx; lea edx, [ebp-0x0080]; push edx; push eax; call [ecx+0x08] 
0x5052759f  # pop es; push ebx; push [0x5054C1B0+ecx*4]; push edi; call [eax+0x08] 
0x505107bd  # pop es; push ebx; call edi 
0x505277cf  # pop es; push esi; push edi; call [eax+0x14] 
0x50526715  # pop es; push esi; push edi; call [eax+0x18] 
0x50526cd7  # pop es; push edi; call [eax+0x14] 
0x50526cbe  # pop es; push edi; call [eax+0x20] 
0x50547cb4  # pop es; push edi; call esi; test eax, eax; jne 0x50547CD7; call [0x5054A274] 
0x50509b18  # pop es; push edi; call esi 
0x5052af3e  # pop es; pop ebx; leave; ret 
0x5053c3de  # pop es; pop ebp; ret 
0x50531559  # pop es; push 0x00001F40; push edi; call [eax+0x04] 
0x50526725  # pop es; push 0x00000000; push edi; call [eax+0x1C] 
0x5052e22f  # pop es; push 0x00000000; push 0x00001F40; push edi; call [eax+0x04] 
0x5052e2d6  # pop es; push 0x00000000; push 0x00001F41; push edi; call [eax+0x04] 
0x5052672d  # pop es; push 0x00000000; push 0x00000000; push edi; call [eax+0x08] 
0x50514248  # pop es; jnbe 0x5051427C; jmp [0x50514286+eax*4] 
0x505142e8  # pop es; jnbe 0x5051432A; jmp [0x5051434A+eax*4] 
0x50515c9d  # pop es; and [esi], 0x00000000; add esp, 0x0C; ret 
0x505386a3  # pop es; and [eax+0x08], 0x00000000; push ecx; call ebx 
0x50509e82  # pop es; and [eax+0x000000DC], 0xFFFFFFFE; xor eax, eax; retn 0x0008 
0x5051af12  # pop es; add esp, 0x40; push [edi+0x04]; call [eax+0x04] 
0x50546fa1  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x0008 
0x50546bbe  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x000C 
0x5054703b  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x0010 
0x50546d71  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x0014 
0x505476aa  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x0024 
0x505063c5  # pop es; or eax, 0xFFFFFFFF; pop esi; retn 0x0004 
0x5050c458  # pop es; test al, al; jne 0x5050C448; push edi; call [0x5054A03C] 
0x5053847f  # pop es; test eax, eax; je 0x50538486; call eax 
0x5053c388  # pop es; test eax, eax; jne 0x5053C391; xor eax, eax; pop ebp; ret 
0x50501555  # pop es; test esi, esi; je 0x50501617; test [esi+0x000000DC], 0x00008000; jne 0x5050157F; call [0x5054A044] 
0x50527718  # pop es; mov [esi+0x48], eax; mov eax, [edi]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5051eabd  # pop es; mov [eax+0x10], ecx; xor eax, eax; inc eax; ret 
0x5053bac9  # pop es; mov [ebp-0x00001AE0], ecx; call [0x5054A218] 
0x5052771d  # pop es; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5053254f  # pop es; mov eax, [ebp+0x08]; pop esi; pop edi; leave; ret 
0x5053e334  # pop es; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50533111  # pop es; mov ecx, [ebp-0x10]; and [ecx+0x70], 0xFFFFFFFD; pop ebx; leave; ret 
0x50532b68  # pop es; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x50516832  # pop es; mov eax, [eax+0x00000090]; ret 
0x505167a2  # pop es; mov eax, [eax+0x000001AC]; ret 
0x505169e8  # pop es; mov eax, [eax+0x000000D4]; ret 
0x50516a0e  # pop es; mov eax, [eax+0x000000D8]; ret 
0x5051685a  # pop es; mov eax, [eax+0x000000E0]; ret 
0x505168b4  # pop es; mov eax, [eax+0x000000E4]; ret 
0x50542680  # pop es; mov eax, 0x00008000; pop ebp; ret 
0x5050d65a  # pop es; mov [esi+0x10], 0x00000E10; xor eax, eax; pop esi; pop edi; retn 0x0008 
0x5053868f  # pop es; mov [esi+0x64], 0x0000008A; push [esi+0x64]; push 0x00000008; call ebx 
0x5053c3b9  # pop es; shl [esi], 1; xor eax, eax; inc eax; pop ebp; ret 
0x50521e74  # pop es; in al, dx; pop ecx; pop ecx; ret 
0x5053bc08  # pop es; call [0x5054A0E8] 
0x505401fa  # pop es; push [esi+eax]; call [0x5054A0C0]; test eax, eax; jne 0x50540212; call [0x5054A0E4] 
0x50540142  # pop es; push [esi+eax]; call [0x5054A0C0] 
0x5054686e  # pop es; push [0x5055E07C]; mov [0x5055DFC8], eax; call esi 
0x505421a9  # or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x5050d5d3  # or byte [eax], al; add byte [eax-0x73], dl; xchg byte [edx+eax], dl; add byte [eax], al; push eax; call ebx 
0x5053f351  # or byte [eax], al; add byte [ebx-0x00020F73], al; call [eax] 
0x5053f35d  # or byte [eax], al; add byte [ebx-0x00020F73], al; jmp [eax] 
0x505391c8  # or byte [eax], al; add bl, al; mov eax, 0x00000411; ret 
0x50545bb1  # or byte [eax], al; add dh, dh; retn 0x7401 
0x505386a6  # or byte [eax], al; push ecx; call ebx 
0x5051ca88  # or byte [eax], al; pop esi; ret 
0x50537fcb  # or byte [eax], al; je 0x50537FD9; lea eax, [edi+0x0C]; push eax; call [0x5054A154] 
0x5050655a  # or byte [eax], al; je 0x5050656B; push [esp+0x08]; push 0x00000000; push eax; call [0x5054A084] 
0x50506536  # or byte [eax], al; je 0x5050652F; push [esp+0x08]; push 0x00000008; push eax; call [0x5054A07C] 
0x5053772f  # or byte [eax], al; jne 0x5053775A; push esi; push [0x50555FB4]; mov esi, [0x5054A030]; call esi 
0x5053f05b  # or byte [eax], al; jnle 0x5053F034; pop esi; pop ebx; pop ebp; ret 
0x50546aea  # or byte [eax], al; push [0x5055E07C]; call [0x5054A094] 
0x505484d6  # or byte [eax], al; push [ebp-0x78]; call [0x5054A008] 
0x5050ab6d  # or byte [ecx], al; add byte [eax], al; xor eax, eax; retn 0x0008 
0x50501e9a  # or byte [ecx], al; add byte [eax], al; cmp [edi], ebx; je 0x50501EB5; call [0x5054A188] 
0x5050ab43  # or byte [ecx], al; add byte [eax], al; retn 0x0004 
0x50516a24  # or byte [ecx], al; add byte [eax], al; ret 
0x50521aca  # or byte [ecx], al; add cl, cl; ret 
0x50516b4c  # or byte [ecx], al; mov byte [ecx+eax], ah; add byte [eax], al; ret 
0x505259e3  # or byte [ebx], al; retn 0x4943 
0x5053116f  # or byte [ebx], al; retn 0x558B 
0x50524ff5  # or byte [ebx], al; ret 
0x5051716e  # or byte [0x840F0000], al; xor eax, 0x33000004; shr byte [ebx], cl; retn 0xC7B9 
0x5052a15b  # or byte [ebx], cl; retn 0xB60F 
0x50527377  # or byte [ebx], cl; retn 0xC183 
0x5051c81f  # or byte [ebx], cl; retn 0xFF83 
0x5052d2a4  # or byte [ebx], cl; retn 0xD68B 
0x5052d2cd  # or byte [ebx], cl; retn 0xF08B 
0x5052a261  # or byte [ebx], cl; retn 0x558D 
0x5052d235  # or byte [ebx], cl; retn 0xE0C1 
0x505202a3  # or byte [ebx], cl; ret 
0x5052b3b4  # or byte [ebx], cl; enter 0xCF33, 0x8B; ret 
0x5052a95b  # or byte [ebx], cl; fmul [ebp-0x0001977B]; call [eax+0x53] 
0x5052d716  # or byte [ebx], cl; test [ecx+0x04C08331], 0x4A04C183; jne 0x5052D6FB; pop edi; pop esi; ret 
0x5050975e  # or byte [ebx], cl; test [ecx+0x04C28332], 0x4904C083; jne 0x50509743; pop edi; pop esi; ret 
0x50506046  # or byte [edi], cl; test byte [esi], bh; add [eax], eax; add bh, bh; jne 0x50506058; call [0x5054A03C] 
0x5052a823  # or byte [edi], cl; mov dh, 0x41; add al, 0x0F; mov dh, 0x51; add eax, 0x0B08E0C1; retn 0xB60F 
0x50546e04  # or byte [edi], cl; mov dh, 0xC0; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x5052f3f9  # or byte [ebx], bl; dec [ebp+0x23182444]; clc; call [0x5054A144] 
0x505464c4  # or byte [ebx], ah; push ebp; push eax; push [0x5055E078]; mov [0x5055DF44], eax; call esi 
0x5053efb2  # or byte [0x000000FF], ah; pop edi; pop ebx; pop esi; leave; ret 
0x50509342  # or byte [ebx], ch; ret 
0x5051cb80  # or byte [ebx], ch; fild word [ebp+0x5FCE7FDB]; pop esi; pop ebx; ret 
0x50508e2b  # or byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; pop ebp; retn 0x0008 
0x5050c345  # or byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; leave; retn 0x0008 
0x505427bd  # or byte [ebx], dh; rcr byte [esi+0x5B], 0xC9; ret 
0x50538a07  # or byte [ebx], dh; rcr byte [esi+0x5D], 0xC3; mov eax, 0x5055601C; ret 
0x505297b5  # or byte [ebx], dh; retn 0xFF25 
0x50528f48  # or byte [ebx], dh; ret 
0x50545f9f  # or byte [ebx], dh; fstp tword [ebx]; ret 
0x50526b22  # or byte [ebx], dh; inc [edi+0x57]; push eax; call [ecx+0x1C] 
0x50508bda  # or byte [eax], bh; add byte [eax], al; mov [ebx+0x0000380C], eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50508bc0  # or byte [eax], bh; add byte [eax], al; call edi 
0x5051104b  # or byte [ecx], bh; add eax, 0x50555C74; je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x5051e866  # or byte [ebx], bh; inc esp; and al, 0x04; jbe 0x5051E871; or eax, 0xFFFFFFFF; ret 
0x5053e89a  # or byte [ebx], bh; retn 0x860F 
0x50522908  # or byte [ebx], bh; retn 0x0474 
0x50505bfd  # or byte [ebx], bh; ret 
0x50520183  # or byte [ebx], bh; into; jle 0x50520165; or eax, 0xFFFFFFFF; pop esi; ret 
0x50516803  # or byte [eax+0x48], cl; jne 0x50516828; push 0x00000038; pop eax; ret 
0x5052f861  # or byte [edx+0x75], cl; out dx, al; pop esi; ret 
0x50542749  # or byte [eax+0x56], dl; call [0x5054A178]; push eax; call [0x5054A190] 
0x50542749  # or byte [eax+0x56], dl; call [0x5054A178] 
0x50504914  # or byte [eax+0x68], dl; mov [fs:0x458D5054], eax; dec eax; push eax; call [0x5054A03C] 
0x50547c03  # or byte [eax+0x6A], dl; call [esi-0x18] 
0x50541c93  # or byte [eax-0x3A], dl; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; mov byte [ebp+0x0B], 0x00; call [0x5054A1A0] 
0x50526656  # or byte [eax-0x18], dl; enter 0xFF40, 0xFF; pop ecx; pop ecx; ret 
0x5050119b  # or byte [eax-0x01], dl; adc eax, 0x5054A030; ret 
0x505064f7  # or byte [eax-0x01], dl; adc eax, 0x5054A07C; retn 0x0004 
0x5050653f  # or byte [eax-0x01], dl; adc eax, 0x5054A07C; retn 0x0008 
0x5052ef43  # or byte [eax-0x01], dl; push ecx; add al, 0x83; les ecx, [esi+ebx*2]; ret 
0x5052dd05  # or byte [eax-0x01], dl; push ecx; or al, 0x59; pop ecx; ret 
0x5052ef62  # or byte [eax-0x01], dl; push ecx; adc byte [ecx+0x59], bl; pop esi; ret 
0x5052dd31  # or byte [eax-0x01], dl; push ecx; adc byte [ecx+0x59], bl; ret 
0x5052db1e  # or byte [eax-0x01], dl; push ecx; adc al, 0x59; pop ecx; ret 
0x5052f19a  # or byte [eax-0x01], dl; push ebp; or byte [ecx+0x59], bl; leave; ret 
0x5051cb8e  # or byte [eax-0x01], dl; je 0x5051CBB7; or al, ch; cmp esi, 0x5959FFFF; ret 
0x50542716  # or byte [ecx+0x50], dl; call [0x5054A174] 
0x50542827  # or byte [ecx+0x56], dl; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x50522f63  # or byte [ebx+0x2B], dl; ret 
0x5051ec67  # or byte [ebx+0x53], dl; push [esi+0x50]; push [esi+0x4C]; push ebx; push eax; call [ecx] 
0x5051ab98  # or byte [ebx+0x56], dl; call [eax] 
0x50503dc5  # or byte [ebx+0x56], dl; call [0x5054A18C] 
0x5052e745  # or byte [ebx-0x73], dl; push ebp; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x50526de4  # or byte [esi+0x3B], dl; ret 
0x50501172  # or byte [esi+0x50], dl; call [0x5054A02C]; push esi; push 0x5055C944; call [0x5054A18C] 
0x50501172  # or byte [esi+0x50], dl; call [0x5054A02C] 
0x50515f4e  # or byte [esi-0x18], dl; adc [edx+0x00], ebp; add byte [ebx+0x5E5F10C4], al; pop ebx; ret 
0x505116af  # or byte [esi-0x18], dl; lds eax, [eax]; add byte [ebx+0x458928C4], al; adc byte [ebx], bh; ret 
0x505117fc  # or byte [esi-0x18], dl; int1; ret 
0x50509399  # or byte [edi+0x33], dl; inc [ebp+0x560F74F6]; call [0x5054A03C] 
0x50526a44  # or byte [edi+0x50], dl; call [ecx+0x08] 
0x50515d32  # or byte [edi+0x50], dl; call [ecx+0x1C]; pop ecx; pop ecx; mov [esi+0x000028F0], edi; ret 
0x50515d32  # or byte [edi+0x50], dl; call [ecx+0x1C] 
0x50531a8c  # or byte [edi+0x56], dl; push ebx; call eax 
0x5051bf71  # or byte [edi+0x56], dl; call [eax] 
0x5052f556  # or byte [edi+0x57], dl; mov [esi], edi; mov [esi+0x04], eax; call ebx 
0x5051fa1d  # or byte [edi-0x01], dl; jne 0x5051FA06; push eax; call [eax+0x0C] 
0x5052f19e  # or byte [ecx+0x59], bl; leave; ret 
0x5052f255  # or byte [ecx+0x59], bl; call [0x5054A138] 
0x5053c3d5  # or byte [ecx+0x75], bl; push es; and eax, 0xFFFFFFDF; sub eax, 0x07; pop ebp; ret 
0x505180a9  # or byte [ecx-0x75], bl; inc ebx; push eax; mov [edi+0x78], eax; call [eax+0x04] 
0x50541068  # or byte [ecx-0x15], bl; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x5050399e  # or byte [ebx+0x00], bl; add byte [eax-0x04], ch; mov byte [0xFF535054], al; xlatb; push ebx; call [0x5054A03C] 
0x50542da7  # or byte [ebx-0x37], bl; ret 
0x5053737d  # or byte [esi+0x5D], bl; ret 
0x50532546  # or byte [esi+0x5F], bl; leave; ret 
0x5050dcc5  # or byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0008 
0x5050a238  # or byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x000C 
0x50529805  # or byte [edi-0x77], bl; xor dh, byte [ebx]; rcr [esi-0x77], 0x42; add al, 0x5B; leave; ret 
0x505156fd  # or byte [edi-0x77], bl; jc 0x5051571A; or eax, ecx; pop esi; ret 
0x50534387  # or byte [edi-0x3D], bl; mov word [edi], dx; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x5053439d  # or byte [edi-0x3D], bl; mov byte [edi], dl; mov eax, [esp+0x08]; pop edi; ret 
0x50532e42  # or byte [edi-0x3D], bl; mov eax, [esp+0x04]; ret 
0x505434d1  # or byte [esi+0x0B], ah; retn 0x0F46 
0x505384bf  # or byte [edx+0x00], ch; sete al; push 0x00001000; push eax; call [0x5054A074] 
0x50506561  # or byte [edx+0x00], ch; push eax; call [0x5054A084]; retn 0x0008 
0x50506561  # or byte [edx+0x00], ch; push eax; call [0x5054A084] 
0x5052f104  # or byte [edx+0x00], ch; push eax; call [ecx+0x1C]; push 0xFFFFFFFF; push edi; call [edi+0x48] 
0x5052f104  # or byte [edx+0x00], ch; push eax; call [ecx+0x1C] 
0x5051e3e7  # or byte [edx+0x00], ch; push [eax]; call [0x5054A0EC] 
0x5052dcf1  # or byte [edx+0x01], ch; push eax; mov [eax+0x60], ecx; call [eax+0x48] 
0x50538846  # or byte [edx+0x01], ch; push edx; call [0x5055E13C] 
0x5052e139  # or byte [edx+0x02], ch; push 0x5054A2FC; push eax; call [ecx+0x08] 
0x5052dd1d  # or byte [edx+0x03], ch; push eax; mov [eax+0x64], ecx; call [eax+0x48] 
0x5050f55c  # or byte [edx+0x03], ch; push edi; push 0x00000001; push 0x80000000; push esi; call [0x5054A0A8] 
0x5050d88e  # or byte [edx+0x03], ch; push edi; push 0x00000001; push 0x80000000; push [ebp-0x74]; call [0x5054A0A8] 
0x5050653d  # or byte [edx+0x08], ch; push eax; call [0x5054A07C]; retn 0x0008 
0x5050653d  # or byte [edx+0x08], ch; push eax; call [0x5054A07C] 
0x50541307  # or byte [edx+0x08], ch; call [0x5054A028] 
0x505315a7  # or byte [edx+0x14], ch; lea edx, [ebp-0x18]; push edx; push eax; call [ecx+0x08] 
0x50547416  # or byte [edx-0x01], ch; call eax 
0x5053259c  # or byte [edx+0x0D], dh; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532417  # or byte [edx+0x2A], dh; rep movsd; jmp [0x50532534+edx*4] 
0x50532787  # or byte [edx+0x2A], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x505324b9  # or byte [edx-0x78], dh; rep movsd; jmp [0x50532534+edx*4] 
0x50532829  # or byte [edx-0x78], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50532991  # or byte [edx-0x78], dh; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x50532621  # or byte [edx-0x78], dh; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x5053249b  # or byte [edx-0x5A], dh; rep movsd; jmp [0x50532534+edx*4] 
0x50532967  # or byte [edx-0x4E], dh; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x505325f7  # or byte [edx-0x4E], dh; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532475  # or byte [edx-0x34], dh; rep movsd; jmp [0x50532534+edx*4] 
0x505327e5  # or byte [edx-0x34], dh; rep movsd; jmp [0x505328A4+edx*4] 
0x50511331  # or byte [edx-0x20], dh; xor eax, eax; pop esi; retn 0x0004 
0x50537b10  # or byte [edx-0x10], dh; pop esi; pop ebp; ret 
0x50545b9b  # or byte [edx+eax+0x0B], dh; ret 
0x5050159d  # or byte [ebx+ecx+0x68], dh; pushad; leave; push ebp; push eax; call [0x5054A0D4] 
0x50522901  # or byte [ebp+ecx+0x39], dh; push esi; or al, 0x74; or byte [ebx], bh; retn 0x0474 
0x50505a45  # or byte [esp+ebx-0x01], dh; jne 0x50505A53; call edi 
0x5051f047  # or byte [edi+eax*2+0x53], dh; lea edx, [ebp-0x64]; push edx; push edi; push eax; call [ecx+0x08] 
0x5054361f  # or byte [ebp+0x05], dh; mov eax, 0x00000001; ret 
0x50537e99  # or byte [ebp+0x0B], dh; push ecx; call [0x5054A1C0] 
0x5053fe56  # or byte [ebp+0x1F], dh; push [edi+0x64]; push ebx; call [ebp-0x20] 
0x5053a560  # or byte [ebp+0x5B], dh; push ebx; push ebx; push ebx; push eax; call esi 
0x50539a48  # or byte [ebp-0x2A], dh; mov eax, [edi+0x000000D4]; add eax, 0x000000B4; push eax; call esi 
0x50527837  # or byte [esi+0x04], dh; or eax, 0xFFFFFFFF; ret 
0x50511311  # or byte [esi+0x20], dh; push 0x5055CA4C; call [0x5054A104] 
0x5051daba  # or byte [edi+0x5D], dh; jmp [0x5051DB3A+edi*4] 
0x50527967  # or byte [ebp+0x0A], bh; mov [esi+0x08], eax; mov [esi+0x04], 0x00000001; pop esi; ret 
0x5052da08  # or byte [ebp+0x0E], bh; mov eax, [esi+0x0C]; push [ebp+0x08]; mov ecx, [eax]; push eax; call [ecx+0x0C] 
0x5051fadd  # or byte [ebp-0x39], bh; ret 
0x5051f9d7  # or byte [esi+0x44], bh; push [ebp-0x10]; push eax; call [eax+0x08] 
0x505074a9  # or byte [eax-0x75000000], al; xchg byte [eax+0x33000038], cl; sar byte [ebx], cl; retn 0x1674 
0x50532ce8  # or byte [eax+0x7400FC7D], al; pop es; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x50532ecb  # or byte [ecx+0x000000E6], al; xor byte [ebp-0x3C], 0x5E; pop edi; pop ebx; xor eax, eax; ret 
0x5052d2bb  # or byte [ecx+0x0000FFE6], al; add byte [ebx], cl; retn 0xB60F 
0x50538c18  # or byte [ecx+0x5561D0FE], al; push eax; jl 0x50538C07; pop esi; pop ebx; ret 
0x5050e51f  # or byte [edx-0x3E08AC82], al; rol byte [esi], 0x03; ret 
0x5051fad5  # or byte [ebx-0x7C07EFBA], al; jle 0x5051FAED; or byte [ebp-0x39], bh; ret 
0x50508d0f  # or byte [ebx+0x75000879], al; sub ecx, [ebx+0x0470FFC1]; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x505499fb  # or byte [ebx+0x5D5B0CC4], al; ret 
0x5052dcda  # or byte [ebx+0x5D5E10C4], al; ret 
0x505360f4  # or byte [ebx-0x36A0EF3C], al; ret 
0x505162b6  # or byte [ebx+0x5B5E20C4], al; pop ebp; ret 
0x5050e7a7  # or byte [ebx+0x21E9FFC8], al; add [eax], eax; add byte [ebx-0x247AF3A3], cl; je 0x5050E7C2; push ebx; call [0x5054A03C] 
0x5050ab96  # or byte [ebx+0x4DE9FFC8], al; add al, byte [eax]; add byte [ebx+0x3B571045], cl; ret 
0x50501a30  # or byte [ebx-0x79160038], al; add byte [eax], al; add byte [ebx+0x53000C7D], al; je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x50544048  # or byte [ebx+0x0374FEF8], al; push eax; call esi; pop esi; ret 
0x50544036  # or byte [ebx+0x0374FEF8], al; push eax; call esi 
0x5053bae7  # or byte [ebx+ebx*8+0x0250840F], al; add byte [eax], al; call [0x5054A214] 
0x5050ca81  # or byte [ebp+0x6A0C74C0], al; inc eax; push eax; lea eax, [edi+0x00000200]; push eax; call ebx 
0x5051e380  # or byte [ebp-0x00F08B0A], al; call [0x5054A060] 
0x50526698  # or byte [ebp-0x74E18B0A], al; push es; push esi; call [eax+0x18] 
0x50526664  # or byte [ebp-0x74DB8B0A], al; push es; push edi; push esi; call [eax+0x18] 
0x505266c1  # or byte [ebp-0x74D78B0A], al; push es; push esi; call [eax+0x18] 
0x50527248  # or byte [ebp-0x74CF8B0A], al; push es; push edi; push esi; call [eax+0x18] 
0x50516869  # or byte [ebp-0x74F98A0A], al; inc esp; and al, 0x0C; pop esi; ret 
0x50539a66  # or byte [ebp-0x7C7BF001], al; add byte [eax], al; add byte [ebx+0x56], dl; mov esi, [0x5054A0D4]; push edi; call esi 
0x50547cb0  # or byte [ebp+0x570774FF], al; call esi; test eax, eax; jne 0x50547CD7; call [0x5054A274] 
0x50547cb0  # or byte [ebp+0x570774FF], al; call esi 
0x5052670f  # or byte [ebp-0x74AB8B01], al; pop es; push esi; push edi; call [eax+0x18] 
0x505092f9  # or byte [ebp+0x330475FF], al; shr bl, 0x7B; push edi; call [0x5054A03C] 
0x5053922c  # or byte [eax+0x754E4010], cl; neg [edi+0x5E]; ret 
0x50548e68  # or byte [eax+0x3B484919], cl; ret 
0x50541d34  # or byte [eax-0x76FC14E1], cl; pop ebp; or byte [ebx], bh; ret 
0x50515101  # or byte [eax+0x046AFE45], cl; lea eax, [ebp-0x04]; push eax; push [ebp+0x08]; mov byte [ebp-0x01], bl; call [esi+0x04] 
0x50523556  # or byte [eax+0x76FF0247], cl; or al, ch; ret 
0x5051514a  # or byte [eax+0x50FFFE4D], cl; add al, 0x83; les ecx, [ecx+ecx*8]; ret 
0x5052311c  # or byte [eax-0x0000B97B], cl; dec [ebp-0x0000A37B]; call [eax-0x78] 
0x50526c4d  # or byte [ecx+0x0C468903], cl; mov eax, [ebx]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x50531b73  # or byte [ecx-0x743CA2F8], cl; call [ebp-0x75] 
0x5053e416  # or byte [ecx+0x0CC48308], cl; leave; ret 
0x5052f6fe  # or byte [ecx-0x3C74A0C8], cl; pop ebx; leave; ret 
0x50524747  # or byte [ecx-0x17BA74C8], cl; pop edi; pop esi; pop ebx; leave; ret 
0x505364ed  # or byte [ecx+0x4589E045], cl; in al, 0x33; fstp tword [ebx]; ret 
0x5053ff42  # or byte [ecx+0x5D5E0446], cl; ret 
0x5052f4e4  # or byte [ecx+0x458B2446], cl; clc; mov [esi+0x28], eax; call [0x5054A13C] 
0x5051c890  # or byte [ecx-0x743CF7B8], cl; inc esp; and al, 0x04; mov eax, [eax+0x08]; ret 
0x50523258  # or byte [ecx-0x0000A77B], cl; call [ebx-0x01] 
0x50516b72  # or byte [ecx+0x00012888], cl; add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516B88; jmp [0x5054A0E4] 
0x50503d01  # or byte [ecx+0x0000FC9E], cl; add byte [ebx+0x5E5F5BC2], cl; retn 0x000C 
0x50515f3f  # or byte [ecx+0x290088BC], cl; add byte [eax], al; push [esi+0x0C]; push ebx; push eax; call [esi+0x08] 
0x5052d815  # or byte [edx+0x4888FF4D], cl; add [edi-0x37], ebx; ret 
0x5053b6ed  # or byte [edx+0x513A0150], cl; add [esp+edx-0x73], esi; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5051d0dd  # or byte [ebx+0x3B098B00], cl; enter 0x0476, 0x83; enter 0xC3FF, 0x1B; sal bh, 0xD8; ret 
0x50511598  # or byte [ebx-0x17CF0100], cl; dec esi; and eax, 0x59590002; ret 
0x5054121f  # or byte [ebx+0x3DD23301], cl; add eax, 0x0FC00000; xchg eax, esp; retn 0xC28B 
0x5052481f  # or byte [ebx-0x7C2DCCFF], cl; in al, dx; or al, 0x3B; retn 0x0475 
0x5051a6ce  # or byte [ebx+0x6CB88306], cl; add [eax], eax; add byte [0x5EC03305+esi*2], al; pop ebp; ret 
0x5052793e  # or byte [ebx+0x75C08506], cl; add eax, 0x5E044621; ret 
0x50525a9a  # or byte [ebx+0x02E0C106], cl; cmp ecx, eax; jl 0x50525AA8; xor eax, eax; pop esi; ret 
0x5053fd58  # or byte [ebx-0x74A514FA], cl; ret 
0x505275ab  # or byte [ebx-0x7C2408F9], cl; jecxz 0x505275B6; push ebx; push 0x5054C1D0; push edi; call [eax+0x08] 
0x5052dd03  # or byte [ebx+0x51FF5008], cl; or al, 0x59; pop ecx; ret 
0x5052dd2f  # or byte [ebx+0x51FF5008], cl; adc byte [ecx+0x59], bl; ret 
0x5052db1c  # or byte [ebx+0x51FF5008], cl; adc al, 0x59; pop ecx; ret 
0x5052e743  # or byte [ebx+0x558D5308], cl; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x5052f102  # or byte [ebx+0x50006A08], cl; call [ecx+0x1C]; push 0xFFFFFFFF; push edi; call [edi+0x48] 
0x5052f102  # or byte [ebx+0x50006A08], cl; call [ecx+0x1C] 
0x505316a5  # or byte [ebx+0x07C38308], cl; push ebx; lea edx, [ebp-0x0080]; push edx; push eax; call [ecx+0x08] 
0x5052e88a  # or byte [ebx+0x1A548D08], cl; add edx, [edx-0x73]; push ebp; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x5052e58f  # or byte [ebx-0x736A72F8], cl; add [eax], eax; add byte [edx+0x50], dl; call [ecx+0x08] 
0x50531b25  # or byte [ebx-0x17AEAFF7], cl; mov ebp, [ebx+0x00]; add byte [ecx+0x59], bl; ret 
0x50532b82  # or byte [ebx+0x5568300D], cl; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000103; pop ebp; ret 
0x50532d8c  # or byte [ebx+0x5568300D], cl; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000107; pop ebp; ret 
0x50532c87  # or byte [ebx+0x5568300D], cl; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000080; pop ebp; ret 
0x50532c03  # or byte [ebx+0x5568300D], cl; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x04; pop ebp; ret 
0x50532d08  # or byte [ebx+0x5568300D], cl; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x08; pop ebp; ret 
0x5052e042  # or byte [ebx-0x397CACD0], cl; or al, ch; xor bl, byte [ebx+0x00]; add byte [eax+0x53], dl; push [edi+0x08]; call [esi] 
0x505083f0  # or byte [ebx+0x28C68337], cl; cmp [ebp+0x10], 0x00000000; je 0x50508412; push [ebp+0x10]; push esi; call [0x5054A050] 
0x5050b82d  # or byte [ebx+0x54A2603D], cl; push eax; push eax; call edi 
0x50524dae  # or byte [ebx+0x3B078B3F], cl; retn 0xDE75 
0x5051e863  # or byte [ebx+0x443B0840], cl; and al, 0x04; jbe 0x5051E871; or eax, 0xFFFFFFFF; ret 
0x5052f505  # or byte [ebx+0x498B0840], cl; or byte [ebx], bh; enter 0x0476, 0x83; enter 0xC3FF, 0x1B; sal bh, 0xD8; ret 
0x50515064  # or byte [ebx+0x74FF1040], cl; and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x505218f5  # or byte [ebx-0x76A0F3BF], cl; xor [ebx], eax; ret 
0x5051c8a8  # or byte [ebx-0x76F3DBBC], cl; adc byte [ebx+0x08488B01], cl; lea eax, [ecx+eax+0x0C]; mov ecx, [esp+0x08]; mov [ecx], eax; ret 
0x5053efaf  # or byte [ebx-0x00DAF7BB], cl; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; leave; ret 
0x5053737a  # or byte [ebx+0x5D5E0845], cl; ret 
0x5052272e  # or byte [ebx-0x36A40FBB], cl; ret 
0x50542891  # or byte [ebx+0x016AF045], cl; push esi; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x5051d9a7  # or byte [ebx+0x47010446], cl; sbb al, 0x83; les esi, [eax]; pop edi; pop esi; ret 
0x50520356  # or byte [ebx+0x46890446], cl; or al, 0xE9; daa; add [eax], eax; add byte [ebx-0x7AF0FD07], al; retn 0xFFFE 
0x5052d958  # or byte [ebx+0x66830846], cl; inc eax; add byte [ebx+0x016A5708], cl; push eax; call [ecx+0x1C] 
0x5052da54  # or byte [ebx+0x088B0846], cl; push eax; call [ecx+0x04] 
0x5052f508  # or byte [ebx-0x37C4F7B7], cl; jbe 0x5052F514; or eax, 0xFFFFFFFF; ret 
0x5051f263  # or byte [ebx-0x76FBDBB4], cl; inc ecx; adc bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x10]; ret 
0x505317ab  # or byte [ebx-0x76FBDBB4], cl; inc ecx; sbb al, 0xC3; mov eax, [esp+0x04]; mov eax, [eax+0x1C]; ret 
0x5054419c  # or byte [ebx-0x377C07B3], cl; call ebx 
0x5051806b  # or byte [ebx-0x00AFA7B1], cl; push ecx; add al, 0x59; mov eax, [ebx+0x40]; mov [edi+0x58], eax; call [eax] 
0x50518189  # or byte [ebx-0x00AFA3B1], cl; push ecx; add al, 0x59; mov eax, [ebx+0x44]; mov [edi+0x5C], eax; call [eax] 
0x50518085  # or byte [ebx-0x00AF97B1], cl; push ecx; add al, 0x59; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x505181a3  # or byte [ebx-0x00AF93B1], cl; push ecx; add al, 0x59; mov eax, [ebx+0x4C]; mov [edi+0x6C], eax; call [eax] 
0x505181c0  # or byte [ebx-0x00AF83B1], cl; push ecx; adc al, 0x59; mov eax, [ebx+0x54]; mov [edi+0x7C], eax; call [eax+0x10] 
0x50532e6b  # or byte [ebx-0x08F7DBAC], cl; retn 0x0003 
0x505390d6  # or byte [ebx+0x758BFC5D], cl; clc; mov edi, [ebp-0x0C]; mov esp, ebp; pop ebp; ret 
0x5052757e  # or byte [ebx+0x0C6AB07D], cl; push eax; mov byte [esi+0x0D], cl; mov ecx, [edi]; push edi; call [ecx+0x08] 
0x50539d41  # or byte [ebx-0x1A740383], cl; pop ebp; ret 
0x5053733f  # or byte [ebx+0x0001F880], cl; add bl, ch; daa; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x505373ba  # or byte [ebx+0x0001FC80], cl; add bl, ch; daa; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x5053988f  # or byte [ebx+0x0000BC86], cl; add byte [ebx], dh; fist [edi+0x3B]; ret 
0x5053145f  # or byte [ebx+0x00270C87], cl; add byte [ebx], dh; fstp tword [ebx]; ret 
0x5053d8e7  # or byte [ebx+0x5B5E5FC3], cl; leave; ret 
0x505227a5  # or byte [ebx-0x36A4A13A], cl; ret 
0x505237a1  # or byte [ebx+0x5B5E5FC7], cl; leave; ret 
0x50545cd0  # or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x50538de1  # or byte [ebx-0x747D140F], cl; call [ebp-0x75] 
0x50541863  # or byte [ebx+0x33B5EBF1], cl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x50538e42  # or byte [ebx+0x33C1EBF1], cl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x5053deac  # or byte [ebp+0x5E5F0442], cl; pop ebx; leave; ret 
0x5051c8b3  # or byte [ebp-0x74F3FEBC], cl; dec esp; and al, 0x08; mov [ecx], eax; ret 
0x50541c90  # or byte [ebp-0x39AFF7BB], cl; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; mov byte [ebp+0x0B], 0x00; call [0x5054A1A0] 
0x5053a94e  # or byte [ebp-0x74AF6BBB], cl; inc ebp; or al, 0x8B; add bh, bh; xor al, 0x18; call [0x5054A208] 
0x5053312c  # or byte [ebp-0x067C60B8], cl; sbb [edi+0x11], esi; add eax, 0xFFFFFFE0; pop ebp; ret 
0x50533935  # or byte [ebp-0x067C40B8], cl; sbb [edi+0x11], esi; add eax, 0x20; pop ebp; ret 
0x5052e88c  # or byte [ebp+0x52031A54], cl; lea edx, [ebp-0x78]; push edx; push eax; call [ecx+0x08] 
0x505269b6  # or byte [ebp+0x5052E855], cl; call [ecx+0x08] 
0x5051d6cd  # or byte [ebp-0x5A0CF785], cl; pop edi; pop esi; mov eax, ebx; pop ebx; ret 
0x5051ffd7  # or byte [ebp-0x0005077B], cl; call [ebx+0x50] 
0x5052e591  # or byte [ebp+0x00018C95], cl; add byte [edx+0x50], dl; call [ecx+0x08] 
0x5052d139  # or byte [ecx+0x0303E283], bl; retn 0xF8C1 
0x50521d73  # or byte [ecx+0x0307E283], bl; retn 0xD88B 
0x505236e6  # or byte [ecx+0x0307E283], bl; retn 0xF8C1 
0x505287b4  # or byte [eax+eax+0x1F7C8D00], bl; add al, 0x8B; popfd; push 0x8BFFFFFF; ret 
0x5053e0a0  # or byte [ebx+0x5055DE7C], ah; pop ebp; ret 
0x5053fc9a  # or byte [ebx+0x5055DE84], ah; mov [0x5055DE88], eax; mov [0x5055DE8C], eax; mov [0x5055DE90], eax; pop ebp; ret 
0x5054129e  # or byte [ebx+0x5055DE9C], ah; pop ebp; ret 
0x50538a2c  # or byte [ebx+0x5055D6A0], ah; pop ebp; ret 
0x505412ad  # or byte [ebx+0x5055DEA8], ah; pop ebp; ret 
0x505412bc  # or byte [ebx+0x5055DEAC], ah; pop ebp; ret 
0x5051a4be  # or byte [ebp-0x74A80001], ch; ret 
0x50541107  # or byte [eax+0x00005A4D], bh; cmp word [ecx], ax; je 0x50541116; xor eax, eax; pop ebp; ret 
0x5051f2e1  # or bl, al; or eax, 0xFFFFFFFF; ret 
0x5051c893  # or bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x08]; ret 
0x50534390  # or dh, al; inc edi; add al, byte [eax]; pop edi; ret 
0x505066a1  # or dl, cl; push ebp; push eax; call esi 
0x5053e3c9  # or ah, bl; sbb bh, bl; loopne 0x5053E3C5; les eax, [ecx+0x7A]; add eax, 0x5D40C033; ret 
0x505463c1  # or bh, bl; push ebp; push eax; call esi 
0x50546965  # or al, ah; push ebp; push eax; call esi 
0x50547c7c  # or cl, ah; push ebp; push eax; ret 
0x50547c86  # or cl, ah; push ebp; push eax; call [0x5054A18C]; retn 0x0004 
0x50547c86  # or cl, ah; push ebp; push eax; call [0x5054A18C] 
0x50537ae8  # or al, ch; adc byte [edx], dl; add byte [eax], al; pop ecx; ret 
0x50511374  # or al, ch; adc eax, 0x59000058; pop ecx; retn 0x0008 
0x5053e6d1  # or al, ch; adc eax, 0x83FFFFFF; les ebx, [eax]; pop ebp; ret 
0x50532db7  # or al, ch; sbb bl, byte [eax]; add byte [eax], al; add esp, 0x0C; pop ebp; ret 
0x50537af1  # or al, ch; sub eax, 0x59000011; ret 
0x5052e048  # or al, ch; xor bl, byte [ebx+0x00]; add byte [eax+0x53], dl; push [edi+0x08]; call [esi] 
0x5051cd88  # or al, ch; cmp eax, 0x59FFFFFF; pop esi; ret 
0x50516621  # or al, ch; aas; arpl word [eax], ax; add byte [ebx-0x3B7CABB9], cl; sbb byte [ebx], bh; ret 
0x50537cdd  # or al, ch; inc ecx; sldt word [eax]; pop ecx; ret 
0x505148a1  # or al, ch; dec ecx; add [eax], eax; pop ecx; pop ecx; ret 
0x50508bcf  # or al, ch; dec ebp; fcos; call [esi+0x50] 
0x5053aad4  # or al, ch; js 0x5053AB4D; add byte [eax], al; pop ecx; ret 
0x5051cb93  # or al, ch; cmp esi, 0x5959FFFF; ret 
0x5053c1b0  # or al, ch; pushfd; pop esi; add byte [eax], al; pop ecx; ret 
0x50536f7f  # or al, ch; mov eax, [0x59FFFFF0]; ret 
0x505423a9  # or al, ch; mov [0x59FFFFFC], eax; ret 
0x5053a7a4  # or al, ch; test al, 0x78; add byte [eax], al; pop ecx; ret 
0x5050d534  # or al, ch; test eax, 0x85FFFF41; sal byte [ebp+0x05], 0x83; enter 0xEBFF, 0x06; mov eax, [eax+0x00000AB4]; retn 0x0004 
0x5053e42d  # or al, ch; test eax, 0x83FFFFFF; les edx, [eax]; pop ebp; ret 
0x50508b70  # or al, ch; lodsb; fcos; call [esi+0x50] 
0x5053a21f  # or al, ch; mov ecx, 0x59FFFFFF; pop ecx; pop ebp; ret 
0x50501bea  # or al, ch; mov edi, 0x33FFFFFC; rcr byte [edi+0x5E], 0x5B; leave; retn 0x0004 
0x505039fc  # or al, ch; rol byte [edx+0x00], 0x00; cmp eax, [ebp+0x10]; jne 0x50503AB0; mov [esi+0x000000A8], edi; call [0x5054A188] 
0x5054254c  # or al, ch; sar esp, 0xFFFFFFFF; jmp [ebx] 
0x50521dc2  # or al, ch; retn 0xFFEB 
0x5050ab17  # or al, ch; retn 0xFFFD 
0x5053313e  # or al, ch; retn 0xFFFE 
0x5053a45b  # or al, ch; enter 0xFFFD, 0xFF; add esp, 0x0C; pop ebp; ret 
0x50537ad6  # or al, ch; enter 0xFFFF, 0xFF; pop ecx; push [ebp+0x08]; call [0x5054A1B4] 
0x50514017  # or al, ch; xlatb; sub [eax], eax; add byte [ebx], dh; rol byte [eax+0x59], 0x59; retn 0x0004 
0x50508c2a  # or al, ch; fdivr st0, st7; call [esi+0x50] 
0x505279b9  # or al, ch; cld; loope 0x505279BD; call [eax-0x77] 
0x50526df1  # or bl, ch; push cs; mov eax, [edi]; push edi; call [eax+0x14] 
0x5050411a  # or bl, ch; cmp ecx, [ebp-0x0002177B]; call [eax+0x68] 
0x50545b0e  # or dh, dh; ret 
0x50532e6f  # or bh, dh; retn 0x0003 
0x505096f7  # or dh, bh; fdivr qword [edx+0x0C40C798]; jbe 0x50509755; xor dl, byte [eax]; ret 
0x505207c8  # or dh, bh; fdivr qword [edx+0x0C40C798]; jbe 0x50520826; xor dl, byte [eax]; mov [eax+0x10], 0xC3D2E1F0; ret 
0x5050b824  # or bh, bh; adc eax, 0x5054A03C; add eax, [esi+0x08]; mov edi, [0x5054A260]; push eax; call edi 
0x5052f3d1  # or bh, bh; adc eax, 0x5054A13C; mov [esi+0x18], 0x00000001; ret 
0x5052f48f  # or bh, bh; adc eax, 0x5054A144; cmp [esi+0x10], ebp; je 0x5052F40F; push [esi+0x04]; call [0x5054A13C] 
0x50547284  # or bh, bh; adc eax, 0x5055DF4C; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x50542419  # or bh, bh; adc eax, 0x5054A180; push eax; call [0x5054A07C] 
0x50538c2b  # or bh, bh; xor al, 0xC5; mov al, 0x60; push ebp; push eax; call [0x5054A024] 
0x5054687d  # or bh, bh; xor eax, 0x5055E07C; mov [0x5055DFBC], eax; call esi 
0x5053d78d  # or bh, bh; xor eax, 0x5055D69C; call [0x5054A07C] 
0x5051511a  # or bh, bh; push esi; add al, 0x83; les ebx, [eax]; leave; ret 
0x50524370  # or bh, bh; push edi; add al, 0x3B; ret 
0x50517fd2  # or bh, bh; jnc 0x50518046; mov [ebx+0x60], eax; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x5052db18  # or bh, bh; je 0x5052DB40; or byte [ebx+0x51FF5008], cl; adc al, 0x59; pop ecx; ret 
0x50511370  # or bh, bh; je 0x50511398; or al, ch; adc eax, 0x59000058; pop ecx; retn 0x0008 
0x505266fe  # or bh, bh; je 0x50526726; or al, 0x50; call [ecx+0x08]; add esp, 0x0C; ret 
0x505266fe  # or bh, bh; je 0x50526726; or al, 0x50; call [ecx+0x08] 
0x50537372  # or bh, bh; jne 0x5053737E; call eax 
0x5052dc48  # or bh, bh; jne 0x5052DC58; push eax; call [ecx] 
0x5053171d  # or bh, bh; jne 0x5053172D; push 0x00000001; push eax; call [ecx+0x08] 
0x5052dae5  # or bh, bh; jne 0x5052DAF5; mov eax, [esi]; push esi; call [eax+0x0C] 
0x5052da9e  # or bh, bh; jne 0x5052DAAE; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5051e2b5  # or bh, bh; jne 0x5051E2C5; push [eax]; call [0x5054A0C0] 
0x5051e362  # or bh, bh; jne 0x5051E372; push [eax]; call [0x5054A0E8] 
0x5054752e  # or bh, bh; jne 0x5054753E; push [ebp+0x08]; call eax; push eax; call [0x5055E030] 
0x50546fb7  # or bh, bh; jne 0x50546FC7; push [ebp+0x08]; call eax; push eax; call [0x5055DFFC] 
0x50546fb7  # or bh, bh; jne 0x50546FC7; push [ebp+0x08]; call eax 
0x5050657a  # or bh, bh; jne 0x5050658E; push [ebp+0x0C]; push 0x00000200; push eax; call [0x5054A190] 
0x50501034  # or bh, bh; jne 0x50501048; push [ebp+0x0C]; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50546bd7  # or bh, bh; jne 0x50546BEB; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50547057  # or bh, bh; jne 0x5054706F; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50541526  # or bh, bh; jne 0x50541546; call [0x5054A22C] 
0x5053d6bb  # or bh, bh; jne 0x5053D724; push ebx; push 0x00000000; push [eax+0x0C]; call esi 
0x5054739b  # or bh, bh; jne 0x5054738B; call eax 
0x5052d9e3  # or bh, bh; jne 0x5052D9DF; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5052d9a1  # or bh, bh; jne 0x5052D99D; mov ecx, [eax]; push eax; call [ecx+0x0C] 
0x505092c5  # or bh, bh; jne 0x505092C5; call [0x5054A250] 
0x50542a64  # or bh, bh; jne 0x50542A64; call eax 
0x505090b2  # or bh, bh; jbe 0x505090DA; push eax; call [0x5054A254] 
0x50514ee3  # or bh, bh; xchg [eax], esi; add al, byte [eax]; add bl, ch; retn 0x87C7 
0x5053d7e0  # or bh, bh; mov eax, esi; pop edi; pop esi; ret 
0x5053e0bf  # or bh, bh; rcr byte [ecx-0x7B], 1; sal byte [ebp+eax+0x33], 0xC0; inc eax; pop ebp; ret 
0x50537375  # or bh, bh; ror byte [ecx+0x458B0845], 1; or byte [esi+0x5D], bl; ret 
0x50541a7a  # or bh, bh; ror [ebx+0x75F73BF0], cl; ret 
0x5053141d  # or bh, bh; call [edi-0x18] 
0x50541b68  # or bh, bh; dec ecx; ret 
0x505428db  # or [eax], eax; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x50541f57  # or [eax], eax; add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x50537d67  # or [eax], eax; add byte [ebx], dh; dec [ecx+0x458DFC7D]; pushfd; push eax; call [0x5054A1C4] 
0x50538f67  # or [eax+eax], eax; sar bh, 0x15; sub byte [ecx-0x00AFAFAC], ah; adc eax, 0x5054A1E4; leave; ret 
0x5053efea  # or [esi], eax; ret 
0x5051d0c9  # or [edi], ecx; mov dh, 0x45; dec [ecx-0x3974EFBA]; pop esi; leave; ret 
0x50525b10  # or [eax], edx; pop esi; ret 
0x5051d774  # or [ecx], edi; dec eax; xor byte [ebp+0x04], dh; xor eax, eax; inc eax; ret 
0x50507799  # or [ecx], edi; mov ah, 0xFB; nop; cmp byte [eax], al; add byte [edi+eax+0x50], dh; call [0x5055C988] 
0x5050777e  # or [ecx], edi; mov ah, 0xFB; mov al, byte [0x74000038]; pop es; push eax; call [0x5055C99C] 
0x50541c97  # or [edx], edi; mov byte [ebp+0x0A], 0x5C; mov byte [ebp+0x0B], 0x00; call [0x5054A1A0] 
0x5051d0e1  # or [ebx], edi; enter 0x0476, 0x83; enter 0xC3FF, 0x1B; sal bh, 0xD8; ret 
0x505097fd  # or [ecx+0x53], edx; push eax; call [0x5054A04C] 
0x50503308  # or [ebx+0x51], edx; push eax; call [0x5054A04C] 
0x5050995d  # or [edi+0x53], edx; push eax; call [0x5054A04C] 
0x50526759  # or [edx-0x01], esp; inc [ebx-0x597CEF3C]; sub al, 0x01; add byte [eax], al; add byte [esi+0x5F], bl; ret 
0x50537781  # or [edx+0x00], ebp; push eax; call [0x5054A02C]; pop ebp; ret 
0x50546744  # or [edx+0x00], ebp; push eax; call [0x5054A02C]; jmp [0x5055DF84] 
0x50537781  # or [edx+0x00], ebp; push eax; call [0x5054A02C] 
0x50508f08  # or [edx+0x08], ebp; push ebx; push [esi+0x20]; push eax; call edi 
0x50501108  # or [edx-0x01], ebp; push esi; call [0x5054A18C]; pop edi; pop esi; ret 
0x50501108  # or [edx-0x01], ebp; push esi; call [0x5054A18C] 
0x50513e72  # or [edx-0x01], ebp; push edi; call [0x5054A18C] 
0x50525922  # or [ebx+0x40FF810C], eax; cmp eax, [ecx]; jl 0x5052591D; lea eax, [ecx+eax*4]; dec [eax]; ret 
0x5053d415  # or [ebx-0x3EC4EB40], eax; jc 0x5053D408; xor eax, eax; pop ebp; ret 
0x5051c322  # or [ecx+0x0001CC8E], ecx; add byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x50515d30  # or [ebx-0x00AFA8F8], ecx; push ecx; sbb al, 0x59; pop ecx; mov [esi+0x000028F0], edi; ret 
0x5053c3e5  # or [ebx+0x01B60F0A], ecx; inc ecx; mov [edx], ecx; ret 
0x5052a974  # or [ebp-0x00010F7B], ecx; call [eax+0x0F] 
0x50508601  # or [ebp+0x00011486], ecx; add byte [ecx+0x75FFFC45], cl; cld; call edi 
0x5054688c  # or edi, edi; xor eax, 0x5055E07C; mov [0x5055DFCC], eax; call esi 
0x5054282b  # or edi, edi; jo 0x50542833; call [0x5054A240] 
0x50509b2a  # or edi, edi; jne 0x50509B3E; call esi 
0x5050839a  # or edi, edi; jne 0x505083B2; call ebx 
0x505083a9  # or edi, edi; jne 0x505083C5; call ebx 
0x505083b8  # or edi, edi; jne 0x505083D8; call ebx 
0x505437f4  # or edi, edi; jne 0x50543814; call esi 
0x505473a6  # or edi, edi; jne 0x50547392; call [0x5055DF88] 
0x505078ef  # or edi, edi; jne 0x505078EB; call [0x5055CA20] 
0x50506162  # or edi, edi; jne 0x50506162; call [0x5054A070] 
0x5050ed68  # or edi, edi; jne 0x5050ED68; call [0x5054A0E0] 
0x5052df87  # or edi, edi; inc [ebx+0x5E5F0CC4]; pop ebp; ret 
0x505419b4  # or edi, edi; dec ecx; ret 
0x50504f1d  # or al, byte [eax]; add byte [edx], cl; add byte [eax], al; add byte [ebx+0x5B5F5EC3], cl; leave; retn 0x000C 
0x5050eaa5  # or al, byte [eax]; add byte [eax-0x73], dl; inc ebp; lodsb; push eax; call [0x5054A04C] 
0x5050cd89  # or al, byte [eax]; add byte [eax-0x17], dl; ret 
0x505033b6  # or al, byte [eax]; add byte [ebx-0x15], dl; retn 0x1468 
0x50502988  # or al, byte [eax]; add byte [esi+0x57], dl; call [0x5054A04C]; push edi; call [0x5054A03C] 
0x50502988  # or al, byte [eax]; add byte [esi+0x57], dl; call [0x5054A04C] 
0x505033de  # or al, byte [eax]; add byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0010 
0x5050d60e  # or al, byte [eax]; add byte [ebp+0x2B0474C0], al; shr ebx, 0x0C; call [0x5054A188] 
0x50548c4d  # or al, byte [eax]; add byte [ebp-0x00F18B40], al; jne 0x50548BF3; call [0x5054A008] 
0x5050dd74  # or al, byte [eax]; add byte [eax-0x797503BB], cl; retn 0x000A 
0x50505b24  # or al, byte [eax]; add byte [ecx+0x5D39F445], cl; adc byte [esi+ebx-0x01], dh; jne 0x50505B42; call edi 
0x50505b48  # or al, byte [eax]; add byte [ebx+0x39C033D8], cl; inc ebp; or byte [esp+ebx-0x01], dh; jne 0x50505B5F; call edi 
0x50531442  # or al, byte [ebx]; inc [eax]; ret 
0x5053c3e7  # or cl, byte [edi]; mov dh, 0x01; inc ecx; mov [edx], ecx; ret 
0x50548f2a  # or cl, byte [edi]; mov esi, 0x02448DC0; ror byte [ecx+0x458B2045], 1; sbb al, 0x8A; add byte [edx], bh; ret 
0x50524f99  # or dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x50516f9a  # or dh, byte [ebx]; call [ebx+0x47] 
0x505454cb  # or bh, byte [ebx]; retn 0x0472 
0x50534019  # or bh, byte [ebx]; ret 
0x50545c10  # or bh, byte [ebx]; sal [ebp+0x0F], 1; or eax, 0x00008000; ret 
0x5053910e  # or bh, byte [0xC000001D]; je 0x50539119; xor eax, eax; ret 
0x50548e3c  # or al, byte [ecx-0x77]; dec ebp; sbb al, 0x8A; add [edx], edi; ret 
0x505015b8  # or dl, byte [eax+0x6A]; cld; push ecx; call [0x5054A284] 
0x50507766  # or dl, byte [esi+0x50]; call [0x5055CA08] 
0x5050e9a3  # or dl, byte [esi-0x18]; fisubr [edi+edi*8]; inc [ebp-0x74FB8A40]; ret 
0x50548f6a  # or bl, byte [ecx+0x2B]; retn 0xF799 
0x505490ed  # or bl, byte [ebx+0x2B]; retn 0xF799 
0x50541c9b  # or bl, byte [esi+eax*8+0x45]; or eax, [eax]; call [0x5054A1A0] 
0x50507ef8  # or ch, byte [edx+0x0A]; call [0x5054A048] 
0x5050483e  # or dh, byte [edx+0x12]; call [0x5054A188] 
0x5050b163  # or dh, byte [ebp+0x0A]; mov [ebx+0x000032D8], 0x00000001; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1c6  # or dh, byte [ebp+0x0A]; mov [ebx+0x000032D8], 0x00000001; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x50524859  # or al, byte [ebx+0x7503147D]; add al, 0x83; dec ebp; clc; call [edi+0x33] 
0x50535fe6  # or al, byte [ebx-0x00A9DF3A]; adc eax, 0x5054A020; pop esi; pop ebp; ret 
0x50532fb3  # or al, byte [eax+eax*8+0x5B5EF375]; pop edi; xor eax, eax; ret 
0x50532e34  # or cl, byte [eax+0x01C78307]; sub edx, 0x01; jne 0x50532E35; mov eax, [esp+0x08]; pop edi; ret 
0x50539a38  # or cl, byte [ebx-0x3F7AFBBD]; je 0x50539A43; push eax; call esi 
0x5052da1f  # or cl, byte [ebx+0x088B0846]; push eax; call [ecx+0x10] 
0x5052dc23  # or cl, byte [ebx+0x018B0849]; push ecx; call [eax+0x20]; pop ecx; ret 
0x5052dc23  # or cl, byte [ebx+0x018B0849]; push ecx; call [eax+0x20] 
0x50516b48  # or cl, byte [ebx+0x0108244C]; mov byte [ecx+eax], ah; add byte [eax], al; ret 
0x50516abe  # or cl, byte [ebx-0x76F7DBB4]; mov byte [ecx+eax], dl; add byte [eax], al; ret 
0x50537f1b  # or cl, byte [ebx-0x2708B73D]; sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x5054A1BC] 
0x5051fcca  # or bl, byte [ecx+0x0307E283]; retn 0xF8C1 
0x50509981  # or al, bh; xchg byte [eax+0x01000000], bl; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; retn 0x0008 
0x50533b2a  # or ah, ah; jne 0x50533B00; mov edi, edi; xor eax, eax; ret 
0x50543c34  # or ch, al; xor eax, 0xA3FFFFFF; push 0x3B5055D5; ret 
0x5051a9f6  # or ch, al; retn 0xFFA9 
0x5052f36d  # or dh, dh; inc esi; and byte [edx], al; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x5054689b  # or bh, bh; xor eax, 0x5055E07C; mov [0x5055DFD4], eax; call esi 
0x50544c60  # or bh, bh; inc ebp; mov ah, 0x2A; ret 
0x50537b56  # or bh, bh; jne 0x50537B62; call [0x50550E88] 
0x5050838a  # or bh, bh; jne 0x5050839E; call ebx 
0x5051c3e5  # or eax, [eax]; add byte [edi+0x5E], bl; pop ebp; ret 
0x50505a18  # or eax, [eax]; add byte [ecx+0x5D39F445], cl; adc byte [esi+ebx-0x01], dh; jne 0x50505A36; call edi 
0x50505a3c  # or eax, [eax]; add byte [ebx+0x39C033D8], cl; inc ebp; or byte [esp+ebx-0x01], dh; jne 0x50505A53; call edi 
0x50541c9f  # or eax, [eax]; call [0x5054A1A0] 
0x5050e50f  # or eax, [ebx]; fisttp word [ebx+0x0BD0F7C2]; ret 
0x50548921  # or ecx, [ecx]; add byte [eax], al; mov eax, esi; pop esi; pop ebp; retn 0x0010 
0x505374ef  # or ebx, [eax]; add byte [eax], al; pop ecx; and [ebp-0x04], 0x00000000; push [esi+0x68]; call [0x5054A15C] 
0x5051ea68  # or edi, [ecx]; add [eax], eax; add ebp, 0x00001F90; leave; ret 
0x50519c99  # or edi, [ebx]; retn 0x0775 
0x505064ce  # or edx, [eax-0x01]; adc eax, 0x5054A078; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x5051e341  # or edx, [ebx+0x56]; call [0x5054A09C] 
0x50507312  # or edx, [esi-0x39]; inc ebp; add byte [eax], 0x02; add byte [eax], al; call [0x5055CA30] 
0x5051e23c  # or edx, [edi+0x56]; call [0x5054A09C] 
0x50501129  # or ebp, [eax+0x48]; leave; push ebp; push eax; call [0x5054A020]; ret 
0x50501129  # or ebp, [eax+0x48]; leave; push ebp; push eax; call [0x5054A020] 
0x5050114a  # or ebp, [eax+0x48]; leave; push ebp; push eax; call [0x5054A024]; ret 
0x5050114a  # or ebp, [eax+0x48]; leave; push ebp; push eax; call [0x5054A024] 
0x5050159f  # or ebp, [eax+0x60]; leave; push ebp; push eax; call [0x5054A0D4] 
0x50508f39  # or ebp, [edx+0x01]; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f4a  # or ebp, [edx+0x02]; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f5b  # or ebp, [edx+0x04]; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f17  # or ebp, [edx+0x10]; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f28  # or ebp, [edx+0x20]; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50501106  # or edi, [ebp+0x09]; push 0xFFFFFFFF; push esi; call [0x5054A18C] 
0x5052d813  # or ecx, [eax-0x00B275F8]; mov byte [eax+0x01], cl; pop edi; leave; ret 
0x50526c6f  # or ecx, [ebx+0x53038B1B]; call [eax+0x14] 
0x505167bf  # or ecx, [ebx-0x3F7AB3C0]; je 0x505167DB; mov eax, [eax+0x14]; ret 
0x505167cf  # or ecx, [ebx-0x3F7AA7C0]; je 0x505167DB; mov eax, [eax+0x1C]; ret 
0x5051681c  # or ecx, [ebx-0x3F7AA7C0]; je 0x50516828; mov eax, [eax+0x24]; ret 
0x5053c8c6  # or ecx, [ebp-0x0001CF7B]; call [eax-0x73]; test [esi+edi*8-0x01], edi; call [eax+0x43] 
0x5053c8c6  # or ecx, [ebp-0x0001CF7B]; call [eax-0x73] 
0x5050e319  # or ebp, [ecx-0x3EB42131]; ret 
0x50515702  # or eax, ecx; pop esi; ret 
0x50546de9  # or eax, ecx; retn 0x0004 
0x50546de7  # or eax, edx; or eax, ecx; retn 0x0004 
0x50545b74  # or eax, edx; pop esi; test ebx, 0x00040000; je 0x50545B84; or eax, 0x00001000; ret 
0x5053331e  # or eax, edi; pop edi; pop esi; pop ebp; ret 
0x50536768  # or ecx, eax; mov ecx, [esp+0x0C]; jne 0x50536779; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x505090ad  # or ecx, edx; push ecx; push [ebp+0x08]; push [esi+0x24]; push eax; call [0x5054A254] 
0x5052ba8a  # or edx, eax; mov [ecx+0x0000104C], edx; pop esi; ret 
0x5052a816  # or edx, eax; mov [ecx+0x00000084], edx; pop esi; ret 
0x5050e1e5  # or edx, esi; pop es; aaa; ret 
0x5052ba85  # or edx, esi; shl edx, 0x08; or edx, eax; mov [ecx+0x0000104C], edx; pop esi; ret 
0x5052a811  # or edx, esi; shl edx, 0x08; or edx, eax; mov [ecx+0x00000084], edx; pop esi; ret 
0x5052528a  # or esi, edx; jne 0x50525278; pop esi; ret 
0x505466fc  # or edi, edi; adc eax, 0x5054A184; mov [0x50556FF8], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x505468aa  # or edi, edi; xor eax, 0x5055E07C; mov [0x5055E114], eax; call esi 
0x50544cba  # or edi, edi; inc ebp; mov ah, 0x2A; ret 
0x50509513  # or edi, edi; jne 0x50509527; push esi; push ebx; call [0x5054A04C] 
0x5053622d  # or al, 0x00; add byte [eax], al; xor eax, eax; pop esi; pop ebp; ret 
0x50533a99  # or al, 0x00; add byte [eax], al; xor eax, eax; pop esi; ret 
0x50531827  # or al, 0x00; add byte [eax], al; mov [ebp-0x18], edi; call ebx 
0x505316e9  # or al, 0x00; add byte [ecx+0x000188C5], al; add cl, cl; ret 
0x5052b9ea  # or al, 0x00; add byte [ecx+0x44893A0C], cl; cmp al, byte [esp+edi*2+0x00]; rcr byte [edi+0x5B], cl; leave; ret 
0x50538e6d  # or al, 0x00; add byte [ebx-0x743CFBC0], cl; call [ebp-0x75] 
0x5050a904  # or al, 0x00; je 0x5050AABA; push [ebp+0x0C]; mov ebx, [0x5054A03C]; call ebx 
0x50501a3b  # or al, 0x00; push ebx; je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x50549125  # or al, 0x00; push esi; je 0x50549164; push [ebp+0x0C]; call [0x5054A03C] 
0x50546726  # or al, 0x00; push 0x5055E080; call [0x5054A0D4] 
0x50501096  # or al, 0x00; je 0x505010A9; push [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x50546b5d  # or al, 0x00; je 0x50546BA5; push [ebp+0x0C]; call [0x5054A03C] 
0x5053f00f  # or al, 0x00; jnle 0x5053EFFA; pop esi; pop ebp; ret 
0x5053600f  # or al, 0x00; add byte [eax], 0x00; pop ecx; pop ebp; ret 
0x50547c79  # or al, 0x00; mov eax, [0x5055E108]; ret 
0x50546b44  # or al, 0x00; jmp eax 
0x50502efd  # or al, 0x01; add byte [eax], al; mov [eax+0x00000110], edx; pop esi; or eax, 0xFFFFFFFF; retn 0x000C 
0x50516a58  # or al, 0x01; add byte [eax], al; ret 
0x50515822  # or al, 0x01; add [eax], eax; pop ecx; pop ecx; leave; ret 
0x50548d3c  # or al, 0x01; je 0x50548DCC; lea eax, [esi+0x34]; push eax; call [0x5054A03C] 
0x505263f3  # or al, 0x01; xor eax, 0x5055D440; pop esi; pop ebx; ret 
0x50535e52  # or al, 0x02; add byte [eax], al; pop ecx; pop ecx; ret 
0x505162ae  # or al, 0x03; inc ebp; adc al, 0x50; push ebx; call [esi+0x08] 
0x50538594  # or al, 0x03; retn 0xC83B 
0x5050e586  # or al, 0x03; retn 0x4689 
0x5053117a  # or al, 0x03; retn 0x558B 
0x50507d4e  # or al, 0x03; ret 
0x5051ce5b  # or al, 0x04; xor eax, eax; inc eax; pop esi; ret 
0x5050c8d2  # or al, 0x05; fdiv qword [edx]; add byte [eax], al; push eax; call [0x5054A04C] 
0x5051fad4  # or al, 0x08; add [esi+0x10], 0xFFFFFFF8; cmp [esi+0x10], 0x08; jnl 0x5051FAA7; ret 
0x5050cd4f  # or al, 0x0B; ret 
0x50537aaa  # or al, 0x0F; push ebp; push eax; call [0x5054A1B0] 
0x50507065  # or al, 0x0F; test byte [ecx+eax], bl; add byte [eax], al; push [ebp+0x0C]; call ebx 
0x50519956  # or al, 0x2B; ret 
0x5051ceb9  # or al, 0x33; rol byte [eax+0x5E], 0xC3; and [edx], 0x00000000; xor eax, eax; pop esi; ret 
0x50512fbf  # or al, 0x33; rol byte [eax+0x5F], 0x5E; pop ebx; leave; retn 0x0004 
0x5050f64b  # or al, 0x33; rol byte [eax-0x15], 0x29; call [0x5054A0E4] 
0x5052e438  # or al, 0x33; fstp tword [ebx]; ret 
0x50508be0  # or al, 0x38; add byte [eax], al; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x5054361c  # or al, 0x39; push ecx; or byte [ebp+0x05], dh; mov eax, 0x00000001; ret 
0x5050edda  # or al, 0x39; pop ebp; cld; je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8] 
0x5051e1f1  # or al, 0x3B; inc ebp; adc al, 0x75; lock xor eax, eax; pop ebp; ret 
0x50545cdd  # or al, 0x3B; retn 0x840F 
0x50524826  # or al, 0x3B; retn 0x0475 
0x505273e5  # or al, 0x3B; retn 0x1B7D 
0x5050ca2b  # or al, 0x3B; ret 
0x50540ed0  # or al, 0x3B; fbstp [ebp+0x61]; push esi; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x5050c39d  # or al, 0x3B; je 0x5050C3BD; push esi; call [0x5054A03C] 
0x50527ebf  # or al, 0x40; add byte [eax], al; leave; ret 
0x50512215  # or al, 0x40; shl eax, 0x0C; push eax; push 0x00000042; call [0x5054A194] 
0x50513e16  # or al, 0x40; ret 
0x505391b3  # or al, 0x48; je 0x505391BA; xor eax, eax; ret 
0x5051e3a1  # or al, 0x48; je 0x5051E3A9; or eax, 0xFFFFFFFF; ret 
0x5050cb95  # or al, 0x50; push edi; call [0x5054A038] 
0x50512219  # or al, 0x50; push 0x00000042; call [0x5054A194] 
0x50527583  # or al, 0x50; mov byte [esi+0x0D], cl; mov ecx, [edi]; push edi; call [ecx+0x08] 
0x5052dc4b  # or al, 0x50; call [ecx]; add esp, 0x18; pop ebp; ret 
0x5052dc4b  # or al, 0x50; call [ecx] 
0x5050524b  # or al, 0x50; call [0x5054A050] 
0x50537fd1  # or al, 0x50; call [0x5054A154] 
0x50542594  # or al, 0x50; call [0x5054A0EC]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x505425AB; call [0x5054A0E4] 
0x50542594  # or al, 0x50; call [0x5054A0EC] 
0x50526702  # or al, 0x50; call [ecx+0x08]; add esp, 0x0C; ret 
0x50526702  # or al, 0x50; call [ecx+0x08] 
0x505360f0  # or al, 0x50; call [ebp+0x08]; add esp, 0x10; pop edi; leave; ret 
0x505360f0  # or al, 0x50; call [ebp+0x08] 
0x5051e3b9  # or al, 0x50; push [esp+0x14]; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC]; call [0x5054A0E4] 
0x5051e3b9  # or al, 0x50; push [esp+0x14]; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC] 
0x5052487f  # or al, 0x50; push [ebp+0x0C]; call [ebp+0x10] 
0x505010b7  # or al, 0x52; push ebp; push eax; push esi; call edi 
0x50501055  # or al, 0x52; push ebp; push eax; push edi; call esi 
0x50501117  # or al, 0x52; push ebp; push eax; push 0x5055520C; call [0x5054A18C] 
0x5050111c  # or al, 0x52; push ebp; push eax; call [0x5054A18C] 
0x50515f49  # or al, 0x53; push eax; call [esi+0x08] 
0x50508249  # or al, 0x53; add eax, 0x18; push eax; push edi; call [0x5055CA2C] 
0x5050cfa6  # or al, 0x53; mov ebx, [0x5054A04C]; call ebx 
0x5054212c  # or al, 0x53; call [0x5054A020]; test byte [esi+0x04], 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x5054212c  # or al, 0x53; call [0x5054A020] 
0x5050cf87  # or al, 0x53; call [0x5054A04C] 
0x5051629d  # or al, 0x53; call [esi+0x04]; push [esi+0x0C]; push [ebp+0x14]; push ebx; call [esi+0x04] 
0x50516259  # or al, 0x53; call [esi+0x04] 
0x50540336  # or al, 0x53; push [ebp-0x0C]; push 0x00000000; push 0x0000FDE9; call [0x5054A240] 
0x5053635f  # or al, 0x56; push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x5050787c  # or al, 0x56; push esi; call edi 
0x5050d977  # or al, 0x56; test ebx, ebx; je 0x5050D988; push ebx; call [0x5054A03C] 
0x5052e4d7  # or al, 0x56; mov eax, [esi]; call [eax+0x04] 
0x5051355c  # or al, 0x56; call [0x5054A04C] 
0x50538442  # or al, 0x56; call [0x5054A1CC] 
0x5052dcd6  # or al, 0x56; call [eax+0x08]; add esp, 0x10; pop esi; pop ebp; ret 
0x5052dcd6  # or al, 0x56; call [eax+0x08] 
0x5051079a  # or al, 0x56; call edi 
0x50533df7  # or al, 0x57; push ebx; call [ebp+0x14] 
0x50515c64  # or al, 0x57; call [edi+0x00000248] 
0x505499fe  # or al, 0x5B; pop ebp; ret 
0x50516391  # or al, 0x5B; leave; ret 
0x5051ec17  # or al, 0x5D; ret 
0x50517cf5  # or al, 0x5E; pop ebx; leave; ret 
0x5052daf1  # or al, 0x5E; pop ebp; ret 
0x505151b2  # or al, 0x5E; ret 
0x5052d4ac  # or al, 0x5E; leave; ret 
0x5051bfce  # or al, 0x5F; pop ebx; pop esi; pop ebp; ret 
0x5050e597  # or al, 0x5F; pop ebx; leave; ret 
0x5051a61f  # or al, 0x5F; pop esi; pop ebx; pop ebp; ret 
0x5050f463  # or al, 0x5F; pop esi; pop ebx; leave; retn 0x0004 
0x505199fa  # or al, 0x5F; pop esi; pop ebx; leave; ret 
0x5052df8c  # or al, 0x5F; pop esi; pop ebp; ret 
0x5051d75c  # or al, 0x5F; mov [esi+0x10], edx; mov eax, esi; pop esi; ret 
0x50525e57  # or al, 0x5F; mov eax, esi; pop esi; ret 
0x5052f73b  # or al, 0x5F; ret 
0x5052d5a0  # or al, 0x5F; leave; ret 
0x50506580  # or al, 0x68; add byte [edx], al; add byte [eax], al; push eax; call [0x5054A190] 
0x5050109d  # or al, 0x68; cmp al, 0xC9; push ebp; push eax; call [0x5054A18C] 
0x5050a714  # or al, 0x68; ret 
0x50537bae  # or al, 0x6A; add byte [edx+0x02], ch; push 0x00000000; call [0x5055E270] 
0x50546b8c  # or al, 0x6A; add byte [ebp-0x0004037B], cl; call [eax-0x75] 
0x5050103a  # or al, 0x6A; add [edx+0x00], ebp; call [0x5054A240]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x5050103a  # or al, 0x6A; add [edx+0x00], ebp; call [0x5054A240] 
0x505414a1  # or al, 0x6A; add edi, edi; jne 0x505414BF; call esi 
0x50508297  # or al, 0x6A; add eax, [ebx+0x575030C0]; call [0x5055CA2C] 
0x5050ca85  # or al, 0x6A; inc eax; push eax; lea eax, [edi+0x00000200]; push eax; call ebx 
0x5050caa0  # or al, 0x6A; inc eax; push eax; lea eax, [edi+0x00000240]; push eax; call ebx 
0x50537b34  # or al, 0x72; in al, dx; pop esi; pop ebp; ret 
0x50540e1b  # or al, 0x72; hlt; pop ebp; ret 
0x50522906  # or al, 0x74; or byte [ebx], bh; retn 0x0474 
0x5050a226  # or al, 0x74; or eax, 0x561075FF; push [ebp+0x0C]; call [0x5054A04C] 
0x50505e89  # or al, 0x74; sbb al, 0xFF; jne 0x50505E9B; call esi 
0x50503afa  # or al, 0x74; sbb al, 0xFF; jne 0x50503B0C; call edi 
0x50504c18  # or al, 0x74; and bh, bh; jne 0x50504C2A; call [0x5054A040] 
0x505379c9  # or al, 0x74; daa; cmp [0x5055D554], eax; jbe 0x505379F3; push esi; call [0x5054A048] 
0x505071a6  # or al, 0x74; sub edi, edi; jne 0x505071B8; call ebx 
0x505012af  # or al, 0x74; sub bh, byte [ebx]; clc; je 0x505012D2; push edi; call [0x5054A03C] 
0x50506fcf  # or al, 0x74; insd; push [ebp+0x0C]; call ebx 
0x5050be0f  # or al, 0x75; add al, 0x66; mov [esi+0x30], eax; push 0x5054A934; push edi; call [0x5054A0B8] 
0x50538d49  # or al, 0x75; adc dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x5053fc08  # or al, 0x75; sbb eax, 0xFFA585E8; call [ebx+0x53] 
0x505096fe  # or al, 0x76; push esp; xor dl, byte [eax]; ret 
0x505207cf  # or al, 0x76; push esp; xor dl, byte [eax]; mov [eax+0x10], 0xC3D2E1F0; ret 
0x5051eabb  # or al, 0x7D; pop es; mov [eax+0x10], ecx; xor eax, eax; inc eax; ret 
0x50524351  # or al, 0x7E; push 0x2BFFCA83; rol [ebx], 1; retn 0x463B 
0x5053e9a6  # or al, 0x7F; add al, 0x3B; ret 
0x50539393  # or al, 0x80; dec esp; push cs; sbb eax, 0x80D18A10; retn 0xEB20 
0x50525924  # or al, 0x81; inc [eax+0x3B]; add [ecx+esi*8-0x73], edi; add al, 0x81; dec [eax]; ret 
0x505343ff  # or al, 0x83; jnl 0x50534417; add bh, byte [ecx+ecx*8-0x7D]; jnl 0x5053441D; and al, 0x7F; ret 
0x50536019  # or al, 0x83; shl byte [eax], 0x50; call [0x5054A020]; pop ebp; ret 
0x50536019  # or al, 0x83; shl byte [eax], 0x50; call [0x5054A020] 
0x50508327  # or al, 0x83; shl byte [eax], 0x50; call edi 
0x50533992  # or al, 0x83; les ecx, [ebx+edi]; ret 
0x5052daee  # or al, 0x83; les ecx, [esi+ebx*2]; pop ebp; ret 
0x5051537e  # or al, 0x83; les ecx, [ecx+ecx*4]; xor byte [ebx+0x5B5E5FC7], cl; leave; ret 
0x5053242f  # or al, 0x83; loopne 0x50532436; add ecx, eax; jmp [0x50532448+eax*4] 
0x5053279f  # or al, 0x83; loopne 0x505327A6; add ecx, eax; jmp [0x505327B8+eax*4] 
0x50532933  # or al, 0x83; loopne 0x5053293A; sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325c3  # or al, 0x83; loopne 0x505325CA; sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5051741d  # or al, 0x85; ror byte [edi], 0x84; retn 0xFFFE 
0x50518067  # or al, 0x85; sal byte [eax+ecx-0x75], 0x4F; pop eax; push eax; call [ecx+0x04] 
0x50526ff9  # or al, 0x85; sal byte [edx+ecx-0x48], 0xC0; retn 0x5054 
0x5050ca9c  # or al, 0x85; sal byte [esp+ecx+0x6A], 0x40; push eax; lea eax, [edi+0x00000240]; push eax; call ebx 
0x50503314  # or al, 0x85; sal byte [edi+ecx+0x53], 0x50; lea eax, [esi+0x000008A0]; push eax; call [0x5054A04C] 
0x5051d058  # or al, 0x85; sal byte [ebp+0x02], 0xC9; ret 
0x50524c50  # or al, 0x85; sal byte [esp+eax-0x75], cl; retn 0x09EB 
0x50505299  # or al, 0x85; div byte [edx+ecx+0x56]; call ebx 
0x50515c70  # or al, 0x85; div byte [esp+edx+0x56]; push 0x00000000; push 0x00000000; push edi; call [edi+0x00000244] 
0x50509b14  # or al, 0x85; push [edi+eax+0x57]; call esi 
0x50537979  # or al, 0x85; push [ebp+0x27]; cmp [0x5055D554], eax; jbe 0x505379A5; push esi; call [0x5054A048] 
0x5051cd24  # or al, 0x88; inc esp; adc edi, edi; pop edi; ret 
0x5051cd77  # or al, 0x88; inc esp; adc edi, edi; ret 
0x50525e2e  # or al, 0x88; dec [ecx-0x7B]; leave; jnle 0x50525E2D; pop esi; ret 
0x505333f7  # or al, 0x89; add [edi+0x5E], ebx; pop ebp; ret 
0x50516a48  # or al, 0x89; push es; pop esi; ret 
0x5051cbb5  # or al, 0x89; push es; ret 
0x5051c8ac  # or al, 0x89; adc byte [ebx+0x08488B01], cl; lea eax, [ecx+eax+0x0C]; mov ecx, [esp+0x08]; mov [ecx], eax; ret 
0x5051e74b  # or al, 0x89; sbb byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x50544590  # or al, 0x89; sbb [edi+0x5B], ebx; leave; ret 
0x50515381  # or al, 0x89; xor byte [ebx+0x5B5E5FC7], cl; leave; ret 
0x50525140  # or al, 0x89; aaa; mov eax, edi; pop edi; ret 
0x5050ddc1  # or al, 0x89; cmp ebx, [esi+0x5B]; pop edi; leave; retn 0x0008 
0x5050ef1e  # or al, 0x89; inc ebp; hlt; call [0x5054A0D8] 
0x50506a0f  # or al, 0x89; push eax; or al, 0x8B; xor [ebx-0x397CEFB9], ecx; sub byte [ebp+0x503774C0], al; call ebx 
0x505219e7  # or al, 0x89; jle 0x50521A3B; pop edi; pop esi; leave; ret 
0x505312a2  # or al, 0x89; jle 0x50531306; pop edi; pop esi; leave; ret 
0x50516b1f  # or al, 0x89; mov byte [ecx+eax], bl; add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x5053a869  # or al, 0x8B; add byte [ebx], al; ret 
0x50506a45  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506A5C; call [0x5054A03C] 
0x50506ca2  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506CB9; call [0x5054A040] 
0x50506a83  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506A9E; call [0x5054A03C] 
0x50506ce0  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506CFB; call [0x5054A040] 
0x50506ac1  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506AE0; call [0x5054A03C] 
0x50506d1e  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506D3D; call [0x5054A040] 
0x50506aff  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506B22; call [0x5054A03C] 
0x50506d5c  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506D7F; call [0x5054A040] 
0x50506b3d  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506B64; call [0x5054A03C] 
0x50506d9a  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506DC1; call [0x5054A040] 
0x50506b79  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506BA4; call [0x5054A03C] 
0x50506dd6  # or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506E01; call [0x5054A040] 
0x5053a955  # or al, 0x8B; add bh, bh; xor al, 0x18; call [0x5054A208] 
0x5053a91d  # or al, 0x8B; add bh, bh; xor al, 0x18; call [0x5054A20C] 
0x5052e8bf  # or al, 0x8B; push es; push esi; call [eax+0x04] 
0x5051f23e  # or al, 0x8B; push es; push esi; call [eax+0x08] 
0x5052dae8  # or al, 0x8B; push es; push esi; call [eax+0x0C] 
0x5051f078  # or al, 0x8B; push es; push edi; push edx; push esi; call [eax+0x04] 
0x50526bab  # or al, 0x8B; push es; push edi; push esi; call [eax+0x1C] 
0x5051f21e  # or al, 0x8B; push es; push edi; push edi; push esi; call [eax+0x04] 
0x5053164d  # or al, 0x8B; push es; push 0x00000000; push 0x00001F40; push esi; call [eax+0x04] 
0x5052ef7b  # or al, 0x8B; push es; push 0x00000000; push 0x00001F41; push esi; call [eax+0x04] 
0x50526cbc  # or al, 0x8B; pop es; push edi; call [eax+0x20] 
0x50531557  # or al, 0x8B; pop es; push 0x00001F40; push edi; call [eax+0x04] 
0x5052e22d  # or al, 0x8B; pop es; push 0x00000000; push 0x00001F40; push edi; call [eax+0x04] 
0x5052e2d4  # or al, 0x8B; pop es; push 0x00000000; push 0x00001F41; push edi; call [eax+0x04] 
0x505266fc  # or al, 0x8B; or bh, bh; je 0x50526726; or al, 0x50; call [ecx+0x08] 
0x5051f1ad  # or al, 0x8B; push cs; push eax; push esi; call [ecx+0x0C] 
0x5051f20f  # or al, 0x8B; push cs; push edi; push eax; push esi; call [ecx+0x04] 
0x5051cd1f  # or al, 0x8B; push cs; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; pop edi; ret 
0x5051cd72  # or al, 0x8B; push cs; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; ret 
0x5050a90e  # or al, 0x8B; sbb eax, 0x5054A03C; call ebx 
0x50506a12  # or al, 0x8B; xor [ebx-0x397CEFB9], ecx; sub byte [ebp+0x503774C0], al; call ebx 
0x50509ed8  # or al, 0x8B; xor eax, 0x5054A260; lea eax, [ebp-0x44]; push 0x5054A358; push eax; call esi 
0x5052f719  # or al, 0x8B; cmp eax, 0x5054A060; call edi; push [esi+0x08]; call edi 
0x5052f719  # or al, 0x8B; cmp eax, 0x5054A060; call edi 
0x50531182  # or al, 0x8B; inc ecx; adc byte [ebx], al; retn 0x558B 
0x5050dcc2  # or al, 0x8B; inc ebp; or byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0008 
0x50539d3e  # or al, 0x8B; inc ebp; or byte [ebx-0x1A740383], cl; pop ebp; ret 
0x5051c8b7  # or al, 0x8B; dec esp; and al, 0x08; mov [ecx], eax; ret 
0x5053e413  # or al, 0x8B; dec ebp; or byte [ecx+0x0CC48308], cl; leave; ret 
0x50545ccd  # or al, 0x8B; dec ebp; or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x5051fe50  # or al, 0x8B; dec ebp; sbb byte [ebx], al; retn 0x4589 
0x5051ce22  # or al, 0x8B; push ecx; add al, 0x2B; rol byte [ebx+0x037304FA], 1; xor eax, eax; ret 
0x50545d91  # or al, 0x8B; retn 0xF633 
0x505091a0  # or al, 0x8B; retn 0x708B 
0x50507410  # or al, 0x8B; ret 
0x50546335  # or al, 0x8D; inc ebp; aam 0x50; mov [ebp-0x2C], esi; call [0x5054A054] 
0x50503441  # or al, 0x8D; inc ebp; aam 0x50; mov [ebp-0x2C], edi; call [0x5054A054] 
0x505065f2  # or al, 0x8D; inc ebp; loopne 0x50506647; mov [ebp-0x20], esi; call [0x5054A054] 
0x505467f5  # or al, 0x8D; inc ebp; in al, 0x50; mov [ebp-0x1C], edi; call ebx 
0x5051f37a  # or al, 0x8D; inc esi; adc al, 0x33; call [eax-0x39] 
0x5050facc  # or al, 0x8D; xchg byte [eax+0x50000006], ah; call ebx 
0x5051039c  # or al, 0x8D; xchg byte [eax+0x50000006], ah; call edi 
0x5050ac2c  # or al, 0x8D; xchg byte [eax+0x50000008], ah; mov [esi+0x000000D0], ebx; mov [esi+0x00000AA8], ebx; mov byte [esi+0x000006A0], bl; call [0x5054A04C] 
0x5050d4f2  # or al, 0x8D; mov ds, ax; add byte [eax], al; add byte [ebx+0x5E118901], cl; retn 0x0008 
0x5052642d  # or al, 0xA3; sbb cl, ah; push ebp; push eax; ret 
0x5050c54b  # or al, 0xAC; push esp; push eax; push edi; call ebx 
0x5053d662  # or al, 0xBB; add byte [eax+0x51530000], al; call esi 
0x5053b978  # or al, 0xC7; inc esi; adc byte [ebx], cl; add byte [eax], al; add bl, ch; retn 0xFF8B 
0x50515153  # or al, 0xC9; ret 
0x505066b3  # or al, 0xCA; push ebp; push eax; call esi 
0x50504d67  # or al, 0xD6; add al, byte [eax]; leave; retn 0x0004 
0x505463d3  # or al, 0xDF; push ebp; push eax; call esi 
0x50546974  # or al, 0xE0; push ebp; push eax; call esi 
0x50502715  # or al, 0xE8; adc eax, 0x3B000449; ret 
0x5052478d  # or al, 0xE8; adc eax, 0x59FFFFFB; pop ecx; ret 
0x50502608  # or al, 0xE8; and cl, byte [edx+0x04]; add byte [ebx], bh; ret 
0x50522f3a  # or al, 0xE8; mov byte [edx], ch; add byte [eax], al; add esp, 0x0C; ret 
0x5050f4d8  # or al, 0xE8; cdq; add al, byte [eax]; leave; ret 
0x505050bc  # or al, 0xE8; retn 0xFFC5 
0x50537555  # or al, 0xE8; leave; push ss; add byte [eax], al; pop ecx; ret 
0x5052035c  # or al, 0xE9; daa; add [eax], eax; add byte [ebx-0x7AF0FD07], al; retn 0xFFFE 
0x5051e077  # or al, 0xEB; add cl, byte [ebx+0x5E5F5DC5]; ret 
0x5052f7e4  # or al, 0xEB; sub dl, byte [eax-0x73]; inc esi; sub byte [eax+0x56], dl; call [esi+0x00001030] 
0x5053e026  # or al, 0xEB; xor ch, byte [edx-0x0C]; call [0x5054A1BC] 
0x5050ec2b  # or al, 0xEB; xor ecx, [ebp-0x00030F7B]; call [eax-0x73] 
0x5053d474  # or al, 0xF6; retn 0x7501 
0x50534258  # or al, 0xF7; retn 0x0000 
0x5050c887  # or al, 0xFF; adc eax, 0x5054A038; push eax; call [0x5054A040] 
0x5051433e  # or al, 0xFF; adc eax, 0x5054A03C; pop ebp; retn 0x000C 
0x50514335  # or al, 0xFF; adc eax, 0x5054A04C; push [ebp+0x0C]; call [0x5054A03C]; pop ebp; retn 0x000C 
0x50509593  # or al, 0xFF; adc eax, 0x5054A04C; push [ebp+0x0C]; call [0x5054A03C] 
0x5053b19d  # or al, 0xFF; adc eax, 0x5054A0A8; cmp eax, 0xFFFFFFFF; jne 0x5053B1DD; call [0x5054A0E4] 
0x5050fbcf  # or al, 0xFF; adc eax, 0x5054A0A8; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5050FC2A; call [0x5054A0E4] 
0x505468b9  # or al, 0xFF; xor eax, 0x5055E07C; mov [0x5055DFDC], eax; call esi 
0x505430e5  # or al, 0xFF; jo 0x505430ED; call [0x5054A190] 
0x5052dcff  # or al, 0xFF; je 0x5052DD27; or byte [ebx+0x51FF5008], cl; or al, 0x59; pop ecx; ret 
0x5052dd2b  # or al, 0xFF; je 0x5052DD53; or byte [ebx+0x51FF5008], cl; adc byte [ecx+0x59], bl; ret 
0x50515c60  # or al, 0xFF; je 0x50515C88; or al, 0x57; call [edi+0x00000248] 
0x505470d9  # or al, 0xFF; jne 0x505470E5; push esi; call eax 
0x50547413  # or al, 0xFF; jne 0x5054741F; push 0xFFFFFFFF; call eax 
0x50539f5b  # or al, 0xFF; jne 0x50539F67; call [0x5054A200] 
0x505412d6  # or al, 0xFF; jne 0x505412E2; call [0x5054A108] 
0x50547139  # or al, 0xFF; jne 0x50547145; call [0x5055DF4C] 
0x505438f5  # or al, 0xFF; jne 0x50543901; call [0x5054A16C] 
0x505439af  # or al, 0xFF; jne 0x505439BB; call [0x5054A170] 
0x50546adb  # or al, 0xFF; jne 0x50546AE7; call [0x5055DFC0] 
0x5053a0cd  # or al, 0xFF; jne 0x5053A0D9; call [0x5054A1FC] 
0x50515117  # or al, 0xFF; jne 0x50515123; call [esi+0x04]; add esp, 0x18; leave; ret 
0x50515117  # or al, 0xFF; jne 0x50515123; call [esi+0x04] 
0x50546fb4  # or al, 0xFF; jne 0x50546FC0; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50546bd4  # or al, 0xFF; jne 0x50546BE0; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50541523  # or al, 0xFF; jne 0x5054152F; push [ebp+0x1C]; call [0x5054A22C] 
0x50547398  # or al, 0xFF; jne 0x505473A4; push [ebp-0x14]; call eax 
0x505092c2  # or al, 0xFF; jne 0x505092CE; push [ebp-0x04]; call [0x5054A250] 
0x50542a82  # or al, 0xFF; jne 0x50542A8E; push [ebp-0x04]; call eax 
0x50547060  # or al, 0xFF; jne 0x5054706C; call eax; push eax; call [0x5055E000] 
0x50547450  # or al, 0xFF; jne 0x5054745C; call eax; push eax; call [0x5055E00C] 
0x50547498  # or al, 0xFF; jne 0x505474A4; call eax; push eax; call [0x5055E014] 
0x505474d4  # or al, 0xFF; jne 0x505474E0; call eax; push eax; call [0x5055E01C] 
0x50547531  # or al, 0xFF; jne 0x5054753D; call eax; push eax; call [0x5055E030] 
0x50547615  # or al, 0xFF; jne 0x50547621; call eax; push eax; call [0x5055E068] 
0x50547651  # or al, 0xFF; jne 0x5054765D; call eax; push eax; call [0x5055E06C] 
0x5054768d  # or al, 0xFF; jne 0x50547699; call eax; push eax; call [0x5055E070] 
0x50546bdd  # or al, 0xFF; jne 0x50546BE9; call eax; push eax; call [0x5055DFDC] 
0x50546c19  # or al, 0xFF; jne 0x50546C25; call eax; push eax; call [0x5055DFE0] 
0x50546d07  # or al, 0xFF; jne 0x50546D13; call eax; push eax; call [0x5055DFE8] 
0x50546d54  # or al, 0xFF; jne 0x50546D60; call eax; push eax; call [0x5055DFF4] 
0x50546d9c  # or al, 0xFF; jne 0x50546DA8; call eax; push eax; call [0x5055DFF8] 
0x50546fba  # or al, 0xFF; jne 0x50546FC6; call eax; push eax; call [0x5055DFFC] 
0x50509096  # or al, 0xFF; jne 0x505090A2; call eax 
0x50539ebd  # or al, 0xFF; jne 0x50539EC9; call esi 
0x50516256  # or al, 0xFF; jne 0x50516266; push ebx; call [esi+0x04] 
0x5052dc7e  # or al, 0xFF; jne 0x5052DC8E; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5050784a  # or al, 0xFF; jne 0x5050785A; call [0x5054A03C] 
0x5052dcce  # or al, 0xFF; jne 0x5052DCE2; mov eax, [esi]; push [ebp+0x0C]; push esi; call [eax+0x08] 
0x5052dc43  # or al, 0xFF; jne 0x5052DC57; mov ecx, [eax]; push [ebp+0x0C]; push eax; call [ecx] 
0x505162a4  # or al, 0xFF; jne 0x505162BC; push ebx; call [esi+0x04] 
0x5051f138  # or al, 0xFF; jne 0x5051F0C4; mov eax, [esi]; push esi; call [eax+0x10] 
0x505052ad  # or al, 0xFF; jne 0x50505291; call ebx 
0x5050ef2c  # or al, 0xFF; jne 0x5050EF2C; call [0x5054A0D0] 
0x5050f0e5  # or al, 0xFF; jne 0x5050F0E5; call [0x5054A0D8] 
0x5050edab  # or al, 0xFF; jne 0x5050EDAB; call [0x5054A0DC] 
0x5052f4e1  # or al, 0xFF; jbe 0x5052F4ED; mov [esi+0x24], eax; mov eax, [ebp-0x08]; mov [esi+0x28], eax; call [0x5054A13C] 
0x5052e444  # or al, 0xFF; jbe 0x5052E494; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052e462  # or al, 0xFF; jbe 0x5052E4CA; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5052e165  # or al, 0xFF; jnbe 0x5052E1B5; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052e183  # or al, 0xFF; jnbe 0x5052E1EB; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x50536074  # or al, 0xFF; jnle 0x50536077; inc [ebx-0x17AEEF3F]; mov byte [0x5900002B], al; pop ebp; ret 
0x505071ab  # or al, 0xFF; rol [ebp-0x00DF8B40], cl; jne 0x505071C1; call ebx 
0x505435f9  # or eax, 0x00000000; add esp, 0x18; pop edi; pop esi; pop ebx; ret 
0x50545f2a  # or eax, 0x80000000; pop edi; pop esi; pop ebx; leave; ret 
0x50505286  # or eax, 0x00001000; mov [ebp+0x1C], eax; push ecx; call [0x5054A070] 
0x50545b7f  # or eax, 0x00001000; ret 
0x50532378  # or eax, 0x50555D00; jne 0x50532381; rep ret 
0x50545c15  # or eax, 0x00008000; ret 
0x50538a01  # or eax, 0x50556018; mov [eax], ecx; xor eax, eax; pop esi; pop ebp; ret 
0x5053898f  # or eax, 0x5055601C; mov [eax], ecx; xor eax, eax; pop esi; pop ebp; ret 
0x5050f31b  # or eax, 0x50FFFF1D; lea eax, [edi+0x00000400]; push eax; call [0x5054A038] 
0x505389c8  # or eax, 0x50556020; mov [eax], ecx; xor eax, eax; pop esi; pop ebp; ret 
0x50532b84  # or eax, 0x50556830; movzx eax, word [ecx+eax*2]; and eax, 0x00000103; pop ebp; ret 
0x50532d8e  # or eax, 0x50556830; movzx eax, word [ecx+eax*2]; and eax, 0x00000107; pop ebp; ret 
0x50532c89  # or eax, 0x50556830; movzx eax, word [ecx+eax*2]; and eax, 0x00000080; pop ebp; ret 
0x50532c05  # or eax, 0x50556830; movzx eax, word [ecx+eax*2]; and eax, 0x04; pop ebp; ret 
0x50522903  # or eax, 0x740C5639; or byte [ebx], bh; retn 0x0474 
0x50523a16  # or eax, 0x74145639; or byte [ebx], bh; retn 0x0474 
0x5052dfd8  # or eax, 0x42404240; cmp eax, [esp+0x04]; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x50545c1f  # or eax, 0x00008040; ret 
0x5053716d  # or eax, 0x83068940; enter 0x5BFF, 0x5F; pop esi; pop ebp; ret 
0x50526435  # or eax, 0x5055D448; ret 
0x50531cd3  # or eax, 0x4777E850; add byte [eax], al; pop ecx; mov [0x5055D530], ebx; push 0x5055D480; call [0x5054A19C] 
0x5050a0ca  # or eax, 0x04271868; sub al, 0xD5; jo 0x5050A0D3; inc [ebx+0x5E5FFFC8]; retn 0x0008 
0x50502f80  # or eax, 0x04271E68; sub al, 0x1F; loop 0x50502F89; inc [ebx+0x5E5FFFC8]; retn 0x0008 
0x505391b1  # or eax, 0x74480C74; add esi, [ebx]; rol bl, 0xB8; add al, 0x04; add byte [eax], al; ret 
0x5051c873  # or eax, 0x8A3FE083; add al, 0xB5; push esp; push eax; mov byte [ecx+0x03], al; ret 
0x50548815  # or eax, 0x0274F685; mov [esi], eax; xor eax, eax; inc eax; pop esi; retn 0x000C 
0x50532faa  # or eax, 0xC683068A; add [edx], edi; retn 0x0A74 
0x5052c6c9  # or eax, 0x10BD3C8B; call [eax+edx*2+0x33] 
0x5052dcfc  # or eax, 0xFF0C408B; je 0x5052DD27; or byte [ebx+0x51FF5008], cl; or al, 0x59; pop ecx; ret 
0x5052dd28  # or eax, 0xFF0C408B; je 0x5052DD53; or byte [ebx+0x51FF5008], cl; adc byte [ecx+0x59], bl; ret 
0x50516552  # or eax, 0x3B30468B; ret 
0x50519972  # or eax, 0x3B30478B; ret 
0x50537453  # or eax, 0x50555FB0; jmp [ecx+0x50555FB4] 
0x50512458  # or eax, 0x8B0000B8; inc ebp; adc byte [ebx+0x30FF28C4], al; call [0x5054A0D8]; call [0x5054A188] 
0x50512458  # or eax, 0x8B0000B8; inc ebp; adc byte [ebx+0x30FF28C4], al; call [0x5054A0D8] 
0x50520155  # or eax, 0x83FFFFC8; les ecx, [esi+ebx*2]; ret 
0x505426c5  # or eax, 0x5055DEDC; mov [eax], ecx; xor eax, eax; pop esi; pop ebp; ret 
0x505374ed  # or eax, 0x00180BE8; add byte [ecx-0x7D], bl; cld; add bh, bh; jbe 0x50537563; call [0x5054A15C] 
0x505470ae  # or eax, 0x50556FF8; or esi, 0xFFFFFFFF; cmp ecx, esi; jne 0x505470E7; push 0x0000276D; call [0x5055DF88] 
0x5053290e  # or eax, 0xFCA5F3FD; jmp [0x50532A40+edx*4] 
0x5053259e  # or eax, 0xFCA5F3FD; jmp [0x505326D0+edx*4] 
0x505468c8  # or eax, 0xE07C35FF; push ebp; push eax; mov [0x5055DFE0], eax; call esi 
0x50506511  # or eax, 0x042474FF; push 0x00000000; push eax; call [0x5054A084]; retn 0x0004 
0x50506511  # or eax, 0x042474FF; push 0x00000000; push eax; call [0x5054A084] 
0x5050655d  # or eax, 0x082474FF; push 0x00000000; push eax; call [0x5054A084]; retn 0x0008 
0x5050655d  # or eax, 0x082474FF; push 0x00000000; push eax; call [0x5054A084] 
0x5050908e  # or eax, 0x68BE74FF; push ebx; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5050a228  # or eax, 0x561075FF; push [ebp+0x0C]; call [0x5054A04C] 
0x50547c6f  # push cs; add byte [eax], al; add byte [ebx], dh; rcr byte [esi+0x5B], 0x5D; retn 0x000C 
0x5050d65f  # push cs; add byte [eax], al; xor eax, eax; pop esi; pop edi; retn 0x0008 
0x50531573  # push cs; add byte [eax], al; leave; ret 
0x5051577b  # push cs; add [eax+0x18], ecx; ret 
0x50515557  # push cs; add ecx, ebx; push ecx; push [esi+0x10]; push [edi+0x60]; call [eax+0x10] 
0x50515539  # push cs; add ecx, ebx; push ecx; push [esi+0x10]; push [edi+0x70]; call [eax+0x0C] 
0x50539396  # push cs; sbb eax, 0x80D18A10; retn 0xEB20 
0x50533a7d  # push cs; xor eax, eax; pop esi; pop ebx; leave; ret 
0x5051f1af  # push cs; push eax; push esi; call [ecx+0x0C] 
0x505266b2  # push cs; push eax; push esi; call [ecx+0x1C] 
0x50537462  # push cs; push eax; call [0x5054A158] 
0x50506f3a  # push cs; push ebx; push edi; call [0x5054A050] 
0x505374b2  # push cs; push ebp; push eax; push eax; mov ebx, [0x5054A088]; call ebx 
0x50537365  # push cs; push ebp; push eax; push eax; call [0x5054A088] 
0x5053734a  # push cs; push ebp; push eax; push esi; call [0x5054A1B0] 
0x505377c2  # push cs; push ebp; push eax; push edi; mov [0x5055D544], eax; call esi 
0x505377cf  # push cs; push ebp; push eax; push edi; mov [0x5055D548], eax; call esi 
0x505377dc  # push cs; push ebp; push eax; push edi; mov [0x5055D54C], eax; call esi 
0x505377ba  # push cs; push ebp; push eax; push edi; call esi 
0x505374c6  # push cs; push ebp; push eax; push [ebp-0x1C]; call ebx 
0x50506fb8  # push cs; push esi; push eax; call [0x5055CA08] 
0x5050f8ea  # push cs; push esi; call [0x5054A060] 
0x5051f211  # push cs; push edi; push eax; push esi; call [ecx+0x04] 
0x50546362  # push cs; push edi; call [0x5054A03C] 
0x5050397e  # push cs; push 0x5054A300; push ebx; call edi 
0x505108d0  # push cs; push 0x5054ACA4; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x50510828  # push cs; push 0x5054ACA4; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x5053a173  # push cs; push 0x0000000D; pop eax; pop ebp; ret 
0x50537b28  # push cs; test ecx, ecx; je 0x50537B2F; call ecx 
0x50526df3  # push cs; mov eax, [edi]; push edi; call [eax+0x14] 
0x5050d55d  # push cs; mov edx, [esp+0x08]; lea ecx, [eax+0x00000AB4]; mov eax, [ecx]; mov [ecx], edx; retn 0x0008 
0x5051cd21  # push cs; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; pop edi; ret 
0x5051cd74  # push cs; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; ret 
0x5050870e  # push cs; in eax, dx; add eax, [eax]; push [ebp-0x18]; mov esi, eax; call [0x5055C9B8] 
0x5052f2e7  # push cs; call [0x5054A0E4] 
0x505468d7  # push cs; push [0x5055E07C]; mov [0x5055DFE4], eax; call esi 
0x5050fe04  # push cs; push [ebp+0x14]; call [0x5054A060] 
0x50548c53  # push cs; push [ebp-0x64]; call [0x5054A008] 
0x50516bff  # push cs; push [eax+0x00000138]; push [esp+0x10]; push edx; push eax; call ecx 
0x50537ce0  # sldt word [eax]; pop ecx; ret 
0x50547a4a  # sldt word [eax]; jc 0x50547A1E; pop edi; pop esi; retn 0x000C 
0x505479fc  # sldt word [eax]; jc 0x505479E9; xor eax, eax; retn 0x0004 
0x505130b2  # sldt word [eax]; lea eax, [ebp-0x74]; push eax; push [ebp-0x0080]; call [0x5054A04C] 
0x5054867a  # sldt word [eax]; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5050d931  # sldt word [eax]; leave; retn 0x000C 
0x50531387  # sldt word [eax]; leave; ret 
0x50547e72  # verw word [edx+0x00]; push 0x5054ABA8; push ebx; call esi 
0x50547e3e  # verw word [edx+0x00]; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x505481cf  # verw word [edx+0x00]; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x5054A004] 
0x50547eb5  # verw word [edx+0x00]; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x50507075  # sgdt [eax]; add byte [ebx+0x0038FC87], cl; add byte [ebx-0x39C4E7C0], cl; je 0x505070C4; push eax; call ebx 
0x50521dd9  # sgdt [eax]; add esp, 0x0C; pop ebx; leave; ret 
0x5051654d  # sgdt [ecx]; add bl, ch; or eax, 0x3B30468B; ret 
0x5053d65f  # lsl ecx, word [eax+0x0C]; mov ebx, 0x00008000; push ebx; push ecx; call esi 
0x5053d831  # lsl edi, word [ecx+0x0C]; push 0x00008000; push edi; call [0x5054A220] 
0x50545c14  # nop [eax]; add byte [eax], 0x00; ret 
0x50514241  # movaps [eax], xmm0; add byte [ecx-0x7D], bl; clc; pop es; jnbe 0x5051427C; jmp [0x50514286+eax*4] 
0x50503318  # rcpps xmm2, [eax-0x73]; xchg byte [eax+0x50000008], ah; call [0x5054A04C] 
0x5051e408  # xorps xmm2, [edi+0x57]; push edi; call [0x5054A110] 
0x5050cf7f  # punpckhbw mm0, qword [eax]; add al, byte [eax]; add bh, bh; jne 0x5050CF94; push ebx; call [0x5054A04C] 
0x505329c0  # jc 0x5053291C; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x50532650  # jc 0x505325AC; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x5050305f  # jc 0x5050320A; push 0x00000100; push 0x5054A2C8; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x50546821  # jc 0x50546AEC; push 0x00000002; push [0x5055E07C]; call esi 
0x50534ae2  # jnc 0x5053466E; add eax, edi; add ecx, edi; cmp edi, 0x1F; ja 0x50534ECF; jmp [0x50535C2E+edi*4] 
0x505361d6  # jnc 0xBAAA52C2; add bh, bh; xor eax, 0x5055D69C; call edi 
0x50536359  # jnc 0xC5DD5445; or al, 0x56; push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x50536304  # jnc 0xC5DD53F0; or al, 0x56; push edi; push [0x5055D69C]; call [0x5054A07C] 
0x505477c3  # je 0x505478CE; push esi; call [0x5054A03C] 
0x505472a0  # je 0x505471AD; push [0x50556FF8]; call [0x5054A030] 
0x50517fc1  # je 0x50517DD1; push [ebx+0x70]; mov eax, [edi+0x0000008C]; call [eax+0x08] 
0x5053aa6e  # je 0x5053A87F; lea eax, [ebp-0x38]; push eax; lea eax, [ebp-0x28]; push eax; call [0x5054A0B4] 
0x5050b816  # je 0x5050C12D; push eax; push 0x5054ABAC; push [esi+0x08]; call [0x5054A03C] 
0x50507066  # je 0x50507188; push [ebp+0x0C]; call ebx 
0x5051354f  # je 0x50513675; push 0x00000200; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x5054295d  # je 0x50542A8D; mov esi, [0x5054A088]; push 0x5055208C; push edi; call esi 
0x505336b0  # je 0x505337E5; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x5054A0B4] 
0x5050c406  # je 0x5050C745; push esi; push eax; call [0x5054A050] 
0x5050946e  # je 0x505093B0; mov eax, 0x50555350; push [eax]; lea eax, [ebp-0x00000104]; push eax; call [0x5054A05C] 
0x50506602  # je 0x50506845; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x50506047  # je 0x5050618B; push [ebp+0x08]; call [0x5054A03C] 
0x50507748  # je 0x5050768D; push [ebp-0x08]; call [0x5055C9B8] 
0x5050f526  # je 0x5050F66E; push esi; call [0x5054A03C] 
0x505467b3  # je 0x50546AFF; mov esi, [0x5054A088]; push 0x505523BC; push eax; call esi 
0x50507740  # je 0x5050768D; cmp eax, esi; je 0x5050768D; push [ebp-0x08]; call [0x5055C9B8] 
0x505079ad  # je 0x505077FE; push [ebp-0x04]; call [0x5055CA0C] 
0x5050ef3b  # je 0x5050F08E; push eax; call [0x5054A0DC] 
0x5053baea  # je 0x5053BD40; call [0x5054A214] 
0x5050603e  # je 0x50506195; cmp [ebp+0x08], edi; je 0x5050618B; push [ebp+0x08]; call [0x5054A03C] 
0x50539564  # je 0x505396BC; lea eax, [ebp-0x18]; push eax; push edi; call [0x5054A1EC] 
0x505377ac  # je 0x50537910; mov esi, [0x5054A088]; push 0x50550EF0; push edi; call esi 
0x505419f3  # je 0x50541B58; mov esi, [0x5054A1EC]; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x50503947  # je 0x50503AB0; and [esi+0x000000DC], 0xEFFFFFFF; push [ebp+0x0C]; lea ebx, [esi+0x00002AC0]; push ebx; call [0x5054A050] 
0x50539552  # je 0x505396BC; movzx eax, di; push eax; call [0x5054A1F8] 
0x5050522f  # je 0x5050599B; push [eax+0x0C]; call ebx 
0x50539546  # je 0x505396BC; cmp edi, 0x0000FDE9; je 0x505396BC; movzx eax, di; push eax; call [0x5054A1F8] 
0x5052f499  # je 0x5052F40F; push [esi+0x04]; call [0x5054A13C] 
0x50505224  # je 0x5050599B; mov eax, [ebp-0x38]; test eax, eax; je 0x5050599B; push [eax+0x0C]; call ebx 
0x5053aa08  # je 0x5053A87F; lea eax, [ebp-0x38]; push eax; lea eax, [ebp-0x28]; push eax; call [0x5054A0B4] 
0x5050e9f4  # je 0x5050EC76; push ebx; call [0x5054A03C] 
0x505485b1  # je 0x50548735; push 0x80000001; call [0x5054A000] 
0x5050bea9  # je 0x5050C12D; push 0x5054AB94; push edi; call [0x5054A0B8] 
0x50539a69  # je 0x50539AF2; push ebx; push esi; mov esi, [0x5054A0D4]; push edi; call esi 
0x5050eefc  # je 0x5050F085; push eax; call [0x5054A0DC] 
0x5050d788  # je 0x5050D911; mov edi, [0x5054A03C]; push esi; call edi 
0x5050acd5  # je 0x5050AD5F; cmp [ebp+0x10], 0x02; jnl 0x5050AD11; push [ebp-0x08]; call [0x5054A048] 
0x50548d3e  # je 0x50548DCC; lea eax, [esi+0x34]; push eax; call [0x5054A03C] 
0x505476ec  # je 0x50547780; push esi; call [0x5054A03C] 
0x5050e9ec  # je 0x5050EC80; test ebx, ebx; je 0x5050EC76; push ebx; call [0x5054A03C] 
0x50549739  # je 0x505497D0; cmp [ebp+0x14], 0x01; jl 0x505497D0; push eax; call [0x5054A03C] 
0x505104fa  # je 0x50510593; cmp [ebp-0x1C], 0x02; jnl 0x50510538; push [ebp-0x0C]; call [0x5054A048] 
0x5050ba91  # je 0x5050C12D; mov ebx, [0x5054A03C]; inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x5050cc9c  # je 0x5050D03E; push ebx; call [0x5054A03C] 
0x5050f054  # je 0x5050F0FE; push [ebp-0x04]; call [0x5054A0D8] 
0x5053373a  # je 0x505337E5; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x5054A0B4] 
0x505051ed  # je 0x5050599B; mov ebx, [0x5054A03C]; push edi; call ebx 
0x5050457e  # je 0x5050462D; push 0x00000020; push edi; lea eax, [ebp+0x08]; push eax; call [0x5054A04C] 
0x5050a906  # je 0x5050AABA; push [ebp+0x0C]; mov ebx, [0x5054A03C]; call ebx 
0x50501558  # je 0x50501617; test [esi+0x000000DC], 0x00008000; jne 0x5050157F; call [0x5054A044] 
0x50533626  # je 0x505337E5; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x5054A0B4] 
0x505097c7  # je 0x5050988E; push ebx; call [0x5054A03C] 
0x50547cc6  # je 0x50547D8D; push edi; call esi 
0x5050a8fc  # je 0x5050AAC4; cmp [ebp+0x0C], 0x00000000; je 0x5050AABA; push [ebp+0x0C]; mov ebx, [0x5054A03C]; call ebx 
0x505097be  # je 0x5050988E; cmp byte [ebx], 0x00; je 0x5050988E; push ebx; call [0x5054A03C] 
0x50537843  # je 0x50537915; push [0x5055D548]; push eax; call esi 
0x50501f7d  # je 0x50502052; cmp [esi+0x000000A4], ecx; jne 0x50501FC1; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x505094d7  # je 0x505095AF; mov edi, [0x5054A03C]; push esi; call edi 
0x5053a9a2  # je 0x5053A87F; lea eax, [ebp-0x38]; push eax; lea eax, [ebp-0x28]; push eax; call [0x5054A0B4] 
0x5050665d  # je 0x5050683B; mov esi, [0x5054A088]; push 0x5054A5B0; push eax; call esi 
0x505094cd  # je 0x505095AF; cmp [ebp+0x10], 0x00000000; je 0x505095AF; mov edi, [0x5054A03C]; push esi; call edi 
0x50548e21  # je 0x5054910A; push esi; mov esi, [0x5054A03C]; call esi 
0x505269af  # jne 0x50526AC0; mov ecx, [eax]; lea edx, [ebp-0x18]; push edx; push eax; call [ecx+0x08] 
0x5050fc8e  # jne 0x5050FDA7; cmp [ebp-0x24], 0x02; jl 0x5050FD25; push [ebp-0x14]; call [0x5054A048] 
0x5050eee2  # jne 0x5050F01C; mov eax, [ebp-0x0C]; push eax; push 0x00000042; mov [ebp+0x0C], eax; call [0x5054A194] 
0x5052f372  # jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x50546784  # jne 0x50546AC9; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x50534296  # jne 0x50534213; mov eax, [esp+0x10]; pop ebx; pop esi; pop edi; ret 
0x50538382  # jne 0x50538409; cmp edi, ebx; jne 0x5053839B; call esi 
0x50526ac8  # jne 0x50526B57; mov ecx, [eax]; call [ecx+0x08] 
0x50542948  # jne 0x505429DC; push 0x50552098; call [0x5054A08C] 
0x5054634a  # jne 0x505466E4; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x505030d2  # jne 0x5050316E; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x50503a05  # jne 0x50503AB0; mov [esi+0x000000A8], edi; call [0x5054A188] 
0x5050b177  # jne 0x5050B233; push edi; call [0x5054A03C] 
0x50537b22  # jne 0xFFFFFFFFDB63F0E8; push cs; test ecx, ecx; je 0x50537B2F; call ecx 
0x50546814  # jne 0x50546AEC; cmp [ebp-0x10], 0x0000178E; jc 0x50546AEC; push 0x00000002; push [0x5055E07C]; call esi 
0x50539738  # jne 0x5053983A; mov esi, [ebp-0x24]; push [esi+0x68]; call [0x5054A0D4] 
0x50544b68  # ja 0x50544D9D; jmp [0x505451A3+ecx*4] 
0x5053f1da  # ja 0x5053FB8D; jmp [0x5053FBDB+eax*4] 
0x50534aef  # ja 0x50534ECF; jmp [0x50535C2E+edi*4] 
0x50526ba5  # jns 0xC6DD7C29; or al, 0x8B; push es; push edi; push esi; call [eax+0x1C] 
0x5051fcc4  # jnp 0x10D50D0A; or bl, byte [ecx+0x0307E283]; retn 0xF8C1 
0x5052dced  # jnp 0xBA5B013F; add [eax-0x77], edx; dec eax; pushad; call [eax+0x48] 
0x5052dd19  # jnp 0xBA5B016B; add edx, [eax-0x77]; dec eax; call [fs:eax+0x48] 
0x50538843  # jnp 0x51BD909E; push edx; call [0x5055E13C] 
0x505030c6  # jl 0x5050320A; cmp [esi+0x000000F8], edi; jne 0x5050316E; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x5051d844  # jl 0x5051D79E; pop edi; pop ebx; pop esi; ret 
0x50537f85  # jl 0x50537EF2; push [0x5055E144]; call [0x5054A1B8] 
0x50549743  # jl 0x505497D0; push eax; call [0x5054A03C] 
0x50513c53  # jl 0x14D43C59; cmp byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x5051017d  # jl 0x504CFE08; call [eax-0x01] 
0x5050fc98  # jl 0x5050FD25; push [ebp-0x14]; call [0x5054A048] 
0x5052d3c4  # jng 0x5052D311; pop edi; pop esi; pop ebx; leave; ret 
0x50502fd1  # jng 0x5050324D; push edi; xor edi, edi; inc edi; call [0x5054A188] 
0x50525448  # jng 0x505252C7; pop edi; pop esi; pop ebx; leave; ret 
0x5050c4d7  # jng 0x5050C6DB; mov ebx, [0x5054A0B8]; push 0x5054AC30; push edi; call ebx 
0x50503246  # jg 0x50502FDB; pop edi; push ebx; push esi; call [0x5054A18C] 
0x5051fa86  # jg 0x5051F820; pop edi; pop esi; pop ebx; leave; ret 
0x5051fc3d  # jg 0x5051FB39; pop edi; pop esi; pop ebx; pop ebp; ret 
0x50524f30  # sete al; pop ebx; leave; ret 
0x5051dcb6  # sete al; pop esi; ret 
0x5051e819  # sete al; pop edi; pop esi; pop ebx; pop ebp; ret 
0x50523503  # sete al; pop edi; pop esi; pop ebx; ret 
0x505384c2  # sete al; push 0x00001000; push eax; call [0x5054A074] 
0x5053bac1  # sete cl; push eax; mov eax, [esi]; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x5054A218] 
0x5051f238  # sete cl; push ecx; mov esi, [esi+0x0C]; mov eax, [esi]; push esi; call [eax+0x08] 
0x505412f6  # sete cl; mov eax, ecx; ret 
0x5054112e  # sete dl; mov eax, edx; pop ebp; ret 
0x50541229  # sete dl; mov eax, edx; ret 
0x5051ebe2  # setne al; lea eax, [eax+eax+0x01]; ret 
0x5051676e  # setne al; ret 
0x5054142c  # setne al; push [ebp+0x0C]; lea eax, [0x00000001+eax*8]; push eax; push [ebp+0x18]; call esi 
0x50539e28  # setne al; push [ebp+0x10]; lea eax, [0x00000001+eax*8]; push eax; push [ebp+0x20]; call esi 
0x505266ac  # setne cl; mov eax, ecx; mov ecx, [esi]; push eax; push esi; call [ecx+0x1C] 
0x5051571e  # setne bl; inc edx; mov [ecx+0x18], edx; mov eax, ebx; pop ebx; ret 
0x5051d91f  # setl dl; mov eax, edx; ret 
0x5053699a  # shld edx, eax, cl; shl eax, cl; ret 
0x50542f2a  # shrd eax, edx, cl; shr edx, cl; ret 
0x50533d7d  # imul eax, edi; add eax, ebx; mov edi, eax; push edi; push ebx; call [ebp+0x14] 
0x5053c3e8  # movzx eax, byte [ecx]; inc ecx; mov [edx], ecx; ret 
0x5051fa30  # movzx eax, byte [ebx]; push eax; mov eax, [ebp+0x08]; push eax; call [eax+0x08] 
0x50520181  # movzx ecx, byte [eax]; cmp ecx, esi; jle 0x50520165; or eax, 0xFFFFFFFF; pop esi; ret 
0x50546f6e  # movzx eax, byte [esp+0x14]; push eax; push 0x5054A8B8; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x5051d0ca  # movzx eax, byte [ebp-0x01]; mov [esi+0x10], eax; mov eax, esi; pop esi; leave; ret 
0x50546dfd  # movzx ecx, byte [esp+0x04]; shr eax, 0x08; movzx eax, al; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x5050f613  # movzx eax, byte [ebp+edi+0x00001FE8]; push eax; push 0x5054AC9C; push esi; call [0x5054A260] 
0x505475a1  # movzx eax, al; and eax, 0x01; ret 
0x50546e05  # movzx eax, al; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x50526605  # movzx eax, al; ret 
0x50546de4  # movzx ecx, cl; or eax, edx; or eax, ecx; retn 0x0004 
0x50532b89  # movzx eax, word [ecx+eax*2]; and eax, 0x00000103; pop ebp; ret 
0x50532d93  # movzx eax, word [ecx+eax*2]; and eax, 0x00000107; pop ebp; ret 
0x50532c8e  # movzx eax, word [ecx+eax*2]; and eax, 0x00000080; pop ebp; ret 
0x50532d0f  # movzx eax, word [ecx+eax*2]; and eax, 0x08; pop ebp; ret 
0x5050a9ab  # movzx eax, word [esi]; push eax; push 0x5054AB70; push ebx; call [0x5054A260] 
0x5051f325  # movzx eax, ax; ret 
0x50539558  # movzx eax, di; push eax; call [0x5054A1F8] 
0x50546dde  # movzx edx, dx; shl eax, 0x10; movzx ecx, cl; or eax, edx; or eax, ecx; retn 0x0004 
0x50520196  # movsx eax, word [eax+0x02]; pop esi; ret 
0x5050a45b  # xadd edi, edi; call [eax-0x01] 
0x505428d3  # psubsb mm7, qword [eax+edi*2+0x00C7FFFF]; or [eax], eax; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x50533a91  # psubsb mm7, mm6; add byte [eax], al; mov [eax], 0x0000000C; xor eax, eax; pop esi; ret 
0x505468e6  # ud0 esi, [0x5055E07C]; mov [0x5055DFE8], eax; call esi 
0x5051e384  # ud0 esi, [esi]; call [0x5054A060] 
0x50501099  # ud0 esi, [esp+0x0C]; push 0x5055C93C; call [0x5054A18C]; pop edi; pop esi; retn 0x0004 
0x50501099  # ud0 esi, [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x5053e0bc  # ud0 esi, [ebp+0x08]; call eax 
0x5052ba03  # ud0 edi, edi; pop ecx; pop ecx; ret 
0x5052f384  # adc byte [eax], al; add byte [eax], al; je 0x5052F39F; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5052f2d1  # adc byte [eax], al; add byte [eax+0x55], dl; lea eax, [esi+0x24]; push eax; push [esi]; call [0x5054A0C0] 
0x50542414  # adc byte [eax], al; add byte [ebx+0x6A], dl; or bh, bh; adc eax, 0x5054A180; push eax; call [0x5054A07C] 
0x5052babb  # adc byte [eax], al; add byte [esi-0x18], dl; cld; push 0xC4830000; adc al, 0x5E; ret 
0x5052b4f9  # adc byte [eax], al; add byte [ebx-0x37], bl; ret 
0x5052b419  # adc byte [eax], al; add byte [esi-0x37], bl; ret 
0x5052b412  # adc byte [eax], al; add byte [edi-0x77], bl; or [eax+edx+0x00], 0x00000000; pop esi; leave; ret 
0x50503cc7  # adc byte [eax], al; add byte [edi+0x3B], dh; sal [eax+edi+0x68], cl; test eax, 0xEB80042F; and [ebx], edi; ret 
0x5052b4f3  # adc byte [eax], al; add byte [ecx+0x00104C88], cl; add byte [ebx-0x37], bl; ret 
0x5052b7b8  # adc byte [eax], al; add byte [ebx-0x777607B3], cl; dec esp; adc byte [eax], al; add byte [esi-0x37], bl; ret 
0x5050d8b0  # adc byte [eax], al; add byte [ebp+0x56509045], cl; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x505128d1  # adc byte [eax], al; add cl, cl; retn 0x0010 
0x5052f7d4  # adc byte [eax], al; add bh, dh; fcom [eax+0x51]; push esi; call [esi+0x00001030] 
0x5054198a  # adc byte [eax], al; add bh, bh; jne 0x50541998; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x50507156  # adc byte [eax], al; add bh, bh; jne 0x50507154; lea eax, [ebp-0x18]; push eax; call [0x5055CA38] 
0x505094d5  # adc byte [eax], al; je 0x505095AF; mov edi, [0x5054A03C]; push esi; call edi 
0x5053d7ab  # adc byte [eax], al; push edi; call [0x5054A220] 
0x50516783  # adc byte [eax], al; je 0x5051678B; or eax, 0xFFFFFFFF; ret 
0x5050172c  # adc byte [eax], al; je 0x50501742; call [0x5054A044] 
0x505083f8  # adc byte [eax], al; je 0x50508412; push [ebp+0x10]; push esi; call [0x5054A050] 
0x50528e17  # adc byte [eax], al; jne 0x50528DDF; mov eax, edi; pop edi; pop esi; ret 
0x50524e45  # adc byte [eax], al; jne 0x50524E21; mov eax, [ebp+0x08]; pop ebp; ret 
0x50509b22  # adc byte [eax], al; mov edi, 0x5054AAEC; je 0x50509B34; push [ebp+0x10]; call esi 
0x505096e6  # adc byte [eax], al; mov [eax], 0x67452301; mov [eax+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x505497e1  # adc byte [eax], al; int3; jmp [0x5054A228] 
0x50502f03  # adc byte [ecx], al; add byte [eax], al; pop esi; or eax, 0xFFFFFFFF; retn 0x000C 
0x50502e7a  # adc byte [ecx], al; add byte [eax], al; mov [ecx], eax; xor eax, eax; retn 0x000C 
0x50516a85  # adc byte [ecx], al; add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000124], ecx; ret 
0x50516aa2  # adc byte [ecx], al; add byte [eax], al; ret 
0x5053b17a  # adc byte [ecx], al; je 0x5053B1F4; push [ebp-0x1C]; call [0x5054A060] 
0x5050acdd  # adc byte [edx], al; jnl 0x5050AD11; push [ebp-0x08]; call [0x5054A048] 
0x50515523  # adc byte [edx], al; ret 
0x50501341  # adc byte [ebx], al; add cl, cl; retn 0x0008 
0x505012eb  # adc byte [ebx], al; add cl, cl; retn 0x000C 
0x50531185  # adc byte [ebx], al; retn 0x558B 
0x5050e335  # adc byte [ebx], al; ret 
0x50514f18  # adc byte [ebx], al; rcl [edx-0x01], 1; jnbe 0x50514F83; call [eax+0x14] 
0x5050c7f9  # adc byte [0x000032DC], al; push eax; push [ebp+0x0C]; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7f9  # adc byte [0x000032DC], al; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x5051fadc  # adc byte [eax], cl; jnl 0x5051FAA7; ret 
0x5053b97b  # adc byte [ebx], cl; add byte [eax], al; add bl, ch; retn 0xFF8B 
0x5053b044  # adc byte [ebx], cl; retn 0x840F 
0x5053afc4  # adc byte [ebx], cl; retn 0xC774 
0x5050d65e  # adc byte [esi], cl; add byte [eax], al; xor eax, eax; pop esi; pop edi; retn 0x0008 
0x50548679  # adc byte [edi], cl; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x50503a04  # adc byte [edi], cl; test [ebp-0x77000000], esp; mov esi, 0x000000A8; call [0x5054A188] 
0x5051994d  # adc byte [edi], cl; test [edi-0x75000000], esp; inc edi; or al, 0x2B; ret 
0x5051fa2f  # adc byte [edi], cl; mov dh, 0x03; push eax; mov eax, [ebp+0x08]; push eax; call [eax+0x08] 
0x50546de3  # adc byte [edi], cl; mov dh, 0xC9; or eax, edx; or eax, ecx; retn 0x0004 
0x50537aea  # adc byte [edx], dl; add byte [eax], al; pop ecx; ret 
0x50520e63  # adc byte [0xC3C90001], dl; mov [eax], 0x67452301; mov [eax+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x5053b059  # adc byte [ebx], ah; retn 0xF883 
0x50539cff  # adc byte [ebx], ch; retn 0x4589 
0x5050ac06  # adc byte [ebx], ch; ret 
0x50518060  # adc byte [0x83000000], ch; les ecx, [0x8B0874C0+eax*4]; dec edi; pop eax; push eax; call [ecx+0x04] 
0x50526d51  # adc byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x5051fd5f  # adc byte [ebx], dh; ret 
0x50532eef  # adc byte [edx], bh; ret 
0x505032bb  # adc byte [ebx], bh; ret 
0x50542c6b  # adc byte [ebx], bh; ror [eax-0x74FB81E2], cl; retn 0x02EB 
0x50533dd6  # adc byte [ebx], bh; fbstp [ebx+0x15]; push edi; push ebx; call [ebp+0x14] 
0x50533e06  # adc byte [ebx], bh; div [esi+0x0C]; push edi; push esi; call [ebp+0x14] 
0x50533e56  # adc byte [ebx], bh; div [esi+0x15]; push edi; push esi; call [ebp+0x14] 
0x5053922e  # adc byte [eax+0x4E], al; jne 0x5053922A; pop edi; pop esi; ret 
0x505119f1  # adc byte [eax+0x5F], al; pop esi; retn 0x0004 
0x50515d69  # adc byte [ebp-0x75], al; xchg byte [ecx+eax+0x00], cl; add byte [ebx], bh; ret 
0x50516262  # adc byte [eax+0x53], dl; call [esi+0x04] 
0x5050d0d0  # adc byte [eax+0x57], dl; call [0x5054A038] 
0x5054013f  # adc byte [eax-0x75], dl; pop es; push [esi+eax]; call [0x5054A0C0] 
0x50506c91  # adc byte [eax-0x18], dl; xchg eax, esp; mov [0x5650FFFF], eax; call [0x5054A038] 
0x5053604c  # adc byte [eax-0x18], dl; shr [ebx], 1; add byte [eax], al; pop ecx; pop ebp; ret 
0x50514331  # adc byte [eax-0x01], dl; jne 0x50514342; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x50514331  # adc byte [eax-0x01], dl; jne 0x50514342; call [0x5054A04C] 
0x5053607b  # adc byte [ecx-0x18], dl; mov byte [0x5900002B], al; pop ebp; ret 
0x50501193  # adc byte [edx+0x55], dl; push eax; cmp eax, 0xFFFFFFFF; je 0x505011A4; push eax; call [0x5054A030] 
0x50501075  # adc byte [edx+0x55], dl; push eax; call [0x5054A188] 
0x505010dd  # adc byte [edx+0x55], dl; push eax; call esi 
0x50543e8d  # adc byte [ebx+0x57], dl; push [0x5055D69C]; call [0x5054A164] 
0x505437f1  # adc byte [ebx+0x6A], dl; or edi, edi; jne 0x50543814; call esi 
0x50516dc2  # adc byte [ebx-0x73], dl; push esp; pop ss; add al, 0x52; push [ecx+0x50]; call [eax+0x0C] 
0x5050958f  # adc byte [ebx-0x01], dl; jne 0x505095A0; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050958f  # adc byte [ebx-0x01], dl; jne 0x505095A0; call [0x5054A04C] 
0x50508f19  # adc byte [ebx-0x01], dl; jbe 0x50508F3E; push [esi+0x18]; call edi 
0x505413c2  # adc byte [ebp+0x50], dl; push esi; call [0x5054A230] 
0x50539d92  # adc byte [ebp+0x50], dl; push 0x00000100; push ebx; call [0x5054A200] 
0x505078dd  # adc byte [esi+0x50], dl; push esi; call [0x5055CA24] 
0x50509516  # adc byte [esi+0x53], dl; call [0x5054A04C]; push ebx; call edi 
0x50509516  # adc byte [esi+0x53], dl; call [0x5054A04C] 
0x50501230  # adc byte [esi+0x68], dl; add byte [eax+eax], al; add byte [eax-0x01], dl; xor eax, 0x5055C93C; push 0x00001A00; call [0x5054A034] 
0x50518e2b  # adc byte [esi-0x75], dl; ret 
0x50506122  # adc byte [esi-0x18], dl; pushad; xchg byte [eax], al; add byte [ebx], bh; ret 
0x50546cc1  # adc byte [esi-0x01], dl; adc eax, 0x5055DF10; push eax; call [0x5055DFE4] 
0x505083fe  # adc byte [esi-0x01], dl; adc eax, 0x5054A050; mov ecx, [edi]; push esi; mov [ecx+0x14], eax; call ebx 
0x5050a22b  # adc byte [esi-0x01], dl; jne 0x5050A23C; call [0x5054A04C] 
0x5050aba1  # adc byte [edi+0x3B], dl; ret 
0x50509852  # adc byte [edi+0x68], dl; dec eax; mov [0x75FF5054], eax; or al, ch; ret 
0x5050991f  # adc byte [edi-0x41], dl; add byte [eax], 0x00; add byte [ebp+0x531274DB], al; call [0x5054A03C] 
0x5052df83  # adc byte [edi-0x18], dl; cmp eax, 0x83FFFF09; les ecx, [edi+ebx*2]; pop esi; pop ebp; ret 
0x5053d7bd  # adc byte [edi-0x01], dl; xor eax, 0x5055D69C; call [0x5054A084] 
0x5050a1c3  # adc byte [edi-0x01], dl; jne 0x5050A1D4; call esi 
0x505337df  # adc byte [ecx+0x33], bl; shr bl, 0x1C; call [0x5054A0E4] 
0x50515d5a  # adc byte [ecx+0x3B], bl; ret 
0x5052ef66  # adc byte [ecx+0x59], bl; pop esi; ret 
0x5052dd35  # adc byte [ecx+0x59], bl; ret 
0x50545c3f  # adc byte [edx-0x0A], bl; ret 
0x505341e9  # adc byte [ebx+0x5E], bl; pop edi; ret 
0x50535edd  # adc byte [ebp+0x55], bl; push eax; ret 
0x5054138c  # adc byte [ebp-0x3D], bl; and [0x5055E11C], 0x00000000; ret 
0x5052da95  # adc byte [esi+0x5D], bl; ret 
0x50525b11  # adc byte [esi-0x3D], bl; not edx; and [eax], edx; pop esi; ret 
0x50518f62  # adc byte [edi+0x5B], bl; leave; ret 
0x50515f57  # adc byte [edi+0x5E], bl; pop ebx; ret 
0x505153b8  # adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x5052668b  # adc byte [edi+0x5E], bl; ret 
0x505160b8  # adc byte [edi+0x5E], bl; leave; ret 
0x50527b85  # adc byte [edi-0x77], bl; inc esi; add al, 0x5E; pop ebx; leave; ret 
0x505360f7  # adc byte [edi-0x37], bl; ret 
0x5050c527  # adc byte [eax+0x14], ch; lodsb; push esp; push eax; push esi; call ebx 
0x5052dc6b  # adc byte [edx+0x00], ch; push eax; mov [eax+0x50], ecx; call [eax+0x48] 
0x5053d6ce  # adc byte [edx+0x00], ch; push [0x5055D69C]; call [0x5054A084] 
0x5054258f  # adc byte [edx+0x00], ch; push [ebp+0x0C]; push eax; call [0x5054A0EC] 
0x50539e9f  # adc byte [edx+0x01], ch; push [ebp+0x20]; call esi 
0x5050da05  # adc byte [edx+0x40], ch; mov [esi], eax; push ebx; lea eax, [esi+0x04]; push eax; call [0x5054A04C] 
0x5053d74c  # adc byte [ebx-0x40], ch; adc al, 0x50; push [0x5055E124]; push edi; push [0x5055D69C]; call [0x5054A080] 
0x5053338f  # adc byte [ebp+eax+0x38], dh; push eax; add [ebp+0x04], esi; xor eax, eax; inc eax; ret 
0x5051663d  # adc byte [edi+eax-0x75], dh; imul eax; cli; idiv bh; call [edi-0x18] 
0x50508f15  # adc byte [ebx+ecx+0x6A], dh; adc byte [ebx-0x01], dl; jbe 0x50508F3E; push [esi+0x18]; call edi 
0x5050386e  # adc byte [ebp+ecx-0x01], dh; jne 0x50503884; call [0x5054A03C] 
0x50523a0f  # adc byte [edx+edx+0x39], dh; push esi; sbb al, 0x74; or eax, 0x74145639; or byte [ebx], bh; retn 0x0474 
0x5050851e  # adc byte [esp+ebx-0x01], dh; jne 0x50508534; call esi 
0x50503ad5  # adc byte [esi+ebx-0x01], dh; jne 0x50503AEB; call edi 
0x50537a1b  # adc byte [edi+0x39], dh; add eax, 0x5055D554; jbe 0x50537A45; push esi; call [0x5054A048] 
0x505017ee  # adc byte [ebp+0x0B], dh; call [0x5054A044] 
0x50542819  # adc byte [eax+0x33], bh; sar byte [ecx], cl; pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x50522fa3  # adc byte [ebx-0x75], bh; inc esi; add al, 0x2B; ret 
0x50531707  # adc byte [ebp+0x0D], bh; mov edx, [eax]; push ecx; push ecx; push eax; call [edx+0x04] 
0x50548123  # adc byte [esi+0x11], bh; push [ebp+0x10]; lea eax, [ebp-0x00000084]; push eax; push edi; call [0x5054A04C] 
0x50502984  # adc byte [ecx+0x000AC0C6], al; add byte [esi+0x57], dl; call [0x5054A04C]; push edi; call [0x5054A03C] 
0x50502984  # adc byte [ecx+0x000AC0C6], al; add byte [esi+0x57], dl; call [0x5054A04C] 
0x5053d7de  # adc byte [ebx-0x397400F8], al; pop edi; pop esi; ret 
0x5052675f  # adc byte [ebx+0x00012CA6], al; add byte [eax], al; pop esi; pop edi; ret 
0x5051fcc7  # adc byte [ebx-0x7C66F540], al; loop 0x5051FCD6; add eax, edx; sar eax, 0x03; add eax, 0x04; ret 
0x5051245e  # adc byte [ebx+0x30FF28C4], al; call [0x5054A0D8]; call [0x5054A188] 
0x5051245e  # adc byte [ebx+0x30FF28C4], al; call [0x5054A0D8] 
0x50506a17  # adc byte [ebx-0x3F7AD73A], al; je 0x50506A56; push eax; call ebx 
0x50546c66  # adc byte [ebx-0x00AFFD38], al; xor eax, 0x50556FF8; call [0x5054A02C] 
0x50514faa  # adc byte [ebx-0x7CADFA16], al; rol byte [0x84B7FF50], 0x00; add byte [eax], al; call [ecx+0x18] 
0x5050b160  # adc byte [ebx+0x0A750AF9], al; mov [ebx+0x000032D8], 0x00000001; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1c3  # adc byte [ebx+0x0A750AF9], al; mov [ebx+0x000032D8], 0x00000001; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x5052026a  # adc byte [ebx-0x2483E707], al; mov eax, [esi+0x14]; cmp eax, 0x0C; jnbe 0x5052022D; jmp [0x50520785+eax*4] 
0x50515d2c  # adc byte [ebp-0x74F68B40], al; or byte [edi+0x50], dl; call [ecx+0x1C] 
0x50524c49  # adc byte [ebp-0x74F88A2E], al; push eax; or al, 0x85; sal byte [esp+eax-0x75], cl; retn 0x09EB 
0x50508c92  # adc byte [ebp+0x533174DB], al; call [0x5054A280] 
0x505496ab  # adc byte [ebp+0x531E74FF], al; call [0x5054A03C] 
0x50528342  # adc byte [ecx-0x03BA74C8], cl; pop edi; pop esi; pop ebx; leave; ret 
0x5050783a  # adc byte [ecx-0x39C4F3BB], cl; jne 0x5050784B; add edi, 0x00000114; mov [ebp+0x0C], edi; push [ebp+0x0C]; call [0x5054A03C] 
0x505085f3  # adc byte [ecx-0x3CC403BB], cl; je 0x50508602; push eax; call edi 
0x5051f49e  # adc byte [ecx+0x468D0C46], cl; adc al, 0x33; call [eax-0x39] 
0x5052f767  # adc byte [ecx+0x46891446], cl; sbb al, 0xFF; adc eax, 0x5054A13C; pop esi; ret 
0x50518199  # adc byte [ecx+0x478B6447], cl; je 0x50518126; sal byte [eax+ecx-0x75], 0x4F; insb; push eax; call [ecx+0x04] 
0x50518095  # adc byte [ecx-0x78748FB9], cl; add byte [eax], 0x00; add byte [ebp-0x74F78B40], al; dec edi; js 0x505180F7; call [ecx+0x08] 
0x505488bc  # adc byte [ecx-0x36CCEBB8], cl; inc ecx; mov [eax+0x30], ecx; mov eax, ecx; pop ebp; retn 0x000C 
0x5053d934  # adc byte [ecx-0x71F003A3], cl; push ebp; add [eax], eax; add dh, dh; ret 
0x50519799  # adc byte [ecx-0x36A4D382], cl; ret 
0x50503f6f  # adc byte [ecx+0x0000DC86], cl; add byte [ecx-0x00022F73], cl; dec [ebx+0x0032C48E]; add byte [ebp-0x0002137B], cl; call [ebx+0x50] 
0x50516b29  # adc byte [ecx+0x00012088], cl; add bl, al; mov eax, [esp+0x04]; test eax, eax; jne 0x50516B3A; ret 
0x5051c8ae  # adc byte [ebx+0x08488B01], cl; lea eax, [ecx+eax+0x0C]; mov ecx, [esp+0x08]; mov [ecx], eax; ret 
0x50521e29  # adc byte [ebx+0x5F012906], cl; pop ebx; ret 
0x5052dcd1  # adc byte [ebx+0x0C75FF06], cl; push esi; call [eax+0x08] 
0x5052dc46  # adc byte [ebx+0x0C75FF08], cl; push eax; call [ecx]; add esp, 0x18; pop ebp; ret 
0x5052dc46  # adc byte [ebx+0x0C75FF08], cl; push eax; call [ecx] 
0x5053171b  # adc byte [ebx+0x0C75FF08], cl; push 0x00000001; push eax; call [ecx+0x08] 
0x50506bde  # adc byte [ebx+0x54A03C1D], cl; push eax; test eax, eax; je 0x50506BF0; push eax; call ebx 
0x50506980  # adc byte [ebx+0x54A0401D], cl; push eax; test eax, eax; je 0x50506993; push eax; call ebx 
0x50503969  # adc byte [ebx+0x54A0583D], cl; push eax; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x50514fa7  # adc byte [ebx-0x157CEFC0], cl; add eax, 0x05C08352; push eax; push [edi+0x00000084]; call [ecx+0x18] 
0x50533e72  # adc byte [ebx-0x0FC403BB], cl; jbe 0x50533E89; push edi; push esi; call [ebp+0x14] 
0x50511c9e  # adc byte [ebx+0x5E5FFC45], cl; pop ebx; leave; retn 0x000C 
0x5052e45f  # adc byte [ebx+0x76FF0C46], cl; mov ecx, [fs:eax]; push eax; call [ecx+0x10] 
0x50542f4f  # adc byte [ebx-0x00DAF3B3], cl; push edi; jmp [ebx] 
0x5051c93c  # adc byte [ebx-0x37C4F3B3], cl; jbe 0x5051C948; xor eax, eax; pop ebp; ret 
0x50505245  # adc byte [ebx+0x71FFC84D], cl; or al, 0x50; call [0x5054A050] 
0x50543616  # adc byte [ebx+0x528B0C51], cl; or al, 0x39; push ecx; or byte [ebp+0x05], dh; mov eax, 0x00000001; ret 
0x5051525f  # adc byte [ebx+0x44881856], cl; adc edi, edi; pop edi; ret 
0x505152af  # adc byte [ebx+0x44881856], cl; adc edi, edi; ret 
0x50517539  # adc byte [ebx+0x4F8D4C57], cl; adc al, 0x51; push eax; mov [edi+0x50], eax; call [edx+0x08] 
0x5052dae2  # adc byte [ebx+0x75FF0876], cl; or al, 0x8B; push es; push esi; call [eax+0x0C] 
0x50526ba8  # adc byte [ebx+0x068B0C76], cl; push edi; push esi; call [eax+0x1C] 
0x5051f21b  # adc byte [ebx+0x068B0C76], cl; push edi; push edi; push esi; call [eax+0x04] 
0x5051d63f  # adc byte [ebx-0x1C17E383], cl; idiv bh; call [esi-0x01] 
0x50527597  # adc byte [ebx+0x00008489], cl; add byte [ebx+0x34FF5307], cl; lea esi, [eax+0x575054C1]; call [eax+0x08] 
0x5052723a  # adc byte [ebx-0x3CA1A039], cl; mov eax, esi; pop esi; ret 
0x50539e2d  # adc byte [ebp+0x0001C504], cl; add byte [eax], al; push eax; push [ebp+0x20]; call esi 
0x5054929a  # adc byte [ebp+0x5650BC45], cl; call [0x5054A04C]; push esi; call [0x5054A03C] 
0x5054929a  # adc byte [ebp+0x5650BC45], cl; call [0x5054A04C] 
0x50509ef5  # adc byte [ebp+0x2468BC45], cl; stosd; push esp; push eax; push eax; call [0x5054A03C] 
0x5050d6b9  # adc byte [ebp-0x3F7AEBBA], cl; je 0x5050D6E0; push eax; call [0x5054A03C] 
0x50506eb6  # adc byte [ebp-0x3F7AD782], cl; je 0x50506ED0; push eax; push edi; call [0x5054A050] 
0x50522c41  # adc byte [ebp-0x0000C37B], cl; call [eax-0x18] 
0x5052315f  # adc byte [ebp-0x0000A37B], cl; call [eax-0x18] 
0x50548128  # adc byte [ebp-0x0000837B], cl; call [eax+0x57]; call [0x5054A04C] 
0x50548128  # adc byte [ebp-0x0000837B], cl; call [eax+0x57] 
0x505227e7  # adc byte [ebp-0x0000837B], cl; call [eax-0x73] 
0x5050d3ed  # adc byte [ebp-0x0004237B], cl; call [eax+0x68] 
0x505040af  # adc byte [ebp-0x0002137B], cl; call [eax-0x01] 
0x5051f272  # adc bl, al; mov eax, [esp+0x04]; mov eax, [eax]; ret 
0x5051f26a  # adc bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x10]; ret 
0x505207d3  # adc bh, al; inc eax; adc al, dh; loope 0x505207AC; ret 
0x505066c5  # adc dl, cl; push ebp; push eax; call esi 
0x505151ac  # adc dl, dl; add [eax], eax; add esp, 0x0C; pop esi; ret 
0x50546cc5  # adc bh, bl; push ebp; push eax; push eax; call [0x5055DFE4] 
0x50546cd4  # adc bh, bl; push ebp; push eax; pop esi; leave; retn 0x0004 
0x505463e5  # adc bh, bl; push ebp; push eax; call esi 
0x50546983  # adc al, ah; push ebp; push eax; call esi 
0x505466e0  # adc cl, ah; push ebp; push eax; push 0x5055E080; call [0x5054A15C] 
0x50548677  # adc al, ch; adc byte [edi], cl; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5054875c  # adc al, ch; cmp cl, byte [edi]; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x505092a3  # adc al, ch; push eax; mov edi, edi; call [edi+0x6A] 
0x50548705  # adc al, ch; xchg eax, ecx; sldt word [eax]; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x50548c4a  # adc al, ch; ret 
0x505486c0  # adc al, ch; salc; sldt word [eax]; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5050f0dd  # adc al, ch; fsave [edx]; add al, byte [eax]; add esp, 0x0C; push [ebp-0x04]; call [0x5054A0D8] 
0x50516847  # adc al, ch; fisttp word [edx-0x3CA70000]; or eax, 0xFFFFFFFF; ret 
0x505207d6  # adc al, dh; loope 0x505207AC; ret 
0x50545b16  # adc dh, dh; ret 
0x5051fad8  # adc al, bh; cmp [esi+0x10], 0x08; jnl 0x5051FAA7; ret 
0x5051e3c2  # adc bh, bh; xor bh, bh; adc eax, 0x5054A0EC; call [0x5054A0E4] 
0x505468f5  # adc bh, bh; xor eax, 0x5055E07C; mov [0x5055DFF0], eax; call esi 
0x505122a7  # adc bh, bh; call [0x5054A0D8]; push [esi]; call [0x5054A0E0] 
0x505122a7  # adc bh, bh; call [0x5054A0D8] 
0x505360ed  # adc bh, bh; jne 0x505360FD; push eax; call [ebp+0x08] 
0x5050657d  # adc bh, bh; jne 0x5050658D; push 0x00000200; push eax; call [0x5054A190] 
0x50501037  # adc bh, bh; jne 0x50501047; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x5054149e  # adc bh, bh; jne 0x505414AE; push 0x00000001; push [ebp+0x18]; call esi 
0x505470d6  # adc bh, bh; jne 0x505470E6; push [ebp+0x08]; push esi; call eax 
0x50547136  # adc bh, bh; jne 0x50547146; push [ebp+0x08]; call [0x5055DF4C] 
0x5053a0ca  # adc bh, bh; jne 0x5053A0DA; push [ebp+0x08]; call [0x5054A1FC] 
0x50547395  # adc bh, bh; jne 0x505473A5; push [ebp+0x08]; push [ebp-0x14]; call eax 
0x50542a7f  # adc bh, bh; jne 0x50542A8F; push [ebp+0x08]; push [ebp-0x04]; call eax 
0x5054705d  # adc bh, bh; jne 0x5054706D; push [ebp+0x08]; call eax; push eax; call [0x5055E000] 
0x5054744d  # adc bh, bh; jne 0x5054745D; push [ebp+0x08]; call eax; push eax; call [0x5055E00C] 
0x50547495  # adc bh, bh; jne 0x505474A5; push [ebp+0x08]; call eax; push eax; call [0x5055E014] 
0x505474d1  # adc bh, bh; jne 0x505474E1; push [ebp+0x08]; call eax; push eax; call [0x5055E01C] 
0x50547612  # adc bh, bh; jne 0x50547622; push [ebp+0x08]; call eax; push eax; call [0x5055E068] 
0x5054764e  # adc bh, bh; jne 0x5054765E; push [ebp+0x08]; call eax; push eax; call [0x5055E06C] 
0x5054768a  # adc bh, bh; jne 0x5054769A; push [ebp+0x08]; call eax; push eax; call [0x5055E070] 
0x50546bda  # adc bh, bh; jne 0x50546BEA; push [ebp+0x08]; call eax; push eax; call [0x5055DFDC] 
0x50546c16  # adc bh, bh; jne 0x50546C26; push [ebp+0x08]; call eax; push eax; call [0x5055DFE0] 
0x50546d04  # adc bh, bh; jne 0x50546D14; push [ebp+0x08]; call eax; push eax; call [0x5055DFE8] 
0x50546d51  # adc bh, bh; jne 0x50546D61; push [ebp+0x08]; call eax; push eax; call [0x5055DFF4] 
0x50546d99  # adc bh, bh; jne 0x50546DA9; push [ebp+0x08]; call eax; push eax; call [0x5055DFF8] 
0x50546bda  # adc bh, bh; jne 0x50546BEA; push [ebp+0x08]; call eax 
0x50542a7c  # adc bh, bh; jne 0x50542A90; push [ebp+0x0C]; push [ebp+0x08]; push [ebp-0x04]; call eax 
0x5054773b  # adc bh, bh; jne 0x50547753; lea eax, [ebp-0x44]; push eax; push [ebp-0x48]; call [0x5054A04C] 
0x50543864  # adc bh, bh; jne 0x50543844; push 0x00000001; push [ebp+0x1C]; call esi 
0x505439a9  # adc bh, bh; jne 0x50543989; push [ebp+0x0C]; push [ebp+0x08]; call [0x5054A170] 
0x5052f3ce  # adc bh, bh; jbe 0x5052F3DA; call [0x5054A13C]; mov [esi+0x18], 0x00000001; ret 
0x5052f3ce  # adc bh, bh; jbe 0x5052F3DA; call [0x5054A13C] 
0x5050226f  # adc bh, bh; jbe 0x50502293; push [esi+0x18]; call [0x5054A27C] 
0x50514b80  # adc bh, bh; jnbe 0x50514BD4; call [eax+0x10] 
0x5051555d  # adc bh, bh; jnbe 0x505155C1; call [eax+0x10] 
0x50514dc7  # adc bh, bh; jnbe 0x50514E2F; call [eax+0x14] 
0x5051553f  # adc bh, bh; jnbe 0x505155B3; call [eax+0x0C] 
0x50514f53  # adc bh, bh; jnbe 0x50514FCB; call [eax+0x10] 
0x5050838d  # adc bh, bh; ror [ebx+0x2DC683F0], cl; cmp [ebp+0x14], 0x00000000; je 0x505083A4; push [ebp+0x14]; call ebx 
0x50548093  # adc [eax], eax; add byte [ebp-0x577BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x5054806b  # adc [eax], eax; add byte [ebp-0x2F7BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x50501272  # adc [ebx], eax; add cl, cl; retn 0x000C 
0x5051ce31  # adc [ebx], eax; retn 0xB60F 
0x5050b818  # adc [ecx], ecx; add byte [eax], al; push eax; push 0x5054ABAC; push [esi+0x08]; call [0x5054A03C] 
0x505273e4  # adc [ebx+edi], ecx; retn 0x1B7D 
0x5050e538  # adc [0xC1BD3AF2], esi; retn 0x030A 
0x50533c28  # adc [eax+0x41], eax; test esi, esi; jne 0x50533C20; pop ebx; pop esi; ret 
0x50539e70  # adc [eax-0x18], edx; cmc; retn 0xFFFF 
0x5052491a  # adc [edi+0x5B], ebx; pop esi; leave; ret 
0x50515f51  # adc [edx+0x00], ebp; add byte [ebx+0x5E5F10C4], al; pop ebx; ret 
0x5050226a  # adc [edx+0x01], ebp; push [esi+0x10]; push [esi+0x20]; push [esi+0x18]; call [0x5054A27C] 
0x5053a171  # adc [edi+0x0E], esi; push 0x0000000D; pop eax; pop ebp; ret 
0x505421a5  # adc [ecx+0x000800C2], eax; add byte [ebx], bh; retn 0x1773 
0x5053435d  # adc [ebx+0x00A904C1], eax; add [ecx], eax; xor [ecx-0x7C], 0x843474D2; div byte [edi-0x09]; retn 0x0000 
0x5050aefa  # adc [ecx+0x01890442], ecx; xor eax, eax; inc eax; pop edi; pop esi; retn 0x0008 
0x50515555  # adc [ebx+0x51CB030E], ecx; push [esi+0x10]; push [edi+0x60]; call [eax+0x10] 
0x505085f0  # adc [ebx+0x45891040], ecx; cld; cmp eax, ebx; je 0x50508602; push eax; call edi 
0x50503f2b  # adc [ebx-0x3CC4CFBA], ecx; je 0x50503F3D; push eax; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x505015b1  # adc [ebx-0x3F7ACFBA], ecx; je 0x505015C3; push eax; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x5052d56d  # adc [ebx-0x773BC2B4], ecx; push eax; add [ebx-0x3F7CFB39], eax; add al, 0x83; call [eax] 
0x50509d01  # adc [ebp-0x0000C778], ecx; inc [ebx+0x067763F9]; mov [esi+0x000000E8], edi; pop edi; pop esi; retn 0x0008 
0x50509da2  # adc [ebp-0x0000C778], ecx; inc [ebx+0x067763F9]; mov [esi+0x000000F0], edi; pop edi; pop esi; retn 0x0008 
0x50509e43  # adc [ebp-0x0000C778], ecx; inc [ebx+0x067763F9]; mov [esi+0x000000F4], edi; pop edi; pop esi; retn 0x0008 
0x50512377  # adc eax, ebp; call [ecx+0x03] 
0x50503262  # adc ecx, esi; add al, byte [eax]; add ebp, 0x0000018C; leave; retn 0x0004 
0x50546904  # adc edi, edi; xor eax, 0x5055E07C; mov [0x5055DFF4], eax; call esi 
0x50515265  # adc edi, edi; pop edi; ret 
0x50548125  # adc edi, edi; jne 0x50548139; lea eax, [ebp-0x00000084]; push eax; push edi; call [0x5054A04C] 
0x505414ac  # adc edi, edi; jne 0x505414C4; push eax; push ebx; push [ebp+0x08]; call [0x5054A230] 
0x505105d5  # adc edi, edi; jne 0x505105ED; call [0x5054A060] 
0x50507324  # adc edi, edi; jne 0x505072AC; lea eax, [ebp-0x78]; push eax; call [0x5054A0B0] 
0x505152b5  # adc edi, edi; ret 
0x5052da63  # adc edi, edi; call [esi-0x18] 
0x5053747f  # adc al, byte [eax]; add byte [esi+0x50550EA4], bh; push esi; call [0x5054A1B0] 
0x50501090  # adc al, byte [ebx]; add byte [ebx+0x000C247C], al; je 0x505010A9; push [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x505391c1  # adc al, byte [eax+eax]; add bl, al; mov eax, 0x00000804; ret 
0x50538d4b  # adc dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x50523a11  # adc bh, byte [ecx]; push esi; sbb al, 0x74; or eax, 0x74145639; or byte [ebx], bh; retn 0x0474 
0x5050a79d  # adc al, byte [ebx-0x75]; ret 
0x50506ebd  # adc dl, byte [eax+0x57]; call [0x5054A050]; push edi; mov [esi+0x10], eax; call ebp 
0x50506ed6  # adc dl, byte [eax+0x57]; call [0x5054A050]; push edi; mov [esi+0x14], eax; call ebp 
0x50506eef  # adc dl, byte [eax+0x57]; call [0x5054A050]; push edi; mov [esi+0x18], eax; call ebp 
0x50506f08  # adc dl, byte [eax+0x57]; call [0x5054A050]; push edi; mov [esi+0x1C], eax; call ebp 
0x50506f21  # adc dl, byte [eax+0x57]; call [0x5054A050]; push edi; mov [esi+0x20], eax; call ebp 
0x50506ebd  # adc dl, byte [eax+0x57]; call [0x5054A050] 
0x5050d9df  # adc dl, byte [ebx-0x73]; inc esi; add al, 0x50; call [0x5054A0B8] 
0x5050c761  # adc bl, byte [edx+eax+0x00]; leave; retn 0x000C 
0x50509894  # adc bh, byte [ecx-0x01]; inc [ebx+0x5F5BFFC8]; pop esi; pop ebp; retn 0x0008 
0x50507506  # adc al, byte [ebx+0x7400FC7D]; or edi, edi; jne 0x5050750C; call [0x5055CA0C] 
0x505031f7  # adc al, byte [ebx+0x0000DCA6]; add bh, dh; push 0x5055C960; call [0x5054A0D4] 
0x5050c6c8  # adc cl, byte [ebx+0x4005F045]; add al, byte [eax]; add byte [edx+0x40], ch; push esi; push eax; call [0x5054A04C] 
0x505064c7  # adc cl, byte [ebx-0x3F7ACBBA]; je 0x505064DA; push eax; call [0x5054A078] 
0x50516dbf  # adc cl, byte [ebx-0x72ACEFAA]; push esp; pop ss; add al, 0x52; push [ecx+0x50]; call [eax+0x0C] 
0x50546c49  # adc ah, byte [ecx+0x5055DF88]; test eax, eax; je 0x50546C38; push 0x0000276D; call eax 
0x505394ae  # adc al, bh; add eax, 0x5055DB1C; add [eax], eax; add byte [eax], al; call [0x5054A1F0] 
0x5050166d  # adc ch, al; ret 
0x50534377  # adc dh, bh; retn 0x0000 
0x5052f807  # adc dh, bh; fcom [eax+0x56]; call [esi+0x44] 
0x50546913  # adc bh, bh; xor eax, 0x5055E07C; mov [0x5055DFF8], eax; call esi 
0x5050844f  # adc bh, bh; jne 0x5050846F; push esi; call [0x5054A050] 
0x50531852  # adc bh, bh; jne 0x5053187E; mov edi, [0x5054A060]; call edi; push [ebp-0x04]; call edi 
0x50531852  # adc bh, bh; jne 0x5053187E; mov edi, [0x5054A060]; call edi 
0x50507123  # adc bh, bh; jne 0x50507117; mov esi, [0x5054A060]; call esi; push [ebp-0x0C]; call esi 
0x50507123  # adc bh, bh; jne 0x50507117; mov esi, [0x5054A060]; call esi 
0x5053d7ba  # adc bh, bh; jbe 0x5053D7CE; push edi; push [0x5055D69C]; call [0x5054A084] 
0x5050fc90  # adc eax, [ecx]; add byte [eax], al; cmp [ebp-0x24], 0x02; jl 0x5050FD25; push [ebp-0x14]; call [0x5054A048] 
0x5051eaa8  # adc eax, [edx]; add byte [eax], al; mov eax, esi; pop esi; pop ebx; ret 
0x50528264  # adc esi, [ebx]; rcr byte [edi+0x5E], 0xC9; ret 
0x50520fac  # adc eax, [esi+0x30]; test al, 0x81; retn 0xC613 
0x50507335  # adc edx, [esi-0x01]; mov bh, 0xF4; aaa; add byte [eax], al; call [0x5055CA10] 
0x50508ca8  # adc ebp, [edx+0x00]; push ebx; call [0x5054A258] 
0x5052e5d8  # adc ecx, [ebx+0x76FF0C46]; mov ecx, [fs:eax]; push eax; call [ecx+0x10] 
0x5052e180  # adc ecx, [ebx+0x77FF0C47]; mov ecx, [fs:eax]; push eax; call [ecx+0x10] 
0x5051646e  # adc ecx, [ebx+0x3B517847]; ret 
0x5051648b  # adc ecx, [ebx+0x3B517C47]; ret 
0x5051f075  # adc ecx, [ebx+0x068B0C76]; push edi; push edx; push esi; call [eax+0x04] 
0x5052ef78  # adc ecx, [ebx+0x068B0C76]; push 0x00000000; push 0x00001F41; push esi; call [eax+0x04] 
0x5053fb39  # adc ecx, [ebx-0x00021B73]; call [eax-0x73] 
0x5050e47e  # adc edx, [edx-0x7470F334]; fdiv st0, st7; rol ecx, cl; retn 0x030A 
0x5050e422  # adc edx, [edi-0x3EBCD501]; retn 0x8B0A 
0x5050e4da  # adc esp, eax; out 0x2C, al; dec byte [ebx-0x3E2C0828]; retn 0x030A 
0x5054145d  # adc ebp, eax; sub eax, 0x8BFFFF0F; les edi, [ebx]; ret 
0x50539e5d  # adc ebp, eax; sub eax, 0x8BFFFF85; les edi, [ebx]; ret 
0x50546922  # adc edi, edi; xor eax, 0x5055E07C; mov [0x5055DFEC], eax; call esi 
0x50537745  # adc edi, edi; xor eax, 0x50555FB0; push [0x50555FB4]; call esi; call eax 
0x50537745  # adc edi, edi; xor eax, 0x50555FB0; push [0x50555FB4]; call esi 
0x50523324  # adc al, 0x00; add byte [eax], al; pop esi; ret 
0x50526428  # adc al, 0x00; add byte [ebx+0x18A30CC4], al; loope 0x50526487; push eax; ret 
0x50508397  # adc al, 0x00; je 0x505083A4; push [ebp+0x14]; call ebx 
0x50508414  # adc al, 0x00; je 0x5050842E; push [ebp+0x14]; push esi; call [0x5054A050] 
0x5050eb97  # adc al, 0x00; je 0x5050EBCB; lea eax, [ebp-0x00000300]; push eax; push edi; call [0x5054A0CC] 
0x505473c5  # adc al, 0x00; and eax, 0xFFFFFFFC; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x505053d2  # adc al, 0x01; add byte [eax], al; push eax; call ebx 
0x50508604  # adc al, 0x01; add byte [eax], al; mov [ebp-0x04], eax; push [ebp-0x04]; call edi 
0x50507844  # adc al, 0x01; add byte [eax], al; mov [ebp+0x0C], edi; push [ebp+0x0C]; call [0x5054A03C] 
0x50516ab2  # adc al, 0x01; add byte [eax], al; ret 
0x50549741  # adc al, 0x01; jl 0x505497D0; push eax; call [0x5054A03C] 
0x505053ec  # adc al, 0x02; add byte [eax], al; push eax; call ebx 
0x50503ed2  # adc al, 0x03; add byte [eax], al; push eax; lea eax, [ebp-0x00000204]; push eax; call [0x5054A04C] 
0x50505484  # adc al, 0x03; add byte [eax], al; push eax; call ebx 
0x5050e81e  # adc al, 0x03; add byte [eax], al; push edi; call [0x5054A04C] 
0x5050a1b3  # adc al, 0x03; add byte [eax], al; mov esi, [0x5054A04C]; push eax; push edi; call esi 
0x5053d780  # adc al, 0x03; xor eax, 0x5055E124; push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50531190  # adc al, 0x03; retn 0x558B 
0x5050d718  # adc al, 0x04; add byte [eax], al; push edi; call [0x5054A038] 
0x50502cce  # adc al, 0x05; add byte [eax], al; retn 0x0004 
0x50536b3e  # adc al, 0x0B; ret 
0x505266ab  # adc al, 0x0F; xchg eax, ebp; ror [ebx+0x500E8BC1], 0x56; call [ecx+0x1C] 
0x505128d0  # adc al, 0x10; add byte [eax], al; leave; retn 0x0010 
0x505464b2  # adc al, 0x23; push ebp; push eax; push [0x5055E078]; mov [0x5055DF40], eax; call esi 
0x505473f5  # adc al, 0x27; add byte [eax], al; call [0x5055DF88] 
0x50515797  # adc al, 0x2B; retn 0xC103 
0x505229d1  # adc al, 0x2B; ret 
0x50516fdf  # adc al, 0x2D; add byte [eax], al; pop esi; pop ebp; pop ebx; ret 
0x50536c44  # adc al, 0x33; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x5051f37d  # adc al, 0x33; call [eax-0x39] 
0x50531802  # adc al, 0x33; call [edi-0x73] 
0x5053d418  # adc al, 0x3B; sal [edx-0x15], 0x33; rcr byte [ebp-0x3D], 0x8B; call [ebp-0x75] 
0x5051217b  # adc al, 0x3B; retn 0x840F 
0x505166a0  # adc al, 0x3B; ret 
0x505473ed  # adc al, 0x3B; je 0x505473F4; mov [esi], ebx; push 0x00002714; call [0x5055DF88] 
0x5050bba2  # adc al, 0x3B; sti; jne 0x5050BBC5; push [esi]; call [0x5054A03C] 
0x5051e39e  # adc al, 0x48; je 0x5051E3AE; dec eax; je 0x5051E3A9; or eax, 0xFFFFFFFF; ret 
0x505162b1  # adc al, 0x50; push ebx; call [esi+0x08] 
0x505414af  # adc al, 0x50; push ebx; push [ebp+0x08]; call [0x5054A230] 
0x50546f72  # adc al, 0x50; push 0x5054A8B8; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x50547d3f  # adc al, 0x50; lea eax, [ebp-0x00000284]; push eax; call [0x5054A260] 
0x5050d6e3  # adc al, 0x50; call [0x5054A038] 
0x50506499  # adc al, 0x50; call [0x5054A078]; push 0x00000000; push 0x5055C970; call [0x5054A18C]; ret 
0x50506499  # adc al, 0x50; call [0x5054A078]; push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x50506499  # adc al, 0x50; call [0x5054A078] 
0x5053d74f  # adc al, 0x50; push [0x5055E124]; push edi; push [0x5055D69C]; call [0x5054A080] 
0x5050d5cb  # adc al, 0x50; call ebx 
0x5051753f  # adc al, 0x51; push eax; mov [edi+0x50], eax; call [edx+0x08] 
0x505430e0  # adc al, 0x51; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x5054A190] 
0x505162a7  # adc al, 0x53; call [esi+0x04] 
0x5051627b  # adc al, 0x53; call [esi+0x08]; add esp, 0x2C; call [esi] 
0x5051627b  # adc al, 0x53; call [esi+0x08] 
0x505092be  # adc al, 0x53; push [ebp+0x0C]; push [ebp+0x08]; push [ebp-0x04]; call [0x5054A250] 
0x50515c74  # adc al, 0x56; push 0x00000000; push 0x00000000; push edi; call [edi+0x00000244] 
0x5050841a  # adc al, 0x56; call [0x5054A050]; mov ecx, [edi]; push esi; mov [ecx+0x18], eax; call ebx 
0x5050841a  # adc al, 0x56; call [0x5054A050] 
0x50518deb  # adc al, 0x56; call eax 
0x5051ee2a  # adc al, 0x57; test ebx, ebx; jne 0x5051EE36; call [0x5054A118] 
0x505010fd  # adc al, 0x57; call [0x5054A158] 
0x5052db22  # adc al, 0x59; pop ecx; ret 
0x505181c7  # adc al, 0x59; mov eax, [ebx+0x54]; mov [edi+0x7C], eax; call [eax+0x10] 
0x505153de  # adc al, 0x59; mov eax, esi; pop esi; ret 
0x5052c184  # adc al, 0x5B; leave; ret 
0x5052dfaa  # adc al, 0x5D; ret 
0x50533d07  # adc al, 0x5E; pop ebx; mov esp, ebp; pop ebp; ret 
0x50516c71  # adc al, 0x5E; ret 
0x5051518e  # adc al, 0x5F; pop ebx; ret 
0x505156c2  # adc al, 0x5F; pop ebx; leave; ret 
0x50533d38  # adc al, 0x5F; pop esi; pop ebx; mov esp, ebp; pop ebp; ret 
0x50517c2c  # adc al, 0x5F; pop esi; pop ebx; leave; ret 
0x5051c999  # adc al, 0x5F; mov eax, esi; pop esi; ret 
0x5051f358  # adc al, 0x5F; mov [esi], 0x00002736; mov eax, esi; pop esi; ret 
0x505429c7  # adc al, 0x68; xor al, 0x20; push ebp; push eax; push edi; call esi 
0x5050c6bc  # adc al, 0x68; loopne 0x5050C66B; push esp; push eax; push edi; call ebx 
0x5051309a  # adc al, 0x6A; add edi, edi; jno 0x505130BC; push 0x5054ACCC; push eax; call [0x5054A260] 
0x5052e206  # adc al, 0x6A; add bl, byte [ebx+0x3B]; ret 
0x50531f98  # adc al, 0x6B; rol byte [edi], 0x2B; retn 0x4503 
0x50523a19  # adc al, 0x74; or byte [ebx], bh; retn 0x0474 
0x50505e64  # adc al, 0x74; push ds; push [ebp+0x14]; call esi 
0x505059f7  # adc al, 0x75; add eax, 0xEBF45D89; pop ds; push [ebp+0x14]; call edi 
0x50509bb9  # adc al, 0x75; add eax, 0xEBF85D89; pop ds; push [ebp+0x14]; call edi 
0x5050912b  # adc al, 0x75; and byte [ebx+0x74FF107E], al; sbb dh, dh; ret 
0x5051e1f4  # adc al, 0x75; lock xor eax, eax; pop ebp; ret 
0x5053c31e  # adc al, 0x7C; sub byte [ecx+0x5055E274], ah; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x5054A154] 
0x505496cb  # adc al, 0x7D; cmp dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x505476e5  # adc al, 0x7E; add cl, byte [eax+0x0FF33B19]; test byte [esi+0x56000000], cl; call [0x5054A03C] 
0x50515668  # adc al, 0x81; inc [esi+0x0000017C]; ret 
0x50521e72  # adc al, 0x83; pop es; in al, dx; pop ecx; pop ecx; ret 
0x50523cc0  # adc al, 0x83; ret 
0x505333f4  # adc al, 0x83; les ecx, [ecx+ecx*4]; add [edi+0x5E], ebx; pop ebp; ret 
0x50542ad8  # adc al, 0x83; enter 0x5EFF, 0x5D; ret 
0x50541fa7  # adc al, 0x83; enter 0xEBFF, 0x02; mov eax, [eax]; pop esi; pop ebp; ret 
0x5053c1de  # adc al, 0x83; enter 0xEBFF, 0x03; mov eax, [eax+0x10]; pop esi; pop ebp; ret 
0x505103ee  # adc al, 0x83; clc; push [ebp+0x20]; call [0x5054A0E4] 
0x5050fbd8  # adc al, 0x83; clc; push [ebp+0x4C]; call [0x5054A0E4] 
0x50506995  # adc al, 0x85; sal byte [edi+eax+0x50], 0xFF; ror [ebp-0x74FEF98C], cl; inc edi; sbb byte [ebp+0x500774C0], al; call ebx 
0x50506bf2  # adc al, 0x85; sal byte [edi+eax+0x50], 0xFF; ror [ebp-0x74FDB98C], cl; inc edi; sbb byte [ebp+0x500774C0], al; call ebx 
0x50506ed2  # adc al, 0x85; sal byte [edx+edx+0x50], 0x57; call [0x5054A050]; push edi; mov [esi+0x14], eax; call ebp 
0x50506ed2  # adc al, 0x85; sal byte [edx+edx+0x50], 0x57; call [0x5054A050] 
0x50524e03  # adc al, 0x85; sal byte [ebp+0x02], 0xC9; ret 
0x5052f76a  # adc al, 0x89; inc esi; sbb al, 0xFF; adc eax, 0x5054A13C; pop esi; ret 
0x50516953  # adc al, 0x89; xchg esp, ebp; add byte [eax], al; add byte [esi+0x5F], bl; ret 
0x50531198  # adc al, 0x8B; inc ecx; sbb byte [ebx], al; retn 0x558B 
0x5051e3be  # adc al, 0x8B; inc esp; and al, 0x10; push [eax]; call [0x5054A0EC]; call [0x5054A0E4] 
0x5051e3be  # adc al, 0x8B; inc esp; and al, 0x10; push [eax]; call [0x5054A0EC] 
0x50524fdd  # adc al, 0x8B; ret 
0x5054773e  # adc al, 0x8D; inc ebp; mov esp, 0xB875FF50; call [0x5054A04C] 
0x5053b6f5  # adc al, 0x8D; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5053baba  # adc al, 0x8D; test [0x940FFFFF], ebx; rcl [eax-0x75], 0x06; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x5054A218] 
0x50505caa  # adc al, 0x8D; xchg byte [eax+0x50000005], ah; call ebx 
0x505484ac  # adc al, 0xA0; push esp; push eax; push [ebp-0x78]; mov esi, eax; call ebx 
0x505481ef  # adc al, 0xA0; push esp; push eax; push [ebp-0x14]; call [0x5054A008] 
0x5051e514  # adc al, 0xA1; push esp; push eax; mov esi, eax; call edi 
0x5050c529  # adc al, 0xAC; push esp; push eax; push esi; call ebx 
0x5050725f  # adc al, 0xB1; add al, byte [eax]; leave; retn 0x0008 
0x505066d7  # adc al, 0xCA; push ebp; push eax; call esi 
0x505463f7  # adc al, 0xDF; push ebp; push eax; call esi 
0x50546992  # adc al, 0xE0; push ebp; push eax; call esi 
0x50546b3b  # adc al, 0xE1; push ebp; push eax; test eax, eax; jne 0x50546B46; retn 0x000C 
0x505468b2  # adc al, 0xE1; push ebp; push eax; call esi 
0x5051e014  # adc al, 0xE8; retn 0x0001 
0x5052388d  # adc al, 0xE8; jmp [ecx] 
0x50516496  # adc al, 0xEB; add eax, 0x009C69E8; add byte [ecx-0x75], bl; xchg [eax+0x3B000000], edi; ret 
0x50524dac  # adc al, 0xFF; or byte [ebx+0x3B078B3F], cl; retn 0xDE75 
0x50518de7  # adc al, 0xFF; je 0x50518E0F; adc al, 0x56; call eax 
0x50539e9c  # adc al, 0xFF; jne 0x50539EB0; push 0x00000001; push [ebp+0x20]; call esi 
0x50549297  # adc al, 0xFF; jne 0x505492AB; lea eax, [ebp-0x44]; push eax; push esi; call [0x5054A04C] 
0x505470d3  # adc al, 0xFF; jne 0x505470E7; push [ebp+0x0C]; push [ebp+0x08]; push esi; call eax 
0x50547133  # adc al, 0xFF; jne 0x50547147; push [ebp+0x0C]; push [ebp+0x08]; call [0x5055DF4C] 
0x5053a0c7  # adc al, 0xFF; jne 0x5053A0DB; push [ebp+0x0C]; push [ebp+0x08]; call [0x5054A1FC] 
0x5054151d  # adc al, 0xFF; jne 0x50541531; push [ebp+0x0C]; push [ebp+0x08]; push [ebp+0x1C]; call [0x5054A22C] 
0x50547392  # adc al, 0xFF; jne 0x505473A6; push [ebp+0x0C]; push [ebp+0x08]; push [ebp-0x14]; call eax 
0x50546d96  # adc al, 0xFF; jne 0x50546DAA; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5054835e  # adc al, 0xFF; jne 0x505483DE; lea eax, [ebp-0x000001FC]; push eax; push edi; call [0x5054A04C] 
0x5050d80f  # adc al, 0xFF; jne 0x5050D797; lea eax, [esi+0x04]; push eax; call edi 
0x5053a07a  # adc al, 0xFF; jne 0x5053A072; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x5050839d  # adc al, 0xFF; ror [ebp-0x7CFEF98C], cl; jnl 0x505083BF; add byte [ecx+ecx-0x01], dh; jne 0x505083C5; call ebx 
0x5053fe50  # adc eax, 0x83000000; sti; or byte [ebp+0x1F], dh; push [edi+0x64]; push ebx; call [ebp-0x20] 
0x5053753b  # adc eax, 0xE8000000; fst qword [ecx]; add byte [eax], al; ret 
0x50520e64  # adc eax, 0xC3C90001; mov [eax], 0x67452301; mov [eax+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x5051131a  # adc eax, 0x5054A104; test eax, eax; jne 0x5051133A; push 0x00000064; call [0x5054A048] 
0x50521d5e  # adc eax, 0xC9000106; ret 
0x5054877e  # adc eax, 0x5054A00C; push [ebp-0x6C]; test eax, eax; je 0x5054879E; call [0x5054A008] 
0x5050c467  # adc eax, 0x3B44BE0F; call [eax-0x18] 
0x5050c705  # adc eax, 0x3E44BE0F; call [eax-0x18] 
0x505480ed  # adc eax, 0x5054A010; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x50546cc4  # adc eax, 0x5055DF10; push eax; call [0x5055DFE4] 
0x50546cd3  # adc eax, 0x5055DF10; pop esi; leave; retn 0x0004 
0x505484ab  # adc eax, 0x5054A014; push [ebp-0x78]; mov esi, eax; call ebx 
0x505481ee  # adc eax, 0x5054A014; push [ebp-0x14]; call [0x5054A008] 
0x5051e513  # adc eax, 0x5054A114; mov esi, eax; call edi 
0x50548457  # adc eax, 0x5054A018; test eax, eax; je 0x50548437; push [ebp-0x78]; mov ebx, [0x5054A008]; call ebx 
0x5052f191  # adc eax, 0x5054A11C; lea eax, [ebp-0x0C]; push 0x00000008; push eax; call [ebp+0x08] 
0x5053c277  # adc eax, 0x5054A21C; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x5053601f  # adc eax, 0x5054A020; pop ebp; ret 
0x50535fec  # adc eax, 0x5054A020; pop esi; pop ebp; ret 
0x50501130  # adc eax, 0x5054A020; ret 
0x5054212f  # adc eax, 0x5054A020; test byte [esi+0x04], 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x5052f174  # adc eax, 0x5054A120; lea eax, [ebp-0x1C]; push 0x00000010; push eax; call [ebp+0x08] 
0x505079a5  # adc eax, 0x5055CA20; cmp [ebp-0x04], esi; je 0x505077FE; push [ebp-0x04]; call [0x5055CA0C] 
0x505078f4  # adc eax, 0x5055CA20; cmp [ebp-0x04], esi; je 0x50507907; push [ebp-0x04]; call [0x5055CA0C] 
0x5053605b  # adc eax, 0x5054A024; pop ebp; ret 
0x50501151  # adc eax, 0x5054A024; ret 
0x5053ee36  # adc eax, 0x5054A224; test eax, eax; je 0x5053EE54; push 0x50551648; push eax; call [0x5054A088] 
0x505011e3  # adc eax, 0x5054A028; pop esi; retn 0x0004 
0x505375cc  # adc eax, 0x5054A028; pop edi; mov eax, esi; pop esi; ret 
0x50501189  # adc eax, 0x5054A028; mov eax, esi; pop esi; ret 
0x50516bb5  # adc eax, 0x5054A028; ret 
0x5052f1fb  # adc eax, 0x5054A128; push eax; call [0x5054A124] 
0x50538f6c  # adc eax, 0x5054A128; push eax; call [0x5054A1E4]; leave; ret 
0x50538b43  # adc eax, 0x5054A128; push eax; call [0x5054A1E4] 
0x505475dd  # adc eax, 0x5054A02C; xor eax, eax; ret 
0x50501176  # adc eax, 0x5054A02C; push esi; push 0x5055C944; call [0x5054A18C]; push esi; call [0x5054A028] 
0x50501176  # adc eax, 0x5054A02C; push esi; push 0x5055C944; call [0x5054A18C] 
0x50537786  # adc eax, 0x5054A02C; pop ebp; ret 
0x50537430  # adc eax, 0x5054A02C; mov eax, esi; pop esi; ret 
0x50546749  # adc eax, 0x5054A02C; jmp [0x5055DF84] 
0x5054759c  # adc eax, 0x5054A030; movzx eax, al; and eax, 0x01; ret 
0x505472ad  # adc eax, 0x5054A030; and eax, 0xFFFFFFFC; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x50547116  # adc eax, 0x5054A030; test al, 0x01; je 0x5054712C; push 0x00002734; call [0x5055DF88] 
0x5050119e  # adc eax, 0x5054A030; ret 
0x5052f1d1  # adc eax, 0x5054A130; push eax; call [0x5054A12C] 
0x5052ccef  # adc eax, 0x10BD3433; call [eax+edx*2+0x0F] 
0x5050c889  # adc eax, 0x5054A038; push eax; call [0x5054A040] 
0x50506c9b  # adc eax, 0x5054A038; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x10], esi; call [0x5054A040] 
0x50506cd9  # adc eax, 0x5054A038; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x14], esi; call [0x5054A040] 
0x50506d17  # adc eax, 0x5054A038; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x18], esi; call [0x5054A040] 
0x50506d55  # adc eax, 0x5054A038; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x1C], esi; call [0x5054A040] 
0x50506d93  # adc eax, 0x5054A038; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x20], esi; call [0x5054A040] 
0x50506dcf  # adc eax, 0x5054A038; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x24], esi; call [0x5054A040] 
0x5050cb99  # adc eax, 0x5054A038; lea eax, [esi+0x00000200]; test eax, eax; je 0x5050CBCA; push eax; call [0x5054A03C] 
0x5050cbd3  # adc eax, 0x5054A038; lea eax, [esi+0x00000240]; test eax, eax; je 0x5050CC04; push eax; call [0x5054A03C] 
0x50538910  # adc eax, 0x5054A138; xor esi, eax; call [0x5054A044]; xor esi, eax; call [0x5054A188] 
0x50538910  # adc eax, 0x5054A138; xor esi, eax; call [0x5054A044] 
0x5052f259  # adc eax, 0x5054A138; mov [ebp-0x08], eax; lea eax, [ebp-0x08]; push 0x00000004; push eax; call [ebp+0x08] 
0x50507161  # adc eax, 0x5055CA38; mov [edi+0x000037F4], eax; push ebx; call [0x5054A098] 
0x50507895  # adc eax, 0x74FC7539; or edi, edi; jne 0x5050789A; call [0x5055CA0C] 
0x5050b826  # adc eax, 0x5054A03C; add eax, [esi+0x08]; mov edi, [0x5054A260]; push eax; call edi 
0x50514340  # adc eax, 0x5054A03C; pop ebp; retn 0x000C 
0x50503976  # adc eax, 0x5054A03C; test eax, eax; jle 0x5050398D; push 0x5054A300; push ebx; call edi 
0x5052f482  # adc eax, 0x5054A13C; cmp ebx, ebp; je 0x5052F4A8; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5052f76f  # adc eax, 0x5054A13C; pop esi; ret 
0x5052f37c  # adc eax, 0x5054A13C; cmp [esi+0x00001024], 0x00000000; je 0x5052F39F; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5052f4ef  # adc eax, 0x5054A13C; mov [esi+0x18], 0x00000001; pop edi; leave; ret 
0x5052f3d3  # adc eax, 0x5054A13C; mov [esi+0x18], 0x00000001; ret 
0x5052f465  # adc eax, 0x5054A140; mov ebx, eax; cmp ebx, ebp; jne 0x5052F47B; call [0x5054A0E4] 
0x5052f328  # adc eax, 0x5054A140; mov ebx, eax; test ebx, ebx; jne 0x5052F341; call [0x5054A0E4] 
0x50540343  # adc eax, 0x5054A240; mov [ebp-0x10], eax; test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x50501040  # adc eax, 0x5054A240; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50538918  # adc eax, 0x5054A044; xor esi, eax; call [0x5054A188] 
0x50547255  # adc eax, 0x5054A044; push eax; call [0x5054A24C]; push [0x50556FF8]; call [0x5054A030] 
0x50512dd1  # adc eax, 0x5054A044; push eax; call [0x5054A24C] 
0x5052f491  # adc eax, 0x5054A144; cmp [esi+0x10], ebp; je 0x5052F40F; push [esi+0x04]; call [0x5054A13C] 
0x50503232  # adc eax, 0x5054A048; push [0x5055C960]; push esi; call [0x5054A18C] 
0x50502fb6  # adc eax, 0x5054A048; push [0x5055C960]; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x50537a58  # adc eax, 0x5054A048; push [ebp+0x08]; call [0x5054A1B0] 
0x505318c2  # adc eax, 0x5054A148; push [ebp-0x08]; mov ebx, [0x5054A060]; call ebx; push [ebp-0x04]; call ebx 
0x505318c2  # adc eax, 0x5054A148; push [ebp-0x08]; mov ebx, [0x5054A060]; call ebx 
0x50502717  # adc eax, 0x3B000449; ret 
0x5050c8da  # adc eax, 0x5054A04C; xor eax, eax; retn 0x0008 
0x5050951a  # adc eax, 0x5054A04C; push ebx; call edi 
0x505492a1  # adc eax, 0x5054A04C; push esi; call [0x5054A03C] 
0x5050298e  # adc eax, 0x5054A04C; push edi; call [0x5054A03C] 
0x50548e51  # adc eax, 0x5054A04C; lea eax, [ebp+0x24]; push eax; call esi 
0x50503077  # adc eax, 0x5054A04C; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x50514337  # adc eax, 0x5054A04C; push [ebp+0x0C]; call [0x5054A03C]; pop ebp; retn 0x000C 
0x50509595  # adc eax, 0x5054A04C; push [ebp+0x0C]; call [0x5054A03C] 
0x5051e501  # adc eax, 0x5054A24C; push 0x000003E8; push ebx; push [ebp-0x10]; push [ebp-0x04]; call [0x5054A114] 
0x5054725c  # adc eax, 0x5054A24C; push [0x50556FF8]; call [0x5054A030] 
0x50547286  # adc eax, 0x5055DF4C; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x50503962  # adc eax, 0x5054A050; cmp [ebp+0x10], edi; mov edi, [0x5054A058]; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x50506ec1  # adc eax, 0x5054A050; push edi; mov [esi+0x10], eax; call ebp 
0x50506eda  # adc eax, 0x5054A050; push edi; mov [esi+0x14], eax; call ebp 
0x50506ef3  # adc eax, 0x5054A050; push edi; mov [esi+0x18], eax; call ebp 
0x50506f25  # adc eax, 0x5054A050; push edi; mov [esi+0x20], eax; call ebp 
0x50506f3e  # adc eax, 0x5054A050; push edi; mov [esi+0x24], eax; call ebp 
0x50508401  # adc eax, 0x5054A050; mov ecx, [edi]; push esi; mov [ecx+0x14], eax; call ebx 
0x5050841d  # adc eax, 0x5054A050; mov ecx, [edi]; push esi; mov [ecx+0x18], eax; call ebx 
0x50508439  # adc eax, 0x5054A050; mov ecx, [edi]; push esi; mov [ecx+0x1C], eax; call ebx 
0x50508455  # adc eax, 0x5054A050; mov ecx, [edi]; push esi; mov [ecx+0x20], eax; call ebx 
0x50506a3e  # adc eax, 0x5054A050; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x10], esi; call [0x5054A03C] 
0x50506a7c  # adc eax, 0x5054A050; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x14], esi; call [0x5054A03C] 
0x50506aba  # adc eax, 0x5054A050; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x18], esi; call [0x5054A03C] 
0x50506af8  # adc eax, 0x5054A050; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x1C], esi; call [0x5054A03C] 
0x50506b36  # adc eax, 0x5054A050; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x20], esi; call [0x5054A03C] 
0x50506b72  # adc eax, 0x5054A050; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x24], esi; call [0x5054A03C] 
0x505092ca  # adc eax, 0x5054A250; pop edi; pop esi; pop ebx; leave; retn 0x0010 
0x5054633e  # adc eax, 0x5054A054; cmp [0x5055E078], 0x00000000; jne 0x505466E4; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x505065fb  # adc eax, 0x5054A054; test eax, eax; je 0x50506845; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x505010f4  # adc eax, 0x5054A154; cmp edi, 0xFFFFFFFF; je 0x50501112; push edi; call [0x5054A158] 
0x5054712f  # adc eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5055DF4C] 
0x50511376  # adc eax, 0x59000058; pop ecx; retn 0x0008 
0x505466ea  # adc eax, 0x5054A15C; cmp eax, 0x01; jl 0x505466E4; cmp [0x50556FF8], 0xFFFFFFFF; jne 0x50546708; call [0x5054A184] 
0x50546acf  # adc eax, 0x5054A15C; cmp eax, 0x01; jl 0x50546AC9; push [ebp+0x0C]; push [ebp+0x08]; call [0x5055DFC0] 
0x5052f3ac  # adc eax, 0x5054A060; xor eax, eax; add esp, 0x14; retn 0x0004 
0x5053a696  # adc eax, 0x5054A060; test eax, eax; jne 0x5053A6A9; call [0x5054A0E4] 
0x50501069  # adc eax, 0x5054A160; call [0x5054A184]; mov [0x50555210], eax; call [0x5054A188] 
0x50501069  # adc eax, 0x5054A160; call [0x5054A184] 
0x50547d49  # adc eax, 0x5054A260; add esp, 0x14; push 0x00000010; call [0x5054A270] 
0x50503d88  # adc eax, 0x5054A064; push esi; call [0x5054A060] 
0x5050ef9e  # adc eax, 0x5054A264; test eax, eax; je 0x5050EFBB; lea eax, [ebp-0x44]; push eax; call [0x5054A268] 
0x5050acf4  # adc eax, 0x5054A264; test eax, eax; je 0x5050AD11; lea eax, [ebp-0x38]; push eax; call [0x5054A268] 
0x50501f4a  # adc eax, 0x5054A264; test eax, eax; je 0x50501F67; lea eax, [ebp-0x24]; push eax; call [0x5054A268] 
0x5051052f  # adc eax, 0x5054A264; test eax, eax; jne 0x50510511; cmp [ebp-0x1C], 0x04; jnl 0x50510562; call [0x5054A188] 
0x5053ee3e  # adc eax, 0x55164868; push eax; push eax; call [0x5054A088] 
0x50503d81  # adc eax, 0x5054A068; push esi; call [0x5054A064]; push esi; call [0x5054A060] 
0x50503d81  # adc eax, 0x5054A068; push esi; call [0x5054A064] 
0x5050fd07  # adc eax, 0x5054A268; lea eax, [ebp-0x48]; push eax; call [0x5054A278] 
0x5050efac  # adc eax, 0x5054A268; lea eax, [ebp-0x44]; push eax; call [0x5054A278] 
0x50547219  # adc eax, 0x5054A268; lea eax, [ebp-0x40]; push eax; call [0x5054A278] 
0x50512d9c  # adc eax, 0x5054A268; lea eax, [ebp-0x3C]; push eax; call [0x5054A278] 
0x5050ad02  # adc eax, 0x5054A268; lea eax, [ebp-0x38]; push eax; call [0x5054A278] 
0x5051e4c5  # adc eax, 0x5054A268; lea eax, [ebp-0x34]; push eax; call [0x5054A278] 
0x50501f58  # adc eax, 0x5054A268; lea eax, [ebp-0x24]; push eax; call [0x5054A278]; push 0x0000000A; call [0x5054A048] 
0x50501f58  # adc eax, 0x5054A268; lea eax, [ebp-0x24]; push eax; call [0x5054A278] 
0x50537ab7  # adc eax, 0x550EFC68; push eax; push eax; call [0x5054A088] 
0x50547d6a  # adc eax, 0x5054A26C; test byte [ebp+0x18], 0x02; pop ebx; je 0x50547D81; push 0x000000FF; call [0x5054A1B4] 
0x50537bb6  # adc eax, 0x5055E270; xor eax, eax; pop ebp; ret 
0x5050643e  # adc eax, 0x5054A074; mov [0x5055C970], eax; test eax, eax; jne 0x5050644C; ret 
0x505384cc  # adc eax, 0x5054A074; mov [0x5055D69C], eax; test eax, eax; jne 0x505384DC; pop ebp; ret 
0x5054271a  # adc eax, 0x5054A174; test eax, eax; jne 0x5054278A; cmp [0x50556CC0], 0x02; jne 0x50542706; call [0x5054A0E4] 
0x50547cbd  # adc eax, 0x5054A274; mov edi, eax; test edi, edi; je 0x50547D8D; push edi; call esi 
0x5050649c  # adc eax, 0x5054A078; push 0x00000000; push 0x5055C970; call [0x5054A18C]; ret 
0x5050649c  # adc eax, 0x5054A078; push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x5053854d  # adc eax, 0x5054A078; and [0x5055D69C], 0x00000000; ret 
0x505064d1  # adc eax, 0x5054A078; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x5054274d  # adc eax, 0x5054A178; push eax; call [0x5054A190] 
0x50501f62  # adc eax, 0x5054A278; push 0x0000000A; call [0x5054A048] 
0x5050efb6  # adc eax, 0x5054A278; cmp [ebp-0x14], 0x04; jnl 0x5050EFE5; call [0x5054A188] 
0x505064fa  # adc eax, 0x5054A07C; retn 0x0004 
0x50506542  # adc eax, 0x5054A07C; retn 0x0008 
0x5054241b  # adc eax, 0x5054A180; push eax; call [0x5054A07C] 
0x5054249e  # adc eax, 0x5054A180; push eax; call [0x5054A084] 
0x50536994  # adc eax, 0x7320F980; push es; shld edx, eax, cl; shl eax, cl; ret 
0x50542f24  # adc eax, 0x7320F980; push es; shrd eax, edx, cl; shr edx, cl; ret 
0x5050651a  # adc eax, 0x5054A084; retn 0x0004 
0x50506566  # adc eax, 0x5054A084; retn 0x0008 
0x5050106f  # adc eax, 0x5054A184; mov [0x50555210], eax; call [0x5054A188] 
0x505466fe  # adc eax, 0x5054A184; mov [0x50556FF8], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x505373fd  # adc eax, 0x5054A184; retn 0x0004 
0x5052424d  # adc eax, 0x83FFFF87; les edx, [esi+ebx*2]; ret 
0x5053ee46  # adc eax, 0x5054A088; test eax, eax; je 0x5053EE54; push 0x00000000; call eax; ret 
0x5053ee46  # adc eax, 0x5054A088; test eax, eax; je 0x5053EE54; push 0x00000000; call eax 
0x50537abf  # adc eax, 0x5054A088; test eax, eax; je 0x50537ACD; push [ebp+0x08]; call eax 
0x5053736a  # adc eax, 0x5054A088; test eax, eax; je 0x5053737B; push [ebp+0x08]; call eax 
0x5052f245  # adc eax, 0x5054A188; mov [ebp-0x04], eax; lea eax, [ebp-0x04]; push 0x00000004; push eax; call [ebp+0x08] 
0x5052786e  # adc eax, 0x5054A188; mov [0x5055D454], eax; ret 
0x50503d3d  # adc eax, 0x5054A188; test [esi], 0x00004000; mov [edi+0x000032C0], eax; jne 0x50503DCE; push 0x5055C960; call [0x5054A15C] 
0x5052c94e  # adc eax, 0x10BD3C8B; call [eax+edx*2+0x33] 
0x5051fa1a  # adc eax, 0x5708458B; push [ebp-0x1C]; push eax; call [eax+0x0C] 
0x5053164a  # adc eax, 0x8B0C768B; push es; push 0x00000000; push 0x00001F40; push esi; call [eax+0x04] 
0x50546387  # adc eax, 0x5054A08C; push ebx; mov [0x5055E078], eax; call esi 
0x5054679f  # adc eax, 0x5054A08C; push ebx; mov [0x5055E07C], eax; call esi 
0x50513e77  # adc eax, 0x5054A18C; xor eax, eax; pop edi; inc eax; pop esi; ret 
0x505011dc  # adc eax, 0x5054A18C; push esi; call [0x5054A028]; pop esi; retn 0x0004 
0x50501182  # adc eax, 0x5054A18C; push esi; call [0x5054A028]; mov eax, esi; pop esi; ret 
0x50501182  # adc eax, 0x5054A18C; push esi; call [0x5054A028] 
0x505010a4  # adc eax, 0x5054A18C; pop edi; pop esi; retn 0x0004 
0x50501121  # adc eax, 0x5054A18C; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020]; ret 
0x50501121  # adc eax, 0x5054A18C; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020] 
0x50501142  # adc eax, 0x5054A18C; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024]; ret 
0x50501142  # adc eax, 0x5054A18C; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024] 
0x505112e1  # adc eax, 0x5054A18C; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020]; ret 
0x505112e1  # adc eax, 0x5054A18C; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020] 
0x5051134b  # adc eax, 0x5054A18C; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024]; ret 
0x5051134b  # adc eax, 0x5054A18C; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024] 
0x50547c8b  # adc eax, 0x5054A18C; retn 0x0004 
0x505064a9  # adc eax, 0x5054A18C; ret 
0x50547294  # adc eax, 0x5055DF8C; mov [ebp-0x18], eax; cmp [ebp-0x14], 0x00000000; je 0x505471AD; push [0x50556FF8]; call [0x5054A030] 
0x50506588  # adc eax, 0x5054A190; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x5050eef2  # adc eax, 0x5054A194; mov [ebp-0x04], eax; cmp eax, ebx; je 0x5050F085; push eax; call [0x5054A0DC] 
0x5051221e  # adc eax, 0x5054A194; mov ecx, [ebp+0x10]; push eax; mov [ecx], eax; call [0x5054A0DC] 
0x5050716e  # adc eax, 0x5054A098; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx; push [ebp-0x0C]; call ebx 
0x5050716e  # adc eax, 0x5054A098; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx 
0x5050713b  # adc eax, 0x5054A09C; mov [ebp-0x18], eax; lea eax, [ebp-0x18]; push eax; mov [ebp-0x14], ebx; call [0x5055CA34] 
0x5050f8d5  # adc eax, 0x5054A09C; mov ebx, eax; cmp ebx, 0xFFFFFFFF; jne 0x5050F8F9; call [0x5054A0E4] 
0x505070f5  # adc eax, 0x5054A0A4; mov [ebp-0x10], eax; cmp eax, esi; jne 0x50507112; push ebx; call [0x5054A060] 
0x5053b19f  # adc eax, 0x5054A0A8; cmp eax, 0xFFFFFFFF; jne 0x5053B1DD; call [0x5054A0E4] 
0x505103e7  # adc eax, 0x5054A0A8; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x50510414; call [0x5054A0E4] 
0x5050fbd1  # adc eax, 0x5054A0A8; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5050FC2A; call [0x5054A0E4] 
0x5050f8a9  # adc eax, 0x5054A0A8; mov esi, eax; cmp esi, 0xFFFFFFFF; jne 0x5050F8D2; call [0x5054A0E4] 
0x5054401b  # adc eax, 0x5054A0A8; mov [0x50556CE4], eax; ret 
0x50538f45  # adc eax, 0x5054A1A8; push 0x50550FE0; call [0x5054A1A4] 
0x50536970  # adc eax, 0x5054A1A8; lea eax, [ebp-0x000002D8]; push eax; call [0x5054A1A4] 
0x50538904  # adc eax, 0x5054A1AC; mov esi, [ebp-0x04]; xor esi, [ebp-0x08]; call [0x5054A138]; xor esi, eax; call [0x5054A044] 
0x50538904  # adc eax, 0x5054A1AC; mov esi, [ebp-0x04]; xor esi, [ebp-0x08]; call [0x5054A138] 
0x5050732d  # adc eax, 0x5054A0B0; test eax, eax; je 0x50507349; push esi; push [edi+0x000037F4]; call [0x5055CA10] 
0x50537aaf  # adc eax, 0x5054A1B0; test eax, eax; je 0x50537ACD; push 0x50550EFC; push eax; call [0x5054A088] 
0x50506191  # adc eax, 0x83FFFFB0; enter 0x5FFF, 0x5E; pop ebx; leave; retn 0x000C 
0x5050d8bc  # adc eax, 0x5054A0C0; push esi; mov edi, eax; call [0x5054A060] 
0x5051e2bc  # adc eax, 0x5054A0C0; test eax, eax; jne 0x5051E2CA; or eax, 0xFFFFFFFF; leave; ret 
0x505401ff  # adc eax, 0x5054A0C0; test eax, eax; jne 0x50540212; call [0x5054A0E4] 
0x5052f2dd  # adc eax, 0x5054A0C0; mov ebx, eax; test ebx, ebx; jne 0x5052F2F6; call [0x5054A0E4] 
0x50546ae0  # adc eax, 0x5055DFC0; pop esi; pop ebx; pop edi; leave; retn 0x0008 
0x5053240e  # adc eax, 0x8302E9C1; loop 0x50532418; cmp ecx, 0x08; jc 0x50532444; rep movsd; jmp [0x50532534+edx*4] 
0x5053277e  # adc eax, 0x8302E9C1; loop 0x50532788; cmp ecx, 0x08; jc 0x505327B4; rep movsd; jmp [0x505328A4+edx*4] 
0x5052d511  # adc eax, 0x154489C4; in al, 0x83; retn 0x8304 
0x5050ec4e  # adc eax, 0x5054A0C4; push edi; lea eax, [ebp-0x00000308]; push eax; call [0x5054A0B4] 
0x50513a65  # adc eax, 0x5054A0C8; push esi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x50513665  # adc eax, 0x5054A0C8; push edi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x5050ebb8  # adc eax, 0x5054A0C8; push edi; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0B4] 
0x50513657  # adc eax, 0x5054A0CC; lea eax, [ebp-0x10]; push eax; lea eax, [ebp-0x08]; push eax; call [0x5054A0C8] 
0x5050eba4  # adc eax, 0x5054A0CC; lea eax, [ebp-0x00000310]; push eax; lea eax, [ebp-0x00000300]; push eax; call [0x5054A0C8] 
0x5050ec3a  # adc eax, 0x5054A0CC; lea eax, [ebp-0x00000308]; push eax; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0C4] 
0x5050ef31  # adc eax, 0x5054A0D0; mov [ebp-0x04], eax; cmp eax, ebx; je 0x5050F08E; push eax; call [0x5054A0DC] 
0x5054672e  # adc eax, 0x5054A0D4; test eax, eax; jnl 0x5054673B; or eax, 0xFFFFFFFF; ret 
0x50503dbd  # adc eax, 0x5054A0D4; test eax, eax; jnl 0x50503DCE; push ebx; push esi; call [0x5054A18C] 
0x50513e54  # adc eax, 0x5054A0D4; mov esi, eax; test esi, esi; jne 0x50513E71; push 0x5055CA4C; call [0x5054A154] 
0x50546b23  # adc eax, 0x5054A0D4; mov eax, [0x5055DFC4]; test eax, eax; je 0x50546B35; call eax 
0x5050ef23  # adc eax, 0x5054A0D8; push 0x00000040; push [ebp+0x0C]; push [ebp-0x04]; call [0x5054A0D0] 
0x50512465  # adc eax, 0x5054A0D8; call [0x5054A188] 
0x505122ab  # adc eax, 0x5054A0D8; push [esi]; call [0x5054A0E0] 
0x5050ede4  # adc eax, 0x5054A0D8; push [ebp-0x04]; call [0x5054A0E0] 
0x50538516  # adc eax, 0x5054A1DC; push [esi]; push 0x00000000; push [0x5055D69C]; call edi 
0x5050f8e2  # adc eax, 0x5054A0E4; test eax, eax; je 0x5050F8F9; push esi; call [0x5054A060] 
0x5051e3cc  # adc eax, 0x5054A0E4; neg eax; sbb eax, eax; ret 
0x50538f73  # adc eax, 0x5054A1E4; leave; ret 
0x50518048  # adc eax, 0xFFD396E8; call [eax+0x57] 
0x5053e056  # adc eax, 0x5054A0E8; pop edi; pop esi; pop ebx; leave; ret 
0x5051e369  # adc eax, 0x5054A0E8; test eax, eax; jne 0x5051E377; or eax, 0xFFFFFFFF; leave; ret 
0x5052f42d  # adc eax, 0x5054A0E8; mov ebx, eax; cmp ebx, ebp; jne 0x5052F443; call [0x5054A0E4] 
0x50538b11  # adc eax, 0x5054A1E8; push 0x00000000; mov ebx, eax; call [0x5054A1A8] 
0x50548cee  # adc eax, 0xFFF7FEE8; call [edi-0x18] 
0x50542256  # adc eax, 0x5054A0EC; mov [ebp-0x08], eax; cmp eax, edi; jne 0x50542275; call [0x5054A0E4] 
0x5051e3ed  # adc eax, 0x5054A0EC; mov edx, eax; mov eax, [ebp-0x08]; leave; ret 
0x50542597  # adc eax, 0x5054A0EC; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x505425AB; call [0x5054A0E4] 
0x5051e3c6  # adc eax, 0x5054A0EC; call [0x5054A0E4]; neg eax; sbb eax, eax; ret 
0x5051e3c6  # adc eax, 0x5054A0EC; call [0x5054A0E4] 
0x5052478f  # adc eax, 0x59FFFFFB; pop ecx; ret 
0x5054693f  # adc eax, 0xE07C35FF; push ebp; push eax; mov [0x5055E000], eax; call esi 
0x50524fda  # adc eax, 0x8B1475FF; ret 
0x5053e6d3  # adc eax, 0x83FFFFFF; les ebx, [eax]; pop ebp; ret 
0x5050f887  # adc eax, 0xF6FFFFFF; retn 0x0F01 
0x50533fd9  # push ss; add byte [eax], al; add byte [ebx+0x5F5EFFC8], al; pop ebx; leave; ret 
0x5053b4e1  # push ss; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; leave; ret 
0x5053754f  # push ss; add byte [eax], al; pop ecx; ret 
0x50537093  # push ss; add byte [eax], al; ret 
0x50506435  # push ss; push eax; push 0x0000FFFF; push eax; call [0x5054A074] 
0x5053ee41  # push ss; push ebp; push eax; push eax; call [0x5054A088] 
0x5053ee32  # push ss; push ebp; push eax; call [0x5054A224] 
0x5054067f  # push ss; pop eax; pop edi; pop esi; pop ebp; ret 
0x50509b90  # push ss; jbe 0x50509B92; dec [ebx+0x5B5E5FC6]; pop ebp; retn 0x0010 
0x50541264  # push ss; and [ebp-0x04], 0x00000000; call eax 
0x5050d7c3  # push ss; mov esi, [ebp-0x74]; push esi; call edi 
0x505481e5  # push ss; lea eax, [ebp-0x10]; push eax; push [ebp-0x14]; call [0x5054A014] 
0x50546953  # push ss; push [0x5055E07C]; call esi 
0x505083fb  # push ss; push [ebp+0x10]; push esi; call [0x5054A050] 
0x50508417  # push ss; push [ebp+0x14]; push esi; call [0x5054A050] 
0x50508433  # push ss; push [ebp+0x18]; push esi; call [0x5054A050] 
0x5054724a  # push ss; push [ebp-0x34]; push [ebp-0x38]; push [ebp-0x3C]; call [0x5054A044] 
0x50512dc6  # push ss; push [ebp-0x30]; push [ebp-0x34]; push [ebp-0x38]; call [0x5054A044] 
0x5051e4ef  # push ss; push [ebp-0x28]; push [ebp-0x2C]; push [ebp-0x30]; call [0x5054A044] 
0x5054681e  # pop ss; add byte [eax], al; jc 0x50546AEC; push 0x00000002; push [0x5055E07C]; call esi 
0x505034a4  # pop ss; add byte [eax], al; mov [esi+0x10], ebx; mov [esi+0x14], ebx; mov [esi+0x18], ebx; call [0x5054A050] 
0x50536f79  # pop ss; add byte [eax], al; ret 
0x50516dc6  # pop ss; add al, 0x52; push [ecx+0x50]; call [eax+0x0C] 
0x5051e835  # pop ss; xor eax, eax; mov byte [edx], 0x00; inc eax; ret 
0x5050d711  # pop ss; cmp edi, edi; call [eax-0x007F] 
0x50537330  # pop ss; push eax; push [0x50555FB4]; call esi; call eax 
0x50537330  # pop ss; push eax; push [0x50555FB4]; call esi 
0x505243a4  # pop ss; push eax; push [ebp+0x08]; call [edi+0x04] 
0x5051a2bc  # pop ss; push ebx; push eax; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x50516182  # pop ss; push ebx; push eax; mov [edx+0x00002990], 0x50516148; pop edi; ret 
0x50548418  # pop ss; push 0x80000001; call esi 
0x5050b7f2  # pop ss; push 0x5054ABB0; push eax; call [0x5054A05C] 
0x50511322  # pop ss; push 0x00000064; call [0x5054A048] 
0x50515779  # pop ss; mov ecx, [esi]; add [eax+0x18], ecx; ret 
0x50534383  # pop ss; mov eax, [esp+0x08]; pop edi; ret 
0x5053438c  # pop ss; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x50542129  # pop ss; lea ebx, [esi+0x0C]; push ebx; call [0x5054A020] 
0x5054695d  # pop ss; push [0x5055E07C]; mov [0x5055E008], eax; call esi 
0x505467cc  # pop ss; push [0x5055E07C]; call [0x5054A094] 
0x50546fb1  # pop ss; push [ebp+0x0C]; push [ebp+0x08]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x505484a3  # pop ss; push [ebp-0x0080]; push [ebp-0x78]; call [0x5054A014] 
0x5051792d  # sbb byte [eax], al; add byte [esi-0x18], dl; dec edx; retn 0x0001 
0x505374f0  # sbb byte [eax], al; add byte [ecx-0x7D], bl; cld; add bh, bh; jbe 0x50537563; call [0x5054A15C] 
0x505083a6  # sbb byte [eax], al; je 0x505083B3; push [ebp+0x18]; call ebx 
0x50508430  # sbb byte [eax], al; je 0x5050844A; push [ebp+0x18]; push esi; call [0x5054A050] 
0x5052f3c1  # sbb byte [eax], al; jne 0x5052F3DF; cmp [esp+0x04], 0x00008000; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C] 
0x5052f4f6  # sbb byte [ecx], al; add byte [eax], al; add byte [edi-0x37], bl; ret 
0x5052671f  # sbb byte [ecx], al; add byte [eax], al; add byte [ebx+0x57006A07], cl; call [eax+0x1C] 
0x50516b05  # sbb byte [ecx], al; add byte [eax], al; ret 
0x5053b940  # sbb byte [ecx], al; dec esi; sbb al, 0x33; rcr byte [ebx+0x5F], 0x5E; leave; ret 
0x50514b7a  # sbb byte [edx], al; add byte [eax], al; push [ecx+0x10]; push [edi+0x50]; call [eax+0x10] 
0x50547d71  # sbb byte [edx], al; pop ebx; je 0x50547D81; push 0x000000FF; call [0x5054A1B4] 
0x50524339  # sbb byte [ebx], al; retn 0xC13B 
0x5051fe53  # sbb byte [ebx], al; retn 0x4589 
0x5053119b  # sbb byte [ebx], al; retn 0x558B 
0x50547a49  # sbb byte [edi], cl; add byte [eax], al; jc 0x50547A1E; pop edi; pop esi; retn 0x000C 
0x505479fb  # sbb byte [edi], cl; add byte [eax], al; jc 0x505479E9; xor eax, eax; retn 0x0004 
0x5054112d  # sbb byte [edi], cl; xchg eax, esp; retn 0xC28B 
0x50533fff  # sbb byte [edi], cl; xchg eax, ebp; retn 0xC28B 
0x5052f3ff  # sbb byte [ebx], ah; clc; call [0x5054A144] 
0x5051e74d  # sbb byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; leave; ret 
0x50507857  # sbb byte [ecx], bh; jne 0x50507857; je 0x50507866; push [ebp-0x04]; call [0x5055CA0C] 
0x505017ea  # sbb byte [ebx], bh; inc esp; and al, 0x10; jne 0x505017FC; call [0x5054A044] 
0x50510350  # sbb byte [ebx], bh; ret 
0x505150df  # sbb byte [ebx], bh; lock jne 0x505150A1; xor eax, eax; pop esi; leave; ret 
0x50510f93  # sbb byte [ebx-0x75], al; ret 
0x5050d45b  # sbb byte [edi+0x02], cl; add cl, cl; retn 0x000C 
0x5050824d  # sbb byte [eax+0x57], dl; call [0x5055CA2C] 
0x50527e2b  # sbb byte [eax-0x75], dl; ret 
0x5050820f  # sbb byte [eax-0x41], dl; add [eax], eax; add [eax], eax; push edi; call [0x5055CA2C] 
0x5054740e  # sbb byte [esi+0x57], dl; push [ebp+0x0C]; push [ebp+0x08]; push 0xFFFFFFFF; call eax 
0x50508436  # sbb byte [esi-0x01], dl; adc eax, 0x5054A050; mov ecx, [edi]; push esi; mov [ecx+0x1C], eax; call ebx 
0x50539ef0  # sbb byte [edi-0x01], dl; jne 0x50539EE9; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x50513e2c  # sbb byte [edi-0x01], dl; salc; push 0x00001388; push 0x5055CA4C; call [0x5054A108] 
0x50541099  # sbb byte [eax+0x5E], bl; ret 
0x505106a2  # sbb byte [edi+0x5E], bl; pop ebx; leave; retn 0x0014 
0x5051d4fc  # sbb byte [edi+0x5E], bl; mov eax, ebx; pop ebx; ret 
0x5052a7c8  # sbb byte [edi+0x5E], bl; ret 
0x5051ffe7  # sbb byte [edi+0x5E], bl; leave; ret 
0x5051fddf  # sbb byte [edi-0x77], bl; add [ebx], esi; rcr byte [esi+0x40], 0x5B; pop ebp; ret 
0x50538a1a  # sbb byte [eax+0x55], ah; push eax; ret 
0x50537362  # sbb byte [eax-0x6C], ch; push cs; push ebp; push eax; push eax; call [0x5054A088] 
0x505373dd  # sbb byte [eax-0x40], ch; push cs; push ebp; push eax; push eax; call [0x5054A088] 
0x50518de1  # sbb byte [edx+0x00], ch; push [esp+0x14]; push [esp+0x14]; push esi; call eax 
0x5051bf6f  # sbb byte [eax+ecx+0x57], dh; push esi; call [eax] 
0x50527017  # sbb byte [edx+ecx-0x48], dh; xchg eax, esp; retn 0x5054 
0x50505e3f  # sbb byte [esi+ebx-0x01], dh; jne 0x50505E5D; call esi 
0x50543a13  # sbb byte [eax+0x7400FC7D], al; pop es; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x50525803  # sbb byte [ebx+0x0F00FC7D], al; test byte [esi-0x75000000], bl; ret 
0x50541f32  # sbb byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x505069a3  # sbb byte [ebp+0x500774C0], al; call ebx 
0x50506eeb  # sbb byte [ebp+0x501274C0], al; push edi; call [0x5054A050]; push edi; mov [esi+0x18], eax; call ebp 
0x50506eeb  # sbb byte [ebp+0x501274C0], al; push edi; call [0x5054A050] 
0x50506a96  # sbb byte [ebp+0x503774C0], al; call ebx 
0x505015ad  # sbb byte [ebp-0x74EE8B37], al; inc esi; xor byte [ebp+0x500A74C0], al; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x505056de  # sbb byte [ebp-0x74FB8B25], al; ret 
0x505036e7  # sbb byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x50515262  # sbb byte [eax+0x5FFF1144], cl; ret 
0x505203ec  # sbb byte [ecx+0x40C03301], cl; pop edi; pop esi; pop ebx; leave; ret 
0x5050ee7b  # sbb byte [ecx+0x468BE045], cl; and byte [ecx+0x468BDC45], cl; sub byte [ecx-0x1F7C27BB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5050ac4e  # sbb byte [ecx+0x468BEC45], cl; and byte [ecx+0x468BE845], cl; sub byte [ecx-0x1F7C1BBB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x50515708  # sbb byte [ebx-0x7C3DD4FF], cl; clc; add [ebp+0x03], edi; xor eax, eax; ret 
0x50515794  # sbb byte [ebx-0x3DD4EBC0], cl; add eax, ecx; ret 
0x505311a3  # sbb byte [ebx+0x035F1C41], cl; retn 0x895E 
0x50507c60  # sbb byte [ebx-0x4B76F3BB], cl; ret 
0x5051220f  # sbb byte [ebx-0x173EE7BB], cl; or al, 0x40; shl eax, 0x0C; push eax; push 0x00000042; call [0x5054A194] 
0x5052e134  # sbb byte [ebx+0x088B0847], cl; push 0x00000002; push 0x5054A2FC; push eax; call [ecx+0x08] 
0x5051525c  # sbb byte [ebx+0x568B104E], cl; sbb byte [eax+0x5FFF1144], cl; ret 
0x505032fc  # sbb byte [ebx+0x00BB084F], cl; add al, byte [eax]; add byte [ebp+0x530974C9], al; push ecx; push eax; call [0x5054A04C] 
0x50546f87  # sbb byte [ebx+0x06EB5EC6], cl; push [esp+0x04]; call eax; retn 0x0004 
0x50546f87  # sbb byte [ebx+0x06EB5EC6], cl; push [esp+0x04]; call eax 
0x50523587  # sbb byte [ebx+0x5B5E5FC7], cl; ret 
0x505036e1  # sbb byte [ebp+0x47891C5E], cl; sbb byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x50517f5e  # sbb byte [ebp-0x00A98B8D], cl; jnbe 0x50517F72; call [eax+0x08] 
0x5053f7cc  # sbb byte [ebp-0x00025B7B], cl; call [eax+0x53] 
0x50548458  # sbb byte [eax-0x3F7AAFAC], ah; je 0x50548437; push [ebp-0x78]; mov ebx, [0x5054A008]; call ebx 
0x5050141a  # sbb byte [ecx+0x5055C934], ah; mov [eax+ebx*4], esi; mov [esi+0x04], ebx; mov [esi], edi; call [0x5054A044] 
0x50506d10  # sbb byte [ebx+0x5650FFFF], ah; call [0x5054A038] 
0x50513e6b  # sbb byte [edx-0x097B0000], ch; jnle 0x50513E7C; push 0xFFFFFFFF; push edi; call [0x5054A18C] 
0x50503db5  # sbb byte [esi+0x5055C960], bh; push esi; call [0x5054A0D4] 
0x505066e9  # sbb dl, cl; push ebp; push eax; call esi 
0x5053e3cb  # sbb bh, bl; loopne 0x5053E3C5; les eax, [ecx+0x7A]; add eax, 0x5D40C033; ret 
0x505469a1  # sbb al, ah; push ebp; push eax; call esi 
0x505265d7  # sbb cl, ah; push ebp; push eax; pop esi; inc [0x5055D448]; ret 
0x5052642f  # sbb cl, ah; push ebp; push eax; ret 
0x5051613e  # sbb al, ch; add eax, 0x5FFFFFFD; pop esi; leave; ret 
0x505238c9  # sbb al, ch; ret 
0x5052f3aa  # sbb bh, bh; adc eax, 0x5054A060; xor eax, eax; add esp, 0x14; retn 0x0004 
0x5050f8e0  # sbb bh, bh; adc eax, 0x5054A0E4; test eax, eax; je 0x5050F8F9; push esi; call [0x5054A060] 
0x5054696c  # sbb bh, bh; xor eax, 0x5055E07C; mov [0x5055E00C], eax; call esi 
0x5050fc76  # sbb bh, bh; jne 0x5050FC8E; call [0x5054A0E8] 
0x5053a0c4  # sbb bh, bh; jne 0x5053A0DC; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5054A1FC] 
0x50546d93  # sbb bh, bh; jne 0x50546DAB; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50510580  # sbb bh, bh; jne 0x50510598; call esi 
0x505438dc  # sbb bh, bh; jne 0x505438C4; push 0x00000001; push [ebp+0x1C]; call esi 
0x5054387d  # sbb bh, bh; jne 0x50543865; push 0x00000009; push [ebp+0x1C]; call esi 
0x50539f79  # sbb bh, bh; jne 0x50539F75; push esi; push ebx; push [ebp+0x20]; call [0x5054A190] 
0x505083ac  # sbb bh, bh; ror [ebp-0x7CFEF98C], cl; jnl 0x505083D2; add byte [ecx+ecx-0x01], dh; jne 0x505083D8; call ebx 
0x5051e818  # sbb [edi], ecx; xchg eax, esp; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x5050a223  # sbb [ecx], edi; pop ebp; or al, 0x74; or eax, 0x561075FF; push [ebp+0x0C]; call [0x5054A04C] 
0x505476e9  # sbb [ebx], edi; je 0x50547780; push esi; call [0x5054A03C] 
0x50544592  # sbb [edi+0x5B], ebx; leave; ret 
0x50503d7c  # sbb [edx-0x02], ebp; push esi; call [0x5054A068]; push esi; call [0x5054A064] 
0x50503d7c  # sbb [edx-0x02], ebp; push esi; call [0x5054A068] 
0x5053393b  # sbb [edi+0x11], esi; add eax, 0x20; pop ebp; ret 
0x50533132  # sbb [edi+0x11], esi; add eax, 0xFFFFFFE0; pop ebp; ret 
0x50501728  # sbb [ebx+0x0010247C], eax; je 0x50501742; call [0x5054A044] 
0x5050775a  # sbb [ebp+0x0037F4BB], ecx; add byte [ebx+0x74C63B07], cl; or dl, byte [esi+0x50]; call [0x5055CA08] 
0x50504ef0  # sbb eax, ebp; pushfd; retn 0xFFFF 
0x5054697b  # sbb edi, edi; xor eax, 0x5055E07C; mov [0x5055E010], eax; call esi 
0x50523fcb  # sbb al, byte [eax]; add byte [ebx], al; ret 
0x5052e88f  # sbb al, byte [ebx]; push edx; lea edx, [ebp-0x78]; push edx; push eax; call [ecx+0x08] 
0x50532db9  # sbb bl, byte [eax]; add byte [eax], al; add esp, 0x0C; pop ebp; ret 
0x50508147  # sbb ch, byte [ebx]; retn 0x1174 
0x50535f2e  # sbb bl, byte [eax+0x5E]; ret 
0x5050646f  # sbb ch, byte [edx+0x00]; push 0x0000FFFF; push 0x00000000; call [0x5054A074] 
0x5053b6fa  # sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5052f3c4  # sbb al, byte [ecx+0x0004247C]; add byte [eax], 0x00; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C] 
0x50544c5a  # sbb al, byte [ebx+0x7319B47D]; or bh, bh; inc ebp; mov ah, 0x2A; ret 
0x50532260  # sbb cl, byte [ebx-0x36A1A43D]; ret 
0x50509133  # sbb dh, dh; ret 
0x5054698a  # sbb bh, bh; xor eax, 0x5055E07C; mov [0x5055E014], eax; call esi 
0x50515d55  # sbb eax, [ecx]; add byte [ebx+0x3B591046], cl; ret 
0x5051128b  # sbb eax, [edx]; add byte [ebx-0x7AA6A608], cl; push [esi+eax*4+0x57]; lea ebx, [edi+0x01]; call [0x5054A03C] 
0x5052d271  # sbb eax, [ebx]; sal byte [ebx], cl; retn 0x4589 
0x50536a16  # sbb edx, [esp+0x0C]; neg edx; neg eax; sbb edx, 0x00000000; pop ebx; retn 0x0010 
0x5050a58b  # sbb ebp, [edi+edi*8-0x01]; or eax, 0xFFFFFFFF; pop edi; pop esi; pop ebp; retn 0x000C 
0x505103d3  # sbb eax, eax; and eax, [ebp-0x54]; push 0x80000000; push [ebp+0x0C]; mov [esi+0x00000AA0], eax; call [0x5054A0A8] 
0x5053a18c  # sbb eax, eax; and eax, ecx; add eax, 0x08; pop ebp; ret 
0x5054268a  # sbb eax, eax; and eax, 0x0000C000; add eax, 0x00004000; pop ebp; ret 
0x5051df58  # sbb eax, eax; inc eax; pop esi; pop ebp; ret 
0x5051eb1e  # sbb eax, eax; pop ecx; inc eax; ret 
0x505283a0  # sbb eax, eax; pop ecx; not eax; pop ecx; and eax, 0x5054BC28; ret 
0x5051486f  # sbb eax, eax; pop edi; pop esi; ret 
0x50537f21  # sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x5054A1BC] 
0x5051e1e7  # sbb eax, eax; and eax, 0xFFFFFFFE; inc eax; pop ebp; ret 
0x50514888  # sbb eax, eax; ret 
0x50533b34  # sbb eax, eax; shl eax, 1; add eax, 0x01; ret 
0x505410ef  # sbb eax, eax; neg eax; pop ecx; dec eax; pop ebp; ret 
0x50527829  # sbb eax, eax; neg eax; pop edi; pop esi; ret 
0x5051d0ea  # sbb eax, eax; neg eax; ret 
0x50543dbc  # sbb ecx, ecx; not ecx; and ecx, eax; push ecx; push edi; call [0x5054A168] 
0x5051e1b9  # sbb ecx, ecx; neg ecx; add ecx, [ebp+0x10]; add eax, ecx; pop ebp; ret 
0x5053ec3a  # sbb ebp, eax; push ebp; mov ch, 0xFF; call [ebx+0x53] 
0x50546999  # sbb edi, edi; xor eax, 0x5055E07C; mov [0x5055E018], eax; call esi 
0x50503971  # sbb edi, edi; jne 0x50503985; call [0x5054A03C] 
0x5052f3fa  # sbb edi, edi; lea eax, [esp+0x18]; and edi, eax; call [0x5054A144] 
0x5052f745  # sbb al, 0x00; je 0x5052F752; mov [esi+0x10], 0x00000001; pop esi; ret 
0x505083b5  # sbb al, 0x00; je 0x505083C2; push [ebp+0x1C]; call ebx 
0x5050844c  # sbb al, 0x00; je 0x50508462; push [ebp+0x1C]; push esi; call [0x5054A050] 
0x5052f5c5  # sbb al, 0x01; add byte [eax], al; add byte [ebx-0x36A4A13A], cl; ret 
0x50516b22  # sbb al, 0x01; add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x50507068  # sbb al, 0x01; add byte [eax], al; push [ebp+0x0C]; call ebx 
0x50510726  # sbb al, 0x02; add cl, cl; retn 0x0014 
0x5052434a  # sbb al, 0x03; retn 0xC13B 
0x50505c96  # sbb al, 0x05; add byte [eax], al; lea eax, [esi+0x00000520]; push eax; call ebx 
0x505201f7  # sbb al, 0x08; inc [esi+0x000081A4]; pop ebx; ret 
0x50537301  # sbb al, 0x14; add byte [eax], al; ret 
0x50546608  # sbb al, 0x22; push ebp; push eax; push [0x5055E078]; mov [0x5055DF88], eax; call esi 
0x505464a0  # sbb al, 0x23; push ebp; push eax; push [0x5055E078]; mov [0x5055DF3C], eax; call esi 
0x505182cf  # sbb al, 0x2D; add byte [eax], al; call [0x5054A188] 
0x5053b943  # sbb al, 0x33; rcr byte [ebx+0x5F], 0x5E; leave; ret 
0x5051d919  # sbb al, 0x33; sar byte [ebx], cl; dec eax; and byte [edi], cl; pushfd; retn 0xC28B 
0x50514706  # sbb al, 0x3B; ret 
0x50513ff5  # sbb al, 0x40; pop ebp; retn 0x0010 
0x5050528d  # sbb al, 0x51; call [0x5054A070] 
0x50541adb  # sbb al, 0x53; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call [0x5054A190] 
0x505036ef  # sbb al, 0x53; call [0x5054A03C] 
0x5050cb76  # sbb al, 0x56; call [0x5054A03C] 
0x50508452  # sbb al, 0x56; call [0x5054A050]; mov ecx, [edi]; push esi; mov [ecx+0x20], eax; call ebx 
0x50508452  # sbb al, 0x56; call [0x5054A050] 
0x5050370f  # sbb al, 0x57; call [0x5054A038] 
0x505012b5  # sbb al, 0x57; call [0x5054A03C] 
0x5052719a  # sbb al, 0x59; pop ecx; xor eax, eax; inc eax; pop esi; ret 
0x505266eb  # sbb al, 0x59; pop ecx; pop esi; ret 
0x50515d37  # sbb al, 0x59; pop ecx; mov [esi+0x000028F0], edi; ret 
0x5052c646  # sbb al, 0x5B; leave; ret 
0x5053eda3  # sbb al, 0x5D; ret 
0x50527a7c  # sbb al, 0x5E; ret 
0x5052f13b  # sbb al, 0x5F; pop esi; pop ebx; leave; ret 
0x505152ff  # sbb al, 0x5F; pop esi; ret 
0x5051d3c1  # sbb al, 0x5F; mov eax, esi; pop esi; ret 
0x50538a0e  # sbb al, 0x60; push ebp; push eax; ret 
0x5050c51b  # sbb al, 0x68; sbb al, 0xAC; push esp; push eax; push esi; call ebx 
0x50523a14  # sbb al, 0x74; or eax, 0x74145639; or byte [ebx], bh; retn 0x0474 
0x50505e16  # sbb al, 0x75; add eax, 0xEBF45D89; pop ds; push [ebp+0x1C]; call esi 
0x50523c4c  # sbb al, 0x83; ret 
0x505266b7  # sbb al, 0x83; les ecx, [esi+ebx*2]; ret 
0x5051d9ad  # sbb al, 0x83; les esi, [eax]; pop edi; pop esi; ret 
0x505069b1  # sbb al, 0x85; sal byte [edi+eax+0x50], 0xFF; ror [ebp-0x74FEF98C], cl; inc edi; and byte [ebp+0x500774C0], al; call ebx 
0x50506c0e  # sbb al, 0x85; sal byte [edi+eax+0x50], 0xFF; ror [ebp-0x74FDB98C], cl; inc edi; and byte [ebp+0x500774C0], al; call ebx 
0x5051d0ac  # sbb al, 0x85; sal byte [eax+edx-0x73], 0x45; call [eax-0x75] 
0x50506f04  # sbb al, 0x85; sal byte [edx+edx+0x50], 0x57; call [0x5054A050]; push edi; mov [esi+0x1C], eax; call ebp 
0x50506f04  # sbb al, 0x85; sal byte [edx+edx+0x50], 0x57; call [0x5054A050] 
0x505073d9  # sbb al, 0x85; push [eax+esi+0x57]; call [0x5054A03C] 
0x50526de1  # sbb al, 0x89; inc ebp; or byte [esi+0x3B], dl; ret 
0x5051f377  # sbb al, 0x89; inc esi; or al, 0x8D; inc esi; adc al, 0x33; call [eax-0x39] 
0x505036e4  # sbb al, 0x89; inc edi; sbb byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x50512f24  # sbb al, 0x89; jne 0x50512ED0; call [0x5054A188] 
0x50548ec2  # sbb al, 0x8A; add byte [edx], bh; ret 
0x50548e40  # sbb al, 0x8A; add [edx], edi; ret 
0x5052672b  # sbb al, 0x8B; pop es; push 0x00000000; push 0x00000000; push edi; call [eax+0x08] 
0x50503784  # sbb al, 0x8D; xor al, 0xB8; call [0x5054A044] 
0x50548e4b  # sbb al, 0x8D; inc ebp; and al, 0x50; call [0x5054A04C] 
0x5052f16e  # sbb al, 0x8D; inc ebp; in al, 0x50; call [0x5054A120] 
0x505273e1  # sbb al, 0x8D; push esp; adc [ebx+edi], ecx; retn 0x1B7D 
0x50505cd3  # sbb al, 0x8D; xchg byte [ecx+eax], dl; add byte [eax], al; push eax; call ebx 
0x5053c278  # sbb al, 0xA2; push esp; push eax; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x505066cc  # sbb al, 0xA5; push esp; push eax; push [0x5055C9F4]; mov [0x5055CA14], eax; call esi 
0x5050c51d  # sbb al, 0xAC; push esp; push eax; push esi; call ebx 
0x50503781  # sbb al, 0xB8; je 0x505037A1; lea esi, [eax+edi*4]; call [0x5054A044] 
0x505317b2  # sbb al, 0xC3; mov eax, [esp+0x04]; mov eax, [eax+0x1C]; ret 
0x505167d9  # sbb al, 0xC3; mov eax, 0x00001000; ret 
0x505317ba  # sbb al, 0xC3; ret 
0x505066fb  # sbb al, 0xCA; push ebp; push eax; call esi 
0x505394b1  # sbb al, 0xDB; push ebp; push eax; add [eax], eax; add byte [eax], al; call [0x5054A1F0] 
0x5053948e  # sbb al, 0xDB; push ebp; push eax; add [eax], eax; add byte [eax], al; call [0x5054A1F4] 
0x5054641b  # sbb al, 0xDF; push ebp; push eax; call esi 
0x505469b0  # sbb al, 0xE0; push ebp; push eax; call esi 
0x505428f1  # sbb al, 0xE8; sahf; js 0x505428F5; call [esi+0x56] 
0x5051939e  # sbb al, 0xE8; retn 0x0035 
0x5052f76d  # sbb al, 0xFF; adc eax, 0x5054A13C; pop esi; ret 
0x505469a8  # sbb al, 0xFF; xor eax, 0x5055E07C; mov [0x5055E01C], eax; call esi 
0x50505a47  # sbb al, 0xFF; jne 0x50505A53; call edi 
0x50505e8b  # sbb al, 0xFF; jne 0x50505E9B; call esi 
0x50503afc  # sbb al, 0xFF; jne 0x50503B0C; call edi 
0x50509ef2  # sbb al, 0xFF; jne 0x50509F06; lea eax, [ebp-0x44]; push 0x5054AB24; push eax; call [0x5054A03C] 
0x5050f356  # sbb al, 0xFF; call [eax-0x73]; xchg [eax+0x50000004], eax; call [0x5054A038] 
0x5050f356  # sbb al, 0xFF; call [eax-0x73] 
0x50548464  # sbb eax, 0x5054A008; call ebx 
0x50539397  # sbb eax, 0x80D18A10; retn 0xEB20 
0x50539482  # sbb eax, 0x5055DB1C; cmp esi, 0xFFFFFFFE; jne 0x505394AA; mov [0x5055DB1C], 0x00000001; call [0x5054A1F4] 
0x5050f8c4  # sbb eax, 0x75800427; add eax, 0x042712B8; adc byte [eax-0x15], 0x55; push ebx; push esi; call [0x5054A09C] 
0x5050f8f3  # sbb eax, 0xEB800427; push esi; call [0x5054A060] 
0x50531cdc  # sbb eax, 0x5055D530; push 0x5055D480; call [0x5054A19C] 
0x50506fc8  # sbb eax, 0x5054A03C; cmp [ebp+0x0C], esi; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x5050ba98  # sbb eax, 0x5054A03C; inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x505051f4  # sbb eax, 0x5054A03C; push edi; call ebx 
0x5050b35d  # sbb eax, 0x5054A03C; pop ecx; inc edi; push edi; mov word [esi+0x2E], ax; call ebx 
0x50508381  # sbb eax, 0x5054A03C; push 0x0000002C; pop esi; je 0x50508395; push [ebp+0x10]; call ebx 
0x50506be0  # sbb eax, 0x5054A03C; test eax, eax; je 0x50506BF0; push eax; call ebx 
0x5054860f  # sbb eax, 0x5054A03C; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5050a910  # sbb eax, 0x5054A03C; call ebx 
0x50506982  # sbb eax, 0x5054A040; test eax, eax; je 0x50506993; push eax; call ebx 
0x5050fac0  # sbb eax, 0x5054A04C; push 0x00000200; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x5050ca51  # sbb eax, 0x5054A04C; je 0x5050CA77; push 0x00000200; push [eax]; push edi; call ebx 
0x5050cfa9  # sbb eax, 0x5054A04C; call ebx 
0x50531866  # sbb eax, 0x5054A14C; push edi; push 0x00000001; push [ebp-0x0C]; call ebx 
0x5053181e  # sbb eax, 0x5054A150; push eax; mov [ebp-0x1C], 0x0000000C; mov [ebp-0x18], edi; call ebx 
0x505470f6  # sbb eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50539819  # sbb eax, 0x50556660; push ebx; call edi 
0x50507177  # sbb eax, 0x5054A060; call ebx; push [ebp-0x0C]; call ebx 
0x505318cb  # sbb eax, 0x5054A060; call ebx; push [ebp-0x04]; call ebx 
0x50507177  # sbb eax, 0x5054A060; call ebx 
0x505374b7  # sbb eax, 0x5054A088; call ebx; mov [esi+0x000001F8], eax; push 0x50550EC0; push [ebp-0x1C]; call ebx 
0x505374b7  # sbb eax, 0x5054A088; call ebx 
0x50507e9c  # sbb eax, 0x5054A188; call ebx 
0x5052cd2a  # sbb eax, 0x10BD3C8B; call [eax+edx*2+0x33] 
0x50516543  # sbb eax, 0x3B30468B; ret 
0x5052f0ff  # sbb eax, 0x8B08478B; or byte [edx+0x00], ch; push eax; call [ecx+0x1C] 
0x50506625  # sbb eax, 0x5054A08C; push 0x5054A5CC; call ebx; push 0x5054A5C0; mov [0x5055C9F0], eax; call ebx 
0x50506625  # sbb eax, 0x5054A08C; push 0x5054A5CC; call ebx 
0x5053829f  # sbb eax, 0x5055D694; call [0x5054A1C8] 
0x50538b56  # sbb eax, 0xC9FFFF98; ret 
0x5050c4de  # sbb eax, 0x5054A0B8; push 0x5054AC30; push edi; call ebx 
0x5053e10e  # sbb eax, 0xFFC081E8; call [ebx+0x53] 
0x50543bdd  # sbb eax, 0xFF65B2E8; call [ebx+0x53] 
0x5053c1c6  # sbb eax, 0xFFDFC9E8; call [esi+0x56] 
0x5053e1af  # sbb eax, 0xFFBFE0E8; call [edi+0x57] 
0x505426a6  # sbb eax, 0xFF7AE9E8; call [esi+0x56] 
0x50537769  # sbb eax, 0x59FFFFFC; call eax 
0x505469b7  # sbb eax, 0xE07C35FF; push ebp; push eax; mov [0x5055E020], eax; call esi 
0x5050c7f6  # sbb eax, 0x051075FF; fdiv qword [edx]; add byte [eax], al; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x5050f2e5  # sbb eax, 0x7D8BFFFF; or al, 0x50; push edi; call [0x5054A038] 
0x505496af  # push ds; push ebx; call [0x5054A03C] 
0x505493d1  # push ds; push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x505473f3  # push ds; push 0x00002714; call [0x5055DF88] 
0x5050f79d  # push ds; jne 0x5050F78D; push esi; lea eax, [ebp-0x1C]; push eax; call [0x5054A0B8] 
0x5052669c  # push ds; mov eax, [esi]; push esi; call [eax+0x18] 
0x5051c7ff  # push ds; mov eax, esi; pop esi; leave; ret 
0x5053948b  # push ds; mov [0x5055DB1C], 0x00000001; call [0x5054A1F4] 
0x5052419e  # push ds; loop 0x505241A1; add byte [ebx-0x74FF1B9B], al; ret 
0x505469c6  # push ds; push [0x5055E07C]; mov [0x5055E024], eax; call esi 
0x5050bba6  # push ds; push [esi]; call [0x5054A03C] 
0x50503ad7  # push ds; push [ebp+0x10]; call edi 
0x50505e66  # push ds; push [ebp+0x14]; call esi 
0x50505e41  # push ds; push [ebp+0x18]; call esi 
0x5050f618  # pop ds; add byte [eax], al; push eax; push 0x5054AC9C; push esi; call [0x5054A260] 
0x5052ef82  # pop ds; add byte [eax], al; push esi; call [eax+0x04] 
0x5052e234  # pop ds; add byte [eax], al; push edi; call [eax+0x04] 
0x5052e4d2  # pop ds; add byte [eax], al; mov esi, [esi+0x0C]; push esi; mov eax, [esi]; call [eax+0x04] 
0x5052e8ba  # pop ds; add byte [eax], al; mov esi, [esi+0x0C]; mov eax, [esi]; push esi; call [eax+0x04] 
0x5050f68d  # pop ds; add byte [eax], al; leave; retn 0x000C 
0x5051ea6f  # pop ds; add byte [eax], al; leave; ret 
0x5052218f  # pop ds; add byte [ebx+0x5B5F5DC3], cl; pop esi; ret 
0x5050ef74  # pop ds; add [eax], eax; add byte [ebx], bh; ret 
0x50545f24  # pop ds; add ecx, [eax]; add byte [ebp+eax+0x0D], dh; add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x505287ba  # pop ds; add al, 0x8B; popfd; push 0x8BFFFFFF; ret 
0x50534aee  # pop ds; ja 0x50534ECF; jmp [0x50535C2E+edi*4] 
0x5051f254  # pop ds; xor [ecx], eax; add byte [ecx+0x004FA0C5], al; add cl, cl; ret 
0x5050d6c0  # pop ds; push eax; call [0x5054A03C] 
0x5052d7ad  # pop ds; push esi; add byte [eax], al; add esp, 0x28; leave; ret 
0x50537939  # pop ds; push esi; call [0x5054A048] 
0x5050ca57  # pop ds; push 0x00000200; push [eax]; push edi; call ebx 
0x50501e9f  # pop ds; je 0x50501EB5; call [0x5054A188] 
0x5053ad5e  # pop ds; shl esi, 0x06; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x5054A0E4] 
0x505369a6  # pop ds; shl edx, cl; ret 
0x50542f36  # pop ds; shr eax, cl; ret 
0x5052f823  # pop ds; sar esi, cl; call [edi-0x18]; push 0x50FFFED0; push esi; call [esi+0x44] 
0x5052f823  # pop ds; sar esi, cl; call [edi-0x18] 
0x50504c54  # pop ds; xlatb; add al, byte [eax]; leave; retn 0x0010 
0x50502f87  # pop ds; loop 0x50502F89; inc [ebx+0x5E5FFFC8]; retn 0x0008 
0x505469d5  # pop ds; push [0x5055E07C]; mov [0x5055E028], eax; call esi 
0x505059fe  # pop ds; push [ebp+0x14]; call edi 
0x50505e1d  # pop ds; push [ebp+0x1C]; call esi 
0x5053fe58  # pop ds; push [edi+0x64]; push ebx; call [ebp-0x20] 
0x50545ecc  # and byte [eax], al; add byte [ebx+ebx+0x3D], dh; add byte [eax+0x00], al; add byte [esp+ecx+0x3B], dh; ret 
0x50524216  # and byte [eax], al; pop ecx; pop ecx; mov ecx, [esp+0x04]; mov [eax+0x04], ecx; ret 
0x50524e6b  # and byte [eax], al; pop ecx; pop ecx; mov [eax+0x04], 0x00001000; ret 
0x50541eac  # and byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop esi; pop ebp; ret 
0x50538272  # and byte [eax], al; inc [ecx]; leave; ret 
0x50513551  # and byte [ecx], al; add byte [eax], al; push 0x00000200; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x50516afd  # and byte [ecx], al; add byte [eax], al; mov [ecx], edx; mov eax, [eax+0x00000118]; ret 
0x5050d322  # and byte [ecx], al; add byte [eax], al; mov edi, [0x5054A03C]; push ebx; call edi 
0x50516b2c  # and byte [ecx], al; add byte [eax], al; ret 
0x5051027d  # and byte [edx], al; add cl, cl; retn 0x0014 
0x5052f370  # and byte [edx], al; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x50505cbe  # and byte [esi], al; add byte [eax], al; push eax; call ebx 
0x5051d91e  # and byte [edi], cl; pushfd; retn 0xC28B 
0x5054281b  # and byte [ebx], dh; sar byte [ecx], cl; pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x50501dc2  # and byte [ebx], bh; ret 
0x50519960  # and byte [eax+0x75], cl; sub al, 0x8B; inc edi; xor byte [ebx], bh; ret 
0x50506d89  # and byte [eax-0x18], dl; pushfd; mov byte [0x5650FFFF], al; call [0x5054A038] 
0x5053601c  # and byte [eax-0x01], dl; adc eax, 0x5054A020; pop ebp; ret 
0x50536058  # and byte [eax-0x01], dl; adc eax, 0x5054A024; pop ebp; ret 
0x5053fc02  # and byte [ebx+0x33], dl; fstp tword [ecx]; pop ebp; or al, 0x75; sbb eax, 0xFFA585E8; call [ebx+0x53] 
0x50508f2a  # and byte [ebx-0x01], dl; jbe 0x50508F4F; push [esi+0x18]; call edi 
0x50542983  # and byte [ebp+0x50], dl; push edi; mov [0x5055DEB8], eax; call esi 
0x50542998  # and byte [ebp+0x50], dl; push edi; mov [0x5055DEBC], eax; call esi 
0x505429ad  # and byte [ebp+0x50], dl; push edi; mov [0x5055DEC0], eax; call esi 
0x5054296b  # and byte [ebp+0x50], dl; push edi; call esi 
0x50542950  # and byte [ebp+0x50], dl; call [0x5054A08C] 
0x50535fe9  # and byte [esi-0x01], dl; adc eax, 0x5054A020; pop esi; pop ebp; ret 
0x5054909c  # and byte [edx-0x75], bl; inc ebp; sbb al, 0x8A; add byte [edx], bh; ret 
0x505162b9  # and byte [esi+0x5B], bl; pop ebp; ret 
0x50535cf2  # and byte [esi-0x37], bl; ret 
0x5052ef23  # and byte [edi+0x5B], bl; mov [esi+0x40], 0x00000001; xor eax, eax; pop esi; ret 
0x5051d37e  # and byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50538a14  # and byte [eax+0x55], ah; push eax; ret 
0x50516807  # and byte [edx+0x38], ch; pop eax; ret 
0x50536997  # and byte [ebx+0x06], dh; shld edx, eax, cl; shl eax, cl; ret 
0x50542f27  # and byte [ebx+0x06], dh; shrd eax, edx, cl; shr edx, cl; ret 
0x50508f26  # and byte [ebx+ecx+0x6A], dh; and byte [ebx-0x01], dl; jbe 0x50508F4F; push [esi+0x18]; call edi 
0x50515c4f  # and byte [ebp+0x03], dh; mov byte [eax], 0x5F; inc eax; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x5053a143  # and byte [eax+0x7400FC7D], al; pop es; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x50527494  # and byte [eax-0x74BDFB82], al; ret 
0x5050912d  # and byte [ebx+0x74FF107E], al; sbb dh, dh; ret 
0x5052f3be  # and byte [ebx+0x7500187E], al; sbb al, byte [ecx+0x0004247C]; add byte [eax], 0x00; jnl 0x5052F3DF; push [esi+0x08]; call [0x5054A13C] 
0x50526dde  # and byte [ebx+0x45891CC4], al; or byte [esi+0x3B], dl; ret 
0x505069bf  # and byte [ebp+0x500774C0], al; call ebx 
0x50506f1d  # and byte [ebp+0x501274C0], al; push edi; call [0x5054A050]; push edi; mov [esi+0x20], eax; call ebp 
0x50506f1d  # and byte [ebp+0x501274C0], al; push edi; call [0x5054A050] 
0x50506b12  # and byte [ebp+0x503774C0], al; call ebx 
0x5050ee81  # and byte [ecx+0x468BDC45], cl; sub byte [ecx-0x1F7C27BB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5050ac54  # and byte [ecx+0x468BE845], cl; sub byte [ecx-0x1F7C1BBB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5051f3f9  # and byte [ecx+0x468D0C46], cl; adc al, 0x33; call [eax-0x39] 
0x505104a1  # and byte [ecx-0x7938D782], cl; mov ah, 0x0A; add byte [eax], al; add [eax], eax; add byte [eax], al; call [0x5054A060] 
0x505033da  # and byte [ecx+0x000AA486], cl; add byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0010 
0x505421a3  # and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x5051556e  # and byte [ebx+0x035FFC4D], cl; rcr [esi+0x03], 0xFFFFFFC3; pop ebx; leave; ret 
0x505073d6  # and byte [ebx-0x007AE3A8], cl; je 0x5050740E; push edi; call [0x5054A03C] 
0x50535fed  # and byte [eax+0x5D5E5054], ah; ret 
0x505112f1  # and byte [eax+0x56C35054], ah; push [0x50555CA4]; push 0x50555CA4; call [0x5054A18C] 
0x50501131  # and byte [eax-0x003CAFAC], ah; xor eax, 0x5055520C; push 0x5055520C; call [0x5054A18C] 
0x50542130  # and byte [eax+0x46F65054], ah; add al, 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x5054642d  # and bh, bl; push ebp; push eax; call esi 
0x505469bf  # and al, ah; push ebp; push eax; call esi 
0x50539ff0  # and al, ch; ret 
0x50545b1e  # and bh, dh; ret 
0x50503dac  # and bh, dh; test [eax], 0x00004000; jne 0x50503DCE; mov esi, 0x5055C960; push esi; call [0x5054A0D4] 
0x505425d4  # and ch, bh; mov eax, edi; pop edi; pop esi; pop ebp; ret 
0x5053ad67  # and dh, bh; call [0x5054A0E4] 
0x5051d5db  # and bh, bh; xor byte [ebx+0x45E80478], cl; idiv edi; call [esi-0x01] 
0x505469e4  # and bh, bh; xor eax, 0x5055E07C; mov [0x5055E038], eax; call esi 
0x50504c1a  # and bh, bh; jne 0x50504C2A; call [0x5054A040] 
0x505071b1  # and bh, bh; jne 0x505071C1; call ebx 
0x505052bf  # and bh, bh; jne 0x5050529B; call [0x5054A280] 
0x50502272  # and bh, bh; jbe 0x5050228E; call [0x5054A27C] 
0x50508f1d  # and bh, bh; jbe 0x50508F39; call edi 
0x5050f155  # and bh, bh; inc [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0014 
0x50516ade  # and [eax], eax; mov eax, [esp+0x04]; test eax, eax; jne 0x50516AE9; ret 
0x505101d0  # and [edx], eax; add cl, cl; retn 0x0014 
0x50543bc0  # and [esi], eax; mov eax, [ebp-0x04]; pop esi; pop edi; leave; ret 
0x50525b16  # and [eax], edx; pop esi; ret 
0x50503cd6  # and [ebx], edi; ret 
0x505052a5  # and [ebp-0x30], eax; cmp [ebp-0x20], 0x00000000; je 0x505052BA; push [ebp-0x20]; call ebx 
0x505052b7  # and [ebp-0x20], eax; cmp [ebp-0x28], 0x00000000; je 0x505052E0; push [ebp-0x28]; call [0x5054A280] 
0x50527945  # and [esi+0x04], eax; pop esi; ret 
0x50544017  # and [ebp+0x50], edx; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544017  # and [ebp+0x50], edx; call [0x5054A0A8] 
0x5054662d  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DF90], eax; call esi 
0x5054663f  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DF94], eax; call esi 
0x50546651  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DF98], eax; call esi 
0x50546663  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DF9C], eax; call esi 
0x50546687  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x50546699  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFA8], eax; call esi 
0x505466ab  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFAC], eax; call esi 
0x505466bd  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFB4], eax; call esi 
0x505466cf  # and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFB8], eax; call esi 
0x5054667a  # and [ebp+0x50], edx; push [0x5055E078]; call esi 
0x50526a41  # and [edx-0x75], ebx; or byte [edi+0x50], dl; call [ecx+0x08] 
0x505492db  # and [ebp-0x24], ebx; push eax; mov [ebp-0x20], 0x00000094; call [0x5054A054] 
0x50542678  # and [eax+0x5E5FFF85], eax; pop ebx; jne 0x50542688; mov eax, 0x00008000; pop ebp; ret 
0x505366a2  # and [edi-0x1D250000], eax; pop ebp; ret 
0x5050d523  # and [eax+0x000000D8], ecx; xor eax, eax; inc eax; retn 0x000C 
0x50506623  # and [ebx+0x54A08C1D], ecx; push eax; push 0x5054A5CC; call ebx 
0x50524fef  # and [ebx-0x397CEFBB], ecx; or byte [ebx], al; ret 
0x50537326  # and [ecx+0x50555FB0], esp; cmp eax, 0xFFFFFFFF; je 0x50537348; push eax; push [0x50555FB4]; call esi 
0x505469f3  # and edi, edi; xor eax, 0x5055E07C; mov [0x5055E034], eax; call esi 
0x50512dbb  # and edi, edi; jne 0x50512D8B; call [0x5054A248] 
0x5051e4e4  # and edi, edi; jne 0x5051E4BC; call [0x5054A248] 
0x5051cec0  # and al, byte [eax]; xor eax, eax; pop esi; ret 
0x50534ad9  # and al, byte [ebx]; retn 0xCA03 
0x5051c3e4  # and cl, byte [ebx]; add byte [eax], al; pop edi; pop esi; pop ebp; ret 
0x5053ce17  # and ch, byte [edx]; retn 0xC0FE 
0x5052d59a  # and cl, byte [esi+0x00]; add byte [ebx-0x36A0F33C], al; ret 
0x505464e9  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF4C], eax; call esi 
0x505464fb  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF50], eax; call esi 
0x5054651f  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF58], eax; call esi 
0x50546531  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF5C], eax; call esi 
0x50546543  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF60], eax; call esi 
0x50546555  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF64], eax; call esi 
0x50546567  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF68], eax; call esi 
0x50546579  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF6C], eax; call esi 
0x5054658b  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF70], eax; call esi 
0x5054659d  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF74], eax; call esi 
0x505465af  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF78], eax; call esi 
0x505465c1  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF7C], eax; call esi 
0x505465e5  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF80], eax; call esi 
0x505465f7  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF84], eax; call esi 
0x5054661b  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF8C], eax; call esi 
0x505465d3  # and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DFB0], eax; call esi 
0x50546512  # and dl, byte [ebp+0x50]; push [0x5055E078]; call esi 
0x50538dde  # and bl, byte [ecx-0x77]; or byte [ebx-0x747D140F], cl; call [ebp-0x75] 
0x50541860  # and bl, byte [ecx-0x77]; or byte [ebx+0x33B5EBF1], cl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x50538e3f  # and bl, byte [ecx-0x77]; or byte [ebx+0x33C1EBF1], cl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x50533c68  # and cl, byte [ebp+0x000024A4]; add byte [eax], al; push ebx; push esi; call [ebp+0x10] 
0x50546a02  # and bh, bh; xor eax, 0x5055E07C; mov [0x5055E030], eax; call esi 
0x5050958c  # and bh, bh; jne 0x505095A0; push ebx; push [ebp+0x0C]; call [0x5054A04C] 
0x5052a6df  # and bh, bh; call [esi-0x75] 
0x505235f8  # and eax, [eax]; add byte [ecx+0x59], bl; leave; ret 
0x505096eb  # and eax, [ebp+0x67]; mov [eax+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x505207bc  # and eax, [ebp+0x67]; mov [eax+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; mov [eax+0x10], 0xC3D2E1F0; ret 
0x505103d5  # and eax, [ebp-0x54]; push 0x80000000; push [ebp+0x0C]; mov [esi+0x00000AA0], eax; call [0x5054A0A8] 
0x505463af  # and edx, [ebp+0x50]; push eax; call esi 
0x50546799  # and edx, [ebp+0x50]; mov ebx, eax; call [0x5054A08C]; push ebx; mov [0x5055E07C], eax; call esi 
0x50546799  # and edx, [ebp+0x50]; mov ebx, eax; call [0x5054A08C] 
0x50546383  # and edx, [ebp+0x50]; call [0x5054A08C]; push ebx; mov [0x5055E078], eax; call esi 
0x50546383  # and edx, [ebp+0x50]; call [0x5054A08C] 
0x505463b7  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF08], eax; call esi 
0x505463c9  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF0C], eax; call esi 
0x505463db  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF10], eax; call esi 
0x505463ed  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF14], eax; call esi 
0x505463ff  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF18], eax; call esi 
0x50546411  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF1C], eax; call esi 
0x50546423  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF20], eax; call esi 
0x50546435  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF24], eax; call esi 
0x50546447  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF28], eax; call esi 
0x50546459  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF2C], eax; call esi 
0x5054646b  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF30], eax; call esi 
0x5054647d  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF34], eax; call esi 
0x5054648f  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF38], eax; call esi 
0x505464a1  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF3C], eax; call esi 
0x505464b3  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF40], eax; call esi 
0x505464c5  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF44], eax; call esi 
0x505464d7  # and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF48], eax; call esi 
0x5052f45a  # and ebp, [edx+0x01]; lea eax, [esi+0x2C]; push eax; push edi; push [esi]; call [0x5054A140] 
0x50506850  # and edi, [ebx-0x3A7CFFFE]; js 0x50506821; ret 
0x5053a18e  # and eax, ecx; add eax, 0x08; pop ebp; ret 
0x50533add  # and eax, esi; pop esi; pop ebp; ret 
0x50543dc0  # and ecx, eax; push ecx; push edi; call [0x5054A168] 
0x50546a11  # and edi, edi; xor eax, 0x5055E07C; mov [0x5055E02C], eax; call esi 
0x50503665  # and edi, edi; jne 0x50503675; call [0x5054A040] 
0x50533c6b  # and al, 0x00; add byte [eax], al; add byte [ebx+0x56], dl; call [ebp+0x10] 
0x50523551  # and al, 0x00; add cl, al; clc; or byte [eax+0x76FF0247], cl; or al, ch; ret 
0x505476b0  # and al, 0x00; pop ebp; jmp eax 
0x50516a8f  # and al, 0x01; add byte [eax], al; ret 
0x5050ff36  # and al, 0x02; add cl, cl; retn 0x0014 
0x5051488d  # and al, 0x04; add byte [ebp+0x05], dh; neg eax; sbb eax, eax; ret 
0x5052f3c7  # and al, 0x04; add byte [eax+0x107D0000], al; push [esi+0x08]; call [0x5054A13C]; mov [esi+0x18], 0x00000001; ret 
0x5052f3c7  # and al, 0x04; add byte [eax+0x107D0000], al; push [esi+0x08]; call [0x5054A13C] 
0x50533be8  # and al, 0x04; sub eax, ecx; ret 
0x50516767  # and al, 0x04; xor eax, eax; cmp [ecx+0x10], eax; setne al; ret 
0x5051ebda  # and al, 0x04; xor eax, eax; cmp [ecx+0x04], 0x02; setne al; lea eax, [eax+eax+0x01]; ret 
0x5051c888  # and al, 0x04; xor ecx, ecx; mov [eax+0x04], ecx; mov [eax], ecx; mov [eax+0x08], ecx; ret 
0x50527832  # and al, 0x04; cmp [esp+0x08], eax; jbe 0x5052783E; or eax, 0xFFFFFFFF; ret 
0x5051c915  # and al, 0x04; cmp ecx, eax; jbe 0x5051C91E; xor eax, eax; ret 
0x5052d3d1  # and al, 0x04; push eax; call [eax+0x000003C0]; pop ecx; pop ecx; ret 
0x5052d3d1  # and al, 0x04; push eax; call [eax+0x000003C0] 
0x5052d3df  # and al, 0x04; push eax; call [eax+0x000003C4]; pop ecx; pop ecx; ret 
0x5052d3df  # and al, 0x04; push eax; call [eax+0x000003C4] 
0x50547c83  # and al, 0x04; push 0x5055E108; call [0x5054A18C]; retn 0x0004 
0x50547c83  # and al, 0x04; push 0x5055E108; call [0x5054A18C] 
0x50506514  # and al, 0x04; push 0x00000000; push eax; call [0x5054A084]; retn 0x0004 
0x50506514  # and al, 0x04; push 0x00000000; push eax; call [0x5054A084] 
0x505064f4  # and al, 0x04; push 0x00000008; push eax; call [0x5054A07C]; retn 0x0004 
0x505064f4  # and al, 0x04; push 0x00000008; push eax; call [0x5054A07C] 
0x50547559  # and al, 0x04; je 0x50547566; test eax, eax; jne 0x50547551; xor eax, eax; retn 0x0008 
0x5051e869  # and al, 0x04; jbe 0x5051E871; or eax, 0xFFFFFFFF; ret 
0x5052dfdf  # and al, 0x04; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x5052477d  # and al, 0x04; cmp [eax+0x04], 0x00000000; jne 0x50524788; xor eax, eax; ret 
0x5051677f  # and al, 0x04; cmp [eax+0x10], 0x00000000; je 0x5051678B; or eax, 0xFFFFFFFF; ret 
0x5052daf7  # and al, 0x04; cmp [eax+0x40], 0x00000000; je 0x5052DB07; mov [eax+0x30], 0x00000001; ret 
0x50526f90  # and al, 0x04; and [eax+0x00000084], 0x00000000; mov [eax+0x0000008C], 0x00000040; ret 
0x5051f32e  # and al, 0x04; test eax, eax; je 0x5051F338; mov eax, [eax+0x08]; ret 
0x5051682d  # and al, 0x04; test eax, eax; je 0x5051683A; mov eax, [eax+0x00000090]; ret 
0x5051679d  # and al, 0x04; test eax, eax; je 0x505167AA; mov eax, [eax+0x000001AC]; ret 
0x505169e3  # and al, 0x04; test eax, eax; je 0x505169F0; mov eax, [eax+0x000000D4]; ret 
0x50516855  # and al, 0x04; test eax, eax; je 0x50516862; mov eax, [eax+0x000000E0]; ret 
0x505168af  # and al, 0x04; test eax, eax; je 0x505168BC; mov eax, [eax+0x000000E4]; ret 
0x50516b43  # and al, 0x04; test eax, eax; je 0x50516B53; mov ecx, [esp+0x08]; add [eax+0x00000124], ecx; ret 
0x50516ab9  # and al, 0x04; test eax, eax; je 0x50516AC9; mov ecx, [esp+0x08]; mov [eax+0x00000114], ecx; ret 
0x50516b69  # and al, 0x04; test eax, eax; je 0x50516B79; mov ecx, [esp+0x08]; mov [eax+0x00000128], ecx; ret 
0x505169f6  # and al, 0x04; test eax, eax; je 0x50516A06; mov ecx, [esp+0x08]; mov [eax+0x000000D8], ecx; ret 
0x50516908  # and al, 0x04; test eax, eax; jne 0x5051690F; ret 
0x5051695f  # and al, 0x04; test eax, eax; jne 0x50516969; or eax, 0xFFFFFFFF; ret 
0x50516b7c  # and al, 0x04; test eax, eax; jne 0x50516B88; jmp [0x5054A0E4] 
0x50516ba7  # and al, 0x04; test ecx, ecx; je 0x50516BB3; mov [ecx+0x000000DC], eax; push eax; call [0x5054A028] 
0x5051ce15  # and al, 0x04; mov byte [edx], cl; inc [eax+0x0C]; xor eax, eax; inc eax; ret 
0x50515665  # and al, 0x04; mov [ecx+eax*4], edx; inc [esi+0x0000017C]; ret 
0x5051d6fe  # and al, 0x04; mov [ecx+0x08], eax; ret 
0x5051f266  # and al, 0x04; mov [ecx+0x10], eax; ret 
0x505317ae  # and al, 0x04; mov [ecx+0x1C], eax; ret 
0x5052421c  # and al, 0x04; mov [eax+0x04], ecx; ret 
0x5051f276  # and al, 0x04; mov eax, [eax]; ret 
0x5051f27d  # and al, 0x04; mov eax, [eax+0x04]; ret 
0x5052db28  # and al, 0x04; mov eax, [eax+0x08]; mov ecx, [eax]; push eax; call [ecx+0x18] 
0x5051c897  # and al, 0x04; mov eax, [eax+0x08]; ret 
0x5052db14  # and al, 0x04; mov eax, [eax+0x08]; push [esp+0x08]; mov ecx, [eax]; push eax; call [ecx+0x14] 
0x5051f26e  # and al, 0x04; mov eax, [eax+0x10]; ret 
0x505317bf  # and al, 0x04; mov eax, [eax+0x14]; ret 
0x505317b6  # and al, 0x04; mov eax, [eax+0x1C]; ret 
0x5052f842  # and al, 0x04; mov eax, [eax+0x20]; ret 
0x5051d783  # and al, 0x04; mov eax, [eax+0x2C]; ret 
0x5052da43  # and al, 0x04; mov eax, [ecx+0x0C]; test edx, edx; je 0x5052DA4F; mov [ecx+0x0C], edx; ret 
0x5053174c  # and al, 0x04; mov eax, [ecx+0x18]; test edx, edx; je 0x50531758; mov [ecx+0x18], edx; ret 
0x5051e1a3  # and al, 0x04; mov edx, [esp+0x08]; ret 
0x50516774  # and al, 0x04; mov eax, [eax+0x000000C8]; ret 
0x50509775  # and al, 0x04; shr eax, 0x08; and edx, 0x000000FF; xor eax, [0x50555868+edx*4]; mov [ecx], eax; ret 
0x50532e47  # and al, 0x04; ret 
0x5053143e  # and al, 0x04; mov byte [edx+ecx], 0x03; inc [eax]; ret 
0x5051d182  # and al, 0x04; mov [eax+0x04], 0x00000001; ret 
0x5051d879  # and al, 0x04; mov [eax+0x28], 0x00000001; ret 
0x50536772  # and al, 0x04; mul ecx; retn 0x0010 
0x505474fd  # and al, 0x04; push [esp+0x08]; call eax; push eax; call [0x5055E024] 
0x505474fd  # and al, 0x04; push [esp+0x08]; call eax 
0x50546f8f  # and al, 0x04; call eax; retn 0x0004 
0x50546f8f  # and al, 0x04; call eax 
0x50506559  # and al, 0x08; add byte [ebp+ecx-0x01], dh; je 0x50506585; or byte [edx+0x00], ch; push eax; call [0x5054A084] 
0x50506535  # and al, 0x08; add byte [ebp+esi*8-0x01], dh; je 0x50506561; or byte [edx+0x08], ch; push eax; call [0x5054A07C] 
0x50516b4b  # and al, 0x08; add [eax+0x00000124], ecx; ret 
0x50532e41  # and al, 0x08; pop edi; ret 
0x50506560  # and al, 0x08; push 0x00000000; push eax; call [0x5054A084]; retn 0x0008 
0x50506560  # and al, 0x08; push 0x00000000; push eax; call [0x5054A084] 
0x5052dcf0  # and al, 0x08; push 0x00000001; push eax; mov [eax+0x60], ecx; call [eax+0x48] 
0x5052dd1c  # and al, 0x08; push 0x00000003; push eax; mov [eax+0x64], ecx; call [eax+0x48] 
0x5050653c  # and al, 0x08; push 0x00000008; push eax; call [0x5054A07C]; retn 0x0008 
0x5050653c  # and al, 0x08; push 0x00000008; push eax; call [0x5054A07C] 
0x50511330  # and al, 0x08; jc 0x50511314; xor eax, eax; pop esi; retn 0x0004 
0x50527836  # and al, 0x08; jbe 0x5052783E; or eax, 0xFFFFFFFF; ret 
0x50511310  # and al, 0x08; jbe 0x50511334; push 0x5055CA4C; call [0x5054A104] 
0x5052f741  # and al, 0x08; cmp [esi+0x1C], 0x00000000; je 0x5052F752; mov [esi+0x10], 0x00000001; pop esi; ret 
0x5051ffef  # and al, 0x08; test ebx, ebx; jne 0x5051FFFA; or eax, 0xFFFFFFFF; pop ebx; ret 
0x5051e37f  # and al, 0x08; test esi, esi; je 0x5051E394; push [esi]; call [0x5054A060] 
0x50526697  # and al, 0x08; test esi, esi; je 0x505266BB; mov eax, [esi]; push esi; call [eax+0x18] 
0x505266c0  # and al, 0x08; test esi, esi; je 0x505266EE; mov eax, [esi]; push esi; call [eax+0x18] 
0x50516868  # and al, 0x08; test esi, esi; jne 0x50516874; mov eax, [esp+0x0C]; pop esi; ret 
0x5051c8ba  # and al, 0x08; mov [ecx], eax; ret 
0x50516ac1  # and al, 0x08; mov [eax+0x00000114], ecx; ret 
0x50516b71  # and al, 0x08; mov [eax+0x00000128], ecx; ret 
0x50516bcf  # and al, 0x08; mov [eax+0x00000134], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000138], ecx; ret 
0x505169fe  # and al, 0x08; mov [eax+0x000000D8], ecx; ret 
0x5050c7cf  # and al, 0x08; mov [eax+0x000032D8], ecx; xor eax, eax; retn 0x0008 
0x50521f43  # and al, 0x08; mov eax, [esi]; test eax, eax; jne 0x50521F4D; pop esi; ret 
0x5051506a  # and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x08]; add esp, 0x0C; ret 
0x5051506a  # and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5052dd02  # and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x0C] 
0x5052dd2e  # and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5052db1b  # and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x14] 
0x50531438  # and al, 0x08; mov ecx, [eax]; mov edx, [esp+0x04]; mov byte [edx+ecx], 0x03; inc [eax]; ret 
0x5051e862  # and al, 0x08; mov eax, [eax+0x08]; cmp eax, [esp+0x04]; jbe 0x5051E871; or eax, 0xFFFFFFFF; ret 
0x50515063  # and al, 0x08; mov eax, [eax+0x10]; push [esp+0x08]; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5052da53  # and al, 0x08; mov eax, [esi+0x08]; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5051c911  # and al, 0x08; mov ecx, [esp+0x04]; cmp ecx, eax; jbe 0x5051C91E; xor eax, eax; ret 
0x5051d6fa  # and al, 0x08; mov ecx, [esp+0x04]; mov [ecx+0x08], eax; ret 
0x5051f262  # and al, 0x08; mov ecx, [esp+0x04]; mov [ecx+0x10], eax; ret 
0x505317aa  # and al, 0x08; mov ecx, [esp+0x04]; mov [ecx+0x1C], eax; ret 
0x5050d560  # and al, 0x08; lea ecx, [eax+0x00000AB4]; mov eax, [ecx]; mov [ecx], edx; retn 0x0008 
0x5051e1a7  # and al, 0x08; ret 
0x5053438f  # and al, 0x08; mov byte [edi+0x02], 0x00; pop edi; ret 
0x5053678a  # and al, 0x08; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x50547501  # and al, 0x08; call eax; push eax; call [0x5055E024] 
0x50547501  # and al, 0x08; call eax 
0x5050c8d1  # and al, 0x0C; add eax, 0x000032DC; push eax; call [0x5054A04C]; xor eax, eax; retn 0x0008 
0x5050c8d1  # and al, 0x0C; add eax, 0x000032DC; push eax; call [0x5054A04C] 
0x50526701  # and al, 0x0C; push eax; call [ecx+0x08]; add esp, 0x0C; ret 
0x50526701  # and al, 0x0C; push eax; call [ecx+0x08] 
0x5051e3b8  # and al, 0x0C; push eax; push [esp+0x14]; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC] 
0x50515c63  # and al, 0x0C; push edi; call [edi+0x00000248] 
0x50516870  # and al, 0x0C; pop esi; ret 
0x5050109c  # and al, 0x0C; push 0x5055C93C; call [0x5054A18C]; pop edi; pop esi; retn 0x0004 
0x5050109c  # and al, 0x0C; push 0x5055C93C; call [0x5054A18C] 
0x5053676c  # and al, 0x0C; jne 0x50536779; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x5050163c  # and al, 0x0C; test eax, eax; jne 0x50501648; call [0x5054A044] 
0x50516a47  # and al, 0x0C; mov [esi], eax; pop esi; ret 
0x50516b1e  # and al, 0x0C; mov [eax+0x0000011C], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x5053173a  # and al, 0x0C; mov ecx, [eax]; push eax; call [ecx+0x0C]; add esp, 0x0C; ret 
0x5053173a  # and al, 0x0C; mov ecx, [eax]; push eax; call [ecx+0x0C] 
0x505266fb  # and al, 0x0C; mov ecx, [eax]; push [esp+0x0C]; push eax; call [ecx+0x08] 
0x5050d4f1  # and al, 0x0C; lea ecx, [esi+0x000000D8]; mov eax, [ecx]; mov [ecx], edx; pop esi; retn 0x0008 
0x50536a18  # and al, 0x0C; neg edx; neg eax; sbb edx, 0x00000000; pop ebx; retn 0x0010 
0x50515c5f  # and al, 0x0C; push [esp+0x0C]; push edi; call [edi+0x00000248] 
0x5052f31f  # and al, 0x10; add byte [eax], al; push eax; push edi; push [esi]; call [0x5054A140] 
0x50528e16  # and al, 0x10; add byte [ebp-0x3C], dh; mov eax, edi; pop edi; pop esi; ret 
0x50525b08  # and al, 0x10; add byte [ebp+0x04748604], cl; or [eax], edx; pop esi; ret 
0x50516c08  # and al, 0x10; push edx; push eax; call ecx; ret 
0x50516c08  # and al, 0x10; push edx; push eax; call ecx 
0x505341e8  # and al, 0x10; pop ebx; pop esi; pop edi; ret 
0x505017ed  # and al, 0x10; jne 0x505017FC; call [0x5054A044] 
0x50508c91  # and al, 0x10; test ebx, ebx; je 0x50508CC8; push ebx; call [0x5054A280] 
0x50516b28  # and al, 0x10; mov [eax+0x00000120], ecx; ret 
0x50516a8b  # and al, 0x10; mov [eax+0x00000124], ecx; ret 
0x50516bd9  # and al, 0x10; mov [eax+0x00000138], ecx; ret 
0x5051e3c1  # and al, 0x10; push [eax]; call [0x5054A0EC]; call [0x5054A0E4] 
0x5051e3c1  # and al, 0x10; push [eax]; call [0x5054A0EC] 
0x5050bba1  # and al, 0x14; cmp edi, ebx; jne 0x5050BBC5; push [esi]; call [0x5054A03C] 
0x50546f71  # and al, 0x14; push eax; push 0x5054A8B8; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x50518dea  # and al, 0x14; push esi; call eax 
0x50516952  # and al, 0x14; mov [edi+0x000000EC], eax; pop esi; pop edi; ret 
0x5051e3bd  # and al, 0x14; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC]; call [0x5054A0E4] 
0x5051e3bd  # and al, 0x14; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC] 
0x50518de6  # and al, 0x14; push [esp+0x14]; push esi; call eax 
0x5052f3fe  # and al, 0x18; and edi, eax; call [0x5054A144] 
0x5050b5c5  # and al, 0x18; push eax; call [0x5054A0BC] 
0x5052f3a9  # and al, 0x18; call [0x5054A060]; xor eax, eax; add esp, 0x14; retn 0x0004 
0x5052f3a9  # and al, 0x18; call [0x5054A060] 
0x5052f28d  # and al, 0x20; call [0x5054A110] 
0x5051e2e3  # and al, 0x20; call [0x5054A0A8] 
0x5054648e  # and al, 0x23; push ebp; push eax; push [0x5055E078]; mov [0x5055DF38], eax; call esi 
0x5050afc9  # and al, 0x24; call [0x5054A03C] 
0x5050b013  # and al, 0x30; lea edi, [esi+0x3C]; push edi; call [0x5054A050] 
0x5050ba0f  # and al, 0x30; call [0x5054A03C] 
0x50542d3d  # and al, 0x33; fstp tword [ebx]; ret 
0x50544bf2  # and al, 0x3A; ret 
0x50518ce2  # and al, 0x3B; retn 0x027E 
0x5050af8e  # and al, 0x49; pop ebx; pop esi; pop edi; retn 0x0008 
0x505429ab  # and al, 0x4C; and byte [ebp+0x50], dl; push edi; mov [0x5055DEC0], eax; call esi 
0x50548324  # and al, 0x50; lea eax, [ebp-0x3C]; push eax; call esi 
0x50548351  # and al, 0x50; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x50548e4e  # and al, 0x50; call [0x5054A04C]; lea eax, [ebp+0x24]; push eax; call esi 
0x50548e4e  # and al, 0x50; call [0x5054A04C] 
0x505090b5  # and al, 0x50; call [0x5054A254] 
0x5052f2d8  # and al, 0x50; push [esi]; call [0x5054A0C0] 
0x50548e58  # and al, 0x50; call esi 
0x50532439  # and al, 0x53; push eax; jmp [0x50532544+ecx*4] 
0x5051a6c2  # and al, 0x5F; pop ebx; pop esi; pop ebp; ret 
0x50531911  # and al, 0x5F; mov eax, esi; pop esi; pop ebx; leave; ret 
0x50542996  # and al, 0x68; and byte [ebp+0x50], dl; push edi; mov [0x5055DEBC], eax; call esi 
0x5050fb93  # and al, 0x6A; add al, 0x57; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x50542981  # and al, 0x7C; and byte [ebp+0x50], dl; push edi; mov [0x5055DEB8], eax; call esi 
0x50538bb8  # and al, 0x7C; sal byte [ebx], cl; rol byte [eax+0x5F], 0x5E; ret 
0x5053293a  # and al, 0x85; inc esp; sub [ebx+0x50], edx; jmp [0x50532A40+ecx*4] 
0x50532436  # and al, 0x85; dec eax; and al, 0x53; push eax; jmp [0x50532544+ecx*4] 
0x5052f0fb  # and al, 0x85; sal byte [ebp+0x1D], 0x8B; inc edi; or byte [ebx+0x50006A08], cl; call [ecx+0x1C] 
0x505325ca  # and al, 0x85; aam 0x25; push ebx; push eax; jmp [0x505326D0+ecx*4] 
0x50512d60  # and al, 0x89; inc ebp; in al, 0x3B; ret 
0x50508fba  # and al, 0x89; jle 0x50508FE6; xor eax, eax; pop edi; pop esi; retn 0x0004 
0x50508e4f  # and al, 0x8B; add edi, edi; jo 0x50508E59; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50526668  # and al, 0x8B; push es; push edi; push esi; call [eax+0x18] 
0x5052f4e7  # and al, 0x8B; inc ebp; clc; mov [esi+0x28], eax; call [0x5054A13C] 
0x50518cdf  # and al, 0x8B; push ecx; and al, 0x3B; retn 0x027E 
0x50513a50  # and al, 0x8D; inc ebp; clc; push eax; push esi; call [0x5054A0CC] 
0x505327ad  # and al, 0x8D; mov ah, 0x28; push ebx; push eax; nop; jmp [0x50532838+ecx*4] 
0x50532914  # and al, 0x95; inc eax; sub dl, byte [ebx+0x50]; mov edi, edi; neg ecx; jmp [0x505329F0+ecx*4] 
0x5053605c  # and al, 0xA0; push esp; push eax; pop ebp; ret 
0x50501152  # and al, 0xA0; push esp; push eax; ret 
0x50537d56  # and al, 0xA3; mov eax, 0x5E50555F; ret 
0x50509efa  # and al, 0xAB; push esp; push eax; push eax; call [0x5054A03C] 
0x5050c511  # and al, 0xAC; push esp; push eax; push esi; call ebx 
0x50516826  # and al, 0xC3; xor eax, eax; ret 
0x5050671f  # and al, 0xCA; push ebp; push eax; call esi 
0x5054643f  # and al, 0xDF; push ebp; push eax; call esi 
0x505469ce  # and al, 0xE0; push ebp; push eax; call esi 
0x5053d753  # and al, 0xE1; push ebp; push eax; push edi; push [0x5055D69C]; call [0x5054A080] 
0x50538536  # and al, 0xE1; push ebp; push eax; push 0x00000000; push [0x5055D69C]; call edi 
0x505181e4  # and al, 0xE8; inc edi; loopne 0x505181E8; dec [ebx+0x4D8D5C47]; mov esp, 0x6477FF51; call [eax+0x0C] 
0x505180df  # and al, 0xE8; dec esp; loope 0x505180E3; dec [ebx+0x4D8D5847]; mov esp, 0x6077FF51; call [eax+0x08] 
0x50507ede  # and al, 0xE8; cwde; test byte [ebx], 0x00; cmp eax, 0x00002733; jne 0x50507F03; call ebx 
0x5052f429  # and al, 0xFF; call [0x5054A0E8]; mov ebx, eax; cmp ebx, ebp; jne 0x5052F443; call [0x5054A0E4] 
0x5052f429  # and al, 0xFF; call [0x5054A0E8] 
0x5052436d  # and al, 0xFF; jne 0x50524379; call [edi+0x04] 
0x50502981  # and al, 0xFF; jne 0x50502995; add esi, 0x00000AC0; push esi; push edi; call [0x5054A04C] 
0x5053615f  # and eax, 0x6AC30000; add al, 0xE8; mov edx, 0x5900002A; ret 
0x5054268c  # and eax, 0x0000C000; add eax, 0x00004000; pop ebp; ret 
0x5051159f  # and eax, 0x59590002; ret 
0x50532b8d  # and eax, 0x00000103; pop ebp; ret 
0x50532d97  # and eax, 0x00000107; pop ebp; ret 
0x50547575  # and eax, 0x5054A028; jmp eax 
0x505283a6  # and eax, 0x5054BC28; ret 
0x5051e8be  # and eax, 0x5055CF2C; add byte [ecx+0x5E], bl; ret 
0x50532541  # and eax, 0x458B5053; or byte [esi+0x5F], bl; leave; ret 
0x5050fffd  # and eax, 0x00020068; add byte [ebp-0x0004037B], cl; call [eax-0x01] 
0x50532c92  # and eax, 0x00000080; pop ebp; ret 
0x505496a8  # and eax, 0x85107D8B; push [esi+ebx+0x53]; call [0x5054A03C] 
0x5050af6a  # and eax, 0x5556D0B8; push eax; push [eax]; push ebx; call [0x5054A0B8] 
0x50516b83  # and eax, 0x5054A0E4; mov eax, [eax+0x000000DC]; ret 
0x50547586  # and eax, 0x5054A0E4; jmp eax 
0x50501b62  # and eax, 0xFFF5EFE8; call [edi-0x01] 
0x5053efb3  # and eax, 0x000000FF; pop edi; pop ebx; pop esi; leave; ret 
0x50525aca  # and eax, 0x000000FF; ret 
0x50546a2f  # and eax, 0xE07C35FF; push ebp; push eax; mov [0x5055E060], eax; call esi 
0x50505281  # and eax, 0xFFFFBFFF; or eax, 0x00001000; mov [ebp+0x1C], eax; push ecx; call [0x5054A070] 
0x505147ec  # add byte [eax], al; leave; retn 0x0020 
0x5050d1f9  # add byte [ebp+0x537F74DB], al; call [0x5054A03C] 
0x505048e2  # add al, 0x00; push eax; lea eax, [ebp+0x48]; push eax; call [0x5054A050] 
0x5053c3bb  # xor eax, eax; inc eax; pop ebp; ret 
0x5050ed63  # cmp [ebp-0x04], ebx; je 0x5050ED72; push [ebp-0x04]; call [0x5054A0E0] 
0x505325a7  # push ebx; push eax; mov edi, edi; neg ecx; jmp [0x50532680+ecx*4] 
0x5051964d  # lea eax, [ecx]; add byte [ecx+0x0003A0C5], al; add cl, cl; ret 
0x5050d854  # mov eax, 0x505556E8; push [ebp-0x7C]; push [eax]; call edi 
0x50504fab  # ret 
0x50546a3e  # push [0x5055E07C]; mov [0x5055E05C], eax; call esi 
0x5054723a  # push [ebp-0x38]; call [0x5054A248] 
0x50513c79  # daa; add byte [eax], al; pop ecx; ret 
0x50507ee6  # daa; add byte [eax], al; jne 0x50507F03; call ebx 
0x5051f35d  # daa; add byte [eax], al; mov eax, esi; pop esi; ret 
0x505470bc  # daa; add byte [eax], al; call [0x5055DF88] 
0x50546c55  # daa; add byte [eax], al; call eax 
0x5052035e  # daa; add [eax], eax; add byte [ebx-0x7AF0FD07], al; retn 0xFFFE 
0x50537931  # daa; cmp [0x5055D554], eax; jbe 0x50537959; push esi; call [0x5054A048] 
0x505327a9  # daa; push ebx; push eax; jmp [0x505328B4+ecx*4] 
0x505108b7  # daa; push esi; lea eax, [ebp+0x000002F4]; push eax; call [0x5054A050] 
0x50537732  # daa; push esi; push [0x50555FB4]; mov esi, [0x5054A030]; call esi 
0x5050c6f7  # daa; push edi; mov byte [eax], 0x00; call [0x5054A03C] 
0x5050661d  # daa; cmp [ebp-0x1C], 0x04; jbe 0x50506645; mov ebx, [0x5054A08C]; push 0x5054A5CC; call ebx 
0x505122a4  # daa; mov esi, [ebp+0x10]; push [esi]; call [0x5054A0D8]; push [esi]; call [0x5054A0E0] 
0x505122a4  # daa; mov esi, [ebp+0x10]; push [esi]; call [0x5054A0D8] 
0x50537347  # daa; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x5050171c  # daa; test [edi+0x000000DC], 0x00008000; jne 0x50501742; cmp [esp+0x10], 0x00000000; je 0x50501742; call [0x5054A044] 
0x50546a4d  # daa; push [0x5055E07C]; mov [0x5055E054], eax; call esi 
0x505142e2  # sub byte [eax], al; add byte [ecx-0x7D], bl; clc; pop es; jnbe 0x5051432A; jmp [0x5051434A+eax*4] 
0x50504eea  # sub byte [eax], al; add byte [ebp-0x17E68A40], al; pushfd; retn 0xFFFF 
0x50526cf8  # sub byte [ecx], al; add byte [eax], al; mov ecx, [edi]; push edi; call [ecx+0x1C] 
0x50516b62  # sub byte [ecx], al; add byte [eax], al; ret 
0x50515df0  # sub byte [ebx], bh; ret 
0x5052f7ea  # sub byte [eax+0x56], dl; call [esi+0x00001030] 
0x5050833a  # sub byte [eax-0x01], dl; xlatb; cmp [ebp-0x04], 0x00000000; je 0x5050834D; push [ebp-0x04]; call [0x5055CA0C] 
0x505328b1  # sub byte [ebx+0x50], dl; mov eax, [ebp+0x08]; pop esi; pop edi; leave; ret 
0x505327b0  # sub byte [ebx+0x50], dl; nop; jmp [0x50532838+ecx*4] 
0x50517a68  # sub byte [esi+0x5F], bl; pop ebx; leave; ret 
0x5051d5ac  # sub byte [edi+0x5E], bl; mov eax, ebx; pop ebx; pop ebp; ret 
0x5051d551  # sub byte [edi+0x5E], bl; mov eax, ebx; pop ebx; leave; ret 
0x5053edc1  # sub byte [edx-0x18], dh; pop edi; pop esi; ret 
0x5051d772  # sub byte [ecx+ecx+0x39], dh; dec eax; xor byte [ebp+0x04], dh; xor eax, eax; inc eax; ret 
0x505083f5  # sub byte [ebx+0x7400107D], al; push ss; push [ebp+0x10]; push esi; call [0x5054A050] 
0x50517fbb  # sub byte [ebx-0x3F7AEB3C], al; je 0x50517DD1; push [ebx+0x70]; mov eax, [edi+0x0000008C]; call [eax+0x08] 
0x505317ca  # sub byte [ebx-0x477C8F14], al; sub al, 0x04; add byte [eax], al; add eax, 0xC0330474; leave; ret 
0x50506eb9  # sub byte [ebp+0x501274C0], al; push edi; call [0x5054A050]; push edi; mov [esi+0x10], eax; call ebp 
0x50506eb9  # sub byte [ebp+0x501274C0], al; push edi; call [0x5054A050] 
0x50506a1a  # sub byte [ebp+0x503774C0], al; call ebx 
0x50513549  # sub byte [ecx-0x3F7AEFBB], cl; je 0x50513675; push 0x00000200; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x5050ee87  # sub byte [ecx-0x1F7C27BB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5050ac5a  # sub byte [ecx-0x1F7C1BBB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5051229d  # sub byte [ecx-0x3CC413BB], cl; jne 0x505122CC; mov esi, [ebp+0x10]; push [esi]; call [0x5054A0D8] 
0x50531855  # sub byte [ebx+0x54A0603D], cl; push eax; call edi; push [ebp-0x04]; call edi 
0x50531855  # sub byte [ebx+0x54A0603D], cl; push eax; call edi 
0x50541dbb  # sub byte [ebp+0x5750F845], cl; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x5050e6e6  # sub byte [ebp-0x0002A77B], cl; call [eax-0x01] 
0x5050118a  # sub byte [eax-0x3974AFAC], ah; pop esi; ret 
0x50547576  # sub byte [eax-0x1F00AFAC], ah; mov eax, [0x5055DF8C]; test eax, eax; jne 0x5054758B; jmp [0x5054A0E4] 
0x50538f6d  # sub byte [ecx-0x00AFAFAC], ah; adc eax, 0x5054A1E4; leave; ret 
0x5050c505  # sub byte [esp+edx*2-0x2C00A8B0], ch; test eax, eax; jne 0x5050C54A; push 0x5054AC24; push esi; call ebx 
0x50510605  # sub bh, al; xor byte [edx+ecx+0x00010000], 0x00; add al, ch; xor eax, 0xFFFFFF5F; jne 0x5051062C; call [0x5054A060] 
0x505104a4  # sub bh, al; xchg byte [edx+ecx+0x00010000], dh; add byte [eax], al; call [0x5054A060] 
0x5052d7b3  # sub cl, cl; ret 
0x50506731  # sub dl, cl; push ebp; push eax; call esi 
0x50546451  # sub bh, bl; push ebp; push eax; call esi 
0x505469dd  # sub al, ah; push ebp; push eax; call esi 
0x505318ec  # sub al, ch; inc ecx; fdiv st7, st0; call [edi+0x56] 
0x5052f0cf  # sub al, ch; xchg eax, ecx; fdivr st0, st6; call [ebx-0x01] 
0x5052f4ed  # sub bh, bh; adc eax, 0x5054A13C; mov [esi+0x18], 0x00000001; pop edi; leave; ret 
0x50512461  # sub bh, bh; xor bh, bh; adc eax, 0x5054A0D8; call [0x5054A188] 
0x50546a5c  # sub bh, bh; xor eax, 0x5055E07C; mov [0x5055E058], eax; call esi 
0x5052f426  # sub bh, bh; jbe 0x5052F44E; push [esi]; call [0x5054A0E8] 
0x50531878  # sub bh, bh; sal [ebx], cl; shl byte [esi-0x77], 0x45; retn 0x458B 
0x5051401a  # sub [eax], eax; add byte [ebx], dh; rol byte [eax+0x59], 0x59; retn 0x0004 
0x5051bf6b  # sub [eax], eax; add byte [ecx], bh; sbb byte [eax+ecx+0x57], dh; push esi; call [eax] 
0x50516188  # sub [eax], eax; add byte [eax+0x61], cl; push ecx; push eax; pop edi; ret 
0x50514242  # sub [eax], eax; add byte [ecx-0x7D], bl; clc; pop es; jnbe 0x5051427C; jmp [0x50514286+eax*4] 
0x5051ab91  # sub [eax], eax; add byte [ebx+0x08740038], al; push ebx; push esi; call [eax] 
0x5051a2c2  # sub [eax], eax; add byte [ebp+0x5F505163], dh; ret 
0x50515fb3  # sub [eax], eax; add bl, ch; add ecx, [ecx-0x7976EFBF]; add al, 0x2D; add byte [eax], al; ret 
0x50515f44  # sub [eax], eax; add bh, bh; jbe 0x50515F56; push ebx; push eax; call [esi+0x08] 
0x50521e2c  # sub [ecx], eax; pop edi; pop ebx; ret 
0x5050f9bb  # sub [edx], eax; add cl, cl; retn 0x0010 
0x50524397  # sub [edi], ecx; test byte [esi-0x75000000], dh; inc esi; sub al, 0x3B; ret 
0x5053293d  # sub [ebx+0x50], edx; jmp [0x50532A40+ecx*4] 
0x5050c2e4  # sub [ebx+0x0032D486], ecx; add byte [ebx], bh; ret 
0x50517417  # sub [ebx-0x3B7D0000], edi; or al, 0x85; ror byte [edi], 0x84; retn 0xFFFE 
0x50546a6b  # sub edi, edi; xor eax, 0x5055E07C; mov [0x5055E04C], eax; call esi 
0x505071a8  # sub edi, edi; jne 0x505071B8; call ebx 
0x5054295f  # sub al, byte [ecx]; add byte [eax], al; mov esi, [0x5054A088]; push 0x5055208C; push edi; call esi 
0x5051c4ac  # sub al, byte [ecx]; add byte [ecx+0x088B1046], cl; push eax; call [ecx+0x20] 
0x505012b1  # sub bh, byte [ebx]; clc; je 0x505012D2; push edi; call [0x5054A03C] 
0x505216a0  # sub al, byte [ebx-0x007F]; ret 
0x5050e425  # sub al, byte [ebx-0x3F]; retn 0x8B0A 
0x5051cd1d  # sub al, byte [esi+0x0C]; mov ecx, [esi]; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; pop edi; ret 
0x5051cd70  # sub al, byte [esi+0x0C]; mov ecx, [esi]; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; ret 
0x5051525a  # sub al, byte [esi+0x18]; mov ecx, [esi+0x10]; mov edx, [esi+0x18]; mov byte [ecx+edx-0x01], al; pop edi; ret 
0x505152aa  # sub al, byte [esi+0x18]; mov ecx, [esi+0x10]; mov edx, [esi+0x18]; mov byte [ecx+edx-0x01], al; ret 
0x5052f7e6  # sub dl, byte [eax-0x73]; inc esi; sub byte [eax+0x56], dl; call [esi+0x00001030] 
0x50532a4d  # sub dl, byte [ebx+0x50]; mov eax, [ebp+0x08]; pop esi; pop edi; leave; ret 
0x50532917  # sub dl, byte [ebx+0x50]; mov edi, edi; neg ecx; jmp [0x505329F0+ecx*4] 
0x50504230  # sub cl, byte [ebp-0x0002037B]; call [eax-0x01] 
0x50532419  # sub dh, bl; movsd; jmp [0x50532534+edx*4] 
0x50532789  # sub dh, bl; movsd; jmp [0x505328A4+edx*4] 
0x50546a7a  # sub bh, bh; xor eax, 0x5055E07C; mov [0x5055E050], eax; call esi 
0x505439c2  # sub bh, bh; call [edi-0x18] 
0x50536050  # sub eax, [eax]; add byte [ecx+0x5D], bl; ret 
0x5050e805  # sub eax, [eax]; add cl, ch; retn 0x0000 
0x50543b54  # sub eax, [0x5055D568]; sar eax, 0x02; neg eax; pop esi; pop ebp; ret 
0x5050194b  # sub esi, [ebx+0x00]; add byte [ebp+0x334274C0], al; sar byte [ebx], 0xF8; je 0x5050199A; push edi; call [0x5054A280] 
0x50533e04  # sub esi, [ebp+0x10]; cmp esi, edi; jbe 0x50533E17; push edi; push esi; call [ebp+0x14] 
0x50533e54  # sub esi, [ebp+0x10]; cmp esi, edi; jbe 0x50533E70; push edi; push esi; call [ebp+0x14] 
0x50508d15  # sub ecx, [ebx+0x0470FFC1]; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50521f37  # sub ebp, [edx-0x3B7C0001]; adc al, 0x5E; ret 
0x50548862  # sub eax, ecx; xor edx, edx; mov ecx, 0x00015180; div ecx; pop esi; retn 0x0004 
0x5054366c  # sub eax, ecx; dec eax; pop ebp; ret 
0x50541ba1  # sub eax, ecx; pop esi; pop ebp; ret 
0x50515798  # sub eax, edx; add eax, ecx; ret 
0x505156cd  # sub eax, esi; cmp eax, 0x04; jnl 0x505156D8; xor eax, eax; pop esi; ret 
0x50532937  # sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325c7  # sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5051ce26  # sub edx, eax; cmp edx, 0x04; jnc 0x5051CE30; xor eax, eax; ret 
0x5051ce04  # sub edx, ecx; cmp edx, 0x01; jnc 0x5051CE0E; xor eax, eax; ret 
0x5050483a  # sub ebx, edi; cmp ebx, 0x0A; jc 0x50504853; call [0x5054A188] 
0x50541bf6  # sub ebp, eax; cdq; test edi, edi; call [ebx+0x53] 
0x50515786  # sub esi, ecx; cmp esi, edx; pop esi; jnl 0x50515790; xor eax, eax; ret 
0x5051701b  # sub edi, edx; test eax, eax; je 0x5051702D; push [ebx+0x00000080]; call [eax+0x1C] 
0x50546a89  # sub edi, edi; xor eax, 0x5055E07C; mov [0x5055E064], eax; call esi 
0x50513c4e  # sub al, 0x00; add byte [edi-0x18], dl; jl 0x14D43C59; cmp byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x50542faa  # sub al, 0x00; add byte [ecx+0x59], bl; xor eax, eax; pop esi; pop ebp; ret 
0x5051f2bd  # sub al, 0x00; pop esi; pop ebp; ret 
0x50526762  # sub al, 0x01; add byte [eax], al; add byte [esi+0x5F], bl; ret 
0x5050f687  # sub al, 0x02; add byte [ecx+0x001FFCC5], al; add cl, cl; retn 0x000C 
0x505317d0  # sub al, 0x04; add byte [eax], al; add eax, 0xC0330474; leave; ret 
0x505466ce  # sub al, 0x21; push ebp; push eax; push [0x5055E078]; mov [0x5055DFB8], eax; call esi 
0x505465f6  # sub al, 0x22; push ebp; push eax; push [0x5055E078]; mov [0x5055DF84], eax; call esi 
0x5054647c  # sub al, 0x23; push ebp; push eax; push [0x5055E078]; mov [0x5055DF34], eax; call esi 
0x505145f9  # sub al, 0x3B; ret 
0x5052f45f  # sub al, 0x50; push edi; push [esi]; call [0x5054A140] 
0x5052f422  # sub al, 0x50; push [esi+0x28]; push [esi+0x24]; push [esi]; call [0x5054A0E8] 
0x5050377e  # sub al, 0x56; cmp [eax+edi*4], ebx; je 0x505037A1; lea esi, [eax+edi*4]; call [0x5054A044] 
0x5051979c  # sub al, 0x5B; leave; ret 
0x50506e19  # sub al, 0x5E; cmp eax, edi; je 0x50506E27; push eax; call ebp 
0x50541724  # sub al, 0x5E; pop ebp; ret 
0x50508387  # sub al, 0x5E; je 0x50508395; push [ebp+0x10]; call ebx 
0x5052a9e9  # sub al, 0x5F; pop esi; pop ebx; leave; ret 
0x50526abf  # sub al, 0x83; cli; add ecx, [ebp+0x5052E855]; jne 0x50526B57; mov ecx, [eax]; call [ecx+0x08] 
0x5053424c  # sub al, 0x84; div byte [esi+ebx-0x09]; retn 0x0000 
0x505273de  # sub al, 0x8B; inc esi; sbb al, 0x8D; push esp; adc [ebx+edi], ecx; retn 0x1B7D 
0x50519963  # sub al, 0x8B; inc edi; xor byte [ebx], bh; ret 
0x505475de  # sub al, 0xA0; push esp; push eax; xor eax, eax; ret 
0x50501177  # sub al, 0xA0; push esp; push eax; push esi; push 0x5055C944; call [0x5054A18C] 
0x50537787  # sub al, 0xA0; push esp; push eax; pop ebp; ret 
0x50537431  # sub al, 0xA0; push esp; push eax; mov eax, esi; pop esi; ret 
0x5054674a  # sub al, 0xA0; push esp; push eax; jmp [0x5055DF84] 
0x50506743  # sub al, 0xCA; push ebp; push eax; call esi 
0x5051e8bf  # sub al, 0xCF; push ebp; push eax; add byte [ecx+0x5E], bl; ret 
0x5051e882  # sub al, 0xCF; push ebp; push eax; ret 
0x50546463  # sub al, 0xDF; push ebp; push eax; call esi 
0x50546a19  # sub al, 0xE0; push ebp; push eax; call esi 
0x50522e47  # sub al, 0xF5; add byte [eax], al; add ebp, 0x68; leave; ret 
0x50546a98  # sub al, 0xFF; xor eax, 0x5055E07C; mov [0x5055E070], eax; call esi 
0x5050e9a7  # sub al, 0xFF; inc [ebp-0x74FB8A40]; ret 
0x50518061  # sub eax, 0x83000000; les ecx, [0x8B0874C0+eax*4]; dec edi; pop eax; push eax; call [ecx+0x04] 
0x50518182  # sub eax, 0x85000000; sal byte [eax+ecx-0x75], 0x4F; pop esp; push eax; call [ecx+0x04] 
0x50516fe0  # sub eax, 0x5D5E0000; pop ebx; ret 
0x505044e8  # sub eax, 0x33000003; call [edi+0x53] 
0x5054145f  # sub eax, 0x8BFFFF0F; les edi, [ebx]; ret 
0x50537af3  # sub eax, 0x59000011; ret 
0x50541a6d  # sub eax, 0x75FF5757; fdiv st7, st0; jne 0x50541A4E; push 0x00000001; push [ebp+0x08]; call ebx 
0x50508394  # sub eax, 0x00147D83; je 0x505083A4; push [ebp+0x14]; call ebx 
0x50539e5f  # sub eax, 0x8BFFFF85; les edi, [ebx]; ret 
0x50506992  # sub eax, 0x8514478B; sal byte [edi+eax+0x50], 0xFF; ror [ebp-0x74FEF98C], cl; inc edi; sbb byte [ebp+0x500774C0], al; call ebx 
0x5052f735  # sub eax, 0x83FFFED2; les ecx, [edi+ebx*2]; ret 
0x50546aa7  # sub eax, 0xE07C35FF; push ebp; push eax; mov [0x5055E06C], eax; call esi 
0x5050f4db  # add al, byte [eax]; leave; ret 
0x5052d68e  # dec ebp; add byte [eax], al; add esp, 0x0C; pop edi; leave; ret 
0x5050f8f8  # push esi; call [0x5054A060] 
0x50506bef  # mov eax, [edi+0x14]; test eax, eax; je 0x50506BFE; push eax; call ebx 
0x50547b45  # test al, 0xFE; dec ecx; retn 0x000C 
0x5050b368  # call ebx 
0x50538350  # call esi 
0x505336b2  # das; add [eax], eax; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x5050f3cb  # das; add al, byte [eax]; leave; retn 0x0008 
0x505078ea  # das; cmp [ebp-0x08], esi; je 0x505078F9; push [ebp-0x08]; call [0x5055CA20] 
0x5050ae44  # das; jne 0x5050AE49; add cl, cl; retn 0x0014 
0x505229c0  # xor byte [eax], al; add byte [edx], ch; ret 
0x505229a2  # xor byte [eax], al; add byte [ebx], ch; ret 
0x5053710e  # xor byte [eax], al; add byte [ebx], dh; call [edi+0x57] 
0x50516c7f  # xor byte [ecx], al; add byte [eax], al; ret 
0x5053ad64  # xor byte [eax+eax*4], al; and dh, bh; call [0x5054A0E4] 
0x5052878f  # xor byte [ebx+ecx*4], al; ret 
0x50503f2e  # xor byte [ebx], bh; ret 
0x5051e238  # xor byte [ebx], bh; sti; je 0x5051E248; push edi; push esi; call [0x5054A09C] 
0x5052f445  # xor byte [ebx], bh; std; je 0x5052F47E; cmp ebx, ebp; jne 0x5052F47E; call [0x5054A0E4] 
0x50547e44  # xor byte [eax+0x53], dl; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x50547e44  # xor byte [eax+0x53], dl; call esi 
0x50508263  # xor byte [eax+0x57], dl; call [0x5055CA2C] 
0x50547ebb  # xor byte [eax+0x68], dl; add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x5052316e  # xor byte [eax-0x73], dl; test [edi+edi*8-0x01], ebx; call [eax-0x18]; mov ebx, 0x8D0000DA; test [edi+edi*8-0x01], ebx; call [eax+0x43] 
0x5052316e  # xor byte [eax-0x73], dl; test [edi+edi*8-0x01], ebx; call [eax-0x18] 
0x50548195  # xor byte [eax-0x0A], dl; ret 
0x50547e96  # xor byte [eax-0x01], dl; jne 0x50547E47; call [0x5054A00C] 
0x50508336  # xor byte [esi-0x7D], dl; shr byte [eax], 0x50; call edi 
0x50518fd9  # xor byte [ebx+0x5F], bl; pop esi; ret 
0x5053a1da  # xor byte [esi+0x5D], bl; ret 
0x5051d9b0  # xor byte [edi+0x5E], bl; ret 
0x50536218  # xor byte [edi-0x75], bl; ret 
0x50532b85  # xor byte [eax+0x55], ch; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000103; pop ebp; ret 
0x50532d8f  # xor byte [eax+0x55], ch; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000107; pop ebp; ret 
0x50532c8a  # xor byte [eax+0x55], ch; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000080; pop ebp; ret 
0x50532c06  # xor byte [eax+0x55], ch; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x04; pop ebp; ret 
0x5051d777  # xor byte [ebp+0x04], dh; xor eax, eax; inc eax; ret 
0x50507797  # xor byte [ebp+0x09], dh; cmp [ebx+edi*8+0x00003890], esi; je 0x505077AA; push eax; call [0x5055C988] 
0x5050777c  # xor byte [ebp+0x09], dh; cmp [ebx+edi*8+0x000038A0], esi; je 0x5050778F; push eax; call [0x5055C99C] 
0x505015b4  # xor byte [ebp+0x500A74C0], al; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x50523585  # xor byte [ecx+0x5FC78B18], cl; pop esi; pop ebx; ret 
0x50511594  # xor byte [ebx-0x74F7DBBC], cl; add bh, bh; xor al, ch; dec esi; and eax, 0x59590002; ret 
0x5051d5dd  # xor byte [ebx+0x45E80478], cl; idiv edi; call [esi-0x01] 
0x5051add0  # xor byte [ebx+0x00011483], cl; add al, ch; fsub qword [edi+edi*8-0x72F97401]; lea edi, [edi+edi*8-0x01]; call [ecx-0x01] 
0x50515383  # xor byte [ebx+0x5B5E5FC7], cl; leave; ret 
0x50512d96  # xor byte [ebp-0x00AF3BBB], cl; adc eax, 0x5054A268; lea eax, [ebp-0x3C]; push eax; call [0x5054A278] 
0x5051e4bf  # xor byte [ebp-0x00AF33BB], cl; adc eax, 0x5054A268; lea eax, [ebp-0x34]; push eax; call [0x5054A278] 
0x5051f9cf  # xor byte [ebp-0x2FC4FEB9], cl; mov eax, [ebp+0x08]; jle 0x5051FA1E; push [ebp-0x10]; push eax; call [eax+0x08] 
0x5052f81d  # xor byte [ebp-0x17A8C782], cl; pop ds; sar esi, cl; call [edi-0x18] 
0x5050eb9a  # xor byte [ebp-0x0002FF7B], cl; call [eax+0x57]; call [0x5054A0CC] 
0x5050eb9a  # xor byte [ebp-0x0002FF7B], cl; call [eax+0x57] 
0x5051011b  # xor byte [ebp-0x0002037B], cl; call [eax-0x01] 
0x5050947a  # xor byte [ebp-0x0001037B], cl; call [eax-0x01] 
0x505472ae  # xor byte [eax-0x1F7CAFAC], ah; cld; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x50547117  # xor byte [eax+0x01A85054], ah; je 0x5054712C; push 0x00002734; call [0x5055DF88] 
0x50546c5f  # xor byte [eax+0x01A85054], ah; je 0x50546C77; or eax, 0x02; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x5050119f  # xor byte [eax-0x5E3CAFAC], ah; inc esp; leave; push ebp; push eax; ret 
0x5053773c  # xor byte [eax-0x2900AFAC], ah; test eax, eax; je 0x50537759; push [0x50555FB0]; push [0x50555FB4]; call esi 
0x50531cdd  # xor ch, dl; push ebp; push eax; push 0x5055D480; call [0x5054A19C] 
0x50546475  # xor bh, bl; push ebp; push eax; call esi 
0x50519750  # xor al, ch; sub ebx, ebx; add byte [eax], al; pop ecx; ret 
0x50531ed9  # xor al, ch; inc edx; push 0x8BC30000; call [ebp-0x75] 
0x5051159c  # xor al, ch; dec esi; and eax, 0x59590002; ret 
0x5053b9f0  # xor al, ch; lahf; out 0xFF, eax; call [esi+0x56] 
0x50543093  # xor al, ch; ret 
0x5052f440  # xor bl, ch; add ecx, [ecx-0x02C4CF92]; je 0x5052F47E; cmp ebx, ebp; jne 0x5052F47E; call [0x5054A0E4] 
0x50512463  # xor bh, bh; adc eax, 0x5054A0D8; call [0x5054A188] 
0x5051e3eb  # xor bh, bh; adc eax, 0x5054A0EC; mov edx, eax; mov eax, [ebp-0x08]; leave; ret 
0x5051e3c4  # xor bh, bh; adc eax, 0x5054A0EC; call [0x5054A0E4]; neg eax; sbb eax, eax; ret 
0x5051e3c4  # xor bh, bh; adc eax, 0x5054A0EC; call [0x5054A0E4] 
0x5050fd7d  # xor bh, bh; jne 0x5050FD95; call [0x5054A060] 
0x5050ef8a  # xor bh, bh; jne 0x5050EF76; call [0x5054A048] 
0x5050ace0  # xor bh, bh; jne 0x5050ACDC; call [0x5054A048] 
0x5052f47d  # xor bh, bh; jbe 0x5052F485; call [0x5054A13C] 
0x5053c571  # xor bh, bh; lea esi, [esi+edi*8-0x01]; call [esi+0x56] 
0x50519722  # xor [eax], eax; add byte [ecx+0x5B], bl; leave; ret 
0x5051f255  # xor [ecx], eax; add byte [ecx+0x004FA0C5], al; add cl, cl; ret 
0x5050f1b5  # xor [edx], eax; add cl, cl; retn 0x0014 
0x505218fb  # xor [ebx], eax; ret 
0x50525279  # xor [ebx], eax; mov byte [ebx+0x018900D2], 0x8B; retn 0xD233 
0x50519c94  # xor [0x3B0B74C0+eax*4], eax; retn 0x0775 
0x505438d7  # xor [ebx+0x57], edx; push [ebp+0x18]; push [ebp-0x1C]; push 0x00000001; push [ebp+0x1C]; call esi 
0x5052d71a  # xor [ebx-0x3E7CFB40], eax; add al, 0x4A; jne 0x5052D6FB; pop edi; pop esi; ret 
0x50506a14  # xor [ebx-0x397CEFB9], ecx; sub byte [ebp+0x503774C0], al; call ebx 
0x50517f7f  # xor [ebx+0x31FF9C4D], ecx; mov eax, [edi+0x0000008C]; call [eax] 
0x50509a40  # xor [ebp+0x00029486], ecx; add byte [ebx], bh; fdiv [ecx+ecx+0x57]; push ebx; push eax; call [0x5054A04C] 
0x50513e41  # xor [edx-0x3FCD0000], ebp; pop edi; inc eax; pop esi; ret 
0x5050ef6c  # xor edi, edi; inc [ebx-0x7BF00008]; pop ds; add [eax], eax; add byte [ebx], bh; ret 
0x5050b173  # xor al, byte [eax]; add byte [eax], al; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1d6  # xor al, byte [eax]; add byte [eax], al; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x50501c70  # xor al, byte [eax]; add byte [ebx], bh; ret 
0x5050c8d5  # xor al, byte [eax]; add byte [eax-0x01], dl; adc eax, 0x5054A04C; xor eax, eax; retn 0x0008 
0x5050c7fc  # xor al, byte [eax]; add byte [eax-0x01], dl; jne 0x5050C80F; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7fc  # xor al, byte [eax]; add byte [eax-0x01], dl; jne 0x5050C80F; call [0x5054A04C] 
0x50521f32  # xor al, byte [eax]; add byte [esi-0x18], dl; sub ebp, [edx-0x3B7C0001]; adc al, 0x5E; ret 
0x5051391d  # xor al, byte [eax]; add byte [ecx+0x33], bl; rcr byte [ecx+0x5B], 0x5F; pop esi; leave; retn 0x000C 
0x50501df8  # xor al, byte [eax]; add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0008 
0x5050a7e7  # xor al, byte [eax]; add byte [edi+0x5E], bl; pop ebp; retn 0x0004 
0x50503d4b  # xor al, byte [eax]; add byte [ebp+0x7E], dh; push 0x5055C960; call [0x5054A15C] 
0x50501df2  # xor al, byte [eax]; add byte [ecx+0x0032C88E], cl; add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0008 
0x50503f7f  # xor al, byte [eax]; add byte [ebp-0x0002137B], cl; call [ebx+0x50] 
0x5050ef16  # xor al, byte [eax]; add bh, bh; jne 0x5050EF18; add [ebp+0x0C], eax; mov [ebp-0x0C], eax; call [0x5054A0D8] 
0x5050f0e0  # xor al, byte [edx]; add byte [ebx+0x75FF0CC4], al; cld; call [0x5054A0D8] 
0x50509701  # xor dl, byte [eax]; ret 
0x505207d2  # xor dl, byte [eax]; mov [eax+0x10], 0xC3D2E1F0; ret 
0x50529808  # xor dh, byte [ebx]; rcr [esi-0x77], 0x42; add al, 0x5B; leave; ret 
0x50527455  # xor dl, byte [edi-0x01]; call [eax-0x77] 
0x5052e04a  # xor bl, byte [ebx+0x00]; add byte [eax+0x53], dl; push [edi+0x08]; call [esi] 
0x5053e028  # xor ch, byte [edx-0x0C]; call [0x5054A1BC] 
0x50509762  # xor al, byte [ebx-0x3F7CFB3E]; add al, 0x49; jne 0x50509743; pop edi; pop esi; ret 
0x50517fb2  # xor cl, byte [ebx+0x32FFB455]; push eax; call [ecx+0x28] 
0x50536f18  # xor bl, byte [edx+0x45890000]; or byte [ebx], bh; ret 
0x50510505  # xor bh, bh; jne 0x505104FD; call [0x5054A048] 
0x5053ef75  # xor eax, [eax]; add byte [ebx], ah; retn 0xC483 
0x50509780  # xor eax, [0x50555868+edx*4]; mov [ecx], eax; ret 
0x50501340  # xor edx, [eax]; add eax, [eax]; leave; retn 0x0008 
0x50507ee5  # xor esp, [edi]; add byte [eax], al; jne 0x50507F03; call ebx 
0x50509773  # xor edx, [esp+0x04]; shr eax, 0x08; and edx, 0x000000FF; xor eax, [0x50555868+edx*4]; mov [ecx], eax; ret 
0x5050a673  # xor ebp, [ebx-0x01]; inc [ebx+0x5D5EFFC8]; retn 0x000C 
0x5050ec2d  # xor ecx, [ebp-0x00030F7B]; call [eax-0x73]; inc ebp; pushfd; push eax; call [0x5054A0CC] 
0x5050ec2d  # xor ecx, [ebp-0x00030F7B]; call [eax-0x73] 
0x505369aa  # xor eax, eax; xor edx, edx; ret 
0x50516769  # xor eax, eax; cmp [ecx+0x10], eax; setne al; ret 
0x50505a41  # xor eax, eax; cmp [ebp+0x08], eax; je 0x50505A64; push [ebp+0x08]; call edi 
0x50503689  # xor eax, eax; cmp [ebp+0x08], eax; je 0x505036B0; push [ebp+0x08]; call [0x5054A040] 
0x50505e85  # xor eax, eax; cmp [ebp+0x0C], eax; je 0x50505EA8; push [ebp+0x0C]; call esi 
0x50503af6  # xor eax, eax; cmp [ebp+0x0C], eax; je 0x50503B19; push [ebp+0x0C]; call edi 
0x5050851a  # xor eax, eax; cmp [ebp+0x10], eax; je 0x5050853D; push [ebp+0x10]; call esi 
0x50501953  # xor eax, eax; cmp edi, eax; je 0x5050199A; push edi; call [0x5054A280] 
0x5051401d  # xor eax, eax; inc eax; pop ecx; pop ecx; retn 0x0004 
0x5053c3bc  # xor eax, eax; inc eax; pop ebp; ret 
0x5051c415  # xor eax, eax; inc eax; pop esi; pop ebx; ret 
0x50514829  # xor eax, eax; inc eax; pop esi; pop ebp; retn 0x0004 
0x5054881c  # xor eax, eax; inc eax; pop esi; retn 0x000C 
0x5051ce5d  # xor eax, eax; inc eax; pop esi; ret 
0x50513133  # xor eax, eax; inc eax; pop esi; leave; retn 0x000C 
0x50531a45  # xor eax, eax; inc eax; pop edi; pop esi; pop ebp; retn 0x000C 
0x50538bbb  # xor eax, eax; inc eax; pop edi; pop esi; ret 
0x5051cfc2  # xor eax, eax; inc eax; pop edi; leave; ret 
0x5052f762  # xor eax, eax; inc eax; mov [esi+0x10], eax; mov [esi+0x14], eax; mov [esi+0x1C], eax; call [0x5054A13C] 
0x5052f7af  # xor eax, eax; inc eax; mov [esi+0x14], eax; mov [esi+0x1C], eax; call [0x5054A13C] 
0x505266e2  # xor eax, eax; inc eax; mov ecx, [esi]; push eax; push esi; call [ecx+0x1C] 
0x505384dc  # xor eax, eax; inc eax; mov [0x5055E140], eax; pop ebp; ret 
0x50547a79  # xor eax, eax; inc eax; retn 0x0008 
0x50501026  # xor eax, eax; inc eax; retn 0x000C 
0x50514884  # xor eax, eax; inc eax; ret 
0x5051eb3b  # xor eax, eax; inc eax; leave; ret 
0x50501305  # xor eax, eax; push esi; cmp [ebp+0x08], eax; je 0x5050132D; push [ebp+0x08]; call [0x5054A040] 
0x50504c13  # xor eax, eax; push esi; cmp [ebp+0x0C], eax; je 0x50504C3B; push [ebp+0x0C]; call [0x5054A040] 
0x5054851a  # xor eax, eax; pop ecx; inc eax; ret 
0x505380c0  # xor eax, eax; pop ecx; pop ebx; pop edi; pop esi; ret 
0x50513d22  # xor eax, eax; pop ebx; pop ebp; ret 
0x50508f72  # xor eax, eax; pop ebx; pop esi; pop ebp; retn 0x0008 
0x50513196  # xor eax, eax; pop ebx; pop esi; retn 0x0008 
0x50502cb1  # xor eax, eax; pop ebx; pop edi; pop esi; leave; retn 0x0008 
0x50502be8  # xor eax, eax; pop ebx; pop edi; pop esi; leave; retn 0x000C 
0x505345d0  # xor eax, eax; pop ebx; pop edi; pop esi; leave; ret 
0x5052f4ab  # xor eax, eax; pop ebx; add esp, 0x14; retn 0x0004 
0x50509005  # xor eax, eax; pop ebx; retn 0x0010 
0x50539191  # xor eax, eax; pop ebx; leave; ret 
0x5051c792  # xor eax, eax; pop ebp; ret 
0x5051fde3  # xor eax, eax; pop esi; inc eax; pop ebx; pop ebp; ret 
0x50547c73  # xor eax, eax; pop esi; pop ebx; pop ebp; retn 0x000C 
0x50527167  # xor eax, eax; pop esi; pop ebx; leave; ret 
0x505491a3  # xor eax, eax; pop esi; pop ebp; retn 0x000C 
0x5051622c  # xor eax, eax; pop esi; pop ebp; ret 
0x50503dce  # xor eax, eax; pop esi; pop edi; pop ebx; pop ebp; retn 0x0008 
0x50513a8f  # xor eax, eax; pop esi; pop edi; pop ebx; leave; retn 0x0010 
0x50541de4  # xor eax, eax; pop esi; pop edi; pop ebx; leave; ret 
0x5050d662  # xor eax, eax; pop esi; pop edi; retn 0x0008 
0x50502ac7  # xor eax, eax; pop esi; retn 0x0004 
0x505156d4  # xor eax, eax; pop esi; ret 
0x505150e4  # xor eax, eax; pop esi; leave; ret 
0x50513c5a  # xor eax, eax; pop edi; inc eax; pop esi; ret 
0x505019bc  # xor eax, eax; pop edi; pop ebx; pop esi; leave; retn 0x0010 
0x5053a448  # xor eax, eax; pop edi; pop ebx; pop esi; leave; ret 
0x5051c4c5  # xor eax, eax; pop edi; pop ebx; leave; ret 
0x50510fa3  # xor eax, eax; pop edi; pop ebp; pop esi; pop ebx; retn 0x0004 
0x5051349a  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x000C 
0x505494d1  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x505495e4  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x0014 
0x50508471  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x0020 
0x50525baa  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 
0x5050deb5  # xor eax, eax; pop edi; pop esi; pop ebx; retn 0x0008 
0x505161e7  # xor eax, eax; pop edi; pop esi; pop ebx; ret 
0x50501bf0  # xor eax, eax; pop edi; pop esi; pop ebx; leave; retn 0x0004 
0x50507911  # xor eax, eax; pop edi; pop esi; pop ebx; leave; retn 0x0008 
0x5051109c  # xor eax, eax; pop edi; pop esi; pop ebx; leave; retn 0x000C 
0x50508a7c  # xor eax, eax; pop edi; pop esi; pop ebx; leave; retn 0x0010 
0x505124b0  # xor eax, eax; pop edi; pop esi; pop ebx; leave; retn 0x0018 
0x50511538  # xor eax, eax; pop edi; pop esi; pop ebx; leave; ret 
0x505029a6  # xor eax, eax; pop edi; pop esi; pop ebp; retn 0x000C 
0x50535c28  # xor eax, eax; pop edi; pop esi; pop ebp; ret 
0x50503e3b  # xor eax, eax; pop edi; pop esi; retn 0x0004 
0x505018a8  # xor eax, eax; pop edi; pop esi; retn 0x0008 
0x505491ff  # xor eax, eax; pop edi; pop esi; retn 0x000C 
0x50514923  # xor eax, eax; pop edi; pop esi; ret 
0x50513648  # xor eax, eax; mov word [esi+0x000002A2], ax; lea eax, [ebp-0x08]; push eax; push edi; call [0x5054A0CC] 
0x505369a2  # xor eax, eax; and cl, 0x1F; shl edx, cl; ret 
0x5051ebdc  # xor eax, eax; cmp [ecx+0x04], 0x02; setne al; lea eax, [eax+eax+0x01]; ret 
0x505311bb  # xor eax, eax; add esp, 0x04; mov [ecx+0x60], eax; mov [ecx+0x68], eax; mov [ecx+0x64], eax; ret 
0x50513e12  # xor eax, eax; add esp, 0x0C; inc eax; ret 
0x505119ed  # xor eax, eax; add esp, 0x10; inc eax; pop edi; pop esi; retn 0x0004 
0x5052f3b1  # xor eax, eax; add esp, 0x14; retn 0x0004 
0x50513ff1  # xor eax, eax; add esp, 0x1C; inc eax; pop ebp; retn 0x0010 
0x5051dcb0  # xor eax, eax; cmp edi, 0x01; pop edi; sete al; pop esi; ret 
0x5052426c  # xor eax, eax; test edx, edx; jne 0x50524273; ret 
0x50518c10  # xor eax, eax; mov esi, [ebp-0x54]; mov [ebx+0x000000DC], eax; mov eax, [esi+0x00000088]; mov eax, [eax+0x18]; call [eax] 
0x5051e836  # xor eax, eax; mov byte [edx], 0x00; inc eax; ret 
0x505157ed  # xor eax, eax; leave; ret 
0x50546b56  # xor eax, ebp; mov [ebp-0x04], eax; cmp [ebp+0x0C], 0x00000000; je 0x50546BA5; push [ebp+0x0C]; call [0x5054A03C] 
0x50502fa6  # xor eax, ebp; mov [ebp+0x00000188], eax; push ebx; push esi; push 0x00003A98; call [0x5054A048] 
0x5053bade  # xor ecx, ecx; cmp [ebp-0x00001AE0], ecx; je 0x5053BAF0; test bl, bl; je 0x5053BD40; call [0x5054A214] 
0x505488c0  # xor ecx, ecx; inc ecx; mov [eax+0x30], ecx; mov eax, ecx; pop ebp; retn 0x000C 
0x5051d91a  # xor edx, edx; cmp ecx, [eax+0x20]; setl dl; mov eax, edx; ret 
0x50541222  # xor edx, edx; cmp eax, 0xC0000005; sete dl; mov eax, edx; ret 
0x50542f32  # xor edx, edx; and cl, 0x1F; shr eax, cl; ret 
0x5053ff0f  # xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x50548864  # xor edx, edx; mov ecx, 0x00015180; div ecx; pop esi; retn 0x0004 
0x505492d9  # xor ebx, ebx; and [ebp-0x24], ebx; push eax; mov [ebp-0x20], 0x00000094; call [0x5054A054] 
0x50538349  # xor ebx, ebx; xor edi, edi; cmp eax, ebx; jne 0x5053837F; call esi 
0x5051641b  # xor ebx, ebx; cmp eax, ebx; je 0x50516429; mov ecx, [edi+0x4C]; push eax; call [ecx+0x04] 
0x50503412  # xor ebx, ebx; push 0x5055C93C; mov [ebp-0x38], eax; mov [ebp-0x30], ebx; call [0x5054A18C] 
0x5050ffac  # xor ebx, ebx; test edi, edi; je 0x5050FFC5; push edi; call esi 
0x5050663d  # xor ebx, ebx; mov [0x5055C9F4], eax; inc ebx; push [ebp-0x24]; call esi 
0x5050387e  # xor ebx, ebx; push [ebp+0x0C]; call [0x5054A03C] 
0x50538925  # xor esi, eax; lea eax, [ebp-0x10]; push eax; call [0x5054A1E0] 
0x50538915  # xor esi, eax; call [0x5054A044]; xor esi, eax; call [0x5054A188] 
0x50538915  # xor esi, eax; call [0x5054A044] 
0x5053891d  # xor esi, eax; call [0x5054A188]; xor esi, eax; lea eax, [ebp-0x10]; push eax; call [0x5054A1E0] 
0x5053891d  # xor esi, eax; call [0x5054A188] 
0x505413bc  # xor esi, esi; inc esi; push esi; push 0x50551068; push esi; call [0x5054A230] 
0x505375c8  # xor esi, esi; push edi; call [0x5054A028] 
0x505107a5  # xor esi, esi; cmp [ebp-0x54], 0x00000000; je 0x505107BA; push [ebp-0x54]; call edi 
0x5050f611  # xor edi, edi; movzx eax, byte [ebp+edi+0x00001FE8]; push eax; push 0x5054AC9C; push esi; call [0x5054A260] 
0x50505e60  # xor edi, edi; cmp [ebp+0x14], edi; je 0x50505E85; push [ebp+0x14]; call esi 
0x5053834b  # xor edi, edi; cmp eax, ebx; jne 0x5053837F; call esi 
0x50526b23  # xor edi, edi; inc edi; push edi; push eax; call [ecx+0x1C] 
0x50502fd8  # xor edi, edi; inc edi; call [0x5054A188] 
0x5050939b  # xor edi, edi; test esi, esi; je 0x505093B0; push esi; call [0x5054A03C] 
0x50537d6a  # xor edi, edi; mov [ebp-0x04], edi; lea eax, [ebp-0x64]; push eax; call [0x5054A1C4] 
0x50546b11  # xor edi, edi; call [0x5054A18C] 
0x5052eedf  # xor al, 0x00; add byte [ecx+0x0001E0C5], al; add cl, cl; ret 
0x505064d8  # xor al, 0x00; pop esi; retn 0x0004 
0x5050646c  # xor al, 0x00; jne 0x5050648A; push 0x00000000; push 0x0000FFFF; push 0x00000000; call [0x5054A074] 
0x5052718b  # xor al, 0x01; add byte [eax], al; add byte [ebx+0x068B4876], cl; push 0x00000001; push esi; call [eax+0x1C] 
0x50516bd3  # xor al, 0x01; add byte [eax], al; mov ecx, [esp+0x10]; mov [eax+0x00000138], ecx; ret 
0x50514dbb  # xor al, 0x02; add byte [eax], al; mov ecx, [edi+0x0000023C]; push [ecx+0x10]; push [edi+0x64]; call [eax+0x14] 
0x5050408d  # xor al, 0x04; add byte [eax-0x17], dl; add byte [edx], 0x00; add byte [ebp-0x00021773], cl; call [ecx+0x68] 
0x505401fc  # xor al, 0x06; call [0x5054A0C0]; test eax, eax; jne 0x50540212; call [0x5054A0E4] 
0x50540144  # xor al, 0x06; call [0x5054A0C0] 
0x50501554  # xor al, 0x07; test esi, esi; je 0x50501617; test [esi+0x000000DC], 0x00008000; jne 0x5050157F; call [0x5054A044] 
0x5053bac8  # xor al, 0x07; mov [ebp-0x00001AE0], ecx; call [0x5054A218] 
0x5053bc07  # xor al, 0x07; call [0x5054A0E8] 
0x5053a959  # xor al, 0x18; call [0x5054A208] 
0x5053a921  # xor al, 0x18; call [0x5054A20C] 
0x505429c9  # xor al, 0x20; push ebp; push eax; push edi; call esi 
0x5054646a  # xor al, 0x23; push ebp; push eax; push [0x5055E078]; mov [0x5055DF30], eax; call esi 
0x5052f803  # xor al, 0x3B; sal [edx+edx-0x09], 0xFFFFFFD8; push eax; push esi; call [esi+0x44] 
0x5052f449  # xor al, 0x3B; fsave [ebp+0x30]; call [0x5054A0E4] 
0x50510ffd  # xor al, 0x50; push 0x00000040; call [0x5054A100] 
0x50548d46  # xor al, 0x50; call [0x5054A03C] 
0x5050648c  # xor al, 0x5E; retn 0x0004 
0x5053436b  # xor al, 0x84; div byte [edi-0x09]; retn 0x0000 
0x505064ca  # xor al, 0x85; sal byte [ebx+ecx+0x50], 0xFF; adc eax, 0x5054A078; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x50506481  # xor al, 0x85; sal byte [ebp+0x04], 0x33; shr bl, 0x03; mov eax, [esi+0x34]; pop esi; retn 0x0004 
0x50509c3f  # xor al, 0x87; add al, byte [eax]; leave; retn 0x0010 
0x50527dc3  # xor al, 0x8B; ret 
0x505275a2  # xor al, 0x8D; mov al, 0xC1; push esp; push eax; push edi; call [eax+0x08] 
0x50501421  # xor al, 0x98; mov [esi+0x04], ebx; mov [esi], edi; call [0x5054A044] 
0x505066ba  # xor al, 0xA5; push esp; push eax; push [0x5055C9F4]; mov [0x5055CA10], eax; call esi 
0x5050be17  # xor al, 0xA9; push esp; push eax; push edi; call [0x5054A0B8] 
0x50503786  # xor al, 0xB8; call [0x5054A044] 
0x50508df6  # xor al, 0xB9; call [0x5054A25C] 
0x50538c2d  # xor al, 0xC5; mov al, 0x60; push ebp; push eax; call [0x5054A024] 
0x50506773  # xor al, 0xCA; push ebp; push eax; call esi 
0x50546487  # xor al, 0xDF; push ebp; push eax; call esi 
0x505469fb  # xor al, 0xE0; push ebp; push eax; call esi 
0x5050dd6a  # xor al, 0xFF; dec [ebx-0x75AC1439]; xchg cl, al; or al, byte [eax]; add byte [eax-0x797503BB], cl; retn 0x000A 
0x5051368a  # xor eax, 0x33590000; rcr byte [ecx+0x5E], 0x5F; pop ebx; leave; retn 0x000C 
0x50519399  # xor eax, 0x76FF0000; sbb al, 0xE8; retn 0x0035 
0x50517174  # xor eax, 0x33000004; shr byte [ebx], cl; retn 0xC7B9 
0x50538958  # xor eax, 0x50555D04; pop esi; pop edi; pop ebx; leave; ret 
0x50501116  # xor eax, 0x5055520C; push 0x5055520C; call [0x5054A18C] 
0x5053d752  # xor eax, 0x5055E124; push edi; push [0x5055D69C]; call [0x5054A080] 
0x5053d782  # xor eax, 0x5055E124; push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50538535  # xor eax, 0x5055E124; push 0x00000000; push [0x5055D69C]; call edi 
0x50538503  # xor eax, 0x5055E124; add esi, 0x10; push 0x00008000; push 0x00000000; push [esi-0x04]; call [0x5054A1DC] 
0x5053731c  # xor eax, 0x5054A030; call esi 
0x5050ff96  # xor eax, 0x5054A03C; test ebx, ebx; je 0x5050FFAE; push ebx; call esi 
0x505072a4  # xor eax, 0x5054A03C; test ebx, ebx; jne 0x505072C1; push 0x00000000; call esi 
0x50501239  # xor eax, 0x5055C93C; push 0x00001A00; call [0x5054A034] 
0x505037e3  # xor eax, 0x5055C93C; push 0x5055C93C; call [0x5054A18C] 
0x505263f5  # xor eax, 0x5055D440; pop esi; pop ebx; ret 
0x50537f8c  # xor eax, 0x5055E144; call [0x5054A1B8] 
0x5053784a  # xor eax, 0x5055D548; push eax; call esi 
0x5050a1b8  # xor eax, 0x5054A04C; push eax; push edi; call esi 
0x5053782b  # xor eax, 0x5055D54C; mov [0x5055D550], eax; call [0x5054A184] 
0x505399d7  # xor eax, 0x5054A15C; push edi; mov edi, [ebp+0x08]; push edi; call esi 
0x5050104e  # xor eax, 0x5054A15C; push edi; mov edi, 0x5055520C; push edi; call esi 
0x50513e1b  # xor eax, 0x5054A15C; push edi; mov edi, 0x50555CA4; push edi; call esi 
0x50510611  # xor eax, 0xFFFFFF5F; jne 0x5051062C; call [0x5054A060] 
0x50539416  # xor eax, 0x50556660; je 0x50539453; test esi, esi; je 0x5053943B; push esi; call [0x5054A0D4] 
0x50539444  # xor eax, 0x50556660; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x505397f6  # xor eax, 0x50556660; call [0x5054A0D4] 
0x50507128  # xor eax, 0x5054A060; call esi; push [ebp-0x0C]; call esi 
0x50507128  # xor eax, 0x5054A060; call esi 
0x50509eda  # xor eax, 0x5054A260; lea eax, [ebp-0x44]; push 0x5054A358; push eax; call esi 
0x50503238  # xor eax, 0x5055C960; push esi; call [0x5054A18C] 
0x50502fbc  # xor eax, 0x5055C960; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x5050c397  # xor eax, 0x8300026A; les ecx, [ebx+edi]; je 0x5050C3BD; push esi; call [0x5054A03C] 
0x50531ed4  # xor eax, 0x8900006B; xor al, ch; inc edx; push 0x8BC30000; call [ebp-0x75] 
0x505463bb  # xor eax, 0x5055E078; mov [0x5055DF08], eax; call esi 
0x505463cd  # xor eax, 0x5055E078; mov [0x5055DF0C], eax; call esi 
0x505463df  # xor eax, 0x5055E078; mov [0x5055DF10], eax; call esi 
0x505463f1  # xor eax, 0x5055E078; mov [0x5055DF14], eax; call esi 
0x50546403  # xor eax, 0x5055E078; mov [0x5055DF18], eax; call esi 
0x50546415  # xor eax, 0x5055E078; mov [0x5055DF1C], eax; call esi 
0x50546427  # xor eax, 0x5055E078; mov [0x5055DF20], eax; call esi 
0x50546439  # xor eax, 0x5055E078; mov [0x5055DF24], eax; call esi 
0x5054644b  # xor eax, 0x5055E078; mov [0x5055DF28], eax; call esi 
0x5054645d  # xor eax, 0x5055E078; mov [0x5055DF2C], eax; call esi 
0x5054646f  # xor eax, 0x5055E078; mov [0x5055DF30], eax; call esi 
0x50546481  # xor eax, 0x5055E078; mov [0x5055DF34], eax; call esi 
0x50546493  # xor eax, 0x5055E078; mov [0x5055DF38], eax; call esi 
0x505464a5  # xor eax, 0x5055E078; mov [0x5055DF3C], eax; call esi 
0x505464b7  # xor eax, 0x5055E078; mov [0x5055DF40], eax; call esi 
0x505464c9  # xor eax, 0x5055E078; mov [0x5055DF44], eax; call esi 
0x505464db  # xor eax, 0x5055E078; mov [0x5055DF48], eax; call esi 
0x505464ed  # xor eax, 0x5055E078; mov [0x5055DF4C], eax; call esi 
0x505464ff  # xor eax, 0x5055E078; mov [0x5055DF50], eax; call esi 
0x50546523  # xor eax, 0x5055E078; mov [0x5055DF58], eax; call esi 
0x50546535  # xor eax, 0x5055E078; mov [0x5055DF5C], eax; call esi 
0x50546547  # xor eax, 0x5055E078; mov [0x5055DF60], eax; call esi 
0x50546559  # xor eax, 0x5055E078; mov [0x5055DF64], eax; call esi 
0x5054656b  # xor eax, 0x5055E078; mov [0x5055DF68], eax; call esi 
0x5054657d  # xor eax, 0x5055E078; mov [0x5055DF6C], eax; call esi 
0x5054658f  # xor eax, 0x5055E078; mov [0x5055DF70], eax; call esi 
0x505465a1  # xor eax, 0x5055E078; mov [0x5055DF74], eax; call esi 
0x505465b3  # xor eax, 0x5055E078; mov [0x5055DF78], eax; call esi 
0x505465c5  # xor eax, 0x5055E078; mov [0x5055DF7C], eax; call esi 
0x505465e9  # xor eax, 0x5055E078; mov [0x5055DF80], eax; call esi 
0x505465fb  # xor eax, 0x5055E078; mov [0x5055DF84], eax; call esi 
0x5054661f  # xor eax, 0x5055E078; mov [0x5055DF8C], eax; call esi 
0x50546631  # xor eax, 0x5055E078; mov [0x5055DF90], eax; call esi 
0x50546643  # xor eax, 0x5055E078; mov [0x5055DF94], eax; call esi 
0x50546655  # xor eax, 0x5055E078; mov [0x5055DF98], eax; call esi 
0x50546667  # xor eax, 0x5055E078; mov [0x5055DF9C], eax; call esi 
0x5054668b  # xor eax, 0x5055E078; mov [0x5055DFA4], eax; call esi 
0x5054669d  # xor eax, 0x5055E078; mov [0x5055DFA8], eax; call esi 
0x505466af  # xor eax, 0x5055E078; mov [0x5055DFAC], eax; call esi 
0x505465d7  # xor eax, 0x5055E078; mov [0x5055DFB0], eax; call esi 
0x505466c1  # xor eax, 0x5055E078; mov [0x5055DFB4], eax; call esi 
0x505466d3  # xor eax, 0x5055E078; mov [0x5055DFB8], eax; call esi; mov [0x5055E110], eax; push 0x5055E080; call [0x5054A15C] 
0x505466d3  # xor eax, 0x5055E078; mov [0x5055DFB8], eax; call esi 
0x5054667e  # xor eax, 0x5055E078; call esi; push 0x50552170; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x50546516  # xor eax, 0x5055E078; call esi; push 0x505522D8; push [0x5055E078]; mov [0x5055DF58], eax; call esi 
0x50546516  # xor eax, 0x5055E078; call esi 
0x50546941  # xor eax, 0x5055E07C; mov [0x5055E000], eax; call esi 
0x5054695f  # xor eax, 0x5055E07C; mov [0x5055E008], eax; call esi 
0x5054696e  # xor eax, 0x5055E07C; mov [0x5055E00C], eax; call esi 
0x5054697d  # xor eax, 0x5055E07C; mov [0x5055E010], eax; call esi 
0x5054698c  # xor eax, 0x5055E07C; mov [0x5055E014], eax; call esi 
0x505468ac  # xor eax, 0x5055E07C; mov [0x5055E114], eax; call esi 
0x5054699b  # xor eax, 0x5055E07C; mov [0x5055E018], eax; call esi 
0x505469aa  # xor eax, 0x5055E07C; mov [0x5055E01C], eax; call esi 
0x505469b9  # xor eax, 0x5055E07C; mov [0x5055E020], eax; call esi 
0x505469c8  # xor eax, 0x5055E07C; mov [0x5055E024], eax; call esi 
0x505469d7  # xor eax, 0x5055E07C; mov [0x5055E028], eax; call esi 
0x50546a13  # xor eax, 0x5055E07C; mov [0x5055E02C], eax; call esi 
0x50546a04  # xor eax, 0x5055E07C; mov [0x5055E030], eax; call esi 
0x505469f5  # xor eax, 0x5055E07C; mov [0x5055E034], eax; call esi 
0x505469e6  # xor eax, 0x5055E07C; mov [0x5055E038], eax; call esi 
0x50546a6d  # xor eax, 0x5055E07C; mov [0x5055E04C], eax; call esi 
0x50546a7c  # xor eax, 0x5055E07C; mov [0x5055E050], eax; call esi 
0x50546a4f  # xor eax, 0x5055E07C; mov [0x5055E054], eax; call esi 
0x50546a5e  # xor eax, 0x5055E07C; mov [0x5055E058], eax; call esi 
0x50546a40  # xor eax, 0x5055E07C; mov [0x5055E05C], eax; call esi 
0x50546a31  # xor eax, 0x5055E07C; mov [0x5055E060], eax; call esi 
0x50546a8b  # xor eax, 0x5055E07C; mov [0x5055E064], eax; call esi 
0x50546a22  # xor eax, 0x5055E07C; mov [0x5055E068], eax; call esi 
0x50546aa9  # xor eax, 0x5055E07C; mov [0x5055E06C], eax; call esi 
0x50546a9a  # xor eax, 0x5055E07C; mov [0x5055E070], eax; call esi 
0x5054687f  # xor eax, 0x5055E07C; mov [0x5055DFBC], eax; call esi 
0x50546843  # xor eax, 0x5055E07C; mov [0x5055DFC0], eax; call esi 
0x50546834  # xor eax, 0x5055E07C; mov [0x5055DFC4], eax; call esi 
0x50546870  # xor eax, 0x5055E07C; mov [0x5055DFC8], eax; call esi 
0x5054688e  # xor eax, 0x5055E07C; mov [0x5055DFCC], eax; call esi 
0x50546852  # xor eax, 0x5055E07C; mov [0x5055DFD0], eax; call esi 
0x5054689d  # xor eax, 0x5055E07C; mov [0x5055DFD4], eax; call esi 
0x50546861  # xor eax, 0x5055E07C; mov [0x5055DFD8], eax; call esi 
0x505468bb  # xor eax, 0x5055E07C; mov [0x5055DFDC], eax; call esi 
0x505468ca  # xor eax, 0x5055E07C; mov [0x5055DFE0], eax; call esi 
0x505468d9  # xor eax, 0x5055E07C; mov [0x5055DFE4], eax; call esi 
0x505468e8  # xor eax, 0x5055E07C; mov [0x5055DFE8], eax; call esi 
0x50546924  # xor eax, 0x5055E07C; mov [0x5055DFEC], eax; call esi 
0x505468f7  # xor eax, 0x5055E07C; mov [0x5055DFF0], eax; call esi 
0x50546906  # xor eax, 0x5055E07C; mov [0x5055DFF4], eax; call esi 
0x50546915  # xor eax, 0x5055E07C; mov [0x5055DFF8], eax; call esi 
0x50546932  # xor eax, 0x5055E07C; mov [0x5055DFFC], eax; call esi 
0x505467ce  # xor eax, 0x5055E07C; call [0x5054A094] 
0x5054682a  # xor eax, 0x5055E07C; call esi; push 0x00000003; push [0x5055E07C]; mov [0x5055DFC4], eax; call esi 
0x50546955  # xor eax, 0x5055E07C; call esi; push 0x00000017; push [0x5055E07C]; mov [0x5055E008], eax; call esi 
0x5054682a  # xor eax, 0x5055E07C; call esi 
0x50546b06  # xor eax, 0x5055E084; mov esi, 0x5055E084; push esi; xor edi, edi; call [0x5054A18C] 
0x50542964  # xor eax, 0x5054A088; push 0x5055208C; push edi; call esi 
0x505463a8  # xor eax, 0x5054A088; push 0x505523A8; push eax; call esi 
0x50506664  # xor eax, 0x5054A088; push 0x5054A5B0; push eax; call esi 
0x505467ba  # xor eax, 0x5054A088; push 0x505523BC; push eax; call esi 
0x505377b3  # xor eax, 0x5054A088; push 0x50550EF0; push edi; call esi 
0x5054939c  # xor eax, 0x5054A088; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x50514726  # xor eax, 0x5054A188; call esi 
0x505010d5  # xor eax, 0x5054A18C; push 0xFFFFFFFF; push 0x50555210; call esi 
0x5054678b  # xor eax, 0x5054A090; push 0x00008000; call esi; push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x50543e91  # xor eax, 0x5055D69C; call [0x5054A164] 
0x50538547  # xor eax, 0x5055D69C; call [0x5054A078]; and [0x5055D69C], 0x00000000; ret 
0x50538547  # xor eax, 0x5055D69C; call [0x5054A078] 
0x5053630e  # xor eax, 0x5055D69C; call [0x5054A07C] 
0x50536365  # xor eax, 0x5055D69C; call [0x5054A080] 
0x505364b4  # xor eax, 0x5055D69C; call [0x5054A084] 
0x5053853d  # xor eax, 0x5055D69C; call edi; pop edi; pop ebx; push [0x5055D69C]; call [0x5054A078] 
0x505361de  # xor eax, 0x5055D69C; call edi 
0x505112d6  # xor eax, 0x50555CA4; push 0x50555CA4; call [0x5054A18C] 
0x50537747  # xor eax, 0x50555FB0; push [0x50555FB4]; call esi; call eax 
0x50537747  # xor eax, 0x50555FB0; push [0x50555FB4]; call esi 
0x50537316  # xor eax, 0x50555FB4; mov esi, [0x5054A030]; call esi 
0x5053742a  # xor eax, 0x50555FB4; call [0x5054A02C]; mov eax, esi; pop esi; ret 
0x5053742a  # xor eax, 0x50555FB4; call [0x5054A02C] 
0x50537333  # xor eax, 0x50555FB4; call esi; call eax 
0x50537333  # xor eax, 0x50555FB4; call esi 
0x50539a72  # xor eax, 0x5054A0D4; push edi; call esi 
0x5050d84e  # xor eax, 0x505556E8; je 0x5050D87B; mov eax, 0x505556E8; push [ebp-0x7C]; push [eax]; call edi 
0x50526513  # xor eax, 0x5055D3E8; pop esi; pop ebx; leave; ret 
0x505419fa  # xor eax, 0x5054A1EC; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x505068b4  # xor eax, 0x5055C9F0; mov eax, [0x5055C9F4]; cmp eax, esi; je 0x50506925; push eax; call edi 
0x50506810  # xor eax, 0x5055C9F0; call esi; cmp eax, edi; je 0x5050683B; call eax 
0x50506810  # xor eax, 0x5055C9F0; call esi 
0x5053bfb9  # xor eax, 0xFFFFEBF0; push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; push [edi+eax]; call [0x5054A0E8] 
0x5050e539  # xor eax, 0xC1BD3AF2; retn 0x030A 
0x50506677  # xor eax, 0x5055C9F4; mov [0x5055CA00], eax; call esi 
0x50506689  # xor eax, 0x5055C9F4; mov [0x5055CA04], eax; call esi 
0x5050669b  # xor eax, 0x5055C9F4; mov [0x5055CA08], eax; call esi 
0x505066ad  # xor eax, 0x5055C9F4; mov [0x5055CA0C], eax; call esi 
0x505066bf  # xor eax, 0x5055C9F4; mov [0x5055CA10], eax; call esi 
0x505066d1  # xor eax, 0x5055C9F4; mov [0x5055CA14], eax; call esi 
0x505066e3  # xor eax, 0x5055C9F4; mov [0x5055CA18], eax; call esi 
0x505066f5  # xor eax, 0x5055C9F4; mov [0x5055CA1C], eax; call esi 
0x50506707  # xor eax, 0x5055C9F4; mov [0x5055CA20], eax; call esi 
0x50506719  # xor eax, 0x5055C9F4; mov [0x5055CA24], eax; call esi 
0x5050672b  # xor eax, 0x5055C9F4; mov [0x5055CA28], eax; call esi 
0x5050673d  # xor eax, 0x5055C9F4; mov [0x5055CA2C], eax; call esi 
0x5050676d  # xor eax, 0x5055C9F4; mov [0x5055CA34], eax; call esi 
0x50506760  # xor eax, 0x5055C9F4; call esi; push 0x5054A458; push [0x5055C9F4]; mov [0x5055CA34], eax; call esi 
0x50506760  # xor eax, 0x5055C9F4; call esi 
0x505475d7  # xor eax, 0x50556FF8; call [0x5054A02C]; xor eax, eax; ret 
0x50546c6c  # xor eax, 0x50556FF8; call [0x5054A02C] 
0x505472a7  # xor eax, 0x50556FF8; call [0x5054A030]; and eax, 0xFFFFFFFC; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x50547262  # xor eax, 0x50556FF8; call [0x5054A030] 
0x50511534  # xor eax, 0x33FFFFFE; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x50543c36  # xor eax, 0xA3FFFFFF; push 0x3B5055D5; ret 
0x5050ec8d  # add al, byte [eax]; leave; retn 0x0010 
0x5051f35c  # daa; add byte [eax], al; mov eax, esi; pop esi; ret 
0x50501f8a  # cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x5052438a  # push eax; push [ebp+0x08]; call [edi+0x04] 
0x5053e053  # push ebx; call [0x5054A0E8] 
0x5053851c  # push 0x00000000; push [0x5055D69C]; call edi 
0x5053941c  # test esi, esi; je 0x5053943B; push esi; call [0x5054A0D4] 
0x50526b56  # mov byte [ebp-0x17], 0x08; mov ecx, [eax]; call [ecx+0x08] 
0x50538d27  # call [0x5054A020]; pop esi; pop ebp; ret 
0x50538d27  # call [0x5054A020] 
0x5050bba8  # call [0x5054A03C] 
0x5052f463  # call [0x5054A140]; mov ebx, eax; cmp ebx, ebp; jne 0x5052F47B; call [0x5054A0E4] 
0x5052f326  # call [0x5054A140]; mov ebx, eax; test ebx, ebx; jne 0x5052F341; call [0x5054A0E4] 
0x5052f326  # call [0x5054A140] 
0x5051e386  # call [0x5054A060] 
0x5052f2db  # call [0x5054A0C0]; mov ebx, eax; test ebx, ebx; jne 0x5052F2F6; call [0x5054A0E4] 
0x5052f2db  # call [0x5054A0C0] 
0x505122a9  # call [0x5054A0D8]; push [esi]; call [0x5054A0E0] 
0x505122a9  # call [0x5054A0D8] 
0x505122b1  # call [0x5054A0E0] 
0x5052f42b  # call [0x5054A0E8]; mov ebx, eax; cmp ebx, ebp; jne 0x5052F443; call [0x5054A0E4] 
0x5052f42b  # call [0x5054A0E8] 
0x50507999  # aaa; add byte [eax], al; cmp [ebp-0x08], esi; je 0x505079AA; push [ebp-0x08]; call [0x5055CA20] 
0x5050ae9f  # aaa; add byte [eax], al; inc eax; pop esi; pop edi; retn 0x0004 
0x50507169  # aaa; add byte [eax], al; push ebx; call [0x5054A098] 
0x505072fa  # aaa; add byte [eax], al; call [0x5055CA10] 
0x5050735c  # aaa; add byte [eax], al; call [0x5055CA14] 
0x505062c0  # aaa; add byte [eax], al; call [0x5054A188] 
0x505212fe  # aaa; add byte [ecx+0x3707D6C6], al; ret 
0x5051ec12  # aaa; add [eax], eax; add esp, 0x0C; pop ebp; ret 
0x50520195  # aaa; movsx eax, word [eax+0x02]; pop esi; ret 
0x505235f7  # aaa; and eax, [eax]; add byte [ecx+0x59], bl; leave; ret 
0x5050e804  # aaa; sub eax, [eax]; add cl, ch; retn 0x0000 
0x50506a1e  # aaa; push eax; call ebx 
0x50508c1d  # aaa; push eax; call edi 
0x5051e33d  # aaa; test ebx, ebx; je 0x5051E34D; push ebx; push esi; call [0x5054A09C] 
0x50525142  # aaa; mov eax, edi; pop edi; ret 
0x50547213  # aaa; lea eax, [ebp-0x40]; push eax; call [0x5054A268] 
0x50548104  # aaa; lea eax, [ebp-0x00000104]; push eax; lea eax, [ebp-0x00000204]; push eax; call [0x5054A05C] 
0x5050e1e8  # aaa; ret 
0x5051eb06  # aaa; inc [eax]; pop edi; pop esi; pop ebp; ret 
0x50507c58  # cmp byte [eax], al; add byte [ecx], al; add byte [eax], al; add bl, ch; sbb byte [ebx-0x4B76F3BB], cl; ret 
0x50507d70  # cmp byte [eax], al; add byte [ebx], al; ret 
0x505074b1  # cmp byte [eax], al; add byte [ebx], dh; sar byte [ebx], cl; retn 0x1674 
0x505075fb  # cmp byte [eax], al; add byte [eax+0x57], dl; push 0x00000002; push 0x5054A5F4; push edi; call [0x5055C984] 
0x505076b3  # cmp byte [eax], al; add byte [ecx+0x50], dl; mov [ebp-0x1C], edi; mov [ebp-0x20], 0x00000004; mov [ebp-0x2C], esi; call [0x5055C9A0] 
0x5051329f  # cmp byte [eax], al; add byte [ecx+0x59], bl; xor eax, eax; pop edi; pop esi; retn 0x0008 
0x50508b82  # cmp byte [eax], al; add byte [edx+0x01], ch; push 0x00000000; call [0x5054A240] 
0x50508012  # cmp byte [eax], al; add byte [edx+0x5A], ch; push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x5050779e  # cmp byte [eax], al; add byte [edi+eax+0x50], dh; call [0x5055C988] 
0x50507783  # cmp byte [eax], al; add byte [edi+eax+0x50], dh; call [0x5055C99C] 
0x50508b7c  # cmp byte [eax], al; add byte [ecx+0x00380483], cl; add byte [edx+0x01], ch; push 0x00000000; call [0x5054A240] 
0x50508bdb  # cmp byte [eax], al; add byte [ecx+0x00380C83], cl; add byte [edx+0x01], ch; push 0x00000000; call [0x5054A240] 
0x5050707c  # cmp byte [eax], al; add byte [ebx-0x39C4E7C0], cl; je 0x505070C4; push eax; call ebx 
0x50508c35  # cmp byte [eax], al; add byte [ebx-0x00A907BB], cl; jo 0x50508C87; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x505081e1  # cmp byte [eax], al; add byte [ebp+0x6A50FC45], cl; push ebx; push [ebp+0x0C]; call [0x5055C9A4] 
0x5051ab95  # cmp byte [eax], al; je 0x5051ABA1; push ebx; push esi; call [eax] 
0x50515c57  # cmp byte [eax], al; jne 0x50515C46; ret 
0x50516bdd  # cmp byte [ecx], al; add byte [eax], al; ret 
0x50516c02  # cmp byte [ecx], al; add byte [eax], al; push [esp+0x10]; push edx; push eax; call ecx 
0x50527296  # cmp byte [edi], cl; xchg eax, ebp; ror [ebx+0x500E8BC1], 0x56; call [ecx+0x1C] 
0x5050f79c  # cmp byte [esi], bl; jne 0x5050F78D; push esi; lea eax, [ebp-0x1C]; push eax; call [0x5054A0B8] 
0x505466bc  # cmp byte [ecx], ah; push ebp; push eax; push [0x5055E078]; mov [0x5055DFB4], eax; call esi 
0x50513c59  # cmp byte [ebx], dh; rcr byte [edi+0x40], 0x5E; ret 
0x5053e330  # cmp byte [ebp-0x04], cl; je 0x5053E33C; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50533392  # cmp byte [eax+0x01], dl; jne 0x5053339B; xor eax, eax; inc eax; ret 
0x50526dfe  # cmp byte [ecx+0x33], bl; rcr byte [ecx+0x5F], 0x5E; pop ebx; pop ebp; ret 
0x50516dda  # cmp byte [edi+0x5E], bl; lea eax, [ebx+0x04]; pop ebx; leave; ret 
0x5051ef78  # cmp byte [edi+0x5E], bl; ret 
0x50543a59  # cmp byte [edi-0x01], ah; call [ebx+0x53] 
0x505073cf  # cmp byte [esp+edi-0x75], dh; add byte [ebx+0x588B2078], cl; sbb al, 0x85; push [eax+esi+0x57]; call [0x5054A03C] 
0x50547a46  # cmp byte [ecx+0x000F18F9], al; add byte [edx-0x31], dh; pop edi; pop esi; retn 0x000C 
0x5050908a  # cmp byte [ebp-0x00F28B40], al; je 0x50509050; push 0x0C75FF53; push [ebp+0x08]; call eax 
0x50524749  # cmp byte [ebx+0x5E5FE845], cl; pop ebx; leave; ret 
0x50528344  # cmp byte [ebx+0x5E5FFC45], cl; pop ebx; leave; ret 
0x50509953  # cmp byte [ebp+0x00021486], cl; add byte [ebx], bh; fdiv [ecx+ecx+0x57]; push ebx; push eax; call [0x5054A04C] 
0x50506c9c  # cmp byte [eax+0x458B5054], ah; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506CB9; call [0x5054A040] 
0x50506cda  # cmp byte [eax+0x458B5054], ah; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506CFB; call [0x5054A040] 
0x50506d18  # cmp byte [eax+0x458B5054], ah; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506D3D; call [0x5054A040] 
0x50506d56  # cmp byte [eax+0x458B5054], ah; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506D7F; call [0x5054A040] 
0x50506d94  # cmp byte [eax+0x458B5054], ah; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506DC1; call [0x5054A040] 
0x50506dd0  # cmp byte [eax+0x458B5054], ah; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506E01; call [0x5054A040] 
0x5050cbd4  # cmp byte [eax-0x7972AFAC], ah; inc eax; add al, byte [eax]; add byte [ebp+0x502274C0], al; call [0x5054A03C] 
0x50538911  # cmp byte [ecx-0x0FCCAFAC], ah; call [0x5054A044]; xor esi, eax; call [0x5054A188] 
0x50538911  # cmp byte [ecx-0x0FCCAFAC], ah; call [0x5054A044] 
0x5052f25a  # cmp byte [ecx+0x45895054], ah; clc; lea eax, [ebp-0x08]; push 0x00000004; push eax; call [ebp+0x08] 
0x50507162  # cmp dl, cl; push ebp; push eax; mov [edi+0x000037F4], eax; push ebx; call [0x5054A098] 
0x505265fb  # cmp bh, cl; push ebp; push eax; inc [0x5055D3E8]; movzx eax, al; ret 
0x50546499  # cmp bh, bl; push ebp; push eax; call esi 
0x505469ec  # cmp al, ah; push ebp; push eax; call esi 
0x5053919c  # cmp cl, ah; push ebp; push eax; xor eax, eax; ret 
0x5050ddd1  # cmp bh, bh; inc [ebp-0x7CFA8A40]; enter 0xEBFF, 0x06; mov eax, [eax+0x000000E4]; retn 0x0004 
0x505060df  # cmp [eax], eax; add byte [ebx], bh; ret 
0x50513191  # cmp [eax], eax; add byte [ecx+0x59], bl; xor eax, eax; pop ebx; pop esi; retn 0x0008 
0x5051ea69  # cmp [ecx], eax; add byte [ecx+0x001F90C5], al; add cl, cl; ret 
0x5054110e  # cmp [ecx], eax; je 0x50541116; xor eax, eax; pop ebp; ret 
0x5050c408  # cmp [ebx], eax; add byte [eax], al; push esi; push eax; call [0x5054A050] 
0x50537932  # cmp [0x5055D554], eax; jbe 0x50537959; push esi; call [0x5054A048] 
0x5051104c  # cmp [0x50555C74], eax; je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x50542fbe  # cmp [0x5055DED0], eax; sete cl; mov eax, ecx; ret 
0x5051bf6e  # cmp [eax], ebx; je 0x5051BF7A; push edi; push esi; call [eax] 
0x50503780  # cmp [eax+edi*4], ebx; je 0x505037A1; lea esi, [eax+edi*4]; call [0x5054A044] 
0x50501e9e  # cmp [edi], ebx; je 0x50501EB5; call [0x5054A188] 
0x50507796  # cmp [eax], esi; jne 0x505077A3; cmp [ebx+edi*8+0x00003890], esi; je 0x505077AA; push eax; call [0x5055C988] 
0x5050777b  # cmp [eax], esi; jne 0x50507788; cmp [ebx+edi*8+0x000038A0], esi; je 0x5050778F; push eax; call [0x5055C99C] 
0x5050d84d  # cmp [0x505556E8], esi; je 0x5050D87B; mov eax, 0x505556E8; push [ebp-0x7C]; push [eax]; call edi 
0x50506801  # cmp [ecx], edi; cmp eax, 0x5055CA30; je 0x5050683B; push 0x5054A440; push [0x5055C9F0]; call esi 
0x50506802  # cmp [0x5055CA30], edi; je 0x5050683B; push 0x5054A440; push [0x5055C9F0]; call esi 
0x5054677e  # cmp [0x5055E07C], edi; jne 0x50546AC9; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x5050af63  # cmp [0x505556D0], edi; je 0x5050AF90; mov eax, 0x505556D0; push [eax]; push ebx; call [0x5054A0B8] 
0x5052dc1f  # cmp [ecx+0x08], eax; je 0x5052DC2E; mov ecx, [ecx+0x08]; mov eax, [ecx]; push ecx; call [eax+0x20] 
0x5051676b  # cmp [ecx+0x10], eax; setne al; ret 
0x50527834  # cmp [esp+0x08], eax; jbe 0x5052783E; or eax, 0xFFFFFFFF; ret 
0x505384bd  # cmp [ebp+0x08], eax; push 0x00000000; sete al; push 0x00001000; push eax; call [0x5054A074] 
0x50505a43  # cmp [ebp+0x08], eax; je 0x50505A64; push [ebp+0x08]; call edi 
0x50501308  # cmp [ebp+0x08], eax; je 0x5050132D; push [ebp+0x08]; call [0x5054A040] 
0x50505e87  # cmp [ebp+0x0C], eax; je 0x50505EA8; push [ebp+0x0C]; call esi 
0x50503af8  # cmp [ebp+0x0C], eax; je 0x50503B19; push [ebp+0x0C]; call edi 
0x50504c16  # cmp [ebp+0x0C], eax; je 0x50504C3B; push [ebp+0x0C]; call [0x5054A040] 
0x505379c7  # cmp [ebp+0x0C], eax; je 0x505379F3; cmp [0x5055D554], eax; jbe 0x505379F3; push esi; call [0x5054A048] 
0x505012ad  # cmp [ebp+0x0C], eax; je 0x505012DC; cmp edi, eax; je 0x505012D2; push edi; call [0x5054A03C] 
0x5050851c  # cmp [ebp+0x10], eax; je 0x5050853D; push [ebp+0x10]; call esi 
0x50537a19  # cmp [ebp+0x10], eax; je 0x50537A45; cmp [0x5055D554], eax; jbe 0x50537A45; push esi; call [0x5054A048] 
0x50513a4c  # cmp [ebp+0x14], eax; je 0x50513A75; lea eax, [ebp-0x08]; push eax; push esi; call [0x5054A0CC] 
0x5050fc8b  # cmp [ebp-0x20], eax; jne 0x5050FDA7; cmp [ebp-0x24], 0x02; jl 0x5050FD25; push [ebp-0x14]; call [0x5054A048] 
0x5054112b  # cmp [eax+0x18], ecx; sete dl; mov eax, edx; pop ebp; ret 
0x5051d775  # cmp [eax+0x30], ecx; jne 0x5051D77E; xor eax, eax; inc eax; ret 
0x505233db  # cmp [ebx-0x75], ecx; ret 
0x50548494  # cmp [ebp-0x7C], ecx; je 0x505484EB; push 0x80000001; call esi 
0x50501f8b  # cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x5053fcdf  # cmp [eax+0x04], edx; je 0x5053FCE6; xor eax, eax; pop ebp; ret 
0x5054361d  # cmp [ecx+0x08], edx; jne 0x50543627; mov eax, 0x00000001; ret 
0x5050a224  # cmp [ebp+0x0C], ebx; je 0x5050A236; push [ebp+0x10]; push esi; push [ebp+0x0C]; call [0x5054A04C] 
0x50503d2e  # cmp [ebp+0x0C], ebx; je 0x50503DA5; lea esi, [edi+0x000000DC]; or [esi], 0x08; call [0x5054A188] 
0x50503ad3  # cmp [ebp+0x10], ebx; je 0x50503AF6; push [ebp+0x10]; call edi 
0x50505e3d  # cmp [ebp+0x18], ebx; je 0x50505E60; push [ebp+0x18]; call esi 
0x50505bc1  # cmp [ebp+0x1C], ebx; je 0x50505BD3; push [ebp+0x1C]; call [0x5054A03C] 
0x50503227  # cmp [ebp+0x74], ebx; je 0x5050324C; push 0x00003A98; call [0x5054A048] 
0x505493cd  # cmp [ebp-0x78], ebx; je 0x505493F0; push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x50512d92  # cmp [ebp-0x3C], ebx; je 0x50512DC7; lea eax, [ebp-0x3C]; push eax; call [0x5054A268] 
0x5051e4bb  # cmp [ebp-0x34], ebx; je 0x5051E4F0; lea eax, [ebp-0x34]; push eax; call [0x5054A268] 
0x5050f051  # cmp [ebp-0x04], ebx; je 0x5050F0FE; push [ebp-0x04]; call [0x5054A0D8] 
0x5050ed64  # cmp [ebp-0x04], ebx; je 0x5050ED72; push [ebp-0x04]; call [0x5054A0E0] 
0x5050eda7  # cmp [ebp-0x04], ebx; je 0x5050EDB8; push [ebp-0x04]; call [0x5054A0DC] 
0x5050eddb  # cmp [ebp-0x04], ebx; je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8]; push [ebp-0x04]; call [0x5054A0E0] 
0x5050eddb  # cmp [ebp-0x04], ebx; je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8] 
0x5052f496  # cmp [esi+0x10], ebp; je 0x5052F40F; push [esi+0x04]; call [0x5054A13C] 
0x5051130e  # cmp [esp+0x08], esi; jbe 0x50511334; push 0x5055CA4C; call [0x5054A104] 
0x50508e4d  # cmp [esp-0x75], esi; add edi, edi; jo 0x50508E59; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50505bbc  # cmp [ebp+0x08], esi; je 0x50505BE5; cmp [ebp+0x1C], ebx; je 0x50505BD3; push [ebp+0x1C]; call [0x5054A03C] 
0x50507063  # cmp [ebp+0x0C], esi; je 0x50507188; push [ebp+0x0C]; call ebx 
0x505071a4  # cmp [ebp+0x0C], esi; je 0x505071D2; push [ebp+0x0C]; call ebx 
0x50506fcd  # cmp [ebp+0x0C], esi; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x505078eb  # cmp [ebp-0x08], esi; je 0x505078F9; push [ebp-0x08]; call [0x5055CA20] 
0x505079aa  # cmp [ebp-0x04], esi; je 0x505077FE; push [ebp-0x04]; call [0x5055CA0C] 
0x50507858  # cmp [ebp-0x04], esi; je 0x50507866; push [ebp-0x04]; call [0x5055CA0C] 
0x50506044  # cmp [ebp+0x08], edi; je 0x5050618B; push [ebp+0x08]; call [0x5054A03C] 
0x5050386c  # cmp [ebp+0x10], edi; je 0x5050387E; push [ebp+0x10]; call [0x5054A03C] 
0x50503967  # cmp [ebp+0x10], edi; mov edi, [0x5054A058]; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x50505e62  # cmp [ebp+0x14], edi; je 0x50505E85; push [ebp+0x14]; call esi 
0x50543e89  # cmp [ebp-0x20], edi; jne 0x50543E9E; push ebx; push edi; push [0x5055D69C]; call [0x5054A164] 
0x505363aa  # cmp [ebp-0x20], edi; jne 0x5053641B; mov esi, eax; call [0x5054A0E4] 
0x5050615e  # cmp [ebp-0x04], edi; je 0x5050616C; push [ebp-0x04]; call [0x5054A070] 
0x5052da1b  # cmp [esi+0x30], edi; je 0x5052DA2A; mov eax, [esi+0x08]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5052da2a  # cmp [esi+0x44], edi; jne 0x5052DA38; mov eax, [esi]; push edi; push esi; call [eax+0x1C] 
0x50509124  # cmp [ebx-0x74FFE782], eax; pop ebp; adc al, 0x75; and byte [ebx+0x74FF107E], al; sbb dh, dh; ret 
0x50522f93  # cmp [eax+eax*8+0x468BF174], eax; add al, 0xFF; inc ebp; adc byte [ebx], ch; ret 
0x5053bae0  # cmp [ebp-0x00001AE0], ecx; je 0x5053BAF0; test bl, bl; je 0x5053BD40; call [0x5054A214] 
0x5050846d  # cmp [ebp-0x3FCC0001], ecx; pop edi; pop esi; pop ebx; pop ebp; retn 0x0020 
0x50501f83  # cmp [esi+0x000000A4], ecx; jne 0x50501FC1; cmp [ebp-0x08], ecx; je 0x50501FB1; call [0x5054A188] 
0x505031f0  # cmp [ebp+0x00000080], ebx; jne 0x5050320A; and [esi+0x000000DC], 0xFFFFFFF7; push 0x5055C960; call [0x5054A0D4] 
0x5050779a  # cmp [ebx+edi*8+0x00003890], esi; je 0x505077AA; push eax; call [0x5055C988] 
0x5050777f  # cmp [ebx+edi*8+0x000038A0], esi; je 0x5050778F; push eax; call [0x5055C99C] 
0x505030cc  # cmp [esi+0x000000F8], edi; jne 0x5050316E; mov eax, [esi+0x08]; mov [ebp+0x70], eax; call [0x5054A044] 
0x50502f7e  # cmp ebx, ebp; or eax, 0x04271E68; sub al, 0x1F; loop 0x50502F89; inc [ebx+0x5E5FFFC8]; retn 0x0008 
0x5050d712  # cmp edi, edi; call [eax-0x007F] 
0x5050d6dd  # cmp edi, edi; call [eax-0x73]; inc edi; adc al, 0x50; call [0x5054A038] 
0x5050d6dd  # cmp edi, edi; call [eax-0x73] 
0x5053f0c7  # cmp edi, edi; inc [ebp-0x17CA8A0A]; retn 0xFFB0 
0x50521e60  # cmp al, byte [eax]; add byte [ecx+0x59], bl; leave; ret 
0x5052e8d9  # cmp al, byte [eax]; add byte [ecx+0x000198C5], al; add cl, cl; ret 
0x50521e6d  # cmp al, byte [eax]; add byte [ebx+0x07831406], al; in al, dx; pop ecx; pop ecx; ret 
0x50518f5d  # cmp al, byte [eax]; add byte [ebx+0x5B5F10C4], al; leave; ret 
0x5050322e  # cmp al, byte [eax]; add bh, bh; adc eax, 0x5054A048; push [0x5055C960]; push esi; call [0x5054A18C] 
0x5050e8de  # cmp al, byte [edx]; add cl, cl; retn 0x0008 
0x5052b9f2  # cmp al, byte [esp+edi*2+0x00]; rcr byte [edi+0x5B], cl; leave; ret 
0x5054875e  # cmp cl, byte [edi]; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x505496cd  # cmp dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x5051ffbb  # cmp al, byte [esi-0x7D]; retn 0x3B04 
0x5050c50f  # cmp ch, byte [eax+0x24]; lodsb; push esp; push eax; push esi; call ebx 
0x5052b9ef  # cmp cl, byte [ecx+0x7C043A44]; rcr byte [edi+0x5B], cl; leave; ret 
0x5050ef12  # cmp cl, byte [ebx+0x0032CC86]; add bh, bh; jne 0x5050EF18; add [ebp+0x0C], eax; mov [ebp-0x0C], eax; call [0x5054A0D8] 
0x505413b7  # cmp cl, byte [ebp+0x3350F845]; test byte [esi+0x56], 0x68; push 0x56505510; call [0x5054A230] 
0x505072ee  # cmp bl, byte [ebp+0x4589FFFF]; test byte [edx+0x00], ch; push [edi+0x000037F4]; call [0x5055CA10] 
0x50541c98  # cmp al, dh; inc ebp; or bl, byte [esi+eax*8+0x45]; or eax, [eax]; call [0x5054A1A0] 
0x5050610f  # cmp bh, bh; jo 0x50506123; call [0x5054A03C] 
0x50549129  # cmp bh, bh; jne 0x50549139; call [0x5054A03C] 
0x5050614f  # cmp eax, [eax]; add byte [ebx], bh; ret 
0x505097c5  # cmp eax, [eax]; je 0x5050988E; push ebx; call [0x5054A03C] 
0x50525928  # cmp eax, [ecx]; jl 0x5052591D; lea eax, [ecx+eax*4]; dec [eax]; ret 
0x5050e782  # cmp eax, [edx]; add cl, cl; retn 0x000C 
0x50532377  # cmp ecx, [0x50555D00]; jne 0x50532381; rep ret 
0x50539415  # cmp esi, [0x50556660]; je 0x50539453; test esi, esi; je 0x5053943B; push esi; call [0x5054A0D4] 
0x5051e867  # cmp eax, [esp+0x04]; jbe 0x5051E871; or eax, 0xFFFFFFFF; ret 
0x5052dfdd  # cmp eax, [esp+0x04]; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x505017eb  # cmp eax, [esp+0x10]; jne 0x505017FC; call [0x5054A044] 
0x50540e19  # cmp eax, [ebp+0x0C]; jc 0x50540E12; pop ebp; ret 
0x50503a02  # cmp eax, [ebp+0x10]; jne 0x50503AB0; mov [esi+0x000000A8], edi; call [0x5054A188] 
0x5051e1f2  # cmp eax, [ebp+0x14]; jne 0x5051E1E7; xor eax, eax; pop ebp; ret 
0x50527965  # cmp eax, [esi+0x08]; jnl 0x50527974; mov [esi+0x08], eax; mov [esi+0x04], 0x00000001; pop esi; ret 
0x5051d841  # cmp eax, [esi+0x20]; jl 0x5051D79E; pop edi; pop ebx; pop esi; ret 
0x5050e591  # cmp ecx, [eax+0x02]; add byte [ebx+0x5B5F0CC4], al; leave; ret 
0x5051eab9  # cmp ecx, [eax+0x0C]; jnl 0x5051EAC5; mov [eax+0x10], ecx; xor eax, eax; inc eax; ret 
0x5051d91c  # cmp ecx, [eax+0x20]; setl dl; mov eax, edx; ret 
0x50547557  # cmp edx, [esp+0x04]; je 0x50547566; test eax, eax; jne 0x50547551; xor eax, eax; retn 0x0008 
0x50533df3  # cmp ebx, [ebp-0x08]; jnbe 0x50533E04; push edi; push ebx; call [ebp+0x14] 
0x5050ddc3  # cmp ebx, [esi+0x5B]; pop edi; leave; retn 0x0008 
0x5052f310  # cmp ebp, [edx-0x01]; push [edi+0x10]; call [0x5054A144] 
0x5051132e  # cmp esi, [esp+0x08]; jc 0x50511314; xor eax, eax; pop esi; retn 0x0004 
0x5053ac04  # cmp esi, [eax+esi+0x3B]; ret 
0x50537b0e  # cmp esi, [ebp+0x08]; jc 0x50537B03; pop esi; pop ebp; ret 
0x50537b32  # cmp esi, [ebp+0x0C]; jc 0x50537B23; pop esi; pop ebp; ret 
0x50524f93  # cmp ecx, [ebx+0x72D83BF3]; or dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x5050411c  # cmp ecx, [ebp-0x0002177B]; call [eax+0x68] 
0x5053f1d8  # cmp eax, ecx; ja 0x5053FB8D; jmp [0x5053FBDB+eax*4] 
0x5053d419  # cmp eax, ecx; jc 0x5053D408; xor eax, eax; pop ebp; ret 
0x5052f804  # cmp eax, ecx; je 0x5052F81A; neg eax; push eax; push esi; call [esi+0x44] 
0x50514880  # cmp eax, ecx; jbe 0x50514888; xor eax, eax; inc eax; ret 
0x50507ef5  # cmp eax, ecx; jnbe 0x50507F03; push 0x0000000A; call [0x5054A048] 
0x5051698b  # cmp eax, ecx; jl 0x50516992; lea eax, [ecx-0x01]; mov [edx+0x000000F0], eax; ret 
0x50524827  # cmp eax, edx; jne 0x5052482F; xor eax, eax; leave; ret 
0x5050ef39  # cmp eax, ebx; je 0x5050F08E; push eax; call [0x5054A0DC] 
0x5050eefa  # cmp eax, ebx; je 0x5050F085; push eax; call [0x5054A0DC] 
0x50516473  # cmp eax, ebx; je 0x5051647C; call [eax+0x08] 
0x50516490  # cmp eax, ebx; je 0x50516499; call [eax+0x14] 
0x505085f7  # cmp eax, ebx; je 0x50508602; push eax; call edi 
0x5051641d  # cmp eax, ebx; je 0x50516429; mov ecx, [edi+0x4C]; push eax; call [ecx+0x04] 
0x5051642c  # cmp eax, ebx; je 0x50516438; mov ecx, [edi+0x58]; push eax; call [ecx+0x04] 
0x5051643b  # cmp eax, ebx; je 0x50516447; mov ecx, [edi+0x5C]; push eax; call [ecx+0x04] 
0x5051644a  # cmp eax, ebx; je 0x50516456; mov ecx, [edi+0x68]; push eax; call [ecx+0x04] 
0x50516459  # cmp eax, ebx; je 0x50516465; mov ecx, [edi+0x6C]; push eax; call [ecx+0x04] 
0x505097fa  # cmp eax, ebx; je 0x50509807; push ecx; push ebx; push eax; call [0x5054A04C] 
0x50502c96  # cmp eax, ebx; je 0x50502CA3; push ebx; call [0x5054A048] 
0x50503f2f  # cmp eax, ebx; je 0x50503F3D; push eax; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x50515d5c  # cmp eax, ebx; je 0x50515D6B; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x505243a1  # cmp eax, ebx; je 0x505243BC; push eax; push [ebp+0x08]; call [edi+0x04] 
0x50524387  # cmp eax, ebx; je 0x505243C1; push eax; push [ebp+0x08]; call [edi+0x04] 
0x505105d2  # cmp eax, ebx; jne 0x505105E7; push [ebp+0x14]; call [0x5054A060] 
0x5053a569  # cmp eax, ebx; jne 0x5053A580; call [0x5054A0E4] 
0x505122a1  # cmp eax, ebx; jne 0x505122CC; mov esi, [ebp+0x10]; push [esi]; call [0x5054A0D8] 
0x5053834d  # cmp eax, ebx; jne 0x5053837F; call esi 
0x5053840e  # cmp eax, ebx; jne 0x50538394; call [0x5054A1D0] 
0x50507746  # cmp eax, esi; je 0x5050768D; push [ebp-0x08]; call [0x5055C9B8] 
0x5053847a  # cmp eax, esi; jnc 0x5053848D; mov eax, [edi]; test eax, eax; je 0x50538486; call eax 
0x505068ac  # cmp eax, esi; je 0x505068B9; push eax; call edi 
0x50502bba  # cmp eax, esi; je 0x50502BC7; push esi; call [0x5054A048] 
0x50507763  # cmp eax, esi; je 0x50507771; push esi; push eax; call [0x5055CA08] 
0x50506fb5  # cmp eax, esi; je 0x50506FC7; push esi; push eax; call [0x5055CA08] 
0x5050422d  # cmp eax, esi; je 0x5050425B; lea eax, [ebp-0x00000204]; push eax; call [0x5054A03C] 
0x50507082  # cmp eax, esi; je 0x505070C4; push eax; call ebx 
0x505068be  # cmp eax, esi; je 0x50506925; push eax; call edi 
0x5050783e  # cmp eax, esi; jne 0x5050784B; add edi, 0x00000114; mov [ebp+0x0C], edi; push [ebp+0x0C]; call [0x5054A03C] 
0x505070fd  # cmp eax, esi; jne 0x50507112; push ebx; call [0x5054A060] 
0x50507892  # cmp eax, esi; jne 0x505078AB; cmp [ebp-0x04], esi; je 0x505078A4; push [ebp-0x04]; call [0x5055CA0C] 
0x505467b1  # cmp eax, edi; je 0x50546AFF; mov esi, [0x5054A088]; push 0x505523BC; push eax; call esi 
0x5050665b  # cmp eax, edi; je 0x5050683B; mov esi, [0x5054A088]; push 0x5054A5B0; push eax; call esi 
0x50506e2a  # cmp eax, edi; je 0x50506E35; push eax; call ebp 
0x50506e1b  # cmp eax, edi; je 0x50506E27; push eax; call ebp 
0x50506817  # cmp eax, edi; je 0x5050683B; call eax 
0x5053a8b8  # cmp eax, edi; je 0x5053A874; call [0x5054A0E4] 
0x5050fe01  # cmp eax, edi; jne 0x5050FE13; push [ebp+0x14]; call [0x5054A060] 
0x5053d7b7  # cmp eax, edi; jne 0x5053D7CD; push [esi+0x10]; push edi; push [0x5055D69C]; call [0x5054A084] 
0x5054225e  # cmp eax, edi; jne 0x50542275; call [0x5054A0E4] 
0x5053a18a  # cmp ecx, eax; sbb eax, eax; and eax, ecx; add eax, 0x08; pop ebp; ret 
0x5053b174  # cmp ecx, eax; jne 0x5053B1F4; test byte [ebp+0x10], 0x01; je 0x5053B1F4; push [ebp-0x1C]; call [0x5054A060] 
0x5051c917  # cmp ecx, eax; jbe 0x5051C91E; xor eax, eax; ret 
0x5051c940  # cmp ecx, eax; jbe 0x5051C948; xor eax, eax; pop ebp; ret 
0x5051d0e2  # cmp ecx, eax; jbe 0x5051D0EA; or eax, 0xFFFFFFFF; ret 
0x50525aa0  # cmp ecx, eax; jl 0x50525AA8; xor eax, eax; pop esi; ret 
0x505470b6  # cmp ecx, esi; jne 0x505470E7; push 0x0000276D; call [0x5055DF88] 
0x50520184  # cmp ecx, esi; jle 0x50520165; or eax, 0xFFFFFFFF; pop esi; ret 
0x5051eba7  # cmp edx, eax; jl 0x5051EB9C; xor eax, eax; pop esi; leave; ret 
0x5051f9d3  # cmp edx, eax; mov eax, [ebp+0x08]; jle 0x5051FA1E; push [ebp-0x10]; push eax; call [eax+0x08] 
0x50545c11  # cmp edx, ecx; jne 0x50545C24; or eax, 0x00008000; ret 
0x5050ab65  # cmp edx, ecx; jle 0x5050AB6B; mov edx, ecx; mov [eax+0x00000108], edx; xor eax, eax; retn 0x0008 
0x50526e15  # cmp edx, esi; jbe 0x50526E1E; xor eax, eax; inc eax; pop esi; ret 
0x5050995a  # cmp ebx, eax; je 0x50509967; push edi; push ebx; push eax; call [0x5054A04C] 
0x5052f487  # cmp ebx, ebp; je 0x5052F4A8; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5052f434  # cmp ebx, ebp; jne 0x5052F443; call [0x5054A0E4] 
0x5052f44a  # cmp ebx, ebp; jne 0x5052F47E; call [0x5054A0E4] 
0x5051752c  # cmp ebx, esi; je 0x50517535; mov eax, 0x5054D2F0; mov [edi+0x4C], eax; call [eax] 
0x50533dd7  # cmp ebx, edi; jnc 0x50533DF0; push edi; push ebx; call [ebp+0x14] 
0x505467c9  # cmp ebx, edi; jne 0x505467E4; push [0x5055E07C]; call [0x5054A094] 
0x50540ed1  # cmp ebx, edi; jne 0x50540F36; push esi; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50509546  # cmp esp, esi; je 0x505095A5; push [ebp+0x08]; push ebx; call [0x5054A050] 
0x50504fa9  # cmp ebp, eax; ret 
0x505150e0  # cmp esi, eax; jne 0x505150A1; xor eax, eax; pop esi; leave; ret 
0x50533e76  # cmp esi, eax; jbe 0x50533E89; push edi; push esi; call [ebp+0x14] 
0x50533244  # cmp esi, ecx; jc 0x5053323A; pop esi; pop ebp; retn 0x0008 
0x50515788  # cmp esi, edx; pop esi; jnl 0x50515790; xor eax, eax; ret 
0x505477c1  # cmp esi, ebx; je 0x505478CE; push esi; call [0x5054A03C] 
0x505476ea  # cmp esi, ebx; je 0x50547780; push esi; call [0x5054A03C] 
0x50548e1f  # cmp esi, ebx; je 0x5054910A; push esi; mov esi, [0x5054A03C]; call esi 
0x505473ee  # cmp esi, ebx; je 0x505473F4; mov [esi], ebx; push 0x00002714; call [0x5055DF88] 
0x50509510  # cmp esi, ebx; je 0x5050951F; push [ebp+0x10]; push esi; push ebx; call [0x5054A04C] 
0x50503d79  # cmp esi, ebx; je 0x50503D96; push 0xFFFFFFFE; push esi; call [0x5054A068] 
0x5050c39e  # cmp esi, ebx; je 0x5050C3BD; push esi; call [0x5054A03C] 
0x5050f066  # cmp esi, ebx; jbe 0x5050F0B2; push ebx; push esi; push [ebp-0x04]; call [0x5054A0D0] 
0x5050f524  # cmp esi, edi; je 0x5050F66E; push esi; call [0x5054A03C] 
0x50533e07  # cmp esi, edi; jbe 0x50533E17; push edi; push esi; call [ebp+0x14] 
0x50533e57  # cmp esi, edi; jbe 0x50533E70; push edi; push esi; call [ebp+0x14] 
0x50533c65  # cmp esi, edi; jnbe 0x50533C8B; lea esp, [esp+0x00000000]; push ebx; push esi; call [ebp+0x10] 
0x505012b2  # cmp edi, eax; je 0x505012D2; push edi; call [0x5054A03C] 
0x50501955  # cmp edi, eax; je 0x5050199A; push edi; call [0x5054A280] 
0x5051e239  # cmp edi, ebx; je 0x5051E248; push edi; push esi; call [0x5054A09C] 
0x5053843f  # cmp edi, ebx; jne 0x5053844F; push esi; call [0x5054A1CC] 
0x50538388  # cmp edi, ebx; jne 0x5053839B; call esi 
0x5050bba3  # cmp edi, ebx; jne 0x5050BBC5; push [esi]; call [0x5054A03C] 
0x5052f446  # cmp edi, ebp; je 0x5052F47E; cmp ebx, ebp; jne 0x5052F47E; call [0x5054A0E4] 
0x50538489  # cmp edi, esi; jc 0x5053847E; pop edi; pop esi; ret 
0x50514dc1  # cmp al, 0x02; add byte [eax], al; push [ecx+0x10]; push [edi+0x64]; call [eax+0x14] 
0x50514f4d  # cmp al, 0x02; add byte [eax], al; push [ecx+0x10]; push [edi+0x74]; call [eax+0x10] 
0x5050e72e  # cmp al, 0x02; add cl, cl; retn 0x000C 
0x50531d19  # cmp al, 0x03; retn 0x4589 
0x5053403e  # cmp al, 0x0F; xchg eax, ebp; retn 0xC28B 
0x50501419  # cmp al, 0x18; mov eax, [0x5055C934]; mov [eax+ebx*4], esi; mov [esi+0x04], ebx; mov [esi], edi; call [0x5054A044] 
0x505465e4  # cmp al, 0x22; push ebp; push eax; push [0x5055E078]; mov [0x5055DF80], eax; call esi 
0x5050f937  # cmp al, 0x2A; add al, byte [eax]; add ebp, 0x68; leave; retn 0x0010 
0x50533a79  # cmp al, 0x2B; enter 0x0E89, 0x33; rcr byte [esi+0x5B], 0xC9; ret 
0x505271c6  # cmp al, 0x30; add byte [ecx+0x59], bl; jne 0x505271D1; xor eax, eax; pop esi; ret 
0x5050b017  # cmp al, 0x57; call [0x5054A050] 
0x50511053  # cmp al, 0x57; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x505073d1  # cmp al, 0x8B; add byte [ebx+0x588B2078], cl; sbb al, 0x85; push [eax+esi+0x57]; call [0x5054A03C] 
0x505277cb  # cmp al, 0x8B; aas; mov eax, [edi]; push esi; push edi; call [eax+0x14] 
0x5050d328  # cmp al, 0xA0; push esp; push eax; push ebx; call edi 
0x505094df  # cmp al, 0xA0; push esp; push eax; push esi; call edi 
0x505051f5  # cmp al, 0xA0; push esp; push eax; push edi; call ebx 
0x50514341  # cmp al, 0xA0; push esp; push eax; pop ebp; retn 0x000C 
0x50508b59  # cmp al, 0xA0; push esp; push eax; je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x50504921  # cmp al, 0xA0; push esp; push eax; lea eax, [ebp+eax+0x48]; push eax; call [0x5054A260] 
0x50509f01  # cmp al, 0xA0; push esp; push eax; lea eax, [ebp+eax-0x44]; push eax; call esi 
0x50548610  # cmp al, 0xA0; push esp; push eax; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5050a911  # cmp al, 0xA0; push esp; push eax; call ebx 
0x5052f770  # cmp al, 0xA1; push esp; push eax; pop esi; ret 
0x5052f3d4  # cmp al, 0xA1; push esp; push eax; mov [esi+0x18], 0x00000001; ret 
0x5050123a  # cmp al, 0xC9; push ebp; push eax; push 0x00001A00; call [0x5054A034] 
0x505037e4  # cmp al, 0xC9; push ebp; push eax; push 0x5055C93C; call [0x5054A18C] 
0x50503415  # cmp al, 0xC9; push ebp; push eax; mov [ebp-0x38], eax; mov [ebp-0x30], ebx; call [0x5054A18C] 
0x505010e6  # cmp al, 0xC9; push ebp; push eax; mov edi, eax; call esi 
0x5050109f  # cmp al, 0xC9; push ebp; push eax; call [0x5054A18C] 
0x505464ab  # cmp al, 0xDF; push ebp; push eax; call esi 
0x50531aca  # cmp al, 0xF5; cld; call [edi+0x6A] 
0x5050d4ec  # cmp al, 0xFF; dec [ebx-0x72F3DBAC]; mov ds, ax; add byte [eax], al; add byte [ebx+0x5E118901], cl; retn 0x0008 
0x5053e6b7  # cmp al, 0xFF; dec ecx; ret 
0x5051eb34  # cmp eax, 0x7F000000; jne 0x5051EB40; xor eax, eax; inc eax; leave; ret 
0x505363a7  # cmp eax, 0x7D390000; loopne 0x50536423; insb; mov esi, eax; call [0x5054A0E4] 
0x50536439  # cmp eax, 0xF08B0000; call [0x5054A0E4] 
0x50506604  # cmp eax, 0x8B000002; xor eax, 0x5054A090; push 0x00008000; call esi 
0x50512136  # cmp eax, 0xC9000202; retn 0x0010 
0x50541224  # cmp eax, 0xC0000005; sete dl; mov eax, edx; ret 
0x50539108  # cmp eax, 0xC0000005; je 0x50539119; cmp eax, 0xC000001D; je 0x50539119; xor eax, eax; ret 
0x50547e08  # cmp eax, 0x5054A008; mov [ebp-0x58], eax; call edi 
0x5052df86  # cmp eax, 0x83FFFF09; les ecx, [edi+ebx*2]; pop esi; pop ebp; ret 
0x505412f1  # cmp eax, 0xC0000017; sete cl; mov eax, ecx; ret 
0x5053910f  # cmp eax, 0xC000001D; je 0x50539119; xor eax, eax; ret 
0x5052a6c7  # cmp eax, 0x59FFFF22; pop ecx; ret 
0x50506803  # cmp eax, 0x5055CA30; je 0x5050683B; push 0x5054A440; push [0x5055C9F0]; call esi 
0x50507ee4  # cmp eax, 0x00002733; jne 0x50507F03; call ebx 
0x5053d72d  # cmp eax, 0x5055E134; pop ebx; pop edi; pop esi; leave; ret 
0x5050d327  # cmp eax, 0x5054A03C; push ebx; call edi 
0x505094de  # cmp eax, 0x5054A03C; push esi; call edi 
0x50508b58  # cmp eax, 0x5054A03C; je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x50510792  # cmp eax, 0x5054A03C; test esi, esi; je 0x505107A7; push esi; call edi 
0x50508e88  # cmp eax, 0x5055CA3C; mov [0x5055CA40], edi; pop edi; pop esi; ret 
0x50503ace  # cmp eax, 0x5054A040; cmp [ebp+0x10], ebx; je 0x50503AF6; push [ebp+0x10]; call edi 
0x50508e8e  # cmp eax, 0x5055CA40; pop edi; pop esi; ret 
0x50510390  # cmp eax, 0x5054A04C; push 0x00000200; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call edi 
0x5050396b  # cmp eax, 0x5054A058; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x50539764  # cmp eax, 0x5054A15C; call edi 
0x50531770  # cmp eax, 0x5054A060; pop ecx; pop ecx; push [esi+0x04]; call edi 
0x50531857  # cmp eax, 0x5054A060; call edi; push [ebp-0x04]; call edi 
0x5052f71b  # cmp eax, 0x5054A060; call edi; push [esi+0x08]; call edi 
0x5052f71b  # cmp eax, 0x5054A060; call edi 
0x5050b82f  # cmp eax, 0x5054A260; push eax; call edi 
0x5051356e  # cmp eax, 0x5054A260; mov ebx, 0x5054AD00; lea eax, [esi+0x00000200]; push ebx; push eax; call edi 
0x50547f8d  # cmp eax, 0x5054A260; call edi 
0x5054677f  # cmp eax, 0x5055E07C; jne 0x50546AC9; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x5051c86d  # cmp eax, 0x5F02FF83; jle 0x5051C881; and eax, 0x3F; mov al, byte [eax+0x5054B5C0]; mov byte [ecx+0x03], al; ret 
0x5051e48d  # cmp eax, 0x5054A188; mov esi, eax; imul esi, esi, 0x000003E8; pop ecx; mov [ebp-0x18], esi; call edi 
0x50531d5f  # cmp eax, 0x5054A190; call edi 
0x50538689  # cmp eax, 0xC0000092; jne 0x50538697; mov [esi+0x64], 0x0000008A; push [esi+0x64]; push 0x00000008; call ebx 
0x505068a7  # cmp eax, 0x5054A094; cmp eax, esi; je 0x505068B9; push eax; call edi 
0x50542940  # cmp eax, 0x5055DEB8; add byte [ebx-0x717AF028], cl; add byte [eax], al; add byte [eax-0x68], ch; and byte [ebp+0x50], dl; call [0x5054A08C] 
0x50542724  # cmp eax, 0x50556CC0; add dh, byte [ebp-0x26]; call [0x5054A0E4] 
0x5050af64  # cmp eax, 0x505556D0; je 0x5050AF90; mov eax, 0x505556D0; push [eax]; push ebx; call [0x5054A0B8] 
0x505010b1  # cmp eax, 0x5054A0D4; mov esi, 0x5055520C; push esi; call edi 
0x50546cb9  # cmp eax, 0x5055DFE4; add byte [esi+0x74], dl; adc byte [esi-0x01], dl; adc eax, 0x5055DF10; push eax; call [0x5055DFE4] 
0x5050f616  # cmp eax, 0x00001FE8; push eax; push 0x5054AC9C; push esi; call [0x5054A260] 
0x50502603  # cmp eax, 0x76FF50F0; or al, 0xE8; and cl, byte [edx+0x04]; add byte [ebx], bh; ret 
0x505466f5  # cmp eax, 0x50556FF8; push [ebp+0x0B]; call [0x5054A184] 
0x5051cd8a  # cmp eax, 0x59FFFFFF; pop esi; ret 
0x5052f374  # cmp eax, 0xFFFFFFFF; jbe 0x5052F37F; call [0x5054A13C] 
0x5052e4ee  # add byte [eax], al; leave; ret 
0x50523417  # add byte [edi+0x5E], bl; pop ebp; pop ebx; ret 
0x50511091  # add byte [ebp+0x10], dh; push esi; call [0x5054A070] 
0x5051ca7e  # add byte [ebp-0x12], dh; and [esi+0x04], 0x00000000; and [esi+0x08], 0x00000000; pop esi; ret 
0x5050c719  # add byte [ebp+0x68E77FF6], al; add byte [edx], al; add byte [eax], al; push edi; push [ebp-0x10]; call [0x5054A04C] 
0x50506049  # add [eax], eax; add bh, bh; jne 0x50506058; call [0x5054A03C] 
0x505031dd  # add al, 0x00; test eax, eax; jnle 0x5050319B; call [0x5054A188] 
0x5050ff35  # and al, 0x02; add cl, cl; retn 0x0014 
0x50507085  # push eax; call ebx 
0x50538bde  # test edi, edi; je 0x50538BF6; cmp [esi+0x04], 0x01; je 0x50538BF6; push edi; call ebx 
0x5052f55a  # mov [esi+0x04], eax; call ebx 
0x5050b5c2  # lea eax, [esp+0x18]; push eax; call [0x5054A0BC] 
0x5051c92a  # cwde; add [eax], eax; pop ecx; ret 
0x505116b2  # lds eax, [eax]; add byte [ebx+0x458928C4], al; adc byte [ebx], bh; ret 
0x50536678  # jecxz 0x505366CE; push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x50501427  # call [0x5054A044] 
0x50547e70  # aas; add byte [edi], cl; add byte [edx+0x00], ch; push 0x5054ABA8; push ebx; call esi 
0x50546786  # aas; add eax, [eax]; add byte [ebx+0x54A09035], cl; push eax; push 0x00008000; call esi 
0x50537f37  # aas; push edi; call [0x5054A1C0] 
0x50516623  # aas; arpl word [eax], ax; add byte [ebx-0x3B7CABB9], cl; sbb byte [ebx], bh; ret 
0x5051c876  # aas; mov al, byte [eax+0x5054B5C0]; mov byte [ecx+0x03], al; ret 
0x505277cd  # aas; mov eax, [edi]; push esi; push edi; call [eax+0x14] 
0x505142ea  # aas; jmp [0x5051434A+eax*4] 
0x50542693  # inc eax; add byte [eax], al; pop ebp; ret 
0x50503db1  # inc eax; add byte [eax], al; jne 0x50503DCE; mov esi, 0x5055C960; push esi; call [0x5054A0D4] 
0x5052e2f5  # inc eax; add byte [eax], al; add ebp, 0x00000450; leave; ret 
0x50503d45  # inc eax; add byte [eax], al; mov [edi+0x000032C0], eax; jne 0x50503DCE; push 0x5055C960; call [0x5054A15C] 
0x50527ec0  # inc eax; add byte [eax], al; leave; ret 
0x5052d95e  # inc eax; add byte [ebx+0x016A5708], cl; push eax; call [ecx+0x1C] 
0x50508b55  # inc eax; add byte [ebx+0x54A03C3D], cl; push eax; je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x5052ef28  # inc eax; add [eax], eax; add byte [eax], al; xor eax, eax; pop esi; ret 
0x50507231  # inc eax; add [eax], eax; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x50513587  # inc eax; add al, byte [eax]; add byte [ebx+0x50], dl; call edi 
0x5050c6cd  # inc eax; add al, byte [eax]; add byte [edx+0x40], ch; push esi; push eax; call [0x5054A04C] 
0x5050cbda  # inc eax; add al, byte [eax]; add byte [ebp+0x502274C0], al; call [0x5054A03C] 
0x505071da  # inc eax; add al, byte [eax]; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x5051469b  # inc eax; add al, 0x3B; ret 
0x5050eaa2  # inc eax; add eax, 0x00000AC0; push eax; lea eax, [ebp-0x54]; push eax; call [0x5054A04C] 
0x50508e2a  # inc eax; or byte [ebx], dh; rol byte [eax+0x5F], 0x5E; pop ebx; pop ebp; retn 0x0008 
0x5052f507  # inc eax; or byte [ebx-0x37C4F7B7], cl; jbe 0x5052F514; or eax, 0xFFFFFFFF; ret 
0x5051f2e0  # inc eax; or bl, al; or eax, 0xFFFFFFFF; ret 
0x505096f6  # inc eax; or dh, bh; fdivr qword [edx+0x0C40C798]; jbe 0x50509755; xor dl, byte [eax]; ret 
0x5052da9d  # inc eax; or bh, bh; jne 0x5052DAAE; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x50508248  # inc eax; or al, 0x53; add eax, 0x18; push eax; push edi; call [0x5055CA2C] 
0x50508296  # inc eax; or al, 0x6A; add eax, [ebx+0x575030C0]; call [0x5055CA2C] 
0x505096fd  # inc eax; or al, 0x76; push esp; xor dl, byte [eax]; ret 
0x505207ce  # inc eax; or al, 0x76; push esp; xor dl, byte [eax]; mov [eax+0x10], 0xC3D2E1F0; ret 
0x50508326  # inc eax; or al, 0x83; shl byte [eax], 0x50; call edi 
0x5052dd2a  # inc eax; or al, 0xFF; je 0x5052DD53; or byte [ebx+0x51FF5008], cl; adc byte [ecx+0x59], bl; ret 
0x5052dc7d  # inc eax; or al, 0xFF; jne 0x5052DC8E; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5053c1e5  # inc eax; adc byte [esi+0x5D], bl; ret 
0x50514fa9  # inc eax; adc byte [ebx-0x7CADFA16], al; rol byte [0x84B7FF50], 0x00; add byte [eax], al; call [ecx+0x18] 
0x505085f2  # inc eax; adc byte [ecx-0x3CC403BB], cl; je 0x50508602; push eax; call edi 
0x5051f271  # inc eax; adc bl, al; mov eax, [esp+0x04]; mov eax, [eax]; ret 
0x505207d5  # inc eax; adc al, dh; loope 0x505207AC; ret 
0x50515796  # inc eax; adc al, 0x2B; retn 0xC103 
0x50517f5d  # inc eax; sbb byte [ebp-0x00A98B8D], cl; jnbe 0x50517F72; call [eax+0x08] 
0x505167d8  # inc eax; sbb al, 0xC3; mov eax, 0x00001000; ret 
0x505317b9  # inc eax; sbb al, 0xC3; ret 
0x50531653  # inc eax; pop ds; add byte [eax], al; push esi; call [eax+0x04] 
0x5052e233  # inc eax; pop ds; add byte [eax], al; push edi; call [eax+0x04] 
0x505033d9  # inc eax; and byte [ecx+0x000AA486], cl; add byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0010 
0x50546458  # inc eax; and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF2C], eax; call esi 
0x50518cde  # inc eax; and al, 0x8B; push ecx; and al, 0x3B; retn 0x027E 
0x50516825  # inc eax; and al, 0xC3; xor eax, eax; ret 
0x505147eb  # inc eax; add byte [eax], al; leave; retn 0x0020 
0x50532916  # inc eax; sub dl, byte [ebx+0x50]; mov edi, edi; neg ecx; jmp [0x505329F0+ecx*4] 
0x50525927  # inc eax; cmp eax, [ecx]; jl 0x5052591D; lea eax, [ecx+eax*4]; dec [eax]; ret 
0x50540e17  # inc eax; inc ecx; cmp eax, [ebp+0x0C]; jc 0x50540E12; pop ebp; ret 
0x5052dfdb  # inc eax; inc edx; cmp eax, [esp+0x04]; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x50508c18  # inc eax; dec eax; test eax, eax; je 0x50508C55; push eax; call edi 
0x505167c1  # inc eax; dec esp; test eax, eax; je 0x505167DB; mov eax, [eax+0x14]; ret 
0x5053922f  # inc eax; dec esi; jne 0x5053922A; pop edi; pop esi; ret 
0x5050ca87  # inc eax; push eax; lea eax, [edi+0x00000200]; push eax; call ebx 
0x5050caa2  # inc eax; push eax; lea eax, [edi+0x00000240]; push eax; call ebx 
0x5050c6d2  # inc eax; push esi; push eax; call [0x5054A04C] 
0x505167d1  # inc eax; pop eax; test eax, eax; je 0x505167DB; mov eax, [eax+0x1C]; ret 
0x5051681e  # inc eax; pop eax; test eax, eax; je 0x50516828; mov eax, [eax+0x24]; ret 
0x50525a74  # inc eax; pop ecx; inc eax; ret 
0x5051401f  # inc eax; pop ecx; pop ecx; retn 0x0004 
0x5051fde6  # inc eax; pop ebx; pop ebp; ret 
0x50507518  # inc eax; pop ebx; pop edi; pop esi; leave; retn 0x0008 
0x50513ff6  # inc eax; pop ebp; retn 0x0010 
0x5051e1ec  # inc eax; pop ebp; ret 
0x5050dac6  # inc eax; pop esi; pop ebx; pop edi; pop ebp; retn 0x000C 
0x5051c417  # inc eax; pop esi; pop ebx; ret 
0x5051482b  # inc eax; pop esi; pop ebp; retn 0x0004 
0x5051df5a  # inc eax; pop esi; pop ebp; ret 
0x5050aea2  # inc eax; pop esi; pop edi; retn 0x0004 
0x5054881e  # inc eax; pop esi; retn 0x000C 
0x50513c5d  # inc eax; pop esi; ret 
0x50513135  # inc eax; pop esi; leave; retn 0x000C 
0x50515c2f  # inc eax; pop edi; pop ebp; ret 
0x50508e2e  # inc eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x0008 
0x50522ff7  # inc eax; pop edi; pop esi; pop ebx; pop ebp; ret 
0x50512fc2  # inc eax; pop edi; pop esi; pop ebx; leave; retn 0x0004 
0x505077ac  # inc eax; pop edi; pop esi; pop ebx; leave; retn 0x0008 
0x5051c32b  # inc eax; pop edi; pop esi; pop ebx; leave; ret 
0x50531a47  # inc eax; pop edi; pop esi; pop ebp; retn 0x000C 
0x505119f2  # inc eax; pop edi; pop esi; retn 0x0004 
0x5050af02  # inc eax; pop edi; pop esi; retn 0x0008 
0x50538bbd  # inc eax; pop edi; pop esi; ret 
0x5051cfc4  # inc eax; pop edi; leave; ret 
0x50544014  # inc eax; push 0x50552104; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544014  # inc eax; push 0x50552104; call [0x5054A0A8] 
0x5053afcf  # inc eax; jc 0x5053AFD2; add byte [ebx], ah; retn 0xC483 
0x50515c55  # inc eax; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x505479f8  # inc eax; cmp ecx, 0x00000F18; jc 0x505479E9; xor eax, eax; retn 0x0004 
0x50541f51  # inc eax; cmp bh, 0xFF; mov [eax], 0x00000009; or eax, 0xFFFFFFFF; pop ebp; ret 
0x5052428e  # inc eax; add ecx, 0x04; dec edx; jne 0x50524289; ret 
0x5050da07  # inc eax; mov [esi], eax; push ebx; lea eax, [esi+0x04]; push eax; call [0x5054A04C] 
0x5052f764  # inc eax; mov [esi+0x10], eax; mov [esi+0x14], eax; mov [esi+0x1C], eax; call [0x5054A13C] 
0x5052f7b1  # inc eax; mov [esi+0x14], eax; mov [esi+0x1C], eax; call [0x5054A13C]; pop esi; ret 
0x5052f7b1  # inc eax; mov [esi+0x14], eax; mov [esi+0x1C], eax; call [0x5054A13C] 
0x50518076  # inc eax; mov [edi+0x58], eax; call [eax] 
0x50536962  # inc eax; mov [ebp-0x0000031C], esi; mov [ebp-0x000002D4], eax; call [0x5054A1A8] 
0x505266e4  # inc eax; mov ecx, [esi]; push eax; push esi; call [ecx+0x1C] 
0x5052f1a8  # inc eax; lea eax, [ebp-0x40]; push eax; call [0x5054A134] 
0x50518106  # inc eax; lea ecx, [ebp-0x44]; push ecx; push [edi+0x70]; call [eax+0x08] 
0x50518227  # inc eax; lea ecx, [ebp-0x44]; push ecx; push [edi+0x74]; call [eax+0x08] 
0x50503acf  # inc eax; mov al, byte [0x5D395054]; adc byte [esi+ebx-0x01], dh; jne 0x50503AEB; call edi 
0x50506983  # inc eax; mov al, byte [0xC0855054]; je 0x50506993; push eax; call ebx 
0x5052f466  # inc eax; mov eax, [0xD88B5054]; cmp ebx, ebp; jne 0x5052F47B; call [0x5054A0E4] 
0x5052f329  # inc eax; mov eax, [0xD88B5054]; test ebx, ebx; jne 0x5052F341; call [0x5054A0E4] 
0x50540344  # inc eax; mov byte [0x45895054], al; lock test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x505384de  # inc eax; mov [0x5055E140], eax; pop ebp; ret 
0x50512216  # inc eax; shl eax, 0x0C; push eax; push 0x00000042; call [0x5054A194] 
0x5051eb3d  # inc eax; leave; ret 
0x505263f6  # inc eax; aam 0x55; push eax; pop esi; pop ebx; ret 
0x505464bd  # inc eax; fist word [ebp+0x50]; call esi 
0x505384e0  # inc eax; loope 0x50538538; push eax; pop ebp; ret 
0x5053bba9  # inc eax; in eax, 0xFF; call [eax-0x18] 
0x5053bbcd  # inc eax; in eax, 0xFF; call [ecx+0x50] 
0x5053bb84  # inc eax; in eax, 0xFF; call [ebx+0x50] 
0x5051e2e0  # inc eax; push [esp+0x20]; call [0x5054A0A8] 
0x5050ef29  # inc eax; push [ebp+0x0C]; push [ebp-0x04]; call [0x5054A0D0] 
0x50548e48  # inc eax; push [ebp+0x1C]; lea eax, [ebp+0x24]; push eax; call [0x5054A04C] 
0x5051af15  # inc eax; push [edi+0x04]; call [eax+0x04] 
0x505277c7  # inc eax; dec [ecx+0x3F8B3C5E]; mov eax, [edi]; push esi; push edi; call [eax+0x14] 
0x5053d789  # inc ecx; add byte [eax], al; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x5051e19c  # inc ecx; add [eax], eax; leave; ret 
0x50535bc4  # inc ecx; add [edi], ecx; mov dh, 0x56; add [ebx], ebp; retn 0x1174 
0x50535b3f  # inc ecx; add [edi], ecx; mov dh, 0x56; add [ebx], ebp; retn 0x1574 
0x50535b60  # inc ecx; add cl, byte [edi]; mov dh, 0x56; add ch, byte [ebx]; retn 0x1574 
0x5051c87e  # inc ecx; add eax, ebx; mov byte [ecx+0x03], 0x3D; ret 
0x5052a826  # inc ecx; add al, 0x0F; mov dh, 0x51; add eax, 0x0B08E0C1; retn 0xB60F 
0x5053116b  # inc ecx; add al, 0x8B; inc ecx; or byte [ebx], al; retn 0x558B 
0x5053116e  # inc ecx; or byte [ebx], al; retn 0x558B 
0x505218f4  # inc ecx; or byte [ebx-0x76A0F3BF], cl; xor [ebx], eax; ret 
0x50531179  # inc ecx; or al, 0x03; retn 0x558B 
0x5051ce5a  # inc ecx; or al, 0x04; xor eax, eax; inc eax; pop esi; ret 
0x50521903  # inc ecx; or al, 0x5B; leave; ret 
0x50531181  # inc ecx; or al, 0x8B; inc ecx; adc byte [ebx], al; retn 0x558B 
0x50537cdf  # inc ecx; sldt word [eax]; pop ecx; ret 
0x50531184  # inc ecx; adc byte [ebx], al; retn 0x558B 
0x5051f269  # inc ecx; adc bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x10]; ret 
0x5053118f  # inc ecx; adc al, 0x03; retn 0x558B 
0x50531197  # inc ecx; adc al, 0x8B; inc ecx; sbb byte [ebx], al; retn 0x558B 
0x5053119a  # inc ecx; sbb byte [ebx], al; retn 0x558B 
0x505311a2  # inc ecx; sbb byte [ebx+0x035F1C41], cl; retn 0x895E 
0x505311ac  # inc ecx; sbb al, 0x5B; leave; ret 
0x505317b1  # inc ecx; sbb al, 0xC3; mov eax, [esp+0x04]; mov eax, [eax+0x1C]; ret 
0x5052ef81  # inc ecx; pop ds; add byte [eax], al; push esi; call [eax+0x04] 
0x5052e2da  # inc ecx; pop ds; add byte [eax], al; push edi; call [eax+0x04] 
0x50532b8c  # inc ecx; and eax, 0x00000103; pop ebp; ret 
0x50532d96  # inc ecx; and eax, 0x00000107; pop ebp; ret 
0x50532c91  # inc ecx; and eax, 0x00000080; pop ebp; ret 
0x50540e18  # inc ecx; cmp eax, [ebp+0x0C]; jc 0x50540E12; pop ebp; ret 
0x50501958  # inc ecx; push edi; call [0x5054A280] 
0x505311c1  # inc ecx; pushad; mov [ecx+0x68], eax; mov [ecx+0x64], eax; ret 
0x505311c7  # inc ecx; ret 
0x5053e3d0  # inc ecx; jp 0x5053E3D8; xor eax, eax; inc eax; pop ebp; ret 
0x5051f73f  # inc ecx; and ecx, 0x00007FFF; mov [eax+0x00038000], ecx; ret 
0x50532d12  # inc ecx; and eax, 0x08; pop ebp; ret 
0x50533c2a  # inc ecx; test esi, esi; jne 0x50533C20; pop ebx; pop esi; ret 
0x5053c3eb  # inc ecx; mov [edx], ecx; ret 
0x505488c2  # inc ecx; mov [eax+0x30], ecx; mov eax, ecx; pop ebp; retn 0x000C 
0x505318ee  # inc ecx; fdiv st7, st0; call [edi+0x56] 
0x50533c02  # inc ecx; cld; mov ecx, [esp+0x04]; sub eax, ecx; ret 
0x50533bf8  # inc ecx; std; mov ecx, [esp+0x04]; sub eax, ecx; ret 
0x505039ff  # inc edx; add byte [eax], al; cmp eax, [ebp+0x10]; jne 0x50503AB0; mov [esi+0x000000A8], edi; call [0x5054A188] 
0x50508007  # inc edx; add eax, [eax]; add byte [ebp-0x72AE23B3], cl; sbb [eax+edi+0x5A6A0000], 0x50; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x5053deae  # inc edx; add al, 0x5F; pop esi; pop ebx; leave; ret 
0x5050aefc  # inc edx; add al, 0x89; add [ebx], esi; rol byte [eax+0x5F], 0x5E; retn 0x0008 
0x50501952  # inc edx; xor eax, eax; cmp edi, eax; je 0x5050199A; push edi; call [0x5054A280] 
0x5052dfdc  # inc edx; cmp eax, [esp+0x04]; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x5050d731  # inc edx; dec esp; add al, byte [eax]; leave; retn 0x0008 
0x50531edb  # inc edx; push 0x8BC30000; call [ebp-0x75] 
0x50506753  # inc edx; cmp [ebp-0x1C], 0x04; jbe 0x50506796; push 0x5054A46C; push [0x5055C9F4]; call esi 
0x50544b64  # inc edx; cmp ecx, 0x0B; ja 0x50544D9D; jmp [0x505451A3+ecx*4] 
0x5050eeed  # inc edx; mov [ebp+0x0C], eax; call [0x5054A194] 
0x50515721  # inc edx; mov [ecx+0x18], edx; mov eax, ebx; pop ebx; ret 
0x50532f18  # inc edx; cld; pop esi; pop edi; pop ebx; ret 
0x50532f11  # inc edx; std; pop esi; pop edi; pop ebx; ret 
0x5051221c  # inc edx; call [0x5054A194]; mov ecx, [ebp+0x10]; push eax; mov [ecx], eax; call [0x5054A0DC] 
0x5051221c  # inc edx; call [0x5054A194] 
0x50502c93  # inc ebx; add al, 0x00; cmp eax, ebx; je 0x50502CA3; push ebx; call [0x5054A048] 
0x50516dde  # inc ebx; add al, 0x5B; leave; ret 
0x50543640  # inc ebx; add al, 0x89; imul ecx, [0x59585051+edx*2], 0x5D; pop ecx; pop ebx; retn 0x0004 
0x50531430  # inc ebx; sldt word [eax]; leave; ret 
0x50506eb5  # inc ebx; adc byte [ebp-0x3F7AD782], cl; je 0x50506ED0; push eax; push edi; call [0x5054A050] 
0x50506ed1  # inc ebx; adc al, 0x85; sal byte [edx+edx+0x50], 0x57; call [0x5054A050] 
0x50506eea  # inc ebx; sbb byte [ebp+0x501274C0], al; push edi; call [0x5054A050] 
0x50506f03  # inc ebx; sbb al, 0x85; sal byte [edx+edx+0x50], 0x57; call [0x5054A050] 
0x50506f1c  # inc ebx; and byte [ebp+0x501274C0], al; push edi; call [0x5054A050] 
0x50518075  # inc ebx; inc eax; mov [edi+0x58], eax; call [eax] 
0x50518193  # inc ebx; inc esp; mov [edi+0x5C], eax; call [eax] 
0x5051808f  # inc ebx; dec eax; mov [edi+0x68], eax; call [eax] 
0x505181ad  # inc ebx; dec esp; mov [edi+0x6C], eax; call [eax] 
0x505180ac  # inc ebx; push eax; mov [edi+0x78], eax; call [eax+0x04] 
0x505181ca  # inc ebx; push esp; mov [edi+0x7C], eax; call [eax+0x10] 
0x50517fd7  # inc ebx; pushad; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x5050a5e5  # inc ebx; push 0xFFFFFFFF; call [eax-0x01]; jne 0x5050A5F9; call [0x5054A038] 
0x5050a5e5  # inc ebx; push 0xFFFFFFFF; call [eax-0x01] 
0x50510fe5  # inc ebx; jne 0x50510FD1; push ebx; call [0x5054A03C] 
0x50537f81  # inc ebx; cmp ebx, 0x03; jl 0x50537EF2; push [0x5055E144]; call [0x5054A1B8] 
0x50537f33  # inc ebx; test edi, edi; je 0x50537F77; push edi; call [0x5054A1C0] 
0x5051e435  # inc ebx; xchg eax, ecx; add al, byte [eax]; xor eax, eax; ret 
0x50506644  # inc ebx; push [ebp-0x24]; call esi 
0x5053bbd9  # inc ebx; inc [ebp-0x00001ABC]; call [0x5054A190] 
0x5052df2e  # inc esp; add byte [eax], al; leave; ret 
0x5051ebe6  # inc esp; add byte [ecx], al; ret 
0x5051e0e8  # inc esp; add bh, bh; pop edi; pop esi; ret 
0x50542922  # inc esp; add [ebx+eax*4], eax; loopne 0x50542968; pop esi; pop ebp; ret 
0x5051c8b5  # inc esp; add [ebx+ecx*4], ecx; dec esp; and al, 0x08; mov [ecx], eax; ret 
0x50502bb7  # inc esp; add al, 0x00; cmp eax, esi; je 0x50502BC7; push esi; call [0x5054A048] 
0x50515264  # inc esp; adc edi, edi; pop edi; ret 
0x505152b4  # inc esp; adc edi, edi; ret 
0x5052d510  # inc esp; adc eax, 0x154489C4; in al, 0x83; retn 0x8304 
0x5050f2e4  # inc esp; sbb eax, 0x7D8BFFFF; or al, 0x50; push edi; call [0x5054A038] 
0x50527831  # inc esp; and al, 0x04; cmp [esp+0x08], eax; jbe 0x5052783E; or eax, 0xFFFFFFFF; ret 
0x5051e868  # inc esp; and al, 0x04; jbe 0x5051E871; or eax, 0xFFFFFFFF; ret 
0x5052dfde  # inc esp; and al, 0x04; jl 0x5052DFB8; or eax, 0xFFFFFFFF; ret 
0x5052477c  # inc esp; and al, 0x04; cmp [eax+0x04], 0x00000000; jne 0x50524788; xor eax, eax; ret 
0x5051677e  # inc esp; and al, 0x04; cmp [eax+0x10], 0x00000000; je 0x5051678B; or eax, 0xFFFFFFFF; ret 
0x5052daf6  # inc esp; and al, 0x04; cmp [eax+0x40], 0x00000000; je 0x5052DB07; mov [eax+0x30], 0x00000001; ret 
0x50526f8f  # inc esp; and al, 0x04; and [eax+0x00000084], 0x00000000; mov [eax+0x0000008C], 0x00000040; ret 
0x5051f32d  # inc esp; and al, 0x04; test eax, eax; je 0x5051F338; mov eax, [eax+0x08]; ret 
0x5051682c  # inc esp; and al, 0x04; test eax, eax; je 0x5051683A; mov eax, [eax+0x00000090]; ret 
0x5051679c  # inc esp; and al, 0x04; test eax, eax; je 0x505167AA; mov eax, [eax+0x000001AC]; ret 
0x505169e2  # inc esp; and al, 0x04; test eax, eax; je 0x505169F0; mov eax, [eax+0x000000D4]; ret 
0x50516a08  # inc esp; and al, 0x04; test eax, eax; je 0x50516A16; mov eax, [eax+0x000000D8]; ret 
0x50516854  # inc esp; and al, 0x04; test eax, eax; je 0x50516862; mov eax, [eax+0x000000E0]; ret 
0x505168ae  # inc esp; and al, 0x04; test eax, eax; je 0x505168BC; mov eax, [eax+0x000000E4]; ret 
0x50516907  # inc esp; and al, 0x04; test eax, eax; jne 0x5051690F; ret 
0x5051695e  # inc esp; and al, 0x04; test eax, eax; jne 0x50516969; or eax, 0xFFFFFFFF; ret 
0x50516b7b  # inc esp; and al, 0x04; test eax, eax; jne 0x50516B88; jmp [0x5054A0E4] 
0x5051f275  # inc esp; and al, 0x04; mov eax, [eax]; ret 
0x5051f27c  # inc esp; and al, 0x04; mov eax, [eax+0x04]; ret 
0x5052db27  # inc esp; and al, 0x04; mov eax, [eax+0x08]; mov ecx, [eax]; push eax; call [ecx+0x18] 
0x5051c896  # inc esp; and al, 0x04; mov eax, [eax+0x08]; ret 
0x5051f26d  # inc esp; and al, 0x04; mov eax, [eax+0x10]; ret 
0x505317be  # inc esp; and al, 0x04; mov eax, [eax+0x14]; ret 
0x505317b5  # inc esp; and al, 0x04; mov eax, [eax+0x1C]; ret 
0x5052f841  # inc esp; and al, 0x04; mov eax, [eax+0x20]; ret 
0x5051d782  # inc esp; and al, 0x04; mov eax, [eax+0x2C]; ret 
0x5051e1a2  # inc esp; and al, 0x04; mov edx, [esp+0x08]; ret 
0x50516773  # inc esp; and al, 0x04; mov eax, [eax+0x000000C8]; ret 
0x50532e46  # inc esp; and al, 0x04; ret 
0x5051d181  # inc esp; and al, 0x04; mov [eax+0x04], 0x00000001; ret 
0x5051d878  # inc esp; and al, 0x04; mov [eax+0x28], 0x00000001; ret 
0x50536771  # inc esp; and al, 0x04; mul ecx; retn 0x0010 
0x50532e40  # inc esp; and al, 0x08; pop edi; ret 
0x50527835  # inc esp; and al, 0x08; jbe 0x5052783E; or eax, 0xFFFFFFFF; ret 
0x5051d6f9  # inc esp; and al, 0x08; mov ecx, [esp+0x04]; mov [ecx+0x08], eax; ret 
0x5051f261  # inc esp; and al, 0x08; mov ecx, [esp+0x04]; mov [ecx+0x10], eax; ret 
0x505317a9  # inc esp; and al, 0x08; mov ecx, [esp+0x04]; mov [ecx+0x1C], eax; ret 
0x5053438e  # inc esp; and al, 0x08; mov byte [edi+0x02], 0x00; pop edi; ret 
0x50536789  # inc esp; and al, 0x08; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x5051686f  # inc esp; and al, 0x0C; pop esi; ret 
0x5050163b  # inc esp; and al, 0x0C; test eax, eax; jne 0x50501648; call [0x5054A044] 
0x50516a46  # inc esp; and al, 0x0C; mov [esi], eax; pop esi; ret 
0x505341e7  # inc esp; and al, 0x10; pop ebx; pop esi; pop edi; ret 
0x505017ec  # inc esp; and al, 0x10; jne 0x505017FC; call [0x5054A044] 
0x5051e3c0  # inc esp; and al, 0x10; push [eax]; call [0x5054A0EC]; call [0x5054A0E4] 
0x5051e3c0  # inc esp; and al, 0x10; push [eax]; call [0x5054A0EC] 
0x50516951  # inc esp; and al, 0x14; mov [edi+0x000000EC], eax; pop esi; pop edi; ret 
0x5052f3fd  # inc esp; and al, 0x18; and edi, eax; call [0x5054A144] 
0x5050b5c4  # inc esp; and al, 0x18; push eax; call [0x5054A0BC] 
0x5053293c  # inc esp; sub [ebx+0x50], edx; jmp [0x50532A40+ecx*4] 
0x5053ad63  # inc esp; xor byte [eax+eax*4], al; and dh, bh; call [0x5054A0E4] 
0x50519c93  # inc esp; xor [0x3B0B74C0+eax*4], eax; retn 0x0775 
0x5052b9f1  # inc esp; cmp al, byte [esp+edi*2+0x00]; rcr byte [edi+0x5B], cl; leave; ret 
0x50502602  # inc esp; cmp eax, 0x76FF50F0; or al, 0xE8; and cl, byte [edx+0x04]; add byte [ebx], bh; ret 
0x5050c708  # inc esp; call [eax-0x18] 
0x5052f80e  # inc esp; pop ecx; pop ecx; mov [esi+0x18], 0x00000001; pop esi; ret 
0x50533ab8  # inc esp; pop esi; ret 
0x5052da2c  # inc esp; jne 0x5052DA38; mov eax, [esi]; push edi; push esi; call [eax+0x1C] 
0x50533ab1  # inc esp; test eax, eax; je 0x50533A92; mov eax, [esi+0x44]; pop esi; ret 
0x50524daa  # inc esp; mov byte [edi+edi*8], dl; or byte [ebx+0x3B078B3F], cl; retn 0xDE75 
0x50518194  # inc esp; mov [edi+0x5C], eax; call [eax] 
0x50532a29  # inc esp; pop [0x00008D04+ecx*4]; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x50532A40+edx*4] 
0x505326b9  # inc esp; pop [0x00008D04+ecx*4]; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x505326D0+edx*4] 
0x50538919  # inc esp; mov al, byte [0xF0335054]; call [0x5054A188] 
0x50547256  # inc esp; mov al, byte [0xFF505054]; adc eax, 0x5054A24C; push [0x50556FF8]; call [0x5054A030] 
0x505011a5  # inc esp; leave; push ebp; push eax; ret 
0x5050117d  # inc esp; leave; push ebp; push eax; call [0x5054A18C] 
0x505377c7  # inc esp; aad 0x55; push eax; call esi 
0x505464cf  # inc esp; fist word [ebp+0x50]; call esi 
0x50537f8d  # inc esp; loope 0x50537FE5; push eax; call [0x5054A1B8] 
0x50546b60  # inc esp; push [ebp+0x0C]; call [0x5054A03C] 
0x5051f9d9  # inc esp; push [ebp-0x10]; push eax; call [eax+0x08] 
0x50509341  # inc ebp; or byte [ebx], ch; ret 
0x50545f9e  # inc ebp; or byte [ebx], dh; fstp tword [ebx]; ret 
0x50505bfc  # inc ebp; or byte [ebx], bh; ret 
0x50542748  # inc ebp; or byte [eax+0x56], dl; call [0x5054A178]; push eax; call [0x5054A190] 
0x50542748  # inc ebp; or byte [eax+0x56], dl; call [0x5054A178] 
0x50547c02  # inc ebp; or byte [eax+0x6A], dl; call [esi-0x18] 
0x50526de3  # inc ebp; or byte [esi+0x3B], dl; ret 
0x5052f555  # inc ebp; or byte [edi+0x57], dl; mov [esi], edi; mov [esi+0x04], eax; call ebx 
0x5051fa1c  # inc ebp; or byte [edi-0x01], dl; jne 0x5051FA06; push eax; call [eax+0x0C] 
0x50541067  # inc ebp; or byte [ecx-0x15], bl; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x5053737c  # inc ebp; or byte [esi+0x5D], bl; ret 
0x50532545  # inc ebp; or byte [esi+0x5F], bl; leave; ret 
0x5050dcc4  # inc ebp; or byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0008 
0x5050a237  # inc ebp; or byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x000C 
0x505384be  # inc ebp; or byte [edx+0x00], ch; sete al; push 0x00001000; push eax; call [0x5054A074] 
0x5051e3e6  # inc ebp; or byte [edx+0x00], ch; push [eax]; call [0x5054A0EC] 
0x50505a44  # inc ebp; or byte [esp+ebx-0x01], dh; jne 0x50505A53; call edi 
0x5051f9d6  # inc ebp; or byte [esi+0x44], bh; push [ebp-0x10]; push eax; call [eax+0x08] 
0x505499fa  # inc ebp; or byte [ebx+0x5D5B0CC4], al; ret 
0x5052f6fd  # inc ebp; or byte [ecx-0x3C74A0C8], cl; pop ebx; leave; ret 
0x505364ec  # inc ebp; or byte [ecx+0x4589E045], cl; in al, 0x33; fstp tword [ebx]; ret 
0x50537379  # inc ebp; or byte [ebx+0x5D5E0845], cl; ret 
0x50539d40  # inc ebp; or byte [ebx-0x1A740383], cl; pop ebp; ret 
0x5053312b  # inc ebp; or byte [ebp-0x067C60B8], cl; sbb [edi+0x11], esi; add eax, 0xFFFFFFE0; pop ebp; ret 
0x50533934  # inc ebp; or byte [ebp-0x067C40B8], cl; sbb [edi+0x11], esi; add eax, 0x20; pop ebp; ret 
0x5052d138  # inc ebp; or byte [ecx+0x0303E283], bl; retn 0xF8C1 
0x5053e09f  # inc ebp; or byte [ebx+0x5055DE7C], ah; pop ebp; ret 
0x5054129d  # inc ebp; or byte [ebx+0x5055DE9C], ah; pop ebp; ret 
0x50538a2b  # inc ebp; or byte [ebx+0x5055D6A0], ah; pop ebp; ret 
0x505412ac  # inc ebp; or byte [ebx+0x5055DEA8], ah; pop ebp; ret 
0x505412bb  # inc ebp; or byte [ebx+0x5055DEAC], ah; pop ebp; ret 
0x50522ac8  # inc ebp; or al, ch; ret 
0x50522f1f  # inc ebp; or bl, ch; add eax, [ebx+0x5F5EFFC8]; pop ebx; pop ebp; ret 
0x50526df0  # inc ebp; or bl, ch; push cs; mov eax, [edi]; push edi; call [eax+0x14] 
0x5051e2b4  # inc ebp; or bh, bh; jne 0x5051E2C5; push [eax]; call [0x5054A0C0] 
0x5051e361  # inc ebp; or bh, bh; jne 0x5051E372; push [eax]; call [0x5054A0E8] 
0x50541c96  # inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; mov byte [ebp+0x0B], 0x00; call [0x5054A1A0] 
0x50541c9a  # inc ebp; or bl, byte [esi+eax*8+0x45]; or eax, [eax]; call [0x5054A1A0] 
0x50541c9e  # inc ebp; or eax, [eax]; call [0x5054A1A0] 
0x50548d3b  # inc ebp; or al, 0x01; je 0x50548DCC; lea eax, [esi+0x34]; push eax; call [0x5054A03C] 
0x50524ee9  # inc ebp; or al, 0x03; ret 
0x5052e437  # inc ebp; or al, 0x33; fstp tword [ebx]; ret 
0x50545cdc  # inc ebp; or al, 0x3B; retn 0x840F 
0x5051350f  # inc ebp; or al, 0x3B; ret 
0x50533263  # inc ebp; or al, 0x5D; ret 
0x50540e1a  # inc ebp; or al, 0x72; hlt; pop ebp; ret 
0x50505e88  # inc ebp; or al, 0x74; sbb al, 0xFF; jne 0x50505E9B; call esi 
0x50503af9  # inc ebp; or al, 0x74; sbb al, 0xFF; jne 0x50503B0C; call edi 
0x50504c17  # inc ebp; or al, 0x74; and bh, bh; jne 0x50504C2A; call [0x5054A040] 
0x50524350  # inc ebp; or al, 0x7E; push 0x2BFFCA83; rol [ebx], 1; retn 0x463B 
0x50536018  # inc ebp; or al, 0x83; shl byte [eax], 0x50; call [0x5054A020]; pop ebp; ret 
0x50536018  # inc ebp; or al, 0x83; shl byte [eax], 0x50; call [0x5054A020] 
0x50533991  # inc ebp; or al, 0x83; les ecx, [ebx+edi]; ret 
0x5051537d  # inc ebp; or al, 0x83; les ecx, [ecx+ecx*4]; xor byte [ebx+0x5B5E5FC7], cl; leave; ret 
0x5050ddc0  # inc ebp; or al, 0x89; cmp ebx, [esi+0x5B]; pop edi; leave; retn 0x0008 
0x5050ef1d  # inc ebp; or al, 0x89; inc ebp; hlt; call [0x5054A0D8] 
0x5053a868  # inc ebp; or al, 0x8B; add byte [ebx], al; ret 
0x50506a44  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506A5C; call [0x5054A03C] 
0x50506ca1  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506CB9; call [0x5054A040] 
0x50506a82  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506A9E; call [0x5054A03C] 
0x50506cdf  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506CFB; call [0x5054A040] 
0x50506ac0  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506AE0; call [0x5054A03C] 
0x50506d1d  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506D3D; call [0x5054A040] 
0x50506afe  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506B22; call [0x5054A03C] 
0x50506d5b  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506D7F; call [0x5054A040] 
0x50506b3c  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506B64; call [0x5054A03C] 
0x50506d99  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506DC1; call [0x5054A040] 
0x50506b78  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506BA4; call [0x5054A03C] 
0x50506dd5  # inc ebp; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506E01; call [0x5054A040] 
0x5053a954  # inc ebp; or al, 0x8B; add bh, bh; xor al, 0x18; call [0x5054A208] 
0x5053a91c  # inc ebp; or al, 0x8B; add bh, bh; xor al, 0x18; call [0x5054A20C] 
0x5053e412  # inc ebp; or al, 0x8B; dec ebp; or byte [ecx+0x0CC48308], cl; leave; ret 
0x5051fe4f  # inc ebp; or al, 0x8B; dec ebp; sbb byte [ebx], al; retn 0x4589 
0x505050bb  # inc ebp; or al, 0xE8; retn 0xFFC5 
0x5053b179  # inc ebp; adc byte [ecx], al; je 0x5053B1F4; push [ebp-0x1C]; call [0x5054A060] 
0x50503a03  # inc ebp; adc byte [edi], cl; test [ebp-0x77000000], esp; mov esi, 0x000000A8; call [0x5054A188] 
0x50539cfe  # inc ebp; adc byte [ebx], ch; retn 0x4589 
0x5050ac05  # inc ebp; adc byte [ebx], ch; ret 
0x505032ba  # inc ebp; adc byte [ebx], bh; ret 
0x50516261  # inc ebp; adc byte [eax+0x53], dl; call [esi+0x04] 
0x5050aba0  # inc ebp; adc byte [edi+0x3B], dl; ret 
0x5050851d  # inc ebp; adc byte [esp+ebx-0x01], dh; jne 0x50508534; call esi 
0x50537a1a  # inc ebp; adc byte [edi+0x39], dh; add eax, 0x5055D554; jbe 0x50537A45; push esi; call [0x5054A048] 
0x50522fa2  # inc ebp; adc byte [ebx-0x75], bh; inc esi; add al, 0x2B; ret 
0x5051245d  # inc ebp; adc byte [ebx+0x30FF28C4], al; call [0x5054A0D8]; call [0x5054A188] 
0x5051245d  # inc ebp; adc byte [ebx+0x30FF28C4], al; call [0x5054A0D8] 
0x5051f49d  # inc ebp; adc byte [ecx+0x468D0C46], cl; adc al, 0x33; call [eax-0x39] 
0x50542f4e  # inc ebp; adc byte [ebx-0x00DAF3B3], cl; push edi; jmp [ebx] 
0x5051217a  # inc ebp; adc al, 0x3B; retn 0x840F 
0x50548eaf  # inc ebp; adc al, 0x3B; ret 
0x505162b0  # inc ebp; adc al, 0x50; push ebx; call [esi+0x08] 
0x50531f97  # inc ebp; adc al, 0x6B; rol byte [edi], 0x2B; retn 0x4503 
0x5051e1f3  # inc ebp; adc al, 0x75; lock xor eax, eax; pop ebp; ret 
0x505496ca  # inc ebp; adc al, 0x7D; cmp dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x505103ed  # inc ebp; adc al, 0x83; clc; push [ebp+0x20]; call [0x5054A0E4] 
0x5050fbd7  # inc ebp; adc al, 0x83; clc; push [ebp+0x4C]; call [0x5054A0E4] 
0x50547d70  # inc ebp; sbb byte [edx], al; pop ebx; je 0x50547D81; push 0x000000FF; call [0x5054A1B4] 
0x5051034f  # inc ebp; sbb byte [ebx], bh; ret 
0x505106a1  # inc ebp; sbb byte [edi+0x5E], bl; pop ebx; leave; retn 0x0014 
0x5050528c  # inc ebp; sbb al, 0x51; call [0x5054A070] 
0x50548ec1  # inc ebp; sbb al, 0x8A; add byte [edx], bh; ret 
0x5054909b  # inc ebp; and byte [edx-0x75], bl; inc ebp; sbb al, 0x8A; add byte [edx], bh; ret 
0x5051f3f8  # inc ebp; and byte [ecx+0x468D0C46], cl; adc al, 0x33; call [eax-0x39] 
0x50548323  # inc ebp; and al, 0x50; lea eax, [ebp-0x3C]; push eax; call esi 
0x50548350  # inc ebp; and al, 0x50; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x50548e4d  # inc ebp; and al, 0x50; call [0x5054A04C]; lea eax, [ebp+0x24]; push eax; call esi 
0x50548e4d  # inc ebp; and al, 0x50; call [0x5054A04C] 
0x50548e57  # inc ebp; and al, 0x50; call esi 
0x50547e43  # inc ebp; xor byte [eax+0x53], dl; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x50547e43  # inc ebp; xor byte [eax+0x53], dl; call esi 
0x5052316d  # inc ebp; xor byte [eax-0x73], dl; test [edi+edi*8-0x01], ebx; call [eax-0x18] 
0x50548194  # inc ebp; xor byte [eax-0x0A], dl; ret 
0x50547e95  # inc ebp; xor byte [eax-0x01], dl; jne 0x50547E47; call [0x5054A00C] 
0x5050e92e  # inc ebp; cmp al, byte [edx]; add cl, cl; retn 0x0008 
0x5050491c  # inc ebp; dec eax; push eax; call [0x5054A03C] 
0x505048e7  # inc ebp; dec eax; push eax; call [0x5054A050] 
0x505010c1  # inc ebp; push esi; call edi 
0x505096ec  # inc ebp; mov [bx+si+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x505207bd  # inc ebp; mov [bx+si+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; mov [eax+0x10], 0xC3D2E1F0; ret 
0x50507315  # inc ebp; add byte [eax], 0x02; add byte [eax], al; call [0x5055CA30] 
0x5050d784  # inc ebp; add byte [ebp-0x7C7BF00A], 0x01; add byte [eax], al; mov edi, [0x5054A03C]; push esi; call edi 
0x5051e901  # inc ebp; sub al, 0x00; loopne 0x5051E906; call [edi+0x33] 
0x5050f636  # inc ebp; xor bh, 0xD0; push eax; push 0x5054AC98; push [ebp-0x7C]; call [0x5054A260] 
0x505072f3  # inc ebp; test byte [edx+0x00], ch; push [edi+0x000037F4]; call [0x5055CA10] 
0x5051e98a  # inc ebp; mov byte [ebx], bh; ret 
0x5051e8f5  # inc ebp; mov byte [ebx+0x001F9C85], cl; add byte [edi+0x6A], dl; add [ecx+0x00E88045], ecx; loopne 0x5051E906; call [edi+0x33] 
0x5050f5d1  # inc ebp; mov word [eax+0x53], ss; lea eax, [ebp-0x18]; push eax; push [ebp-0x78]; call edi 
0x5054844e  # inc ebp; mov word [eax+0x6A], ss; add bh, bh; jne 0x505483DE; call [0x5054A018] 
0x505130b6  # inc ebp; mov word [eax-0x01], ss; jne 0x5051303C; call [0x5054A04C] 
0x50548438  # inc ebp; mov word [eax-0x01], ss; jne 0x505483C6; call [0x5054A014] 
0x5050d8b4  # inc ebp; nop; push eax; push esi; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x5053aa63  # inc ebp; cwde; push eax; call [0x5054A0C8] 
0x50548629  # inc ebp; cwde; push eax; push [ebp-0x6C]; call [0x5054A00C] 
0x50537d70  # inc ebp; pushfd; push eax; call [0x5054A1C4] 
0x5050ec36  # inc ebp; pushfd; push eax; call [0x5054A0CC] 
0x50511e18  # inc ebp; pushfd; call [0x5054A188] 
0x50548a8f  # inc ebp; mov al, byte [0x9C75FF50]; mov [ebp-0x68], edi; mov byte [ebp+0x000000A0], 0x00; call ebx 
0x5054786b  # inc ebp; test al, 0x3B; ret 
0x505477bf  # inc ebp; test al, 0x3B; je 0x505478CE; push esi; call [0x5054A03C] 
0x5053a997  # inc ebp; test al, 0x50; call [0x5054A0C8] 
0x5050eaaa  # inc ebp; lodsb; push eax; call [0x5054A04C] 
0x505103d6  # inc ebp; lodsb; push 0x80000000; push [ebp+0x0C]; mov [esi+0x00000AA0], eax; call [0x5054A0A8] 
0x5054774d  # inc ebp; mov al, 0x3B; ret 
0x50547e83  # inc ebp; mov al, 0x50; call [0x5054A03C] 
0x50544c6c  # inc ebp; mov al, 0x8A; add al, byte [edx+0x3A]; ret 
0x5051079f  # inc ebp; mov bl, 0x84; sal byte [ebp+0x02], 0x33; test byte [ebx+0x7400AC7D], 0x0D; push [ebp-0x54]; call edi 
0x50511fe1  # inc ebp; mov ah, 0x03; ret 
0x50507d67  # inc ebp; mov ah, 0x07; add byte [eax], al; add byte [ebx+0x0038AC86], cl; add byte [ebx], al; ret 
0x50544c62  # inc ebp; mov ah, 0x2A; ret 
0x50510884  # inc ebp; mov ah, 0x50; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A0F8] 
0x50519a81  # inc ebp; mov bh, 0xFF; call [edi-0x75]; ret 
0x50519a81  # inc ebp; mov bh, 0xFF; call [edi-0x75] 
0x505125c6  # inc ebp; mov eax, 0x00000001; mov [ebp-0x44], edi; mov [ebp-0x40], eax; call [0x5054A188] 
0x505318b5  # inc ebp; mov esp, 0x00000100; mov [ebp-0x3C], edi; mov [ebp-0x30], edi; call [0x5054A148] 
0x50511637  # inc ebp; mov esp, 0x00000001; mov [ebp-0x34], ebx; call [0x5054A188] 
0x50547740  # inc ebp; mov esp, 0xB875FF50; call [0x5054A04C] 
0x50509ef7  # inc ebp; mov esp, 0x54AB2468; push eax; push eax; call [0x5054A03C] 
0x50509ee0  # inc ebp; mov esp, 0x54A35868; push eax; push eax; call esi 
0x5053187f  # inc ebp; retn 0x458B 
0x50521a59  # inc ebp; retn 0xC38B 
0x50512d98  # inc ebp; les edx, [eax-0x01]; adc eax, 0x5054A268; lea eax, [ebp-0x3C]; push eax; call [0x5054A278] 
0x5050522b  # inc ebp; enter 0xC085, 0x0F; test byte [esi+0x07], ah; add byte [eax], al; push [eax+0x0C]; call ebx 
0x5050341a  # inc ebp; enter 0x5D89, 0xD0; call [0x5054A18C] 
0x5051e4c1  # inc ebp; int3; push eax; call [0x5054A268] 
0x5051e4cb  # inc ebp; int3; push eax; call [0x5054A278] 
0x5051e4da  # inc ebp; int3; push eax; call esi 
0x5053acff  # inc ebp; rcl byte [eax-0x01], 1; jne 0x5053ACF5; push [ebp-0x08]; push [ebp+0x0C]; call edi 
0x505052a6  # inc ebp; rol byte [ebx+0x7400E07D], 1; or al, 0xFF; jne 0x50505291; call ebx 
0x50511647  # inc ebp; ror byte [ebx+0x5D891045], 1; aam 0x3B; ret 
0x50546337  # inc ebp; aam 0x50; mov [ebp-0x2C], esi; call [0x5054A054] 
0x50503443  # inc ebp; aam 0x50; mov [ebp-0x2C], edi; call [0x5054A054] 
0x50528b21  # inc ebp; aam 0xE8; ret 
0x50510587  # inc ebp; fdivr [ebx]; ret 
0x5053aa5f  # inc ebp; fcom [eax-0x73]; inc ebp; cwde; push eax; call [0x5054A0C8] 
0x5053a993  # inc ebp; fcom [eax-0x73]; inc ebp; test al, 0x50; call [0x5054A0C8] 
0x505276ac  # inc ebp; fsubr [eax+0x50]; ret 
0x505088aa  # inc ebp; fadd qword [eax+eax]; add byte [eax], al; call [0x5055C9E0] 
0x50531e98  # inc ebp; fdivr qword [ebx]; ret 
0x50501f54  # inc ebp; fcom qword [eax-0x01]; adc eax, 0x5054A268; lea eax, [ebp-0x24]; push eax; call [0x5054A278] 
0x50501f5e  # inc ebp; fcom qword [eax-0x01]; adc eax, 0x5054A278; push 0x0000000A; call [0x5054A048] 
0x505268ed  # inc ebp; loopne 0x505268F5; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x505065f4  # inc ebp; loopne 0x50506647; mov [ebp-0x20], esi; call [0x5054A054] 
0x505108e0  # inc ebp; loopne 0x50510933; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x5052f1f7  # inc ebp; loopne 0x5052F24A; call [0x5054A128]; push eax; call [0x5054A124] 
0x5052f1f7  # inc ebp; loopne 0x5052F24A; call [0x5054A128] 
0x5052f1cd  # inc ebp; loopne 0x5052F220; call [0x5054A130]; push eax; call [0x5054A12C] 
0x5052f1cd  # inc ebp; loopne 0x5052F220; call [0x5054A130] 
0x505052b8  # inc ebp; loopne 0x5050523E; jnl 0x50505295; add byte [eax-0x01], dh; jne 0x5050529B; call [0x5054A280] 
0x505364ef  # inc ebp; loopne 0x5053647B; inc ebp; in al, 0x33; fstp tword [ebx]; ret 
0x505360e9  # inc ebp; loopne 0x505360EB; jne 0x505360FE; push [ebp+0x0C]; push eax; call [ebp+0x08] 
0x50510376  # inc ebp; in al, 0x2B; ret 
0x505364f2  # inc ebp; in al, 0x33; fstp tword [ebx]; ret 
0x50512d62  # inc ebp; in al, 0x3B; ret 
0x505467f7  # inc ebp; in al, 0x50; mov [ebp-0x1C], edi; call ebx 
0x5052f170  # inc ebp; in al, 0x50; call [0x5054A120] 
0x5050f7a2  # inc ebp; in al, 0x50; call [0x5054A0B8] 
0x5053c31a  # inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x505372fe  # inc ebp; in al, 0xE8; sbb al, 0x14; add byte [eax], al; ret 
0x5053708f  # inc ebp; in al, 0xE8; mov edx, [esi]; add byte [eax], al; ret 
0x50536f75  # inc ebp; in al, 0xE8; movsd; pop ss; add byte [eax], al; ret 
0x50532366  # inc ebp; in al, 0xE8; mov ah, 0x63; add byte [eax], al; ret 
0x50536e98  # inc ebp; in al, 0xEB; ret 
0x5054728c  # inc ebp; in al, dx; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x5050ef81  # inc ebp; lock add edi, eax; cmp [ebp-0x14], 0x02; jnl 0x5050EFBB; push [ebp-0x18]; call [0x5054A048] 
0x5050c6ca  # inc ebp; lock add eax, 0x00000240; push 0x00000040; push esi; push eax; call [0x5054A04C] 
0x505070fb  # inc ebp; lock cmp eax, esi; jne 0x50507112; push ebx; call [0x5054A060] 
0x5051365d  # inc ebp; lock push eax; lea eax, [ebp-0x08]; push eax; call [0x5054A0C8] 
0x5051366c  # inc ebp; lock push eax; call [0x5054A0B4] 
0x50538928  # inc ebp; lock push eax; call [0x5054A1E0] 
0x505481e7  # inc ebp; lock push eax; push [ebp-0x14]; call [0x5054A014]; push [ebp-0x14]; call [0x5054A008] 
0x505481e7  # inc ebp; lock push eax; push [ebp-0x14]; call [0x5054A014] 
0x50522730  # inc ebp; lock pop ebx; leave; ret 
0x50538718  # inc ebp; lock mov [fs:0x00000000], eax; ret 
0x50542893  # inc ebp; lock push 0x00000001; push esi; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x50540349  # inc ebp; lock test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x50505a1c  # inc ebp; hlt; cmp [ebp+0x10], ebx; je 0x50505A41; push [ebp+0x10]; call edi 
0x50505e3b  # inc ebp; hlt; cmp [ebp+0x18], ebx; je 0x50505E60; push [ebp+0x18]; call esi 
0x5054276b  # inc ebp; hlt; push eax; push ecx; call [0x5054A17C] 
0x5051e257  # inc ebp; hlt; push eax; push ebx; push esi; call [0x5054A10C] 
0x5050eee9  # inc ebp; hlt; push eax; push 0x00000042; mov [ebp+0x0C], eax; call [0x5054A194] 
0x50531846  # inc ebp; hlt; push eax; lea eax, [ebp-0x08]; push eax; call ebx 
0x5052f18d  # inc ebp; hlt; push eax; call [0x5054A11C] 
0x5052f197  # inc ebp; hlt; push 0x00000008; push eax; call [ebp+0x08] 
0x505383c4  # inc ebp; hlt; call esi 
0x505269ea  # inc ebp; cmc; pop ebx; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5051d5e2  # inc ebp; idiv edi; call [esi-0x01] 
0x50509bde  # inc ebp; clc; cmp [ebp+0x10], ebx; je 0x50509C03; push [ebp+0x10]; call edi 
0x5050615c  # inc ebp; clc; cmp [ebp-0x04], edi; je 0x5050616C; push [ebp-0x04]; call [0x5054A070] 
0x5054225c  # inc ebp; clc; cmp eax, edi; jne 0x50542275; call [0x5054A0E4] 
0x50513a52  # inc ebp; clc; push eax; push esi; call [0x5054A0CC] 
0x50513652  # inc ebp; clc; push eax; push edi; call [0x5054A0CC] 
0x5054041f  # inc ebp; clc; push eax; mov eax, [edi]; push [esi+eax]; call [0x5054A0C0] 
0x5052f189  # inc ebp; clc; push eax; lea eax, [ebp-0x0C]; push eax; call [0x5054A11C] 
0x50536acd  # inc ebp; clc; push eax; call [0x5054A1AC] 
0x50513661  # inc ebp; clc; push eax; call [0x5054A0C8] 
0x5053184a  # inc ebp; clc; push eax; call ebx 
0x5052f262  # inc ebp; clc; push 0x00000004; push eax; call [ebp+0x08] 
0x5053e336  # inc ebp; clc; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50508bb6  # inc ebp; clc; cmp [eax+0x44], 0x00000000; je 0x50508BFA; push [ebx+0x00003808]; call edi 
0x5052f4e9  # inc ebp; clc; mov [esi+0x28], eax; call [0x5054A13C] 
0x5052a696  # inc ebp; clc; mov [edi+0x00000084], eax; pop esi; leave; ret 
0x50538715  # inc ebp; clc; lea eax, [ebp-0x10]; mov [fs:0x00000000], eax; ret 
0x5052f25f  # inc ebp; clc; lea eax, [ebp-0x08]; push 0x00000004; push eax; call [ebp+0x08] 
0x5051e3f5  # inc ebp; clc; leave; ret 
0x50546c99  # inc ebp; cld; add al, 0x00; add byte [eax], al; call eax 
0x5050ef37  # inc ebp; cld; cmp eax, ebx; je 0x5050F08E; push eax; call [0x5054A0DC] 
0x5050eef8  # inc ebp; cld; cmp eax, ebx; je 0x5050F085; push eax; call [0x5054A0DC] 
0x505085f5  # inc ebp; cld; cmp eax, ebx; je 0x50508602; push eax; call edi 
0x505081e5  # inc ebp; cld; push eax; push 0x00000053; push [ebp+0x0C]; call [0x5055C9A4] 
0x50515108  # inc ebp; cld; push eax; push [ebp+0x08]; mov byte [ebp-0x01], bl; call [esi+0x04] 
0x50541d69  # inc ebp; cld; push eax; call esi 
0x50516f22  # inc ebp; cld; pop esi; pop ebx; leave; ret 
0x50543bc3  # inc ebp; cld; pop esi; pop edi; leave; ret 
0x5052f24e  # inc ebp; cld; push 0x00000004; push eax; call [ebp+0x08] 
0x5050755e  # inc ebp; cld; push 0x00000059; add eax, 0x0000389C; push eax; call [0x5055C9A4] 
0x50546b59  # inc ebp; cld; cmp [ebp+0x0C], 0x00000000; je 0x50546BA5; push [ebp+0x0C]; call [0x5054A03C] 
0x50508323  # inc ebp; cld; mov eax, [eax+0x0C]; add eax, 0x20; push eax; call edi 
0x5052f24b  # inc ebp; cld; lea eax, [ebp-0x04]; push 0x00000004; push eax; call [ebp+0x08] 
0x505157f5  # inc ebp; cld; leave; ret 
0x5053ab05  # inc ebp; call [eax] 
0x5051704c  # inc ebp; push [ebx]; call [eax+0x47] 
0x505401f6  # inc ebp; call [eax-0x75]; pop es; push [esi+eax]; call [0x5054A0C0] 
0x5051d0b2  # inc ebp; call [eax-0x75] 
0x505151e1  # inc ebp; call [edi-0x73] 
0x5051d0cc  # inc ebp; dec [ecx-0x3974EFBA]; pop esi; leave; ret 
0x50542492  # inc esi; add [eax], eax; add byte [ecx+0x59], bl; push [ebp-0x04]; push 0x00000000; call [0x5054A180] 
0x50532571  # inc esi; add [eax+0x468A0147], ecx; add cl, byte [eax+0x458B0247]; or byte [esi+0x5F], bl; leave; ret 
0x5053255d  # inc esi; add [eax+0x458B0147], ecx; or byte [esi+0x5F], bl; leave; ret 
0x50532713  # inc esi; add cl, byte [eax+0x468A0247]; add [eax+0x458B0147], ecx; or byte [esi+0x5F], bl; leave; ret 
0x50532577  # inc esi; add cl, byte [eax+0x458B0247]; or byte [esi+0x5F], bl; leave; ret 
0x50506cb1  # inc esi; add cl, byte [ebx-0x3F7AEBB9]; je 0x50506CF1; push eax; call ebx 
0x50506bfc  # inc esi; add cl, byte [ebx-0x3F7AE7B9]; je 0x50506C0C; push eax; call ebx 
0x50506cef  # inc esi; add cl, byte [ebx-0x3F7AE7B9]; je 0x50506D2F; push eax; call ebx 
0x50506d2d  # inc esi; add cl, byte [ebx-0x3F7AE3B9]; je 0x50506D6D; push eax; call ebx 
0x50506c18  # inc esi; add cl, byte [ebx-0x3F7ADFB9]; je 0x50506C28; push eax; call ebx 
0x50506d6b  # inc esi; add cl, byte [ebx-0x3F7ADFB9]; je 0x50506DAB; push eax; call ebx 
0x50506c26  # inc esi; add cl, byte [ebx-0x3F7ADBB9]; je 0x50506C36; push eax; call ebx 
0x50506da9  # inc esi; add cl, byte [ebx-0x3F7ADBB9]; je 0x50506DE3; push eax; call ebx 
0x505326f9  # inc esi; add ecx, [eax+0x468A0347]; add cl, byte [eax+0x458B0247]; or byte [esi+0x5F], bl; leave; ret 
0x505326e9  # inc esi; add ecx, [eax+0x458B0347]; or byte [esi+0x5F], bl; leave; ret 
0x50542135  # inc esi; add al, 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x5052a153  # inc esi; add al, 0x0F; mov dh, 0x56; add eax, 0x0B08E0C1; retn 0xB60F 
0x50522fa7  # inc esi; add al, 0x2B; ret 
0x5052f5b2  # inc esi; add al, 0x50; push 0x5052F273; push edi; push edi; call [0x5054A06C] 
0x5052f65b  # inc esi; add al, 0x50; push 0x5052F3E0; push edi; push edi; call [0x5054A06C] 
0x5050d9e2  # inc esi; add al, 0x50; call [0x5054A0B8] 
0x5050d814  # inc esi; add al, 0x50; call edi 
0x5051ccc4  # inc esi; add al, 0x59; mov [esi+0x0C], eax; ret 
0x50527b88  # inc esi; add al, 0x5E; pop ebx; leave; ret 
0x5053ff44  # inc esi; add al, 0x5E; pop ebp; ret 
0x50527946  # inc esi; add al, 0x5E; ret 
0x5051108e  # inc esi; add al, 0x83; add byte [ebp+0x10], dh; push esi; call [0x5054A070] 
0x50522f99  # inc esi; add al, 0xFF; inc ebp; adc byte [ebx], ch; ret 
0x50527966  # inc esi; or byte [ebp+0x0A], bh; mov [esi+0x08], eax; mov [esi+0x04], 0x00000001; pop esi; ret 
0x5053ff41  # inc esi; or byte [ecx+0x5D5E0446], cl; ret 
0x5052e742  # inc esi; or byte [ebx+0x558D5308], cl; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x5052e889  # inc esi; or byte [ebx+0x1A548D08], cl; add edx, [edx-0x73]; push ebp; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x5052e58e  # inc esi; or byte [ebx-0x736A72F8], cl; add [eax], eax; add byte [edx+0x50], dl; call [ecx+0x08] 
0x5050b82c  # inc esi; or byte [ebx+0x54A2603D], cl; push eax; push eax; call edi 
0x5052d9e2  # inc esi; or bh, bh; jne 0x5052D9DF; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5052d9a0  # inc esi; or bh, bh; jne 0x5052D99D; mov ecx, [eax]; push eax; call [ecx+0x0C] 
0x505162ad  # inc esi; or al, 0x03; inc ebp; adc al, 0x50; push ebx; call [esi+0x08] 
0x5050e585  # inc esi; or al, 0x03; retn 0x4689 
0x50513cdf  # inc esi; or al, 0x03; ret 
0x5051d75b  # inc esi; or al, 0x5F; mov [esi+0x10], edx; mov eax, esi; pop esi; ret 
0x5051cd71  # inc esi; or al, 0x8B; push cs; mov edx, [esi+0x0C]; mov byte [ecx+edx-0x01], al; ret 
0x505241b4  # inc esi; or al, 0x8B; ret 
0x5051f379  # inc esi; or al, 0x8D; inc esi; adc al, 0x33; call [eax-0x39] 
0x5052035b  # inc esi; or al, 0xE9; daa; add [eax], eax; add byte [ebx-0x7AF0FD07], al; retn 0xFFFE 
0x5051e076  # inc esi; or al, 0xEB; add cl, byte [ebx+0x5E5F5DC5]; ret 
0x5052e443  # inc esi; or al, 0xFF; jbe 0x5052E494; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052e461  # inc esi; or al, 0xFF; jbe 0x5052E4CA; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5053b97a  # inc esi; adc byte [ebx], cl; add byte [eax], al; add bl, ch; retn 0xFF8B 
0x50515d59  # inc esi; adc byte [ecx+0x3B], bl; ret 
0x5053d7dd  # inc esi; adc byte [ebx-0x397400F8], al; pop edi; pop esi; ret 
0x50515d2b  # inc esi; adc byte [ebp-0x74F68B40], al; or byte [edi+0x50], dl; call [ecx+0x1C] 
0x5052f766  # inc esi; adc byte [ecx+0x46891446], cl; sbb al, 0xFF; adc eax, 0x5054A13C; pop esi; ret 
0x5051fad7  # inc esi; adc al, bh; cmp [esi+0x10], 0x08; jnl 0x5051FAA7; ret 
0x5051f37c  # inc esi; adc al, 0x33; call [eax-0x39] 
0x5050d5ca  # inc esi; adc al, 0x50; call ebx 
0x505153dd  # inc esi; adc al, 0x59; mov eax, esi; pop esi; ret 
0x5051518d  # inc esi; adc al, 0x5F; pop ebx; ret 
0x5052f4f5  # inc esi; sbb byte [ecx], al; add byte [eax], al; add byte [edi-0x37], bl; ret 
0x5052671e  # inc esi; sbb byte [ecx], al; add byte [eax], al; add byte [ebx+0x57006A07], cl; call [eax+0x1C] 
0x505017e9  # inc esi; sbb byte [ebx], bh; inc esp; and al, 0x10; jne 0x505017FC; call [0x5054A044] 
0x5051525b  # inc esi; sbb byte [ebx+0x568B104E], cl; sbb byte [eax+0x5FFF1144], cl; ret 
0x505036e0  # inc esi; sbb byte [ebp+0x47891C5E], cl; sbb byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x5052f5c4  # inc esi; sbb al, 0x01; add byte [eax], al; add byte [ebx-0x36A4A13A], cl; ret 
0x505273e0  # inc esi; sbb al, 0x8D; push esp; adc [ebx+edi], ecx; retn 0x1B7D 
0x5052f76c  # inc esi; sbb al, 0xFF; adc eax, 0x5054A13C; pop esi; ret 
0x5052f36f  # inc esi; and byte [edx], al; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x5050ee80  # inc esi; and byte [ecx+0x468BDC45], cl; sub byte [ecx-0x1F7C27BB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5050ac53  # inc esi; and byte [ecx+0x468BE845], cl; sub byte [ecx-0x1F7C1BBB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x50526a40  # inc esi; and [edx-0x75], ebx; or byte [edi+0x50], dl; call [ecx+0x08] 
0x5052f2d7  # inc esi; and al, 0x50; push [esi]; call [0x5054A0C0] 
0x5052f4e6  # inc esi; and al, 0x8B; inc ebp; clc; mov [esi+0x28], eax; call [0x5054A13C] 
0x50524385  # inc esi; sub byte [ebx], bh; ret 
0x5052f7e9  # inc esi; sub byte [eax+0x56], dl; call [esi+0x00001030] 
0x5050ee86  # inc esi; sub byte [ecx-0x1F7C27BB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5050ac59  # inc esi; sub byte [ecx-0x1F7C1BBB], cl; ror byte [ecx+0x5E89185E], 0x20; mov [esi+0x28], eax; call [0x5054A188] 
0x5052439f  # inc esi; sub al, 0x3B; ret 
0x5052f45e  # inc esi; sub al, 0x50; push edi; push [esi]; call [0x5054A140] 
0x5052f421  # inc esi; sub al, 0x50; push [esi+0x28]; push [esi+0x24]; push [esi]; call [0x5054A0E8] 
0x5050b367  # inc esi; call ebx 
0x50503f2d  # inc esi; xor byte [ebx], bh; ret 
0x505015b3  # inc esi; xor byte [ebp+0x500A74C0], al; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x5052f802  # inc esi; xor al, 0x3B; sal [edx+edx-0x09], 0xFFFFFFD8; push eax; push esi; call [esi+0x44] 
0x50548d45  # inc esi; xor al, 0x50; call [0x5054A03C] 
0x5050648b  # inc esi; xor al, 0x5E; retn 0x0004 
0x5051ef77  # inc esi; cmp byte [edi+0x5E], bl; ret 
0x50533243  # inc esi; cmp esi, ecx; jc 0x5053323A; pop esi; pop ebp; retn 0x0008 
0x5050e72d  # inc esi; cmp al, 0x02; add cl, cl; retn 0x000C 
0x5052df2d  # inc esi; inc esp; add byte [eax], al; leave; ret 
0x50533ab7  # inc esi; inc esp; pop esi; ret 
0x5052771a  # inc esi; dec eax; mov eax, [edi]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5052dcb7  # inc esi; push esp; mov [esi+0x58], ebx; mov [esi+0x5C], edi; call [esi+0x48] 
0x505363e0  # inc esi; push esi; push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x505413be  # inc esi; push esi; push 0x50551068; push esi; call [0x5054A230] 
0x5050c92d  # inc esi; pop edx; add al, byte [eax]; leave; retn 0x0008 
0x50538691  # inc esi; mov al, byte [fs:eax]; add byte [eax], al; push [esi+0x64]; push 0x00000008; call ebx 
0x5050c4a4  # inc esi; mov al, byte [esi]; test al, al; jne 0x5050C496; push esi; call [0x5054A03C] 
0x50523fde  # inc esi; call [eax+0x53] 
0x50541968  # inc esi; inc [ebx-0x36A1DF3C]; ret 
0x50531cd7  # inc edi; add byte [eax], al; pop ecx; mov [0x5055D530], ebx; push 0x5055D480; call [0x5054A19C] 
0x5051f9d1  # inc edi; add [ebx], edi; ror byte [ebx+0x447E0845], 1; push [ebp-0x10]; push eax; call [eax+0x08] 
0x50532491  # inc edi; add [ebx-0x387CFD3A], eax; add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x50532534+edx*4] 
0x50532801  # inc edi; add [ebx-0x387CFD3A], eax; add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x505328A4+edx*4] 
0x50532574  # inc edi; add [edx+0x47880246], ecx; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x50532560  # inc edi; add [ebx+0x5F5E0845], ecx; leave; ret 
0x50534392  # inc edi; add al, byte [eax]; pop edi; ret 
0x5053246b  # inc edi; add al, byte [ebx-0x387CFC3A]; add eax, [ebx-0x338DF707]; rep movsd; jmp [0x50532534+edx*4] 
0x505327db  # inc edi; add al, byte [ebx-0x387CFC3A]; add eax, [ebx-0x338DF707]; rep movsd; jmp [0x505328A4+edx*4] 
0x50532716  # inc edi; add cl, byte [edx+0x47880146]; add [ebx+0x5F5E0845], ecx; leave; ret 
0x5053257a  # inc edi; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x50532710  # inc edi; add ecx, [edx+0x47880246]; add cl, byte [edx+0x47880146]; add [ebx+0x5F5E0845], ecx; leave; ret 
0x505326fc  # inc edi; add ecx, [edx+0x47880246]; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x505326ec  # inc edi; add ecx, [ebx+0x5F5E0845]; leave; ret 
0x505399aa  # inc edi; add al, 0x3B; ret 
0x5052f101  # inc edi; or byte [ebx+0x50006A08], cl; call [ecx+0x1C]; push 0xFFFFFFFF; push edi; call [edi+0x48] 
0x5052f101  # inc edi; or byte [ebx+0x50006A08], cl; call [ecx+0x1C] 
0x50505b23  # inc edi; or al, byte [eax]; add byte [ecx+0x5D39F445], cl; adc byte [esi+ebx-0x01], dh; jne 0x50505B42; call edi 
0x50519955  # inc edi; or al, 0x2B; ret 
0x50537fd0  # inc edi; or al, 0x50; call [0x5054A154] 
0x50503313  # inc edi; or al, 0x85; sal byte [edi+ecx+0x53], 0x50; lea eax, [esi+0x000008A0]; push eax; call [0x5054A04C] 
0x5052e164  # inc edi; or al, 0xFF; jnbe 0x5052E1B5; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052e182  # inc edi; or al, 0xFF; jnbe 0x5052E1EB; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x50533f65  # inc edi; adc byte [ebx], bh; ret 
0x505337de  # inc edi; adc byte [ecx+0x33], bl; shr bl, 0x1C; call [0x5054A0E4] 
0x50506a16  # inc edi; adc byte [ebx-0x3F7AD73A], al; je 0x50506A56; push eax; call ebx 
0x5050d6b8  # inc edi; adc byte [ebp-0x3F7AEBBA], cl; je 0x5050D6E0; push eax; call [0x5054A03C] 
0x505227e6  # inc edi; adc byte [ebp-0x0000837B], cl; call [eax-0x73] 
0x5050d6e2  # inc edi; adc al, 0x50; call [0x5054A038] 
0x50527e2a  # inc edi; sbb byte [eax-0x75], dl; ret 
0x505069a2  # inc edi; sbb byte [ebp+0x500774C0], al; call ebx 
0x50506a95  # inc edi; sbb byte [ebp+0x503774C0], al; call ebx 
0x505036e6  # inc edi; sbb byte [ebp+0x330475DB], al; shr bl, 0x1C; push ebx; call [0x5054A03C] 
0x5051d9ac  # inc edi; sbb al, 0x83; les esi, [eax]; pop edi; pop esi; ret 
0x5053411b  # inc edi; and byte [ebx], bh; ret 
0x505069be  # inc edi; and byte [ebp+0x500774C0], al; call ebx 
0x50506b11  # inc edi; and byte [ebp+0x503774C0], al; call ebx 
0x50515def  # inc edi; sub byte [ebx], bh; ret 
0x50519965  # inc edi; xor byte [ebx], bh; ret 
0x50517536  # inc edi; dec esp; call [eax] 
0x50517543  # inc edi; push eax; call [edx+0x08] 
0x50526b25  # inc edi; push edi; push eax; call [ecx+0x1C] 
0x5050ba9d  # inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x5050b363  # inc edi; push edi; mov word [esi+0x2E], ax; call ebx 
0x50539d8e  # inc edi; push edi; push 0x50551068; push 0x00000100; push ebx; call [0x5054A200] 
0x505180e6  # inc edi; pop eax; lea ecx, [ebp-0x44]; push ecx; push [edi+0x60]; call [eax+0x08] 
0x505180ca  # inc edi; pop eax; lea ecx, [ebp-0x44]; push ecx; push [edi+0x60]; call [eax+0x0C] 
0x50518078  # inc edi; pop eax; call [eax] 
0x50518207  # inc edi; pop esp; lea ecx, [ebp-0x44]; push ecx; push [edi+0x64]; call [eax+0x08] 
0x505181eb  # inc edi; pop esp; lea ecx, [ebp-0x44]; push ecx; push [edi+0x64]; call [eax+0x0C] 
0x50518196  # inc edi; pop esp; call [eax] 
0x50516439  # inc edi; cmp eax, ebx; je 0x50516447; mov ecx, [edi+0x5C]; push eax; call [ecx+0x04] 
0x50518102  # inc edi; push 0x8D40C483; dec ebp; mov esp, 0x7077FF51; call [eax+0x08] 
0x505181b0  # inc edi; insb; call [eax] 
0x50516448  # inc edi; jo 0x50516486; ret 
0x50518097  # inc edi; jo 0x50518025; xchg [eax-0x7B000000], eax; sal byte [eax+ecx-0x75], 0x4F; js 0x505180F7; call [ecx+0x08] 
0x50516457  # inc edi; je 0x50516495; ret 
0x5051819e  # inc edi; je 0x50518126; sal byte [eax+ecx-0x75], 0x4F; insb; push eax; call [ecx+0x04] 
0x50516470  # inc edi; js 0x505164C4; cmp eax, ebx; je 0x5051647C; call [eax+0x08] 
0x5051648d  # inc edi; jl 0x505164E1; cmp eax, ebx; je 0x50516499; call [eax+0x14] 
0x5052e0ab  # inc edi; xchg [eax], eax; add byte [ebp+0x00029085], cl; add byte [eax+0x33], dl; fucomi st0, st0; ret 
0x5050c456  # inc edi; mov al, byte [edi]; test al, al; jne 0x5050C448; push edi; call [0x5054A03C] 
0x505181e6  # inc edi; loopne 0x505181E8; dec [ebx+0x4D8D5C47]; mov esp, 0x6477FF51; call [eax+0x0C] 
0x50502fda  # inc edi; call [0x5054A188] 
0x5052d81a  # dec eax; add [edi-0x37], ebx; ret 
0x5050db1b  # dec eax; add al, byte [eax]; leave; retn 0x000C 
0x50542da6  # dec eax; or byte [ebx-0x37], bl; ret 
0x5051c8b2  # dec eax; or byte [ebp-0x74F3FEBC], cl; dec esp; and al, 0x08; mov [ecx], eax; ret 
0x5051c892  # dec eax; or bl, al; mov eax, [esp+0x04]; mov eax, [eax+0x08]; ret 
0x5053600e  # dec eax; or al, 0x00; add byte [eax], 0x00; pop ecx; pop ebp; ret 
0x5052bdeb  # dec eax; or al, 0x5B; leave; ret 
0x5053d661  # dec eax; or al, 0xBB; add byte [eax+0x51530000], al; call esi 
0x5052b4f2  # dec eax; adc byte [eax], al; add byte [ecx+0x00104C88], cl; add byte [ebx-0x37], bl; ret 
0x505266aa  # dec eax; adc al, 0x0F; xchg eax, ebp; ror [ebx+0x500E8BC1], 0x56; call [ecx+0x1C] 
0x5052c183  # dec eax; adc al, 0x5B; leave; ret 
0x5053ee40  # dec eax; push ss; push ebp; push eax; push eax; call [0x5054A088] 
0x5054112c  # dec eax; sbb byte [edi], cl; xchg eax, esp; retn 0xC28B 
0x50515793  # dec eax; sbb byte [ebx-0x3DD4EBC0], cl; add eax, ecx; ret 
0x5052c645  # dec eax; sbb al, 0x5B; leave; ret 
0x5051d91d  # dec eax; and byte [edi], cl; pushfd; retn 0xC28B 
0x505465d2  # dec eax; and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DFB0], eax; call esi 
0x50532438  # dec eax; and al, 0x53; push eax; jmp [0x50532544+ecx*4] 
0x5051d776  # dec eax; xor byte [ebp+0x04], dh; xor eax, eax; inc eax; ret 
0x50527295  # dec eax; cmp byte [edi], cl; xchg eax, ebp; ror [ebx+0x500E8BC1], 0x56; call [ecx+0x1C] 
0x50515c2e  # dec eax; inc eax; pop edi; pop ebp; ret 
0x50516804  # dec eax; dec eax; jne 0x50516828; push 0x00000038; pop eax; ret 
0x50521914  # dec eax; push eax; mov [eax+0x58], ecx; mov [eax+0x54], ecx; ret 
0x5050491d  # dec eax; push eax; call [0x5054A03C]; lea eax, [ebp+eax+0x48]; push eax; call [0x5054A260] 
0x5050491d  # dec eax; push eax; call [0x5054A03C] 
0x505048e8  # dec eax; push eax; call [0x5054A050] 
0x50504928  # dec eax; push eax; call [0x5054A260] 
0x5052dc70  # dec eax; push eax; call [eax+0x48] 
0x5050f069  # dec eax; push ebx; push esi; push [ebp-0x04]; call [0x5054A0D0] 
0x5052191a  # dec eax; push esp; ret 
0x50521917  # dec eax; pop eax; mov [eax+0x54], ecx; ret 
0x5052dc74  # dec eax; pop ecx; pop ecx; pop ebp; ret 
0x505410f4  # dec eax; pop ebp; ret 
0x5052dcf6  # dec eax; pushad; call [eax+0x48] 
0x5051618b  # dec eax; popad; push ecx; push eax; pop edi; ret 
0x5052dd22  # dec eax; call [fs:eax+0x48] 
0x50508c3e  # dec eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x505391b4  # dec eax; je 0x505391BA; xor eax, eax; ret 
0x5051e3a2  # dec eax; je 0x5051E3A9; or eax, 0xFFFFFFFF; ret 
0x5051e39f  # dec eax; je 0x5051E3AE; dec eax; je 0x5051E3A9; or eax, 0xFFFFFFFF; ret 
0x50516805  # dec eax; jne 0x50516828; push 0x00000038; pop eax; ret 
0x50508c19  # dec eax; test eax, eax; je 0x50508C55; push eax; call edi 
0x50518090  # dec eax; mov [edi+0x68], eax; call [eax] 
0x50527192  # dec eax; mov eax, [esi]; push 0x00000001; push esi; call [eax+0x1C] 
0x5052771b  # dec eax; mov eax, [edi]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x505318c3  # dec eax; mov eax, [0x75FF5054]; clc; mov ebx, [0x5054A060]; call ebx 
0x50512dc1  # dec eax; mov byte [0x16EB5054], al; push [ebp-0x30]; push [ebp-0x34]; push [ebp-0x38]; call [0x5054A044] 
0x5051e4ea  # dec eax; mov byte [0x16EB5054], al; push [ebp-0x28]; push [ebp-0x2C]; push [ebp-0x30]; call [0x5054A044] 
0x50509855  # dec eax; mov [0x75FF5054], eax; or al, ch; ret 
0x50528734  # dec eax; mov ah, 0x00; add byte [ebx-0x0000A773], cl; dec [ecx-0x0000977B]; inc [ebx]; ret 
0x5050112b  # dec eax; leave; push ebp; push eax; call [0x5054A020]; ret 
0x5050112b  # dec eax; leave; push ebp; push eax; call [0x5054A020] 
0x5050114c  # dec eax; leave; push ebp; push eax; call [0x5054A024]; ret 
0x5050114c  # dec eax; leave; push ebp; push eax; call [0x5054A024] 
0x505010ef  # dec eax; leave; push ebp; push eax; call [0x5054A154] 
0x50501064  # dec eax; leave; push ebp; push eax; call [0x5054A160]; call [0x5054A184] 
0x50501064  # dec eax; leave; push ebp; push eax; call [0x5054A160] 
0x50526436  # dec eax; aam 0x55; push eax; ret 
0x5053784b  # dec eax; aad 0x55; push eax; push eax; call esi 
0x505377d4  # dec eax; aad 0x55; push eax; call esi 
0x505464e1  # dec eax; fist word [ebp+0x50]; call esi 
0x5053bde6  # dec eax; in eax, 0xFF; call [eax-0x75]; push es; push [edi+eax]; call [0x5054A0E8] 
0x5053bde6  # dec eax; in eax, 0xFF; call [eax-0x75] 
0x50537f1e  # dec eax; neg eax; sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x5054A1BC] 
0x50517ffe  # dec ecx; add byte [eax], al; push [ebx+0x70]; mov eax, [edi+0x0000008C]; call [eax+0x04] 
0x505326f6  # dec ecx; add byte [edx+0x47880346], cl; add ecx, [edx+0x47880246]; add cl, byte [ebx+0x5F5E0845]; leave; ret 
0x50521f31  # dec ecx; xor al, byte [eax]; add byte [esi-0x18], dl; sub ebp, [edx-0x3B7C0001]; adc al, 0x5E; ret 
0x505071a3  # dec ecx; cmp [ebp+0x0C], esi; je 0x505071D2; push [ebp+0x0C]; call ebx 
0x5050d92a  # dec ecx; dec edx; add al, byte [eax]; add ebp, 0x00000F94; leave; retn 0x000C 
0x5050105f  # dec ecx; push edi; call esi; push 0x5055C948; call [0x5054A160]; call [0x5054A184] 
0x5050105f  # dec ecx; push edi; call esi; push 0x5055C948; call [0x5054A160] 
0x5050105f  # dec ecx; push edi; call esi 
0x5050af8f  # dec ecx; pop ebx; pop esi; pop edi; retn 0x0008 
0x50539cb0  # dec ecx; jne 0x50539C83; mov edi, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x50509769  # dec ecx; jne 0x50509743; pop edi; pop esi; ret 
0x50525e31  # dec ecx; test ecx, ecx; jnle 0x50525E2D; pop esi; ret 
0x50543668  # dec ecx; mov eax, [ebp+0x08]; sub eax, ecx; dec eax; pop ebp; ret 
0x505148a3  # dec ecx; add [eax], eax; pop ecx; pop ecx; ret 
0x5052d8c3  # dec edx; add byte [eax], al; add ebp, 0x0000008C; leave; ret 
0x5050d92b  # dec edx; add al, byte [eax]; add ebp, 0x00000F94; leave; retn 0x000C 
0x5053c3e2  # dec edx; add al, 0x78; or [ebx+0x01B60F0A], ecx; inc ecx; mov [edx], ecx; ret 
0x5052d721  # dec edx; jne 0x5052D6FB; pop edi; pop esi; ret 
0x5052f862  # dec edx; jne 0x5052F853; pop esi; ret 
0x50524292  # dec edx; jne 0x50524289; ret 
0x50525172  # dec edx; rol byte [eax], cl; add byte [ebx-0x3874F33C], al; pop edi; pop esi; ret 
0x50542c29  # dec edx; idiv esi; dec ecx; ret 
0x50528a28  # dec ebx; cdq; add byte [eax], al; add ebp, 0x6C; leave; ret 
0x50537e97  # dec ebx; test al, 0x08; jne 0x50537EA7; push ecx; call [0x5054A1C0] 
0x5053a396  # dec ebx; call [ecx+0x57] 
0x5052ef10  # dec esp; add byte [eax], al; push eax; push ebx; push [esi+0x08]; call [edi+0x08] 
0x50515e8b  # dec esp; add [eax], eax; add byte [ebx], dh; fstp tword [ebx]; ret 
0x50515d6d  # dec esp; add [eax], eax; add byte [ebx], bh; ret 
0x5051651b  # dec esp; add [eax], eax; add byte [ecx+0x002D049F], cl; add byte [ecx+0x002D009F], cl; add byte [ebx], bh; ret 
0x5051658a  # dec esp; add [eax], eax; add byte [ebx+0x00016487], cl; add byte [ebx], bh; ret 
0x505179e7  # dec esp; add al, byte [eax]; add byte [eax+0x6A], dl; call [ebx-0x77] 
0x5050d732  # dec esp; add al, byte [eax]; leave; retn 0x0008 
0x505144a4  # dec esp; push es; add byte [eax], al; call [0x5054A050] 
0x5053da1b  # dec esp; pop es; add al, 0x83; jmp [eax] 
0x50539395  # dec esp; push cs; sbb eax, 0x80D18A10; retn 0xEB20 
0x5052b4f8  # dec esp; adc byte [eax], al; add byte [ebx-0x37], bl; ret 
0x5052b418  # dec esp; adc byte [eax], al; add byte [esi-0x37], bl; ret 
0x505429ac  # dec esp; and byte [ebp+0x50], dl; push edi; mov [0x5055DEC0], eax; call esi 
0x50546446  # dec esp; and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF28], eax; call esi 
0x50533be7  # dec esp; and al, 0x04; sub eax, ecx; ret 
0x50516766  # dec esp; and al, 0x04; xor eax, eax; cmp [ecx+0x10], eax; setne al; ret 
0x5051c914  # dec esp; and al, 0x04; cmp ecx, eax; jbe 0x5051C91E; xor eax, eax; ret 
0x5051d6fd  # dec esp; and al, 0x04; mov [ecx+0x08], eax; ret 
0x5051f265  # dec esp; and al, 0x04; mov [ecx+0x10], eax; ret 
0x505317ad  # dec esp; and al, 0x04; mov [ecx+0x1C], eax; ret 
0x5052421b  # dec esp; and al, 0x04; mov [eax+0x04], ecx; ret 
0x50516b4a  # dec esp; and al, 0x08; add [eax+0x00000124], ecx; ret 
0x5052dcef  # dec esp; and al, 0x08; push 0x00000001; push eax; mov [eax+0x60], ecx; call [eax+0x48] 
0x5052dd1b  # dec esp; and al, 0x08; push 0x00000003; push eax; mov [eax+0x64], ecx; call [eax+0x48] 
0x5051c8b9  # dec esp; and al, 0x08; mov [ecx], eax; ret 
0x50516ac0  # dec esp; and al, 0x08; mov [eax+0x00000114], ecx; ret 
0x50516b70  # dec esp; and al, 0x08; mov [eax+0x00000128], ecx; ret 
0x50516bce  # dec esp; and al, 0x08; mov [eax+0x00000134], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000138], ecx; ret 
0x505169fd  # dec esp; and al, 0x08; mov [eax+0x000000D8], ecx; ret 
0x5050c7ce  # dec esp; and al, 0x08; mov [eax+0x000032D8], ecx; xor eax, eax; retn 0x0008 
0x5053676b  # dec esp; and al, 0x0C; jne 0x50536779; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x50516b1d  # dec esp; and al, 0x0C; mov [eax+0x0000011C], ecx; mov ecx, [esp+0x10]; mov [eax+0x00000120], ecx; ret 
0x50516b27  # dec esp; and al, 0x10; mov [eax+0x00000120], ecx; ret 
0x50516a8a  # dec esp; and al, 0x10; mov [eax+0x00000124], ecx; ret 
0x50516bd8  # dec esp; and al, 0x10; mov [eax+0x00000138], ecx; ret 
0x50527cf3  # dec esp; xor eax, 0xE85051F8; ret 
0x5050d6dc  # dec esp; cmp edi, edi; call [eax-0x73]; inc edi; adc al, 0x50; call [0x5054A038] 
0x5050d6dc  # dec esp; cmp edi, edi; call [eax-0x73] 
0x50516423  # dec esp; push eax; call [ecx+0x04] 
0x5051ec6f  # dec esp; push ebx; push eax; call [ecx] 
0x5050ab27  # dec esp; js 0x5050AB2C; add cl, cl; retn 0x000C 
0x50509f27  # dec esp; test byte [edx], al; add cl, cl; retn 0x000C 
0x505167c2  # dec esp; test eax, eax; je 0x505167DB; mov eax, [eax+0x14]; ret 
0x505181ae  # dec esp; mov [edi+0x6C], eax; call [eax] 
0x5052e168  # dec esp; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052dc68  # dec esp; mov ecx, [ebp+0x10]; push 0x00000000; push eax; mov [eax+0x50], ecx; call [eax+0x48] 
0x5051753c  # dec esp; lea ecx, [edi+0x14]; push ecx; push eax; mov [edi+0x50], eax; call [edx+0x08] 
0x5050c8db  # dec esp; mov al, byte [0xC0335054]; retn 0x0008 
0x5050a1b9  # dec esp; mov al, byte [0x57505054]; call esi 
0x5050ca52  # dec esp; mov al, byte [0x1F745054]; push 0x00000200; push [eax]; push edi; call ebx 
0x5050a232  # dec esp; mov al, byte [0x458B5054]; or byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x000C 
0x50547748  # dec esp; mov al, byte [0x458B5054]; mov al, 0x3B; ret 
0x50548e52  # dec esp; mov al, byte [0x458D5054]; and al, 0x50; call esi 
0x50503078  # dec esp; mov al, byte [0x858D5054]; test byte [eax], al; add byte [eax], al; push eax; call [0x5054A03C] 
0x50514338  # dec esp; mov al, byte [0x75FF5054]; or al, 0xFF; adc eax, 0x5054A03C; pop ebp; retn 0x000C 
0x50531867  # dec esp; mov eax, [0x6A575054]; add edi, edi; jne 0x50531865; call ebx 
0x5053782c  # dec esp; aad 0x55; push eax; mov [0x5055D550], eax; call [0x5054A184] 
0x505377e1  # dec esp; aad 0x55; push eax; call esi 
0x50547287  # dec esp; fist word [ebp+0x50]; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x505464f3  # dec esp; fist word [ebp+0x50]; call esi 
0x50546a73  # dec esp; loopne 0x50546ACB; push eax; call esi 
0x505180e1  # dec esp; loope 0x505180E3; dec [ebx+0x4D8D5847]; mov esp, 0x6077FF51; call [eax+0x08] 
0x50517537  # dec esp; call [eax] 
0x5050fbdd  # dec esp; call [0x5054A0E4] 
0x5052d68f  # dec ebp; add byte [eax], al; add esp, 0x0C; pop edi; leave; ret 
0x5050ab9b  # dec ebp; add al, byte [eax]; add byte [ebx+0x3B571045], cl; ret 
0x50542715  # dec ebp; or byte [ecx+0x50], dl; call [0x5054A174] 
0x50539a47  # dec ebp; or byte [ebp-0x2A], dh; mov eax, [edi+0x000000D4]; add eax, 0x000000B4; push eax; call esi 
0x50541d33  # dec ebp; or byte [eax-0x76FC14E1], cl; pop ebp; or byte [ebx], bh; ret 
0x50531b72  # dec ebp; or byte [ecx-0x743CA2F8], cl; call [ebp-0x75] 
0x5053e415  # dec ebp; or byte [ecx+0x0CC48308], cl; leave; ret 
0x5052481e  # dec ebp; or byte [ebx-0x7C2DCCFF], cl; in al, dx; or al, 0x3B; retn 0x0475 
0x5054419b  # dec ebp; or byte [ebx-0x377C07B3], cl; call ebx 
0x50545ccf  # dec ebp; or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x5052d812  # dec ebp; or ecx, [eax-0x00B275F8]; mov byte [eax+0x01], cl; pop edi; leave; ret 
0x5054458f  # dec ebp; or al, 0x89; sbb [edi+0x5B], ebx; leave; ret 
0x5052dc6a  # dec ebp; adc byte [edx+0x00], ch; push eax; mov [eax+0x50], ecx; call [eax+0x48] 
0x50520269  # dec ebp; adc byte [ebx-0x2483E707], al; mov eax, [esi+0x14]; cmp eax, 0x0C; jnbe 0x5052022D; jmp [0x50520785+eax*4] 
0x5053d933  # dec ebp; adc byte [ecx-0x71F003A3], cl; push ebp; add [eax], eax; add dh, dh; ret 
0x505430df  # dec ebp; adc al, 0x51; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x5054A190] 
0x505333f3  # dec ebp; adc al, 0x83; les ecx, [ecx+ecx*4]; add [edi+0x5E], ebx; pop ebp; ret 
0x5051fe52  # dec ebp; sbb byte [ebx], al; retn 0x4589 
0x5051fdde  # dec ebp; sbb byte [edi-0x77], bl; add [ebx], esi; rcr byte [esi+0x40], 0x5B; pop ebp; ret 
0x50548e3f  # dec ebp; sbb al, 0x8A; add [edx], edi; ret 
0x5050a126  # dec ebp; add byte [edx], 0x00; leave; retn 0x0008 
0x50544e8b  # dec ebp; test byte [ebx], bh; retn 0x840F 
0x5051aec0  # dec ebp; mov byte [ecx-0x01], dl; jne 0x5051AE5E; push [ebp-0x70]; push [edi+0x04]; call [eax+0x2C] 
0x50547e81  # dec ebp; lea eax, [ebp-0x50]; push eax; call [0x5054A03C] 
0x50517f81  # dec ebp; pushfd; push [ecx]; mov eax, [edi+0x0000008C]; call [eax] 
0x50544ca6  # dec ebp; mov al, 0x8A; add al, byte [edx+0x3A]; ret 
0x505180e9  # dec ebp; mov esp, 0x6077FF51; call [eax+0x08] 
0x505180cd  # dec ebp; mov esp, 0x6077FF51; call [eax+0x0C] 
0x505181ee  # dec ebp; mov esp, 0x6477FF51; call [eax+0x0C] 
0x50518108  # dec ebp; mov esp, 0x7077FF51; call [eax+0x08] 
0x50518229  # dec ebp; mov esp, 0x7477FF51; call [eax+0x08] 
0x5050687f  # dec ebp; lds eax, [edx]; add byte [ebx-0x7A72F33C], al; push 0x50FFFFFF; mov [ebp-0x00000098], edi; call [0x5054A054] 
0x50505247  # dec ebp; enter 0x71FF, 0x0C; push eax; call [0x5054A050] 
0x50508bd1  # dec ebp; fcos; call [esi+0x50] 
0x50503726  # dec ebp; in al, dx; add al, byte [eax]; leave; retn 0x000C 
0x50542a19  # dec ebp; in al, dx; push ecx; push 0x00000001; push eax; call edi 
0x50533113  # dec ebp; lock and [ecx+0x70], 0xFFFFFFFD; pop ebx; leave; ret 
0x5053391b  # dec ebp; lock and [ecx+0x70], 0xFFFFFFFD; pop esi; pop ebx; leave; ret 
0x5051e47e  # dec ebp; hlt; call [ebx+0x56] 
0x5052483c  # dec ebp; hlt; call [ebx-0x75] 
0x50546ac4  # dec ebp; clc; push ecx; call eax; push 0x5055E084; call [0x5054A15C] 
0x50546ac4  # dec ebp; clc; push ecx; call eax 
0x50501f8c  # dec ebp; clc; je 0x50501FB1; call [0x5054A188] 
0x50532b6a  # dec ebp; clc; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x5052b7bc  # dec ebp; clc; mov [eax+0x0000104C], ecx; pop esi; leave; ret 
0x5052a55b  # dec ebp; clc; mov [eax+0x00000084], ecx; pop esi; leave; ret 
0x50524861  # dec ebp; clc; call [edi+0x33] 
0x5054224e  # dec ebp; cld; push ecx; push [ebp-0x08]; push eax; call [0x5054A0EC] 
0x5053ab49  # dec ebp; inc [eax-0x1F7C3E75]; add ebp, [ebx]; ret 
0x5052d817  # dec ebp; dec [eax-0x36A0FEB8]; ret 
0x5052d59b  # dec esi; add byte [eax], al; add esp, 0x0C; pop edi; leave; ret 
0x5050d4b0  # dec esi; add al, byte [eax]; leave; retn 0x000C 
0x50515522  # dec esi; adc byte [edx], al; ret 
0x5051525e  # dec esi; adc byte [ebx+0x44881856], cl; adc edi, edi; pop edi; ret 
0x505152ae  # dec esi; adc byte [ebx+0x44881856], cl; adc edi, edi; ret 
0x50527596  # dec esi; adc byte [ebx+0x00008489], cl; add byte [ebx+0x34FF5307], cl; lea esi, [eax+0x575054C1]; call [eax+0x08] 
0x50526427  # dec esi; adc al, 0x00; add byte [ebx+0x18A30CC4], al; loope 0x50526487; push eax; ret 
0x50524338  # dec esi; sbb byte [ebx], al; retn 0xC13B 
0x5051613d  # dec esi; sbb al, ch; add eax, 0x5FFFFFFD; pop esi; leave; ret 
0x50510725  # dec esi; sbb al, 0x02; add cl, cl; retn 0x0014 
0x50524349  # dec esi; sbb al, 0x03; retn 0xC13B 
0x5053b942  # dec esi; sbb al, 0x33; rcr byte [ebx+0x5F], 0x5E; leave; ret 
0x5051556d  # dec esi; and byte [ebx+0x035FFC4D], cl; rcr [esi+0x03], 0xFFFFFFC3; pop ebx; leave; ret 
0x5050af8d  # dec esi; and al, 0x49; pop ebx; pop esi; pop edi; retn 0x0008 
0x5051159e  # dec esi; and eax, 0x59590002; ret 
0x5053ff0e  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x50515c2d  # dec esi; dec eax; inc eax; pop edi; pop ebp; ret 
0x50509730  # dec esi; jne 0x50509714; pop esi; ret 
0x50539230  # dec esi; jne 0x5053922A; pop edi; pop esi; ret 
0x50525a56  # dec esi; jns 0x50525A32; pop edi; lea eax, [esi+0x01]; pop esi; ret 
0x50549507  # dec esi; or esi, 0xFFFFFFF8; inc esi; and [eax], 0x00000000; push edi; call [0x5054A03C] 
0x50508358  # dec esi; mov seg?, di; push [ebx]; rcr byte [edi+0x5E], 0x5B; leave; retn 0x0008 
0x50513e0f  # dec edi; add byte [eax], al; xor eax, eax; add esp, 0x0C; inc eax; ret 
0x5052d4a7  # dec edi; add byte [eax], al; add esp, 0x0C; pop esi; leave; ret 
0x5051f25b  # dec edi; add byte [eax], al; leave; ret 
0x5050d45c  # dec edi; add al, byte [eax]; leave; retn 0x000C 
0x505277ff  # dec edi; or byte [ebx], ch; retn 0xCA2B 
0x5051753e  # dec edi; adc al, 0x51; push eax; mov [edi+0x50], eax; call [edx+0x08] 
0x50516422  # dec edi; dec esp; push eax; call [ecx+0x04] 
0x50516431  # dec edi; pop eax; push eax; call [ecx+0x04] 
0x50516440  # dec edi; pop esp; push eax; call [ecx+0x04] 
0x50518087  # dec edi; push 0x0451FF50; pop ecx; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x5051645e  # dec edi; insb; push eax; call [ecx+0x04] 
0x505180a4  # dec edi; js 0x505180F7; call [ecx+0x08] 
0x505181c2  # dec edi; jl 0x50518215; call [ecx+0x14] 
0x505240f4  # dec edi; call [ecx-0x73] 
0x50546cbd  # push eax; add byte [esi+0x74], dl; adc byte [esi-0x01], dl; adc eax, 0x5055DF10; push eax; call [0x5055DFE4] 
0x5051e8c2  # push eax; add byte [ecx+0x5E], bl; ret 
0x50542944  # push eax; add byte [ebx-0x717AF028], cl; add byte [eax], al; add byte [eax-0x68], ch; and byte [ebp+0x50], dl; call [0x5054A08C] 
0x5053987e  # push eax; add [eax], eax; add byte [eax], al; xor eax, eax; ret 
0x505394b4  # push eax; add [eax], eax; add byte [eax], al; call [0x5054A1F0] 
0x50539491  # push eax; add [eax], eax; add byte [eax], al; call [0x5054A1F4] 
0x505166f4  # push eax; add [eax], eax; add byte [ebx], bh; retn 0xED74 
0x5053b6f7  # push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x50533393  # push eax; add [ebp+0x04], esi; xor eax, eax; inc eax; ret 
0x5052d573  # push eax; add [ebx-0x3F7CFB39], eax; add al, 0x83; call [eax] 
0x50509725  # push eax; add [eax-0x3F7CFDAF], ecx; add al, 0x83; rol [esi+ecx*2], 0x75; loope 0x50509792; ret 
0x5050d294  # push eax; add al, byte [eax]; leave; retn 0x000C 
0x50542728  # push eax; add dh, byte [ebp-0x26]; call [0x5054A0E4] 
0x5050b82a  # push eax; add eax, [esi+0x08]; mov edi, [0x5054A260]; push eax; call edi 
0x5052e2fa  # push eax; add al, 0x00; add cl, cl; ret 
0x5051ce02  # push eax; add al, 0x2B; rol [ebx+0x037301FA], 1; xor eax, eax; ret 
0x50527278  # push eax; add al, 0x59; pop ecx; pop edi; pop esi; ret 
0x5051514f  # push eax; add al, 0x83; les ecx, [ecx+ecx*8]; ret 
0x50526687  # push eax; add al, 0x83; les edx, [eax]; pop edi; pop esi; ret 
0x5052dcd9  # push eax; or byte [ebx+0x5D5E10C4], al; ret 
0x5053d8e6  # push eax; or byte [ebx+0x5B5E5FC3], cl; leave; ret 
0x50517fd1  # push eax; or bh, bh; jnc 0x50518046; mov [ebx+0x60], eax; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x5052daed  # push eax; or al, 0x83; les ecx, [esi+ebx*2]; pop ebp; ret 
0x50524c4f  # push eax; or al, 0x85; sal byte [esp+eax-0x75], cl; retn 0x09EB 
0x50506a11  # push eax; or al, 0x8B; xor [ebx-0x397CEFB9], ecx; sub byte [ebp+0x503774C0], al; call ebx 
0x50546783  # push eax; jne 0x50546AC9; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x50526ac7  # push eax; jne 0x50526B57; mov ecx, [eax]; call [ecx+0x08] 
0x50542fc3  # push eax; sete cl; mov eax, ecx; ret 
0x505475a0  # push eax; movzx eax, al; and eax, 0x01; ret 
0x50526604  # push eax; movzx eax, al; ret 
0x50532b88  # push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000103; pop ebp; ret 
0x50532d92  # push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000107; pop ebp; ret 
0x50532c8d  # push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000080; pop ebp; ret 
0x50532d0e  # push eax; movzx eax, word [ecx+eax*2]; and eax, 0x08; pop ebp; ret 
0x5050a9aa  # push eax; movzx eax, word [esi]; push eax; push 0x5054AB70; push ebx; call [0x5054A260] 
0x50524c48  # push eax; adc byte [ebp-0x74F88A2E], al; push eax; or al, 0x85; sal byte [esp+eax-0x75], cl; retn 0x09EB 
0x50516495  # push eax; adc al, 0xEB; add eax, 0x009C69E8; add byte [ecx-0x75], bl; xchg [eax+0x3B000000], edi; ret 
0x50526ddd  # push eax; and byte [ebx+0x45891CC4], al; or byte [esi+0x3B], dl; ret 
0x505421a2  # push eax; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x505466aa  # push eax; and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFAC], eax; call esi 
0x50537bba  # push eax; xor eax, eax; pop ebp; ret 
0x50513e7b  # push eax; xor eax, eax; pop edi; inc eax; pop esi; ret 
0x5052f3b0  # push eax; xor eax, eax; add esp, 0x14; retn 0x0004 
0x5050c8de  # push eax; xor eax, eax; retn 0x0008 
0x5053919f  # push eax; xor eax, eax; ret 
0x50538924  # push eax; xor esi, eax; lea eax, [ebp-0x10]; push eax; call [0x5054A1E0] 
0x50538914  # push eax; xor esi, eax; call [0x5054A044]; xor esi, eax; call [0x5054A188] 
0x50538914  # push eax; xor esi, eax; call [0x5054A044] 
0x5053891c  # push eax; xor esi, eax; call [0x5054A188] 
0x50548493  # push eax; cmp [ebp-0x7C], ecx; je 0x505484EB; push 0x80000001; call esi 
0x50503ad2  # push eax; cmp [ebp+0x10], ebx; je 0x50503AF6; push [ebp+0x10]; call edi 
0x5052f495  # push eax; cmp [esi+0x10], ebp; je 0x5052F40F; push [esi+0x04]; call [0x5054A13C] 
0x50506fcc  # push eax; cmp [ebp+0x0C], esi; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x505079a9  # push eax; cmp [ebp-0x04], esi; je 0x505077FE; push [ebp-0x04]; call [0x5055CA0C] 
0x505078f8  # push eax; cmp [ebp-0x04], esi; je 0x50507907; push [ebp-0x04]; call [0x5055CA0C] 
0x50503966  # push eax; cmp [ebp+0x10], edi; mov edi, [0x5054A058]; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x505068ab  # push eax; cmp eax, esi; je 0x505068B9; push eax; call edi 
0x505068bd  # push eax; cmp eax, esi; je 0x50506925; push eax; call edi 
0x5052f486  # push eax; cmp ebx, ebp; je 0x5052F4A8; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5051752b  # push eax; cmp ebx, esi; je 0x50517535; mov eax, 0x5054D2F0; mov [edi+0x4C], eax; call [eax] 
0x50536677  # push eax; jecxz 0x505366CE; push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x50506643  # push eax; inc ebx; push [ebp-0x24]; call esi 
0x5050ba9c  # push eax; inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x5052dc73  # push eax; dec eax; pop ecx; pop ecx; pop ebp; ret 
0x5054722c  # push eax; push eax; push eax; lea eax, [ebp-0x40]; push eax; call ebx 
0x50501f42  # push eax; push eax; push eax; lea eax, [ebp-0x24]; push eax; call [0x5054A264] 
0x50503d6a  # push eax; push eax; push ebx; push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x5050a1bc  # push eax; push eax; push edi; call esi 
0x5051e2da  # push eax; push eax; push 0x40000000; push [esp+0x20]; call [0x5054A0A8] 
0x5052f286  # push eax; push eax; push 0x00000001; push eax; lea edi, [esp+0x20]; call [0x5054A110] 
0x505374b4  # push eax; push eax; mov ebx, [0x5054A088]; call ebx 
0x5054722d  # push eax; push eax; lea eax, [ebp-0x40]; push eax; call ebx 
0x50501f43  # push eax; push eax; lea eax, [ebp-0x24]; push eax; call [0x5054A264] 
0x50531822  # push eax; push eax; mov [ebp-0x1C], 0x0000000C; mov [ebp-0x18], edi; call ebx 
0x5052f1ff  # push eax; push eax; call [0x5054A124] 
0x5052f1d5  # push eax; push eax; call [0x5054A12C] 
0x50509efd  # push eax; push eax; call [0x5054A03C]; lea eax, [ebp+eax-0x44]; push eax; call esi 
0x50509efd  # push eax; push eax; call [0x5054A03C] 
0x5050c88d  # push eax; push eax; call [0x5054A040] 
0x50547259  # push eax; push eax; call [0x5054A24C]; push [0x50556FF8]; call [0x5054A030] 
0x50512dd5  # push eax; push eax; call [0x5054A24C] 
0x5050b7f7  # push eax; push eax; call [0x5054A05C] 
0x50504977  # push eax; push eax; call [0x5054A260] 
0x5054241f  # push eax; push eax; call [0x5054A07C] 
0x505424a2  # push eax; push eax; call [0x5054A084] 
0x50537367  # push eax; push eax; call [0x5054A088] 
0x50542751  # push eax; push eax; call [0x5054A190] 
0x50538f70  # push eax; push eax; call [0x5054A1E4]; leave; ret 
0x50538b47  # push eax; push eax; call [0x5054A1E4] 
0x50546cc8  # push eax; push eax; call [0x5055DFE4] 
0x5052e140  # push eax; push eax; call [ecx+0x08] 
0x5050666d  # push eax; push eax; call esi 
0x5050b833  # push eax; push eax; call edi 
0x5052f7d9  # push eax; push ecx; push esi; call [esi+0x00001030] 
0x5050b85d  # push eax; push ecx; mov [esi+0x0C], ecx; call edi 
0x5054276d  # push eax; push ecx; call [0x5054A17C] 
0x505074ed  # push eax; push edx; call [0x5055C984] 
0x50503d6b  # push eax; push ebx; push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x50549411  # push eax; push ebx; push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x50509567  # push eax; push ebx; push esi; push esi; call [0x5054A240] 
0x50509682  # push eax; push ebx; push esi; push 0x0000FDE9; call [0x5054A240] 
0x5051e259  # push eax; push ebx; push esi; call [0x5054A10C] 
0x50509842  # push eax; push ebx; push 0x5054AAD4; push edi; call [0x5054A260] 
0x5050f5d3  # push eax; push ebx; lea eax, [ebp-0x18]; push eax; push [ebp-0x78]; call edi 
0x5054638b  # push eax; push ebx; mov [0x5055E078], eax; call esi 
0x505467a3  # push eax; push ebx; mov [0x5055E07C], eax; call esi 
0x5050a9b3  # push eax; push ebx; call [0x5054A260] 
0x50516274  # push eax; push ebx; call [esi+0x04]; push [ebp+0x14]; push ebx; call [esi+0x08] 
0x50516263  # push eax; push ebx; call [esi+0x04] 
0x505162b2  # push eax; push ebx; call [esi+0x08] 
0x505414b0  # push eax; push ebx; push [ebp+0x08]; call [0x5054A230] 
0x50531d59  # push eax; push ebx; push [ebp-0x34]; mov edi, [0x5054A190]; call edi 
0x50531d93  # push eax; push ebx; push [ebp-0x34]; call edi 
0x5052ef13  # push eax; push ebx; push [esi+0x08]; call [edi+0x08] 
0x5052e04e  # push eax; push ebx; push [edi+0x08]; call [esi] 
0x50547e45  # push eax; push ebx; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x50547e45  # push eax; push ebx; call esi 
0x505039a6  # push eax; push ebx; call edi; push ebx; call [0x5054A03C] 
0x50503983  # push eax; push ebx; call edi; push [ebp+0x10]; push ebx; call edi 
0x50503983  # push eax; push ebx; call edi 
0x5052f2d4  # push eax; push ebp; lea eax, [esi+0x24]; push eax; push [esi]; call [0x5054A0C0] 
0x50546b0f  # push eax; push esi; xor edi, edi; call [0x5054A18C] 
0x5053829b  # push eax; push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x5050117a  # push eax; push esi; push 0x5055C944; call [0x5054A18C]; push esi; call [0x5054A028] 
0x5050117a  # push eax; push esi; push 0x5055C944; call [0x5054A18C] 
0x5053bf92  # push eax; push esi; push 0x0000FDE9; call [0x5054A190] 
0x5053df4d  # push eax; push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x5050d8b6  # push eax; push esi; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x5050d8c0  # push eax; push esi; mov edi, eax; call [0x5054A060] 
0x50513a69  # push eax; push esi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x505078df  # push eax; push esi; call [0x5055CA24] 
0x505011e0  # push eax; push esi; call [0x5054A028]; pop esi; retn 0x0004 
0x50501186  # push eax; push esi; call [0x5054A028]; mov eax, esi; pop esi; ret 
0x50501186  # push eax; push esi; call [0x5054A028] 
0x505413c4  # push eax; push esi; call [0x5054A230] 
0x50506c98  # push eax; push esi; call [0x5054A038] 
0x505492a5  # push eax; push esi; call [0x5054A03C] 
0x5054929e  # push eax; push esi; call [0x5054A04C]; push esi; call [0x5054A03C] 
0x5054929e  # push eax; push esi; call [0x5054A04C] 
0x50506a3b  # push eax; push esi; call [0x5054A050] 
0x50503d8c  # push eax; push esi; call [0x5054A060] 
0x50503d85  # push eax; push esi; call [0x5054A064]; push esi; call [0x5054A060] 
0x50503d85  # push eax; push esi; call [0x5054A064] 
0x5054274a  # push eax; push esi; call [0x5054A178]; push eax; call [0x5054A190] 
0x5054274a  # push eax; push esi; call [0x5054A178] 
0x50502fc5  # push eax; push esi; call [0x5054A18C] 
0x5053734c  # push eax; push esi; call [0x5054A1B0] 
0x50513a54  # push eax; push esi; call [0x5054A0CC] 
0x50503dba  # push eax; push esi; call [0x5054A0D4] 
0x505334a8  # push eax; push esi; call [0x5054A0F8] 
0x5051f213  # push eax; push esi; call [ecx+0x04] 
0x5051f1b0  # push eax; push esi; call [ecx+0x0C] 
0x505266b3  # push eax; push esi; call [ecx+0x1C]; add esp, 0x0C; pop esi; ret 
0x505266b3  # push eax; push esi; call [ecx+0x1C] 
0x50541b27  # push eax; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call ebx 
0x5052f7eb  # push eax; push esi; call [esi+0x00001030] 
0x5050c514  # push eax; push esi; call ebx 
0x505010ba  # push eax; push esi; call edi 
0x505383bf  # push eax; push edi; push ebx; push ebx; mov [ebp-0x0C], eax; call esi 
0x5052f5b9  # push eax; push edi; push edi; call [0x5054A06C] 
0x505436a7  # push eax; push edi; push edi; call [0x5054A16C] 
0x5050bdfb  # push eax; push edi; mov word [esi+0x30], ax; call [0x5054A0B8] 
0x5053186a  # push eax; push edi; push 0x00000001; push [ebp-0x0C]; call ebx 
0x505075fe  # push eax; push edi; push 0x00000002; push 0x5054A5F4; push edi; call [0x5055C984] 
0x50506ec5  # push eax; push edi; mov [esi+0x10], eax; call ebp 
0x50506ede  # push eax; push edi; mov [esi+0x14], eax; call ebp 
0x50506ef7  # push eax; push edi; mov [esi+0x18], eax; call ebp 
0x50506f10  # push eax; push edi; mov [esi+0x1C], eax; call ebp 
0x50506f29  # push eax; push edi; mov [esi+0x20], eax; call ebp 
0x50506f42  # push eax; push edi; mov [esi+0x24], eax; call ebp 
0x50547f8a  # push eax; push edi; mov edi, [0x5054A260]; call edi 
0x505399db  # push eax; push edi; mov edi, [ebp+0x08]; push edi; call esi 
0x50513669  # push eax; push edi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x5050ebbc  # push eax; push edi; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0B4] 
0x5050ec52  # push eax; push edi; lea eax, [ebp-0x00000308]; push eax; call [0x5054A0B4] 
0x505377c4  # push eax; push edi; mov [0x5055D544], eax; call esi 
0x505377d1  # push eax; push edi; mov [0x5055D548], eax; call esi 
0x505377de  # push eax; push edi; mov [0x5055D54C], eax; call esi 
0x50542985  # push eax; push edi; mov [0x5055DEB8], eax; call esi 
0x5054299a  # push eax; push edi; mov [0x5055DEBC], eax; call esi 
0x505429af  # push eax; push edi; mov [0x5055DEC0], eax; call esi 
0x50501052  # push eax; push edi; mov edi, 0x5055520C; push edi; call esi 
0x50513e1f  # push eax; push edi; mov edi, 0x50555CA4; push edi; call esi 
0x5050824e  # push eax; push edi; call [0x5055CA2C] 
0x5050cb96  # push eax; push edi; call [0x5054A038] 
0x50502992  # push eax; push edi; call [0x5054A03C] 
0x5054812f  # push eax; push edi; call [0x5054A04C] 
0x50506ebe  # push eax; push edi; call [0x5054A050]; push edi; mov [esi+0x10], eax; call ebp 
0x50506ed7  # push eax; push edi; call [0x5054A050]; push edi; mov [esi+0x14], eax; call ebp 
0x50506ef0  # push eax; push edi; call [0x5054A050]; push edi; mov [esi+0x18], eax; call ebp 
0x50506f22  # push eax; push edi; call [0x5054A050]; push edi; mov [esi+0x20], eax; call ebp 
0x50506ebe  # push eax; push edi; call [0x5054A050] 
0x50509848  # push eax; push edi; call [0x5054A260] 
0x50547d67  # push eax; push edi; call [0x5054A26C] 
0x50507606  # push eax; push edi; call [0x5055C984] 
0x5050be1a  # push eax; push edi; call [0x5054A0B8] 
0x5050eba1  # push eax; push edi; call [0x5054A0CC] 
0x50513e51  # push eax; push edi; call [0x5054A0D4] 
0x5053956d  # push eax; push edi; call [0x5054A1EC] 
0x5053d756  # push eax; push edi; push [0x5055D69C]; call [0x5054A080] 
0x5052f323  # push eax; push edi; push [esi]; call [0x5054A140] 
0x505275a7  # push eax; push edi; call [eax+0x08] 
0x50541d63  # push eax; push edi; push [ebp+0x08]; lea eax, [ebp-0x04]; push eax; call esi 
0x50541dbf  # push eax; push edi; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x505051f8  # push eax; push edi; call ebx 
0x50501058  # push eax; push edi; call esi 
0x5050b361  # push eax; pop ecx; inc edi; push edi; mov word [esi+0x2E], ax; call ebx 
0x50531774  # push eax; pop ecx; pop ecx; push [esi+0x04]; call edi 
0x5053d731  # push eax; pop ebx; pop edi; pop esi; leave; ret 
0x50546ae4  # push eax; pop esi; pop ebx; pop edi; leave; retn 0x0008 
0x505263f9  # push eax; pop esi; pop ebx; ret 
0x50526517  # push eax; pop esi; pop ebx; leave; ret 
0x50535ff0  # push eax; pop esi; pop ebp; ret 
0x5053895c  # push eax; pop esi; pop edi; pop ebx; leave; ret 
0x50546cd7  # push eax; pop esi; leave; retn 0x0004 
0x505265da  # push eax; pop esi; inc [0x5055D448]; ret 
0x50535c49  # push eax; pop edi; pop edx; push ebx; push eax; ret 
0x505092ce  # push eax; pop edi; pop esi; pop ebx; leave; retn 0x0010 
0x505010a8  # push eax; pop edi; pop esi; retn 0x0004 
0x50501111  # push eax; pop edi; pop esi; ret 
0x505219ea  # push eax; pop edi; pop esi; leave; ret 
0x505375d0  # push eax; pop edi; mov eax, esi; pop esi; ret 
0x5051e2db  # push eax; push 0x40000000; push [esp+0x20]; call [0x5054A0A8] 
0x505480af  # push eax; push 0x80000000; call [0x5054A004] 
0x50547ebc  # push eax; push 0x80000000; call esi; push [ebp-0x54]; mov esi, eax; call edi 
0x50547ebc  # push eax; push 0x80000000; call esi 
0x50539d94  # push eax; push 0x00000100; push ebx; call [0x5054A200] 
0x5050fac4  # push eax; push 0x00000200; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x50510394  # push eax; push 0x00000200; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call edi 
0x5050123d  # push eax; push 0x00001A00; call [0x5054A034] 
0x5050722e  # push eax; push 0x00014000; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x505071d7  # push eax; push 0x00024000; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x5054678f  # push eax; push 0x00008000; call esi; push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x50541987  # push eax; push 0x00001004; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x5053b51a  # push eax; push 0x00000105; call edi 
0x5050111a  # push eax; push 0x5055520C; call [0x5054A18C] 
0x5050c4e2  # push eax; push 0x5054AC30; push edi; call ebx 
0x505037e7  # push eax; push 0x5055C93C; call [0x5054A18C] 
0x50547e6e  # push eax; push 0x000F003F; push 0x00000000; push 0x5054ABA8; push ebx; call esi 
0x50504915  # push eax; push 0x5054A364; lea eax, [ebp+0x48]; push eax; call [0x5054A03C] 
0x5050a9ae  # push eax; push 0x5054AB70; push ebx; call [0x5054A260] 
0x5052f5b4  # push eax; push 0x5052F273; push edi; push edi; call [0x5054A06C] 
0x50531ce0  # push eax; push 0x5055D480; call [0x5054A19C] 
0x505466e3  # push eax; push 0x5055E080; call [0x5054A15C] 
0x50546677  # push eax; push 0x50552188; push [0x5055E078]; call esi 
0x50542968  # push eax; push 0x5055208C; push edi; call esi 
0x5050f63a  # push eax; push 0x5054AC98; push [ebp-0x7C]; call [0x5054A260] 
0x5050f61b  # push eax; push 0x5054AC9C; push esi; call [0x5054A260] 
0x505112da  # push eax; push 0x50555CA4; call [0x5054A18C] 
0x5050b858  # push eax; push 0x5054ABA4; push ecx; mov [esi+0x0C], ecx; call edi 
0x505463ac  # push eax; push 0x505523A8; push eax; call esi 
0x5050b81c  # push eax; push 0x5054ABAC; push [esi+0x08]; call [0x5054A03C] 
0x50506668  # push eax; push 0x5054A5B0; push eax; call esi 
0x50546f73  # push eax; push 0x5054A8B8; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x505467be  # push eax; push 0x505523BC; push eax; call esi 
0x5053d786  # push eax; push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50506629  # push eax; push 0x5054A5CC; call ebx; push 0x5054A5C0; mov [0x5055C9F0], eax; call ebx 
0x50506629  # push eax; push 0x5054A5CC; call ebx 
0x50538f49  # push eax; push 0x50550FE0; call [0x5054A1A4] 
0x5052f65d  # push eax; push 0x5052F3E0; push edi; push edi; call [0x5054A06C] 
0x5054650f  # push eax; push 0x505522E4; push [0x5055E078]; call esi 
0x5051e505  # push eax; push 0x000003E8; push ebx; push [ebp-0x10]; push [ebp-0x04]; call [0x5054A114] 
0x505377b7  # push eax; push 0x50550EF0; push edi; call esi 
0x50506436  # push eax; push 0x0000FFFF; push eax; call [0x5054A074] 
0x505064a0  # push eax; push 0x00000000; push 0x5055C970; call [0x5054A18C]; ret 
0x505064a0  # push eax; push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x50538b15  # push eax; push 0x00000000; mov ebx, eax; call [0x5054A1A8] 
0x50538539  # push eax; push 0x00000000; push [0x5055D69C]; call edi 
0x50548450  # push eax; push 0x00000000; push [ebp-0x78]; call [0x5054A018] 
0x505436a4  # push eax; push 0x00000001; push eax; push edi; push edi; call [0x5054A16C] 
0x5052f287  # push eax; push 0x00000001; push eax; lea edi, [esp+0x20]; call [0x5054A110] 
0x50542744  # push eax; push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x5054A178] 
0x50547e91  # push eax; push 0x00000001; lea eax, [ebp+0x30]; push eax; push [ebp-0x54]; call [0x5054A00C] 
0x50548625  # push eax; push 0x00000001; lea eax, [ebp-0x68]; push eax; push [ebp-0x6C]; call [0x5054A00C] 
0x50507c95  # push eax; push 0x00000004; lea eax, [ebx+edi*8+0x0000389C]; push eax; call [0x5055C9A4] 
0x50501f66  # push eax; push 0x0000000A; call [0x5054A048] 
0x50507310  # push eax; push 0x0000000B; push esi; mov [ebp-0x0080], 0x00000200; call [0x5055CA30] 
0x50546951  # push eax; push 0x00000016; push [0x5055E07C]; call esi 
0x50508385  # push eax; push 0x0000002C; pop esi; je 0x50508395; push [ebp+0x10]; call ebx 
0x50510ffe  # push eax; push 0x00000040; call [0x5054A100] 
0x5050ef27  # push eax; push 0x00000040; push [ebp+0x0C]; push [ebp-0x04]; call [0x5054A0D0] 
0x5050eeeb  # push eax; push 0x00000042; mov [ebp+0x0C], eax; call [0x5054A194] 
0x5051221a  # push eax; push 0x00000042; call [0x5054A194] 
0x505081e7  # push eax; push 0x00000053; push [ebp+0x0C]; call [0x5055C9A4] 
0x505015b9  # push eax; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x505010d9  # push eax; push 0xFFFFFFFF; push 0x50555210; call esi 
0x505078ac  # push eax; push 0xFFFFFFFF; push [ebp+0x0C]; push esi; push esi; call edi 
0x5053253f  # push eax; insb; and eax, 0x458B5053; or byte [esi+0x5F], bl; leave; ret 
0x50509b28  # push eax; je 0x50509B34; push [ebp+0x10]; call esi 
0x50548416  # push eax; je 0x50548430; push 0x80000001; call esi 
0x5050396f  # push eax; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x5050ca55  # push eax; je 0x5050CA77; push 0x00000200; push [eax]; push edi; call ebx 
0x5050af68  # push eax; je 0x5050AF90; mov eax, 0x505556D0; push [eax]; push ebx; call [0x5054A0B8] 
0x5050d852  # push eax; je 0x5050D87B; mov eax, 0x505556E8; push [ebp-0x7C]; push [eax]; call edi 
0x50506807  # push eax; je 0x5050683B; push 0x5054A440; push [0x5055C9F0]; call esi 
0x5053941a  # push eax; je 0x50539453; test esi, esi; je 0x5053943B; push esi; call [0x5054A0D4] 
0x50511051  # push eax; je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x50508b5c  # push eax; je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x5053237c  # push eax; jne 0x50532381; rep ret 
0x50537937  # push eax; jbe 0x50537959; push esi; call [0x5054A048] 
0x50537ffa  # push eax; jl 0x50537FBB; pop edi; pop esi; ret 
0x50535f8b  # push eax; jl 0x50535F5C; pop edi; xor eax, eax; pop esi; ret 
0x50538c1e  # push eax; jl 0x50538C07; pop esi; pop ebx; ret 
0x5050e81b  # push eax; add edi, 0x00000314; push edi; call [0x5054A04C] 
0x5050d715  # push eax; add edi, 0x00000414; push edi; call [0x5054A038] 
0x50538551  # push eax; and [0x5055D69C], 0x00000000; ret 
0x50546342  # push eax; cmp [0x5055E078], 0x00000000; jne 0x505466E4; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x505064d5  # push eax; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x5050ad10  # push eax; cmp [ebp+0x10], 0x04; jnl 0x5050AD37; call [0x5054A188] 
0x5050efba  # push eax; cmp [ebp-0x14], 0x04; jnl 0x5050EFE5; call [0x5054A188] 
0x5052f380  # push eax; cmp [esi+0x00001024], 0x00000000; je 0x5052F39F; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x50547d4d  # push eax; add esp, 0x14; push 0x00000010; call [0x5054A270] 
0x50538507  # push eax; add esi, 0x10; push 0x00008000; push 0x00000000; push [esi-0x04]; call [0x5054A1DC] 
0x505470b2  # push eax; or esi, 0xFFFFFFFF; cmp ecx, esi; jne 0x505470E7; push 0x0000276D; call [0x5055DF88] 
0x505472b1  # push eax; and eax, 0xFFFFFFFC; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x5053ad5b  # push eax; and esi, 0x1F; shl esi, 0x06; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x5054A0E4] 
0x5053837e  # push eax; cmp eax, 0x01; jne 0x50538409; cmp edi, ebx; jne 0x5053839B; call esi 
0x505466ee  # push eax; cmp eax, 0x01; jl 0x505466E4; cmp [0x50556FF8], 0xFFFFFFFF; jne 0x50546708; call [0x5054A184] 
0x50546ad3  # push eax; cmp eax, 0x01; jl 0x50546AC9; push [ebp+0x0C]; push [ebp+0x08]; call [0x5055DFC0] 
0x5053783f  # push eax; cmp eax, 0xFFFFFFFF; je 0x50537915; push [0x5055D548]; push eax; call esi 
0x50501196  # push eax; cmp eax, 0xFFFFFFFF; je 0x505011A4; push eax; call [0x5054A030]; ret 
0x50501196  # push eax; cmp eax, 0xFFFFFFFF; je 0x505011A4; push eax; call [0x5054A030] 
0x505011c7  # push eax; cmp eax, 0xFFFFFFFF; je 0x505011D5; push esi; push eax; call [0x5054A02C] 
0x5053777c  # push eax; cmp eax, 0xFFFFFFFF; je 0x5053778B; push 0x00000000; push eax; call [0x5054A02C] 
0x5053745d  # push eax; cmp eax, 0xFFFFFFFF; je 0x50537471; push eax; call [0x5054A158] 
0x5053732b  # push eax; cmp eax, 0xFFFFFFFF; je 0x50537348; push eax; push [0x50555FB4]; call esi 
0x50547591  # push eax; cmp eax, 0xFFFFFFFF; jne 0x5054759A; xor eax, eax; ret 
0x5053b1a3  # push eax; cmp eax, 0xFFFFFFFF; jne 0x5053B1DD; call [0x5054A0E4] 
0x50539486  # push eax; cmp esi, 0xFFFFFFFE; jne 0x505394AA; mov [0x5055DB1C], 0x00000001; call [0x5054A1F4] 
0x505010f8  # push eax; cmp edi, 0xFFFFFFFF; je 0x50501112; push edi; call [0x5054A158] 
0x505065ff  # push eax; test eax, eax; je 0x50506845; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x50546b2c  # push eax; test eax, eax; je 0x50546B35; call eax 
0x5053ee4a  # push eax; test eax, eax; je 0x5053EE54; push 0x00000000; call eax; ret 
0x5053ee4a  # push eax; test eax, eax; je 0x5053EE54; push 0x00000000; call eax 
0x50546cae  # push eax; test eax, eax; je 0x50546CB8; push 0x00000001; push esi; call eax 
0x50537ac3  # push eax; test eax, eax; je 0x50537ACD; push [ebp+0x08]; call eax 
0x50546abe  # push eax; test eax, eax; je 0x50546AC9; lea ecx, [ebp-0x08]; push ecx; call eax 
0x50506be4  # push eax; test eax, eax; je 0x50506BF0; push eax; call ebx 
0x50506986  # push eax; test eax, eax; je 0x50506993; push eax; call ebx 
0x5053736e  # push eax; test eax, eax; je 0x5053737B; push [ebp+0x08]; call eax 
0x5050f8e6  # push eax; test eax, eax; je 0x5050F8F9; push esi; call [0x5054A060] 
0x50507331  # push eax; test eax, eax; je 0x50507349; push esi; push [edi+0x000037F4]; call [0x5055CA10] 
0x50506495  # push eax; test eax, eax; je 0x505064AE; push eax; call [0x5054A078] 
0x505429c3  # push eax; test eax, eax; je 0x505429DC; push 0x50552034; push edi; call esi 
0x5050efa2  # push eax; test eax, eax; je 0x5050EFBB; lea eax, [ebp-0x44]; push eax; call [0x5054A268] 
0x5050acf8  # push eax; test eax, eax; je 0x5050AD11; lea eax, [ebp-0x38]; push eax; call [0x5054A268] 
0x50501f4e  # push eax; test eax, eax; je 0x50501F67; lea eax, [ebp-0x24]; push eax; call [0x5054A268] 
0x5053ee3a  # push eax; test eax, eax; je 0x5053EE54; push 0x50551648; push eax; call [0x5054A088] 
0x50537ab3  # push eax; test eax, eax; je 0x50537ACD; push 0x50550EFC; push eax; call [0x5054A088] 
0x5054845b  # push eax; test eax, eax; je 0x50548437; push [ebp-0x78]; mov ebx, [0x5054A008]; call ebx 
0x50546c4e  # push eax; test eax, eax; je 0x50546C38; push 0x0000276D; call eax 
0x50506447  # push eax; test eax, eax; jne 0x5050644C; ret 
0x505384d5  # push eax; test eax, eax; jne 0x505384DC; pop ebp; ret 
0x505474ea  # push eax; test eax, eax; jne 0x505474F2; retn 0x0004 
0x50546b3e  # push eax; test eax, eax; jne 0x50546B46; retn 0x000C 
0x50547517  # push eax; test eax, eax; jne 0x50547520; pop ebp; retn 0x0008 
0x5051e2c0  # push eax; test eax, eax; jne 0x5051E2CA; or eax, 0xFFFFFFFF; leave; ret 
0x50546d1d  # push eax; test eax, eax; jne 0x50546D28; or eax, 0xFFFFFFFF; retn 0x000C 
0x5054756f  # push eax; test eax, eax; jne 0x5054757A; jmp [0x5054A028] 
0x50547580  # push eax; test eax, eax; jne 0x5054758B; jmp [0x5054A0E4] 
0x50546f9d  # push eax; test eax, eax; jne 0x50546FA9; or eax, 0xFFFFFFFF; pop ebp; retn 0x0008 
0x50546bba  # push eax; test eax, eax; jne 0x50546BC6; or eax, 0xFFFFFFFF; pop ebp; retn 0x000C 
0x50547037  # push eax; test eax, eax; jne 0x50547043; or eax, 0xFFFFFFFF; pop ebp; retn 0x0010 
0x50546d6d  # push eax; test eax, eax; jne 0x50546D79; or eax, 0xFFFFFFFF; pop ebp; retn 0x0014 
0x505476a6  # push eax; test eax, eax; jne 0x505476B2; or eax, 0xFFFFFFFF; pop ebp; retn 0x0024 
0x5053a69a  # push eax; test eax, eax; jne 0x5053A6A9; call [0x5054A0E4] 
0x5053c27b  # push eax; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x5051131e  # push eax; test eax, eax; jne 0x5051133A; push 0x00000064; call [0x5054A048] 
0x5054271e  # push eax; test eax, eax; jne 0x5054278A; cmp [0x50556CC0], 0x02; jne 0x50542706; call [0x5054A0E4] 
0x50510533  # push eax; test eax, eax; jne 0x50510511; cmp [ebp-0x1C], 0x04; jnl 0x50510562; call [0x5054A188] 
0x50546732  # push eax; test eax, eax; jnl 0x5054673B; or eax, 0xFFFFFFFF; ret 
0x50503dc1  # push eax; test eax, eax; jnl 0x50503DCE; push ebx; push esi; call [0x5054A18C] 
0x50501125  # push eax; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020]; ret 
0x50501125  # push eax; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020] 
0x50501146  # push eax; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024]; ret 
0x50501146  # push eax; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024] 
0x505112e5  # push eax; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020]; ret 
0x505112e5  # push eax; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020] 
0x5051134f  # push eax; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024]; ret 
0x5051134f  # push eax; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024] 
0x5050397a  # push eax; test eax, eax; jle 0x5050398D; push 0x5054A300; push ebx; call edi 
0x5050ff9a  # push eax; test ebx, ebx; je 0x5050FFAE; push ebx; call esi 
0x505072a8  # push eax; test ebx, ebx; jne 0x505072C1; push 0x00000000; call esi 
0x50510796  # push eax; test esi, esi; je 0x505107A7; push esi; call edi 
0x5051c87c  # push eax; mov byte [ecx+0x03], al; ret 
0x50527584  # push eax; mov byte [esi+0x0D], cl; mov ecx, [edi]; push edi; call [ecx+0x08] 
0x50509786  # push eax; mov [ecx], eax; ret 
0x50512226  # push eax; mov [ecx], eax; call [0x5054A0DC] 
0x50538993  # push eax; mov [eax], ecx; xor eax, eax; pop esi; pop ebp; ret 
0x5050141f  # push eax; mov [eax+ebx*4], esi; mov [esi+0x04], ebx; mov [esi], edi; call [0x5054A044] 
0x50537829  # push eax; mov [0x5055D54C], esi; mov [0x5055D550], eax; call [0x5054A184] 
0x50508e8c  # push eax; mov [0x5055CA40], edi; pop edi; pop esi; ret 
0x50508017  # push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x505103eb  # push eax; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x50510414; call [0x5054A0E4] 
0x5050fbd5  # push eax; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5050FC2A; call [0x5054A0E4] 
0x50503418  # push eax; mov [ebp-0x38], eax; mov [ebp-0x30], ebx; call [0x5054A18C] 
0x50547298  # push eax; mov [ebp-0x18], eax; cmp [ebp-0x14], 0x00000000; je 0x505471AD; push [0x50556FF8]; call [0x5054A030] 
0x5050713f  # push eax; mov [ebp-0x18], eax; lea eax, [ebp-0x18]; push eax; mov [ebp-0x14], ebx; call [0x5055CA34] 
0x5054728a  # push eax; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x505070f9  # push eax; mov [ebp-0x10], eax; cmp eax, esi; jne 0x50507112; push ebx; call [0x5054A060] 
0x50540347  # push eax; mov [ebp-0x10], eax; test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x5054225a  # push eax; mov [ebp-0x08], eax; cmp eax, edi; jne 0x50542275; call [0x5054A0E4] 
0x5052f25d  # push eax; mov [ebp-0x08], eax; lea eax, [ebp-0x08]; push 0x00000004; push eax; call [ebp+0x08] 
0x5050ef35  # push eax; mov [ebp-0x04], eax; cmp eax, ebx; je 0x5050F08E; push eax; call [0x5054A0DC] 
0x5050eef6  # push eax; mov [ebp-0x04], eax; cmp eax, ebx; je 0x5050F085; push eax; call [0x5054A0DC] 
0x5052f249  # push eax; mov [ebp-0x04], eax; lea eax, [ebp-0x04]; push 0x00000004; push eax; call [ebp+0x08] 
0x5051108c  # push eax; mov [esi+0x04], eax; cmp [esi], 0x00000000; jne 0x505110A5; push esi; call [0x5054A070] 
0x50517534  # push eax; mov [edi+0x4C], eax; call [eax] 
0x50517541  # push eax; mov [edi+0x50], eax; call [edx+0x08] 
0x5053943f  # push eax; mov [edi+0x68], eax; mov esi, [0x50556660]; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x505180ad  # push eax; mov [edi+0x78], eax; call [eax+0x04] 
0x5052dc6e  # push eax; mov [eax+0x50], ecx; call [eax+0x48] 
0x50521915  # push eax; mov [eax+0x58], ecx; mov [eax+0x54], ecx; ret 
0x5052dcf4  # push eax; mov [eax+0x60], ecx; call [eax+0x48] 
0x50507146  # push eax; mov [ebp-0x14], ebx; call [0x5055CA34] 
0x50546339  # push eax; mov [ebp-0x2C], esi; call [0x5054A054] 
0x505065f6  # push eax; mov [ebp-0x20], esi; call [0x5054A054] 
0x50539448  # push eax; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x50503445  # push eax; mov [ebp-0x2C], edi; call [0x5054A054] 
0x505076b7  # push eax; mov [ebp-0x1C], edi; mov [ebp-0x20], 0x00000004; mov [ebp-0x2C], esi; call [0x5055C9A0] 
0x505467f9  # push eax; mov [ebp-0x1C], edi; call ebx 
0x50538f1d  # push eax; mov [ebp-0x00000328], eax; mov eax, [0x50555D04]; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50538f28  # push eax; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50507165  # push eax; mov [edi+0x000037F4], eax; push ebx; call [0x5054A098] 
0x5050ac33  # push eax; mov [esi+0x000000D0], ebx; mov [esi+0x00000AA8], ebx; mov byte [esi+0x000006A0], bl; call [0x5054A04C] 
0x5050688c  # push eax; mov [ebp-0x00000098], edi; call [0x5054A054] 
0x505092a5  # push eax; mov edi, edi; call [edi+0x6A] 
0x505265f8  # push eax; mov al, byte [eax+0x5055CF38]; inc [0x5055D3E8]; movzx eax, al; ret 
0x5053c325  # push eax; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x5054A154] 
0x5053bac4  # push eax; mov eax, [esi]; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x5054A218] 
0x5053bdea  # push eax; mov eax, [esi]; push [edi+eax]; call [0x5054A0E8] 
0x50540140  # push eax; mov eax, [edi]; push [esi+eax]; call [0x5054A0C0] 
0x50508405  # push eax; mov ecx, [edi]; push esi; mov [ecx+0x14], eax; call ebx 
0x50508421  # push eax; mov ecx, [edi]; push esi; mov [ecx+0x18], eax; call ebx 
0x5050843d  # push eax; mov ecx, [edi]; push esi; mov [ecx+0x1C], eax; call ebx 
0x50508459  # push eax; mov ecx, [edi]; push esi; mov [ecx+0x20], eax; call ebx 
0x505374b5  # push eax; mov ebx, [0x5054A088]; call ebx 
0x5053731a  # push eax; mov esi, [0x5054A030]; call esi 
0x505068a5  # push eax; mov edi, [0x5054A094]; cmp eax, esi; je 0x505068B9; push eax; call edi 
0x5051fa33  # push eax; mov eax, [ebp+0x08]; push eax; call [eax+0x08] 
0x50501044  # push eax; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50532543  # push eax; mov eax, [ebp+0x08]; pop esi; pop edi; leave; ret 
0x5051e3e4  # push eax; mov eax, [ebp+0x08]; push 0x00000000; push [eax]; call [0x5054A0EC] 
0x50546b95  # push eax; mov eax, [ebp+0x08]; and eax, 0xFFFFFFFB; push eax; call [0x5055E114] 
0x50506a42  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x10], esi; call [0x5054A03C] 
0x50506c9f  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x10], esi; call [0x5054A040] 
0x50506a80  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x14], esi; call [0x5054A03C] 
0x50506cdd  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x14], esi; call [0x5054A040] 
0x50506abe  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x18], esi; call [0x5054A03C] 
0x50506d1b  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x18], esi; call [0x5054A040] 
0x50506afc  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x1C], esi; call [0x5054A03C] 
0x50506d59  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x1C], esi; call [0x5054A040] 
0x50506b3a  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x20], esi; call [0x5054A03C] 
0x50506d97  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x20], esi; call [0x5054A040] 
0x50506b76  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x24], esi; call [0x5054A03C] 
0x50506dd3  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push esi; mov [eax+0x24], esi; call [0x5054A040] 
0x5053a952  # push eax; mov eax, [ebp+0x0C]; mov eax, [eax]; push [eax+ebx]; call [0x5054A208] 
0x50508321  # push eax; mov eax, [ebp-0x04]; mov eax, [eax+0x0C]; add eax, 0x20; push eax; call edi 
0x5052e441  # push eax; mov eax, [esi+0x0C]; push [esi+0x4C]; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052e162  # push eax; mov eax, [edi+0x0C]; push [edi+0x4C]; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x50512222  # push eax; mov ecx, [ebp+0x10]; push eax; mov [ecx], eax; call [0x5054A0DC] 
0x50538908  # push eax; mov esi, [ebp-0x04]; xor esi, [ebp-0x08]; call [0x5054A138]; xor esi, eax; call [0x5054A044] 
0x50538908  # push eax; mov esi, [ebp-0x04]; xor esi, [ebp-0x08]; call [0x5054A138] 
0x50516b87  # push eax; mov eax, [eax+0x000000DC]; ret 
0x5053bc52  # push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; mov byte [ebp-0x0C], 0x0D; push [edi+eax]; call [0x5054A0E8] 
0x5053bbfd  # push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; push [edi+eax]; call [0x5054A0E8] 
0x5053bf8f  # push eax; mov eax, ecx; push eax; push esi; push 0x0000FDE9; call [0x5054A190] 
0x5050118d  # push eax; mov eax, esi; pop esi; ret 
0x5051e3f1  # push eax; mov edx, eax; mov eax, [ebp-0x08]; leave; ret 
0x5052f431  # push eax; mov ebx, eax; cmp ebx, ebp; jne 0x5052F443; call [0x5054A0E4] 
0x5050f8d9  # push eax; mov ebx, eax; cmp ebx, 0xFFFFFFFF; jne 0x5050F8F9; call [0x5054A0E4] 
0x5052f2e1  # push eax; mov ebx, eax; test ebx, ebx; jne 0x5052F2F6; call [0x5054A0E4] 
0x5054679b  # push eax; mov ebx, eax; call [0x5054A08C]; push ebx; mov [0x5055E07C], eax; call esi 
0x5054679b  # push eax; mov ebx, eax; call [0x5054A08C] 
0x5051e491  # push eax; mov esi, eax; imul esi, esi, 0x000003E8; pop ecx; mov [ebp-0x18], esi; call edi 
0x5050f8ad  # push eax; mov esi, eax; cmp esi, 0xFFFFFFFF; jne 0x5050F8D2; call [0x5054A0E4] 
0x50513e58  # push eax; mov esi, eax; test esi, esi; jne 0x50513E71; push 0x5055CA4C; call [0x5054A154] 
0x5051e517  # push eax; mov esi, eax; call edi 
0x5054259b  # push eax; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x505425AB; call [0x5054A0E4] 
0x50547cc1  # push eax; mov edi, eax; test edi, edi; je 0x50547D8D; push edi; call esi 
0x505010e9  # push eax; mov edi, eax; call esi; push 0x5055C948; call [0x5054A154] 
0x505010e9  # push eax; mov edi, eax; call esi 
0x505325a9  # push eax; mov edi, edi; neg ecx; jmp [0x50532680+ecx*4] 
0x50532919  # push eax; mov edi, edi; neg ecx; jmp [0x505329F0+ecx*4] 
0x50504924  # push eax; lea eax, [ebp+eax+0x48]; push eax; call [0x5054A260] 
0x50509f04  # push eax; lea eax, [ebp+eax-0x44]; push eax; call esi 
0x5054834e  # push eax; lea eax, [ebp+0x24]; push eax; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x50548e55  # push eax; lea eax, [ebp+0x24]; push eax; call esi 
0x5050491a  # push eax; lea eax, [ebp+0x48]; push eax; call [0x5054A03C] 
0x505048e5  # push eax; lea eax, [ebp+0x48]; push eax; call [0x5054A050] 
0x5053aa61  # push eax; lea eax, [ebp-0x68]; push eax; call [0x5054A0C8] 
0x5050ec34  # push eax; lea eax, [ebp-0x64]; push eax; call [0x5054A0CC] 
0x5053a9fb  # push eax; lea eax, [ebp-0x60]; push eax; call [0x5054A0C8] 
0x5053a995  # push eax; lea eax, [ebp-0x58]; push eax; call [0x5054A0C8] 
0x5050eaa8  # push eax; lea eax, [ebp-0x54]; push eax; call [0x5054A04C] 
0x5054928a  # push eax; lea eax, [ebp-0x44]; push eax; call [0x5054A260] 
0x5050efb0  # push eax; lea eax, [ebp-0x44]; push eax; call [0x5054A278] 
0x50509ede  # push eax; lea eax, [ebp-0x44]; push 0x5054A358; push eax; call esi 
0x5054721d  # push eax; lea eax, [ebp-0x40]; push eax; call [0x5054A278] 
0x5054722e  # push eax; lea eax, [ebp-0x40]; push eax; call ebx 
0x50512da0  # push eax; lea eax, [ebp-0x3C]; push eax; call [0x5054A278] 
0x50548325  # push eax; lea eax, [ebp-0x3C]; push eax; call esi 
0x5050ad06  # push eax; lea eax, [ebp-0x38]; push eax; call [0x5054A278] 
0x5051e4c9  # push eax; lea eax, [ebp-0x34]; push eax; call [0x5054A278] 
0x5053a9ab  # push eax; lea eax, [ebp-0x28]; push eax; call [0x5054A0B4] 
0x50501f44  # push eax; lea eax, [ebp-0x24]; push eax; call [0x5054A264] 
0x50501f5c  # push eax; lea eax, [ebp-0x24]; push eax; call [0x5054A278]; push 0x0000000A; call [0x5054A048] 
0x50501f5c  # push eax; lea eax, [ebp-0x24]; push eax; call [0x5054A278] 
0x5052f1f5  # push eax; lea eax, [ebp-0x20]; push eax; call [0x5054A128]; push eax; call [0x5054A124] 
0x5052f1f5  # push eax; lea eax, [ebp-0x20]; push eax; call [0x5054A128] 
0x5052f1cb  # push eax; lea eax, [ebp-0x20]; push eax; call [0x5054A130]; push eax; call [0x5054A12C] 
0x5052f1cb  # push eax; lea eax, [ebp-0x20]; push eax; call [0x5054A130] 
0x5052f178  # push eax; lea eax, [ebp-0x1C]; push 0x00000010; push eax; call [ebp+0x08] 
0x5052f1f1  # push eax; lea eax, [ebp-0x18]; push eax; lea eax, [ebp-0x20]; push eax; call [0x5054A128] 
0x5052f1c7  # push eax; lea eax, [ebp-0x18]; push eax; lea eax, [ebp-0x20]; push eax; call [0x5054A130] 
0x5051365b  # push eax; lea eax, [ebp-0x10]; push eax; lea eax, [ebp-0x08]; push eax; call [0x5054A0C8] 
0x50542769  # push eax; lea eax, [ebp-0x0C]; push eax; push ecx; call [0x5054A17C] 
0x5051e255  # push eax; lea eax, [ebp-0x0C]; push eax; push ebx; push esi; call [0x5054A10C] 
0x50531844  # push eax; lea eax, [ebp-0x0C]; push eax; lea eax, [ebp-0x08]; push eax; call ebx 
0x5052f18b  # push eax; lea eax, [ebp-0x0C]; push eax; call [0x5054A11C] 
0x5052f195  # push eax; lea eax, [ebp-0x0C]; push 0x00000008; push eax; call [ebp+0x08] 
0x5052f187  # push eax; lea eax, [ebp-0x08]; push eax; lea eax, [ebp-0x0C]; push eax; call [0x5054A11C] 
0x5051365f  # push eax; lea eax, [ebp-0x08]; push eax; call [0x5054A0C8] 
0x50531848  # push eax; lea eax, [ebp-0x08]; push eax; call ebx 
0x5050d5c8  # push eax; lea eax, [esi+0x14]; push eax; call ebx 
0x5052f7e7  # push eax; lea eax, [esi+0x28]; push eax; push esi; call [esi+0x00001030] 
0x5050b9e7  # push eax; lea eax, [edi+0x01]; push eax; call [0x5054A0B8] 
0x5050d6e0  # push eax; lea eax, [edi+0x14]; push eax; call [0x5054A038] 
0x505419fe  # push eax; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x5052f28a  # push eax; lea edi, [esp+0x20]; call [0x5054A110] 
0x5050ebaf  # push eax; lea eax, [ebp-0x00000300]; push eax; call [0x5054A0C8] 
0x50548352  # push eax; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x50536974  # push eax; lea eax, [ebp-0x000002D8]; push eax; call [0x5054A1A4] 
0x50547d60  # push eax; lea eax, [ebp-0x00000284]; push eax; push edi; call [0x5054A26C] 
0x50547d40  # push eax; lea eax, [ebp-0x00000284]; push eax; call [0x5054A260] 
0x505480d4  # push eax; lea eax, [ebp-0x00000084]; push eax; push [ebp-0x00000208]; mov [ebp-0x0000020C], 0x00000100; call [0x5054A010] 
0x5050307b  # push eax; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x5050306e  # push eax; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x5054840f  # push eax; lea eax, [ebp+0x0000008C]; push eax; je 0x50548430; push 0x80000001; call esi 
0x5052e125  # push eax; lea eax, [ebp+0x00000290]; push eax; push [edi+0x08]; call [esi] 
0x50548613  # push eax; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x50533632  # push eax; lea eax, [ebp-0x00000264]; push eax; call [0x5054A0B4] 
0x505493a0  # push eax; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x5053372a  # push eax; lea eax, [ebp-0x00000244]; push eax; call [0x5054A0C8] 
0x505336a0  # push eax; lea eax, [ebp-0x0000023C]; push eax; call [0x5054A0C8] 
0x50533616  # push eax; lea eax, [ebp-0x00000234]; push eax; call [0x5054A0C8] 
0x5050d3d8  # push eax; lea eax, [ebp-0x00000424]; push 0x5054AC58; push eax; call [0x5054A260] 
0x5050eba8  # push eax; lea eax, [ebp-0x00000310]; push eax; lea eax, [ebp-0x00000300]; push eax; call [0x5054A0C8] 
0x5050ec45  # push eax; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0C4] 
0x505108d5  # push eax; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x50510886  # push eax; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A0F8] 
0x5051082d  # push eax; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x5050ec3e  # push eax; lea eax, [ebp-0x00000308]; push eax; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0C4] 
0x50503ed6  # push eax; lea eax, [ebp-0x00000204]; push eax; call [0x5054A04C] 
0x5051010e  # push eax; lea eax, [ebp-0x00000204]; push eax; call edi 
0x50513577  # push eax; lea eax, [esi+0x00000200]; push ebx; push eax; call edi 
0x5050cb9d  # push eax; lea eax, [esi+0x00000200]; test eax, eax; je 0x5050CBCA; push eax; call [0x5054A03C] 
0x5050d5d6  # push eax; lea eax, [esi+0x00000214]; push eax; call ebx 
0x50505481  # push eax; lea eax, [esi+0x00000314]; push eax; call ebx 
0x5050cbd7  # push eax; lea eax, [esi+0x00000240]; test eax, eax; je 0x5050CC04; push eax; call [0x5054A03C] 
0x5050331a  # push eax; lea eax, [esi+0x000008A0]; push eax; call [0x5054A04C] 
0x5050ca88  # push eax; lea eax, [edi+0x00000200]; push eax; call ebx 
0x5050cbca  # push eax; lea eax, [edi+0x00000400]; push eax; call [0x5054A038] 
0x5050caa3  # push eax; lea eax, [edi+0x00000240]; push eax; call ebx 
0x5050cc04  # push eax; lea eax, [edi+0x00000480]; push eax; call [0x5054A038] 
0x5053b511  # push eax; lea ebx, [ebp-0x0000010C]; mov eax, ebx; push eax; push 0x00000105; call edi 
0x505327b2  # push eax; nop; jmp [0x50532838+ecx*4] 
0x50532442  # push eax; nop; jmp [0x505324C8+ecx*4] 
0x50508402  # push eax; mov al, byte [0x0F8B5054]; push esi; mov [ecx+0x14], eax; call ebx 
0x5050841e  # push eax; mov al, byte [0x0F8B5054]; push esi; mov [ecx+0x18], eax; call ebx 
0x5050843a  # push eax; mov al, byte [0x0F8B5054]; push esi; mov [ecx+0x1C], eax; call ebx 
0x50508456  # push eax; mov al, byte [0x0F8B5054]; push esi; mov [ecx+0x20], eax; call ebx 
0x50506a3f  # push eax; mov al, byte [0x458B5054]; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506A5C; call [0x5054A03C] 
0x50506a7d  # push eax; mov al, byte [0x458B5054]; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506A9E; call [0x5054A03C] 
0x50506abb  # push eax; mov al, byte [0x458B5054]; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506AE0; call [0x5054A03C] 
0x50506af9  # push eax; mov al, byte [0x458B5054]; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506B22; call [0x5054A03C] 
0x50506b37  # push eax; mov al, byte [0x458B5054]; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506B64; call [0x5054A03C] 
0x50506b73  # push eax; mov al, byte [0x458B5054]; or al, 0x8B; add byte [esi-0x77], dl; jo 0x50506BA4; call [0x5054A03C] 
0x5053781a  # push eax; mov eax, [0x5054A158]; mov [0x5055D544], 0x505373FC; mov [0x5055D54C], esi; mov [0x5055D550], eax; call [0x5054A184] 
0x50546b27  # push eax; mov eax, [0x5055DFC4]; test eax, eax; je 0x50546B35; call eax 
0x505068b8  # push eax; mov eax, [0x5055C9F4]; cmp eax, esi; je 0x50506925; push eax; call edi 
0x505092cb  # push eax; mov byte [0x5E5F5054], al; pop ebx; leave; retn 0x0010 
0x5050667b  # push eax; mov [0x5055CA00], eax; call esi 
0x50546945  # push eax; mov [0x5055E000], eax; call esi 
0x5050668d  # push eax; mov [0x5055CA04], eax; call esi 
0x5050669f  # push eax; mov [0x5055CA08], eax; call esi 
0x505463bf  # push eax; mov [0x5055DF08], eax; call esi 
0x50546963  # push eax; mov [0x5055E008], eax; call esi 
0x505066b1  # push eax; mov [0x5055CA0C], eax; call esi 
0x505463d1  # push eax; mov [0x5055DF0C], eax; call esi 
0x50546972  # push eax; mov [0x5055E00C], eax; call esi 
0x50501073  # push eax; mov [0x50555210], eax; call [0x5054A188] 
0x505066c3  # push eax; mov [0x5055CA10], eax; call esi 
0x505463e3  # push eax; mov [0x5055DF10], eax; call esi 
0x50546981  # push eax; mov [0x5055E010], eax; call esi 
0x505066d5  # push eax; mov [0x5055CA14], eax; call esi 
0x505463f5  # push eax; mov [0x5055DF14], eax; call esi 
0x50546990  # push eax; mov [0x5055E014], eax; call esi 
0x505468b0  # push eax; mov [0x5055E114], eax; call esi 
0x505066e7  # push eax; mov [0x5055CA18], eax; call esi 
0x50546407  # push eax; mov [0x5055DF18], eax; call esi 
0x5054699f  # push eax; mov [0x5055E018], eax; call esi 
0x505066f9  # push eax; mov [0x5055CA1C], eax; call esi 
0x50546419  # push eax; mov [0x5055DF1C], eax; call esi 
0x505469ae  # push eax; mov [0x5055E01C], eax; call esi 
0x5054642b  # push eax; mov [0x5055DF20], eax; call esi 
0x505469bd  # push eax; mov [0x5055E020], eax; call esi 
0x5050671d  # push eax; mov [0x5055CA24], eax; call esi 
0x5054643d  # push eax; mov [0x5055DF24], eax; call esi 
0x505469cc  # push eax; mov [0x5055E024], eax; call esi 
0x5050672f  # push eax; mov [0x5055CA28], eax; call esi 
0x5054644f  # push eax; mov [0x5055DF28], eax; call esi 
0x505469db  # push eax; mov [0x5055E028], eax; call esi 
0x50506741  # push eax; mov [0x5055CA2C], eax; call esi 
0x50546461  # push eax; mov [0x5055DF2C], eax; call esi 
0x50546a17  # push eax; mov [0x5055E02C], eax; call esi 
0x50546473  # push eax; mov [0x5055DF30], eax; call esi 
0x50546a08  # push eax; mov [0x5055E030], eax; call esi 
0x50506771  # push eax; mov [0x5055CA34], eax; call esi 
0x50546485  # push eax; mov [0x5055DF34], eax; call esi 
0x505469f9  # push eax; mov [0x5055E034], eax; call esi 
0x50546497  # push eax; mov [0x5055DF38], eax; call esi 
0x505469ea  # push eax; mov [0x5055E038], eax; call esi 
0x505464a9  # push eax; mov [0x5055DF3C], eax; call esi 
0x505464bb  # push eax; mov [0x5055DF40], eax; call esi 
0x505464cd  # push eax; mov [0x5055DF44], eax; call esi 
0x505464df  # push eax; mov [0x5055DF48], eax; call esi 
0x505464f1  # push eax; mov [0x5055DF4C], eax; call esi 
0x50546a71  # push eax; mov [0x5055E04C], eax; call esi 
0x5053782f  # push eax; mov [0x5055D550], eax; call [0x5054A184] 
0x50546503  # push eax; mov [0x5055DF50], eax; call esi 
0x50546a80  # push eax; mov [0x5055E050], eax; call esi 
0x50527872  # push eax; mov [0x5055D454], eax; ret 
0x50546a53  # push eax; mov [0x5055E054], eax; call esi 
0x50546527  # push eax; mov [0x5055DF58], eax; call esi 
0x50546a62  # push eax; mov [0x5055E058], eax; call esi 
0x50546539  # push eax; mov [0x5055DF5C], eax; call esi 
0x50546a44  # push eax; mov [0x5055E05C], eax; call esi 
0x5054654b  # push eax; mov [0x5055DF60], eax; call esi 
0x50546a35  # push eax; mov [0x5055E060], eax; call esi 
0x5054655d  # push eax; mov [0x5055DF64], eax; call esi 
0x50546a8f  # push eax; mov [0x5055E064], eax; call esi 
0x5054656f  # push eax; mov [0x5055DF68], eax; call esi 
0x50546a26  # push eax; mov [0x5055E068], eax; call esi 
0x50546581  # push eax; mov [0x5055DF6C], eax; call esi 
0x50546aad  # push eax; mov [0x5055E06C], eax; call esi 
0x50506442  # push eax; mov [0x5055C970], eax; test eax, eax; jne 0x5050644C; ret 
0x50546593  # push eax; mov [0x5055DF70], eax; call esi 
0x50546a9e  # push eax; mov [0x5055E070], eax; call esi 
0x505465a5  # push eax; mov [0x5055DF74], eax; call esi 
0x505465b7  # push eax; mov [0x5055DF78], eax; call esi 
0x505465c9  # push eax; mov [0x5055DF7C], eax; call esi 
0x505465ed  # push eax; mov [0x5055DF80], eax; call esi 
0x505465ff  # push eax; mov [0x5055DF84], eax; call esi 
0x5053fc9f  # push eax; mov [0x5055DE88], eax; mov [0x5055DE8C], eax; mov [0x5055DE90], eax; pop ebp; ret 
0x50546611  # push eax; mov [0x5055DF88], eax; call esi 
0x5053fca4  # push eax; mov [0x5055DE8C], eax; mov [0x5055DE90], eax; pop ebp; ret 
0x50546623  # push eax; mov [0x5055DF8C], eax; call esi 
0x5053fca9  # push eax; mov [0x5055DE90], eax; pop ebp; ret 
0x50546635  # push eax; mov [0x5055DF90], eax; call esi 
0x50546647  # push eax; mov [0x5055DF94], eax; call esi 
0x50546659  # push eax; mov [0x5055DF98], eax; call esi 
0x505384d0  # push eax; mov [0x5055D69C], eax; test eax, eax; jne 0x505384DC; pop ebp; ret 
0x5054666b  # push eax; mov [0x5055DF9C], eax; call esi 
0x5054668f  # push eax; mov [0x5055DFA4], eax; call esi 
0x505466a1  # push eax; mov [0x5055DFA8], eax; call esi 
0x505466b3  # push eax; mov [0x5055DFAC], eax; call esi 
0x505465db  # push eax; mov [0x5055DFB0], eax; call esi 
0x505466c5  # push eax; mov [0x5055DFB4], eax; call esi 
0x505466d7  # push eax; mov [0x5055DFB8], eax; call esi; mov [0x5055E110], eax; push 0x5055E080; call [0x5054A15C] 
0x505466d7  # push eax; mov [0x5055DFB8], eax; call esi 
0x50546883  # push eax; mov [0x5055DFBC], eax; call esi 
0x50546847  # push eax; mov [0x5055DFC0], eax; call esi 
0x50546838  # push eax; mov [0x5055DFC4], eax; call esi 
0x50546874  # push eax; mov [0x5055DFC8], eax; call esi 
0x50546892  # push eax; mov [0x5055DFCC], eax; call esi 
0x50546856  # push eax; mov [0x5055DFD0], eax; call esi 
0x505468a1  # push eax; mov [0x5055DFD4], eax; call esi 
0x50546865  # push eax; mov [0x5055DFD8], eax; call esi 
0x505468bf  # push eax; mov [0x5055DFDC], eax; call esi 
0x505468ce  # push eax; mov [0x5055DFE0], eax; call esi 
0x5054401f  # push eax; mov [0x50556CE4], eax; ret 
0x505468dd  # push eax; mov [0x5055DFE4], eax; call esi 
0x505468ec  # push eax; mov [0x5055DFE8], eax; call esi 
0x50546928  # push eax; mov [0x5055DFEC], eax; call esi 
0x50506635  # push eax; mov [0x5055C9F0], eax; call ebx 
0x505468fb  # push eax; mov [0x5055DFF0], eax; call esi 
0x50546702  # push eax; mov [0x50556FF8], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x50546919  # push eax; mov [0x5055DFF8], eax; call esi 
0x50546936  # push eax; mov [0x5055DFFC], eax; call esi 
0x5054711a  # push eax; test al, 0x01; je 0x5054712C; push 0x00002734; call [0x5055DF88] 
0x5050b853  # push eax; mov ecx, 0x5054ABA8; push 0x5054ABA4; push ecx; mov [esi+0x0C], ecx; call edi 
0x50513572  # push eax; mov ebx, 0x5054AD00; lea eax, [esi+0x00000200]; push ebx; push eax; call edi 
0x505010b5  # push eax; mov esi, 0x5055520C; push esi; call edi 
0x50502fc0  # push eax; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x50546f78  # push eax; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x50508210  # push eax; mov edi, 0x00010001; push edi; call [0x5055CA2C] 
0x50543b59  # push eax; sar eax, 0x02; neg eax; pop esi; pop ebp; ret 
0x50541c94  # push eax; mov byte [ebp+0x09], 0x3A; mov byte [ebp+0x0A], 0x5C; mov byte [ebp+0x0B], 0x00; call [0x5054A1A0] 
0x5053781f  # push eax; mov [0x5055D544], 0x505373FC; mov [0x5055D54C], esi; mov [0x5055D550], eax; call [0x5054A184] 
0x5053665d  # push eax; mov [0x50556A90], 0x5053ECFB; mov [0x50556A94], 0x5053E3DC; mov [0x50556A98], 0x5053E33E; mov [0x50556A9C], 0x5053E2CB; ret 
0x50536667  # push eax; mov [0x50556A94], 0x5053E3DC; mov [0x50556A98], 0x5053E33E; mov [0x50556A9C], 0x5053E2CB; ret 
0x50536671  # push eax; mov [0x50556A98], 0x5053E33E; mov [0x50556A9C], 0x5053E2CB; ret 
0x5053667b  # push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x50507db6  # push eax; mov [ebp-0x34], 0x00000006; mov [ebp-0x28], esi; mov [ebp-0x20], esi; mov [ebp-0x1C], 0x00000004; call [0x5055C9DC] 
0x505492de  # push eax; mov [ebp-0x20], 0x00000094; call [0x5054A054] 
0x50531823  # push eax; mov [ebp-0x1C], 0x0000000C; mov [ebp-0x18], edi; call ebx 
0x5052f4f3  # push eax; mov [esi+0x18], 0x00000001; pop edi; leave; ret 
0x5052f3d7  # push eax; mov [esi+0x18], 0x00000001; ret 
0x50526cee  # push eax; mov [esi+0x1C], 0x00000001; mov [esi+0x00000128], eax; mov ecx, [edi]; push edi; call [ecx+0x1C] 
0x5051a2b4  # push eax; mov [edx+0x00002908], 0x505317BC; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x5051a2be  # push eax; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x5051617a  # push eax; mov [edx+0x00002980], 0x505317BC; mov [edx+0x00002990], 0x50516148; pop edi; ret 
0x50516184  # push eax; mov [edx+0x00002990], 0x50516148; pop edi; ret 
0x50538f77  # push eax; leave; ret 
0x5050523c  # push eax; rol [edx], 1; add byte [ebx+0x74C085C4], cl; adc byte [ebx+0x71FFC84D], cl; or al, 0x50; call [0x5054A050] 
0x50527869  # push eax; aam 0x55; push eax; call [0x5054A188]; mov [0x5055D454], eax; ret 
0x50527869  # push eax; aam 0x55; push eax; call [0x5054A188] 
0x50537831  # push eax; aad 0x55; push eax; call [0x5054A184] 
0x50546505  # push eax; fist word [ebp+0x50]; call esi 
0x50546a82  # push eax; loopne 0x50546ADA; push eax; call esi 
0x5053ba54  # push eax; out 0xFF, eax; push [ebx]; test byte [ecx-0x18CB17D0], 0xFF; call [esi+0x56] 
0x50547d6e  # push eax; test byte [ebp+0x18], 0x02; pop ebx; je 0x50547D81; push 0x000000FF; call [0x5054A1B4] 
0x50542133  # push eax; test byte [esi+0x04], 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x505485ad  # push eax; test bl, 0x01; je 0x50548735; push 0x80000001; call [0x5054A000] 
0x50548a46  # push eax; test bl, 0x01; je 0x50548A65; push 0x80000001; call [0x5054A004] 
0x505227dd  # push eax; idiv bh; inc [ebx-0x76007BB3]; inc edi; adc byte [ebp-0x0000837B], cl; call [eax-0x73] 
0x50503d41  # push eax; test [esi], 0x00004000; mov [edi+0x000032C0], eax; jne 0x50503DCE; push 0x5055C960; call [0x5054A15C] 
0x5051e3d0  # push eax; neg eax; sbb eax, eax; ret 
0x505265fe  # push eax; inc [0x5055D3E8]; movzx eax, al; ret 
0x5052dc4c  # push eax; call [ecx]; add esp, 0x18; pop ebp; ret 
0x5051ec71  # push eax; call [ecx] 
0x50547066  # push eax; call [0x5055E000] 
0x50511318  # push eax; call [0x5054A104]; test eax, eax; jne 0x5051133A; push 0x00000064; call [0x5054A048] 
0x50511318  # push eax; call [0x5054A104] 
0x50513e39  # push eax; call [0x5054A108] 
0x50506fba  # push eax; call [0x5055CA08] 
0x50547456  # push eax; call [0x5055E00C] 
0x5054749e  # push eax; call [0x5055E014] 
0x50546b9c  # push eax; call [0x5055E114] 
0x505075b7  # push eax; call [0x5055CA18] 
0x5052f18f  # push eax; call [0x5054A11C]; lea eax, [ebp-0x0C]; push 0x00000008; push eax; call [ebp+0x08] 
0x5052f18f  # push eax; call [0x5054A11C] 
0x5053c275  # push eax; call [0x5054A21C]; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x5053c275  # push eax; call [0x5054A21C] 
0x505474da  # push eax; call [0x5055E01C] 
0x5053601d  # push eax; call [0x5054A020]; pop ebp; ret 
0x5050112e  # push eax; call [0x5054A020]; ret 
0x5050112e  # push eax; call [0x5054A020] 
0x5052f172  # push eax; call [0x5054A120]; lea eax, [ebp-0x1C]; push 0x00000010; push eax; call [ebp+0x08] 
0x5052f172  # push eax; call [0x5054A120] 
0x50536059  # push eax; call [0x5054A024]; pop ebp; ret 
0x5050114f  # push eax; call [0x5054A024]; ret 
0x5050114f  # push eax; call [0x5054A024] 
0x5053ee34  # push eax; call [0x5054A224] 
0x50547505  # push eax; call [0x5055E024] 
0x50516bb3  # push eax; call [0x5054A028]; ret 
0x50516bb3  # push eax; call [0x5054A028] 
0x5052f1f9  # push eax; call [0x5054A128]; push eax; call [0x5054A124] 
0x5052f1f9  # push eax; call [0x5054A128] 
0x505475db  # push eax; call [0x5054A02C]; xor eax, eax; ret 
0x50501174  # push eax; call [0x5054A02C]; push esi; push 0x5055C944; call [0x5054A18C] 
0x50537784  # push eax; call [0x5054A02C]; pop ebp; ret 
0x5053742e  # push eax; call [0x5054A02C]; mov eax, esi; pop esi; ret 
0x50546747  # push eax; call [0x5054A02C]; jmp [0x5055DF84] 
0x50501174  # push eax; call [0x5054A02C] 
0x5052f1d6  # push eax; call [0x5054A12C] 
0x5054759a  # push eax; call [0x5054A030]; movzx eax, al; and eax, 0x01; ret 
0x505472ab  # push eax; call [0x5054A030]; and eax, 0xFFFFFFFC; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x5050119c  # push eax; call [0x5054A030]; ret 
0x5050119c  # push eax; call [0x5054A030] 
0x5052f1cf  # push eax; call [0x5054A130]; push eax; call [0x5054A12C] 
0x5052f1cf  # push eax; call [0x5054A130] 
0x50547537  # push eax; call [0x5055E030] 
0x5052f1ac  # push eax; call [0x5054A134] 
0x5050cbd1  # push eax; call [0x5054A038] 
0x5050715f  # push eax; call [0x5055CA38]; mov [edi+0x000037F4], eax; push ebx; call [0x5054A098] 
0x5050715f  # push eax; call [0x5055CA38] 
0x5050491e  # push eax; call [0x5054A03C]; lea eax, [ebp+eax+0x48]; push eax; call [0x5054A260] 
0x50509efe  # push eax; call [0x5054A03C]; lea eax, [ebp+eax-0x44]; push eax; call esi 
0x50503082  # push eax; call [0x5054A03C] 
0x505424fe  # push eax; call [0x5054A23C] 
0x5050c88e  # push eax; call [0x5054A040] 
0x5050c8d8  # push eax; call [0x5054A04C]; xor eax, eax; retn 0x0008 
0x50548e4f  # push eax; call [0x5054A04C]; lea eax, [ebp+0x24]; push eax; call esi 
0x50503075  # push eax; call [0x5054A04C]; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x50503075  # push eax; call [0x5054A04C] 
0x5054725a  # push eax; call [0x5054A24C]; push [0x50556FF8]; call [0x5054A030] 
0x50512dd6  # push eax; call [0x5054A24C] 
0x505048e9  # push eax; call [0x5054A050] 
0x505010f2  # push eax; call [0x5054A154]; cmp edi, 0xFFFFFFFF; je 0x50501112; push edi; call [0x5054A158] 
0x505010f2  # push eax; call [0x5054A154] 
0x505090b6  # push eax; call [0x5054A254] 
0x50537463  # push eax; call [0x5054A158] 
0x50509481  # push eax; call [0x5054A05C] 
0x50503d54  # push eax; call [0x5054A15C] 
0x5053a694  # push eax; call [0x5054A060]; test eax, eax; jne 0x5053A6A9; call [0x5054A0E4] 
0x5053a694  # push eax; call [0x5054A060] 
0x50501067  # push eax; call [0x5054A160]; call [0x5054A184]; mov [0x50555210], eax; call [0x5054A188] 
0x50501067  # push eax; call [0x5054A160]; call [0x5054A184] 
0x50501067  # push eax; call [0x5054A160] 
0x50547d47  # push eax; call [0x5054A260]; add esp, 0x14; push 0x00000010; call [0x5054A270] 
0x50504929  # push eax; call [0x5054A260] 
0x50543e95  # push eax; call [0x5054A164] 
0x50501f48  # push eax; call [0x5054A264] 
0x5050fd05  # push eax; call [0x5054A268]; lea eax, [ebp-0x48]; push eax; call [0x5054A278] 
0x5050efaa  # push eax; call [0x5054A268]; lea eax, [ebp-0x44]; push eax; call [0x5054A278] 
0x50547217  # push eax; call [0x5054A268]; lea eax, [ebp-0x40]; push eax; call [0x5054A278] 
0x50512d9a  # push eax; call [0x5054A268]; lea eax, [ebp-0x3C]; push eax; call [0x5054A278] 
0x5051e4c3  # push eax; call [0x5054A268]; lea eax, [ebp-0x34]; push eax; call [0x5054A278] 
0x50501f56  # push eax; call [0x5054A268]; lea eax, [ebp-0x24]; push eax; call [0x5054A278] 
0x50501f56  # push eax; call [0x5054A268] 
0x5054761b  # push eax; call [0x5055E068] 
0x50547657  # push eax; call [0x5055E06C] 
0x50547693  # push eax; call [0x5055E070] 
0x5050643c  # push eax; call [0x5054A074]; mov [0x5055C970], eax; test eax, eax; jne 0x5050644C; ret 
0x5050643c  # push eax; call [0x5054A074] 
0x50542718  # push eax; call [0x5054A174] 
0x5050649a  # push eax; call [0x5054A078]; push 0x00000000; push 0x5055C970; call [0x5054A18C]; ret 
0x5050649a  # push eax; call [0x5054A078]; push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x5053854b  # push eax; call [0x5054A078]; and [0x5055D69C], 0x00000000; ret 
0x505064cf  # push eax; call [0x5054A078]; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x5050649a  # push eax; call [0x5054A078] 
0x50501f60  # push eax; call [0x5054A278]; push 0x0000000A; call [0x5054A048] 
0x5050efb4  # push eax; call [0x5054A278]; cmp [ebp-0x14], 0x04; jnl 0x5050EFE5; call [0x5054A188] 
0x50501f60  # push eax; call [0x5054A278] 
0x505064f8  # push eax; call [0x5054A07C]; retn 0x0004 
0x50506540  # push eax; call [0x5054A07C]; retn 0x0008 
0x505064f8  # push eax; call [0x5054A07C] 
0x50536369  # push eax; call [0x5054A080] 
0x50506518  # push eax; call [0x5054A084]; retn 0x0004 
0x50506564  # push eax; call [0x5054A084]; retn 0x0008 
0x50506518  # push eax; call [0x5054A084] 
0x5050106d  # push eax; call [0x5054A184]; mov [0x50555210], eax; call [0x5054A188] 
0x5050106d  # push eax; call [0x5054A184] 
0x5053ee44  # push eax; call [0x5054A088]; test eax, eax; je 0x5053EE54; push 0x00000000; call eax 
0x50537abd  # push eax; call [0x5054A088]; test eax, eax; je 0x50537ACD; push [ebp+0x08]; call eax 
0x50537368  # push eax; call [0x5054A088]; test eax, eax; je 0x5053737B; push [ebp+0x08]; call eax 
0x50537368  # push eax; call [0x5054A088] 
0x5052786c  # push eax; call [0x5054A188]; mov [0x5055D454], eax; ret 
0x50501078  # push eax; call [0x5054A188] 
0x505077a3  # push eax; call [0x5055C988] 
0x50546385  # push eax; call [0x5054A08C]; push ebx; mov [0x5055E078], eax; call esi 
0x50542952  # push eax; call [0x5054A08C] 
0x505011da  # push eax; call [0x5054A18C]; push esi; call [0x5054A028]; pop esi; retn 0x0004 
0x50501180  # push eax; call [0x5054A18C]; push esi; call [0x5054A028] 
0x505010a2  # push eax; call [0x5054A18C]; pop edi; pop esi; retn 0x0004 
0x5050111f  # push eax; call [0x5054A18C]; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020] 
0x50501140  # push eax; call [0x5054A18C]; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024] 
0x505112df  # push eax; call [0x5054A18C]; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020] 
0x50511349  # push eax; call [0x5054A18C]; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024] 
0x50547c89  # push eax; call [0x5054A18C]; retn 0x0004 
0x505064a7  # push eax; call [0x5054A18C]; ret 
0x505010a2  # push eax; call [0x5054A18C] 
0x50506586  # push eax; call [0x5054A190]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50506586  # push eax; call [0x5054A190] 
0x505467d2  # push eax; call [0x5054A094] 
0x50531ce5  # push eax; call [0x5054A19C] 
0x50507788  # push eax; call [0x5055C99C] 
0x50507117  # push eax; call [0x5054A0A0] 
0x5053697b  # push eax; call [0x5054A1A4] 
0x50507567  # push eax; call [0x5055C9A4] 
0x50544019  # push eax; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544019  # push eax; call [0x5054A0A8] 
0x50538902  # push eax; call [0x5054A1AC]; mov esi, [ebp-0x04]; xor esi, [ebp-0x08]; call [0x5054A138] 
0x50536acf  # push eax; call [0x5054A1AC] 
0x5050732b  # push eax; call [0x5054A0B0] 
0x50537aad  # push eax; call [0x5054A1B0] 
0x5050ebc4  # push eax; call [0x5054A0B4] 
0x5050b9eb  # push eax; call [0x5054A0B8] 
0x50537f90  # push eax; call [0x5054A1B8] 
0x5050b5c7  # push eax; call [0x5054A0BC] 
0x50537f26  # push eax; call [0x5054A1BC] 
0x5050ec4c  # push eax; call [0x5054A0C4]; push edi; lea eax, [ebp-0x00000308]; push eax; call [0x5054A0B4] 
0x5050ec4c  # push eax; call [0x5054A0C4] 
0x50537d72  # push eax; call [0x5054A1C4] 
0x50513a63  # push eax; call [0x5054A0C8]; push esi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x50513663  # push eax; call [0x5054A0C8]; push edi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x5050ebb6  # push eax; call [0x5054A0C8]; push edi; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0B4] 
0x5050ebb6  # push eax; call [0x5054A0C8] 
0x505382a3  # push eax; call [0x5054A1C8] 
0x5050ec38  # push eax; call [0x5054A0CC] 
0x5054672c  # push eax; call [0x5054A0D4]; test eax, eax; jnl 0x5054673B; or eax, 0xFFFFFFFF; ret 
0x505015a4  # push eax; call [0x5054A0D4] 
0x5050ef02  # push eax; call [0x5054A0DC] 
0x50546be3  # push eax; call [0x5055DFDC] 
0x5050f0f4  # push eax; call [0x5054A0E0] 
0x5053892a  # push eax; call [0x5054A1E0] 
0x50546c1f  # push eax; call [0x5055DFE0] 
0x5051e3ca  # push eax; call [0x5054A0E4]; neg eax; sbb eax, eax; ret 
0x5051e3ca  # push eax; call [0x5054A0E4] 
0x50538f71  # push eax; call [0x5054A1E4]; leave; ret 
0x50538b48  # push eax; call [0x5054A1E4] 
0x50546cc9  # push eax; call [0x5055DFE4] 
0x50542254  # push eax; call [0x5054A0EC]; mov [ebp-0x08], eax; cmp eax, edi; jne 0x50542275; call [0x5054A0E4] 
0x50542595  # push eax; call [0x5054A0EC]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x505425AB; call [0x5054A0E4] 
0x5050fc32  # push eax; call [0x5054A0EC] 
0x50546d5a  # push eax; call [0x5055DFF4] 
0x5051088d  # push eax; call [0x5054A0F8] 
0x5053955b  # push eax; call [0x5054A1F8] 
0x50546da2  # push eax; call [0x5055DFF8] 
0x50546fc0  # push eax; call [0x5055DFFC] 
0x5053293f  # push eax; jmp [0x50532A40+ecx*4] 
0x5053243b  # push eax; jmp [0x50532544+ecx*4] 
0x505327ab  # push eax; jmp [0x505328B4+ecx*4] 
0x505325cf  # push eax; jmp [0x505326D0+ecx*4] 
0x5054674d  # push eax; jmp [0x5055DF84] 
0x5050af6f  # push eax; push [eax]; push ebx; call [0x5054A0B8] 
0x50509478  # push eax; push [eax]; lea eax, [ebp-0x00000104]; push eax; call [0x5054A05C] 
0x5053d750  # push eax; push [0x5055E124]; push edi; push [0x5055D69C]; call [0x5054A080] 
0x50501237  # push eax; push [0x5055C93C]; push 0x00001A00; call [0x5054A034] 
0x50503236  # push eax; push [0x5055C960]; push esi; call [0x5054A18C] 
0x50502fba  # push eax; push [0x5055C960]; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x505463b9  # push eax; push [0x5055E078]; mov [0x5055DF08], eax; call esi 
0x505463cb  # push eax; push [0x5055E078]; mov [0x5055DF0C], eax; call esi 
0x505463dd  # push eax; push [0x5055E078]; mov [0x5055DF10], eax; call esi 
0x505463ef  # push eax; push [0x5055E078]; mov [0x5055DF14], eax; call esi 
0x50546401  # push eax; push [0x5055E078]; mov [0x5055DF18], eax; call esi 
0x50546413  # push eax; push [0x5055E078]; mov [0x5055DF1C], eax; call esi 
0x50546425  # push eax; push [0x5055E078]; mov [0x5055DF20], eax; call esi 
0x50546437  # push eax; push [0x5055E078]; mov [0x5055DF24], eax; call esi 
0x50546449  # push eax; push [0x5055E078]; mov [0x5055DF28], eax; call esi 
0x5054645b  # push eax; push [0x5055E078]; mov [0x5055DF2C], eax; call esi 
0x5054646d  # push eax; push [0x5055E078]; mov [0x5055DF30], eax; call esi 
0x5054647f  # push eax; push [0x5055E078]; mov [0x5055DF34], eax; call esi 
0x50546491  # push eax; push [0x5055E078]; mov [0x5055DF38], eax; call esi 
0x505464a3  # push eax; push [0x5055E078]; mov [0x5055DF3C], eax; call esi 
0x505464b5  # push eax; push [0x5055E078]; mov [0x5055DF40], eax; call esi 
0x505464c7  # push eax; push [0x5055E078]; mov [0x5055DF44], eax; call esi 
0x505464d9  # push eax; push [0x5055E078]; mov [0x5055DF48], eax; call esi 
0x505464eb  # push eax; push [0x5055E078]; mov [0x5055DF4C], eax; call esi 
0x505464fd  # push eax; push [0x5055E078]; mov [0x5055DF50], eax; call esi 
0x50546521  # push eax; push [0x5055E078]; mov [0x5055DF58], eax; call esi 
0x50546533  # push eax; push [0x5055E078]; mov [0x5055DF5C], eax; call esi 
0x50546545  # push eax; push [0x5055E078]; mov [0x5055DF60], eax; call esi 
0x50546557  # push eax; push [0x5055E078]; mov [0x5055DF64], eax; call esi 
0x50546569  # push eax; push [0x5055E078]; mov [0x5055DF68], eax; call esi 
0x5054657b  # push eax; push [0x5055E078]; mov [0x5055DF6C], eax; call esi 
0x5054658d  # push eax; push [0x5055E078]; mov [0x5055DF70], eax; call esi 
0x5054659f  # push eax; push [0x5055E078]; mov [0x5055DF74], eax; call esi 
0x505465b1  # push eax; push [0x5055E078]; mov [0x5055DF78], eax; call esi 
0x505465c3  # push eax; push [0x5055E078]; mov [0x5055DF7C], eax; call esi 
0x505465e7  # push eax; push [0x5055E078]; mov [0x5055DF80], eax; call esi 
0x505465f9  # push eax; push [0x5055E078]; mov [0x5055DF84], eax; call esi 
0x5054661d  # push eax; push [0x5055E078]; mov [0x5055DF8C], eax; call esi 
0x5054662f  # push eax; push [0x5055E078]; mov [0x5055DF90], eax; call esi 
0x50546641  # push eax; push [0x5055E078]; mov [0x5055DF94], eax; call esi 
0x50546653  # push eax; push [0x5055E078]; mov [0x5055DF98], eax; call esi 
0x50546665  # push eax; push [0x5055E078]; mov [0x5055DF9C], eax; call esi 
0x50546689  # push eax; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x5054669b  # push eax; push [0x5055E078]; mov [0x5055DFA8], eax; call esi 
0x505466ad  # push eax; push [0x5055E078]; mov [0x5055DFAC], eax; call esi 
0x505465d5  # push eax; push [0x5055E078]; mov [0x5055DFB0], eax; call esi 
0x505466bf  # push eax; push [0x5055E078]; mov [0x5055DFB4], eax; call esi 
0x505466d1  # push eax; push [0x5055E078]; mov [0x5055DFB8], eax; call esi 
0x50546514  # push eax; push [0x5055E078]; call esi 
0x50537331  # push eax; push [0x50555FB4]; call esi; call eax 
0x50537331  # push eax; push [0x50555FB4]; call esi 
0x5050680e  # push eax; push [0x5055C9F0]; call esi; cmp eax, edi; je 0x5050683B; call eax 
0x5050680e  # push eax; push [0x5055C9F0]; call esi 
0x50506675  # push eax; push [0x5055C9F4]; mov [0x5055CA00], eax; call esi 
0x50506687  # push eax; push [0x5055C9F4]; mov [0x5055CA04], eax; call esi 
0x50506699  # push eax; push [0x5055C9F4]; mov [0x5055CA08], eax; call esi 
0x505066ab  # push eax; push [0x5055C9F4]; mov [0x5055CA0C], eax; call esi 
0x505066bd  # push eax; push [0x5055C9F4]; mov [0x5055CA10], eax; call esi 
0x505066cf  # push eax; push [0x5055C9F4]; mov [0x5055CA14], eax; call esi 
0x505066e1  # push eax; push [0x5055C9F4]; mov [0x5055CA18], eax; call esi 
0x505066f3  # push eax; push [0x5055C9F4]; mov [0x5055CA1C], eax; call esi 
0x50506705  # push eax; push [0x5055C9F4]; mov [0x5055CA20], eax; call esi 
0x50506717  # push eax; push [0x5055C9F4]; mov [0x5055CA24], eax; call esi 
0x50506729  # push eax; push [0x5055C9F4]; mov [0x5055CA28], eax; call esi 
0x5050673b  # push eax; push [0x5055C9F4]; mov [0x5055CA2C], eax; call esi 
0x5050676b  # push eax; push [0x5055C9F4]; mov [0x5055CA34], eax; call esi 
0x5050675e  # push eax; push [0x5055C9F4]; call esi 
0x505475d5  # push eax; push [0x50556FF8]; call [0x5054A02C]; xor eax, eax; ret 
0x50546c6a  # push eax; push [0x50556FF8]; call [0x5054A02C] 
0x50547260  # push eax; push [0x50556FF8]; call [0x5054A030] 
0x5053e051  # push eax; push [esi]; push ebx; call [0x5054A0E8] 
0x5053851a  # push eax; push [esi]; push 0x00000000; push [0x5055D69C]; call edi 
0x5052f2d9  # push eax; push [esi]; call [0x5054A0C0] 
0x505122af  # push eax; push [esi]; call [0x5054A0E0] 
0x5051f9dd  # push eax; call [eax+0x08] 
0x50516dcb  # push eax; call [eax+0x0C] 
0x50514b83  # push eax; call [eax+0x10] 
0x5052dc71  # push eax; call [eax+0x48]; pop ecx; pop ecx; pop ebp; ret 
0x5052dc71  # push eax; call [eax+0x48] 
0x5051806f  # push eax; call [ecx+0x04]; pop ecx; mov eax, [ebx+0x40]; mov [edi+0x58], eax; call [eax] 
0x5051818d  # push eax; call [ecx+0x04]; pop ecx; mov eax, [ebx+0x44]; mov [edi+0x5C], eax; call [eax] 
0x50518089  # push eax; call [ecx+0x04]; pop ecx; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x505181a7  # push eax; call [ecx+0x04]; pop ecx; mov eax, [ebx+0x4C]; mov [edi+0x6C], eax; call [eax] 
0x5052dc84  # push eax; call [ecx+0x04]; add esp, 0x0C; pop ebp; ret 
0x5052ef44  # push eax; call [ecx+0x04]; add esp, 0x0C; pop esi; ret 
0x50515d62  # push eax; call [ecx+0x04] 
0x505180a6  # push eax; call [ecx+0x08]; pop ecx; mov eax, [ebx+0x50]; mov [edi+0x78], eax; call [eax+0x04] 
0x5052daa4  # push eax; call [ecx+0x08]; add esp, 0x0C; pop ebp; ret 
0x5051506e  # push eax; call [ecx+0x08]; add esp, 0x0C; ret 
0x50531723  # push eax; call [ecx+0x08]; add esp, 0x10; pop ebp; ret 
0x5051506e  # push eax; call [ecx+0x08] 
0x5052dd06  # push eax; call [ecx+0x0C]; pop ecx; pop ecx; ret 
0x5053173e  # push eax; call [ecx+0x0C]; add esp, 0x0C; ret 
0x5052d9a7  # push eax; call [ecx+0x0C] 
0x5052ef63  # push eax; call [ecx+0x10]; pop ecx; pop ecx; pop esi; ret 
0x5052dd32  # push eax; call [ecx+0x10]; pop ecx; pop ecx; ret 
0x5052da25  # push eax; call [ecx+0x10] 
0x5052db1f  # push eax; call [ecx+0x14]; pop ecx; pop ecx; ret 
0x505181c4  # push eax; call [ecx+0x14]; pop ecx; mov eax, [ebx+0x54]; mov [edi+0x7C], eax; call [eax+0x10] 
0x505181c4  # push eax; call [ecx+0x14] 
0x5052db2f  # push eax; call [ecx+0x18]; pop ecx; ret 
0x5052db2f  # push eax; call [ecx+0x18] 
0x50515d34  # push eax; call [ecx+0x1C]; pop ecx; pop ecx; mov [esi+0x000028F0], edi; ret 
0x5052f107  # push eax; call [ecx+0x1C]; push 0xFFFFFFFF; push edi; call [edi+0x48] 
0x50515d34  # push eax; call [ecx+0x1C] 
0x5051c4b4  # push eax; call [ecx+0x20] 
0x50517fb8  # push eax; call [ecx+0x28] 
0x5053170e  # push eax; call [edx+0x04]; add esp, 0x0C; pop ebp; ret 
0x5053170e  # push eax; call [edx+0x04] 
0x50517544  # push eax; call [edx+0x08] 
0x5052f19b  # push eax; call [ebp+0x08]; pop ecx; pop ecx; leave; ret 
0x5052f252  # push eax; call [ebp+0x08]; pop ecx; pop ecx; call [0x5054A138] 
0x505360f1  # push eax; call [ebp+0x08]; add esp, 0x10; pop edi; leave; ret 
0x5052f17e  # push eax; call [ebp+0x08] 
0x505493da  # push eax; call [ebp-0x78] 
0x50515f4b  # push eax; call [esi+0x08] 
0x5053d6cb  # push eax; push [eax+0x10]; push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x5051e3ba  # push eax; push [esp+0x14]; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC]; call [0x5054A0E4] 
0x5051e3ba  # push eax; push [esp+0x14]; mov eax, [esp+0x10]; push [eax]; call [0x5054A0EC] 
0x50537a5c  # push eax; push [ebp+0x08]; call [0x5054A1B0] 
0x5052438b  # push eax; push [ebp+0x08]; call [edi+0x04] 
0x505466f9  # push eax; push [ebp+0x0B]; call [0x5054A184] 
0x50515141  # push eax; push [ebp+0x0C]; mov eax, [ebp+0x08]; shr ecx, 0x08; mov byte [ebp-0x02], cl; call [eax+0x04] 
0x5050c884  # push eax; push [ebp+0x0C]; call [0x5054A038]; push eax; call [0x5054A040] 
0x505012d2  # push eax; push [ebp+0x0C]; call [0x5054A038] 
0x5051433b  # push eax; push [ebp+0x0C]; call [0x5054A03C]; pop ebp; retn 0x000C 
0x50509599  # push eax; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7ff  # push eax; push [ebp+0x0C]; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x5050c7ff  # push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x50503902  # push eax; push [ebp+0x0C]; call [0x5054A05C] 
0x50524880  # push eax; push [ebp+0x0C]; call [ebp+0x10] 
0x50541a19  # push eax; push [ebp+0x0C]; call esi 
0x5051432e  # push eax; push [ebp+0x10]; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x5051e2af  # push eax; push [ebp+0x10]; mov eax, [ebp+0x08]; push [ebp+0x0C]; push [eax]; call [0x5054A0C0] 
0x5051e35c  # push eax; push [ebp+0x10]; mov eax, [ebp+0x08]; push [ebp+0x0C]; push [eax]; call [0x5054A0E8] 
0x50541439  # push eax; push [ebp+0x18]; call esi 
0x5054376e  # push eax; push [ebp+0x1C]; call [0x5054A1EC] 
0x50539e35  # push eax; push [ebp+0x20]; call esi 
0x505130b8  # push eax; push [ebp-0x0080]; call [0x5054A04C] 
0x5050f63f  # push eax; push [ebp-0x7C]; call [0x5054A260] 
0x5050d859  # push eax; push [ebp-0x7C]; push [eax]; call edi 
0x505484af  # push eax; push [ebp-0x78]; mov esi, eax; call ebx 
0x5054843a  # push eax; push [ebp-0x78]; call [0x5054A014] 
0x5050f5d8  # push eax; push [ebp-0x78]; call edi 
0x50548782  # push eax; push [ebp-0x6C]; test eax, eax; je 0x5054879E; call [0x5054A008] 
0x5054862b  # push eax; push [ebp-0x6C]; call [0x5054A00C] 
0x50548a91  # push eax; push [ebp-0x64]; mov [ebp-0x68], edi; mov byte [ebp+0x000000A0], 0x00; call ebx 
0x50547fdd  # push eax; push [ebp-0x54]; lea eax, [ebp-0x44]; push eax; push esi; call edi 
0x50547e97  # push eax; push [ebp-0x54]; call [0x5054A00C] 
0x50547742  # push eax; push [ebp-0x48]; call [0x5054A04C] 
0x50546707  # push eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x5051057a  # push eax; push [ebp-0x24]; push [ebp+0x18]; push [ebp+0x14]; call esi 
0x505374c8  # push eax; push [ebp-0x1C]; call ebx 
0x505481f2  # push eax; push [ebp-0x14]; call [0x5054A008] 
0x505481e9  # push eax; push [ebp-0x14]; call [0x5054A014]; push [ebp-0x14]; call [0x5054A008] 
0x505481e9  # push eax; push [ebp-0x14]; call [0x5054A014] 
0x5053b190  # push eax; push [ebp-0x10]; and edi, 0x7FFFFFFF; push edi; push [ebp+0x0C]; call [0x5054A0A8] 
0x5050fc6d  # push eax; push [ebp-0x10]; mov [ebp-0x20], edi; push [ebp+0x18]; push [ebp+0x14]; call [0x5054A0E8] 
0x50507172  # push eax; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx; push [ebp-0x0C]; call ebx 
0x50507172  # push eax; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx 
0x5053ad01  # push eax; push [ebp-0x10]; push [ebp-0x08]; push [ebp+0x0C]; call edi 
0x50547278  # push eax; push [ebp-0x10]; push [ebp-0x08]; push [ebp-0x0C]; push [ebp+0x08]; call [0x5055DF4C] 
0x505383e2  # push eax; push [ebp-0x0C]; push edi; push ebx; push ebx; call esi 
0x50509698  # push eax; push [ebp-0x08]; push esi; push esi; call [0x5054A190] 
0x50509579  # push eax; push [ebp-0x08]; push esi; push 0x0000FDE9; call [0x5054A190] 
0x50507967  # push eax; push [ebp-0x08]; mov [ebp-0x4C], edi; push 0x00000004; call [0x5055CA1C] 
0x505318c6  # push eax; push [ebp-0x08]; mov ebx, [0x5054A060]; call ebx; push [ebp-0x04]; call ebx 
0x505318c6  # push eax; push [ebp-0x08]; mov ebx, [0x5054A060]; call ebx 
0x5053a5e8  # push eax; push [ebp-0x04]; push edi; push [ebp+0x0C]; call esi 
0x5050ede8  # push eax; push [ebp-0x04]; call [0x5054A0E0] 
0x50539253  # push eax; push [esi+0x04]; call [0x5054A1EC] 
0x5050b821  # push eax; push [esi+0x08]; call [0x5054A03C] 
0x5052f423  # push eax; push [esi+0x28]; push [esi+0x24]; push [esi]; call [0x5054A0E8] 
0x5051ec6c  # push eax; push [esi+0x4C]; push ebx; push eax; call [ecx] 
0x5052e12c  # push eax; push [edi+0x08]; call [esi] 
0x5052d3d3  # push eax; call [eax+0x000003C0]; pop ecx; pop ecx; ret 
0x5052d3d3  # push eax; call [eax+0x000003C0] 
0x5052d3e1  # push eax; call [eax+0x000003C4]; pop ecx; pop ecx; ret 
0x5052d3e1  # push eax; call [eax+0x000003C4] 
0x50537457  # push eax; jmp [ecx+0x50555FB4] 
0x5053bbd2  # push eax; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x5054A190] 
0x505480f1  # push eax; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x505480db  # push eax; push [ebp-0x00000208]; mov [ebp-0x0000020C], 0x00000100; call [0x5054A010] 
0x50514fb2  # push eax; push [edi+0x00000084]; call [ecx+0x18] 
0x5050662e  # push eax; call ebx; push 0x5054A5C0; mov [0x5055C9F0], eax; call ebx 
0x505374bb  # push eax; call ebx; mov [esi+0x000001F8], eax; push 0x50550EC0; push [ebp-0x1C]; call ebx 
0x5050717b  # push eax; call ebx; push [ebp-0x0C]; call ebx 
0x505318cf  # push eax; call ebx; push [ebp-0x04]; call ebx 
0x505053d6  # push eax; call ebx 
0x50506e1f  # push eax; call ebp 
0x5053a566  # push eax; call esi; cmp eax, ebx; jne 0x5053A580; call [0x5054A0E4] 
0x50506814  # push eax; call esi; cmp eax, edi; je 0x5050683B; call eax 
0x5054692d  # push eax; call esi; push edi; push [0x5055E07C]; mov [0x5055DFFC], eax; call esi 
0x5054404e  # push eax; call esi; pop esi; ret 
0x505464d2  # push eax; call esi; push 0x50552300; push [0x5055E078]; mov [0x5055DF48], eax; call esi 
0x50546616  # push eax; call esi; push 0x50552204; push [0x5055E078]; mov [0x5055DF8C], eax; call esi 
0x505464c0  # push eax; call esi; push 0x50552308; push [0x5055E078]; mov [0x5055DF44], eax; call esi 
0x505464ae  # push eax; call esi; push 0x50552314; push [0x5055E078]; mov [0x5055DF40], eax; call esi 
0x50546604  # push eax; call esi; push 0x5055221C; push [0x5055E078]; mov [0x5055DF88], eax; call esi 
0x5054649c  # push eax; call esi; push 0x5055231C; push [0x5055E078]; mov [0x5055DF3C], eax; call esi 
0x505066c8  # push eax; call esi; push 0x5054A51C; push [0x5055C9F4]; mov [0x5055CA14], eax; call esi 
0x5054648a  # push eax; call esi; push 0x50552324; push [0x5055E078]; mov [0x5055DF38], eax; call esi 
0x505466ca  # push eax; call esi; push 0x5055212C; push [0x5055E078]; mov [0x5055DFB8], eax; call esi 
0x505465f2  # push eax; call esi; push 0x5055222C; push [0x5055E078]; mov [0x5055DF84], eax; call esi 
0x50546478  # push eax; call esi; push 0x5055232C; push [0x5055E078]; mov [0x5055DF34], eax; call esi 
0x50546466  # push eax; call esi; push 0x50552334; push [0x5055E078]; mov [0x5055DF30], eax; call esi 
0x505066b6  # push eax; call esi; push 0x5054A534; push [0x5055C9F4]; mov [0x5055CA10], eax; call esi 
0x505466b8  # push eax; call esi; push 0x50552138; push [0x5055E078]; mov [0x5055DFB4], eax; call esi 
0x505465e0  # push eax; call esi; push 0x5055223C; push [0x5055E078]; mov [0x5055DF80], eax; call esi 
0x50546454  # push eax; call esi; push 0x50552340; push [0x5055E078]; mov [0x5055DF2C], eax; call esi 
0x505465ce  # push eax; call esi; push 0x50552248; push [0x5055E078]; mov [0x5055DFB0], eax; call esi 
0x50546442  # push eax; call esi; push 0x5055234C; push [0x5055E078]; mov [0x5055DF28], eax; call esi 
0x505466a6  # push eax; call esi; push 0x50552150; push [0x5055E078]; mov [0x5055DFAC], eax; call esi 
0x505066a4  # push eax; call esi; push 0x5054A550; push [0x5055C9F4]; mov [0x5055CA0C], eax; call esi 
0x505465bc  # push eax; call esi; push 0x50552254; push [0x5055E078]; mov [0x5055DF7C], eax; call esi 
0x50546430  # push eax; call esi; push 0x50552354; push [0x5055E078]; mov [0x5055DF24], eax; call esi 
0x50506764  # push eax; call esi; push 0x5054A458; push [0x5055C9F4]; mov [0x5055CA34], eax; call esi 
0x5054641e  # push eax; call esi; push 0x5055235C; push [0x5055E078]; mov [0x5055DF20], eax; call esi 
0x50546694  # push eax; call esi; push 0x50552160; push [0x5055E078]; mov [0x5055DFA8], eax; call esi 
0x505465aa  # push eax; call esi; push 0x50552260; push [0x5055E078]; mov [0x5055DF78], eax; call esi 
0x50506692  # push eax; call esi; push 0x5054A56C; push [0x5055C9F4]; mov [0x5055CA08], eax; call esi 
0x50546682  # push eax; call esi; push 0x50552170; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x50546598  # push eax; call esi; push 0x50552270; push [0x5055E078]; mov [0x5055DF74], eax; call esi 
0x505463fa  # push eax; call esi; push 0x50552374; push [0x5055E078]; mov [0x5055DF18], eax; call esi 
0x50506734  # push eax; call esi; push 0x5054A47C; push [0x5055C9F4]; mov [0x5055CA2C], eax; call esi 
0x505463e8  # push eax; call esi; push 0x50552380; push [0x5055E078]; mov [0x5055DF14], eax; call esi 
0x50546586  # push eax; call esi; push 0x50552284; push [0x5055E078]; mov [0x5055DF70], eax; call esi 
0x50506680  # push eax; call esi; push 0x5054A588; push [0x5055C9F4]; mov [0x5055CA04], eax; call esi 
0x505463d6  # push eax; call esi; push 0x5055238C; push [0x5055E078]; mov [0x5055DF10], eax; call esi 
0x50546574  # push eax; call esi; push 0x50552294; push [0x5055E078]; mov [0x5055DF6C], eax; call esi 
0x505463c4  # push eax; call esi; push 0x50552394; push [0x5055E078]; mov [0x5055DF0C], eax; call esi 
0x5050666e  # push eax; call esi; push 0x5054A598; push [0x5055C9F4]; mov [0x5055CA00], eax; call esi 
0x5054665e  # push eax; call esi; push 0x505521A0; push [0x5055E078]; mov [0x5055DF9C], eax; call esi 
0x505463b2  # push eax; call esi; push 0x505523A0; push [0x5055E078]; mov [0x5055DF08], eax; call esi 
0x50506722  # push eax; call esi; push 0x5054A4A0; push [0x5055C9F4]; mov [0x5055CA28], eax; call esi 
0x50546562  # push eax; call esi; push 0x505522A4; push [0x5055E078]; mov [0x5055DF68], eax; call esi 
0x50546550  # push eax; call esi; push 0x505522B0; push [0x5055E078]; mov [0x5055DF64], eax; call esi 
0x50506710  # push eax; call esi; push 0x5054A4B0; push [0x5055C9F4]; mov [0x5055CA24], eax; call esi 
0x5054664c  # push eax; call esi; push 0x505521B8; push [0x5055E078]; mov [0x5055DF98], eax; call esi 
0x5054653e  # push eax; call esi; push 0x505522C0; push [0x5055E078]; mov [0x5055DF60], eax; call esi 
0x505066fe  # push eax; call esi; push 0x5054A4C4; push [0x5055C9F4]; mov [0x5055CA20], eax; call esi 
0x505377d7  # push eax; call esi; push 0x50550ED0; push edi; mov [0x5055D54C], eax; call esi 
0x5054652c  # push eax; call esi; push 0x505522D0; push [0x5055E078]; mov [0x5055DF5C], eax; call esi 
0x5054663a  # push eax; call esi; push 0x505521D4; push [0x5055E078]; mov [0x5055DF94], eax; call esi 
0x505377ca  # push eax; call esi; push 0x50550ED8; push edi; mov [0x5055D548], eax; call esi 
0x5054651a  # push eax; call esi; push 0x505522D8; push [0x5055E078]; mov [0x5055DF58], eax; call esi 
0x505066ec  # push eax; call esi; push 0x5054A4DC; push [0x5055C9F4]; mov [0x5055CA1C], eax; call esi 
0x50546628  # push eax; call esi; push 0x505521EC; push [0x5055E078]; mov [0x5055DF90], eax; call esi 
0x505464f6  # push eax; call esi; push 0x505522F0; push [0x5055E078]; mov [0x5055DF50], eax; call esi 
0x505464e4  # push eax; call esi; push 0x505522F8; push [0x5055E078]; mov [0x5055DF4C], eax; call esi 
0x505066da  # push eax; call esi; push 0x5054A4F8; push [0x5055C9F4]; mov [0x5055CA18], eax; call esi 
0x505010e0  # push eax; call esi; push 0x00000000; push 0x5055C93C; mov edi, eax; call esi 
0x5054682e  # push eax; call esi; push 0x00000003; push [0x5055E07C]; mov [0x5055DFC4], eax; call esi 
0x5054683d  # push eax; call esi; push 0x00000004; push [0x5055E07C]; mov [0x5055DFC0], eax; call esi 
0x5054684c  # push eax; call esi; push 0x00000005; push [0x5055E07C]; mov [0x5055DFD0], eax; call esi 
0x5054685b  # push eax; call esi; push 0x00000006; push [0x5055E07C]; mov [0x5055DFD8], eax; call esi 
0x5054686a  # push eax; call esi; push 0x00000007; push [0x5055E07C]; mov [0x5055DFC8], eax; call esi 
0x50546879  # push eax; call esi; push 0x00000008; push [0x5055E07C]; mov [0x5055DFBC], eax; call esi 
0x50546888  # push eax; call esi; push 0x00000009; push [0x5055E07C]; mov [0x5055DFCC], eax; call esi 
0x50546897  # push eax; call esi; push 0x0000000A; push [0x5055E07C]; mov [0x5055DFD4], eax; call esi 
0x505468a6  # push eax; call esi; push 0x0000000B; push [0x5055E07C]; mov [0x5055E114], eax; call esi 
0x505468b5  # push eax; call esi; push 0x0000000C; push [0x5055E07C]; mov [0x5055DFDC], eax; call esi 
0x505468c4  # push eax; call esi; push 0x0000000D; push [0x5055E07C]; mov [0x5055DFE0], eax; call esi 
0x505468d3  # push eax; call esi; push 0x0000000E; push [0x5055E07C]; mov [0x5055DFE4], eax; call esi 
0x505468e2  # push eax; call esi; push 0x0000000F; push [0x5055E07C]; mov [0x5055DFE8], eax; call esi 
0x505468f1  # push eax; call esi; push 0x00000010; push [0x5055E07C]; mov [0x5055DFF0], eax; call esi 
0x5054690f  # push eax; call esi; push 0x00000012; push [0x5055E07C]; mov [0x5055DFF8], eax; call esi 
0x5054691e  # push eax; call esi; push 0x00000013; push [0x5055E07C]; mov [0x5055DFEC], eax; call esi 
0x5054693b  # push eax; call esi; push 0x00000015; push [0x5055E07C]; mov [0x5055E000], eax; call esi 
0x50546959  # push eax; call esi; push 0x00000017; push [0x5055E07C]; mov [0x5055E008], eax; call esi 
0x50546968  # push eax; call esi; push 0x00000018; push [0x5055E07C]; mov [0x5055E00C], eax; call esi 
0x50546977  # push eax; call esi; push 0x00000019; push [0x5055E07C]; mov [0x5055E010], eax; call esi 
0x50546986  # push eax; call esi; push 0x0000001A; push [0x5055E07C]; mov [0x5055E014], eax; call esi 
0x50546995  # push eax; call esi; push 0x0000001B; push [0x5055E07C]; mov [0x5055E018], eax; call esi 
0x505469a4  # push eax; call esi; push 0x0000001C; push [0x5055E07C]; mov [0x5055E01C], eax; call esi 
0x505469b3  # push eax; call esi; push 0x0000001D; push [0x5055E07C]; mov [0x5055E020], eax; call esi 
0x505469c2  # push eax; call esi; push 0x0000001E; push [0x5055E07C]; mov [0x5055E024], eax; call esi 
0x505469d1  # push eax; call esi; push 0x0000001F; push [0x5055E07C]; mov [0x5055E028], eax; call esi 
0x505469e0  # push eax; call esi; push 0x00000020; push [0x5055E07C]; mov [0x5055E038], eax; call esi 
0x505469ef  # push eax; call esi; push 0x00000021; push [0x5055E07C]; mov [0x5055E034], eax; call esi 
0x505469fe  # push eax; call esi; push 0x00000022; push [0x5055E07C]; mov [0x5055E030], eax; call esi 
0x50546a1c  # push eax; call esi; push 0x00000024; push [0x5055E07C]; mov [0x5055E068], eax; call esi 
0x50546a2b  # push eax; call esi; push 0x00000025; push [0x5055E07C]; mov [0x5055E060], eax; call esi 
0x50546a3a  # push eax; call esi; push 0x00000026; push [0x5055E07C]; mov [0x5055E05C], eax; call esi 
0x50546a49  # push eax; call esi; push 0x00000027; push [0x5055E07C]; mov [0x5055E054], eax; call esi 
0x50546a58  # push eax; call esi; push 0x00000028; push [0x5055E07C]; mov [0x5055E058], eax; call esi 
0x50546a67  # push eax; call esi; push 0x00000029; push [0x5055E07C]; mov [0x5055E04C], eax; call esi 
0x50546a76  # push eax; call esi; push 0x0000002A; push [0x5055E07C]; mov [0x5055E050], eax; call esi 
0x50546a85  # push eax; call esi; push 0x0000002B; push [0x5055E07C]; mov [0x5055E064], eax; call esi 
0x50546a94  # push eax; call esi; push 0x0000002C; push [0x5055E07C]; mov [0x5055E070], eax; call esi 
0x50546aa3  # push eax; call esi; push 0x0000002D; push [0x5055E07C]; mov [0x5055E06C], eax; call esi 
0x5054694a  # push eax; call esi; mov [0x5055E004], eax; push 0x00000016; push [0x5055E07C]; call esi 
0x505466dc  # push eax; call esi; mov [0x5055E110], eax; push 0x5055E080; call [0x5054A15C] 
0x50546508  # push eax; call esi; mov [0x5055DF54], eax; push 0x505522E4; push [0x5055E078]; call esi 
0x50546670  # push eax; call esi; mov [0x5055DFA0], eax; push 0x50552188; push [0x5055E078]; call esi 
0x5050712c  # push eax; call esi; push [ebp-0x0C]; call esi 
0x50537337  # push eax; call esi; call eax 
0x505010e0  # push eax; call esi 
0x50510834  # push eax; call edi; push ebx; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x50538541  # push eax; call edi; pop edi; pop ebx; push [0x5055D69C]; call [0x5054A078] 
0x5050833b  # push eax; call edi; cmp [ebp-0x04], 0x00000000; je 0x5050834D; push [ebp-0x04]; call [0x5055CA0C] 
0x5053185b  # push eax; call edi; push [ebp-0x04]; call edi 
0x5052f71f  # push eax; call edi; push [esi+0x08]; call edi 
0x505068b0  # push eax; call edi 
0x50547579  # push eax; jmp eax 
0x505119bd  # push ecx; add byte [eax], al; pop ecx; mov [edi+0x20], eax; call [0x5054A188] 
0x5054922b  # push ecx; add [eax], eax; leave; ret 
0x50548868  # push ecx; add [eax], eax; div ecx; pop esi; retn 0x0004 
0x50549223  # push ecx; add [eax], eax; idiv ecx; imul eax, eax, 0x00015180; leave; ret 
0x5053b6f2  # push ecx; add [esp+edx-0x73], esi; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5050d1b1  # push ecx; add al, byte [eax]; leave; retn 0x000C 
0x50509728  # push ecx; add al, byte [ebx-0x3E7CFB40]; add al, 0x4E; jne 0x50509714; pop esi; ret 
0x5051ce24  # push ecx; add al, 0x2B; rol byte [ebx+0x037304FA], 1; xor eax, eax; ret 
0x50518071  # push ecx; add al, 0x59; mov eax, [ebx+0x40]; mov [edi+0x58], eax; call [eax] 
0x5051818f  # push ecx; add al, 0x59; mov eax, [ebx+0x44]; mov [edi+0x5C], eax; call [eax] 
0x5051808b  # push ecx; add al, 0x59; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x505181a9  # push ecx; add al, 0x59; mov eax, [ebx+0x4C]; mov [edi+0x6C], eax; call [eax] 
0x5052ef46  # push ecx; add al, 0x83; les ecx, [esi+ebx*2]; ret 
0x5052a82a  # push ecx; add eax, 0x0B08E0C1; retn 0xB60F 
0x505180a8  # push ecx; or byte [ecx-0x75], bl; inc ebx; push eax; mov [edi+0x78], eax; call [eax+0x04] 
0x5054361e  # push ecx; or byte [ebp+0x05], dh; mov eax, 0x00000001; ret 
0x5052dd08  # push ecx; or al, 0x59; pop ecx; ret 
0x5052ef65  # push ecx; adc byte [ecx+0x59], bl; pop esi; ret 
0x5052dd34  # push ecx; adc byte [ecx+0x59], bl; ret 
0x5052db21  # push ecx; adc al, 0x59; pop ecx; ret 
0x505181c6  # push ecx; adc al, 0x59; mov eax, [ebx+0x54]; mov [edi+0x7C], eax; call [eax+0x10] 
0x50515707  # push ecx; sbb byte [ebx-0x7C3DD4FF], cl; clc; add [ebp+0x03], edi; xor eax, eax; ret 
0x505266ea  # push ecx; sbb al, 0x59; pop ecx; pop esi; ret 
0x50515d36  # push ecx; sbb al, 0x59; pop ecx; mov [esi+0x000028F0], edi; ret 
0x505266b6  # push ecx; sbb al, 0x83; les ecx, [esi+ebx*2]; ret 
0x50518ce1  # push ecx; and al, 0x3B; retn 0x027E 
0x50517fba  # push ecx; sub byte [ebx-0x3F7AEB3C], al; je 0x50517DD1; push [ebx+0x70]; mov eax, [edi+0x0000008C]; call [eax+0x08] 
0x50516472  # push ecx; cmp eax, ebx; je 0x5051647C; call [eax+0x08] 
0x5051648f  # push ecx; cmp eax, ebx; je 0x50516499; call [eax+0x14] 
0x50548492  # push ecx; push eax; cmp [ebp-0x7C], ecx; je 0x505484EB; push 0x80000001; call esi 
0x5051618d  # push ecx; push eax; pop edi; ret 
0x50517540  # push ecx; push eax; mov [edi+0x50], eax; call [edx+0x08] 
0x505076b6  # push ecx; push eax; mov [ebp-0x1C], edi; mov [ebp-0x20], 0x00000004; mov [ebp-0x2C], esi; call [0x5055C9A0] 
0x5051a2b3  # push ecx; push eax; mov [edx+0x00002908], 0x505317BC; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x50516179  # push ecx; push eax; mov [edx+0x00002980], 0x505317BC; mov [edx+0x00002990], 0x50516148; pop edi; ret 
0x50542717  # push ecx; push eax; call [0x5054A174] 
0x5053bbd1  # push ecx; push eax; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x5054A190] 
0x50541a02  # push ecx; push eax; call esi 
0x50536aca  # push ecx; push ecx; lea eax, [ebp-0x08]; push eax; call [0x5054A1AC] 
0x5052f242  # push ecx; push ecx; call [0x5054A188] 
0x505074e5  # push ecx; push edx; push 0x00000002; push 0x5054A5F4; push edx; call [0x5055C984] 
0x505097fe  # push ecx; push ebx; push eax; call [0x5054A04C] 
0x505430e1  # push ecx; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x5054A190] 
0x50542828  # push ecx; push esi; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x5052f7da  # push ecx; push esi; call [esi+0x00001030] 
0x50543dc2  # push ecx; push edi; call [0x5054A168] 
0x505275cd  # push ecx; push edi; call [eax+0x08] 
0x50542a1b  # push ecx; push 0x00000001; push eax; call edi 
0x505075b1  # push ecx; push 0x00000001; push edi; push 0x00000001; push eax; call [0x5055CA18] 
0x50542711  # push ecx; push 0x00000001; lea ecx, [ebp+0x08]; push ecx; push eax; call [0x5054A174] 
0x50546c8f  # push ecx; push 0x00000002; push 0x0000FFFF; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x50538e67  # push ecx; jo 0x50538EDF; add eax, 0x000CC5E8; add byte [ebx-0x743CFBC0], cl; call [ebp-0x75] 
0x5050755c  # push ecx; mov [ebp-0x04], eax; push 0x00000059; add eax, 0x0000389C; push eax; call [0x5055C9A4] 
0x5050b85e  # push ecx; mov [esi+0x0C], ecx; call edi 
0x50507702  # push ecx; mov [ebp-0x18], esi; mov [ebp-0x20], esi; mov [ebp-0x28], 0x00000001; mov [ebp-0x2C], esi; call [0x5055C990] 
0x50515442  # push ecx; mov ecx, [esi+0x10]; add ecx, edi; push ecx; push [ebx+0x00000080]; call [eax+0x0C] 
0x5051f23b  # push ecx; mov esi, [esi+0x0C]; mov eax, [esi]; push esi; call [eax+0x08] 
0x50514f4a  # push ecx; mov ecx, [edi+0x0000023C]; push [ecx+0x10]; push [edi+0x74]; call [eax+0x10] 
0x50536acb  # push ecx; lea eax, [ebp-0x08]; push eax; call [0x5054A1AC] 
0x5050800e  # push ecx; lea eax, [ebx+0x0000389C]; push 0x0000005A; push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x50502de1  # push ecx; jecxz 0x50502DE3; dec [ebx+0x5E5B5FC3]; pop ebp; retn 0x0008 
0x50547114  # push ecx; call [0x5054A030]; test al, 0x01; je 0x5054712C; push 0x00002734; call [0x5055DF88] 
0x50547114  # push ecx; call [0x5054A030] 
0x5054961e  # push ecx; call [0x5054A03C] 
0x5050528e  # push ecx; call [0x5054A070] 
0x5054276e  # push ecx; call [0x5054A17C] 
0x505015bc  # push ecx; call [0x5054A284] 
0x5052f243  # push ecx; call [0x5054A188] 
0x50537e9c  # push ecx; call [0x5054A1C0] 
0x5052dc29  # push ecx; call [eax+0x20]; pop ecx; ret 
0x5052dc29  # push ecx; call [eax+0x20] 
0x505090af  # push ecx; push [ebp+0x08]; push [esi+0x24]; push eax; call [0x5054A254] 
0x5054013c  # push ecx; push [ebp+0x10]; push eax; mov eax, [edi]; push [esi+eax]; call [0x5054A0C0] 
0x5053c015  # push ecx; push [ebp+0x10]; push [ebp-0x00001ACC]; push [eax]; call [0x5054A0E8] 
0x5051aec2  # push ecx; push [ebp-0x68]; push [ebp-0x70]; push [edi+0x04]; call [eax+0x2C] 
0x50542250  # push ecx; push [ebp-0x08]; push eax; call [0x5054A0EC] 
0x5051ade4  # push ecx; push [esi+0x04]; call [eax+0x0C] 
0x5051555a  # push ecx; push [esi+0x10]; push [edi+0x60]; call [eax+0x10] 
0x5051553c  # push ecx; push [esi+0x10]; push [edi+0x70]; call [eax+0x0C] 
0x505180eb  # push ecx; push [edi+0x60]; call [eax+0x08] 
0x505180cf  # push ecx; push [edi+0x60]; call [eax+0x0C] 
0x505181f0  # push ecx; push [edi+0x64]; call [eax+0x0C] 
0x5051822b  # push ecx; push [edi+0x74]; call [eax+0x08] 
0x50515448  # push ecx; push [ebx+0x00000080]; call [eax+0x0C] 
0x50546ac6  # push ecx; call eax; push 0x5055E084; call [0x5054A15C] 
0x50546ac6  # push ecx; call eax 
0x505386a8  # push ecx; call ebx 
0x5053d669  # push ecx; call esi 
0x50539566  # push edx; add [eax], eax; add byte [ebp+0x5750E845], cl; call [0x5054A1EC] 
0x5054361b  # push edx; or al, 0x39; push ecx; or byte [ebp+0x05], dh; mov eax, 0x00000001; ret 
0x50514f17  # push edx; adc byte [ebx], al; rcl [edx-0x01], 1; jnbe 0x50514F83; call [eax+0x14] 
0x5050f154  # push edx; and bh, bh; inc [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0014 
0x50526ac6  # push edx; push eax; jne 0x50526B57; mov ecx, [eax]; call [ecx+0x08] 
0x5052f5b8  # push edx; push eax; push edi; push edi; call [0x5054A06C] 
0x50542768  # push edx; push eax; lea eax, [ebp-0x0C]; push eax; push ecx; call [0x5054A17C] 
0x505269ba  # push edx; push eax; call [ecx+0x08] 
0x505010b8  # push edx; push ebp; push eax; push esi; call edi 
0x50501056  # push edx; push ebp; push eax; push edi; call esi 
0x50501118  # push edx; push ebp; push eax; push 0x5055520C; call [0x5054A18C] 
0x50501076  # push edx; push ebp; push eax; call [0x5054A188] 
0x5050111d  # push edx; push ebp; push eax; call [0x5054A18C] 
0x505010de  # push edx; push ebp; push eax; call esi 
0x5051f07c  # push edx; push esi; call [eax+0x04] 
0x5051f04e  # push edx; push edi; push eax; call [ecx+0x08] 
0x50548498  # push edx; push 0x80000001; call esi 
0x5052dbd6  # push edx; push 0x00000000; push eax; call [ecx+0x08] 
0x505074e6  # push edx; push 0x00000002; push 0x5054A5F4; push edx; call [0x5055C984] 
0x50514fae  # push edx; add eax, 0x05; push eax; push [edi+0x00000084]; call [ecx+0x18] 
0x5052e891  # push edx; lea edx, [ebp-0x78]; push edx; push eax; call [ecx+0x08] 
0x505268eb  # push edx; mov byte [ebp-0x20], 0x05; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x505269e8  # push edx; mov byte [ebp-0x0B], 0x5B; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x50538849  # push edx; call [0x5055E13C] 
0x505074ee  # push edx; call [0x5055C984] 
0x50516dc8  # push edx; push [ecx+0x50]; call [eax+0x0C] 
0x50514f1b  # push edx; push [edi+0x64]; call [eax+0x14] 
0x505010d1  # push ebx; add byte [eax], al; mov esi, [0x5054A18C]; push 0xFFFFFFFF; push 0x50555210; call esi 
0x50505a17  # push ebx; or eax, [eax]; add byte [ecx+0x5D39F445], cl; adc byte [esi+ebx-0x01], dh; jne 0x50505A36; call edi 
0x5050386b  # push ebx; cmp [ebp+0x10], edi; je 0x5050387E; push [ebp+0x10]; call [0x5054A03C] 
0x50537828  # push ebx; push eax; mov [0x5055D54C], esi; mov [0x5055D550], eax; call [0x5054A184] 
0x505325a8  # push ebx; push eax; mov edi, edi; neg ecx; jmp [0x50532680+ecx*4] 
0x50532918  # push ebx; push eax; mov edi, edi; neg ecx; jmp [0x505329F0+ecx*4] 
0x50503319  # push ebx; push eax; lea eax, [esi+0x000008A0]; push eax; call [0x5054A04C] 
0x505327b1  # push ebx; push eax; nop; jmp [0x50532838+ecx*4] 
0x50532441  # push ebx; push eax; nop; jmp [0x505324C8+ecx*4] 
0x50535c4c  # push ebx; push eax; ret 
0x50536666  # push ebx; push eax; mov [0x50556A94], 0x5053E3DC; mov [0x50556A98], 0x5053E33E; mov [0x50556A9C], 0x5053E2CB; ret 
0x50536670  # push ebx; push eax; mov [0x50556A98], 0x5053E33E; mov [0x50556A9C], 0x5053E2CB; ret 
0x5053667a  # push ebx; push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x5051a2bd  # push ebx; push eax; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x50516183  # push ebx; push eax; mov [edx+0x00002990], 0x50516148; pop edi; ret 
0x5051ec70  # push ebx; push eax; call [ecx] 
0x505097ff  # push ebx; push eax; call [0x5054A04C] 
0x5053293e  # push ebx; push eax; jmp [0x50532A40+ecx*4] 
0x5053243a  # push ebx; push eax; jmp [0x50532544+ecx*4] 
0x505327aa  # push ebx; push eax; jmp [0x505328B4+ecx*4] 
0x505325ce  # push ebx; push eax; jmp [0x505326D0+ecx*4] 
0x50515f4a  # push ebx; push eax; call [esi+0x08] 
0x50509697  # push ebx; push eax; push [ebp-0x08]; push esi; push esi; call [0x5054A190] 
0x50509578  # push ebx; push eax; push [ebp-0x08]; push esi; push 0x0000FDE9; call [0x5054A190] 
0x5053a565  # push ebx; push eax; call esi; cmp eax, ebx; jne 0x5053A580; call [0x5054A0E4] 
0x5053a565  # push ebx; push eax; call esi 
0x5051357e  # push ebx; push eax; call edi 
0x5053d668  # push ebx; push ecx; call esi 
0x5053a564  # push ebx; push ebx; push eax; call esi 
0x5053a563  # push ebx; push ebx; push ebx; push eax; call esi 
0x5050ef96  # push ebx; push ebx; push ebx; lea eax, [ebp-0x44]; push eax; call [0x5054A264] 
0x50512dad  # push ebx; push ebx; push ebx; lea eax, [ebp-0x3C]; push eax; call esi 
0x5050acec  # push ebx; push ebx; push ebx; lea eax, [ebp-0x38]; push eax; call [0x5054A264] 
0x5051e4d6  # push ebx; push ebx; push ebx; lea eax, [ebp-0x34]; push eax; call esi 
0x505383c1  # push ebx; push ebx; mov [ebp-0x0C], eax; call esi 
0x50503d6c  # push ebx; push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x50549412  # push ebx; push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x5050ef97  # push ebx; push ebx; lea eax, [ebp-0x44]; push eax; call [0x5054A264] 
0x50512dae  # push ebx; push ebx; lea eax, [ebp-0x3C]; push eax; call esi 
0x5050aced  # push ebx; push ebx; lea eax, [ebp-0x38]; push eax; call [0x5054A264] 
0x5051e4d7  # push ebx; push ebx; lea eax, [ebp-0x34]; push eax; call esi 
0x5051041c  # push ebx; push ebx; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x505383e7  # push ebx; push ebx; call esi 
0x50509568  # push ebx; push esi; push esi; call [0x5054A240] 
0x50502fae  # push ebx; push esi; push 0x00003A98; call [0x5054A048] 
0x50509683  # push ebx; push esi; push 0x0000FDE9; call [0x5054A240] 
0x50539a6f  # push ebx; push esi; mov esi, [0x5054A0D4]; push edi; call esi 
0x5051623a  # push ebx; push esi; mov esi, [eax+0x18]; call [esi] 
0x5051ab99  # push ebx; push esi; call [eax] 
0x5051e25a  # push ebx; push esi; call [0x5054A10C] 
0x5050324d  # push ebx; push esi; call [0x5054A18C] 
0x5050f8d2  # push ebx; push esi; call [0x5054A09C] 
0x50533c70  # push ebx; push esi; call [ebp+0x10] 
0x50541adc  # push ebx; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call [0x5054A190] 
0x5050f06a  # push ebx; push esi; push [ebp-0x04]; call [0x5054A0D0] 
0x5053924b  # push ebx; push edi; lea eax, [ebp-0x00000518]; push eax; push [esi+0x04]; call [0x5054A1EC] 
0x50506f3b  # push ebx; push edi; call [0x5054A050]; push edi; mov [esi+0x24], eax; call ebp 
0x50506f3b  # push ebx; push edi; call [0x5054A050] 
0x50543e8e  # push ebx; push edi; push [0x5055D69C]; call [0x5054A164] 
0x50539eb6  # push ebx; push edi; push [ebp-0x0C]; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x5050734f  # push ebx; push 0x00070007; push 0x00000000; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x5052e4cf  # push ebx; push 0x00001F41; mov esi, [esi+0x0C]; push esi; mov eax, [esi]; call [eax+0x04] 
0x50503d66  # push ebx; push 0x50502F93; push ebx; push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x505275b3  # push ebx; push 0x5054C1D0; push edi; call [eax+0x08] 
0x50509843  # push ebx; push 0x5054AAD4; push edi; call [0x5054A260] 
0x50536361  # push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x5053d6bf  # push ebx; push 0x00000000; push [eax+0x0C]; call esi 
0x5050f89c  # push ebx; push 0x00000001; push 0x80000000; push esi; mov [ebp-0x20], ebx; call [0x5054A0A8] 
0x50542417  # push ebx; push 0x00000008; call [0x5054A180]; push eax; call [0x5054A07C] 
0x50542417  # push ebx; push 0x00000008; call [0x5054A180] 
0x505437f2  # push ebx; push 0x00000009; push [ebp+0x1C]; call esi 
0x50541e88  # push ebx; push 0xFFFFFFF6; call [0x5054A238] 
0x50501a3d  # push ebx; je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x5050e917  # push ebx; jl 0x5050E919; call [eax-0x01] 
0x5050824a  # push ebx; add eax, 0x18; push eax; push edi; call [0x5055CA2C] 
0x50508260  # push ebx; add eax, 0x30; push eax; push edi; call [0x5055CA2C] 
0x5053829d  # push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x50508df2  # push ebx; mov [eax], ebx; lea esi, [ecx+edi*4]; call [0x5054A25C] 
0x505383c2  # push ebx; mov [ebp-0x0C], eax; call esi 
0x50503d6d  # push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x505430e2  # push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x5054A190] 
0x5050cfa7  # push ebx; mov ebx, [0x5054A04C]; call ebx 
0x50539762  # push ebx; mov edi, [0x5054A15C]; call edi 
0x50508c8e  # push ebx; mov ebx, [esp+0x10]; test ebx, ebx; je 0x50508CC8; push ebx; call [0x5054A280] 
0x5050cc96  # push ebx; mov ebx, [ebp+0x0C]; test ebx, ebx; je 0x5050D03E; push ebx; call [0x5054A03C] 
0x5054844c  # push ebx; lea eax, [ebp-0x74]; push eax; push 0x00000000; push [ebp-0x78]; call [0x5054A018] 
0x50549413  # push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x5050ef98  # push ebx; lea eax, [ebp-0x44]; push eax; call [0x5054A264] 
0x50512daf  # push ebx; lea eax, [ebp-0x3C]; push eax; call esi 
0x5050acee  # push ebx; lea eax, [ebp-0x38]; push eax; call [0x5054A264] 
0x5051e4d8  # push ebx; lea eax, [ebp-0x34]; push eax; call esi 
0x5050f5d4  # push ebx; lea eax, [ebp-0x18]; push eax; push [ebp-0x78]; call edi 
0x5050d9e0  # push ebx; lea eax, [esi+0x04]; push eax; call [0x5054A0B8] 
0x505275c9  # push ebx; lea ecx, [ebp-0x44]; push ecx; push edi; call [eax+0x08] 
0x50516dc3  # push ebx; lea edx, [edi+edx+0x04]; push edx; push [ecx+0x50]; call [eax+0x0C] 
0x505316ab  # push ebx; lea edx, [ebp-0x0080]; push edx; push eax; call [ecx+0x08] 
0x5052e746  # push ebx; lea edx, [ebp-0x78]; push edx; push eax; call [ecx+0x08] 
0x5051f04a  # push ebx; lea edx, [ebp-0x64]; push edx; push edi; push eax; call [ecx+0x08] 
0x50511012  # push ebx; lea edi, [esi+0x20]; push edi; call [0x5054A050] 
0x5050780e  # push ebx; lea eax, [edi+eax*8+0x0000389C]; push eax; call [0x5055C9A4] 
0x5053bde3  # push ebx; lea eax, [ebp-0x00001AB8]; push eax; mov eax, [esi]; push [edi+eax]; call [0x5054A0E8] 
0x505107d4  # push ebx; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A050] 
0x50510837  # push ebx; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x5052f31c  # push ebx; lea eax, [esi+0x00001024]; push eax; push edi; push [esi]; call [0x5054A140] 
0x5054638c  # push ebx; mov [0x5055E078], eax; call esi 
0x505467a4  # push ebx; mov [0x5055E07C], eax; call esi 
0x50539d9a  # push ebx; call [0x5054A200] 
0x5054212d  # push ebx; call [0x5054A020]; test byte [esi+0x04], 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x5054212d  # push ebx; call [0x5054A020] 
0x5054213a  # push ebx; call [0x5054A024] 
0x505036f0  # push ebx; call [0x5054A03C] 
0x50502c9a  # push ebx; call [0x5054A048] 
0x50509518  # push ebx; call [0x5054A04C]; push ebx; call edi 
0x50509518  # push ebx; call [0x5054A04C] 
0x50503960  # push ebx; call [0x5054A050] 
0x50508cab  # push ebx; call [0x5054A258] 
0x50507101  # push ebx; call [0x5054A060] 
0x5050a9b4  # push ebx; call [0x5054A260] 
0x50508c97  # push ebx; call [0x5054A280] 
0x50508e10  # push ebx; call [0x5054A284] 
0x5050716c  # push ebx; call [0x5054A098]; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx 
0x5050716c  # push ebx; call [0x5054A098] 
0x505070f3  # push ebx; call [0x5054A0A4] 
0x5050af72  # push ebx; call [0x5054A0B8] 
0x5053e054  # push ebx; call [0x5054A0E8] 
0x505275a0  # push ebx; push [0x5054C1B0+ecx*4]; push edi; call [eax+0x08] 
0x505275f9  # push ebx; call [eax+0x08] 
0x50526c74  # push ebx; call [eax+0x14] 
0x50527307  # push ebx; call [eax+0x18] 
0x50533d85  # push ebx; call [ebp+0x14] 
0x5053fe5c  # push ebx; call [ebp-0x20] 
0x50516275  # push ebx; call [esi+0x04]; push [ebp+0x14]; push ebx; call [esi+0x08] 
0x5051629e  # push ebx; call [esi+0x04]; push [esi+0x0C]; push [ebp+0x14]; push ebx; call [esi+0x04] 
0x5051625a  # push ebx; call [esi+0x04] 
0x5051627c  # push ebx; call [esi+0x08]; add esp, 0x2C; call [esi] 
0x5051627c  # push ebx; call [esi+0x08] 
0x505414b1  # push ebx; push [ebp+0x08]; call [0x5054A230] 
0x50509590  # push ebx; push [ebp+0x0C]; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x50509590  # push ebx; push [ebp+0x0C]; call [0x5054A04C] 
0x505081e9  # push ebx; push [ebp+0x0C]; call [0x5055C9A4] 
0x50515114  # push ebx; push [ebp+0x0C]; push [ebp+0x08]; call [esi+0x04] 
0x505092bf  # push ebx; push [ebp+0x0C]; push [ebp+0x08]; push [ebp-0x04]; call [0x5054A250] 
0x50509093  # push ebx; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5054149b  # push ebx; push [ebp+0x10]; push [ebp+0x0C]; push 0x00000001; push [ebp+0x18]; call esi 
0x5053a007  # push ebx; push [ebp+0x14]; push eax; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x50539f7e  # push ebx; push [ebp+0x20]; call [0x5054A190] 
0x50531d5a  # push ebx; push [ebp-0x34]; mov edi, [0x5054A190]; call edi 
0x50531d94  # push ebx; push [ebp-0x34]; call edi 
0x50540337  # push ebx; push [ebp-0x0C]; push 0x00000000; push 0x0000FDE9; call [0x5054A240] 
0x5052ef14  # push ebx; push [esi+0x08]; call [edi+0x08] 
0x50508f1a  # push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x5052436a  # push ebx; push [esi+0x24]; push [ebp+0x08]; call [edi+0x04] 
0x5051ec69  # push ebx; push [esi+0x50]; push [esi+0x4C]; push ebx; push eax; call [ecx] 
0x5052e04f  # push ebx; push [edi+0x08]; call [esi] 
0x50528927  # push ebx; push [ebp-0x0000008C]; mov [esi], eax; mov [esi+0x08], ecx; call [eax+0x14] 
0x5053b562  # push ebx; push [ebp-0x00000114]; call edi 
0x5051041d  # push ebx; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x50531a8f  # push ebx; call eax 
0x50547e46  # push ebx; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x505072da  # push ebx; call esi 
0x505039a7  # push ebx; call edi; push ebx; call [0x5054A03C] 
0x50503984  # push ebx; call edi; push [ebp+0x10]; push ebx; call edi 
0x50503984  # push ebx; call edi 
0x505273e3  # push esp; adc [ebx+edi], ecx; retn 0x1B7D 
0x50510f1f  # push esp; adc al, 0x02; add cl, cl; retn 0x001C 
0x50516dc5  # push esp; pop ss; add al, 0x52; push [ecx+0x50]; call [eax+0x0C] 
0x505465c0  # push esp; and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF7C], eax; call esi 
0x50546434  # push esp; and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF24], eax; call esi 
0x50515664  # push esp; and al, 0x04; mov [ecx+eax*4], edx; inc [esi+0x0000017C]; ret 
0x5053143d  # push esp; and al, 0x04; mov byte [edx+ecx], 0x03; inc [eax]; ret 
0x5050d55f  # push esp; and al, 0x08; lea ecx, [eax+0x00000AB4]; mov eax, [ecx]; mov [ecx], edx; retn 0x0008 
0x5051e1a6  # push esp; and al, 0x08; ret 
0x505207d1  # push esp; xor dl, byte [eax]; mov [eax+0x10], 0xC3D2E1F0; ret 
0x5050b829  # push esp; push eax; add eax, [esi+0x08]; mov edi, [0x5054A260]; push eax; call edi 
0x5054759f  # push esp; push eax; movzx eax, al; and eax, 0x01; ret 
0x5052f3af  # push esp; push eax; xor eax, eax; add esp, 0x14; retn 0x0004 
0x5050c8dd  # push esp; push eax; xor eax, eax; retn 0x0008 
0x505475e0  # push esp; push eax; xor eax, eax; ret 
0x50538923  # push esp; push eax; xor esi, eax; lea eax, [ebp-0x10]; push eax; call [0x5054A1E0] 
0x50538913  # push esp; push eax; xor esi, eax; call [0x5054A044]; xor esi, eax; call [0x5054A188] 
0x50538913  # push esp; push eax; xor esi, eax; call [0x5054A044] 
0x5053891b  # push esp; push eax; xor esi, eax; call [0x5054A188] 
0x50503ad1  # push esp; push eax; cmp [ebp+0x10], ebx; je 0x50503AF6; push [ebp+0x10]; call edi 
0x5052f494  # push esp; push eax; cmp [esi+0x10], ebp; je 0x5052F40F; push [esi+0x04]; call [0x5054A13C] 
0x50506fcb  # push esp; push eax; cmp [ebp+0x0C], esi; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x505068aa  # push esp; push eax; cmp eax, esi; je 0x505068B9; push eax; call edi 
0x5050ba9b  # push esp; push eax; inc edi; push edi; mov word [esi+0x2A], ax; call ebx 
0x5050a1bb  # push esp; push eax; push eax; push edi; call esi 
0x50531821  # push esp; push eax; push eax; mov [ebp-0x1C], 0x0000000C; mov [ebp-0x18], edi; call ebx 
0x5052f1fe  # push esp; push eax; push eax; call [0x5054A124] 
0x5052f1d4  # push esp; push eax; push eax; call [0x5054A12C] 
0x50509efc  # push esp; push eax; push eax; call [0x5054A03C] 
0x5050c88c  # push esp; push eax; push eax; call [0x5054A040] 
0x50547258  # push esp; push eax; push eax; call [0x5054A24C]; push [0x50556FF8]; call [0x5054A030] 
0x50512dd4  # push esp; push eax; push eax; call [0x5054A24C] 
0x5050b7f6  # push esp; push eax; push eax; call [0x5054A05C] 
0x50504976  # push esp; push eax; push eax; call [0x5054A260] 
0x5054241e  # push esp; push eax; push eax; call [0x5054A07C] 
0x505424a1  # push esp; push eax; push eax; call [0x5054A084] 
0x50542750  # push esp; push eax; push eax; call [0x5054A190] 
0x50538f6f  # push esp; push eax; push eax; call [0x5054A1E4]; leave; ret 
0x50538b46  # push esp; push eax; push eax; call [0x5054A1E4] 
0x5052e13f  # push esp; push eax; push eax; call [ecx+0x08] 
0x5050666c  # push esp; push eax; push eax; call esi 
0x5050b832  # push esp; push eax; push eax; call edi 
0x5050b85c  # push esp; push eax; push ecx; mov [esi+0x0C], ecx; call edi 
0x505074ec  # push esp; push eax; push edx; call [0x5055C984] 
0x5054638a  # push esp; push eax; push ebx; mov [0x5055E078], eax; call esi 
0x505467a2  # push esp; push eax; push ebx; mov [0x5055E07C], eax; call esi 
0x5050a9b2  # push esp; push eax; push ebx; call [0x5054A260] 
0x50547e79  # push esp; push eax; push ebx; call esi 
0x505039a5  # push esp; push eax; push ebx; call edi; push ebx; call [0x5054A03C] 
0x50503982  # push esp; push eax; push ebx; call edi 
0x50501179  # push esp; push eax; push esi; push 0x5055C944; call [0x5054A18C] 
0x5050d8bf  # push esp; push eax; push esi; mov edi, eax; call [0x5054A060] 
0x50513a68  # push esp; push eax; push esi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x505011df  # push esp; push eax; push esi; call [0x5054A028]; pop esi; retn 0x0004 
0x50501185  # push esp; push eax; push esi; call [0x5054A028] 
0x505492a4  # push esp; push eax; push esi; call [0x5054A03C] 
0x50503d8b  # push esp; push eax; push esi; call [0x5054A060] 
0x5050f61f  # push esp; push eax; push esi; call [0x5054A260] 
0x50503d84  # push esp; push eax; push esi; call [0x5054A064]; push esi; call [0x5054A060] 
0x50503d84  # push esp; push eax; push esi; call [0x5054A064] 
0x5050c513  # push esp; push eax; push esi; call ebx 
0x505094e1  # push esp; push eax; push esi; call edi 
0x5050bdfa  # push esp; push eax; push edi; mov word [esi+0x30], ax; call [0x5054A0B8] 
0x50531869  # push esp; push eax; push edi; push 0x00000001; push [ebp-0x0C]; call ebx 
0x50506ec4  # push esp; push eax; push edi; mov [esi+0x10], eax; call ebp 
0x50506edd  # push esp; push eax; push edi; mov [esi+0x14], eax; call ebp 
0x50506ef6  # push esp; push eax; push edi; mov [esi+0x18], eax; call ebp 
0x50506f0f  # push esp; push eax; push edi; mov [esi+0x1C], eax; call ebp 
0x50506f28  # push esp; push eax; push edi; mov [esi+0x20], eax; call ebp 
0x50506f41  # push esp; push eax; push edi; mov [esi+0x24], eax; call ebp 
0x505399da  # push esp; push eax; push edi; mov edi, [ebp+0x08]; push edi; call esi 
0x50513668  # push esp; push eax; push edi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x5050ebbb  # push esp; push eax; push edi; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0B4] 
0x5050ec51  # push esp; push eax; push edi; lea eax, [ebp-0x00000308]; push eax; call [0x5054A0B4] 
0x50501051  # push esp; push eax; push edi; mov edi, 0x5055520C; push edi; call esi 
0x50513e1e  # push esp; push eax; push edi; mov edi, 0x50555CA4; push edi; call esi 
0x50502991  # push esp; push eax; push edi; call [0x5054A03C] 
0x50509847  # push esp; push eax; push edi; call [0x5054A260] 
0x50507605  # push esp; push eax; push edi; call [0x5055C984] 
0x5050be19  # push esp; push eax; push edi; call [0x5054A0B8] 
0x505275a6  # push esp; push eax; push edi; call [eax+0x08] 
0x505051f7  # push esp; push eax; push edi; call ebx 
0x50539a75  # push esp; push eax; push edi; call esi 
0x50531773  # push esp; push eax; pop ecx; pop ecx; push [esi+0x04]; call edi 
0x50514343  # push esp; push eax; pop ebp; retn 0x000C 
0x50536022  # push esp; push eax; pop ebp; ret 
0x50535fef  # push esp; push eax; pop esi; pop ebp; ret 
0x505011e6  # push esp; push eax; pop esi; retn 0x0004 
0x5052f772  # push esp; push eax; pop esi; ret 
0x505010a7  # push esp; push eax; pop edi; pop esi; retn 0x0004 
0x50501110  # push esp; push eax; pop edi; pop esi; ret 
0x505375cf  # push esp; push eax; pop edi; mov eax, esi; pop esi; ret 
0x5050c4e1  # push esp; push eax; push 0x5054AC30; push edi; call ebx 
0x50542967  # push esp; push eax; push 0x5055208C; push edi; call esi 
0x5050b857  # push esp; push eax; push 0x5054ABA4; push ecx; mov [esi+0x0C], ecx; call edi 
0x505463ab  # push esp; push eax; push 0x505523A8; push eax; call esi 
0x50506667  # push esp; push eax; push 0x5054A5B0; push eax; call esi 
0x505467bd  # push esp; push eax; push 0x505523BC; push eax; call esi 
0x50506628  # push esp; push eax; push 0x5054A5CC; call ebx 
0x50538f48  # push esp; push eax; push 0x50550FE0; call [0x5054A1A4] 
0x505377b6  # push esp; push eax; push 0x50550EF0; push edi; call esi 
0x5050649f  # push esp; push eax; push 0x00000000; push 0x5055C970; call [0x5054A18C]; ret 
0x5050649f  # push esp; push eax; push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x50538b14  # push esp; push eax; push 0x00000000; mov ebx, eax; call [0x5054A1A8] 
0x50501f65  # push esp; push eax; push 0x0000000A; call [0x5054A048] 
0x5050ef26  # push esp; push eax; push 0x00000040; push [ebp+0x0C]; push [ebp-0x04]; call [0x5054A0D0] 
0x505010d8  # push esp; push eax; push 0xFFFFFFFF; push 0x50555210; call esi 
0x50509b27  # push esp; push eax; je 0x50509B34; push [ebp+0x10]; call esi 
0x5050396e  # push esp; push eax; je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x50508b5b  # push esp; push eax; je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x50538550  # push esp; push eax; and [0x5055D69C], 0x00000000; ret 
0x505064d4  # push esp; push eax; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x5050ad0f  # push esp; push eax; cmp [ebp+0x10], 0x04; jnl 0x5050AD37; call [0x5054A188] 
0x5050efb9  # push esp; push eax; cmp [ebp-0x14], 0x04; jnl 0x5050EFE5; call [0x5054A188] 
0x50547d4c  # push esp; push eax; add esp, 0x14; push 0x00000010; call [0x5054A270] 
0x505472b0  # push esp; push eax; and eax, 0xFFFFFFFC; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x5053b1a2  # push esp; push eax; cmp eax, 0xFFFFFFFF; jne 0x5053B1DD; call [0x5054A0E4] 
0x505010f7  # push esp; push eax; cmp edi, 0xFFFFFFFF; je 0x50501112; push edi; call [0x5054A158] 
0x5053ee49  # push esp; push eax; test eax, eax; je 0x5053EE54; push 0x00000000; call eax 
0x50537ac2  # push esp; push eax; test eax, eax; je 0x50537ACD; push [ebp+0x08]; call eax 
0x50506be3  # push esp; push eax; test eax, eax; je 0x50506BF0; push eax; call ebx 
0x50506985  # push esp; push eax; test eax, eax; je 0x50506993; push eax; call ebx 
0x5053736d  # push esp; push eax; test eax, eax; je 0x5053737B; push [ebp+0x08]; call eax 
0x5050f8e5  # push esp; push eax; test eax, eax; je 0x5050F8F9; push esi; call [0x5054A060] 
0x5053a699  # push esp; push eax; test eax, eax; jne 0x5053A6A9; call [0x5054A0E4] 
0x5053c27a  # push esp; push eax; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x5051131d  # push esp; push eax; test eax, eax; jne 0x5051133A; push 0x00000064; call [0x5054A048] 
0x50546731  # push esp; push eax; test eax, eax; jnl 0x5054673B; or eax, 0xFFFFFFFF; ret 
0x50501124  # push esp; push eax; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020] 
0x50501145  # push esp; push eax; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024] 
0x505112e4  # push esp; push eax; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020] 
0x5051134e  # push esp; push eax; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024] 
0x5050ff99  # push esp; push eax; test ebx, ebx; je 0x5050FFAE; push ebx; call esi 
0x505072a7  # push esp; push eax; test ebx, ebx; jne 0x505072C1; push 0x00000000; call esi 
0x50510795  # push esp; push eax; test esi, esi; je 0x505107A7; push esi; call edi 
0x5051c87b  # push esp; push eax; mov byte [ecx+0x03], al; ret 
0x505103ea  # push esp; push eax; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x50510414; call [0x5054A0E4] 
0x5050fbd4  # push esp; push eax; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5050FC2A; call [0x5054A0E4] 
0x50540346  # push esp; push eax; mov [ebp-0x10], eax; test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x50542259  # push esp; push eax; mov [ebp-0x08], eax; cmp eax, edi; jne 0x50542275; call [0x5054A0E4] 
0x50517533  # push esp; push eax; mov [edi+0x4C], eax; call [eax] 
0x50508404  # push esp; push eax; mov ecx, [edi]; push esi; mov [ecx+0x14], eax; call ebx 
0x5050843c  # push esp; push eax; mov ecx, [edi]; push esi; mov [ecx+0x1C], eax; call ebx 
0x50508458  # push esp; push eax; mov ecx, [edi]; push esi; mov [ecx+0x20], eax; call ebx 
0x50501043  # push esp; push eax; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50512221  # push esp; push eax; mov ecx, [ebp+0x10]; push eax; mov [ecx], eax; call [0x5054A0DC] 
0x50538907  # push esp; push eax; mov esi, [ebp-0x04]; xor esi, [ebp-0x08]; call [0x5054A138] 
0x50516b86  # push esp; push eax; mov eax, [eax+0x000000DC]; ret 
0x5050118c  # push esp; push eax; mov eax, esi; pop esi; ret 
0x5051e3f0  # push esp; push eax; mov edx, eax; mov eax, [ebp-0x08]; leave; ret 
0x5052f430  # push esp; push eax; mov ebx, eax; cmp ebx, ebp; jne 0x5052F443; call [0x5054A0E4] 
0x5050f8d8  # push esp; push eax; mov ebx, eax; cmp ebx, 0xFFFFFFFF; jne 0x5050F8F9; call [0x5054A0E4] 
0x5052f2e0  # push esp; push eax; mov ebx, eax; test ebx, ebx; jne 0x5052F2F6; call [0x5054A0E4] 
0x5050f8ac  # push esp; push eax; mov esi, eax; cmp esi, 0xFFFFFFFF; jne 0x5050F8D2; call [0x5054A0E4] 
0x5051e516  # push esp; push eax; mov esi, eax; call edi 
0x5054259a  # push esp; push eax; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x505425AB; call [0x5054A0E4] 
0x50504923  # push esp; push eax; lea eax, [ebp+eax+0x48]; push eax; call [0x5054A260] 
0x50509f03  # push esp; push eax; lea eax, [ebp+eax-0x44]; push eax; call esi 
0x50548e54  # push esp; push eax; lea eax, [ebp+0x24]; push eax; call esi 
0x50504919  # push esp; push eax; lea eax, [ebp+0x48]; push eax; call [0x5054A03C] 
0x5050efaf  # push esp; push eax; lea eax, [ebp-0x44]; push eax; call [0x5054A278] 
0x50509edd  # push esp; push eax; lea eax, [ebp-0x44]; push 0x5054A358; push eax; call esi 
0x5054721c  # push esp; push eax; lea eax, [ebp-0x40]; push eax; call [0x5054A278] 
0x50512d9f  # push esp; push eax; lea eax, [ebp-0x3C]; push eax; call [0x5054A278] 
0x5050ad05  # push esp; push eax; lea eax, [ebp-0x38]; push eax; call [0x5054A278] 
0x5051e4c8  # push esp; push eax; lea eax, [ebp-0x34]; push eax; call [0x5054A278] 
0x50501f5b  # push esp; push eax; lea eax, [ebp-0x24]; push eax; call [0x5054A278] 
0x5052f177  # push esp; push eax; lea eax, [ebp-0x1C]; push 0x00000010; push eax; call [ebp+0x08] 
0x5052f194  # push esp; push eax; lea eax, [ebp-0x0C]; push 0x00000008; push eax; call [ebp+0x08] 
0x5050b9e6  # push esp; push eax; lea eax, [edi+0x01]; push eax; call [0x5054A0B8] 
0x505419fd  # push esp; push eax; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x50536973  # push esp; push eax; lea eax, [ebp-0x000002D8]; push eax; call [0x5054A1A4] 
0x5050307a  # push esp; push eax; lea eax, [ebp+0x00000084]; push eax; call [0x5054A03C] 
0x5050306d  # push esp; push eax; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x50548612  # push esp; push eax; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x5054939f  # push esp; push eax; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x505108d4  # push esp; push eax; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x5051082c  # push esp; push eax; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x50513576  # push esp; push eax; lea eax, [esi+0x00000200]; push ebx; push eax; call edi 
0x50546b26  # push esp; push eax; mov eax, [0x5055DFC4]; test eax, eax; je 0x50546B35; call eax 
0x50501072  # push esp; push eax; mov [0x50555210], eax; call [0x5054A188] 
0x50527871  # push esp; push eax; mov [0x5055D454], eax; ret 
0x50506441  # push esp; push eax; mov [0x5055C970], eax; test eax, eax; jne 0x5050644C; ret 
0x5054401e  # push esp; push eax; mov [0x50556CE4], eax; ret 
0x50506634  # push esp; push eax; mov [0x5055C9F0], eax; call ebx 
0x50546701  # push esp; push eax; mov [0x50556FF8], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x50547119  # push esp; push eax; test al, 0x01; je 0x5054712C; push 0x00002734; call [0x5055DF88] 
0x505010b4  # push esp; push eax; mov esi, 0x5055520C; push esi; call edi 
0x50546f77  # push esp; push eax; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x505064fd  # push esp; push eax; retn 0x0004 
0x50506545  # push esp; push eax; retn 0x0008 
0x50501133  # push esp; push eax; ret 
0x5053781e  # push esp; push eax; mov [0x5055D544], 0x505373FC; mov [0x5055D54C], esi; mov [0x5055D550], eax; call [0x5054A184] 
0x5052f4f2  # push esp; push eax; mov [esi+0x18], 0x00000001; pop edi; leave; ret 
0x5052f3d6  # push esp; push eax; mov [esi+0x18], 0x00000001; ret 
0x50538f76  # push esp; push eax; leave; ret 
0x50542132  # push esp; push eax; test byte [esi+0x04], 0x01; je 0x50542155; push ebx; call [0x5054A024] 
0x5051e3cf  # push esp; push eax; neg eax; sbb eax, eax; ret 
0x5050106c  # push esp; push eax; call [0x5054A184]; mov [0x50555210], eax; call [0x5054A188] 
0x5050106c  # push esp; push eax; call [0x5054A184] 
0x50512468  # push esp; push eax; call [0x5054A188] 
0x5051e3c9  # push esp; push eax; call [0x5054A0E4]; neg eax; sbb eax, eax; ret 
0x5051e3c9  # push esp; push eax; call [0x5054A0E4] 
0x5054674c  # push esp; push eax; jmp [0x5055DF84] 
0x50503235  # push esp; push eax; push [0x5055C960]; push esi; call [0x5054A18C] 
0x50502fb9  # push esp; push eax; push [0x5055C960]; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x50506674  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA00], eax; call esi 
0x50506686  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA04], eax; call esi 
0x50506698  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA08], eax; call esi 
0x505066aa  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA0C], eax; call esi 
0x505066bc  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA10], eax; call esi 
0x505066ce  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA14], eax; call esi 
0x505066e0  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA18], eax; call esi 
0x505066f2  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA1C], eax; call esi 
0x50506704  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA20], eax; call esi 
0x50506716  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA24], eax; call esi 
0x50506728  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA28], eax; call esi 
0x5050673a  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA2C], eax; call esi 
0x5050676a  # push esp; push eax; push [0x5055C9F4]; mov [0x5055CA34], eax; call esi 
0x5050675d  # push esp; push eax; push [0x5055C9F4]; call esi 
0x5054725f  # push esp; push eax; push [0x50556FF8]; call [0x5054A030] 
0x50538519  # push esp; push eax; push [esi]; push 0x00000000; push [0x5055D69C]; call edi 
0x505122ae  # push esp; push eax; push [esi]; call [0x5054A0E0] 
0x50537a5b  # push esp; push eax; push [ebp+0x08]; call [0x5054A1B0] 
0x5051433a  # push esp; push eax; push [ebp+0x0C]; call [0x5054A03C]; pop ebp; retn 0x000C 
0x50509598  # push esp; push eax; push [ebp+0x0C]; call [0x5054A03C] 
0x50503901  # push esp; push eax; push [ebp+0x0C]; call [0x5054A05C] 
0x5051432d  # push esp; push eax; push [ebp+0x10]; push eax; push [ebp+0x0C]; call [0x5054A04C] 
0x5050f63e  # push esp; push eax; push [ebp-0x7C]; call [0x5054A260] 
0x505484ae  # push esp; push eax; push [ebp-0x78]; mov esi, eax; call ebx 
0x50548781  # push esp; push eax; push [ebp-0x6C]; test eax, eax; je 0x5054879E; call [0x5054A008] 
0x505481f1  # push esp; push eax; push [ebp-0x14]; call [0x5054A008] 
0x50507171  # push esp; push eax; push [ebp-0x10]; mov ebx, [0x5054A060]; call ebx 
0x505318c5  # push esp; push eax; push [ebp-0x08]; mov ebx, [0x5054A060]; call ebx 
0x5050ede7  # push esp; push eax; push [ebp-0x04]; call [0x5054A0E0] 
0x505480f0  # push esp; push eax; push [ebp-0x00000208]; mov esi, eax; call [0x5054A008] 
0x5050662d  # push esp; push eax; call ebx; push 0x5054A5C0; mov [0x5055C9F0], eax; call ebx 
0x5050717a  # push esp; push eax; call ebx; push [ebp-0x0C]; call ebx 
0x505318ce  # push esp; push eax; call ebx; push [ebp-0x04]; call ebx 
0x5050662d  # push esp; push eax; call ebx 
0x5050712b  # push esp; push eax; call esi; push [ebp-0x0C]; call esi 
0x5050712b  # push esp; push eax; call esi 
0x5053185a  # push esp; push eax; call edi; push [ebp-0x04]; call edi 
0x5052f71e  # push esp; push eax; call edi; push [esi+0x08]; call edi 
0x5052f71e  # push esp; push eax; call edi 
0x50547578  # push esp; push eax; jmp eax 
0x505181cb  # push esp; mov [edi+0x7C], eax; call [eax+0x10] 
0x5052dcb8  # push esp; mov [esi+0x58], ebx; mov [esi+0x5C], edi; call [esi+0x48] 
0x50526713  # push esp; mov eax, [edi]; push esi; push edi; call [eax+0x18] 
0x5053aa5d  # push esp; lea eax, [ebp-0x28]; push eax; lea eax, [ebp-0x68]; push eax; call [0x5054A0C8] 
0x5053a9f7  # push esp; lea eax, [ebp-0x28]; push eax; lea eax, [ebp-0x60]; push eax; call [0x5054A0C8] 
0x505065fc  # push esp; mov al, byte [0xC0855054]; je 0x50506845; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x505010f5  # push esp; mov eax, [0xFF835054]; push [esp+edx+0x57]; call [0x5054A158] 
0x50527874  # push esp; aam 0x55; push eax; ret 
0x50537934  # push esp; aad 0x55; push eax; jbe 0x50537959; push esi; call [0x5054A048] 
0x50546a55  # push esp; loopne 0x50546AAD; push eax; call esi 
0x5053d93a  # push ebp; add [eax], eax; add dh, dh; ret 
0x5052f19d  # push ebp; or byte [ecx+0x59], bl; leave; ret 
0x5052f254  # push ebp; or byte [ecx+0x59], bl; call [0x5054A138] 
0x50538845  # push ebp; or byte [edx+0x01], ch; push edx; call [0x5055E13C] 
0x505360f3  # push ebp; or byte [ebx-0x36A0EF3C], al; ret 
0x50545d90  # push ebp; or al, 0x8B; retn 0xF633 
0x50542c6a  # push ebp; adc byte [ebx], bh; ror [eax-0x74FB81E2], cl; retn 0x02EB 
0x5051e8c1  # push ebp; push eax; add byte [ecx+0x5E], bl; ret 
0x5053987d  # push ebp; push eax; add [eax], eax; add byte [eax], al; xor eax, eax; ret 
0x505394b3  # push ebp; push eax; add [eax], eax; add byte [eax], al; call [0x5054A1F0] 
0x50539490  # push ebp; push eax; add [eax], eax; add byte [eax], al; call [0x5054A1F4] 
0x50542727  # push ebp; push eax; add dh, byte [ebp-0x26]; call [0x5054A0E4] 
0x50546782  # push ebp; push eax; jne 0x50546AC9; mov esi, [0x5054A090]; push 0x00008000; call esi 
0x50542fc2  # push ebp; push eax; sete cl; mov eax, ecx; ret 
0x50526603  # push ebp; push eax; movzx eax, al; ret 
0x50532b87  # push ebp; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000103; pop ebp; ret 
0x50532d91  # push ebp; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000107; pop ebp; ret 
0x50532c8c  # push ebp; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x00000080; pop ebp; ret 
0x50532c08  # push ebp; push eax; movzx eax, word [ecx+eax*2]; and eax, 0x04; pop ebp; ret 
0x505421a1  # push ebp; push eax; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x50537bb9  # push ebp; push eax; xor eax, eax; pop ebp; ret 
0x5053919e  # push ebp; push eax; xor eax, eax; ret 
0x505079a8  # push ebp; push eax; cmp [ebp-0x04], esi; je 0x505077FE; push [ebp-0x04]; call [0x5055CA0C] 
0x505078f7  # push ebp; push eax; cmp [ebp-0x04], esi; je 0x50507907; push [ebp-0x04]; call [0x5055CA0C] 
0x505068bc  # push ebp; push eax; cmp eax, esi; je 0x50506925; push eax; call edi 
0x50536676  # push ebp; push eax; jecxz 0x505366CE; push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x50506642  # push ebp; push eax; inc ebx; push [ebp-0x24]; call esi 
0x505374b3  # push ebp; push eax; push eax; mov ebx, [0x5054A088]; call ebx 
0x50537366  # push ebp; push eax; push eax; call [0x5054A088] 
0x50546cc7  # push ebp; push eax; push eax; call [0x5055DFE4] 
0x5053784d  # push ebp; push eax; push eax; call esi 
0x50531d58  # push ebp; push eax; push ebx; push [ebp-0x34]; mov edi, [0x5054A190]; call edi 
0x50531d92  # push ebp; push eax; push ebx; push [ebp-0x34]; call edi 
0x5053981c  # push ebp; push eax; push ebx; call edi 
0x50546b0e  # push ebp; push eax; push esi; xor edi, edi; call [0x5054A18C] 
0x5053829a  # push ebp; push eax; push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x5053df4c  # push ebp; push eax; push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x505413c3  # push ebp; push eax; push esi; call [0x5054A230] 
0x50546f7c  # push ebp; push eax; push esi; call [0x5054A260] 
0x50502fc4  # push ebp; push eax; push esi; call [0x5054A18C] 
0x5053734b  # push ebp; push eax; push esi; call [0x5054A1B0] 
0x50503db9  # push ebp; push eax; push esi; call [0x5054A0D4] 
0x505010b9  # push ebp; push eax; push esi; call edi 
0x505377c3  # push ebp; push eax; push edi; mov [0x5055D544], eax; call esi 
0x505377d0  # push ebp; push eax; push edi; mov [0x5055D548], eax; call esi 
0x505377dd  # push ebp; push eax; push edi; mov [0x5055D54C], eax; call esi 
0x50542984  # push ebp; push eax; push edi; mov [0x5055DEB8], eax; call esi 
0x50542999  # push ebp; push eax; push edi; mov [0x5055DEBC], eax; call esi 
0x505429ae  # push ebp; push eax; push edi; mov [0x5055DEC0], eax; call esi 
0x50513e50  # push ebp; push eax; push edi; call [0x5054A0D4] 
0x5053d755  # push ebp; push eax; push edi; push [0x5055D69C]; call [0x5054A080] 
0x50501057  # push ebp; push eax; push edi; call esi 
0x50526594  # push ebp; push eax; pop ebx; ret 
0x505384e2  # push ebp; push eax; pop ebp; ret 
0x505263f8  # push ebp; push eax; pop esi; pop ebx; ret 
0x50526516  # push ebp; push eax; pop esi; pop ebx; leave; ret 
0x50537d5a  # push ebp; push eax; pop esi; ret 
0x50546cd6  # push ebp; push eax; pop esi; leave; retn 0x0004 
0x505265d9  # push ebp; push eax; pop esi; inc [0x5055D448]; ret 
0x50508e91  # push ebp; push eax; pop edi; pop esi; ret 
0x50539d93  # push ebp; push eax; push 0x00000100; push ebx; call [0x5054A200] 
0x5050123c  # push ebp; push eax; push 0x00001A00; call [0x5054A034] 
0x50501119  # push ebp; push eax; push 0x5055520C; call [0x5054A18C] 
0x505037e6  # push ebp; push eax; push 0x5055C93C; call [0x5054A18C] 
0x50531cdf  # push ebp; push eax; push 0x5055D480; call [0x5054A19C] 
0x505466e2  # push ebp; push eax; push 0x5055E080; call [0x5054A15C] 
0x50546676  # push ebp; push eax; push 0x50552188; push [0x5055E078]; call esi 
0x505112d9  # push ebp; push eax; push 0x50555CA4; call [0x5054A18C] 
0x5053d785  # push ebp; push eax; push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x5054650e  # push ebp; push eax; push 0x505522E4; push [0x5055E078]; call esi 
0x50538538  # push ebp; push eax; push 0x00000000; push [0x5055D69C]; call edi 
0x50546950  # push ebp; push eax; push 0x00000016; push [0x5055E07C]; call esi 
0x50506806  # push ebp; push eax; je 0x5050683B; push 0x5054A440; push [0x5055C9F0]; call esi 
0x50511050  # push ebp; push eax; je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x5053237b  # push ebp; push eax; jne 0x50532381; rep ret 
0x50537936  # push ebp; push eax; jbe 0x50537959; push esi; call [0x5054A048] 
0x50537ff9  # push ebp; push eax; jl 0x50537FBB; pop edi; pop esi; ret 
0x50538c1d  # push ebp; push eax; jl 0x50538C07; pop esi; pop ebx; ret 
0x50501195  # push ebp; push eax; cmp eax, 0xFFFFFFFF; je 0x505011A4; push eax; call [0x5054A030] 
0x5053745c  # push ebp; push eax; cmp eax, 0xFFFFFFFF; je 0x50537471; push eax; call [0x5054A158] 
0x50547590  # push ebp; push eax; cmp eax, 0xFFFFFFFF; jne 0x5054759A; xor eax, eax; ret 
0x50539485  # push ebp; push eax; cmp esi, 0xFFFFFFFE; jne 0x505394AA; mov [0x5055DB1C], 0x00000001; call [0x5054A1F4] 
0x50546b2b  # push ebp; push eax; test eax, eax; je 0x50546B35; call eax 
0x50506494  # push ebp; push eax; test eax, eax; je 0x505064AE; push eax; call [0x5054A078] 
0x50546c4d  # push ebp; push eax; test eax, eax; je 0x50546C38; push 0x0000276D; call eax 
0x50506446  # push ebp; push eax; test eax, eax; jne 0x5050644C; ret 
0x505384d4  # push ebp; push eax; test eax, eax; jne 0x505384DC; pop ebp; ret 
0x505474e9  # push ebp; push eax; test eax, eax; jne 0x505474F2; retn 0x0004 
0x50546b3d  # push ebp; push eax; test eax, eax; jne 0x50546B46; retn 0x000C 
0x50547516  # push ebp; push eax; test eax, eax; jne 0x50547520; pop ebp; retn 0x0008 
0x50546d1c  # push ebp; push eax; test eax, eax; jne 0x50546D28; or eax, 0xFFFFFFFF; retn 0x000C 
0x5054756e  # push ebp; push eax; test eax, eax; jne 0x5054757A; jmp [0x5054A028] 
0x5054757f  # push ebp; push eax; test eax, eax; jne 0x5054758B; jmp [0x5054A0E4] 
0x50509785  # push ebp; push eax; mov [ecx], eax; ret 
0x5050141e  # push ebp; push eax; mov [eax+ebx*4], esi; mov [esi+0x04], ebx; mov [esi], edi; call [0x5054A044] 
0x50508e8b  # push ebp; push eax; mov [0x5055CA40], edi; pop edi; pop esi; ret 
0x50503417  # push ebp; push eax; mov [ebp-0x38], eax; mov [ebp-0x30], ebx; call [0x5054A18C] 
0x50547289  # push ebp; push eax; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x50539447  # push ebp; push eax; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x50538f1c  # push ebp; push eax; mov [ebp-0x00000328], eax; mov eax, [0x50555D04]; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50538f27  # push ebp; push eax; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50507164  # push ebp; push eax; mov [edi+0x000037F4], eax; push ebx; call [0x5054A098] 
0x505265f7  # push ebp; push eax; mov al, byte [eax+0x5055CF38]; inc [0x5055D3E8]; movzx eax, al; ret 
0x5053c324  # push ebp; push eax; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x5054A154] 
0x50537319  # push ebp; push eax; mov esi, [0x5054A030]; call esi 
0x5054679a  # push ebp; push eax; mov ebx, eax; call [0x5054A08C] 
0x505010e8  # push ebp; push eax; mov edi, eax; call esi; push 0x5055C948; call [0x5054A154] 
0x505010e8  # push ebp; push eax; mov edi, eax; call esi 
0x5050667a  # push ebp; push eax; mov [0x5055CA00], eax; call esi 
0x50546944  # push ebp; push eax; mov [0x5055E000], eax; call esi 
0x5050668c  # push ebp; push eax; mov [0x5055CA04], eax; call esi 
0x5050669e  # push ebp; push eax; mov [0x5055CA08], eax; call esi 
0x505463be  # push ebp; push eax; mov [0x5055DF08], eax; call esi 
0x50546962  # push ebp; push eax; mov [0x5055E008], eax; call esi 
0x505066b0  # push ebp; push eax; mov [0x5055CA0C], eax; call esi 
0x505463d0  # push ebp; push eax; mov [0x5055DF0C], eax; call esi 
0x50546971  # push ebp; push eax; mov [0x5055E00C], eax; call esi 
0x505066c2  # push ebp; push eax; mov [0x5055CA10], eax; call esi 
0x505463e2  # push ebp; push eax; mov [0x5055DF10], eax; call esi 
0x50546980  # push ebp; push eax; mov [0x5055E010], eax; call esi 
0x505066d4  # push ebp; push eax; mov [0x5055CA14], eax; call esi 
0x505463f4  # push ebp; push eax; mov [0x5055DF14], eax; call esi 
0x5054698f  # push ebp; push eax; mov [0x5055E014], eax; call esi 
0x505468af  # push ebp; push eax; mov [0x5055E114], eax; call esi 
0x505066e6  # push ebp; push eax; mov [0x5055CA18], eax; call esi 
0x50546406  # push ebp; push eax; mov [0x5055DF18], eax; call esi 
0x5054699e  # push ebp; push eax; mov [0x5055E018], eax; call esi 
0x505066f8  # push ebp; push eax; mov [0x5055CA1C], eax; call esi 
0x50546418  # push ebp; push eax; mov [0x5055DF1C], eax; call esi 
0x505469ad  # push ebp; push eax; mov [0x5055E01C], eax; call esi 
0x5054642a  # push ebp; push eax; mov [0x5055DF20], eax; call esi 
0x505469bc  # push ebp; push eax; mov [0x5055E020], eax; call esi 
0x5050671c  # push ebp; push eax; mov [0x5055CA24], eax; call esi 
0x5054643c  # push ebp; push eax; mov [0x5055DF24], eax; call esi 
0x505469cb  # push ebp; push eax; mov [0x5055E024], eax; call esi 
0x5050672e  # push ebp; push eax; mov [0x5055CA28], eax; call esi 
0x5054644e  # push ebp; push eax; mov [0x5055DF28], eax; call esi 
0x505469da  # push ebp; push eax; mov [0x5055E028], eax; call esi 
0x50506740  # push ebp; push eax; mov [0x5055CA2C], eax; call esi 
0x50546460  # push ebp; push eax; mov [0x5055DF2C], eax; call esi 
0x50546a16  # push ebp; push eax; mov [0x5055E02C], eax; call esi 
0x50546472  # push ebp; push eax; mov [0x5055DF30], eax; call esi 
0x50546a07  # push ebp; push eax; mov [0x5055E030], eax; call esi 
0x50506770  # push ebp; push eax; mov [0x5055CA34], eax; call esi 
0x50546484  # push ebp; push eax; mov [0x5055DF34], eax; call esi 
0x505469f8  # push ebp; push eax; mov [0x5055E034], eax; call esi 
0x50546496  # push ebp; push eax; mov [0x5055DF38], eax; call esi 
0x505469e9  # push ebp; push eax; mov [0x5055E038], eax; call esi 
0x505464a8  # push ebp; push eax; mov [0x5055DF3C], eax; call esi 
0x505464ba  # push ebp; push eax; mov [0x5055DF40], eax; call esi 
0x505464cc  # push ebp; push eax; mov [0x5055DF44], eax; call esi 
0x505464de  # push ebp; push eax; mov [0x5055DF48], eax; call esi 
0x505464f0  # push ebp; push eax; mov [0x5055DF4C], eax; call esi 
0x50546a70  # push ebp; push eax; mov [0x5055E04C], eax; call esi 
0x5053782e  # push ebp; push eax; mov [0x5055D550], eax; call [0x5054A184] 
0x50546502  # push ebp; push eax; mov [0x5055DF50], eax; call esi 
0x50546a7f  # push ebp; push eax; mov [0x5055E050], eax; call esi 
0x50546a52  # push ebp; push eax; mov [0x5055E054], eax; call esi 
0x50546526  # push ebp; push eax; mov [0x5055DF58], eax; call esi 
0x50546a61  # push ebp; push eax; mov [0x5055E058], eax; call esi 
0x50546538  # push ebp; push eax; mov [0x5055DF5C], eax; call esi 
0x50546a43  # push ebp; push eax; mov [0x5055E05C], eax; call esi 
0x5054654a  # push ebp; push eax; mov [0x5055DF60], eax; call esi 
0x50546a34  # push ebp; push eax; mov [0x5055E060], eax; call esi 
0x5054655c  # push ebp; push eax; mov [0x5055DF64], eax; call esi 
0x50546a8e  # push ebp; push eax; mov [0x5055E064], eax; call esi 
0x5054656e  # push ebp; push eax; mov [0x5055DF68], eax; call esi 
0x50546a25  # push ebp; push eax; mov [0x5055E068], eax; call esi 
0x50546580  # push ebp; push eax; mov [0x5055DF6C], eax; call esi 
0x50546aac  # push ebp; push eax; mov [0x5055E06C], eax; call esi 
0x50546592  # push ebp; push eax; mov [0x5055DF70], eax; call esi 
0x50546a9d  # push ebp; push eax; mov [0x5055E070], eax; call esi 
0x505465a4  # push ebp; push eax; mov [0x5055DF74], eax; call esi 
0x505465b6  # push ebp; push eax; mov [0x5055DF78], eax; call esi 
0x505465c8  # push ebp; push eax; mov [0x5055DF7C], eax; call esi 
0x505465ec  # push ebp; push eax; mov [0x5055DF80], eax; call esi 
0x505465fe  # push ebp; push eax; mov [0x5055DF84], eax; call esi 
0x50546610  # push ebp; push eax; mov [0x5055DF88], eax; call esi 
0x5053fca3  # push ebp; push eax; mov [0x5055DE8C], eax; mov [0x5055DE90], eax; pop ebp; ret 
0x50546622  # push ebp; push eax; mov [0x5055DF8C], eax; call esi 
0x5053fca8  # push ebp; push eax; mov [0x5055DE90], eax; pop ebp; ret 
0x50546634  # push ebp; push eax; mov [0x5055DF90], eax; call esi 
0x50546646  # push ebp; push eax; mov [0x5055DF94], eax; call esi 
0x50546658  # push ebp; push eax; mov [0x5055DF98], eax; call esi 
0x5054666a  # push ebp; push eax; mov [0x5055DF9C], eax; call esi 
0x5054668e  # push ebp; push eax; mov [0x5055DFA4], eax; call esi 
0x505466a0  # push ebp; push eax; mov [0x5055DFA8], eax; call esi 
0x505466b2  # push ebp; push eax; mov [0x5055DFAC], eax; call esi 
0x505465da  # push ebp; push eax; mov [0x5055DFB0], eax; call esi 
0x505466c4  # push ebp; push eax; mov [0x5055DFB4], eax; call esi 
0x505466d6  # push ebp; push eax; mov [0x5055DFB8], eax; call esi 
0x50546882  # push ebp; push eax; mov [0x5055DFBC], eax; call esi 
0x50546846  # push ebp; push eax; mov [0x5055DFC0], eax; call esi 
0x50546837  # push ebp; push eax; mov [0x5055DFC4], eax; call esi 
0x50546873  # push ebp; push eax; mov [0x5055DFC8], eax; call esi 
0x50546891  # push ebp; push eax; mov [0x5055DFCC], eax; call esi 
0x50546855  # push ebp; push eax; mov [0x5055DFD0], eax; call esi 
0x505468a0  # push ebp; push eax; mov [0x5055DFD4], eax; call esi 
0x50546864  # push ebp; push eax; mov [0x5055DFD8], eax; call esi 
0x505468be  # push ebp; push eax; mov [0x5055DFDC], eax; call esi 
0x505468cd  # push ebp; push eax; mov [0x5055DFE0], eax; call esi 
0x505468dc  # push ebp; push eax; mov [0x5055DFE4], eax; call esi 
0x505468eb  # push ebp; push eax; mov [0x5055DFE8], eax; call esi 
0x50546927  # push ebp; push eax; mov [0x5055DFEC], eax; call esi 
0x505468fa  # push ebp; push eax; mov [0x5055DFF0], eax; call esi 
0x50546918  # push ebp; push eax; mov [0x5055DFF8], eax; call esi 
0x50546935  # push ebp; push eax; mov [0x5055DFFC], eax; call esi 
0x50502fbf  # push ebp; push eax; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x505011a7  # push ebp; push eax; ret 
0x505265fd  # push ebp; push eax; inc [0x5055D3E8]; movzx eax, al; ret 
0x50511317  # push ebp; push eax; call [0x5054A104] 
0x50513e38  # push ebp; push eax; call [0x5054A108] 
0x5050112d  # push ebp; push eax; call [0x5054A020]; ret 
0x5050112d  # push ebp; push eax; call [0x5054A020] 
0x50538c31  # push ebp; push eax; call [0x5054A024]; pop ebp; ret 
0x5050114e  # push ebp; push eax; call [0x5054A024]; ret 
0x5050114e  # push ebp; push eax; call [0x5054A024] 
0x5053ee33  # push ebp; push eax; call [0x5054A224] 
0x505475da  # push ebp; push eax; call [0x5054A02C]; xor eax, eax; ret 
0x5053742d  # push ebp; push eax; call [0x5054A02C]; mov eax, esi; pop esi; ret 
0x5053742d  # push ebp; push eax; call [0x5054A02C] 
0x505010f1  # push ebp; push eax; call [0x5054A154] 
0x50503d53  # push ebp; push eax; call [0x5054A15C] 
0x50501066  # push ebp; push eax; call [0x5054A160]; call [0x5054A184]; mov [0x50555210], eax; call [0x5054A188] 
0x50501066  # push ebp; push eax; call [0x5054A160]; call [0x5054A184] 
0x50501066  # push ebp; push eax; call [0x5054A160] 
0x50543e94  # push ebp; push eax; call [0x5054A164] 
0x5053854a  # push ebp; push eax; call [0x5054A078]; and [0x5055D69C], 0x00000000; ret 
0x5053854a  # push ebp; push eax; call [0x5054A078] 
0x50536311  # push ebp; push eax; call [0x5054A07C] 
0x50536368  # push ebp; push eax; call [0x5054A080] 
0x505364b7  # push ebp; push eax; call [0x5054A084] 
0x50537833  # push ebp; push eax; call [0x5054A184] 
0x5052786b  # push ebp; push eax; call [0x5054A188]; mov [0x5055D454], eax; ret 
0x50501077  # push ebp; push eax; call [0x5054A188] 
0x50546384  # push ebp; push eax; call [0x5054A08C]; push ebx; mov [0x5055E078], eax; call esi 
0x50542951  # push ebp; push eax; call [0x5054A08C] 
0x5050117f  # push ebp; push eax; call [0x5054A18C]; push esi; call [0x5054A028] 
0x505010a1  # push ebp; push eax; call [0x5054A18C]; pop edi; pop esi; retn 0x0004 
0x50547c88  # push ebp; push eax; call [0x5054A18C]; retn 0x0004 
0x505064a6  # push ebp; push eax; call [0x5054A18C]; ret 
0x505010a1  # push ebp; push eax; call [0x5054A18C] 
0x505467d1  # push ebp; push eax; call [0x5054A094] 
0x50531ce4  # push ebp; push eax; call [0x5054A19C] 
0x50538f4d  # push ebp; push eax; call [0x5054A1A4] 
0x50544018  # push ebp; push eax; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544018  # push ebp; push eax; call [0x5054A0A8] 
0x50537aac  # push ebp; push eax; call [0x5054A1B0] 
0x50511059  # push ebp; push eax; call [0x5054A0B8] 
0x50537f8f  # push ebp; push eax; call [0x5054A1B8] 
0x505382a2  # push ebp; push eax; call [0x5054A1C8] 
0x505015a3  # push ebp; push eax; call [0x5054A0D4] 
0x5050af6e  # push ebp; push eax; push [eax]; push ebx; call [0x5054A0B8] 
0x50509477  # push ebp; push eax; push [eax]; lea eax, [ebp-0x00000104]; push eax; call [0x5054A05C] 
0x505463b8  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF08], eax; call esi 
0x505463ca  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF0C], eax; call esi 
0x505463dc  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF10], eax; call esi 
0x505463ee  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF14], eax; call esi 
0x50546412  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF1C], eax; call esi 
0x50546424  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF20], eax; call esi 
0x50546436  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF24], eax; call esi 
0x50546448  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF28], eax; call esi 
0x5054645a  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF2C], eax; call esi 
0x5054646c  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF30], eax; call esi 
0x5054647e  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF34], eax; call esi 
0x50546490  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF38], eax; call esi 
0x505464a2  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF3C], eax; call esi 
0x505464b4  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF40], eax; call esi 
0x505464c6  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF44], eax; call esi 
0x505464d8  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF48], eax; call esi 
0x505464ea  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF4C], eax; call esi 
0x505464fc  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF50], eax; call esi 
0x50546532  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF5C], eax; call esi 
0x50546544  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF60], eax; call esi 
0x50546556  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF64], eax; call esi 
0x50546568  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF68], eax; call esi 
0x5054657a  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF6C], eax; call esi 
0x5054658c  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF70], eax; call esi 
0x5054659e  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF74], eax; call esi 
0x505465b0  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF78], eax; call esi 
0x505465c2  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF7C], eax; call esi 
0x505465e6  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF80], eax; call esi 
0x505465f8  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF84], eax; call esi 
0x5054661c  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF8C], eax; call esi 
0x5054662e  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF90], eax; call esi 
0x50546640  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF94], eax; call esi 
0x50546652  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF98], eax; call esi 
0x50546664  # push ebp; push eax; push [0x5055E078]; mov [0x5055DF9C], eax; call esi 
0x50546688  # push ebp; push eax; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x5054669a  # push ebp; push eax; push [0x5055E078]; mov [0x5055DFA8], eax; call esi 
0x505466ac  # push ebp; push eax; push [0x5055E078]; mov [0x5055DFAC], eax; call esi 
0x505465d4  # push ebp; push eax; push [0x5055E078]; mov [0x5055DFB0], eax; call esi 
0x505466be  # push ebp; push eax; push [0x5055E078]; mov [0x5055DFB4], eax; call esi 
0x505466d0  # push ebp; push eax; push [0x5055E078]; mov [0x5055DFB8], eax; call esi 
0x50546513  # push ebp; push eax; push [0x5055E078]; call esi 
0x5053774a  # push ebp; push eax; push [0x50555FB4]; call esi; call eax 
0x5053774a  # push ebp; push eax; push [0x50555FB4]; call esi 
0x5053d6ca  # push ebp; push eax; push [eax+0x10]; push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x505466f8  # push ebp; push eax; push [ebp+0x0B]; call [0x5054A184] 
0x5050d858  # push ebp; push eax; push [ebp-0x7C]; push [eax]; call edi 
0x50546706  # push ebp; push eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x505374c7  # push ebp; push eax; push [ebp-0x1C]; call ebx 
0x50537456  # push ebp; push eax; jmp [ecx+0x50555FB4] 
0x50506639  # push ebp; push eax; call ebx 
0x50506813  # push ebp; push eax; call esi; cmp eax, edi; je 0x5050683B; call eax 
0x505466db  # push ebp; push eax; call esi; mov [0x5055E110], eax; push 0x5055E080; call [0x5054A15C] 
0x50537336  # push ebp; push eax; call esi; call eax 
0x505010df  # push ebp; push eax; call esi 
0x505361e1  # push ebp; push eax; call edi 
0x5050f8d1  # push ebp; push ebx; push esi; call [0x5054A09C] 
0x5052e748  # push ebp; mov byte [edx+0x50], dl; call [ecx+0x08] 
0x5052f23f  # push ebp; mov ebp, esp; push ecx; push ecx; call [0x5054A188] 
0x50537311  # push ebp; mov ebp, esp; push esi; push [0x50555FB4]; mov esi, [0x5054A030]; call esi 
0x50537a4d  # push ebp; mov ebp, esp; push edi; mov edi, 0x000003E8; push edi; call [0x5054A048] 
0x50537aa6  # push ebp; mov ebp, esp; push 0x50550F0C; call [0x5054A1B0] 
0x5052f169  # push ebp; mov ebp, esp; sub esp, 0x1C; lea eax, [ebp-0x1C]; push eax; call [0x5054A120] 
0x5052f1a3  # push ebp; mov ebp, esp; sub esp, 0x40; lea eax, [ebp-0x40]; push eax; call [0x5054A134] 
0x5053e09b  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; mov [0x5055DE7C], eax; pop ebp; ret 
0x50541299  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; mov [0x5055DE9C], eax; pop ebp; ret 
0x50538a27  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; mov [0x5055D6A0], eax; pop ebp; ret 
0x505412a8  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; mov [0x5055DEA8], eax; pop ebp; ret 
0x505412b7  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; mov [0x5055DEAC], eax; pop ebp; ret 
0x50538c26  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; push [0x505560B0+eax*8]; call [0x5054A024] 
0x5052f2d5  # push ebp; lea eax, [esi+0x24]; push eax; push [esi]; call [0x5054A0C0] 
0x5050d5c1  # push ebp; lea eax, [edi+0x000006A0]; push eax; lea eax, [esi+0x14]; push eax; call ebx 
0x5050d5cf  # push ebp; lea eax, [edi+0x000008A0]; push eax; lea eax, [esi+0x00000214]; push eax; call ebx 
0x5051f04c  # push ebp; pushfd; push edx; push edi; push eax; call [ecx+0x08] 
0x5053ec3c  # push ebp; mov ch, 0xFF; call [ebx+0x53] 
0x505268e9  # push ebp; loopne 0x5052693E; mov byte [ebp-0x20], 0x05; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x50542292  # push ebp; cld; pop edi; pop esi; leave; ret 
0x5052d7ae  # push esi; add byte [eax], al; add esp, 0x28; leave; ret 
0x5051ccb6  # push esi; add [eax], eax; leave; ret 
0x50535bc8  # push esi; add [ebx], ebp; retn 0x1174 
0x50535b43  # push esi; add [ebx], ebp; retn 0x1574 
0x5050cc76  # push esi; add al, byte [eax]; leave; retn 0x0008 
0x50535b64  # push esi; add ch, byte [ebx]; retn 0x1574 
0x50515112  # push esi; add al, 0x53; push [ebp+0x0C]; push [ebp+0x08]; call [esi+0x04] 
0x5051625c  # push esi; add al, 0x6A; add [ebp+0x53501045], ecx; call [esi+0x04] 
0x5051511c  # push esi; add al, 0x83; les ebx, [eax]; leave; ret 
0x50516277  # push esi; add al, 0xFF; jne 0x50516290; push ebx; call [esi+0x08] 
0x505162a0  # push esi; add al, 0xFF; jbe 0x505162B1; push [ebp+0x14]; push ebx; call [esi+0x04] 
0x5052a157  # push esi; add eax, 0x0B08E0C1; retn 0xB60F 
0x50515f4d  # push esi; or byte [esi-0x18], dl; adc [edx+0x00], ebp; add byte [ebx+0x5E5F10C4], al; pop ebx; ret 
0x505162b5  # push esi; or byte [ebx+0x5B5E20C4], al; pop ebp; ret 
0x5052a973  # push esi; or [ebp-0x00010F7B], ecx; call [eax+0x0F] 
0x50522905  # push esi; or al, 0x74; or byte [ebx], bh; retn 0x0474 
0x5051cd23  # push esi; or al, 0x88; inc esp; adc edi, edi; pop edi; ret 
0x5051cd76  # push esi; or al, 0x88; inc esp; adc edi, edi; ret 
0x50523a18  # push esi; adc al, 0x74; or byte [ebx], bh; retn 0x0474 
0x50515261  # push esi; sbb byte [eax+0x5FFF1144], cl; ret 
0x50523a13  # push esi; sbb al, 0x74; or eax, 0x74145639; or byte [ebx], bh; retn 0x0474 
0x50546b10  # push esi; xor edi, edi; call [0x5054A18C] 
0x5050377f  # push esi; cmp [eax+edi*4], ebx; je 0x505037A1; lea esi, [eax+edi*4]; call [0x5054A044] 
0x50501307  # push esi; cmp [ebp+0x08], eax; je 0x5050132D; push [ebp+0x08]; call [0x5054A040] 
0x50504c15  # push esi; cmp [ebp+0x0C], eax; je 0x50504C3B; push [ebp+0x0C]; call [0x5054A040] 
0x50503d2d  # push esi; cmp [ebp+0x0C], ebx; je 0x50503DA5; lea esi, [edi+0x000000DC]; or [esi], 0x08; call [0x5054A188] 
0x505078de  # push esi; push eax; push esi; call [0x5055CA24] 
0x50506fb9  # push esi; push eax; call [0x5055CA08] 
0x50501173  # push esi; push eax; call [0x5054A02C]; push esi; push 0x5055C944; call [0x5054A18C] 
0x50501173  # push esi; push eax; call [0x5054A02C] 
0x5050c6d3  # push esi; push eax; call [0x5054A04C] 
0x50536360  # push esi; push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x5053829c  # push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x50509517  # push esi; push ebx; call [0x5054A04C]; push ebx; call edi 
0x50509517  # push esi; push ebx; call [0x5054A04C] 
0x505070f2  # push esi; push ebx; call [0x5054A0A4] 
0x50527306  # push esi; push ebx; call [eax+0x18] 
0x50533d9c  # push esi; push ebx; call [ebp+0x14] 
0x50539f7d  # push esi; push ebx; push [ebp+0x20]; call [0x5054A190] 
0x50531a8e  # push esi; push ebx; call eax 
0x5050af6d  # push esi; push ebp; push eax; push [eax]; push ebx; call [0x5054A0B8] 
0x5050d857  # push esi; push ebp; push eax; push [ebp-0x7C]; push [eax]; call edi 
0x50507112  # push esi; push esi; push esi; push 0x00000004; push eax; call [0x5054A0A0] 
0x505070ee  # push esi; push esi; push 0x00000002; push esi; push ebx; call [0x5054A0A4] 
0x50507113  # push esi; push esi; push 0x00000004; push eax; call [0x5054A0A0] 
0x505071dd  # push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x50509569  # push esi; push esi; call [0x5054A240] 
0x5050969c  # push esi; push esi; call [0x5054A190] 
0x5050787d  # push esi; push esi; call edi 
0x505010ae  # push esi; push edi; mov edi, [0x5054A0D4]; mov esi, 0x5055520C; push esi; call edi 
0x5053778f  # push esi; push edi; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x50513e4b  # push esi; push edi; mov edi, 0x50555CA4; push edi; call [0x5054A0D4] 
0x5050b119  # push esi; push edi; call [0x5054A03C] 
0x5050298b  # push esi; push edi; call [0x5054A04C]; push edi; call [0x5054A03C] 
0x5050298b  # push esi; push edi; call [0x5054A04C] 
0x5050dbde  # push esi; push edi; call [0x5054A050] 
0x5053755f  # push esi; push edi; call [0x5054A0E4] 
0x505277d0  # push esi; push edi; call [eax+0x14] 
0x50526716  # push esi; push edi; call [eax+0x18] 
0x50533db4  # push esi; push edi; call [ebp+0x14] 
0x5054740f  # push esi; push edi; push [ebp+0x0C]; push [ebp+0x08]; push 0xFFFFFFFF; call eax 
0x50539f54  # push esi; push edi; push [ebp-0x0C]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5054A200] 
0x50501231  # push esi; push 0x00000400; push eax; push [0x5055C93C]; push 0x00001A00; call [0x5054A034] 
0x5050117b  # push esi; push 0x5055C944; call [0x5054A18C]; push esi; call [0x5054A028] 
0x5050117b  # push esi; push 0x5055C944; call [0x5054A18C] 
0x505413bf  # push esi; push 0x50551068; push esi; call [0x5054A230] 
0x50502faf  # push esi; push 0x00003A98; call [0x5054A048] 
0x50509684  # push esi; push 0x0000FDE9; call [0x5054A240] 
0x5050957d  # push esi; push 0x0000FDE9; call [0x5054A190] 
0x50515c75  # push esi; push 0x00000000; push 0x00000000; push edi; call [edi+0x00000244] 
0x5053df4e  # push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x505364b0  # push esi; push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x505361da  # push esi; push 0x00000000; push [0x5055D69C]; call edi 
0x505070c8  # push esi; push 0x00000001; push 0x80000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x505070ef  # push esi; push 0x00000002; push esi; push ebx; call [0x5054A0A4] 
0x50507114  # push esi; push 0x00000004; push eax; call [0x5054A0A0] 
0x50540ed5  # push esi; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50542829  # push esi; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x505071de  # push esi; push 0x0000000A; call [0x5055CA00] 
0x50507877  # push esi; push 0xFFFFFFFF; push [ebp+0x0C]; push esi; push esi; call edi 
0x50546cbf  # push esi; je 0x50546CD2; push esi; call [0x5055DF10]; push eax; call [0x5055DFE4] 
0x50546cbf  # push esi; je 0x50546CD2; push esi; call [0x5055DF10] 
0x50549127  # push esi; je 0x50549164; push [ebp+0x0C]; call [0x5054A03C] 
0x50508337  # push esi; add eax, 0x28; push eax; call edi 
0x50510ffa  # push esi; add eax, 0x34; push eax; push 0x00000040; call [0x5054A100] 
0x5050d978  # push esi; test ebx, ebx; je 0x5050D988; push ebx; call [0x5054A03C] 
0x50508408  # push esi; mov [ecx+0x14], eax; call ebx 
0x50508424  # push esi; mov [ecx+0x18], eax; call ebx 
0x50508440  # push esi; mov [ecx+0x1C], eax; call ebx 
0x5050845c  # push esi; mov [ecx+0x20], eax; call ebx 
0x5052dcb5  # push esi; mov [esi+0x54], eax; mov [esi+0x58], ebx; mov [esi+0x5C], edi; call [esi+0x48] 
0x5050f8a4  # push esi; mov [ebp-0x20], ebx; call [0x5054A0A8] 
0x50506a48  # push esi; mov [eax+0x10], esi; call [0x5054A03C] 
0x50506ca5  # push esi; mov [eax+0x10], esi; call [0x5054A040] 
0x50506a86  # push esi; mov [eax+0x14], esi; call [0x5054A03C] 
0x50506ce3  # push esi; mov [eax+0x14], esi; call [0x5054A040] 
0x50506ac4  # push esi; mov [eax+0x18], esi; call [0x5054A03C] 
0x50506d21  # push esi; mov [eax+0x18], esi; call [0x5054A040] 
0x50506b02  # push esi; mov [eax+0x1C], esi; call [0x5054A03C] 
0x50506d5f  # push esi; mov [eax+0x1C], esi; call [0x5054A040] 
0x50506b40  # push esi; mov [eax+0x20], esi; call [0x5054A03C] 
0x50506d9d  # push esi; mov [eax+0x20], esi; call [0x5054A040] 
0x50506b7c  # push esi; mov [eax+0x24], esi; call [0x5054A03C] 
0x50506dd9  # push esi; mov [eax+0x24], esi; call [0x5054A040] 
0x5050d8b7  # push esi; mov [ebp-0x74], edi; call [0x5054A0C0]; push esi; mov edi, eax; call [0x5054A060] 
0x5050d8b7  # push esi; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x5052e4d8  # push esi; mov eax, [esi]; call [eax+0x04] 
0x5050ff94  # push esi; mov esi, [0x5054A03C]; test ebx, ebx; je 0x5050FFAE; push ebx; call esi 
0x50548e27  # push esi; mov esi, [0x5054A03C]; call esi 
0x505399d5  # push esi; mov esi, [0x5054A15C]; push edi; mov edi, [ebp+0x08]; push edi; call esi 
0x5050104c  # push esi; mov esi, [0x5054A15C]; push edi; mov edi, 0x5055520C; push edi; call esi 
0x50513e19  # push esi; mov esi, [0x5054A15C]; push edi; mov edi, 0x50555CA4; push edi; call esi 
0x50539a70  # push esi; mov esi, [0x5054A0D4]; push edi; call esi 
0x50506107  # push esi; mov eax, [ebp-0x04]; cmp [eax+0x10], edi; je 0x5050614A; push [eax+0x10]; call [0x5054A03C] 
0x5051623b  # push esi; mov esi, [eax+0x18]; call [esi] 
0x5051e37c  # push esi; mov esi, [esp+0x08]; test esi, esi; je 0x5051E394; push [esi]; call [0x5054A060] 
0x5052da50  # push esi; mov esi, [esp+0x08]; mov eax, [esi+0x08]; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5051153f  # push esi; mov esi, eax; test esi, esi; jne 0x50511548; pop esi; ret 
0x5050d8c1  # push esi; mov edi, eax; call [0x5054A060] 
0x5050f7a0  # push esi; lea eax, [ebp-0x1C]; push eax; call [0x5054A0B8] 
0x50513a6a  # push esi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x505388fe  # push esi; lea eax, [ebp-0x08]; push eax; call [0x5054A1AC] 
0x505108b8  # push esi; lea eax, [ebp+0x000002F4]; push eax; call [0x5054A050] 
0x50510810  # push esi; lea eax, [ebp+0x000004F4]; push eax; call [0x5054A050] 
0x50506cd2  # push esi; mov [0x5650FFFF], eax; call [0x5054A038] 
0x5054671d  # push esi; mov esp, 0xC583FFFE; insb; leave; retn 0x000C 
0x50507313  # push esi; mov [ebp-0x0080], 0x00000200; call [0x5055CA30] 
0x50546c97  # push esi; mov [ebp-0x04], 0x00000004; call eax 
0x5051ab9a  # push esi; call [eax] 
0x5051e25b  # push esi; call [0x5054A10C] 
0x50546cc2  # push esi; call [0x5055DF10]; push eax; call [0x5055DFE4] 
0x50546cc2  # push esi; call [0x5055DF10] 
0x50535fea  # push esi; call [0x5054A020]; pop esi; pop ebp; ret 
0x50535fea  # push esi; call [0x5054A020] 
0x505078e0  # push esi; call [0x5055CA24] 
0x505011e1  # push esi; call [0x5054A028]; pop esi; retn 0x0004 
0x50501187  # push esi; call [0x5054A028]; mov eax, esi; pop esi; ret 
0x50501187  # push esi; call [0x5054A028] 
0x505413c5  # push esi; call [0x5054A230] 
0x50506c99  # push esi; call [0x5054A038] 
0x505093a1  # push esi; call [0x5054A03C] 
0x5050956a  # push esi; call [0x5054A240] 
0x50502bbe  # push esi; call [0x5054A048] 
0x5054929f  # push esi; call [0x5054A04C]; push esi; call [0x5054A03C] 
0x5051355d  # push esi; call [0x5054A04C] 
0x505083ff  # push esi; call [0x5054A050]; mov ecx, [edi]; push esi; mov [ecx+0x14], eax; call ebx 
0x5050841b  # push esi; call [0x5054A050]; mov ecx, [edi]; push esi; mov [ecx+0x18], eax; call ebx 
0x50508437  # push esi; call [0x5054A050]; mov ecx, [edi]; push esi; mov [ecx+0x1C], eax; call ebx 
0x50508453  # push esi; call [0x5054A050]; mov ecx, [edi]; push esi; mov [ecx+0x20], eax; call ebx 
0x50506a3c  # push esi; call [0x5054A050] 
0x5053944c  # push esi; call [0x5054A15C] 
0x50503d8d  # push esi; call [0x5054A060] 
0x5050f621  # push esi; call [0x5054A260] 
0x50503d86  # push esi; call [0x5054A064]; push esi; call [0x5054A060] 
0x50503d86  # push esi; call [0x5054A064] 
0x50503d7f  # push esi; call [0x5054A068]; push esi; call [0x5054A064]; push esi; call [0x5054A060] 
0x50503d7f  # push esi; call [0x5054A068]; push esi; call [0x5054A064] 
0x50503d7f  # push esi; call [0x5054A068] 
0x50511095  # push esi; call [0x5054A070] 
0x5054274b  # push esi; call [0x5054A178]; push eax; call [0x5054A190] 
0x5054274b  # push esi; call [0x5054A178] 
0x5050761b  # push esi; call [0x5055C988] 
0x5050969d  # push esi; call [0x5054A190] 
0x5050f8d3  # push esi; call [0x5054A09C]; mov ebx, eax; cmp ebx, 0xFFFFFFFF; jne 0x5050F8F9; call [0x5054A0E4] 
0x5050f8d3  # push esi; call [0x5054A09C] 
0x5050f567  # push esi; call [0x5054A0A8] 
0x5053734d  # push esi; call [0x5054A1B0] 
0x50513a55  # push esi; call [0x5054A0CC] 
0x50538443  # push esi; call [0x5054A1CC] 
0x50546b21  # push esi; call [0x5054A0D4]; mov eax, [0x5055DFC4]; test eax, eax; je 0x50546B35; call eax 
0x50503dbb  # push esi; call [0x5054A0D4] 
0x505334a9  # push esi; call [0x5054A0F8] 
0x50517fb0  # push esi; push [edx]; mov edx, [ebp-0x4C]; push [edx]; push eax; call [ecx+0x28] 
0x505112f6  # push esi; push [0x50555CA4]; push 0x50555CA4; call [0x5054A18C] 
0x50537314  # push esi; push [0x50555FB4]; mov esi, [0x5054A030]; call esi 
0x50537428  # push esi; push [0x50555FB4]; call [0x5054A02C]; mov eax, esi; pop esi; ret 
0x50537428  # push esi; push [0x50555FB4]; call [0x5054A02C] 
0x50537407  # push esi; push [0x50555FB4]; call [0x5054A030] 
0x50526685  # push esi; call [eax+0x04]; add esp, 0x10; pop edi; pop esi; ret 
0x5051f07d  # push esi; call [eax+0x04] 
0x5052dcd7  # push esi; call [eax+0x08]; add esp, 0x10; pop esi; pop ebp; ret 
0x5051f241  # push esi; call [eax+0x08] 
0x5052daeb  # push esi; call [eax+0x0C]; add esp, 0x0C; pop esi; pop ebp; ret 
0x5052daeb  # push esi; call [eax+0x0C] 
0x5051f13e  # push esi; call [eax+0x10] 
0x5052666c  # push esi; call [eax+0x18] 
0x50526baf  # push esi; call [eax+0x1C] 
0x5051f214  # push esi; call [ecx+0x04] 
0x5051f1b1  # push esi; call [ecx+0x0C] 
0x505266e8  # push esi; call [ecx+0x1C]; pop ecx; pop ecx; pop esi; ret 
0x505266b4  # push esi; call [ecx+0x1C]; add esp, 0x0C; pop esi; ret 
0x505266b4  # push esi; call [ecx+0x1C] 
0x50533c71  # push esi; call [ebp+0x10] 
0x50508c3b  # push esi; push [eax+0x48]; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50515c5c  # push esi; push [esp+0x0C]; push [esp+0x0C]; push edi; call [edi+0x00000248] 
0x5050a22c  # push esi; push [ebp+0x0C]; call [0x5054A04C] 
0x50541add  # push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call [0x5054A190] 
0x50541b03  # push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call ebx 
0x50507136  # push esi; push [ebp-0x0C]; call [0x5054A09C] 
0x5050f06b  # push esi; push [ebp-0x04]; call [0x5054A0D0] 
0x50517f62  # push esi; push [edi+0x0C]; call [eax+0x08] 
0x5052f7db  # push esi; call [esi+0x00001030] 
0x50508b78  # push esi; push [ebx+0x00003800]; mov [ebx+0x00003804], eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50508bd7  # push esi; push [ebx+0x00003808]; mov [ebx+0x0000380C], eax; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50507336  # push esi; push [edi+0x000037F4]; call [0x5055CA10] 
0x50518dec  # push esi; call eax 
0x5050529e  # push esi; call ebx 
0x505010bb  # push esi; call edi; test eax, eax; jne 0x50501107; push esi; call edi 
0x505010bb  # push esi; call edi 
0x5051cbd6  # push edi; add [eax], eax; add esp, 0x0C; pop esi; ret 
0x50524372  # push edi; add al, 0x3B; ret 
0x50523fca  # push edi; sbb al, byte [eax]; add byte [ebx], al; ret 
0x50538348  # push edi; xor ebx, ebx; xor edi, edi; cmp eax, ebx; jne 0x5053837F; call esi 
0x50502fd7  # push edi; xor edi, edi; inc edi; call [0x5054A188] 
0x5050939a  # push edi; xor edi, edi; test esi, esi; je 0x505093B0; push esi; call [0x5054A03C] 
0x5051f212  # push edi; push eax; push esi; call [ecx+0x04] 
0x505485ac  # push edi; push eax; test bl, 0x01; je 0x50548735; push 0x80000001; call [0x5054A000] 
0x50548a45  # push edi; push eax; test bl, 0x01; je 0x50548A65; push 0x80000001; call [0x5054A004] 
0x5051f092  # push edi; push eax; call [ecx+0x04] 
0x5051f04f  # push edi; push eax; call [ecx+0x08] 
0x50515d33  # push edi; push eax; call [ecx+0x1C] 
0x5051f07b  # push edi; push edx; push esi; call [eax+0x04] 
0x5050995e  # push edi; push ebx; push eax; call [0x5054A04C] 
0x505383c0  # push edi; push ebx; push ebx; mov [ebp-0x0C], eax; call esi 
0x505383e6  # push edi; push ebx; push ebx; call esi 
0x50511011  # push edi; push ebx; lea edi, [esi+0x20]; push edi; call [0x5054A050] 
0x505275f8  # push edi; push ebx; call [eax+0x08] 
0x50533d84  # push edi; push ebx; call [ebp+0x14] 
0x50531a8d  # push edi; push esi; push ebx; call eax 
0x5051bf72  # push edi; push esi; call [eax] 
0x5051e23d  # push edi; push esi; call [0x5054A09C] 
0x5051f222  # push edi; push esi; call [eax+0x04] 
0x5052666b  # push edi; push esi; call [eax+0x18] 
0x50526bae  # push edi; push esi; call [eax+0x1C] 
0x50541b02  # push edi; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call ebx 
0x5051f091  # push edi; push edi; push eax; call [ecx+0x04] 
0x5051f221  # push edi; push edi; push esi; call [eax+0x04] 
0x5052f5f6  # push edi; push edi; push edi; push edi; mov [esi+0x04], eax; call ebx 
0x5052f560  # push edi; push edi; push edi; push edi; mov [esi+0x08], eax; call ebx 
0x5052f5f7  # push edi; push edi; push edi; mov [esi+0x04], eax; call ebx 
0x5052f561  # push edi; push edi; push edi; mov [esi+0x08], eax; call ebx 
0x5050fd18  # push edi; push edi; push edi; lea eax, [ebp-0x48]; push eax; call esi 
0x5050fb96  # push edi; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5052f557  # push edi; push edi; mov [esi], edi; mov [esi+0x04], eax; call ebx 
0x5052f5f8  # push edi; push edi; mov [esi+0x04], eax; call ebx 
0x5052f562  # push edi; push edi; mov [esi+0x08], eax; call ebx 
0x5053a919  # push edi; push edi; mov eax, [ebp+0x0C]; mov eax, [eax]; push [eax+ebx]; call [0x5054A20C] 
0x5050fd19  # push edi; push edi; lea eax, [ebp-0x48]; push eax; call esi 
0x5052f5ba  # push edi; push edi; call [0x5054A06C] 
0x505436a8  # push edi; push edi; call [0x5054A16C] 
0x5050fc2a  # push edi; push edi; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x50510213  # push edi; arpl di, di; dec [ecx+0x5D39F845]; adc byte [esi+ebx-0x01], dh; jne 0x50510232; call edi 
0x5050ba9e  # push edi; mov word [esi+0x2A], ax; call ebx 
0x5050b364  # push edi; mov word [esi+0x2E], ax; call ebx 
0x5050bdfc  # push edi; mov word [esi+0x30], ax; call [0x5054A0B8] 
0x5050fb97  # push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x50539d8f  # push edi; push 0x50551068; push 0x00000100; push ebx; call [0x5054A200] 
0x50531d54  # push edi; push 0x5055D484; push ebx; push [ebp-0x34]; mov edi, [0x5054A190]; call edi 
0x50531ae0  # push edi; push 0x00000000; push ebx; call eax 
0x505075b4  # push edi; push 0x00000001; push eax; call [0x5055CA18] 
0x5052d962  # push edi; push 0x00000001; push eax; call [ecx+0x1C] 
0x5050f55f  # push edi; push 0x00000001; push 0x80000000; push esi; call [0x5054A0A8] 
0x5050d891  # push edi; push 0x00000001; push 0x80000000; push [ebp-0x74]; call [0x5054A0A8] 
0x50531873  # push edi; push 0x00000001; push [ebp+0x28]; call ebx 
0x5053186b  # push edi; push 0x00000001; push [ebp-0x0C]; call ebx 
0x505075ff  # push edi; push 0x00000002; push 0x5054A5F4; push edi; call [0x5055C984] 
0x5054243a  # push edi; jnl 0x5054243C; dec [ebx+0x5B5E5F00]; leave; ret 
0x5050d31d  # push edi; test ebx, ebx; je 0x5050D446; mov edi, [0x5054A03C]; push ebx; call edi 
0x5051ee2b  # push edi; test ebx, ebx; jne 0x5051EE36; call [0x5054A118] 
0x5052f558  # push edi; mov [esi], edi; mov [esi+0x04], eax; call ebx 
0x505477bd  # push edi; mov [ebp-0x58], eax; cmp esi, ebx; je 0x505478CE; push esi; call [0x5054A03C] 
0x5052f5f9  # push edi; mov [esi+0x04], eax; call ebx 
0x5052f563  # push edi; mov [esi+0x08], eax; call ebx 
0x50506ec6  # push edi; mov [esi+0x10], eax; call ebp 
0x50506edf  # push edi; mov [esi+0x14], eax; call ebp 
0x50506ef8  # push edi; mov [esi+0x18], eax; call ebp 
0x50506f11  # push edi; mov [esi+0x1C], eax; call ebp 
0x50506f2a  # push edi; mov [esi+0x20], eax; call ebp 
0x50506f43  # push edi; mov [esi+0x24], eax; call ebp 
0x50510790  # push edi; mov edi, [0x5054A03C]; test esi, esi; je 0x505107A7; push esi; call edi 
0x50503acc  # push edi; mov edi, [0x5054A040]; cmp [ebp+0x10], ebx; je 0x50503AF6; push [ebp+0x10]; call edi 
0x50547f8b  # push edi; mov edi, [0x5054A260]; call edi 
0x505010af  # push edi; mov edi, [0x5054A0D4]; mov esi, 0x5055520C; push esi; call edi 
0x5053a91a  # push edi; mov eax, [ebp+0x0C]; mov eax, [eax]; push [eax+ebx]; call [0x5054A20C] 
0x505399dc  # push edi; mov edi, [ebp+0x08]; push edi; call esi 
0x50547cad  # push edi; mov edi, [ebp+0x08]; test edi, edi; je 0x50547CBC; push edi; call esi 
0x50509b11  # push edi; mov edi, [ebp+0x0C]; test edi, edi; je 0x50509B20; push edi; call esi 
0x50504586  # push edi; lea eax, [ebp+0x08]; push eax; call [0x5054A04C] 
0x5050fd1a  # push edi; lea eax, [ebp-0x48]; push eax; call esi 
0x5053a991  # push edi; lea eax, [ebp-0x28]; push eax; lea eax, [ebp-0x58]; push eax; call [0x5054A0C8] 
0x5051366a  # push edi; lea eax, [ebp-0x10]; push eax; call [0x5054A0B4] 
0x50511296  # push edi; lea ebx, [edi+0x01]; call [0x5054A03C] 
0x5053924c  # push edi; lea eax, [ebp-0x00000518]; push eax; push [esi+0x04]; call [0x5054A1EC] 
0x5050ebbd  # push edi; lea eax, [ebp-0x00000310]; push eax; call [0x5054A0B4] 
0x5050ec53  # push edi; lea eax, [ebp-0x00000308]; push eax; call [0x5054A0B4] 
0x50501e97  # push edi; lea edi, [esi+0x00000108]; cmp [edi], ebx; je 0x50501EB5; call [0x5054A188] 
0x505377c5  # push edi; mov [0x5055D544], eax; call esi 
0x505377d2  # push edi; mov [0x5055D548], eax; call esi 
0x505377df  # push edi; mov [0x5055D54C], eax; call esi 
0x50542986  # push edi; mov [0x5055DEB8], eax; call esi 
0x5054299b  # push edi; mov [0x5055DEBC], eax; call esi 
0x505429b0  # push edi; mov [0x5055DEC0], eax; call esi 
0x50537790  # push edi; mov esi, 0x50550EA4; push esi; call [0x5054A1B0] 
0x50501053  # push edi; mov edi, 0x5055520C; push edi; call esi 
0x50513e4c  # push edi; mov edi, 0x50555CA4; push edi; call [0x5054A0D4] 
0x50537a50  # push edi; mov edi, 0x000003E8; push edi; call [0x5054A048]; push [ebp+0x08]; call [0x5054A1B0] 
0x50537a50  # push edi; mov edi, 0x000003E8; push edi; call [0x5054A048] 
0x5050c6f8  # push edi; mov byte [eax], 0x00; call [0x5054A03C] 
0x5053d7ad  # push edi; call [0x5054A220] 
0x505375ca  # push edi; call [0x5054A028]; pop edi; mov eax, esi; pop esi; ret 
0x505375ca  # push edi; call [0x5054A028] 
0x50508216  # push edi; call [0x5055CA2C] 
0x50503710  # push edi; call [0x5054A038] 
0x505012b6  # push edi; call [0x5054A03C] 
0x50537a56  # push edi; call [0x5054A048]; push [ebp+0x08]; call [0x5054A1B0] 
0x50537a56  # push edi; call [0x5054A048] 
0x5050298c  # push edi; call [0x5054A04C]; push edi; call [0x5054A03C] 
0x5050298c  # push edi; call [0x5054A04C] 
0x50506ebf  # push edi; call [0x5054A050]; push edi; mov [esi+0x10], eax; call ebp 
0x50506ed8  # push edi; call [0x5054A050]; push edi; mov [esi+0x14], eax; call ebp 
0x50506ef1  # push edi; call [0x5054A050]; push edi; mov [esi+0x18], eax; call ebp 
0x50506f23  # push edi; call [0x5054A050]; push edi; mov [esi+0x20], eax; call ebp 
0x50506f3c  # push edi; call [0x5054A050]; push edi; mov [esi+0x24], eax; call ebp 
0x50506ebf  # push edi; call [0x5054A050] 
0x505010fe  # push edi; call [0x5054A158] 
0x50509849  # push edi; call [0x5054A260] 
0x50543dc3  # push edi; call [0x5054A168] 
0x5052f5bb  # push edi; call [0x5054A06C] 
0x505436a9  # push edi; call [0x5054A16C] 
0x50547d68  # push edi; call [0x5054A26C] 
0x50501959  # push edi; call [0x5054A280] 
0x50507607  # push edi; call [0x5055C984] 
0x50513e75  # push edi; call [0x5054A18C] 
0x5050be1b  # push edi; call [0x5054A0B8] 
0x50537f38  # push edi; call [0x5054A1C0] 
0x5050eba2  # push edi; call [0x5054A0CC] 
0x50513e52  # push edi; call [0x5054A0D4] 
0x505383fe  # push edi; call [0x5054A1D4] 
0x50537560  # push edi; call [0x5054A0E4] 
0x5053956e  # push edi; call [0x5054A1EC] 
0x50546930  # push edi; push [0x5055E07C]; mov [0x5055DFFC], eax; call esi 
0x50546b04  # push edi; push [0x5055E084]; mov esi, 0x5055E084; push esi; xor edi, edi; call [0x5054A18C] 
0x50543e8f  # push edi; push [0x5055D69C]; call [0x5054A164] 
0x5053d757  # push edi; push [0x5055D69C]; call [0x5054A080] 
0x5053d7be  # push edi; push [0x5055D69C]; call [0x5054A084] 
0x5052f324  # push edi; push [esi]; call [0x5054A140] 
0x5052e237  # push edi; call [eax+0x04] 
0x50526732  # push edi; call [eax+0x08] 
0x50526cd8  # push edi; call [eax+0x14] 
0x50526717  # push edi; call [eax+0x18] 
0x50526728  # push edi; call [eax+0x1C] 
0x50526cbf  # push edi; call [eax+0x20] 
0x5052758a  # push edi; call [ecx+0x08] 
0x50526cfe  # push edi; call [ecx+0x1C] 
0x50533db5  # push edi; call [ebp+0x14] 
0x50541d64  # push edi; push [ebp+0x08]; lea eax, [ebp-0x04]; push eax; call esi 
0x50541ae1  # push edi; push [ebp+0x0C]; call [0x5054A190] 
0x5053b19a  # push edi; push [ebp+0x0C]; call [0x5054A0A8]; cmp eax, 0xFFFFFFFF; jne 0x5053B1DD; call [0x5054A0E4] 
0x5053b19a  # push edi; push [ebp+0x0C]; call [0x5054A0A8] 
0x50547410  # push edi; push [ebp+0x0C]; push [ebp+0x08]; push 0xFFFFFFFF; call eax 
0x50541b07  # push edi; push [ebp+0x0C]; call ebx 
0x5050a1c4  # push edi; push [ebp+0x0C]; call esi 
0x505437ee  # push edi; push [ebp+0x10]; push ebx; push 0x00000009; push [ebp+0x1C]; call esi 
0x5054258c  # push edi; push [ebp+0x10]; push 0x00000000; push [ebp+0x0C]; push eax; call [0x5054A0EC] 
0x50541dc0  # push edi; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x50547130  # push edi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5055DF4C] 
0x505470f7  # push edi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5053a077  # push edi; push [ebp+0x14]; push [ebp-0x0C]; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x505438d9  # push edi; push [ebp+0x18]; push [ebp-0x1C]; push 0x00000001; push [ebp+0x1C]; call esi 
0x505053d9  # push edi; push [ebp-0x30]; lea eax, [esi+0x00000194]; push eax; call ebx 
0x505438ec  # push edi; push [ebp-0x2C]; push [ebp-0x20]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5054A16C] 
0x505053cc  # push edi; push [ebp-0x24]; lea eax, [esi+0x00000114]; push eax; call ebx 
0x50541a6f  # push edi; push [ebp-0x24]; push [ebp-0x28]; push 0x00000001; push [ebp+0x08]; call ebx 
0x505053e6  # push edi; push [ebp-0x20]; lea eax, [esi+0x00000214]; push eax; call ebx 
0x5051fa1e  # push edi; push [ebp-0x1C]; push eax; call [eax+0x0C] 
0x5050c724  # push edi; push [ebp-0x10]; call [0x5054A04C] 
0x50539f55  # push edi; push [ebp-0x0C]; push [ebp+0x0C]; push [ebp+0x08]; call [0x5054A200] 
0x50539eb7  # push edi; push [ebp-0x0C]; push [ebp+0x0C]; push [ebp+0x08]; call esi 
0x5052f716  # push edi; push [esi+0x0C]; mov edi, [0x5054A060]; call edi; push [esi+0x08]; call edi 
0x5052f716  # push edi; push [esi+0x0C]; mov edi, [0x5054A060]; call edi 
0x50515c7a  # push edi; call [edi+0x00000244] 
0x50515c65  # push edi; call [edi+0x00000248] 
0x50511054  # push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x5050fc2b  # push edi; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x505051f9  # push edi; call ebx 
0x50501060  # push edi; call esi; push 0x5055C948; call [0x5054A160]; call [0x5054A184] 
0x50501060  # push edi; call esi; push 0x5055C948; call [0x5054A160] 
0x50513e2d  # push edi; call esi; push 0x00001388; push 0x5055CA4C; call [0x5054A108] 
0x505377bd  # push edi; call esi; push 0x50550EE4; push edi; mov [0x5055D544], eax; call esi 
0x50513e26  # push edi; call esi; test eax, eax; jne 0x50513E45; push edi; call esi 
0x50547cb5  # push edi; call esi; test eax, eax; jne 0x50547CD7; call [0x5054A274] 
0x50501059  # push edi; call esi; test eax, eax; jne 0x505010A9; push edi; call esi 
0x5050a1be  # push edi; call esi; push [ebp+0x10]; push edi; push [ebp+0x0C]; call esi 
0x50501059  # push edi; call esi 
0x50511377  # pop eax; add byte [eax], al; pop ecx; pop ecx; retn 0x0008 
0x50511366  # pop eax; add byte [eax], al; pop ecx; retn 0x0004 
0x505073d8  # pop eax; sbb al, 0x85; push [eax+esi+0x57]; call [0x5054A03C] 
0x50516432  # pop eax; push eax; call [ecx+0x04] 
0x50509784  # pop eax; push ebp; push eax; mov [ecx], eax; ret 
0x50543648  # pop eax; pop ecx; pop ebp; pop ecx; pop ebx; retn 0x0004 
0x5053a176  # pop eax; pop ebp; ret 
0x5052018f  # pop eax; pop esi; ret 
0x50540680  # pop eax; pop edi; pop esi; pop ebp; ret 
0x505167d2  # pop eax; test eax, eax; je 0x505167DB; mov eax, [eax+0x1C]; ret 
0x5051681f  # pop eax; test eax, eax; je 0x50516828; mov eax, [eax+0x24]; ret 
0x50521918  # pop eax; mov [eax+0x54], ecx; ret 
0x5052dcbb  # pop eax; mov [esi+0x5C], edi; call [esi+0x48] 
0x50541a15  # pop eax; lea eax, [ebp-0x18]; push eax; push [ebp+0x0C]; call esi 
0x505180e7  # pop eax; lea ecx, [ebp-0x44]; push ecx; push [edi+0x60]; call [eax+0x08] 
0x505180cb  # pop eax; lea ecx, [ebp-0x44]; push ecx; push [edi+0x60]; call [eax+0x0C] 
0x5050396c  # pop eax; mov al, byte [0x1B745054]; push [ebp+0x10]; call [0x5054A03C] 
0x50501101  # pop eax; mov eax, [0x0BEB5054]; jnl 0x50501112; push 0xFFFFFFFF; push esi; call [0x5054A18C] 
0x5050d3e0  # pop eax; lodsb; push esp; push eax; push eax; call [0x5054A260] 
0x5052702b  # pop eax; retn 0x5054 
0x50546529  # pop eax; fist word [ebp+0x50]; call esi 
0x50546a64  # pop eax; loopne 0x50546ABC; push eax; call esi 
0x50518079  # pop eax; call [eax] 
0x5051e87d  # pop ecx; add byte [eax], al; pop ecx; mov [0x5055CF2C], eax; ret 
0x5051e8ba  # pop ecx; add byte [eax], al; and [0x5055CF2C], 0x00000000; pop ecx; pop esi; ret 
0x50501594  # pop ecx; add byte [eax], al; test byte [esi+0x000000DC], 0x08; je 0x505015AB; push 0x5055C960; call [0x5054A0D4] 
0x5050a96a  # pop ecx; add [eax], eax; add byte [ebx], dh; imul bl; lock push [ebp+0x0C]; call ebx 
0x50507561  # pop ecx; add eax, 0x0000389C; push eax; call [0x5055C9A4] 
0x5051df57  # pop ecx; sbb eax, eax; inc eax; pop esi; pop ebp; ret 
0x5051eb1d  # pop ecx; sbb eax, eax; pop ecx; inc eax; ret 
0x50533adc  # pop ecx; and eax, esi; pop esi; pop ebp; ret 
0x505283a5  # pop ecx; and eax, 0x5054BC28; ret 
0x50526785  # pop ecx; xor eax, eax; inc eax; pop esi; ret 
0x50513195  # pop ecx; xor eax, eax; pop ebx; pop esi; retn 0x0008 
0x50542fae  # pop ecx; xor eax, eax; pop esi; pop ebp; ret 
0x50513fb0  # pop ecx; xor eax, eax; pop edi; pop esi; pop ebx; retn 0x0008 
0x505132a3  # pop ecx; xor eax, eax; pop edi; pop esi; retn 0x0008 
0x505375c7  # pop ecx; xor esi, esi; push edi; call [0x5054A028] 
0x50515d5b  # pop ecx; cmp eax, ebx; je 0x50515D6B; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5053843e  # pop ecx; cmp edi, ebx; jne 0x5053844F; push esi; call [0x5054A1CC] 
0x50536438  # pop ecx; cmp eax, 0xF08B0000; call [0x5054A0E4] 
0x5050b362  # pop ecx; inc edi; push edi; mov word [esi+0x2E], ax; call ebx 
0x5050db1a  # pop ecx; dec eax; add al, byte [eax]; leave; retn 0x000C 
0x505410f3  # pop ecx; dec eax; pop ebp; ret 
0x5053c274  # pop ecx; push eax; call [0x5054A21C]; test eax, eax; jne 0x5053C28B; call [0x5054A0E4] 
0x5053c274  # pop ecx; push eax; call [0x5054A21C] 
0x505424fd  # pop ecx; push eax; call [0x5054A23C] 
0x5053a693  # pop ecx; push eax; call [0x5054A060]; test eax, eax; jne 0x5053A6A9; call [0x5054A0E4] 
0x5053a693  # pop ecx; push eax; call [0x5054A060] 
0x5053e050  # pop ecx; push eax; push [esi]; push ebx; call [0x5054A0E8] 
0x5052f715  # pop ecx; push edi; push [esi+0x0C]; mov edi, [0x5054A060]; call edi 
0x5052719b  # pop ecx; pop ecx; xor eax, eax; inc eax; pop esi; ret 
0x50513194  # pop ecx; pop ecx; xor eax, eax; pop ebx; pop esi; retn 0x0008 
0x50542fad  # pop ecx; pop ecx; xor eax, eax; pop esi; pop ebp; ret 
0x505132a2  # pop ecx; pop ecx; xor eax, eax; pop edi; pop esi; retn 0x0008 
0x5051d9ff  # pop ecx; pop ecx; xor eax, eax; leave; ret 
0x5051c962  # pop ecx; pop ecx; pop ebp; ret 
0x5051d69a  # pop ecx; pop ecx; pop esi; pop ebx; ret 
0x50518eb2  # pop ecx; pop ecx; pop esi; ret 
0x5051990e  # pop ecx; pop ecx; pop esi; leave; ret 
0x5051abd0  # pop ecx; pop ecx; pop edi; pop ebx; pop esi; ret 
0x5052a447  # pop ecx; pop ecx; pop edi; pop ebp; ret 
0x50511d0f  # pop ecx; pop ecx; pop edi; pop esi; retn 0x0004 
0x50521d13  # pop ecx; pop ecx; pop edi; pop esi; ret 
0x505271c9  # pop ecx; pop ecx; jne 0x505271D1; xor eax, eax; pop esi; ret 
0x505170f9  # pop ecx; pop ecx; or eax, 0xFFFFFFFF; pop edi; pop esi; ret 
0x5051dae8  # pop ecx; pop ecx; or eax, 0xFFFFFFFF; pop edi; leave; ret 
0x5053efe3  # pop ecx; pop ecx; cmp eax, 0xFFFFFFFF; jne 0x5053EFED; or [esi], eax; ret 
0x5051dab6  # pop ecx; pop ecx; cmp edi, 0x08; jnbe 0x5051DB1A; jmp [0x5051DB3A+edi*4] 
0x5051f2d9  # pop ecx; pop ecx; test eax, eax; je 0x5051F2E3; mov eax, [eax+0x08]; ret 
0x50528384  # pop ecx; pop ecx; test eax, eax; jne 0x50528390; mov eax, 0x5054BCD4; ret 
0x5050ba07  # pop ecx; pop ecx; test eax, eax; jne 0x5050BA2C; push [esp+0x30]; call [0x5054A03C] 
0x50515ec6  # pop ecx; pop ecx; test eax, eax; jne 0x50515E99; pop ebx; ret 
0x5051f62e  # pop ecx; pop ecx; test edx, edx; jne 0x5051F635; ret 
0x5051e2ff  # pop ecx; pop ecx; mov [eax], esi; pop esi; ret 
0x50515d38  # pop ecx; pop ecx; mov [esi+0x000028F0], edi; ret 
0x50524218  # pop ecx; pop ecx; mov ecx, [esp+0x04]; mov [eax+0x04], ecx; ret 
0x505278ef  # pop ecx; pop ecx; mov eax, edi; pop edi; pop esi; ret 
0x5051137a  # pop ecx; pop ecx; retn 0x0008 
0x505115a2  # pop ecx; pop ecx; ret 
0x50524e6d  # pop ecx; pop ecx; mov [eax+0x04], 0x00001000; ret 
0x5052f80f  # pop ecx; pop ecx; mov [esi+0x18], 0x00000001; pop esi; ret 
0x50515826  # pop ecx; pop ecx; leave; ret 
0x5052f256  # pop ecx; pop ecx; call [0x5054A138] 
0x50531a1d  # pop ecx; pop ecx; call [0x5054A044] 
0x5052f225  # pop ecx; pop ecx; call [0x5054A188] 
0x50542496  # pop ecx; pop ecx; push [ebp-0x04]; push 0x00000000; call [0x5054A180] 
0x50531775  # pop ecx; pop ecx; push [esi+0x04]; call edi; push [esi+0x08]; call edi 
0x50531775  # pop ecx; pop ecx; push [esi+0x04]; call edi 
0x50516252  # pop ecx; pop ecx; push [esi+0x0C]; push [ebp+0x0C]; push ebx; call [esi+0x04] 
0x50531a19  # pop ecx; pop edx; add byte [eax], al; pop ecx; pop ecx; call [0x5054A044] 
0x505380c2  # pop ecx; pop ebx; pop edi; pop esi; ret 
0x50511b99  # pop ecx; pop ebx; pop edi; pop esi; leave; retn 0x000C 
0x50526c7b  # pop ecx; pop ebx; pop edi; pop esi; leave; ret 
0x5051e0e5  # pop ecx; pop ebx; lea eax, [eax+eax-0x01]; pop edi; pop esi; ret 
0x5054364b  # pop ecx; pop ebx; retn 0x0004 
0x50519725  # pop ecx; pop ebx; leave; ret 
0x50543649  # pop ecx; pop ebp; pop ecx; pop ebx; retn 0x0004 
0x50531b62  # pop ecx; pop ebp; retn 0x000C 
0x5051c963  # pop ecx; pop ebp; ret 
0x5051d69b  # pop ecx; pop esi; pop ebx; ret 
0x5051fb1c  # pop ecx; pop esi; pop ebp; ret 
0x50512f5c  # pop ecx; pop esi; pop edi; pop ebx; leave; retn 0x0008 
0x50513690  # pop ecx; pop esi; pop edi; pop ebx; leave; retn 0x000C 
0x505152c9  # pop ecx; pop esi; ret 
0x5051990f  # pop ecx; pop esi; leave; ret 
0x5051abd1  # pop ecx; pop edi; pop ebx; pop esi; ret 
0x5052a448  # pop ecx; pop edi; pop ebp; ret 
0x50513dfb  # pop ecx; pop edi; pop esi; pop ebx; pop ebp; ret 
0x50515971  # pop ecx; pop edi; pop esi; pop ebx; leave; ret 
0x50511d10  # pop ecx; pop edi; pop esi; retn 0x0004 
0x5051711c  # pop ecx; pop edi; pop esi; ret 
0x5051f3e0  # pop ecx; pop edi; mov eax, esi; pop esi; pop ebx; ret 
0x505151c7  # pop ecx; pop edi; ret 
0x505151f9  # pop ecx; pop edi; leave; ret 
0x50538f65  # pop ecx; push 0xC0000409; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538f65  # pop ecx; push 0xC0000409; call [0x5054A128] 
0x50538b3c  # pop ecx; push 0xC0000417; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538b3c  # pop ecx; push 0xC0000417; call [0x5054A128] 
0x50538f41  # pop ecx; push 0x00000000; call [0x5054A1A8]; push 0x50550FE0; call [0x5054A1A4] 
0x50538f41  # pop ecx; push 0x00000000; call [0x5054A1A8] 
0x505271ca  # pop ecx; jne 0x505271D1; xor eax, eax; pop esi; ret 
0x5053c3d6  # pop ecx; jne 0x5053C3DF; and eax, 0xFFFFFFDF; sub eax, 0x07; pop ebp; ret 
0x505374f3  # pop ecx; and [ebp-0x04], 0x00000000; push [esi+0x68]; call [0x5054A15C] 
0x50525a8d  # pop ecx; add eax, 0x04; ret 
0x505170fa  # pop ecx; or eax, 0xFFFFFFFF; pop edi; pop esi; ret 
0x5051dae9  # pop ecx; or eax, 0xFFFFFFFF; pop edi; leave; ret 
0x50514245  # pop ecx; cmp eax, 0x07; jnbe 0x5051427C; jmp [0x50514286+eax*4] 
0x505142e5  # pop ecx; cmp eax, 0x07; jnbe 0x5051432A; jmp [0x5051434A+eax*4] 
0x5053efe4  # pop ecx; cmp eax, 0xFFFFFFFF; jne 0x5053EFED; or [esi], eax; ret 
0x5051dab7  # pop ecx; cmp edi, 0x08; jnbe 0x5051DB1A; jmp [0x5051DB3A+edi*4] 
0x50538b6c  # pop ecx; test eax, eax; je 0x50538B74; pop ebp; jmp eax 
0x5051f2da  # pop ecx; test eax, eax; je 0x5051F2E3; mov eax, [eax+0x08]; ret 
0x50542a60  # pop ecx; test eax, eax; je 0x50542A6D; push [ebp-0x04]; call eax 
0x50537b52  # pop ecx; test eax, eax; je 0x50537B61; push [ebp+0x08]; call [0x50550E88] 
0x5053e0b8  # pop ecx; test eax, eax; je 0x5053E0CC; push [ebp+0x08]; call eax 
0x5053735e  # pop ecx; test eax, eax; je 0x5053737B; push 0x50550E94; push eax; call [0x5054A088] 
0x505373d9  # pop ecx; test eax, eax; je 0x505373F6; push 0x50550EC0; push eax; call [0x5054A088] 
0x50542a43  # pop ecx; test eax, eax; je 0x50542A6D; call eax 
0x5050c6f3  # pop ecx; test eax, eax; je 0x5050C71F; push edi; mov byte [eax], 0x00; call [0x5054A03C] 
0x50513c11  # pop ecx; test eax, eax; jne 0x50513C18; pop esi; ret 
0x50528385  # pop ecx; test eax, eax; jne 0x50528390; mov eax, 0x5054BCD4; ret 
0x5050ba08  # pop ecx; test eax, eax; jne 0x5050BA2C; push [esp+0x30]; call [0x5054A03C] 
0x50515ec7  # pop ecx; test eax, eax; jne 0x50515E99; pop ebx; ret 
0x50514746  # pop ecx; test eax, eax; jl 0x505147A2; call esi 
0x5051f62f  # pop ecx; test edx, edx; jne 0x5051F635; ret 
0x5050bea6  # pop ecx; test edi, edi; je 0x5050C12D; push 0x5054AB94; push edi; call [0x5054A0B8] 
0x5050b5be  # pop ecx; test edi, edi; je 0x5050B601; lea eax, [esp+0x18]; push eax; call [0x5054A0BC] 
0x50511291  # pop ecx; test edi, edi; je 0x5051121C; push edi; lea ebx, [edi+0x01]; call [0x5054A03C] 
0x50531cda  # pop ecx; mov [0x5055D530], ebx; push 0x5055D480; call [0x5054A19C] 
0x50539817  # pop ecx; mov [0x50556660], ebx; push ebx; call edi 
0x5051ccc6  # pop ecx; mov [esi+0x0C], eax; ret 
0x505153db  # pop ecx; mov [esi+0x14], eax; pop ecx; mov eax, esi; pop esi; ret 
0x50515207  # pop ecx; mov [esi+0x18], eax; ret 
0x505119c0  # pop ecx; mov [edi+0x20], eax; call [0x5054A188] 
0x50512986  # pop ecx; mov [ebp+0x04], ebx; mov [ebp+0x08], 0x00000001; mov [ebp+0x0C], edi; mov [ebp+0x10], eax; call [0x5054A188] 
0x5051225a  # pop ecx; mov [ebp-0x58], ebx; mov [ebp-0x54], edi; mov [ebp-0x50], edi; mov [ebp-0x4C], eax; call [0x5054A188] 
0x505125c1  # pop ecx; mov [ebp-0x4C], ebx; mov [ebp-0x48], 0x00000001; mov [ebp-0x44], edi; mov [ebp-0x40], eax; call [0x5054A188] 
0x505110b6  # pop ecx; mov [ebp-0x04], ebx; test ebx, ebx; je 0x505110D7; push ebx; call [0x5054A03C] 
0x505383f7  # pop ecx; mov [ebp-0x04], ebx; mov ebx, [ebp-0x04]; push edi; call [0x5054A1D4] 
0x5053975e  # pop ecx; mov [esi+0x68], ebx; push ebx; mov edi, [0x5054A15C]; call edi 
0x5051e49a  # pop ecx; mov [ebp-0x18], esi; call edi 
0x5053f1d1  # pop ecx; mov [ebp-0x0000026C], eax; cmp eax, ecx; ja 0x5053FB8D; jmp [0x5053FBDB+eax*4] 
0x505168a4  # pop ecx; mov [esi+0x000000E0], eax; pop esi; ret 
0x505168fd  # pop ecx; mov [esi+0x000000E4], eax; pop esi; ret 
0x50515d39  # pop ecx; mov [esi+0x000028F0], edi; ret 
0x50518073  # pop ecx; mov eax, [ebx+0x40]; mov [edi+0x58], eax; call [eax] 
0x50518191  # pop ecx; mov eax, [ebx+0x44]; mov [edi+0x5C], eax; call [eax] 
0x5051808d  # pop ecx; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x505181ab  # pop ecx; mov eax, [ebx+0x4C]; mov [edi+0x6C], eax; call [eax] 
0x505180aa  # pop ecx; mov eax, [ebx+0x50]; mov [edi+0x78], eax; call [eax+0x04] 
0x505181c8  # pop ecx; mov eax, [ebx+0x54]; mov [edi+0x7C], eax; call [eax+0x10] 
0x50516a44  # pop ecx; mov eax, [esp+0x0C]; mov [esi], eax; pop esi; ret 
0x5051ef75  # pop ecx; mov eax, [esi+0x38]; pop edi; pop esi; ret 
0x50524219  # pop ecx; mov ecx, [esp+0x04]; mov [eax+0x04], ecx; ret 
0x50539ba6  # pop ecx; mov esi, [ebp-0x1C]; ret 
0x5053686c  # pop ecx; mov eax, esi; pop esi; pop ebx; leave; ret 
0x505153df  # pop ecx; mov eax, esi; pop esi; ret 
0x50539b2d  # pop ecx; mov eax, edi; pop esi; ret 
0x505278f0  # pop ecx; mov eax, edi; pop edi; pop esi; ret 
0x50537425  # pop ecx; mov esi, eax; push esi; push [0x50555FB4]; call [0x5054A02C] 
0x50532f3a  # pop ecx; xchg eax, esp; mov eax, [eax]; mov [esp+0x00], eax; ret 
0x5051e880  # pop ecx; mov [0x5055CF2C], eax; ret 
0x50527867  # pop ecx; mov [0x5055D450], eax; call [0x5054A188]; mov [0x5055D454], eax; ret 
0x50527867  # pop ecx; mov [0x5055D450], eax; call [0x5054A188] 
0x50541290  # pop ecx; mov [0x5055DE98], eax; ret 
0x50539878  # pop ecx; mov [0x5055E26C], 0x00000001; xor eax, eax; ret 
0x50524e6e  # pop ecx; mov [eax+0x04], 0x00001000; ret 
0x5052f810  # pop ecx; mov [esi+0x18], 0x00000001; pop esi; ret 
0x50515827  # pop ecx; leave; ret 
0x505283a2  # pop ecx; not eax; pop ecx; and eax, 0x5054BC28; ret 
0x5052f257  # pop ecx; call [0x5054A138] 
0x50531a1e  # pop ecx; call [0x5054A044] 
0x5052f226  # pop ecx; call [0x5054A188] 
0x50538d25  # pop ecx; push [esi]; call [0x5054A020]; pop esi; pop ebp; ret 
0x50538d25  # pop ecx; push [esi]; call [0x5054A020] 
0x50537adc  # pop ecx; push [ebp+0x08]; call [0x5054A1B4] 
0x5053adb8  # pop ecx; push [ebp-0x1C]; call [0x5054A060] 
0x50542497  # pop ecx; push [ebp-0x04]; push 0x00000000; call [0x5054A180]; push eax; call [0x5054A084] 
0x50542497  # pop ecx; push [ebp-0x04]; push 0x00000000; call [0x5054A180] 
0x50531776  # pop ecx; push [esi+0x04]; call edi; push [esi+0x08]; call edi 
0x50531776  # pop ecx; push [esi+0x04]; call edi 
0x50516253  # pop ecx; push [esi+0x0C]; push [ebp+0x0C]; push ebx; call [esi+0x04] 
0x505337f1  # pop ecx; push [ebp-0x0000024C]; call [0x5054A0F0] 
0x50531a0f  # pop ecx; call eax 
0x50531a1a  # pop edx; add byte [eax], al; pop ecx; pop ecx; call [0x5054A044] 
0x5050c92e  # pop edx; add al, byte [eax]; leave; retn 0x0008 
0x5050c8a1  # pop edx; add al, byte [eax]; leave; retn 0x000C 
0x5053747e  # pop edx; adc al, byte [eax]; add byte [esi+0x50550EA4], bh; push esi; call [0x5054A1B0] 
0x50508016  # pop edx; push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x50535c4b  # pop edx; push ebx; push eax; ret 
0x50509110  # pop edx; push edi; call [0x5054A280] 
0x50526a42  # pop edx; mov ecx, [eax]; push edi; push eax; call [ecx+0x08] 
0x5052a7c2  # pop edx; out 0xFF, al; inc [ebx+0x5E5F18C4]; ret 
0x5052e04b  # pop ebx; add byte [eax], al; push eax; push ebx; push [edi+0x08]; call [esi] 
0x5050399f  # pop ebx; add byte [eax], al; push 0x5054A2FC; push ebx; call edi 
0x50532ed6  # pop ebx; xor eax, eax; ret 
0x5053a562  # pop ebx; push ebx; push ebx; push ebx; push eax; call esi 
0x50503dd2  # pop ebx; pop ebp; retn 0x0008 
0x5050a23b  # pop ebx; pop ebp; retn 0x000C 
0x505033e3  # pop ebx; pop ebp; retn 0x0010 
0x505495e8  # pop ebx; pop ebp; retn 0x0014 
0x50508475  # pop ebx; pop ebp; retn 0x0020 
0x50505dd9  # pop ebx; pop ebp; retn 0x002C 
0x5050140f  # pop ebx; pop ebp; ret 
0x50502de8  # pop ebx; pop esi; pop ebp; retn 0x0008 
0x50501abe  # pop ebx; pop esi; pop ebp; retn 0x000C 
0x5051a6c4  # pop ebx; pop esi; pop ebp; ret 
0x5050af90  # pop ebx; pop esi; pop edi; retn 0x0008 
0x50536754  # pop ebx; pop esi; pop edi; retn 0x0010 
0x505341ea  # pop ebx; pop esi; pop edi; ret 
0x505460bc  # pop ebx; pop esi; pop edi; leave; ret 
0x5053421d  # pop ebx; pop esi; mov eax, [esp+0x08]; pop edi; ret 
0x5050e9bf  # pop ebx; pop esi; retn 0x0004 
0x5050998d  # pop ebx; pop esi; retn 0x0008 
0x50518e92  # pop ebx; pop esi; ret 
0x505090e1  # pop ebx; pop esi; leave; retn 0x000C 
0x505019bf  # pop ebx; pop esi; leave; retn 0x0010 
0x5052491c  # pop ebx; pop esi; leave; ret 
0x50532fb9  # pop ebx; pop edi; xor eax, eax; ret 
0x505489df  # pop ebx; pop edi; pop ebp; retn 0x0004 
0x5050dac8  # pop ebx; pop edi; pop ebp; retn 0x000C 
0x505063af  # pop ebx; pop edi; pop esi; pop ebp; retn 0x0004 
0x5050515b  # pop ebx; pop edi; pop esi; pop ebp; retn 0x0008 
0x50522bc5  # pop ebx; pop edi; pop esi; pop ebp; ret 
0x50518fda  # pop ebx; pop edi; pop esi; ret 
0x50502cb3  # pop ebx; pop edi; pop esi; leave; retn 0x0008 
0x505024d1  # pop ebx; pop edi; pop esi; leave; retn 0x000C 
0x5050feb3  # pop ebx; pop edi; pop esi; leave; retn 0x0014 
0x50526c7c  # pop ebx; pop edi; pop esi; leave; ret 
0x50533cbd  # pop ebx; pop edi; mov esp, ebp; pop ebp; ret 
0x50532ffd  # pop ebx; pop edi; ret 
0x5050ddc5  # pop ebx; pop edi; leave; retn 0x0008 
0x50507f55  # pop ebx; pop edi; leave; retn 0x0010 
0x50515d26  # pop ebx; pop edi; leave; ret 
0x5052f3a4  # pop ebx; je 0x5052F3B1; push [esp+0x18]; call [0x5054A060] 
0x50547d73  # pop ebx; je 0x50547D81; push 0x000000FF; call [0x5054A1B4] 
0x5054267e  # pop ebx; jne 0x50542688; mov eax, 0x00008000; pop ebp; ret 
0x5052f4ad  # pop ebx; add esp, 0x14; retn 0x0004 
0x5050c19c  # pop ebx; add esp, 0x18; retn 0x0008 
0x5050179b  # pop ebx; test esi, esi; je 0x50501756; test [esi+0x000000DC], 0x00008000; jne 0x505017BE; call [0x5054A044] 
0x505269ec  # pop ebx; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x50539af1  # pop ebx; mov eax, edi; pop edi; pop ebp; ret 
0x5053872f  # pop ebx; mov esp, ebp; pop ebp; push ecx; ret 
0x5051e0e6  # pop ebx; lea eax, [eax+eax-0x01]; pop edi; pop esi; ret 
0x5050a10f  # pop ebx; les edi, edi; call [eax-0x01] 
0x5052ef25  # pop ebx; mov [esi+0x40], 0x00000001; xor eax, eax; pop esi; ret 
0x50501bf4  # pop ebx; leave; retn 0x0004 
0x50501dfd  # pop ebx; leave; retn 0x0008 
0x50502281  # pop ebx; leave; retn 0x000C 
0x5050aded  # pop ebx; leave; retn 0x0014 
0x505124b4  # pop ebx; leave; retn 0x0018 
0x5050e599  # pop ebx; leave; ret 
0x50502a18  # pop ebx; stc; add al, byte [eax]; leave; retn 0x000C 
0x50538545  # pop ebx; push [0x5055D69C]; call [0x5054A078]; and [0x5055D69C], 0x00000000; ret 
0x50538545  # pop ebx; push [0x5055D69C]; call [0x5054A078] 
0x50509549  # pop ebx; push [ebp+0x08]; push ebx; call [0x5054A050] 
0x5053c271  # pop esp; add byte [eax], al; pop ecx; push eax; call [0x5054A21C] 
0x5050c762  # pop esp; add al, byte [eax]; leave; retn 0x000C 
0x50546422  # pop esp; and edx, [ebp+0x50]; push [0x5055E078]; mov [0x5055DF20], eax; call esi 
0x50508c90  # pop esp; and al, 0x10; test ebx, ebx; je 0x50508CC8; push ebx; call [0x5054A280] 
0x50516441  # pop esp; push eax; call [ecx+0x04] 
0x50513e4f  # pop esp; push ebp; push eax; push edi; call [0x5054A0D4] 
0x50513e23  # pop esp; push ebp; push eax; push edi; call esi 
0x505112d8  # pop esp; push ebp; push eax; push 0x50555CA4; call [0x5054A18C] 
0x505112dd  # pop esp; push ebp; push eax; call [0x5054A18C] 
0x50511058  # pop esp; push ebp; push eax; call [0x5054A0B8] 
0x505108ce  # pop esp; je 0x505108DF; push 0x5054ACA4; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x50510826  # pop esp; je 0x50510837; push 0x5054ACA4; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x50510107  # pop esp; je 0x50510118; push 0x5054ACA4; lea eax, [ebp-0x00000204]; push eax; call edi 
0x50538408  # pop esp; cmp eax, 0x02; je 0x50538412; cmp eax, ebx; jne 0x50538394; call [0x5054A1D0] 
0x50518208  # pop esp; lea ecx, [ebp-0x44]; push ecx; push [edi+0x64]; call [eax+0x08] 
0x505181ec  # pop esp; lea ecx, [ebp-0x44]; push ecx; push [edi+0x64]; call [eax+0x0C] 
0x505399d8  # pop esp; mov eax, [0x8B575054]; jnl 0x505399E8; push edi; call esi 
0x505466eb  # pop esp; mov eax, [0xF8835054]; add [eax+esi*8-0x7D], edi; cmp eax, 0x50556FF8; push [ebp+0x0B]; call [0x5054A184] 
0x50546ad0  # pop esp; mov eax, [0xF8835054]; add [eax+esi*8-0x01], edi; jne 0x50546AE8; push [ebp+0x08]; call [0x5055DFC0] 
0x50541c9c  # pop esp; mov byte [ebp+0x0B], 0x00; call [0x5054A1A0] 
0x505277e8  # pop esp; leave; ret 
0x5054653b  # pop esp; fist word [ebp+0x50]; call esi 
0x50546a46  # pop esp; loopne 0x50546A9E; push eax; call esi 
0x50518197  # pop esp; call [eax] 
0x5052dcbe  # pop esp; call [esi+0x48] 
0x5053c2c6  # pop ebp; add byte [eax], al; pop ecx; ret 
0x5054281f  # pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x50541d3a  # pop ebp; or byte [ebx], bh; ret 
0x50526c4c  # pop ebp; or byte [ecx+0x0C468903], cl; mov eax, [ebx]; mov ecx, [eax]; push eax; call [ecx+0x20] 
0x5050d976  # pop ebp; or al, 0x56; test ebx, ebx; je 0x5050D988; push ebx; call [0x5054A03C] 
0x5050a225  # pop ebp; or al, 0x74; or eax, 0x561075FF; push [ebp+0x0C]; call [0x5054A04C] 
0x50538d48  # pop ebp; or al, 0x75; adc dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x5053fc07  # pop ebp; or al, 0x75; sbb eax, 0xFFA585E8; call [ebx+0x53] 
0x5050740f  # pop ebp; or al, 0x8B; ret 
0x5053d473  # pop ebp; or al, 0xF6; retn 0x7501 
0x505430e4  # pop ebp; or al, 0xFF; jo 0x505430ED; call [0x5054A190] 
0x50533dd5  # pop ebp; adc byte [ebx], bh; fbstp [ebx+0x15]; push edi; push ebx; call [ebp+0x14] 
0x50503ad4  # pop ebp; adc byte [esi+ebx-0x01], dh; jne 0x50503AEB; call edi 
0x505059f6  # pop ebp; adc al, 0x75; add eax, 0xEBF45D89; pop ds; push [ebp+0x14]; call edi 
0x50509bb8  # pop ebp; adc al, 0x75; add eax, 0xEBF85D89; pop ds; push [ebp+0x14]; call edi 
0x5050912a  # pop ebp; adc al, 0x75; and byte [ebx+0x74FF107E], al; sbb dh, dh; ret 
0x505476e4  # pop ebp; adc al, 0x7E; add cl, byte [eax+0x0FF33B19]; test byte [esi+0x56000000], cl; call [0x5054A03C] 
0x50505e3e  # pop ebp; sbb byte [esi+ebx-0x01], dh; jne 0x50505E5D; call esi 
0x505056dd  # pop ebp; sbb byte [ebp-0x74FB8B25], al; ret 
0x50505e15  # pop ebp; sbb al, 0x75; add eax, 0xEBF45D89; pop ds; push [ebp+0x1C]; call esi 
0x5052f4aa  # pop ebp; xor eax, eax; pop ebx; add esp, 0x14; retn 0x0004 
0x50538732  # pop ebp; push ecx; ret 
0x5053237a  # pop ebp; push ebp; push eax; jne 0x50532381; rep ret 
0x50538f26  # pop ebp; push ebp; push eax; mov [ebp-0x00000324], eax; call [0x5054A1E8] 
0x50535ede  # pop ebp; push ebp; push eax; ret 
0x5054364a  # pop ebp; pop ecx; pop ebx; retn 0x0004 
0x5052f3a3  # pop ebp; pop ebx; je 0x5052F3B1; push [esp+0x18]; call [0x5054A060] 
0x50515e46  # pop ebp; pop ebx; ret 
0x5050c19a  # pop ebp; pop esi; pop ebx; add esp, 0x18; retn 0x0008 
0x50510fa6  # pop ebp; pop esi; pop ebx; retn 0x0004 
0x50542f19  # pop ebp; pop esi; pop edi; retn 0x0010 
0x50522193  # pop ebp; pop edi; pop ebx; pop esi; ret 
0x50506f4c  # pop ebp; pop edi; pop ebx; retn 0x0004 
0x5050a8d8  # pop ebp; pop edi; pop esi; pop ebx; retn 0x0004 
0x5051e07c  # pop ebp; pop edi; pop esi; ret 
0x50511e0f  # pop ebp; mov word [ecx+0x7D89947D], cs; cwde; mov [ebp-0x64], eax; call [0x5054A188] 
0x50514978  # pop ebp; lea eax, [ebx+0x00000101]; pop ebx; ret 
0x5051225c  # pop ebp; test al, 0x89; jnl 0x5051220D; mov [ebp-0x50], edi; mov [ebp-0x4C], eax; call [0x5054A188] 
0x50512d26  # pop ebp; lodsb; mov [ebp-0x50], ebx; mov [ebp-0x48], ebx; call [0x5054A188] 
0x5050e315  # pop ebp; les ecx, [ebp-0x3056F464]; fimul word [ebx-0x3F]; ret 
0x5051e4bc  # pop ebp; int3; je 0x5051E4F0; lea eax, [ebp-0x34]; push eax; call [0x5054A268] 
0x5051163e  # pop ebp; int3; call [0x5054A188] 
0x505088a4  # pop ebp; ror byte [ecx+0x45C7D85D], 1; fadd qword [eax+eax]; add byte [eax], al; call [0x5055C9E0] 
0x5050e41e  # pop ebp; ror byte [ebp-0x0068EC6C], 1; sub al, byte [ebx-0x3F]; retn 0x8B0A 
0x5051164d  # pop ebp; aam 0x3B; ret 
0x5053aafd  # pop ebp; aam 0x74; or [ecx+0x45C6D85D], ecx; call [eax] 
0x5053ab02  # pop ebp; fadd st0, st6; inc ebp; call [eax] 
0x505088a7  # pop ebp; fadd st0, st7; inc ebp; fadd qword [eax+eax]; add byte [eax], al; call [0x5055C9E0] 
0x50523fd4  # pop ebp; loopne 0x50523FDA; retn 0xF08B 
0x5050e045  # pop ebp; in al, 0x8B; retn 0xBC8D 
0x5050e463  # pop ebp; in al, 0x8D; mov word [ebx], cs; ret 
0x50507148  # pop ebp; in al, dx; call [0x5055CA34] 
0x50533df4  # pop ebp; clc; jnbe 0x50533E04; push edi; push ebx; call [ebp+0x14] 
0x5050f052  # pop ebp; cld; je 0x5050F0FE; push [ebp-0x04]; call [0x5054A0D8] 
0x505383fc  # pop ebp; cld; push edi; call [0x5054A1D4] 
0x5050ed65  # pop ebp; cld; je 0x5050ED72; push [ebp-0x04]; call [0x5054A0E0] 
0x5050eda8  # pop ebp; cld; je 0x5050EDB8; push [ebp-0x04]; call [0x5054A0DC] 
0x5050eddc  # pop ebp; cld; je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8] 
0x505110b8  # pop ebp; cld; test ebx, ebx; je 0x505110D7; push ebx; call [0x5054A03C] 
0x505383f9  # pop ebp; cld; mov ebx, [ebp-0x04]; push edi; call [0x5054A1D4] 
0x5051dabc  # pop ebp; jmp [0x5051DB3A+edi*4] 
0x50504969  # pop ebp; push [esi+0x00000AA8]; lea eax, [ebp+0x28]; push 0x5054A358; push eax; call [0x5054A260] 
0x50538b71  # pop ebp; jmp eax 
0x5053c1b3  # pop esi; add byte [eax], al; pop ecx; ret 
0x5050d39a  # pop esi; add al, byte [eax]; add esp, 0x0C; lea eax, [ebp-0x24]; push eax; call edi 
0x50515575  # pop esi; add eax, ebx; pop ebx; leave; ret 
0x50501424  # pop esi; add al, 0x89; call [0x5054A044] 
0x5054212b  # pop esi; or al, 0x53; call [0x5054A020] 
0x50524f2f  # pop esi; sete al; pop ebx; leave; ret 
0x50515d68  # pop esi; adc byte [ebp-0x75], al; xchg byte [ecx+eax+0x00], cl; add byte [ebx], bh; ret 
0x5051ee29  # pop esi; adc al, 0x57; test ebx, ebx; jne 0x5051EE36; call [0x5054A118] 
0x50525ac9  # pop esi; and eax, 0x000000FF; ret 
0x50518fd8  # pop esi; xor byte [ebx+0x5F], bl; pop esi; ret 
0x50509004  # pop esi; xor eax, eax; pop ebx; retn 0x0010 
0x50506e1a  # pop esi; cmp eax, edi; je 0x50506E27; push eax; call ebp 
0x5051fde5  # pop esi; inc eax; pop ebx; pop ebp; ret 
0x5052dcba  # pop esi; pop eax; mov [esi+0x5C], edi; call [esi+0x48] 
0x50508e30  # pop esi; pop ebx; pop ebp; retn 0x0008 
0x5050a23a  # pop esi; pop ebx; pop ebp; retn 0x000C 
0x505033e2  # pop esi; pop ebx; pop ebp; retn 0x0010 
0x505495e7  # pop esi; pop ebx; pop ebp; retn 0x0014 
0x50508474  # pop esi; pop ebx; pop ebp; retn 0x0020 
0x50505dd8  # pop esi; pop ebx; pop ebp; retn 0x002C 
0x5050140e  # pop esi; pop ebx; pop ebp; ret 
0x50532fb8  # pop esi; pop ebx; pop edi; xor eax, eax; ret 
0x505489de  # pop esi; pop ebx; pop edi; pop ebp; retn 0x0004 
0x5050dac7  # pop esi; pop ebx; pop edi; pop ebp; retn 0x000C 
0x50533cbc  # pop esi; pop ebx; pop edi; mov esp, ebp; pop ebp; ret 
0x50532ffc  # pop esi; pop ebx; pop edi; ret 
0x5050ddc4  # pop esi; pop ebx; pop edi; leave; retn 0x0008 
0x50507f54  # pop esi; pop ebx; pop edi; leave; retn 0x0010 
0x50515d25  # pop esi; pop ebx; pop edi; leave; ret 
0x5054267d  # pop esi; pop ebx; jne 0x50542688; mov eax, 0x00008000; pop ebp; ret 
0x5050c19b  # pop esi; pop ebx; add esp, 0x18; retn 0x0008 
0x50539af0  # pop esi; pop ebx; mov eax, edi; pop edi; pop ebp; ret 
0x5053872e  # pop esi; pop ebx; mov esp, ebp; pop ebp; push ecx; ret 
0x50533d08  # pop esi; pop ebx; mov esp, ebp; pop ebp; ret 
0x50501824  # pop esi; pop ebx; retn 0x0004 
0x5050deb8  # pop esi; pop ebx; retn 0x0008 
0x5053ff13  # pop esi; pop ebx; retn 0x0010 
0x50515628  # pop esi; pop ebx; ret 
0x50501bf3  # pop esi; pop ebx; leave; retn 0x0004 
0x50501dfc  # pop esi; pop ebx; leave; retn 0x0008 
0x50502280  # pop esi; pop ebx; leave; retn 0x000C 
0x50504bff  # pop esi; pop ebx; leave; retn 0x0010 
0x5050adec  # pop esi; pop ebx; leave; retn 0x0014 
0x505124b3  # pop esi; pop ebx; leave; retn 0x0018 
0x5051153b  # pop esi; pop ebx; leave; ret 
0x5052f4a9  # pop esi; pop ebp; xor eax, eax; pop ebx; add esp, 0x14; retn 0x0004 
0x5052f3a2  # pop esi; pop ebp; pop ebx; je 0x5052F3B1; push [esp+0x18]; call [0x5054A060] 
0x50516fe3  # pop esi; pop ebp; pop ebx; ret 
0x50506f4b  # pop esi; pop ebp; pop edi; pop ebx; retn 0x0004 
0x505063b1  # pop esi; pop ebp; retn 0x0004 
0x50502de9  # pop esi; pop ebp; retn 0x0008 
0x50501abf  # pop esi; pop ebp; retn 0x000C 
0x50548927  # pop esi; pop ebp; retn 0x0010 
0x5051622e  # pop esi; pop ebp; ret 
0x50532ed4  # pop esi; pop edi; pop ebx; xor eax, eax; ret 
0x50503dd0  # pop esi; pop edi; pop ebx; pop ebp; retn 0x0008 
0x50522f26  # pop esi; pop edi; pop ebx; pop ebp; ret 
0x50512f5d  # pop esi; pop edi; pop ebx; leave; retn 0x0008 
0x50504f26  # pop esi; pop edi; pop ebx; leave; retn 0x000C 
0x50513a91  # pop esi; pop edi; pop ebx; leave; retn 0x0010 
0x50517a69  # pop esi; pop edi; pop ebx; leave; ret 
0x50514976  # pop esi; pop edi; pop ebp; lea eax, [ebx+0x00000101]; pop ebx; ret 
0x50532f02  # pop esi; pop edi; lea eax, [edx-0x01]; pop ebx; ret 
0x5050aea3  # pop esi; pop edi; retn 0x0004 
0x5050af91  # pop esi; pop edi; retn 0x0008 
0x50536755  # pop esi; pop edi; retn 0x0010 
0x5051695a  # pop esi; pop edi; ret 
0x50532547  # pop esi; pop edi; leave; ret 
0x50542da3  # pop esi; mov word [eax+0x08], cx; pop ebx; leave; ret 
0x5053e3b4  # pop esi; je 0x5053E3BE; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50508388  # pop esi; je 0x50508395; push [ebp+0x10]; call ebx 
0x505235e9  # pop esi; jne 0x505235F0; xor eax, eax; leave; ret 
0x5051578a  # pop esi; jnl 0x50515790; xor eax, eax; ret 
0x50502f07  # pop esi; or eax, 0xFFFFFFFF; retn 0x000C 
0x5051580f  # pop esi; test eax, eax; jne 0x50515818; xor eax, eax; leave; ret 
0x5052af3c  # pop esi; mov [edi], eax; pop ebx; leave; ret 
0x5052272c  # pop esi; mov [eax], ecx; mov eax, [ebp-0x10]; pop ebx; leave; ret 
0x5052391e  # pop esi; mov [ecx], edx; pop ebx; leave; ret 
0x505311aa  # pop esi; mov [ecx+0x1C], eax; pop ebx; leave; ret 
0x5052bde9  # pop esi; mov [eax+0x0C], ecx; pop ebx; leave; ret 
0x5052c181  # pop esi; mov [eax+0x14], ecx; pop ebx; leave; ret 
0x5052c643  # pop esi; mov [eax+0x1C], ecx; pop ebx; leave; ret 
0x505218fe  # pop esi; mov [ecx+0x04], edx; mov [ecx+0x0C], eax; pop ebx; leave; ret 
0x5052a404  # pop esi; mov [edi+0x00000080], eax; mov [edi+0x00000084], ecx; pop ebx; leave; ret 
0x5052b4ef  # pop esi; mov [eax+0x00001048], ebx; mov [eax+0x0000104C], ecx; pop ebx; leave; ret 
0x5052a2cc  # pop esi; mov [ecx+0x00000080], ebx; mov [ecx+0x00000084], eax; pop ebx; leave; ret 
0x5052a1ea  # pop esi; mov [edi+0x00000080], ebx; mov [edi+0x00000084], ecx; pop ebx; leave; ret 
0x5053421e  # pop esi; mov eax, [esp+0x08]; pop edi; ret 
0x5051f1aa  # pop esi; mov esi, [esi+0x0C]; mov ecx, [esi]; push eax; push esi; call [ecx+0x0C] 
0x5051ca14  # pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x5051ca64  # pop esi; mov eax, ebx; pop ebx; ret 
0x5051d553  # pop esi; mov eax, ebx; pop ebx; leave; ret 
0x5050937a  # pop esi; mov eax, edi; pop edi; pop ebx; leave; retn 0x0004 
0x5051e131  # pop esi; mov edx, ecx; pop ebx; ret 
0x50516ddc  # pop esi; lea eax, [ebx+0x04]; pop ebx; leave; ret 
0x50526590  # pop esi; mov [0x5055D3E8], eax; pop ebx; ret 
0x50501625  # pop esi; leave; retn 0x0004 
0x50502cb5  # pop esi; leave; retn 0x0008 
0x505024d3  # pop esi; leave; retn 0x000C 
0x505019c0  # pop esi; leave; retn 0x0010 
0x5050feb5  # pop esi; leave; retn 0x0014 
0x505150e6  # pop esi; leave; ret 
0x50545b76  # pop esi; test ebx, 0x00040000; je 0x50545B84; or eax, 0x00001000; ret 
0x505265db  # pop esi; inc [0x5055D448]; ret 
0x50538533  # pop esi; push [0x5055E124]; push 0x00000000; push [0x5055D69C]; call edi 
0x5053ca28  # pop edi; add [eax], eax; add byte [ebx-0x00018743], al; jmp [ebp+0x74] 
0x5051dcb5  # pop edi; sete al; pop esi; ret 
0x5051994c  # pop edi; adc byte [edi], cl; test [edi-0x75000000], esp; inc edi; or al, 0x2B; ret 
0x5051663c  # pop edi; adc byte [edi+eax-0x75], dh; imul eax; cli; idiv bh; call [edi-0x18] 
0x50541ba0  # pop edi; sub eax, ecx; pop esi; pop ebp; ret 
0x50513d21  # pop edi; xor eax, eax; pop ebx; pop ebp; ret 
0x50508f71  # pop edi; xor eax, eax; pop ebx; pop esi; pop ebp; retn 0x0008 
0x50535f8e  # pop edi; xor eax, eax; pop esi; ret 
0x50532fba  # pop edi; xor eax, eax; ret 
0x50509545  # pop edi; cmp esp, esi; je 0x505095A5; push [ebp+0x08]; push ebx; call [0x5054A050] 
0x50513c5c  # pop edi; inc eax; pop esi; ret 
0x50515c54  # pop edi; inc eax; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x5050324c  # pop edi; push ebx; push esi; call [0x5054A18C] 
0x50537d59  # pop edi; push ebp; push eax; pop esi; ret 
0x50537318  # pop edi; push ebp; push eax; mov esi, [0x5054A030]; call esi 
0x5053742c  # pop edi; push ebp; push eax; call [0x5054A02C] 
0x50537749  # pop edi; push ebp; push eax; push [0x50555FB4]; call esi; call eax 
0x50537749  # pop edi; push ebp; push eax; push [0x50555FB4]; call esi 
0x50537455  # pop edi; push ebp; push eax; jmp [ecx+0x50555FB4] 
0x50537335  # pop edi; push ebp; push eax; call esi; call eax 
0x50537335  # pop edi; push ebp; push eax; call esi 
0x50535c4a  # pop edi; pop edx; push ebx; push eax; ret 
0x50532ed5  # pop edi; pop ebx; xor eax, eax; ret 
0x50503dd1  # pop edi; pop ebx; pop ebp; retn 0x0008 
0x50522f27  # pop edi; pop ebx; pop ebp; ret 
0x50502de7  # pop edi; pop ebx; pop esi; pop ebp; retn 0x0008 
0x50509fd7  # pop edi; pop ebx; pop esi; pop ebp; retn 0x000C 
0x5051a6c3  # pop edi; pop ebx; pop esi; pop ebp; ret 
0x5050e9be  # pop edi; pop ebx; pop esi; retn 0x0004 
0x5050998c  # pop edi; pop ebx; pop esi; retn 0x0008 
0x5051abd2  # pop edi; pop ebx; pop esi; ret 
0x505090e0  # pop edi; pop ebx; pop esi; leave; retn 0x000C 
0x505019be  # pop edi; pop ebx; pop esi; leave; retn 0x0010 
0x5052491b  # pop edi; pop ebx; pop esi; leave; ret 
0x50506f4d  # pop edi; pop ebx; retn 0x0004 
0x5051518f  # pop edi; pop ebx; ret 
0x5052ef24  # pop edi; pop ebx; mov [esi+0x40], 0x00000001; xor eax, eax; pop esi; ret 
0x5050937d  # pop edi; pop ebx; leave; retn 0x0004 
0x50512f5e  # pop edi; pop ebx; leave; retn 0x0008 
0x50504f27  # pop edi; pop ebx; leave; retn 0x000C 
0x50513a92  # pop edi; pop ebx; leave; retn 0x0010 
0x5050e598  # pop edi; pop ebx; leave; ret 
0x50538544  # pop edi; pop ebx; push [0x5055D69C]; call [0x5054A078]; and [0x5055D69C], 0x00000000; ret 
0x50538544  # pop edi; pop ebx; push [0x5055D69C]; call [0x5054A078] 
0x5050c199  # pop edi; pop ebp; pop esi; pop ebx; add esp, 0x18; retn 0x0008 
0x50510fa5  # pop edi; pop ebp; pop esi; pop ebx; retn 0x0004 
0x50514977  # pop edi; pop ebp; lea eax, [ebx+0x00000101]; pop ebx; ret 
0x505489e0  # pop edi; pop ebp; retn 0x0004 
0x5050dac9  # pop edi; pop ebp; retn 0x000C 
0x50515c30  # pop edi; pop ebp; ret 
0x50524f2e  # pop edi; pop esi; sete al; pop ebx; leave; ret 
0x50509003  # pop edi; pop esi; xor eax, eax; pop ebx; retn 0x0010 
0x50508e2f  # pop edi; pop esi; pop ebx; pop ebp; retn 0x0008 
0x5050a239  # pop edi; pop esi; pop ebx; pop ebp; retn 0x000C 
0x505033e1  # pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x505495e6  # pop edi; pop esi; pop ebx; pop ebp; retn 0x0014 
0x50508473  # pop edi; pop esi; pop ebx; pop ebp; retn 0x0020 
0x50505dd7  # pop edi; pop esi; pop ebx; pop ebp; retn 0x002C 
0x50513dfc  # pop edi; pop esi; pop ebx; pop ebp; ret 
0x50533d39  # pop edi; pop esi; pop ebx; mov esp, ebp; pop ebp; ret 
0x50501823  # pop edi; pop esi; pop ebx; retn 0x0004 
0x5050deb7  # pop edi; pop esi; pop ebx; retn 0x0008 
0x50515627  # pop edi; pop esi; pop ebx; ret 
0x50501bf2  # pop edi; pop esi; pop ebx; leave; retn 0x0004 
0x50501dfb  # pop edi; pop esi; pop ebx; leave; retn 0x0008 
0x5050227f  # pop edi; pop esi; pop ebx; leave; retn 0x000C 
0x50504bfe  # pop edi; pop esi; pop ebx; leave; retn 0x0010 
0x5050adeb  # pop edi; pop esi; pop ebx; leave; retn 0x0014 
0x505124b2  # pop edi; pop esi; pop ebx; leave; retn 0x0018 
0x5051153a  # pop edi; pop esi; pop ebx; leave; ret 
0x50523419  # pop edi; pop esi; pop ebp; pop ebx; ret 
0x505063b0  # pop edi; pop esi; pop ebp; retn 0x0004 
0x5050515c  # pop edi; pop esi; pop ebp; retn 0x0008 
0x505029a8  # pop edi; pop esi; pop ebp; retn 0x000C 
0x5051c3e8  # pop edi; pop esi; pop ebp; ret 
0x50542da2  # pop edi; pop esi; mov word [eax+0x08], cx; pop ebx; leave; ret 
0x5052391d  # pop edi; pop esi; mov [ecx], edx; pop ebx; leave; ret 
0x5052bde8  # pop edi; pop esi; mov [eax+0x0C], ecx; pop ebx; leave; ret 
0x5052c180  # pop edi; pop esi; mov [eax+0x14], ecx; pop ebx; leave; ret 
0x5052c642  # pop edi; pop esi; mov [eax+0x1C], ecx; pop ebx; leave; ret 
0x5051ca13  # pop edi; pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x5051ca63  # pop edi; pop esi; mov eax, ebx; pop ebx; ret 
0x5051d552  # pop edi; pop esi; mov eax, ebx; pop ebx; leave; ret 
0x5051e130  # pop edi; pop esi; mov edx, ecx; pop ebx; ret 
0x50516ddb  # pop edi; pop esi; lea eax, [ebx+0x04]; pop ebx; leave; ret 
0x5052658f  # pop edi; pop esi; mov [0x5055D3E8], eax; pop ebx; ret 
0x505010a9  # pop edi; pop esi; retn 0x0004 
0x50501744  # pop edi; pop esi; retn 0x0008 
0x50501112  # pop edi; pop esi; ret 
0x50501624  # pop edi; pop esi; leave; retn 0x0004 
0x50502cb4  # pop edi; pop esi; leave; retn 0x0008 
0x505024d2  # pop edi; pop esi; leave; retn 0x000C 
0x5050feb4  # pop edi; pop esi; leave; retn 0x0014 
0x50516061  # pop edi; pop esi; leave; ret 
0x50549991  # pop edi; je 0x5054999B; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x5051c871  # pop edi; jle 0x5051C881; and eax, 0x3F; mov al, byte [eax+0x5054B5C0]; mov byte [ecx+0x03], al; ret 
0x50526511  # pop edi; mov [0x5055D3E8], esi; pop esi; pop ebx; leave; ret 
0x50527b86  # pop edi; mov [esi+0x04], eax; pop esi; pop ebx; leave; ret 
0x5051d75d  # pop edi; mov [esi+0x10], edx; mov eax, esi; pop esi; ret 
0x505156fe  # pop edi; mov [edx+0x18], esi; or eax, ecx; pop esi; ret 
0x5052b415  # pop edi; mov [ebx+0x0000104C], eax; pop esi; leave; ret 
0x50516fdc  # pop edi; mov [esi+0x00002D14], ebp; pop esi; pop ebp; pop ebx; ret 
0x5052f701  # pop edi; mov eax, ebx; pop ebx; leave; ret 
0x50515e43  # pop edi; mov eax, ebp; pop ebp; pop ebx; ret 
0x5051f3e1  # pop edi; mov eax, esi; pop esi; pop ebx; ret 
0x5051ff1e  # pop edi; mov eax, esi; pop esi; pop ebx; leave; ret 
0x5051d179  # pop edi; mov eax, esi; pop esi; pop ebp; pop ebx; ret 
0x5051f46d  # pop edi; mov eax, esi; pop esi; pop ebp; ret 
0x50516760  # pop edi; mov eax, esi; pop esi; ret 
0x50533cbe  # pop edi; mov esp, ebp; pop ebp; ret 
0x50532f03  # pop edi; lea eax, [edx-0x01]; pop ebx; ret 
0x50525a59  # pop edi; lea eax, [esi+0x01]; pop esi; ret 
0x5051f359  # pop edi; mov [esi], 0x00002736; mov eax, esi; pop esi; ret 
0x5050ddc6  # pop edi; leave; retn 0x0008 
0x50507f56  # pop edi; leave; retn 0x0010 
0x505151fa  # pop edi; leave; ret 
0x505168a1  # pushad; add byte [eax], al; pop ecx; mov [esi+0x000000E0], eax; pop esi; ret 
0x505168fa  # pushad; add byte [eax], al; pop ecx; mov [esi+0x000000E4], eax; pop esi; ret 
0x505386a5  # pushad; or byte [eax], al; push ecx; call ebx 
0x50546698  # pushad; and [ebp+0x50], edx; push [0x5055E078]; mov [0x5055DFA8], eax; call esi 
0x505465ae  # pushad; and dl, byte [ebp+0x50]; push [0x5055E078]; mov [0x5055DF78], eax; call esi 
0x505048e1  # pushad; add al, 0x00; push eax; lea eax, [ebp+0x48]; push eax; call [0x5054A050] 
0x5051642b  # pushad; cmp eax, ebx; je 0x50516438; mov ecx, [edi+0x58]; push eax; call [ecx+0x04] 
0x50538a0f  # pushad; push ebp; push eax; ret 
0x50538c30  # pushad; push ebp; push eax; call [0x5054A024]; pop ebp; ret 
0x50538c30  # pushad; push ebp; push eax; call [0x5054A024] 
0x505388fd  # pushad; push esi; lea eax, [ebp-0x08]; push eax; call [0x5054A1AC] 
0x505312a5  # pushad; pop edi; pop esi; leave; ret 
0x5053981a  # pushad; push bp; push eax; push ebx; call edi 
0x50539445  # pushad; push bp; push eax; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x505397f7  # pushad; push bp; push eax; call [0x5054A0D4] 
0x505394e1  # pushad; jo 0x505394E1; mov eax, esi; pop ebx; leave; ret 
0x5053e339  # pushad; jo 0x5053E339; leave; ret 
0x5052f304  # pushad; cmp [esi+0x00001028], 0x000003E5; jne 0x5052F34C; push 0xFFFFFFFF; push [edi+0x10]; call [0x5054A144] 
0x50506125  # pushad; xchg byte [eax], al; add byte [ebx], bh; ret 
0x505311c2  # pushad; mov [ecx+0x68], eax; mov [ecx+0x64], eax; ret 
0x50517fd8  # pushad; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x5052f3ad  # pushad; mov al, byte [0xC0335054]; add esp, 0x14; retn 0x0004 
0x50531771  # pushad; mov al, byte [0x59595054]; push [esi+0x04]; call edi; push [esi+0x08]; call edi 
0x50531771  # pushad; mov al, byte [0x59595054]; push [esi+0x04]; call edi 
0x5053a697  # pushad; mov al, byte [0xC0855054]; jne 0x5053A6A9; call [0x5054A0E4] 
0x5051069c  # pushad; mov al, byte [0x458B5054]; sbb byte [edi+0x5E], bl; pop ebx; leave; retn 0x0014 
0x50507178  # pushad; mov al, byte [0xD3FF5054]; push [ebp-0x0C]; call ebx 
0x505318cc  # pushad; mov al, byte [0xD3FF5054]; push [ebp-0x04]; call ebx 
0x50507129  # pushad; mov al, byte [0xD6FF5054]; push [ebp-0x0C]; call esi 
0x50531858  # pushad; mov al, byte [0xD7FF5054]; push [ebp-0x04]; call edi 
0x5052f71c  # pushad; mov al, byte [0xD7FF5054]; push [esi+0x08]; call edi 
0x5050f645  # pushad; mov byte [0xC4835054], al; or al, 0x33; rol byte [eax-0x15], 0x29; call [0x5054A0E4] 
0x5050d3e7  # pushad; mov byte [0xC4835054], al; adc byte [ebp-0x0004237B], cl; call [eax+0x68] 
0x50546f81  # pushad; mov byte [0xC4835054], al; sbb byte [ebx+0x06EB5EC6], cl; push [esp+0x04]; call eax; retn 0x0004 
0x50546f81  # pushad; mov byte [0xC4835054], al; sbb byte [ebx+0x06EB5EC6], cl; push [esp+0x04]; call eax 
0x50509edb  # pushad; mov byte [0x458D5054], al; mov esp, 0x54A35868; push eax; push eax; call esi 
0x50506dc8  # pushad; mov byte [0x5650FFFF], al; call [0x5054A038] 
0x50502fc2  # pushad; leave; push ebp; push eax; push esi; call [0x5054A18C] 
0x50503db7  # pushad; leave; push ebp; push eax; push esi; call [0x5054A0D4] 
0x50503d51  # pushad; leave; push ebp; push eax; call [0x5054A15C] 
0x505015a1  # pushad; leave; push ebp; push eax; call [0x5054A0D4] 
0x5053d6c8  # pushad; fist [ebp+0x50]; push [eax+0x10]; push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x5054654d  # pushad; fist word [ebp+0x50]; call esi 
0x50546a37  # pushad; loopne 0x50546A8F; push eax; call esi 
0x505180ee  # pushad; call [eax+0x08] 
0x505180d2  # pushad; call [eax+0x0C] 
0x50515560  # pushad; call [eax+0x10] 
0x5052dcf7  # pushad; call [eax+0x48] 
0x50516707  # popad; add byte [eax], al; pop ecx; add eax, esi; pop esi; ret 
0x5051618c  # popad; push ecx; push eax; pop edi; ret 
0x50540ed4  # popad; push esi; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50533116  # popad; jo 0x50533116; pop ebx; leave; ret 
0x5053391e  # popad; jo 0x5053391E; pop esi; pop ebx; leave; ret 
0x50541c74  # popad; jo 0x50541C74; pop edi; pop ebx; leave; ret 
0x50532b6d  # popad; jo 0x50532B6D; leave; ret 
0x5050d044  # bound eax, [ecx-0x01]; push [ebx]; rcr byte [ebx+0x5F], 0x5E; leave; retn 0x000C 
0x5050cbc6  # bound eax, [edi+edi*8-0x01]; push eax; lea eax, [edi+0x00000400]; push eax; call [0x5054A038] 
0x5050a511  # bound edi, [esi+0x02]; add cl, cl; retn 0x0008 
0x50543edf  # bound edi, [edi]; call [ebx+0x53] 
0x5052667a  # bound edi, [edi]; call [edi-0x18] 
0x5052675a  # bound edi, [edi]; inc [ebx-0x597CEF3C]; sub al, 0x01; add byte [eax], al; add byte [esi+0x5F], bl; ret 
0x5053c0d7  # bound edi, [edi]; dec ecx; ret 
0x50516624  # arpl word [eax], ax; add byte [ebx-0x3B7CABB9], cl; sbb byte [ebx], bh; ret 
0x505165d6  # arpl word [eax], ax; add byte [ebx+0x0001A887], cl; add byte [ecx+0x3B], bl; ret 
0x50521b10  # arpl word [eax], cx; add [eax], eax; leave; ret 
0x5051a2c6  # arpl word [ecx+0x50], dx; pop edi; ret 
0x5051a2b2  # arpl word [ecx+0x50], dx; mov [edx+0x00002908], 0x505317BC; mov [edx+0x00002910], 0x505163B5; pop edi; ret 
0x50509dab  # arpl word [edi+0x06], si; mov [esi+0x000000F0], edi; pop edi; pop esi; retn 0x0008 
0x50509e4c  # arpl word [edi+0x06], si; mov [esi+0x000000F4], edi; pop edi; pop esi; retn 0x0008 
0x5050ade5  # arpl di, di; inc [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0014 
0x50510214  # arpl di, di; dec [ecx+0x5D39F845]; adc byte [esi+ebx-0x01], dh; jne 0x50510232; call edi 
0x5054125b  # arpl di, di; dec [ebx-0x3F7A87C0]; je 0x5054127B; and [ebp-0x04], 0x00000000; call eax 
0x505322f1  # add byte [fs:eax], al; ret 
0x50539554  # add [fs:eax], eax; add byte [edi], cl; mov bh, 0xC7; push eax; call [0x5054A1F8] 
0x50516590  # add [fs:eax], eax; add byte [ebx], bh; ret 
0x5053ee31  # push ss; push ebp; push eax; call [0x5054A224] 
0x5051132d  # cmp esi, [fs:esp+0x08]; jc 0x50511314; xor eax, eax; pop esi; retn 0x0004 
0x5051643a  # cmp eax, ebx; je 0x50516447; mov ecx, [edi+0x5C]; push eax; call [ecx+0x04] 
0x5053fe5b  # push ebx; call [ebp-0x20] 
0x50538699  # push 0x00000008; call ebx 
0x5051817e  # and [fs:edi+0x00002D0C], 0x00000000; test eax, eax; je 0x50518192; mov ecx, [edi+0x5C]; push eax; call [ecx+0x04] 
0x505435f7  # mov [fs:0x00000000], ecx; add esp, 0x18; pop edi; pop esi; pop ebx; ret 
0x50538692  # mov al, byte [fs:eax]; add byte [eax], al; push [esi+0x64]; push 0x00000008; call ebx 
0x5052e186  # mov ecx, [fs:eax]; push eax; call [ecx+0x10] 
0x5051819c  # mov eax, [fs:edi+0x74]; test eax, eax; je 0x505181AC; mov ecx, [edi+0x6C]; push eax; call [ecx+0x04] 
0x5050ef9f  # mov byte [fs:0xC0855054], al; je 0x5050EFBB; lea eax, [ebp-0x44]; push eax; call [0x5054A268] 
0x5050acf5  # mov byte [fs:0xC0855054], al; je 0x5050AD11; lea eax, [ebp-0x38]; push eax; call [0x5054A268] 
0x50501f4b  # mov byte [fs:0xC0855054], al; je 0x50501F67; lea eax, [ebp-0x24]; push eax; call [0x5054A268] 
0x50510530  # mov byte [fs:0xC0855054], al; jne 0x50510511; cmp [ebp-0x1C], 0x04; jnl 0x50510562; call [0x5054A188] 
0x5053871a  # mov [fs:0x00000000], eax; ret 
0x50504917  # mov [fs:0x458D5054], eax; dec eax; push eax; call [0x5054A03C] 
0x505311c8  # ret 
0x5054655f  # fist word [fs:ebp+0x50]; call esi; push 0x505522A4; push [0x5055E078]; mov [0x5055DF68], eax; call esi 
0x5054655f  # fist word [fs:ebp+0x50]; call esi 
0x50546a91  # loopne 0x50546AE9; push eax; call esi 
0x50511324  # call [fs:0x5054A048] 
0x5051820f  # call [fs:eax+0x08] 
0x505181f3  # call [fs:eax+0x0C] 
0x50514dca  # call [fs:eax+0x14] 
0x5052dd23  # call [fs:eax+0x48] 
0x50513326  # cmp byte [gs:eax], al; add byte [ecx+0x59], bl; xor eax, eax; pop edi; pop esi; retn 0x0008 
0x50517ffd  # dec ecx; add byte [eax], al; push [ebx+0x70]; mov eax, [edi+0x0000008C]; call [eax+0x04] 
0x5053d6be  # push ebx; push 0x00000000; push [eax+0x0C]; call esi 
0x505107b7  # lodsb; add byte [ebp+0x530774DB], al; call edi 
0x50511fea  # ret 
0x5052e7dd  # jecxz 0x5052E7DE; call [esi-0x18] 
0x50504837  # hlt; add byte [ebx], ch; fild word [ebx+0x12720AFB]; call [0x5054A188] 
0x50548d39  # test byte [ebp+0x0C], 0x01; je 0x50548DCC; lea eax, [esi+0x34]; push eax; call [0x5054A03C] 
0x50503661  # clc; add bl, ch; and edi, edi; jne 0x50503675; call [0x5054A040] 
0x50537683  # cld; add byte [ebx-0x007A9782], cl; je 0x505376A7; push edi; call [0x5054A0D4] 
0x505412d1  # cld; add bh, bh; jne 0x505412E3; push [ebp+0x08]; call [0x5054A108] 
0x505374f5  # cld; add bh, bh; jbe 0x50537563; call [0x5054A15C] 
0x5051638c  # add byte [eax], al; add esp, 0x0C; pop ebx; leave; ret 
0x50533a94  # add byte [eax], al; mov [eax], 0x0000000C; xor eax, eax; pop esi; ret 
0x5050f7bd  # add word [eax], ax; add dh, dh; retn 0x0F02 
0x505279c9  # add al, 0x00; and [esi], 0x00000000; add esp, 0x0C; mov [esi+0x10], eax; ret 
0x5051ca83  # add al, 0x00; and [esi+0x08], 0x00000000; pop esi; ret 
0x50505231  # pop es; add byte [eax], al; push [eax+0x0C]; call ebx 
0x5051ca87  # or byte [eax], al; pop esi; ret 
0x5051f2bc  # sub al, 0x00; pop esi; pop ebp; ret 
0x505064d7  # xor al, 0x00; pop esi; retn 0x0004 
0x5054112a  # cmp word [eax+0x18], cx; sete dl; mov eax, edx; pop ebp; ret 
0x5052d95d  # inc ax; add byte [ebx+0x016A5708], cl; push eax; call [ecx+0x1C] 
0x5053981b  # push bp; push eax; push ebx; call edi 
0x50539446  # push bp; push eax; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x505397f8  # push bp; push eax; call [0x5054A0D4] 
0x505427bb  # mov word [eax], cx; xor eax, eax; pop esi; pop ebx; leave; ret 
0x50534397  # mov word [edi], dx; mov eax, [esp+0x08]; pop edi; ret 
0x5053438a  # mov word [edi], dx; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x5050ba9f  # mov word [esi+0x2A], ax; call ebx 
0x5050b365  # mov word [esi+0x2E], ax; call ebx 
0x5050be12  # mov word [esi+0x30], ax; push 0x5054A934; push edi; call [0x5054A0B8] 
0x5050bdfd  # mov word [esi+0x30], ax; call [0x5054A0B8] 
0x50542da4  # mov word [eax+0x08], cx; pop ebx; leave; ret 
0x5051364a  # mov word [esi+0x000002A2], ax; lea eax, [ebp-0x08]; push eax; push edi; call [0x5054A0CC] 
0x505162cc  # add byte [bx+si], al; add esp, 0x0C; ret 
0x5052bb7a  # add byte [bx+si], al; leave; ret 
0x5053141c  # or bh, bh; call [edi-0x18] 
0x5050c673  # push 0x5054ABF8; push edi; call ebx 
0x50542722  # cmp [di], 0xFFFFFFC0; insb; push ebp; push eax; add dh, byte [ebp-0x26]; call [0x5054A0E4] 
0x50504fd4  # ret 
0x505096ed  # mov [bx+si+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; ret 
0x505207be  # mov [bx+si+0x04], 0xEFCDAB89; mov [eax+0x08], 0x98BADCFE; mov [eax+0x0C], 0x10325476; mov [eax+0x10], 0xC3D2E1F0; ret 
0x50502a61  # call [di] 
0x50544010  # push 0x40000000; push 0x50552104; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544010  # push 0x40000000; push 0x50552104; call [0x5054A0A8] 
0x5051e2dc  # push 0x40000000; push [esp+0x20]; call [0x5054A0A8] 
0x5050f89f  # push 0x80000000; push esi; mov [ebp-0x20], ebx; call [0x5054A0A8] 
0x5050f562  # push 0x80000000; push esi; call [0x5054A0A8] 
0x505480b0  # push 0x80000000; call [0x5054A004] 
0x505103d8  # push 0x80000000; push [ebp+0x0C]; mov [esi+0x00000AA0], eax; call [0x5054A0A8] 
0x505070cb  # push 0x80000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5050d894  # push 0x80000000; push [ebp-0x74]; call [0x5054A0A8] 
0x50547dfd  # push 0x80000000; call esi; push [ebp-0x54]; mov edi, [0x5054A008]; mov [ebp-0x58], eax; call edi 
0x50547ebd  # push 0x80000000; call esi; push [ebp-0x54]; mov esi, eax; call edi 
0x50547dfd  # push 0x80000000; call esi 
0x5050fb98  # push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5053d7a8  # push 0x00100000; push edi; call [0x5054A220] 
0x50532372  # push 0xC3590000; cmp ecx, [0x50555D00]; jne 0x50532381; rep ret 
0x505160b3  # push 0xC4830000; adc byte [edi+0x5E], bl; leave; ret 
0x5052bac1  # push 0xC4830000; adc al, 0x5E; ret 
0x50531edc  # push 0x8BC30000; call [ebp-0x75] 
0x50539d95  # push 0x00000100; push ebx; call [0x5054A200] 
0x50503065  # push 0x00000100; push 0x5054A2C8; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x505493d2  # push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x5050c8ca  # push 0x00000100; push [esp+0x0C]; add eax, 0x000032DC; push eax; call [0x5054A04C] 
0x5050e816  # push 0x00000200; push eax; add edi, 0x00000314; push edi; call [0x5054A04C] 
0x5050547c  # push 0x00000200; push eax; lea eax, [esi+0x00000314]; push eax; call ebx 
0x50506581  # push 0x00000200; push eax; call [0x5054A190]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x50506581  # push 0x00000200; push eax; call [0x5054A190] 
0x5050c71f  # push 0x00000200; push edi; push [ebp-0x10]; call [0x5054A04C] 
0x50503ecb  # push 0x00000200; lea eax, [esi+0x00000314]; push eax; lea eax, [ebp-0x00000204]; push eax; call [0x5054A04C] 
0x5050a1ac  # push 0x00000200; lea edi, [esi+0x00000314]; mov esi, [0x5054A04C]; push eax; push edi; call esi 
0x5050ca58  # push 0x00000200; push [eax]; push edi; call ebx 
0x5050cf9f  # push 0x00000200; push [ebp+0x0C]; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x5050cf80  # push 0x00000200; push [ebp+0x0C]; push ebx; call [0x5054A04C] 
0x50513555  # push 0x00000200; push [ebp+0x0C]; push esi; call [0x5054A04C] 
0x5050fac5  # push 0x00000200; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x50510395  # push 0x00000200; push [ebp+0x0C]; lea eax, [esi+0x000006A0]; push eax; call edi 
0x5050fad6  # push 0x00000200; push [ebp+0x10]; lea eax, [esi+0x000008A0]; push eax; call ebx 
0x505103a6  # push 0x00000200; push [ebp+0x10]; lea eax, [esi+0x000008A0]; push eax; call edi 
0x50501232  # push 0x00000400; push eax; push [0x5055C93C]; push 0x00001A00; call [0x5054A034] 
0x505384c5  # push 0x00001000; push eax; call [0x5054A074] 
0x5050d8ae  # push 0x00001000; lea eax, [ebp-0x70]; push eax; push esi; mov [ebp-0x74], edi; call [0x5054A0C0] 
0x5053d82a  # push 0x00001000; shl edi, 0x0F; add edi, [ecx+0x0C]; push 0x00008000; push edi; call [0x5054A220] 
0x50507154  # push 0x00001000; push [ebp-0x08]; lea eax, [ebp-0x18]; push eax; call [0x5055CA38] 
0x5050123e  # push 0x00001A00; call [0x5054A034] 
0x5053d7a3  # push 0x00002000; push 0x00100000; push edi; call [0x5054A220] 
0x505464d5  # push 0x50552300; push [0x5055E078]; mov [0x5055DF48], eax; call esi 
0x5050722f  # push 0x00014000; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x505071d8  # push 0x00024000; push esi; push esi; push 0x0000000A; call [0x5055CA00] 
0x5053d835  # push 0x00008000; push edi; call [0x5054A220] 
0x50546790  # push 0x00008000; call esi; push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x5050660e  # push 0x00008000; call esi 
0x5050397f  # push 0x5054A300; push ebx; call edi; push [ebp+0x10]; push ebx; call edi 
0x5050397f  # push 0x5054A300; push ebx; call edi 
0x50515ddb  # push 0x3B000001; ret 
0x505485b7  # push 0x80000001; call [0x5054A000] 
0x50548a4c  # push 0x80000001; call [0x5054A004] 
0x50548419  # push 0x80000001; call esi 
0x5050c6ef  # push 0x59590002; test eax, eax; je 0x5050C71F; push edi; mov byte [eax], 0x00; call [0x5054A03C] 
0x5053df44  # push 0x00000104; mov esi, 0x5055DB81; push esi; push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x50538292  # push 0x00000104; mov esi, 0x5055D590; push esi; push ebx; mov byte [0x5055D694], bl; call [0x5054A1C8] 
0x50541988  # push 0x00001004; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x50544015  # push 0x50552104; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x50544015  # push 0x50552104; call [0x5054A0A8] 
0x50546619  # push 0x50552204; push [0x5055E078]; mov [0x5055DF8C], eax; call esi 
0x505038fe  # push 0x5054A304; push [ebp+0x0C]; call [0x5054A05C] 
0x5050c630  # push 0x5054AC04; push edi; call ebx 
0x5053b51b  # push 0x00000105; call edi 
0x50507350  # push 0x00070007; push 0x00000000; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x505464c3  # push 0x50552308; push [0x5055E078]; mov [0x5055DF44], eax; call esi 
0x50547c85  # push 0x5055E108; call [0x5054A18C]; retn 0x0004 
0x50547c85  # push 0x5055E108; call [0x5054A18C] 
0x50538f66  # push 0xC0000409; call [0x5054A128]; push eax; call [0x5054A1E4]; leave; ret 
0x50538f66  # push 0xC0000409; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538f66  # push 0xC0000409; call [0x5054A128] 
0x50537aa9  # push 0x50550F0C; call [0x5054A1B0] 
0x5050111b  # push 0x5055520C; call [0x5054A18C]; test eax, eax; jle 0x50501135; push 0x5055C948; call [0x5054A020] 
0x5050113c  # push 0x5055520C; call [0x5054A18C]; test eax, eax; jle 0x50501156; push 0x5055C948; call [0x5054A024] 
0x5050111b  # push 0x5055520C; call [0x5054A18C] 
0x5050c54a  # push 0x5054AC0C; push edi; call ebx 
0x505010dc  # push 0x50555210; call esi; push 0x00000000; push 0x5055C93C; mov edi, eax; call esi 
0x505010dc  # push 0x50555210; call esi 
0x505436a0  # push 0x50505510; push 0x00000001; push eax; push edi; push edi; call [0x5054A16C] 
0x505413c1  # push 0x56505510; call [0x5054A230] 
0x50539d91  # push 0x68505510; add byte [ecx], al; add byte [eax], al; push ebx; call [0x5054A200] 
0x505464b1  # push 0x50552314; push [0x5055E078]; mov [0x5055DF40], eax; call esi 
0x505473f4  # push 0x00002714; call [0x5055DF88] 
0x5050c528  # push 0x5054AC14; push esi; call ebx 
0x50538b3d  # push 0xC0000417; call [0x5054A128]; push eax; call [0x5054A1E4] 
0x50538b3d  # push 0xC0000417; call [0x5054A128] 
0x505480a5  # push 0x00020019; push 0x00000000; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x5054A004] 
0x50546607  # push 0x5055221C; push [0x5055E078]; mov [0x5055DF88], eax; call esi 
0x5054649f  # push 0x5055231C; push [0x5055E078]; mov [0x5055DF3C], eax; call esi 
0x505066cb  # push 0x5054A51C; push [0x5055C9F4]; mov [0x5055CA14], eax; call esi 
0x5050c51c  # push 0x5054AC1C; push esi; call ebx 
0x50542997  # push 0x57505520; mov [0x5055DEBC], eax; call esi 
0x50546410  # push 0xFF505523; xor eax, 0x5055E078; mov [0x5055DF1C], eax; call esi 
0x5054648d  # push 0x50552324; push [0x5055E078]; mov [0x5055DF38], eax; call esi 
0x50509ef9  # push 0x5054AB24; push eax; call [0x5054A03C]; lea eax, [ebp+eax-0x44]; push eax; call esi 
0x50509ef9  # push 0x5054AB24; push eax; call [0x5054A03C] 
0x5050c510  # push 0x5054AC24; push esi; call ebx 
0x5050c504  # push 0x5054AC28; push edi; call ebx 
0x505466cd  # push 0x5055212C; push [0x5055E078]; mov [0x5055DFB8], eax; call esi 
0x505465f5  # push 0x5055222C; push [0x5055E078]; mov [0x5055DF84], eax; call esi 
0x5054647b  # push 0x5055232C; push [0x5055E078]; mov [0x5055DF34], eax; call esi 
0x5050c4e3  # push 0x5054AC30; push edi; call ebx 
0x505429c8  # push 0x50552034; push edi; call esi 
0x50546469  # push 0x50552334; push [0x5055E078]; mov [0x5055DF30], eax; call esi 
0x5054711f  # push 0x00002734; call [0x5055DF88] 
0x505066b9  # push 0x5054A534; push [0x5055C9F4]; mov [0x5055CA10], eax; call esi 
0x5050be16  # push 0x5054A934; push edi; call [0x5054A0B8] 
0x505466bb  # push 0x50552138; push [0x5055E078]; mov [0x5055DFB4], eax; call esi 
0x505465e3  # push 0x5055223C; push [0x5055E078]; mov [0x5055DF80], eax; call esi 
0x50503414  # push 0x5055C93C; mov [ebp-0x38], eax; mov [ebp-0x30], ebx; call [0x5054A18C] 
0x505010e5  # push 0x5055C93C; mov edi, eax; call esi; push 0x5055C948; call [0x5054A154] 
0x505010e5  # push 0x5055C93C; mov edi, eax; call esi 
0x5050109e  # push 0x5055C93C; call [0x5054A18C]; pop edi; pop esi; retn 0x0004 
0x5050109e  # push 0x5055C93C; call [0x5054A18C] 
0x50547e6f  # push 0x000F003F; push 0x00000000; push 0x5054ABA8; push ebx; call esi 
0x50547e3b  # push 0x000F003F; push 0x00000000; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x505481cc  # push 0x000F003F; push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x5054A004] 
0x50547eb2  # push 0x000F003F; push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x50531652  # push 0x00001F40; push esi; call [eax+0x04] 
0x5052e232  # push 0x00001F40; push edi; call [eax+0x04] 
0x50546457  # push 0x50552340; push [0x5055E078]; mov [0x5055DF2C], eax; call esi 
0x5052ef80  # push 0x00001F41; push esi; call [eax+0x04] 
0x5052e2d9  # push 0x00001F41; push edi; call [eax+0x04] 
0x5052e4d0  # push 0x00001F41; mov esi, [esi+0x0C]; push esi; mov eax, [esi]; call [eax+0x04] 
0x5052e8b8  # push 0x00001F41; mov esi, [esi+0x0C]; mov eax, [esi]; push esi; call [eax+0x04] 
0x505011d6  # push 0x5055C944; call [0x5054A18C]; push esi; call [0x5054A028]; pop esi; retn 0x0004 
0x5050117c  # push 0x5055C944; call [0x5054A18C]; push esi; call [0x5054A028] 
0x5050117c  # push 0x5055C944; call [0x5054A18C] 
0x5053ee3f  # push 0x50551648; push eax; call [0x5054A088] 
0x505465d1  # push 0x50552248; push [0x5055E078]; mov [0x5055DFB0], eax; call esi 
0x5050112a  # push 0x5055C948; call [0x5054A020]; ret 
0x5050112a  # push 0x5055C948; call [0x5054A020] 
0x5050114b  # push 0x5055C948; call [0x5054A024]; ret 
0x5050114b  # push 0x5055C948; call [0x5054A024] 
0x505010ee  # push 0x5055C948; call [0x5054A154]; cmp edi, 0xFFFFFFFF; je 0x50501112; push edi; call [0x5054A158] 
0x505010ee  # push 0x5055C948; call [0x5054A154] 
0x50501063  # push 0x5055C948; call [0x5054A160]; call [0x5054A184]; mov [0x50555210], eax; call [0x5054A188] 
0x50501063  # push 0x5055C948; call [0x5054A160]; call [0x5054A184] 
0x50501063  # push 0x5055C948; call [0x5054A160] 
0x50546445  # push 0x5055234C; push [0x5055E078]; mov [0x5055DF28], eax; call esi 
0x50511314  # push 0x5055CA4C; call [0x5054A104]; test eax, eax; jne 0x5051133A; push 0x00000064; call [0x5054A048] 
0x50511314  # push 0x5055CA4C; call [0x5054A104] 
0x50513e35  # push 0x5055CA4C; call [0x5054A108] 
0x505112ea  # push 0x5055CA4C; call [0x5054A020]; ret 
0x505112ea  # push 0x5055CA4C; call [0x5054A020] 
0x50511354  # push 0x5055CA4C; call [0x5054A024]; ret 
0x50511354  # push 0x5055CA4C; call [0x5054A024] 
0x50513e5f  # push 0x5055CA4C; call [0x5054A154] 
0x505466a9  # push 0x50552150; push [0x5055E078]; mov [0x5055DFAC], eax; call esi 
0x505066a7  # push 0x5054A550; push [0x5055C9F4]; mov [0x5055CA0C], eax; call esi 
0x50518088  # push 0x0451FF50; pop ecx; mov eax, [ebx+0x48]; mov [edi+0x68], eax; call [eax] 
0x50509092  # push 0x0C75FF53; push [ebp+0x08]; call eax 
0x505465bf  # push 0x50552254; push [0x5055E078]; mov [0x5055DF7C], eax; call esi 
0x50546433  # push 0x50552354; push [0x5055E078]; mov [0x5055DF24], eax; call esi 
0x50532b86  # push 0xB70F5055; add al, 0x41; and eax, 0x00000103; pop ebp; ret 
0x50532d90  # push 0xB70F5055; add al, 0x41; and eax, 0x00000107; pop ebp; ret 
0x50532c8b  # push 0xB70F5055; add al, 0x41; and eax, 0x00000080; pop ebp; ret 
0x50532c07  # push 0xB70F5055; add al, 0x41; and eax, 0x04; pop ebp; ret 
0x50504973  # push 0x5054A358; push eax; call [0x5054A260] 
0x50509ee2  # push 0x5054A358; push eax; call esi 
0x50506767  # push 0x5054A458; push [0x5055C9F4]; mov [0x5055CA34], eax; call esi 
0x5050d3df  # push 0x5054AC58; push eax; call [0x5054A260] 
0x50546421  # push 0x5055235C; push [0x5055E078]; mov [0x5055DF20], eax; call esi 
0x50546697  # push 0x50552160; push [0x5055E078]; mov [0x5055DFA8], eax; call esi 
0x505465ad  # push 0x50552260; push [0x5055E078]; mov [0x5055DF78], eax; call esi 
0x50503d50  # push 0x5055C960; call [0x5054A15C] 
0x505015a0  # push 0x5055C960; call [0x5054A0D4] 
0x5053ee30  # push 0x50551664; call [0x5054A224] 
0x50504916  # push 0x5054A364; lea eax, [ebp+0x48]; push eax; call [0x5054A03C] 
0x505413c0  # push 0x50551068; push esi; call [0x5054A230] 
0x50539d90  # push 0x50551068; push 0x00000100; push ebx; call [0x5054A200] 
0x5054640f  # push 0x50552368; push [0x5055E078]; mov [0x5055DF1C], eax; call esi 
0x5050675a  # push 0x5054A46C; push [0x5055C9F4]; call esi 
0x50506695  # push 0x5054A56C; push [0x5055C9F4]; mov [0x5055CA08], eax; call esi 
0x505470ba  # push 0x0000276D; call [0x5055DF88] 
0x50546c53  # push 0x0000276D; call eax 
0x50546685  # push 0x50552170; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x5054659b  # push 0x50552270; push [0x5055E078]; mov [0x5055DF74], eax; call esi 
0x5050a9af  # push 0x5054AB70; push ebx; call [0x5054A260] 
0x505064a3  # push 0x5055C970; call [0x5054A18C]; ret 
0x505064a3  # push 0x5055C970; call [0x5054A18C] 
0x5052f5b5  # push 0x5052F273; push edi; push edi; call [0x5054A06C] 
0x505463fd  # push 0x50552374; push [0x5055E078]; mov [0x5055DF18], eax; call esi 
0x50506737  # push 0x5054A47C; push [0x5055C9F4]; mov [0x5055CA2C], eax; call esi 
0x50505c8c  # push 0x00000080; push [ebp+0x0C]; mov [esi+0x0000051C], eax; lea eax, [esi+0x00000520]; push eax; call ebx 
0x50505ca3  # push 0x00000080; push [ebp+0x14]; lea eax, [esi+0x000005A0]; push eax; call ebx 
0x50505cb4  # push 0x00000080; push [ebp+0x18]; lea eax, [esi+0x00000620]; push eax; call ebx 
0x50505ccc  # push 0x00000080; push [ebp+0x1C]; lea eax, [esi+0x00000114]; push eax; call ebx 
0x505055fc  # push 0x00000080; push [ebp-0x24]; mov [esi+0x00000104], eax; lea eax, [esi+0x00000114]; push eax; call [0x5054A04C] 
0x505463eb  # push 0x50552380; push [0x5055E078]; mov [0x5055DF14], eax; call esi 
0x50531ce1  # push 0x5055D480; call [0x5054A19C] 
0x505466e4  # push 0x5055E080; call [0x5054A15C] 
0x50546728  # push 0x5055E080; call [0x5054A0D4]; test eax, eax; jnl 0x5054673B; or eax, 0xFFFFFFFF; ret 
0x50546728  # push 0x5055E080; call [0x5054A0D4] 
0x50518103  # push 0x8D40C483; dec ebp; mov esp, 0x7077FF51; call [eax+0x08] 
0x50524353  # push 0x2BFFCA83; rol [ebx], 1; retn 0x463B 
0x50546589  # push 0x50552284; push [0x5055E078]; mov [0x5055DF70], eax; call esi 
0x50531d55  # push 0x5055D484; push ebx; push [ebp-0x34]; mov edi, [0x5054A190]; call edi 
0x50546ac9  # push 0x5055E084; call [0x5054A15C] 
0x50537688  # push 0x1A74FF85; push edi; call [0x5054A0D4] 
0x50513e30  # push 0x00001388; push 0x5055CA4C; call [0x5054A108] 
0x50546678  # push 0x50552188; push [0x5055E078]; call esi 
0x50506683  # push 0x5054A588; push [0x5055C9F4]; mov [0x5055CA04], eax; call esi 
0x50539442  # push 0x6660358B; push ebp; push eax; mov [ebp-0x1C], esi; push esi; call [0x5054A15C] 
0x50542969  # push 0x5055208C; push edi; call esi 
0x505463d9  # push 0x5055238C; push [0x5055E078]; mov [0x5055DF10], eax; call esi 
0x50503d67  # push 0x50502F93; push ebx; push ebx; mov [ebp+0x08], ebx; call [0x5054A06C] 
0x505374b0  # push 0x50550E94; push eax; mov ebx, [0x5054A088]; call ebx 
0x50537363  # push 0x50550E94; push eax; call [0x5054A088] 
0x50546577  # push 0x50552294; push [0x5055E078]; mov [0x5055DF6C], eax; call esi 
0x505463c7  # push 0x50552394; push [0x5055E078]; mov [0x5055DF0C], eax; call esi 
0x5050beaf  # push 0x5054AB94; push edi; call [0x5054A0B8] 
0x5054294e  # push 0x50552098; call [0x5054A08C] 
0x5050322c  # push 0x00003A98; call [0x5054A048]; push [0x5055C960]; push esi; call [0x5054A18C] 
0x50502fb0  # push 0x00003A98; call [0x5054A048]; push [0x5055C960]; mov esi, 0x5055C960; push esi; call [0x5054A18C] 
0x50502fb0  # push 0x00003A98; call [0x5054A048] 
0x50506671  # push 0x5054A598; push [0x5055C9F4]; mov [0x5055CA00], eax; call esi 
0x5050f63b  # push 0x5054AC98; push [ebp-0x7C]; call [0x5054A260] 
0x5050f61c  # push 0x5054AC9C; push esi; call [0x5054A260] 
0x50546661  # push 0x505521A0; push [0x5055E078]; mov [0x5055DF9C], eax; call esi 
0x505463b5  # push 0x505523A0; push [0x5055E078]; mov [0x5055DF08], eax; call esi 
0x50503d82  # push 0x565054A0; call [0x5054A064]; push esi; call [0x5054A060] 
0x50503d82  # push 0x565054A0; call [0x5054A064] 
0x50506725  # push 0x5054A4A0; push [0x5055C9F4]; mov [0x5055CA28], eax; call esi 
0x5050b9e3  # push 0x5054ABA0; lea eax, [edi+0x01]; push eax; call [0x5054A0B8] 
0x5051e4c6  # push 0x8D5054A2; inc ebp; int3; push eax; call [0x5054A278] 
0x50501f59  # push 0x8D5054A2; inc ebp; fcom qword [eax-0x01]; adc eax, 0x5054A278; push 0x0000000A; call [0x5054A048] 
0x50546565  # push 0x505522A4; push [0x5055E078]; mov [0x5055DF68], eax; call esi 
0x505112db  # push 0x50555CA4; call [0x5054A18C]; test eax, eax; jle 0x505112F5; push 0x5055CA4C; call [0x5054A020] 
0x50511345  # push 0x50555CA4; call [0x5054A18C]; test eax, eax; jle 0x5051135F; push 0x5055CA4C; call [0x5054A024] 
0x505112db  # push 0x50555CA4; call [0x5054A18C] 
0x5050b859  # push 0x5054ABA4; push ecx; mov [esi+0x0C], ecx; call edi 
0x505108d1  # push 0x5054ACA4; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x50510829  # push 0x5054ACA4; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x505463ad  # push 0x505523A8; push eax; call esi 
0x50547e76  # push 0x5054ABA8; push ebx; call esi 
0x5050b81d  # push 0x5054ABAC; push [esi+0x08]; call [0x5054A03C] 
0x50546553  # push 0x505522B0; push [0x5055E078]; mov [0x5055DF64], eax; call esi 
0x50546381  # push 0x505523B0; call [0x5054A08C]; push ebx; mov [0x5055E078], eax; call esi 
0x50546381  # push 0x505523B0; call [0x5054A08C] 
0x50506713  # push 0x5054A4B0; push [0x5055C9F4]; mov [0x5055CA24], eax; call esi 
0x50506669  # push 0x5054A5B0; push eax; call esi 
0x5050b7f3  # push 0x5054ABB0; push eax; call [0x5054A05C] 
0x5054664f  # push 0x505521B8; push [0x5055E078]; mov [0x5055DF98], eax; call esi 
0x50546f74  # push 0x5054A8B8; mov esi, 0x5055DEE8; push esi; call [0x5054A260] 
0x505467bf  # push 0x505523BC; push eax; call esi 
0x505373de  # push 0x50550EC0; push eax; call [0x5054A088] 
0x505374c4  # push 0x50550EC0; push [ebp-0x1C]; call ebx 
0x50546541  # push 0x505522C0; push [0x5055E078]; mov [0x5055DF60], eax; call esi 
0x50506631  # push 0x5054A5C0; mov [0x5055C9F0], eax; call ebx 
0x5053d787  # push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x50506701  # push 0x5054A4C4; push [0x5055C9F4]; mov [0x5055CA20], eax; call esi 
0x5050306a  # push 0x5054A2C8; lea eax, [ebp+0x00000084]; push eax; call [0x5054A04C] 
0x50546797  # push 0x505523CC; mov ebx, eax; call [0x5054A08C]; push ebx; mov [0x5055E07C], eax; call esi 
0x50546797  # push 0x505523CC; mov ebx, eax; call [0x5054A08C] 
0x5050662a  # push 0x5054A5CC; call ebx; push 0x5054A5C0; mov [0x5055C9F0], eax; call ebx 
0x5050662a  # push 0x5054A5CC; call ebx 
0x505130a0  # push 0x5054ACCC; push eax; call [0x5054A260] 
0x505377da  # push 0x50550ED0; push edi; mov [0x5055D54C], eax; call esi 
0x5054652f  # push 0x505522D0; push [0x5055E078]; mov [0x5055DF5C], eax; call esi 
0x505275b4  # push 0x5054C1D0; push edi; call [eax+0x08] 
0x5052f829  # push 0x50FFFED0; push esi; call [esi+0x44] 
0x5054663d  # push 0x505521D4; push [0x5055E078]; mov [0x5055DF94], eax; call esi 
0x50509844  # push 0x5054AAD4; push edi; call [0x5054A260] 
0x50543c3b  # push 0x3B5055D5; ret 
0x50543b56  # push 0xC15055D5; clc; add dh, bh; fcomp [esi+0x5D]; ret 
0x505377cd  # push 0x50550ED8; push edi; mov [0x5055D548], eax; call esi 
0x5054651d  # push 0x505522D8; push [0x5055E078]; mov [0x5055DF58], eax; call esi 
0x50531d8f  # push 0x5055D4D8; push ebx; push [ebp-0x34]; call edi 
0x505066ef  # push 0x5054A4DC; push [0x5055C9F4]; mov [0x5055CA1C], eax; call esi 
0x50546571  # push 0xFF5055DF; salc; push 0x50552294; push [0x5055E078]; mov [0x5055DF6C], eax; call esi 
0x50538f4a  # push 0x50550FE0; call [0x5054A1A4] 
0x50546a28  # push 0xFF5055E0; salc; push 0x00000025; push [0x5055E07C]; mov [0x5055E060], eax; call esi 
0x5050c6bd  # push 0x5054ABE0; push edi; call ebx 
0x5052f65e  # push 0x5052F3E0; push edi; push edi; call [0x5054A06C] 
0x505377c0  # push 0x50550EE4; push edi; mov [0x5055D544], eax; call esi 
0x50546510  # push 0x505522E4; push [0x5055E078]; call esi 
0x5051e506  # push 0x000003E8; push ebx; push [ebp-0x10]; push [ebp-0x04]; call [0x5054A114] 
0x5054033d  # push 0x0000FDE9; call [0x5054A240]; mov [ebp-0x10], eax; test eax, eax; jne 0x50540383; call [0x5054A0E4] 
0x50509685  # push 0x0000FDE9; call [0x5054A240] 
0x5050957e  # push 0x0000FDE9; call [0x5054A190] 
0x5054662b  # push 0x505521EC; push [0x5055E078]; mov [0x5055DF90], eax; call esi 
0x5050c6a7  # push 0x5054ABEC; push edi; call ebx 
0x505377b8  # push 0x50550EF0; push edi; call esi 
0x505464f9  # push 0x505522F0; push [0x5055E078]; mov [0x5055DF50], eax; call esi 
0x505074e9  # push 0x5054A5F4; push edx; call [0x5055C984] 
0x50507602  # push 0x5054A5F4; push edi; call [0x5055C984] 
0x505464e7  # push 0x505522F8; push [0x5055E078]; mov [0x5055DF4C], eax; call esi 
0x505066dd  # push 0x5054A4F8; push [0x5055C9F4]; mov [0x5055CA18], eax; call esi 
0x5050c674  # push 0x5054ABF8; push edi; call ebx 
0x50537ab8  # push 0x50550EFC; push eax; call [0x5054A088] 
0x5052e13c  # push 0x5054A2FC; push eax; call [ecx+0x08] 
0x505039a2  # push 0x5054A2FC; push ebx; call edi; push ebx; call [0x5054A03C] 
0x505039a2  # push 0x5054A2FC; push ebx; call edi 
0x50547d76  # push 0x000000FF; call [0x5054A1B4] 
0x50537a98  # push 0x000000FF; call eax; add esp, 0x0C; pop ebp; ret 
0x50537a98  # push 0x000000FF; call eax 
0x50518093  # push 0x478910FF; jo 0x50518025; xchg [eax-0x7B000000], eax; sal byte [eax+ecx-0x75], 0x4F; js 0x505180F7; call [ecx+0x08] 
0x50506437  # push 0x0000FFFF; push eax; call [0x5054A074] 
0x50546c92  # push 0x0000FFFF; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x50506472  # push 0x0000FFFF; push 0x00000000; call [0x5054A074] 
0x5053c427  # push 0x8559FFFF; sal byte [ebp-0x1F], 0x8B; ret 
0x50528740  # push 0x03FFFFFF; ret 
0x50506888  # push 0x50FFFFFF; mov [ebp-0x00000098], edi; call [0x5054A054] 
0x505287be  # push 0x8BFFFFFF; ret 
0x50512fb9  # imul edi, [ecx], 0xC4830000; or al, 0x33; rol byte [eax+0x5F], 0x5E; pop ebx; leave; retn 0x0004 
0x5053a1a0  # imul edx, [ebp+0x50], 0x08C083C3; ret 
0x5053a1b3  # imul edx, [ebp+0x50], 0x0CC083C3; ret 
0x505152f9  # imul esi, [esi+0x00], 0x1CC48300; pop edi; pop esi; ret 
0x50549228  # imul eax, eax, 0x00015180; leave; ret 
0x5051e494  # imul esi, esi, 0x000003E8; pop ecx; mov [ebp-0x18], esi; call edi 
0x5050fc21  # imul edi, edi, 0xCEE957FF; add byte [eax], al; add byte [edi+0x57], dl; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x50515f52  # push 0x00000000; add byte [ebx+0x5E5F10C4], al; pop ebx; ret 
0x505384c0  # push 0x00000000; sete al; push 0x00001000; push eax; call [0x5054A074] 
0x5052dc6c  # push 0x00000000; push eax; mov [eax+0x50], ecx; call [eax+0x48] 
0x50537782  # push 0x00000000; push eax; call [0x5054A02C]; pop ebp; ret 
0x50546745  # push 0x00000000; push eax; call [0x5054A02C]; jmp [0x5055DF84] 
0x50537782  # push 0x00000000; push eax; call [0x5054A02C] 
0x50506516  # push 0x00000000; push eax; call [0x5054A084]; retn 0x0004 
0x50506562  # push 0x00000000; push eax; call [0x5054A084]; retn 0x0008 
0x50506516  # push 0x00000000; push eax; call [0x5054A084] 
0x5052dbd7  # push 0x00000000; push eax; call [ecx+0x08] 
0x5052f105  # push 0x00000000; push eax; call [ecx+0x1C]; push 0xFFFFFFFF; push edi; call [edi+0x48] 
0x5052f105  # push 0x00000000; push eax; call [ecx+0x1C] 
0x5050825e  # push 0x00000000; push ebx; add eax, 0x30; push eax; push edi; call [0x5055CA2C] 
0x50508ca9  # push 0x00000000; push ebx; call [0x5054A258] 
0x50531ae1  # push 0x00000000; push ebx; call eax 
0x50526730  # push 0x00000000; push edi; call [eax+0x08] 
0x50526726  # push 0x00000000; push edi; call [eax+0x1C] 
0x50515c78  # push 0x00000000; push edi; call [edi+0x00000244] 
0x505010e3  # push 0x00000000; push 0x5055C93C; mov edi, eax; call esi; push 0x5055C948; call [0x5054A154] 
0x505010e3  # push 0x00000000; push 0x5055C93C; mov edi, eax; call esi 
0x50531650  # push 0x00000000; push 0x00001F40; push esi; call [eax+0x04] 
0x5052e230  # push 0x00000000; push 0x00001F40; push edi; call [eax+0x04] 
0x5052ef7e  # push 0x00000000; push 0x00001F41; push esi; call [eax+0x04] 
0x5052e2d7  # push 0x00000000; push 0x00001F41; push edi; call [eax+0x04] 
0x5052e8b6  # push 0x00000000; push 0x00001F41; mov esi, [esi+0x0C]; mov eax, [esi]; push esi; call [eax+0x04] 
0x505064a1  # push 0x00000000; push 0x5055C970; call [0x5054A18C]; ret 
0x505064a1  # push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x50547e74  # push 0x00000000; push 0x5054ABA8; push ebx; call esi 
0x5054033b  # push 0x00000000; push 0x0000FDE9; call [0x5054A240] 
0x50506470  # push 0x00000000; push 0x0000FFFF; push 0x00000000; call [0x5054A074] 
0x5052672e  # push 0x00000000; push 0x00000000; push edi; call [eax+0x08] 
0x50515c76  # push 0x00000000; push 0x00000000; push edi; call [edi+0x00000244] 
0x50507355  # push 0x00000000; push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x50537baf  # push 0x00000000; push 0x00000002; push 0x00000000; call [0x5055E270] 
0x50531553  # push 0x00000000; mov edi, [edi+0x0C]; mov eax, [edi]; push 0x00001F40; push edi; call [eax+0x04] 
0x50538b16  # push 0x00000000; mov ebx, eax; call [0x5054A1A8]; lea eax, [ebp-0x000002D8]; push eax; call [0x5054A1A4] 
0x50538b16  # push 0x00000000; mov ebx, eax; call [0x5054A1A8] 
0x50547e40  # push 0x00000000; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x505481d1  # push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x5054A004] 
0x50547eb7  # push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x505480aa  # push 0x00000000; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x5054A004] 
0x5053df4f  # push 0x00000000; mov byte [0x5055DC85], 0x00; call [0x5054A1C8] 
0x50536957  # push 0x00000000; mov [ebp-0x00000328], 0x40000015; mov [ebp-0x0000031C], esi; mov [ebp-0x000002D4], eax; call [0x5054A1A8] 
0x5050103d  # push 0x00000000; call [0x5054A240]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x5050103d  # push 0x00000000; call [0x5054A240] 
0x50537bb3  # push 0x00000000; call [0x5055E270]; xor eax, eax; pop ebp; ret 
0x50537bb3  # push 0x00000000; call [0x5055E270] 
0x50506477  # push 0x00000000; call [0x5054A074] 
0x5054249b  # push 0x00000000; call [0x5054A180]; push eax; call [0x5054A084] 
0x5054249b  # push 0x00000000; call [0x5054A180] 
0x50538f42  # push 0x00000000; call [0x5054A1A8]; push 0x50550FE0; call [0x5054A1A4] 
0x50538f42  # push 0x00000000; call [0x5054A1A8] 
0x5051e3e8  # push 0x00000000; push [eax]; call [0x5054A0EC] 
0x50536362  # push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x505364b1  # push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x505361db  # push 0x00000000; push [0x5055D69C]; call edi 
0x5053d6c0  # push 0x00000000; push [eax+0x0C]; call esi 
0x50518de2  # push 0x00000000; push [esp+0x14]; push [esp+0x14]; push esi; call eax 
0x50542590  # push 0x00000000; push [ebp+0x0C]; push eax; call [0x5054A0EC] 
0x50543879  # push 0x00000000; push [ebp+0x18]; push [ebp-0x1C]; push 0x00000009; push [ebp+0x1C]; call esi 
0x50548451  # push 0x00000000; push [ebp-0x78]; call [0x5054A018] 
0x50538510  # push 0x00000000; push [esi-0x04]; call [0x5054A1DC] 
0x505072f5  # push 0x00000000; push [edi+0x000037F4]; call [0x5055CA10] 
0x5053ee4f  # push 0x00000000; call eax; ret 
0x5053ee4f  # push 0x00000000; call eax 
0x505072ad  # push 0x00000000; call esi 
0x505436a5  # push 0x00000001; push eax; push edi; push edi; call [0x5054A16C] 
0x5052dcf2  # push 0x00000001; push eax; mov [eax+0x60], ecx; call [eax+0x48] 
0x5052f288  # push 0x00000001; push eax; lea edi, [esp+0x20]; call [0x5054A110] 
0x505075b5  # push 0x00000001; push eax; call [0x5055CA18] 
0x50531721  # push 0x00000001; push eax; call [ecx+0x08]; add esp, 0x10; pop ebp; ret 
0x50531721  # push 0x00000001; push eax; call [ecx+0x08] 
0x5052d963  # push 0x00000001; push eax; call [ecx+0x1C] 
0x50542a1c  # push 0x00000001; push eax; call edi 
0x50538847  # push 0x00000001; push edx; call [0x5055E13C] 
0x50508f3a  # push 0x00000001; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50542895  # push 0x00000001; push esi; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x50527195  # push 0x00000001; push esi; call [eax+0x1C] 
0x50546cb3  # push 0x00000001; push esi; call eax 
0x505075b2  # push 0x00000001; push edi; push 0x00000001; push eax; call [0x5055CA18] 
0x5050f89d  # push 0x00000001; push 0x80000000; push esi; mov [ebp-0x20], ebx; call [0x5054A0A8] 
0x5050f560  # push 0x00000001; push 0x80000000; push esi; call [0x5054A0A8] 
0x505070c9  # push 0x00000001; push 0x80000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5050d892  # push 0x00000001; push 0x80000000; push [ebp-0x74]; call [0x5054A0A8] 
0x5050103b  # push 0x00000001; push 0x00000000; call [0x5054A240]; mov eax, [ebp+0x08]; pop ebp; retn 0x000C 
0x5050103b  # push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50542745  # push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x5054A178] 
0x5051625e  # push 0x00000001; lea eax, [ebp+0x10]; push eax; push ebx; call [esi+0x04] 
0x50547e92  # push 0x00000001; lea eax, [ebp+0x30]; push eax; push [ebp-0x54]; call [0x5054A00C] 
0x50548626  # push 0x00000001; lea eax, [ebp-0x68]; push eax; push [ebp-0x6C]; call [0x5054A00C] 
0x505401f3  # push 0x00000001; lea eax, [ebp-0x01]; push eax; mov eax, [edi]; push [esi+eax]; call [0x5054A0C0] 
0x5052f45b  # push 0x00000001; lea eax, [esi+0x2C]; push eax; push edi; push [esi]; call [0x5054A140] 
0x50542712  # push 0x00000001; lea ecx, [ebp+0x08]; push ecx; push eax; call [0x5054A174] 
0x5051309b  # push 0x00000001; push [ecx+0x1C]; push 0x5054ACCC; push eax; call [0x5054A260] 
0x50541a76  # push 0x00000001; push [ebp+0x08]; call ebx 
0x505414a2  # push 0x00000001; push [ebp+0x18]; call esi 
0x50543868  # push 0x00000001; push [ebp+0x1C]; call esi 
0x50539ea0  # push 0x00000001; push [ebp+0x20]; call esi 
0x50531874  # push 0x00000001; push [ebp+0x28]; call ebx 
0x5053186c  # push 0x00000001; push [ebp-0x0C]; call ebx 
0x5050226b  # push 0x00000001; push [esi+0x10]; push [esi+0x20]; push [esi+0x18]; call [0x5054A27C] 
0x50507357  # push 0x00000001; push [edi+0x000037F4]; call [0x5055CA14] 
0x5050c398  # push 0x00000002; add byte [ebx-0x0CC4F33C], al; je 0x5050C3BD; push esi; call [0x5054A03C] 
0x5051e2d8  # push 0x00000002; push eax; push eax; push 0x40000000; push [esp+0x20]; call [0x5054A0A8] 
0x50508f4b  # push 0x00000002; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x505070f0  # push 0x00000002; push esi; push ebx; call [0x5054A0A4] 
0x5052dcb3  # push 0x00000002; push esi; mov [esi+0x54], eax; mov [esi+0x58], ebx; mov [esi+0x5C], edi; call [esi+0x48] 
0x5050fca9  # push 0x00000002; push edi; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x505074e7  # push 0x00000002; push 0x5054A5F4; push edx; call [0x5055C984] 
0x5052e13a  # push 0x00000002; push 0x5054A2FC; push eax; call [ecx+0x08] 
0x50546c90  # push 0x00000002; push 0x0000FFFF; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x50537bb1  # push 0x00000002; push 0x00000000; call [0x5055E270]; xor eax, eax; pop ebp; ret 
0x50537bb1  # push 0x00000002; push 0x00000000; call [0x5055E270] 
0x5054041c  # push 0x00000002; lea eax, [ebp-0x08]; push eax; mov eax, [edi]; push [esi+eax]; call [0x5054A0C0] 
0x50546827  # push 0x00000002; push [0x5055E07C]; call esi 
0x5052dd1e  # push 0x00000003; push eax; mov [eax+0x64], ecx; call [eax+0x48] 
0x5051e207  # push 0x00000003; push ebx; push 0x00000001; push 0x80000000; push [ebp+0x08]; call [0x5054A0A8] 
0x505070c6  # push 0x00000003; push esi; push 0x00000001; push 0x80000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5050fbc4  # push 0x00000003; push edi; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5050f55d  # push 0x00000003; push edi; push 0x00000001; push 0x80000000; push esi; call [0x5054A0A8] 
0x5050d88f  # push 0x00000003; push edi; push 0x00000001; push 0x80000000; push [ebp-0x74]; call [0x5054A0A8] 
0x5054400e  # push 0x00000003; push 0x40000000; push 0x50552104; call [0x5054A0A8]; mov [0x50556CE4], eax; ret 
0x5054400e  # push 0x00000003; push 0x40000000; push 0x50552104; call [0x5054A0A8] 
0x50508298  # push 0x00000003; add eax, 0x30; push eax; push edi; call [0x5055CA2C] 
0x50546831  # push 0x00000003; push [0x5055E07C]; mov [0x5055DFC4], eax; call esi 
0x50507115  # push 0x00000004; push eax; call [0x5054A0A0] 
0x5052f250  # push 0x00000004; push eax; call [ebp+0x08]; pop ecx; pop ecx; call [0x5054A138] 
0x5052f250  # push 0x00000004; push eax; call [ebp+0x08] 
0x50508f5c  # push 0x00000004; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x5050fb94  # push 0x00000004; push edi; push edi; push 0xC0000000; push [ebp+0x0C]; call [0x5054A0A8] 
0x5053d7a1  # push 0x00000004; push 0x00002000; push 0x00100000; push edi; call [0x5054A220] 
0x50515105  # push 0x00000004; lea eax, [ebp-0x04]; push eax; push [ebp+0x08]; mov byte [ebp-0x01], bl; call [esi+0x04] 
0x50507c96  # push 0x00000004; lea eax, [ebx+edi*8+0x0000389C]; push eax; call [0x5055C9A4] 
0x5050796e  # push 0x00000004; call [0x5055CA1C] 
0x50546840  # push 0x00000004; push [0x5055E07C]; mov [0x5055DFC0], eax; call esi 
0x5054684f  # push 0x00000005; push [0x5055E07C]; mov [0x5055DFD0], eax; call esi 
0x5054685e  # push 0x00000006; push [0x5055E07C]; mov [0x5055DFD8], eax; call esi 
0x5054686d  # push 0x00000007; push [0x5055E07C]; mov [0x5055DFC8], eax; call esi 
0x505064f6  # push 0x00000008; push eax; call [0x5054A07C]; retn 0x0004 
0x5050653e  # push 0x00000008; push eax; call [0x5054A07C]; retn 0x0008 
0x505064f6  # push 0x00000008; push eax; call [0x5054A07C] 
0x5052f199  # push 0x00000008; push eax; call [ebp+0x08] 
0x50541308  # push 0x00000008; call [0x5054A028] 
0x50542418  # push 0x00000008; call [0x5054A180]; push eax; call [0x5054A07C] 
0x50542418  # push 0x00000008; call [0x5054A180] 
0x5054687c  # push 0x00000008; push [0x5055E07C]; mov [0x5055DFBC], eax; call esi 
0x5053d78c  # push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x5053869a  # push 0x00000008; call ebx 
0x5054688b  # push 0x00000009; push [0x5055E07C]; mov [0x5055DFCC], eax; call esi 
0x5054282a  # push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x505437f3  # push 0x00000009; push [ebp+0x1C]; call esi 
0x505071df  # push 0x0000000A; call [0x5055CA00] 
0x50501f67  # push 0x0000000A; call [0x5054A048] 
0x5054689a  # push 0x0000000A; push [0x5055E07C]; mov [0x5055DFD4], eax; call esi 
0x50507311  # push 0x0000000B; push esi; mov [ebp-0x0080], 0x00000200; call [0x5055CA30] 
0x505468a9  # push 0x0000000B; push [0x5055E07C]; mov [0x5055E114], eax; call esi 
0x50527582  # push 0x0000000C; push eax; mov byte [esi+0x0D], cl; mov ecx, [edi]; push edi; call [ecx+0x08] 
0x50542a16  # push 0x0000000C; lea ecx, [ebp-0x14]; push ecx; push 0x00000001; push eax; call edi 
0x505468b8  # push 0x0000000C; push [0x5055E07C]; mov [0x5055DFDC], eax; call esi 
0x5053a174  # push 0x0000000D; pop eax; pop ebp; ret 
0x505468c7  # push 0x0000000D; push [0x5055E07C]; mov [0x5055DFE0], eax; call esi 
0x505468d6  # push 0x0000000E; push [0x5055E07C]; mov [0x5055DFE4], eax; call esi 
0x505468e5  # push 0x0000000F; push [0x5055E07C]; mov [0x5055DFE8], eax; call esi 
0x5052f17c  # push 0x00000010; push eax; call [ebp+0x08] 
0x50508f18  # push 0x00000010; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50547d51  # push 0x00000010; call [0x5054A270] 
0x505468f4  # push 0x00000010; push [0x5055E07C]; mov [0x5055DFF0], eax; call esi 
0x50546903  # push 0x00000011; push [0x5055E07C]; mov [0x5055DFF4], eax; call esi 
0x50546912  # push 0x00000012; push [0x5055E07C]; mov [0x5055DFF8], eax; call esi 
0x50546921  # push 0x00000013; push [0x5055E07C]; mov [0x5055DFEC], eax; call esi 
0x505315a8  # push 0x00000014; lea edx, [ebp-0x18]; push edx; push eax; call [ecx+0x08] 
0x5054693e  # push 0x00000015; push [0x5055E07C]; mov [0x5055E000], eax; call esi 
0x5054067e  # push 0x00000016; pop eax; pop edi; pop esi; pop ebp; ret 
0x50546952  # push 0x00000016; push [0x5055E07C]; call esi 
0x5054695c  # push 0x00000017; push [0x5055E07C]; mov [0x5055E008], eax; call esi 
0x50541098  # push 0x00000018; pop eax; pop esi; ret 
0x5054696b  # push 0x00000018; push [0x5055E07C]; mov [0x5055E00C], eax; call esi 
0x5054697a  # push 0x00000019; push [0x5055E07C]; mov [0x5055E010], eax; call esi 
0x50535f2d  # push 0x0000001A; pop eax; pop esi; ret 
0x50546989  # push 0x0000001A; push [0x5055E07C]; mov [0x5055E014], eax; call esi 
0x50546998  # push 0x0000001B; push [0x5055E07C]; mov [0x5055E018], eax; call esi 
0x505469a7  # push 0x0000001C; push [0x5055E07C]; mov [0x5055E01C], eax; call esi 
0x505469b6  # push 0x0000001D; push [0x5055E07C]; mov [0x5055E020], eax; call esi 
0x505469c5  # push 0x0000001E; push [0x5055E07C]; mov [0x5055E024], eax; call esi 
0x505469d4  # push 0x0000001F; push [0x5055E07C]; mov [0x5055E028], eax; call esi 
0x50508f29  # push 0x00000020; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50504584  # push 0x00000020; push edi; lea eax, [ebp+0x08]; push eax; call [0x5054A04C] 
0x505469e3  # push 0x00000020; push [0x5055E07C]; mov [0x5055E038], eax; call esi 
0x505469f2  # push 0x00000021; push [0x5055E07C]; mov [0x5055E034], eax; call esi 
0x50546a01  # push 0x00000022; push [0x5055E07C]; mov [0x5055E030], eax; call esi 
0x50546a10  # push 0x00000023; push [0x5055E07C]; mov [0x5055E02C], eax; call esi 
0x50546a1f  # push 0x00000024; push [0x5055E07C]; mov [0x5055E068], eax; call esi 
0x50546a2e  # push 0x00000025; push [0x5055E07C]; mov [0x5055E060], eax; call esi 
0x50546a3d  # push 0x00000026; push [0x5055E07C]; mov [0x5055E05C], eax; call esi 
0x50546a4c  # push 0x00000027; push [0x5055E07C]; mov [0x5055E054], eax; call esi 
0x50546a5b  # push 0x00000028; push [0x5055E07C]; mov [0x5055E058], eax; call esi 
0x50546a6a  # push 0x00000029; push [0x5055E07C]; mov [0x5055E04C], eax; call esi 
0x50546a79  # push 0x0000002A; push [0x5055E07C]; mov [0x5055E050], eax; call esi 
0x50546a88  # push 0x0000002B; push [0x5055E07C]; mov [0x5055E064], eax; call esi 
0x50506e18  # push 0x0000002C; pop esi; cmp eax, edi; je 0x50506E27; push eax; call ebp 
0x50508386  # push 0x0000002C; pop esi; je 0x50508395; push [ebp+0x10]; call ebx 
0x50546a97  # push 0x0000002C; push [0x5055E07C]; mov [0x5055E070], eax; call esi 
0x50546aa6  # push 0x0000002D; push [0x5055E07C]; mov [0x5055E06C], eax; call esi 
0x50516808  # push 0x00000038; pop eax; ret 
0x5050eaa1  # push 0x00000040; add eax, 0x00000AC0; push eax; lea eax, [ebp-0x54]; push eax; call [0x5054A04C] 
0x5050ca86  # push 0x00000040; push eax; lea eax, [edi+0x00000200]; push eax; call ebx 
0x5050caa1  # push 0x00000040; push eax; lea eax, [edi+0x00000240]; push eax; call ebx 
0x5050c6d1  # push 0x00000040; push esi; push eax; call [0x5054A04C] 
0x5050da06  # push 0x00000040; mov [esi], eax; push ebx; lea eax, [esi+0x04]; push eax; call [0x5054A04C] 
0x50510fff  # push 0x00000040; call [0x5054A100] 
0x5050ef28  # push 0x00000040; push [ebp+0x0C]; push [ebp-0x04]; call [0x5054A0D0] 
0x50548e47  # push 0x00000040; push [ebp+0x1C]; lea eax, [ebp+0x24]; push eax; call [0x5054A04C] 
0x5050eeec  # push 0x00000042; mov [ebp+0x0C], eax; call [0x5054A194] 
0x5051221b  # push 0x00000042; call [0x5054A194]; mov ecx, [ebp+0x10]; push eax; mov [ecx], eax; call [0x5054A0DC] 
0x5051221b  # push 0x00000042; call [0x5054A194] 
0x505081e8  # push 0x00000053; push [ebp+0x0C]; call [0x5055C9A4] 
0x50536675  # push 0x00000055; push eax; jecxz 0x505366CE; push eax; mov [0x50556A9C], 0x5053E2CB; ret 
0x50507560  # push 0x00000059; add eax, 0x0000389C; push eax; call [0x5055C9A4] 
0x50508015  # push 0x0000005A; push eax; mov [ebp+0x0C], eax; call [0x5055C9A4] 
0x50511323  # push 0x00000064; call [0x5054A048] 
0x5053e029  # push 0xFFFFFFF4; call [0x5054A1BC] 
0x50541e89  # push 0xFFFFFFF6; call [0x5054A238] 
0x505015ba  # push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x50508e0e  # push 0xFFFFFFFC; push ebx; call [0x5054A284] 
0x50508ded  # push 0xFFFFFFFC; mov [ecx+edi*4], eax; push ebx; mov [eax], ebx; lea esi, [ecx+edi*4]; call [0x5054A25C] 
0x50508d1b  # push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50503d7d  # push 0xFFFFFFFE; push esi; call [0x5054A068]; push esi; call [0x5054A064] 
0x50503d7d  # push 0xFFFFFFFE; push esi; call [0x5054A068] 
0x5052018d  # push 0xFFFFFFFE; pop eax; pop esi; ret 
0x50513e73  # push 0xFFFFFFFF; push edi; call [0x5054A18C] 
0x505010da  # push 0xFFFFFFFF; push 0x50555210; call esi 
0x50531d8d  # push 0xFFFFFFFF; push 0x5055D4D8; push ebx; push [ebp-0x34]; call edi 
0x5050a5e6  # push 0xFFFFFFFF; call [eax-0x01]; jne 0x5050A5F9; call [0x5054A038] 
0x5050a5e6  # push 0xFFFFFFFF; call [eax-0x01] 
0x50507878  # push 0xFFFFFFFF; push [ebp+0x0C]; push esi; push esi; call edi 
0x5052f3f5  # push 0xFFFFFFFF; push [esi+0x08]; sbb edi, edi; lea eax, [esp+0x18]; and edi, eax; call [0x5054A144] 
0x5052f38a  # push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5052f311  # push 0xFFFFFFFF; push [edi+0x10]; call [0x5054A144] 
0x5050ab8e  # push 0xFFFFFFFF; dec [ebx+0x75F33BF0]; or byte [ebx+0x4DE9FFC8], al; add al, byte [eax]; add byte [ebx+0x3B571045], cl; ret 
0x50547417  # push 0xFFFFFFFF; call eax 
0x50531b2c  # imul eax, [eax], 0x00; pop ecx; pop ecx; ret 
0x50531b40  # imul eax, [eax], 0x00; ret 
0x5053194c  # imul eax, [eax], 0x00; call [0x5054A198] 
0x50543643  # imul ecx, [0x59585051+edx*2], 0x5D; pop ecx; pop ebx; retn 0x0004 
0x5050108f  # imul edx, [edx], 0x03; add byte [ebx+0x000C247C], al; je 0x505010A9; push [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x5052dc08  # imul eax, [edi+0x00], 0x00; add ebp, 0x0000018C; leave; ret 
0x5053a108  # imul eax, [edx-0x3C360001], 0x8B; call [ebp-0x75] 
0x50512afa  # imul esi, [ecx-0x3B7D0000], 0x28; call [0x5054A188] 
0x5053d74d  # imul eax, eax, 0x14; push eax; push [0x5055E124]; push edi; push [0x5055D69C]; call [0x5054A080] 
0x505050b5  # imul esp, edi, 0xFF; call [edi-0x77]; inc ebp; or al, 0xE8; retn 0xFFC5 
0x505050b5  # imul esp, edi, 0xFF; call [edi-0x77] 
0x5053d77e  # imul esi, esi, 0x14; add esi, [0x5055E124]; push 0x000041C4; push 0x00000008; push [0x5055D69C]; call [0x5054A07C] 
0x5050a674  # imul edi, edi, 0xFF; or eax, 0xFFFFFFFF; pop esi; pop ebp; retn 0x000C 
0x5051a6d3  # insb; add [eax], eax; add byte [0x5EC03305+esi*2], al; pop ebp; ret 
0x50532540  # insb; and eax, 0x458B5053; or byte [esi+0x5F], bl; leave; ret 
0x5051645f  # insb; push eax; call [ecx+0x04] 
0x50542726  # insb; push ebp; push eax; add dh, byte [ebp-0x26]; call [0x5054A0E4] 
0x50544022  # insb; push ebp; push eax; ret 
0x50518224  # insb; add esp, 0x40; lea ecx, [ebp-0x44]; push ecx; push [edi+0x74]; call [eax+0x08] 
0x505363ae  # insb; mov esi, eax; call [0x5054A0E4] 
0x5050675b  # insb; movsb; push esp; push eax; push [0x5055C9F4]; call esi 
0x50504e14  # insb; enter 0xFFFF, 0x3B; ret 
0x505035e9  # insb; leave; retn 0x000C 
0x50528a2e  # insb; leave; ret 
0x50546583  # insb; fist word [ebp+0x50]; call esi 
0x50546aaf  # insb; loopne 0x50546B07; push eax; call esi 
0x505181b1  # insb; call [eax] 
0x50531e4a  # insd; add byte [eax], al; pop ecx; ret 
0x505038fb  # insd; add byte [eax], al; push 0x5054A304; push [ebp+0x0C]; call [0x5054A05C] 
0x50533fad  # insd; add [eax], eax; add cl, al; clc; add al, byte [ebx]; retn 0x848D 
0x505470bb  # insd; daa; add byte [eax], al; call [0x5055DF88] 
0x50546c54  # insd; daa; add byte [eax], al; call eax 
0x50548206  # insd; mov eax, [0xC583FFFE]; je 0x505481D7; retn 0x0004 
0x50524206  # insd; loope 0x50524209; add cl, cl; ret 
0x50502f13  # insd; out 0xFF, eax; inc [ebp-0x7CFA8A40]; enter 0xEBFF, 0x06; mov eax, [eax+0x00000AB8]; retn 0x0004 
0x50512c06  # insd; test [ecx], 0x64C58300; leave; retn 0x0014 
0x50506fd1  # insd; push [ebp+0x0C]; call ebx 
0x50531b6e  # outsb; add byte [eax], al; mov ecx, [ebp+0x08]; mov [eax], ecx; pop ebp; ret 
0x5051fad3  # outsb; or al, 0x08; add [esi+0x10], 0xFFFFFFF8; cmp [esi+0x10], 0x08; jnl 0x5051FAA7; ret 
0x5052f47c  # outsb; xor bh, bh; jbe 0x5052F485; call [0x5054A13C] 
0x50504fcd  # outsb; ret 
0x505475d9  # outsd; push ebp; push eax; call [0x5054A02C]; xor eax, eax; ret 
0x50546c6e  # outsd; push ebp; push eax; call [0x5054A02C] 
0x50547264  # outsd; push ebp; push eax; call [0x5054A030] 
0x505466f7  # outsd; push ebp; push eax; push [ebp+0x0B]; call [0x5054A184] 
0x50546705  # outsd; push ebp; push eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x50549619  # outsd; test esi, esi; je 0x50549689; push ecx; call [0x5054A03C] 
0x5051aa70  # outsd; ret 
0x50511587  # jo 0x5051158A; mov eax, esi; pop esi; ret 
0x50508d19  # jo 0x50508D1F; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50531d8b  # jo 0x50531D91; push 0xFFFFFFFF; push 0x5055D4D8; push ebx; push [ebp-0x34]; call edi 
0x5052f85d  # jo 0x5052F863; add eax, 0x08; dec edx; jne 0x5052F853; pop esi; ret 
0x5054282d  # jo 0x50542833; call [0x5054A240] 
0x505430e7  # jo 0x505430ED; call [0x5054A190] 
0x50537fad  # jo 0x50537FB6; add byte [eax], al; ret 
0x50549285  # jo 0x50549293; lea eax, [ebp-0x24]; push eax; lea eax, [ebp-0x44]; push eax; call [0x5054A260] 
0x50505236  # jo 0x50505244; call ebx 
0x5053d6c3  # jo 0x5053D6D1; call esi 
0x505078dc  # jo 0x505078EE; push esi; push eax; push esi; call [0x5055CA24] 
0x5053d6cd  # jo 0x5053D6DF; push 0x00000000; push [0x5055D69C]; call [0x5054A084] 
0x50506111  # jo 0x50506123; call [0x5054A03C] 
0x50506ca7  # jo 0x50506CB9; call [0x5054A040] 
0x50506a88  # jo 0x50506A9E; call [0x5054A03C] 
0x50506ce5  # jo 0x50506CFB; call [0x5054A040] 
0x50506ac6  # jo 0x50506AE0; call [0x5054A03C] 
0x50506d23  # jo 0x50506D3D; call [0x5054A040] 
0x5051623d  # jo 0x50516257; call [esi] 
0x50506b04  # jo 0x50506B22; call [0x5054A03C] 
0x50506d61  # jo 0x50506D7F; call [0x5054A040] 
0x50506b42  # jo 0x50506B64; call [0x5054A03C] 
0x50506d9f  # jo 0x50506DC1; call [0x5054A040] 
0x50546686  # jo 0x505466A9; push ebp; push eax; push [0x5055E078]; mov [0x5055DFA4], eax; call esi 
0x5054659c  # jo 0x505465C0; push ebp; push eax; push [0x5055E078]; mov [0x5055DF74], eax; call esi 
0x50506b7e  # jo 0x50506BA4; call [0x5054A03C] 
0x50506ddb  # jo 0x50506E01; call [0x5054A040] 
0x50519721  # jo 0x50519754; add byte [eax], al; pop ecx; pop ebx; leave; ret 
0x50516449  # jo 0x50516486; ret 
0x50508c3d  # jo 0x50508C87; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50538e68  # jo 0x50538EDF; add eax, 0x000CC5E8; add byte [ebx-0x743CFBC0], cl; call [ebp-0x75] 
0x505317cd  # jo 0x50531752; mov eax, 0x0000042C; add eax, 0xC0330474; leave; ret 
0x50517fd5  # jo 0x50517F60; inc ebx; pushad; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x50518098  # jo 0x50518025; xchg [eax-0x7B000000], eax; sal byte [eax+ecx-0x75], 0x4F; js 0x505180F7; call [ecx+0x08] 
0x5050a9b0  # jo 0x5050A95D; push esp; push eax; push ebx; call [0x5054A260] 
0x50506444  # jo 0x5050640F; push ebp; push eax; test eax, eax; jne 0x5050644C; ret 
0x505064a4  # jo 0x5050646F; push ebp; push eax; call [0x5054A18C]; ret 
0x505064a4  # jo 0x5050646F; push ebp; push eax; call [0x5054A18C] 
0x50546595  # jo 0x50546576; push ebp; push eax; call esi 
0x50546aa0  # jo 0x50546A82; push ebp; push eax; call esi 
0x50537bb7  # jo 0x50537B9B; push ebp; push eax; xor eax, eax; pop ebp; ret 
0x50541688  # jo 0x50541672; ret 
0x5054603d  # jo 0x5054603C; xor eax, eax; pop esi; pop ebx; leave; ret 
0x50533117  # jo 0x50533116; pop ebx; leave; ret 
0x5053391f  # jo 0x5053391E; pop esi; pop ebx; leave; ret 
0x50541c75  # jo 0x50541C74; pop edi; pop ebx; leave; ret 
0x50543076  # jo 0x50543075; pop edi; pop esi; pop ebx; leave; ret 
0x5053a519  # jo 0x5053A518; mov eax, [ebp-0x04]; pop esi; pop ebx; leave; ret 
0x505394e2  # jo 0x505394E1; mov eax, esi; pop ebx; leave; ret 
0x50532b6e  # jo 0x50532B6D; leave; ret 
0x5050a0d2  # jo 0x5050A0D3; inc [ebx+0x5E5FFFC8]; retn 0x0008 
0x505333ef  # jno 0x505333F1; add byte [ebx-0x3B7CEBB3], cl; or al, 0x89; add [edi+0x5E], ebx; pop ebp; ret 
0x50526dd1  # jno 0x50526DD3; add byte [ebx+0x0C7E89F8], cl; mov eax, [edi]; push edi; call [eax+0x20] 
0x5050524a  # jno 0x50505258; push eax; call [0x5054A050] 
0x50514b7f  # jno 0x50514B91; push [edi+0x50]; call [eax+0x10] 
0x50514dc6  # jno 0x50514DD8; push [edi+0x64]; call [eax+0x14] 
0x50514f52  # jno 0x50514F64; push [edi+0x74]; call [eax+0x10] 
0x50513099  # jno 0x505130AF; push 0x00000001; push [ecx+0x1C]; push 0x5054ACCC; push eax; call [0x5054A260] 
0x5051309e  # jno 0x505130BC; push 0x5054ACCC; push eax; call [0x5054A260] 
0x50516dca  # jno 0x50516E1C; call [eax+0x0C] 
0x505119bc  # jno 0x50511A0F; add byte [eax], al; pop ecx; mov [edi+0x20], eax; call [0x5054A188] 
0x5051fe4d  # jno 0x5051FDDA; inc ebp; or al, 0x8B; dec ebp; sbb byte [ebx], al; retn 0x4589 
0x50501a3f  # jno 0x50501A40; jne 0x50501A4F; call [0x5054A03C] 
0x50509fd1  # jno 0x50509FD2; inc [ebx+0x5B5FFFC8]; pop esi; pop ebp; retn 0x000C 
0x5053afd0  # jc 0x5053AFD2; add byte [ebx], ah; retn 0xC483 
0x505156bd  # jc 0x505156BF; add byte [ebx+0x5B5F14C4], al; leave; ret 
0x5053242e  # jc 0x5053243C; and eax, 0x03; add ecx, eax; jmp [0x50532448+eax*4] 
0x5053279e  # jc 0x505327AC; and eax, 0x03; add ecx, eax; jmp [0x505327B8+eax*4] 
0x50532932  # jc 0x50532940; and eax, 0x03; sub ecx, eax; jmp [0x50532944+eax*4] 
0x505325c2  # jc 0x505325D0; and eax, 0x03; sub ecx, eax; jmp [0x505325D4+eax*4] 
0x5053259d  # jc 0x505325AC; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x5050483f  # jc 0x50504853; call [0x5054A188] 
0x50532418  # jc 0x50532444; rep movsd; jmp [0x50532534+edx*4] 
0x50532788  # jc 0x505327B4; rep movsd; jmp [0x505328A4+edx*4] 
0x5050a601  # jc 0x5050A680; add al, byte [eax]; leave; retn 0x000C 
0x505324ba  # jc 0x50532444; rep movsd; jmp [0x50532534+edx*4] 
0x5053282a  # jc 0x505327B4; rep movsd; jmp [0x505328A4+edx*4] 
0x50532992  # jc 0x5053291C; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x50532622  # jc 0x505325AC; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50528d01  # jc 0x50528C99; add byte [eax], al; leave; ret 
0x50514921  # jc 0x505148C5; xor eax, eax; pop edi; pop esi; ret 
0x5053249c  # jc 0x50532444; rep movsd; jmp [0x50532534+edx*4] 
0x50532968  # jc 0x5053291C; std; rep movsd; cld; jmp [0x50532A40+edx*4] 
0x505325f8  # jc 0x505325AC; std; rep movsd; cld; jmp [0x505326D0+edx*4] 
0x50532476  # jc 0x50532444; rep movsd; jmp [0x50532534+edx*4] 
0x505327e6  # jc 0x505327B4; rep movsd; jmp [0x505328A4+edx*4] 
0x50547a4d  # jc 0x50547A1E; pop edi; pop esi; retn 0x000C 
0x50511332  # jc 0x50511314; xor eax, eax; pop esi; retn 0x0004 
0x505479ff  # jc 0x505479E9; xor eax, eax; retn 0x0004 
0x5053edc2  # jc 0x5053EDAC; pop edi; pop esi; ret 
0x5053d41b  # jc 0x5053D408; xor eax, eax; pop ebp; ret 
0x5054191d  # jc 0x5054190B; xor eax, eax; pop edi; pop ebx; leave; ret 
0x50537b35  # jc 0x50537B23; pop esi; pop ebp; ret 
0x505367dc  # jc 0x505367CC; mov eax, ecx; add esp, 0x20; pop esi; leave; ret 
0x50537b11  # jc 0x50537B03; pop esi; pop ebp; ret 
0x5053848b  # jc 0x5053847E; pop edi; pop esi; ret 
0x50533246  # jc 0x5053323A; pop esi; pop ebp; retn 0x0008 
0x50540e1c  # jc 0x50540E12; pop ebp; ret 
0x5050194c  # jnc 0x5050194E; add byte [ebp+0x334274C0], al; sar byte [ebx], 0xF8; je 0x5050199A; push edi; call [0x5054A280] 
0x5053fcdd  # jnc 0x5053FCE4; cmp [eax+0x04], edx; je 0x5053FCE6; xor eax, eax; pop ebp; ret 
0x50526e1e  # jnc 0x50526E25; or eax, 0xFFFFFFFF; pop esi; ret 
0x50536998  # jnc 0x505369A0; shld edx, eax, cl; shl eax, cl; ret 
0x50542f28  # jnc 0x50542F30; shrd eax, edx, cl; shr edx, cl; ret 
0x5053847c  # jnc 0x5053848D; mov eax, [edi]; test eax, eax; je 0x50538486; call eax 
0x50533dd9  # jnc 0x50533DF0; push edi; push ebx; call [ebp+0x14] 
0x50536993  # jnc 0x505369AA; cmp cl, 0x20; jnc 0x505369A0; shld edx, eax, cl; shl eax, cl; ret 
0x50542f23  # jnc 0x50542F3A; cmp cl, 0x20; jnc 0x50542F30; shrd eax, edx, cl; shr edx, cl; ret 
0x50537827  # jnc 0x5053787C; push eax; mov [0x5055D54C], esi; mov [0x5055D550], eax; call [0x5054A184] 
0x50517fd4  # jnc 0x50518046; mov [ebx+0x60], eax; mov eax, [edi+0x0000008C]; call [eax+0x24] 
0x50518002  # jnc 0x50518074; mov eax, [edi+0x0000008C]; call [eax+0x04] 
0x50517fc8  # jnc 0x5051803A; mov eax, [edi+0x0000008C]; call [eax+0x08] 
0x50517f60  # jnc 0x50517FD6; push esi; push [edi+0x0C]; call [eax+0x08] 
0x50549615  # jnc 0x5054959C; sal byte [edi+ebp*2-0x7B], 0xF6; je 0x50549689; push ecx; call [0x5054A03C] 
0x50535cec  # jnc 0x50535CDC; mov eax, ecx; add esp, 0x20; pop esi; leave; ret 
0x50541965  # jnc 0x50541958; lea eax, [esi-0x01]; add esp, 0x20; pop esi; leave; ret 
0x5052f5b6  # jnc 0x5052F5AA; push edx; push eax; push edi; push edi; call [0x5054A06C] 
0x50506bed  # je 0x50506BEF; mov eax, [edi+0x14]; test eax, eax; je 0x50506BFE; push eax; call ebx 
0x5052428c  # je 0x5052428F; inc eax; add ecx, 0x04; dec edx; jne 0x50524289; ret 
0x5053fce2  # je 0x5053FCE6; xor eax, eax; pop ebp; ret 
0x50548818  # je 0x5054881C; mov [esi], eax; xor eax, eax; inc eax; pop esi; retn 0x000C 
0x505473f0  # je 0x505473F4; mov [esi], ebx; push 0x00002714; call [0x5055DF88] 
0x50537b07  # je 0x50537B0B; call eax 
0x50537b2b  # je 0x50537B2F; call ecx 
0x50539114  # je 0x50539119; xor eax, eax; ret 
0x50510fe3  # je 0x50510FE8; inc ebx; jne 0x50510FD1; push ebx; call [0x5054A03C] 
0x5054404c  # je 0x50544051; push eax; call esi; pop esi; ret 
0x505399eb  # je 0x505399F0; push eax; call esi 
0x50538b6f  # je 0x50538B74; pop ebp; jmp eax 
0x5053826f  # je 0x50538274; and [eax], 0x00000000; inc [ecx]; leave; ret 
0x50516adb  # je 0x50516AE0; and [ecx], 0x00000000; mov eax, [esp+0x04]; test eax, eax; jne 0x50516AE9; ret 
0x5052da4a  # je 0x5052DA4F; mov [ecx+0x0C], edx; ret 
0x50531753  # je 0x50531758; mov [ecx+0x18], edx; ret 
0x50511584  # je 0x50511589; lea esi, [eax+0x01]; mov eax, esi; pop esi; ret 
0x5053ad7e  # je 0x5053AD84; add byte [eax], al; push [ebp-0x1C]; call [0x5054A1C0] 
0x50525b0e  # je 0x50525B14; or [eax], edx; pop esi; ret 
0x50541110  # je 0x50541116; xor eax, eax; pop ebp; ret 
0x505317d5  # je 0x505317DB; xor eax, eax; leave; ret 
0x50515c2a  # je 0x50515C30; or [esi+0x48], 0x40; pop edi; pop ebp; ret 
0x50516785  # je 0x5051678B; or eax, 0xFFFFFFFF; ret 
0x5051f2dd  # je 0x5051F2E3; mov eax, [eax+0x08]; ret 
0x505167d5  # je 0x505167DB; mov eax, [eax+0x1C]; ret 
0x50516822  # je 0x50516828; mov eax, [eax+0x24]; ret 
0x50546b2f  # je 0x50546B35; call eax 
0x50515188  # je 0x5051518F; add eax, edi; mov [esi+0x14], eax; pop edi; pop ebx; ret 
0x50545b7d  # je 0x50545B84; or eax, 0x00001000; ret 
0x5053e0c5  # je 0x5053E0CC; xor eax, eax; inc eax; pop ebp; ret 
0x50533390  # je 0x50533397; cmp byte [eax+0x01], dl; jne 0x5053339B; xor eax, eax; inc eax; ret 
0x5053ee4d  # je 0x5053EE54; push 0x00000000; call eax; ret 
0x5053ee4d  # je 0x5053EE54; push 0x00000000; call eax 
0x50546cb1  # je 0x50546CB8; push 0x00000001; push esi; call eax 
0x50541ca9  # je 0x50541CB0; cmp eax, 0x01; jne 0x50541C87; xor eax, eax; pop ebp; ret 
0x5051752e  # je 0x50517535; mov eax, 0x5054D2F0; mov [edi+0x4C], eax; call [eax] 
0x50516475  # je 0x5051647C; call [eax+0x08] 
0x50516492  # je 0x50516499; call [eax+0x14] 
0x50537ac6  # je 0x50537ACD; push [ebp+0x08]; call eax; pop ebp; ret 
0x50537ac6  # je 0x50537ACD; push [ebp+0x08]; call eax 
0x5050840f  # je 0x50508417; add [ebx+0x7400147D], eax; push ss; push [ebp+0x14]; push esi; call [0x5054A050] 
0x505083a1  # je 0x505083A9; add [ebx+0x7400187D], eax; or edi, edi; jne 0x505083C5; call ebx 
0x5050842b  # je 0x50508433; add [ebx+0x7400187D], eax; push ss; push [ebp+0x18]; push esi; call [0x5054A050] 
0x505083b0  # je 0x505083B8; add [ebx+0x74001C7D], eax; or edi, edi; jne 0x505083D8; call ebx 
0x50508447  # je 0x5050844F; add [ebx+0x74001C7D], eax; adc bh, bh; jne 0x5050846F; push esi; call [0x5054A050] 
0x50506e32  # je 0x50506E3A; add [ebx-0x38C4E7BD], ecx; je 0x50506E43; push eax; call ebp 
0x50506e40  # je 0x50506E48; add [ebx-0x38C4E3BD], ecx; je 0x50506E51; push eax; call ebp 
0x50506e4e  # je 0x50506E56; add [ebx-0x38C4DFBD], ecx; je 0x50506E5F; push eax; call ebp 
0x50506e5c  # je 0x50506E64; add [ebx-0x38C4DBBD], ecx; je 0x50506E6D; push eax; call ebp 
0x50506a53  # je 0x50506A5B; add [ebx-0x3F7AEBB9], ecx; je 0x50506A94; push eax; call ebx 
0x5050699e  # je 0x505069A6; add [ebx-0x3F7AE7B9], ecx; je 0x505069AF; push eax; call ebx 
0x50506a91  # je 0x50506A99; add [ebx-0x3F7AE7B9], ecx; je 0x50506AD2; push eax; call ebx 
0x505069ac  # je 0x505069B4; add [ebx-0x3F7AE3B9], ecx; je 0x505069BD; push eax; call ebx 
0x50506acf  # je 0x50506AD7; add [ebx-0x3F7AE3B9], ecx; je 0x50506B10; push eax; call ebx 
0x505069ba  # je 0x505069C2; add [ebx-0x3F7ADFB9], ecx; je 0x505069CB; push eax; call ebx 
0x505069c8  # je 0x505069D0; add [ebx-0x3F7ADBB9], ecx; je 0x505069D9; push eax; call ebx 
0x50506b4b  # je 0x50506B53; add [ebx-0x3F7ADBB9], ecx; je 0x50506B86; push eax; call ebx 
0x50531ade  # je 0x50531AE6; push edi; push 0x00000000; push ebx; call eax 
0x50516bab  # je 0x50516BB3; mov [ecx+0x000000DC], eax; push eax; call [0x5054A028]; ret 
0x50516bab  # je 0x50516BB3; mov [ecx+0x000000DC], eax; push eax; call [0x5054A028] 
0x50502ae8  # je 0x50502AF0; mov eax, [eax+0x000000A0]; retn 0x0004 
0x50502afe  # je 0x50502B06; mov eax, [eax+0x000000AC]; retn 0x0004 
0x50546ac1  # je 0x50546AC9; lea ecx, [ebp-0x08]; push ecx; call eax; push 0x5055E084; call [0x5054A15C] 
0x50546ac1  # je 0x50546AC9; lea ecx, [ebp-0x08]; push ecx; call eax 
0x505077a1  # je 0x505077AA; push eax; call [0x5055C988] 
0x50507786  # je 0x5050778F; push eax; call [0x5055C99C] 
0x50506998  # je 0x505069A1; push eax; call ebx 
0x50506e2c  # je 0x50506E35; push eax; call ebp 
0x505085f9  # je 0x50508602; push eax; call edi 
0x505107bc  # je 0x505107C5; push ebx; call edi 
0x50547cb3  # je 0x50547CBC; push edi; call esi; test eax, eax; jne 0x50547CD7; call [0x5054A274] 
0x50509b17  # je 0x50509B20; push edi; call esi 
0x5053e333  # je 0x5053E33C; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50533110  # je 0x50533119; mov ecx, [ebp-0x10]; and [ecx+0x70], 0xFFFFFFFD; pop ebx; leave; ret 
0x50532b67  # je 0x50532B70; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x50516831  # je 0x5051683A; mov eax, [eax+0x00000090]; ret 
0x505167a1  # je 0x505167AA; mov eax, [eax+0x000001AC]; ret 
0x505169e7  # je 0x505169F0; mov eax, [eax+0x000000D4]; ret 
0x50516859  # je 0x50516862; mov eax, [eax+0x000000E0]; ret 
0x505168b3  # je 0x505168BC; mov eax, [eax+0x000000E4]; ret 
0x5051e1e5  # je 0x5051E1EF; sbb eax, eax; and eax, 0xFFFFFFFE; inc eax; pop ebp; ret 
0x50522907  # je 0x50522911; cmp eax, edx; je 0x50522911; mov eax, esi; pop esi; ret 
0x5050119a  # je 0x505011A4; push eax; call [0x5054A030]; ret 
0x5050119a  # je 0x505011A4; push eax; call [0x5054A030] 
0x50506989  # je 0x50506993; push eax; call ebx 
0x50506e1d  # je 0x50506E27; push eax; call ebp 
0x5051ab97  # je 0x5051ABA1; push ebx; push esi; call [eax] 
0x50501171  # je 0x5050117B; push esi; push eax; call [0x5054A02C] 
0x50531a8b  # je 0x50531A95; push edi; push esi; push ebx; call eax 
0x5051bf70  # je 0x5051BF7A; push edi; push esi; call [eax] 
0x50544035  # je 0x5054403F; cmp eax, 0xFFFFFFFE; je 0x5054403F; push eax; call esi 
0x5053bae6  # je 0x5053BAF0; test bl, bl; je 0x5053BD40; call [0x5054A214] 
0x5051641f  # je 0x50516429; mov ecx, [edi+0x4C]; push eax; call [ecx+0x04] 
0x5051642e  # je 0x50516438; mov ecx, [edi+0x58]; push eax; call [ecx+0x04] 
0x5051643d  # je 0x50516447; mov ecx, [edi+0x5C]; push eax; call [ecx+0x04] 
0x5051644c  # je 0x50516456; mov ecx, [edi+0x68]; push eax; call [ecx+0x04] 
0x5051645b  # je 0x50516465; mov ecx, [edi+0x6C]; push eax; call [ecx+0x04] 
0x505180a1  # je 0x505180AB; mov ecx, [edi+0x78]; push eax; call [ecx+0x08] 
0x505181bf  # je 0x505181C9; mov ecx, [edi+0x7C]; push eax; call [ecx+0x14] 
0x50502e76  # je 0x50502E80; mov eax, [eax+0x00000110]; mov [ecx], eax; xor eax, eax; retn 0x000C 
0x50516af9  # je 0x50516B03; mov edx, [eax+0x00000120]; mov [ecx], edx; mov eax, [eax+0x00000118]; ret 
0x50516915  # je 0x5051691F; mov edx, [eax+0x000000E8]; mov [ecx], edx; mov eax, [eax+0x000000EC]; ret 
0x5052dafd  # je 0x5052DB07; mov [eax+0x30], 0x00000001; ret 
0x50537371  # je 0x5053737B; push [ebp+0x08]; call eax 
0x50542a63  # je 0x50542A6D; push [ebp-0x04]; call eax 
0x5051d773  # je 0x5051D77E; cmp [eax+0x30], ecx; jne 0x5051D77E; xor eax, eax; inc eax; ret 
0x505068ae  # je 0x505068B9; push eax; call edi 
0x505097fc  # je 0x50509807; push ecx; push ebx; push eax; call [0x5054A04C] 
0x50503307  # je 0x50503312; push ebx; push ecx; push eax; call [0x5054A04C] 
0x50502c98  # je 0x50502CA3; push ebx; call [0x5054A048] 
0x50502bbc  # je 0x50502BC7; push esi; call [0x5054A048] 
0x5050995c  # je 0x50509967; push edi; push ebx; push eax; call [0x5054A04C] 
0x50537780  # je 0x5053778B; push 0x00000000; push eax; call [0x5054A02C]; pop ebp; ret 
0x50546743  # je 0x5054674E; push 0x00000000; push eax; call [0x5054A02C]; jmp [0x5055DF84] 
0x50537780  # je 0x5053778B; push 0x00000000; push eax; call [0x5054A02C] 
0x50508f07  # je 0x50508F12; push 0x00000008; push ebx; push [esi+0x20]; push eax; call edi 
0x5054755b  # je 0x50547566; test eax, eax; jne 0x50547551; xor eax, eax; retn 0x0008 
0x50539a28  # je 0x50539A33; mov eax, [ebx]; test eax, eax; je 0x50539A33; push eax; call esi 
0x50515d2f  # je 0x50515D3A; mov ecx, [eax]; push edi; push eax; call [ecx+0x1C] 
0x5052f747  # je 0x5052F752; mov [esi+0x10], 0x00000001; pop esi; ret 
0x50509b29  # je 0x50509B34; push [ebp+0x10]; call esi 
0x50508399  # je 0x505083A4; push [ebp+0x14]; call ebx 
0x505083a8  # je 0x505083B3; push [ebp+0x18]; call ebx 
0x505083b7  # je 0x505083C2; push [ebp+0x1C]; call ebx 
0x505078ee  # je 0x505078F9; push [ebp-0x08]; call [0x5055CA20] 
0x50506161  # je 0x5050616C; push [ebp-0x04]; call [0x5054A070] 
0x5050ed67  # je 0x5050ED72; push [ebp-0x04]; call [0x5054A0E0] 
0x50545c0f  # je 0x50545C1B; cmp edx, ecx; jne 0x50545C24; or eax, 0x00008000; ret 
0x505015b7  # je 0x505015C3; push eax; push 0xFFFFFFFC; push ecx; call [0x5054A284] 
0x50507765  # je 0x50507771; push esi; push eax; call [0x5055CA08] 
0x5050529c  # je 0x505052A8; push esi; call ebx 
0x50539a37  # je 0x50539A43; mov eax, [ebx+0x04]; test eax, eax; je 0x50539A43; push eax; call esi 
0x5052da1e  # je 0x5052DA2A; mov eax, [esi+0x08]; mov ecx, [eax]; push eax; call [ecx+0x10] 
0x5052dc22  # je 0x5052DC2E; mov ecx, [ecx+0x08]; mov eax, [ecx]; push ecx; call [eax+0x20] 
0x50516b47  # je 0x50516B53; mov ecx, [esp+0x08]; add [eax+0x00000124], ecx; ret 
0x50516abd  # je 0x50516AC9; mov ecx, [esp+0x08]; mov [eax+0x00000114], ecx; ret 
0x50516b6d  # je 0x50516B79; mov ecx, [esp+0x08]; mov [eax+0x00000128], ecx; ret 
0x505169fa  # je 0x50516A06; mov ecx, [esp+0x08]; mov [eax+0x000000D8], ecx; ret 
0x50537fcd  # je 0x50537FD9; lea eax, [edi+0x0C]; push eax; call [0x5054A154] 
0x50509980  # je 0x5050998C; mov [esi+0x00000098], 0x00000001; pop edi; pop ebx; pop esi; retn 0x0008 
0x5052f3a5  # je 0x5052F3B1; push [esp+0x18]; call [0x5054A060]; xor eax, eax; add esp, 0x14; retn 0x0004 
0x5052f3a5  # je 0x5052F3B1; push [esp+0x18]; call [0x5054A060] 
0x50537b55  # je 0x50537B61; push [ebp+0x08]; call [0x50550E88] 
0x50508389  # je 0x50508395; push [ebp+0x10]; call ebx 
0x505064cd  # je 0x505064DA; push eax; call [0x5054A078]; and [esi+0x34], 0x00000000; pop esi; retn 0x0004 
0x505064cd  # je 0x505064DA; push eax; call [0x5054A078] 
0x5051e340  # je 0x5051E34D; push ebx; push esi; call [0x5054A09C] 
0x5050d97b  # je 0x5050D988; push ebx; call [0x5054A03C] 
0x5053b560  # je 0x5053B56D; push ebx; push [ebp-0x00000114]; call edi 
0x5051e23b  # je 0x5051E248; push edi; push esi; call [0x5054A09C] 
0x5050159e  # je 0x505015AB; push 0x5055C960; call [0x5054A0D4] 
0x50547d74  # je 0x50547D81; push 0x000000FF; call [0x5054A1B4] 
0x50508f38  # je 0x50508F45; push 0x00000001; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f49  # je 0x50508F56; push 0x00000002; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f5a  # je 0x50508F67; push 0x00000004; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f16  # je 0x50508F23; push 0x00000010; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50508f27  # je 0x50508F34; push 0x00000020; push ebx; push [esi+0x20]; push [esi+0x18]; call edi 
0x50515d5e  # je 0x50515D6B; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x50509512  # je 0x5050951F; push [ebp+0x10]; push esi; push ebx; call [0x5054A04C] 
0x505391b2  # je 0x505391C0; dec eax; je 0x505391BA; xor eax, eax; ret 
0x5051e3a0  # je 0x5051E3AE; dec eax; je 0x5051E3A9; or eax, 0xFFFFFFFF; ret 
0x50510799  # je 0x505107A7; push esi; call edi 
0x50537bad  # je 0x50537BBB; push 0x00000000; push 0x00000002; push 0x00000000; call [0x5055E270] 
0x5050ca84  # je 0x5050CA92; push 0x00000040; push eax; lea eax, [edi+0x00000200]; push eax; call ebx 
0x5050ca9f  # je 0x5050CAAD; push 0x00000040; push eax; lea eax, [edi+0x00000240]; push eax; call ebx 
0x505052ac  # je 0x505052BA; push [ebp-0x20]; call ebx 
0x5050edaa  # je 0x5050EDB8; push [ebp-0x04]; call [0x5054A0DC] 
0x5051701f  # je 0x5051702D; push [ebx+0x00000080]; call [eax+0x1C] 
0x50538be7  # je 0x50538BF6; push edi; call ebx 
0x5054711d  # je 0x5054712C; push 0x00002734; call [0x5055DF88] 
0x50506510  # je 0x5050651F; push [esp+0x04]; push 0x00000000; push eax; call [0x5054A084]; retn 0x0004 
0x50506510  # je 0x5050651F; push [esp+0x04]; push 0x00000000; push eax; call [0x5054A084] 
0x5050655c  # je 0x5050656B; push [esp+0x08]; push 0x00000000; push eax; call [0x5054A084]; retn 0x0008 
0x5050655c  # je 0x5050656B; push [esp+0x08]; push 0x00000000; push eax; call [0x5054A084] 
0x5050908d  # je 0x5050909C; push [esi+edi*4+0x68]; push ebx; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5050a227  # je 0x5050A236; push [ebp+0x10]; push esi; push [ebp+0x0C]; call [0x5054A04C] 
0x5050386f  # je 0x5050387E; push [ebp+0x10]; call [0x5054A03C] 
0x50505bc4  # je 0x50505BD3; push [ebp+0x1C]; call [0x5054A03C] 
0x505107ab  # je 0x505107BA; push [ebp-0x54]; call edi 
0x50537461  # je 0x50537471; push eax; call [0x5054A158] 
0x50506f39  # je 0x50506F49; push ebx; push edi; call [0x5054A050] 
0x50506fb7  # je 0x50506FC7; push esi; push eax; call [0x5055CA08] 
0x5050f8e9  # je 0x5050F8F9; push esi; call [0x5054A060] 
0x50546361  # je 0x50546371; push edi; call [0x5054A03C] 
0x505108cf  # je 0x505108DF; push 0x5054ACA4; lea eax, [ebp+0x000002F4]; push eax; call edi 
0x50510827  # je 0x50510837; push 0x5054ACA4; lea eax, [ebp+0x000004F4]; push eax; call edi 
0x50510108  # je 0x50510118; push 0x5054ACA4; lea eax, [ebp-0x00000204]; push eax; call edi 
0x50548c52  # je 0x50548C62; push [ebp-0x64]; call [0x5054A008] 
0x50516bfe  # je 0x50516C0E; push [eax+0x00000138]; push [esp+0x10]; push edx; push eax; call ecx 
0x50503317  # je 0x50503328; push ebx; push eax; lea eax, [esi+0x000008A0]; push eax; call [0x5054A04C] 
0x5051041a  # je 0x5051042B; push ebx; push ebx; push [esi+0x00000AA8]; push eax; call [0x5054A0EC] 
0x5050e865  # je 0x5050E876; push ebx; push edi; call [0x5054A050] 
0x5050ff9d  # je 0x5050FFAE; push ebx; call esi 
0x5050939f  # je 0x505093B0; push esi; call [0x5054A03C] 
0x5050547a  # je 0x5050548B; push 0x00000200; push eax; lea eax, [esi+0x00000314]; push eax; call ebx 
0x5050cf7e  # je 0x5050CF8F; push 0x00000200; push [ebp+0x0C]; push ebx; call [0x5054A04C] 
0x5052dcec  # je 0x5052DCFD; mov ecx, [esp+0x08]; push 0x00000001; push eax; mov [eax+0x60], ecx; call [eax+0x48] 
0x5052dd18  # je 0x5052DD29; mov ecx, [esp+0x08]; push 0x00000003; push eax; mov [eax+0x64], ecx; call [eax+0x48] 
0x50538842  # je 0x50538853; mov edx, [ebp+0x08]; push 0x00000001; push edx; call [0x5055E13C] 
0x5051e383  # je 0x5051E394; push [esi]; call [0x5054A060] 
0x50501098  # je 0x505010A9; push [esp+0x0C]; push 0x5055C93C; call [0x5054A18C] 
0x5053e0bb  # je 0x5053E0CC; push [ebp+0x08]; call eax 
0x50546cc0  # je 0x50546CD2; push esi; call [0x5055DF10]; push eax; call [0x5055DFE4] 
0x50546cc0  # je 0x50546CD2; push esi; call [0x5055DF10] 
0x5050c526  # je 0x5050C538; push 0x5054AC14; push esi; call ebx 
0x50546c65  # je 0x50546C77; or eax, 0x02; push eax; push [0x50556FF8]; call [0x5054A02C] 
0x50505244  # je 0x50505256; mov ecx, [ebp-0x38]; push [ecx+0x0C]; push eax; call [0x5054A050] 
0x50542a7b  # je 0x50542A8D; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; push [ebp-0x04]; call eax 
0x505414ab  # je 0x505414BE; push [ebp+0x14]; push eax; push ebx; push [ebp+0x08]; call [0x5054A230] 
0x50507323  # je 0x50507336; push [ebp-0x7C]; lea eax, [ebp-0x78]; push eax; call [0x5054A0B0] 
0x50506ebc  # je 0x50506ED0; push eax; push edi; call [0x5054A050] 
0x50509928  # je 0x5050993C; push ebx; call [0x5054A03C] 
0x505064c6  # je 0x505064DA; mov eax, [esi+0x34]; test eax, eax; je 0x505064DA; push eax; call [0x5054A078] 
0x5052f806  # je 0x5052F81A; neg eax; push eax; push esi; call [esi+0x44] 
0x5050172e  # je 0x50501742; call [0x5054A044] 
0x5050844e  # je 0x50508462; push [ebp+0x1C]; push esi; call [0x5054A050] 
0x50528263  # je 0x50528278; xor eax, eax; pop edi; pop esi; leave; ret 
0x5053a8b6  # je 0x5053A8CB; cmp eax, edi; je 0x5053A874; call [0x5054A0E4] 
0x50507334  # je 0x50507349; push esi; push [edi+0x000037F4]; call [0x5055CA10] 
0x5050ffb0  # je 0x5050FFC5; push edi; call esi 
0x5050e814  # je 0x5050E829; push 0x00000200; push eax; add edi, 0x00000314; push edi; call [0x5054A04C] 
0x50538be1  # je 0x50538BF6; cmp [esi+0x04], 0x01; je 0x50538BF6; push edi; call ebx 
0x5051646d  # je 0x50516482; mov eax, [edi+0x78]; push ecx; cmp eax, ebx; je 0x5051647C; call [eax+0x08] 
0x5051648a  # je 0x5051649F; mov eax, [edi+0x7C]; push ecx; cmp eax, ebx; je 0x50516499; call [eax+0x14] 
0x50501ea0  # je 0x50501EB5; call [0x5054A188] 
0x50537744  # je 0x50537759; push [0x50555FB0]; push [0x50555FB4]; call esi; call eax 
0x50537744  # je 0x50537759; push [0x50555FB0]; push [0x50555FB4]; call esi 
0x505474f9  # je 0x5054750E; push [esp+0x04]; push [esp+0x08]; call eax; push eax; call [0x5055E024] 
0x505474f9  # je 0x5054750E; push [esp+0x04]; push [esp+0x08]; call eax 
0x50506498  # je 0x505064AE; push eax; call [0x5054A078]; push 0x00000000; push 0x5055C970; call [0x5054A18C] 
0x50506498  # je 0x505064AE; push eax; call [0x5054A078] 
0x50515c73  # je 0x50515C89; push esi; push 0x00000000; push 0x00000000; push edi; call [edi+0x00000244] 
0x505010fc  # je 0x50501112; push edi; call [0x5054A158] 
0x505429c6  # je 0x505429DC; push 0x50552034; push edi; call esi 
0x505167c5  # je 0x505167DB; mov eax, [eax+0x14]; ret 
0x505017e6  # je 0x505017FC; mov eax, [esi+0x18]; cmp eax, [esp+0x10]; jne 0x505017FC; call [0x5054A044] 
0x5050efa5  # je 0x5050EFBB; lea eax, [ebp-0x44]; push eax; call [0x5054A268] 
0x5050acfb  # je 0x5050AD11; lea eax, [ebp-0x38]; push eax; call [0x5054A268] 
0x50501f51  # je 0x50501F67; lea eax, [ebp-0x24]; push eax; call [0x5054A268] 
0x50548788  # je 0x5054879E; call [0x5054A008] 
0x50505389  # je 0x505053A0; push eax; call [0x5054A03C] 
0x5053ee3d  # je 0x5053EE54; push 0x50551648; push eax; call [0x5054A088] 
0x50537ab6  # je 0x50537ACD; push 0x50550EFC; push eax; call [0x5054A088] 
0x5052f388  # je 0x5052F39F; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x50541263  # je 0x5054127B; and [ebp-0x04], 0x00000000; call eax 
0x505083fa  # je 0x50508412; push [ebp+0x10]; push esi; call [0x5054A050] 
0x50508416  # je 0x5050842E; push [ebp+0x14]; push esi; call [0x5054A050] 
0x50508432  # je 0x5050844A; push [ebp+0x18]; push esi; call [0x5054A050] 
0x5053732f  # je 0x50537348; push eax; push [0x50555FB4]; call esi; call eax 
0x5053732f  # je 0x50537348; push eax; push [0x50555FB4]; call esi 
0x505243a3  # je 0x505243BC; push eax; push [ebp+0x08]; call [edi+0x04] 
0x50548417  # je 0x50548430; push 0x80000001; call esi 
0x50546fb0  # je 0x50546FC9; push [ebp+0x0C]; push [ebp+0x08]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50507152  # je 0x5050716C; push 0x00001000; push [ebp-0x08]; lea eax, [ebp-0x18]; push eax; call [0x5055CA38] 
0x50537361  # je 0x5053737B; push 0x50550E94; push eax; call [0x5054A088] 
0x505373dc  # je 0x505373F6; push 0x50550EC0; push eax; call [0x5054A088] 
0x50518de0  # je 0x50518DFA; push 0x00000000; push [esp+0x14]; push [esp+0x14]; push esi; call eax 
0x50514db7  # je 0x50514DD1; push [edi+0x00000234]; mov ecx, [edi+0x0000023C]; push [ecx+0x10]; push [edi+0x64]; call [eax+0x14] 
0x50514b70  # je 0x50514B8A; push [edi+0x000001FC]; mov ecx, [edi+0x00000218]; push [ecx+0x10]; push [edi+0x50]; call [eax+0x10] 
0x505110bc  # je 0x505110D7; push ebx; call [0x5054A03C] 
0x50548a4a  # je 0x50548A65; push 0x80000001; call [0x5054A004] 
0x50503d7b  # je 0x50503D96; push 0xFFFFFFFE; push esi; call [0x5054A068]; push esi; call [0x5054A064] 
0x50503d7b  # je 0x50503D96; push 0xFFFFFFFE; push esi; call [0x5054A068] 
0x5053941f  # je 0x5053943B; push esi; call [0x5054A0D4] 
0x5053768b  # je 0x505376A7; push edi; call [0x5054A0D4] 
0x50542138  # je 0x50542155; push ebx; call [0x5054A024] 
0x5050c3a0  # je 0x5050C3BD; push esi; call [0x5054A03C] 
0x50503970  # je 0x5050398D; push [ebp+0x10]; call [0x5054A03C] 
0x505012b4  # je 0x505012D2; push edi; call [0x5054A03C] 
0x5050c51a  # je 0x5050C538; push 0x5054AC1C; push esi; call ebx 
0x5050b9e1  # je 0x5050B9FF; push 0x5054ABA0; lea eax, [edi+0x01]; push eax; call [0x5054A0B8] 
0x50503783  # je 0x505037A1; lea esi, [eax+edi*4]; call [0x5054A044] 
0x50505a46  # je 0x50505A64; push [ebp+0x08]; call edi 
0x50505e8a  # je 0x50505EA8; push [ebp+0x0C]; call esi 
0x50503afb  # je 0x50503B19; push [ebp+0x0C]; call edi 
0x5050851f  # je 0x5050853D; push [ebp+0x10]; call esi 
0x5052f489  # je 0x5052F4A8; push 0xFFFFFFFF; push [esi+0x08]; call [0x5054A144] 
0x5053a8b1  # je 0x5053A8D0; cmp eax, 0x03; je 0x5053A8CB; cmp eax, edi; je 0x5053A874; call [0x5054A0E4] 
0x505496ae  # je 0x505496CE; push ebx; call [0x5054A03C] 
0x505493d0  # je 0x505493F0; push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x5052669b  # je 0x505266BB; mov eax, [esi]; push esi; call [eax+0x18] 
0x50503ad6  # je 0x50503AF6; push [ebp+0x10]; call edi 
0x50505e65  # je 0x50505E85; push [ebp+0x14]; call esi 
0x50505e40  # je 0x50505E60; push [ebp+0x18]; call esi 
0x5050d6bf  # je 0x5050D6E0; push eax; call [0x5054A03C] 
0x5050ca56  # je 0x5050CA77; push 0x00000200; push [eax]; push edi; call ebx 
0x5050322a  # je 0x5050324C; push 0x00003A98; call [0x5054A048]; push [0x5055C960]; push esi; call [0x5054A18C] 
0x5050322a  # je 0x5050324C; push 0x00003A98; call [0x5054A048] 
0x50504c19  # je 0x50504C3B; push [ebp+0x0C]; call [0x5054A040] 
0x505071b0  # je 0x505071D2; push [ebp+0x0C]; call ebx 
0x505052be  # je 0x505052E0; push [ebp-0x28]; call [0x5054A280] 
0x50506819  # je 0x5050683B; call eax 
0x50501f8e  # je 0x50501FB1; call [0x5054A188] 
0x5050cba6  # je 0x5050CBCA; push eax; call [0x5054A03C] 
0x505463fe  # je 0x50546423; push ebp; push eax; push [0x5055E078]; mov [0x5055DF18], eax; call esi 
0x5052d3d0  # je 0x5052D3F6; add al, 0x50; call [eax+0x000003C0]; pop ecx; pop ecx; ret 
0x5052d3d0  # je 0x5052D3F6; add al, 0x50; call [eax+0x000003C0] 
0x5052d3de  # je 0x5052D404; add al, 0x50; call [eax+0x000003C4]; pop ecx; pop ecx; ret 
0x5052d3de  # je 0x5052D404; add al, 0x50; call [eax+0x000003C4] 
0x50547c82  # je 0x50547CA8; add al, 0x68; or cl, ah; push ebp; push eax; call [0x5054A18C] 
0x50506513  # je 0x50506539; add al, 0x6A; add byte [eax-0x01], dl; adc eax, 0x5054A084; retn 0x0004 
0x505064f3  # je 0x50506519; add al, 0x6A; or byte [eax-0x01], dl; adc eax, 0x5054A07C; retn 0x0004 
0x50513e83  # je 0x50513EA9; add al, 0xE8; enter 0x0029, 0x00; pop ecx; retn 0x0004 
0x50526654  # je 0x5052667A; or byte [eax-0x18], dl; enter 0xFF40, 0xFF; pop ecx; pop ecx; ret 
0x5050655f  # je 0x50506585; or byte [edx+0x00], ch; push eax; call [0x5054A084]; retn 0x0008 
0x5050655f  # je 0x50506585; or byte [edx+0x00], ch; push eax; call [0x5054A084] 
0x5050653b  # je 0x50506561; or byte [edx+0x08], ch; push eax; call [0x5054A07C]; retn 0x0008 
0x5050653b  # je 0x50506561; or byte [edx+0x08], ch; push eax; call [0x5054A07C] 
0x5051132f  # je 0x50511355; or byte [edx-0x20], dh; xor eax, eax; pop esi; retn 0x0004 
0x5051130f  # je 0x50511335; or byte [esi+0x20], dh; push 0x5055CA4C; call [0x5054A104] 
0x5051e37e  # je 0x5051E3A4; or byte [ebp-0x00F08B0A], al; call [0x5054A060] 
0x50526696  # je 0x505266BC; or byte [ebp-0x74E18B0A], al; push es; push esi; call [eax+0x18] 
0x50526662  # je 0x50526688; or byte [ebp-0x74DB8B0A], al; push es; push edi; push esi; call [eax+0x18] 
0x505266bf  # je 0x505266E5; or byte [ebp-0x74D78B0A], al; push es; push esi; call [eax+0x18] 
0x50527246  # je 0x5052726C; or byte [ebp-0x74CF8B0A], al; push es; push edi; push esi; call [eax+0x18] 
0x50516867  # je 0x5051688D; or byte [ebp-0x74F98A0A], al; inc esp; and al, 0x0C; pop esi; ret 
0x5052793c  # je 0x50527962; or byte [ebx+0x75C08506], cl; add eax, 0x5E044621; ret 
0x5052dd01  # je 0x5052DD27; or byte [ebx+0x51FF5008], cl; or al, 0x59; pop ecx; ret 
0x5052dd2d  # je 0x5052DD53; or byte [ebx+0x51FF5008], cl; adc byte [ecx+0x59], bl; ret 
0x5052db1a  # je 0x5052DB40; or byte [ebx+0x51FF5008], cl; adc al, 0x59; pop ecx; ret 
0x50515062  # je 0x50515088; or byte [ebx+0x74FF1040], cl; and al, 0x08; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x5052da52  # je 0x5052DA78; or byte [ebx+0x088B0846], cl; push eax; call [ecx+0x04] 
0x50511372  # je 0x50511398; or al, ch; adc eax, 0x59000058; pop ecx; retn 0x0008 
0x5051cd86  # je 0x5051CDAC; or al, ch; cmp eax, 0x59FFFFFF; pop esi; ret 
0x5051cb91  # je 0x5051CBB7; or al, ch; cmp esi, 0x5959FFFF; ret 
0x5050c8d0  # je 0x5050C8F6; or al, 0x05; fdiv qword [edx]; add byte [eax], al; push eax; call [0x5054A04C] 
0x50515c62  # je 0x50515C88; or al, 0x57; call [edi+0x00000248] 
0x5050109b  # je 0x505010C1; or al, 0x68; cmp al, 0xC9; push ebp; push eax; call [0x5054A18C] 
0x505266fa  # je 0x50526720; or al, 0x8B; or bh, bh; je 0x50526726; or al, 0x50; call [ecx+0x08] 
0x5052478b  # je 0x505247B1; or al, 0xE8; adc eax, 0x59FFFFFB; pop ecx; ret 
0x50522f38  # je 0x50522F5E; or al, 0xE8; mov byte [edx], ch; add byte [eax], al; add esp, 0x0C; ret 
0x50515c5e  # je 0x50515C84; or al, 0xFF; je 0x50515C88; or al, 0x57; call [edi+0x00000248] 
0x50516c07  # je 0x50516C2D; adc byte [edx+0x50], dl; call ecx; ret 
0x50516c07  # je 0x50516C2D; adc byte [edx+0x50], dl; call ecx 
0x50518de9  # je 0x50518E0F; adc al, 0x56; call eax 
0x5051e3bc  # je 0x5051E3E2; adc al, 0x8B; inc esp; and al, 0x10; push [eax]; call [0x5054A0EC] 
0x50518de5  # je 0x50518E0B; adc al, 0xFF; je 0x50518E0F; adc al, 0x56; call eax 
0x5052f3a8  # je 0x5052F3CE; sbb bh, bh; adc eax, 0x5054A060; xor eax, eax; add esp, 0x14; retn 0x0004 
0x50505bbf  # je 0x50505BE5; cmp [ebp+0x1C], ebx; je 0x50505BD3; push [ebp+0x1C]; call [0x5054A03C] 
0x505374ae  # je 0x505374D4; push 0x50550E94; push eax; mov ebx, [0x5054A088]; call ebx 
0x50508e4e  # je 0x50508E74; mov eax, [ecx]; push [eax+0x04]; push 0xFFFFFFFC; push [eax]; call [0x5054A284] 
0x50526667  # je 0x5052668D; mov eax, [esi]; push edi; push esi; call [eax+0x18] 
0x50513a4f  # je 0x50513A75; lea eax, [ebp-0x08]; push eax; push esi; call [0x5054A0CC] 
0x50502980  # je 0x505029A6; push [ebp+0x10]; add esi, 0x00000AC0; push esi; push edi; call [0x5054A04C] 
0x505496a7  # je 0x505496CE; mov edi, [ebp+0x10]; test edi, edi; je 0x505496CE; push ebx; call [0x5054A03C] 
0x5050af69  # je 0x5050AF90; mov eax, 0x505556D0; push [eax]; push ebx; call [0x5054A0B8] 
0x50542a46  # je 0x50542A6D; call eax 
0x5050d853  # je 0x5050D87B; mov eax, 0x505556E8; push [ebp-0x7C]; push [eax]; call edi 
0x505379ca  # je 0x505379F3; cmp [0x5055D554], eax; jbe 0x505379F3; push esi; call [0x5054A048] 
0x505108b6  # je 0x505108DF; push esi; lea eax, [ebp+0x000002F4]; push eax; call [0x5054A050] 
0x5050c6f6  # je 0x5050C71F; push edi; mov byte [eax], 0x00; call [0x5054A03C] 
0x505266c4  # je 0x505266EE; mov eax, [esi]; push esi; call [eax+0x18] 
0x505071a7  # je 0x505071D2; push [ebp+0x0C]; call ebx 
0x50512d90  # je 0x50512DBC; cmp [ebp-0x3C], ebx; je 0x50512DC7; lea eax, [ebp-0x3C]; push eax; call [0x5054A268] 
0x5051e4b9  # je 0x5051E4E5; cmp [ebp-0x34], ebx; je 0x5051E4F0; lea eax, [ebp-0x34]; push eax; call [0x5054A268] 
0x505012b0  # je 0x505012DC; cmp edi, eax; je 0x505012D2; push edi; call [0x5054A03C] 
0x5050422f  # je 0x5050425B; lea eax, [ebp-0x00000204]; push eax; call [0x5054A03C] 
0x50542a06  # je 0x50542A34; test edi, edi; je 0x50542A34; call esi 
0x505073dc  # je 0x5050740E; push edi; call [0x5054A03C] 
0x5052724b  # je 0x5052727D; mov eax, [esi]; push edi; push esi; call [eax+0x18] 
0x50512d95  # je 0x50512DC7; lea eax, [ebp-0x3C]; push eax; call [0x5054A268] 
0x5051e4be  # je 0x5051E4F0; lea eax, [ebp-0x34]; push eax; call [0x5054A268] 
0x5050eb99  # je 0x5050EBCB; lea eax, [ebp-0x00000300]; push eax; push edi; call [0x5054A0CC] 
0x50506b53  # je 0x50506B86; push eax; call ebx 
0x50508c95  # je 0x50508CC8; push ebx; call [0x5054A280] 
0x50506808  # je 0x5050683B; push 0x5054A440; push [0x5055C9F0]; call esi 
0x5052f448  # je 0x5052F47E; cmp ebx, ebp; jne 0x5052F47E; call [0x5054A0E4] 
0x50524389  # je 0x505243C1; push eax; push [ebp+0x08]; call [edi+0x04] 
0x5053941b  # je 0x50539453; test esi, esi; je 0x5053943B; push esi; call [0x5054A0D4] 
0x50506a1d  # je 0x50506A56; push eax; call ebx 
0x50508c1c  # je 0x50508C55; push eax; call edi 
0x50547212  # je 0x5054724B; lea eax, [ebp-0x40]; push eax; call [0x5054A268] 
0x5050610e  # je 0x5050614A; push [eax+0x10]; call [0x5054A03C] 
0x50549128  # je 0x50549164; push [ebp+0x0C]; call [0x5054A03C] 
0x50516458  # je 0x50516495; ret 
0x50511052  # je 0x50511090; push edi; push [eax+0x50555C7C]; call [0x5054A0B8] 
0x50508b5d  # je 0x50508B9B; push [ebx+0x00003800]; call edi 
0x50508bbc  # je 0x50508BFA; push [ebx+0x00003808]; call edi 
0x50507084  # je 0x505070C4; push eax; call ebx 
0x5050b5c1  # je 0x5050B601; lea eax, [esp+0x18]; push eax; call [0x5054A0BC] 
0x50537f36  # je 0x50537F77; push edi; call [0x5054A1C0] 
0x50501957  # je 0x5050199A; push edi; call [0x5054A280] 
0x50501951  # je 0x50501995; xor eax, eax; cmp edi, eax; je 0x5050199A; push edi; call [0x5054A280] 
0x50537f32  # je 0x50537F77; test edi, edi; je 0x50537F77; push edi; call [0x5054A1C0] 
0x50546b5f  # je 0x50546BA5; push [ebp+0x0C]; call [0x5054A03C] 
0x50506cb0  # je 0x50506CF8; add cl, byte [ebx-0x3F7AEBB9]; je 0x50506CF1; push eax; call ebx 
0x50506bfb  # je 0x50506C43; add cl, byte [ebx-0x3F7AE7B9]; je 0x50506C0C; push eax; call ebx 
0x50506cee  # je 0x50506D36; add cl, byte [ebx-0x3F7AE7B9]; je 0x50506D2F; push eax; call ebx 
0x50506d2c  # je 0x50506D74; add cl, byte [ebx-0x3F7AE3B9]; je 0x50506D6D; push eax; call ebx 
0x50506c17  # je 0x50506C5F; add cl, byte [ebx-0x3F7ADFB9]; je 0x50506C28; push eax; call ebx 
0x50506d6a  # je 0x50506DB2; add cl, byte [ebx-0x3F7ADFB9]; je 0x50506DAB; push eax; call ebx 
0x50506c25  # je 0x50506C6D; add cl, byte [ebx-0x3F7ADBB9]; je 0x50506C36; push eax; call ebx 
0x50506da8  # je 0x50506DF0; add cl, byte [ebx-0x3F7ADBB9]; je 0x50506DE3; push eax; call ebx 
0x505071a2  # je 0x505071ED; cmp [ebp+0x0C], esi; je 0x505071D2; push [ebp+0x0C]; call ebx 
0x50537e96  # je 0x50537EE3; test al, 0x08; jne 0x50537EA7; push ecx; call [0x5054A1C0] 
0x50548497  # je 0x505484EB; push 0x80000001; call esi 
0x50526712  # je 0x50526768; mov eax, [edi]; push esi; push edi; call [eax+0x18] 
0x50517f61  # je 0x50517FB9; push [edi+0x0C]; call [eax+0x08] 
0x50509548  # je 0x505095A5; push [ebp+0x08]; push ebx; call [0x5054A050] 
0x50504968  # je 0x505049C7; push [esi+0x00000AA8]; lea eax, [ebp+0x28]; push 0x5054A358; push eax; call [0x5054A260] 
0x50509544  # je 0x505095A5; cmp esp, esi; je 0x505095A5; push [ebp+0x08]; push ebx; call [0x5054A050] 
0x505068c0  # je 0x50506925; push eax; call edi 
0x50531552  # je 0x505315BE; add byte [ebx+0x078B0C7F], cl; push 0x00001F40; push edi; call [eax+0x04] 
0x5054961c  # je 0x50549689; push ecx; call [0x5054A03C] 
0x50506fd0  # je 0x5050703F; push [ebp+0x0C]; call ebx 
0x50549618  # je 0x50549689; test esi, esi; je 0x50549689; push ecx; call [0x5054A03C] 
0x50501a3e  # je 0x50501AB1; push [ebp+0x0C]; call [0x5054A03C] 
0x50503d31  # je 0x50503DA5; lea esi, [edi+0x000000DC]; or [esi], 0x08; call [0x5054A188] 
0x5053b17c  # je 0x5053B1F4; push [ebp-0x1C]; call [0x5054A060] 
0x5050d1fd  # je 0x5050D27E; push ebx; call [0x5054A03C] 
0x5051819f  # je 0x50518126; sal byte [eax+ecx-0x75], 0x4F; insb; push eax; call [ecx+0x04] 
0x50511294  # je 0x5051121C; push edi; lea ebx, [edi+0x01]; call [0x5054A03C] 
0x505087ba  # je 0x50508747; xchg byte [eax], cl; add [eax], eax; add byte [ebx], bh; ret 
0x505181b6  # je 0x50518143; xchg [eax+eax-0x3F7B0000], eax; je 0x505181C9; mov ecx, [edi+0x7C]; push eax; call [ecx+0x14] 
0x50515d23  # je 0x50515CBF; pop esi; pop ebx; pop edi; leave; ret 
0x5050179e  # je 0x50501756; test [esi+0x000000DC], 0x00008000; jne 0x505017BE; call [0x5054A044] 
0x5053a8ba  # je 0x5053A874; call [0x5054A0E4] 
0x50509090  # je 0x50509050; push 0x0C75FF53; push [ebp+0x08]; call eax 
0x5050edde  # je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8]; push [ebp-0x04]; call [0x5054A0E0] 
0x5050edde  # je 0x5050EDA0; push [ebp-0x04]; call [0x5054A0D8] 
0x5053d79f  # je 0x5053D768; push 0x00000004; push 0x00002000; push 0x00100000; push edi; call [0x5054A220] 
0x505028fc  # je 0x505028C7; retn 0x0004 
0x505223ff  # je 0x505223CA; ret 
0x5054845e  # je 0x50548437; push [ebp-0x78]; mov ebx, [0x5054A008]; call ebx 
0x50541b9e  # je 0x50541B7A; pop edi; sub eax, ecx; pop esi; pop ebp; ret 
0x50533ab4  # je 0x50533A92; mov eax, [esi+0x44]; pop esi; ret 
0x50537a76  # je 0x50537A56; pop edi; pop ebp; ret 
0x505465a7  # je 0x50546588; push ebp; push eax; call esi 
0x50546c51  # je 0x50546C38; push 0x0000276D; call eax 
0x505064f0  # je 0x505064E7; push [esp+0x04]; push 0x00000008; push eax; call [0x5054A07C]; retn 0x0004 
0x505064f0  # je 0x505064E7; push [esp+0x04]; push 0x00000008; push eax; call [0x5054A07C] 
0x50506538  # je 0x5050652F; push [esp+0x08]; push 0x00000008; push eax; call [0x5054A07C]; retn 0x0008 
0x50506538  # je 0x5050652F; push [esp+0x08]; push 0x00000008; push eax; call [0x5054A07C] 
0x505412cd  # je 0x505412CE; inc [ebx-0x00FF039B]; jne 0x505412E3; push [ebp+0x08]; call [0x5054A108] 
0x505153b3  # jne 0x505153B5; add byte [ebx+0x5E5F10C4], al; pop ebx; leave; ret 
0x5050644a  # jne 0x5050644C; ret 
0x5050ae45  # jne 0x5050AE49; add cl, cl; retn 0x0014 
0x5050ffaa  # jne 0x5050FFAE; xor ebx, ebx; test edi, edi; je 0x5050FFC5; push edi; call esi 
0x505107a3  # jne 0x505107A7; xor esi, esi; cmp [ebp-0x54], 0x00000000; je 0x505107BA; push [ebp-0x54]; call edi 
0x50514899  # jne 0x5051489D; inc eax; ret 
0x505384d8  # jne 0x505384DC; pop ebp; ret 
0x50511544  # jne 0x50511548; pop esi; ret 
0x5051d05b  # jne 0x5051D05F; leave; ret 
0x5053237d  # jne 0x50532381; rep ret 
0x5053efe8  # jne 0x5053EFED; or [esi], eax; ret 
0x505052a3  # jne 0x505052A8; and [ebp-0x30], eax; cmp [ebp-0x20], 0x00000000; je 0x505052BA; push [ebp-0x20]; call ebx 
0x505052b5  # jne 0x505052BA; and [ebp-0x20], eax; cmp [ebp-0x28], 0x00000000; je 0x505052E0; push [ebp-0x28]; call [0x5054A280] 
0x50524783  # jne 0x50524788; xor eax, eax; ret 
0x50538c11  # jne 0x50538C16; push eax; call ebx 
0x50518fd5  # jne 0x50518FDA; mov [esi+0x30], ebx; pop ebx; pop edi; pop esi; ret 
0x505474ed  # jne 0x505474F2; retn 0x0004 
0x50546b41  # jne 0x50546B46; retn 0x000C 
0x50515c50  # jne 0x50515C55; mov byte [eax], 0x5F; inc eax; cmp byte [eax], 0x00; jne 0x50515C46; ret 
0x5051d778  # jne 0x5051D77E; xor eax, eax; inc eax; ret 
0x5053c38b  # jne 0x5053C391; xor eax, eax; pop ebp; ret 
0x5051e2f0  # jne 0x5051E2F6; xor eax, eax; pop esi; ret 
0x50515812  # jne 0x50515818; xor eax, eax; leave; ret 
0x5054751a  # jne 0x50547520; pop ebp; retn 0x0008 
0x5050be10  # jne 0x5050BE16; mov word [esi+0x30], ax; push 0x5054A934; push edi; call [0x5054A0B8] 
0x505107b4  # jne 0x505107BA; and [ebp-0x54], 0x00000000; test ebx, ebx; je 0x505107C5; push ebx; call edi 
0x50516963  # jne 0x50516969; or eax, 0xFFFFFFFF; ret 
0x505166e7  # jne 0x505166ED; mov eax, esi; pop esi; ret 
0x50527943  # jne 0x5052794A; and [esi+0x04], eax; pop esi; ret 
0x50541c85  # jne 0x50541C8C; xor eax, eax; inc eax; pop ebp; ret 
0x5051eb39  # jne 0x5051EB40; xor eax, eax; inc eax; leave; ret 
0x5051a6d8  # jne 0x5051A6DF; xor eax, eax; pop esi; pop ebp; ret 
0x50541096  # jne 0x5054109D; push 0x00000018; pop eax; pop esi; ret 
0x50535f2b  # jne 0x50535F32; push 0x0000001A; pop eax; pop esi; ret 
0x5051fff3  # jne 0x5051FFFA; or eax, 0xFFFFFFFF; pop ebx; ret 
0x5051e2c3  # jne 0x5051E2CA; or eax, 0xFFFFFFFF; leave; ret 
0x50514890  # jne 0x50514897; neg eax; sbb eax, eax; ret 
0x5050e5a7  # jne 0x5050E5AF; or eax, 0xFFFFFFFF; retn 0x0008 
0x5053c3d7  # jne 0x5053C3DF; and eax, 0xFFFFFFDF; sub eax, 0x07; pop ebp; ret 
0x5051686c  # jne 0x50516874; mov eax, [esp+0x0C]; pop esi; ret 
0x5053a19c  # jne 0x5053A1A4; mov eax, 0x505569B8; ret 
0x5053a1af  # jne 0x5053A1B7; mov eax, 0x505569BC; ret 
0x50528388  # jne 0x50528390; mov eax, 0x5054BCD4; ret 
0x5051ee2e  # jne 0x5051EE36; call [0x5054A118] 
0x50501640  # jne 0x50501648; call [0x5054A044] 
0x50547572  # jne 0x5054757A; jmp [0x5054A028] 
0x50516b80  # jne 0x50516B88; jmp [0x5054A0E4] 
0x50546fa0  # jne 0x50546FA9; or eax, 0xFFFFFFFF; pop ebp; retn 0x0008 
0x50546bbd  # jne 0x50546BC6; or eax, 0xFFFFFFFF; pop ebp; retn 0x000C 
0x5054703a  # jne 0x50547043; or eax, 0xFFFFFFFF; pop ebp; retn 0x0010 
0x50546d70  # jne 0x50546D79; or eax, 0xFFFFFFFF; pop ebp; retn 0x0014 
0x505476a9  # jne 0x505476B2; or eax, 0xFFFFFFFF; pop ebp; retn 0x0024 
0x505063c4  # jne 0x505063CD; or eax, 0xFFFFFFFF; pop esi; retn 0x0004 
0x5054267f  # jne 0x50542688; mov eax, 0x00008000; pop ebp; ret 
0x5053868e  # jne 0x50538697; mov [esi+0x64], 0x0000008A; push [esi+0x64]; push 0x00000008; call ebx 
0x50542826  # jne 0x50542830; push ecx; push esi; push 0x00000009; push [eax+0x04]; call [0x5054A240] 
0x5050954b  # jne 0x50509555; push ebx; call [0x5054A050] 
0x505470db  # jne 0x505470E5; push esi; call eax 
0x50541306  # jne 0x50541310; push 0x00000008; call [0x5054A028] 
0x50547415  # jne 0x5054741F; push 0xFFFFFFFF; call eax 
0x50537b0f  # jne 0x50537B19; jc 0x50537B03; pop esi; pop ebp; ret 
0x50505bbd  # jne 0x50505BC7; je 0x50505BE5; cmp [ebp+0x1C], ebx; je 0x50505BD3; push [ebp+0x1C]; call [0x5054A03C] 
0x5052da0f  # jne 0x5052DA19; mov ecx, [eax]; push eax; call [ecx+0x0C] 
0x50541d66  # jne 0x50541D70; lea eax, [ebp-0x04]; push eax; call esi 
0x5051ee26  # jne 0x5051EE30; lea ebx, [esi+0x14]; push edi; test ebx, ebx; jne 0x5051EE36; call [0x5054A118] 
0x5054198e  # jne 0x50541998; mov byte [ebp-0x06], 0x00; call [0x5054A234] 
0x50539f5d  # jne 0x50539F67; call [0x5054A200] 
0x505412d8  # jne 0x505412E2; call [0x5054A108] 
0x505414b3  # jne 0x505414BD; call [0x5054A230] 
0x5050604e  # jne 0x50506058; call [0x5054A03C] 
0x5050130e  # jne 0x50501318; call [0x5054A040] 
0x50547283  # jne 0x5054728D; call [0x5055DF4C]; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5054729C; call [0x5055DF8C] 
0x5054713b  # jne 0x50547145; call [0x5055DF4C] 
0x505438f7  # jne 0x50543901; call [0x5054A16C] 
0x505439b1  # jne 0x505439BB; call [0x5054A170] 
0x50537b58  # jne 0x50537B62; call [0x50550E88] 
0x5051e212  # jne 0x5051E21C; call [0x5054A0A8] 
0x50537a5e  # jne 0x50537A68; call [0x5054A1B0] 
0x50537ade  # jne 0x50537AE8; call [0x5054A1B4] 
0x50546add  # jne 0x50546AE7; call [0x5055DFC0] 
0x505425a1  # jne 0x505425AB; call [0x5054A0E4] 
0x5053a0cf  # jne 0x5053A0D9; call [0x5054A1FC] 
0x50515119  # jne 0x50515123; call [esi+0x04]; add esp, 0x18; leave; ret 
0x50515119  # jne 0x50515123; call [esi+0x04] 
0x5052436f  # jne 0x50524379; call [edi+0x04] 
0x5054752d  # jne 0x50547537; push [ebp+0x0C]; push [ebp+0x08]; call eax; push eax; call [0x5055E030] 
0x50546fb6  # jne 0x50546FC0; push [ebp+0x0C]; push [ebp+0x08]; call eax; push eax; call [0x5055DFFC] 
0x50546fb6  # jne 0x50546FC0; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50506579  # jne 0x50506583; push [ebp+0x10]; push [ebp+0x0C]; push 0x00000200; push eax; call [0x5054A190] 
0x50501033  # jne 0x5050103D; push [ebp+0x10]; push [ebp+0x0C]; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x50546bd6  # jne 0x50546BE0; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50547056  # jne 0x50547060; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x50541525  # jne 0x5054152F; push [ebp+0x1C]; call [0x5054A22C] 
0x5054739a  # jne 0x505473A4; push [ebp-0x14]; call eax 
0x505092c4  # jne 0x505092CE; push [ebp-0x04]; call [0x5054A250] 
0x50542a84  # jne 0x50542A8E; push [ebp-0x04]; call eax 
0x505090b1  # jne 0x505090BB; push [esi+0x24]; push eax; call [0x5054A254] 
0x50547062  # jne 0x5054706C; call eax; push eax; call [0x5055E000] 
0x50547452  # jne 0x5054745C; call eax; push eax; call [0x5055E00C] 
0x5054749a  # jne 0x505474A4; call eax; push eax; call [0x5055E014] 
0x505474d6  # jne 0x505474E0; call eax; push eax; call [0x5055E01C] 
0x50547533  # jne 0x5054753D; call eax; push eax; call [0x5055E030] 
0x50547617  # jne 0x50547621; call eax; push eax; call [0x5055E068] 
0x50547653  # jne 0x5054765D; call eax; push eax; call [0x5055E06C] 
0x5054768f  # jne 0x50547699; call eax; push eax; call [0x5055E070] 
0x50546bdf  # jne 0x50546BE9; call eax; push eax; call [0x5055DFDC] 
0x50546c1b  # jne 0x50546C25; call eax; push eax; call [0x5055DFE0] 
0x50546d56  # jne 0x50546D60; call eax; push eax; call [0x5055DFF4] 
0x50546d9e  # jne 0x50546DA8; call eax; push eax; call [0x5055DFF8] 
0x50546fbc  # jne 0x50546FC6; call eax; push eax; call [0x5055DFFC] 
0x50537ac9  # jne 0x50537AD3; call eax; pop ebp; ret 
0x50509098  # jne 0x505090A2; call eax 
0x50541a79  # jne 0x50541A83; call ebx 
0x50539ebf  # jne 0x50539EC9; call esi 
0x50505a49  # jne 0x50505A53; call edi 
0x50507798  # jne 0x505077A3; cmp [ebx+edi*8+0x00003890], esi; je 0x505077AA; push eax; call [0x5055C988] 
0x5050777d  # jne 0x50507788; cmp [ebx+edi*8+0x000038A0], esi; je 0x5050778F; push eax; call [0x5055C99C] 
0x50507840  # jne 0x5050784B; add edi, 0x00000114; mov [ebp+0x0C], edi; push [ebp+0x0C]; call [0x5054A03C] 
0x5052da2d  # jne 0x5052DA38; mov eax, [esi]; push edi; push esi; call [eax+0x1C] 
0x5053676e  # jne 0x50536779; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x50547291  # jne 0x5054729C; call [0x5055DF8C] 
0x505473a5  # jne 0x505473B0; push [ebp-0x18]; call [0x5055DF88] 
0x5050b164  # jne 0x5050B170; mov [ebx+0x000032D8], 0x00000001; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B233; push edi; call [0x5054A03C] 
0x5050b1c7  # jne 0x5050B1D3; mov [ebx+0x000032D8], 0x00000001; cmp [ebx+0x000032D8], 0x00000000; jne 0x5050B1EC; push edi; call [0x5054A03C] 
0x5052f36c  # jne 0x5052F378; test byte [esi+0x20], 0x02; jne 0x5052F2B5; push [esi+0x04]; call [0x5054A13C] 
0x5053a69d  # jne 0x5053A6A9; call [0x5054A0E4] 
0x50537e9a  # jne 0x50537EA7; push ecx; call [0x5054A1C0] 
0x505167be  # jne 0x505167CB; mov eax, [eax+0x4C]; test eax, eax; je 0x505167DB; mov eax, [eax+0x14]; ret 
0x505167ce  # jne 0x505167DB; mov eax, [eax+0x58]; test eax, eax; je 0x505167DB; mov eax, [eax+0x1C]; ret 
0x5051681b  # jne 0x50516828; mov eax, [eax+0x58]; test eax, eax; je 0x50516828; mov eax, [eax+0x24]; ret 
0x505017ef  # jne 0x505017FC; call [0x5054A044] 
0x505466fb  # jne 0x50546708; call [0x5054A184]; mov [0x50556FF8], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x5055DF80] 
0x505466fb  # jne 0x50546708; call [0x5054A184] 
0x5052f436  # jne 0x5052F443; call [0x5054A0E4] 
0x50507064  # jne 0x50507072; je 0x50507188; push [ebp+0x0C]; call ebx 
0x5052dc4a  # jne 0x5052DC58; push eax; call [ecx]; add esp, 0x18; pop ebp; ret 
0x5052dc4a  # jne 0x5052DC58; push eax; call [ecx] 
0x50542593  # jne 0x505425A1; push eax; call [0x5054A0EC] 
0x505360ef  # jne 0x505360FD; push eax; call [ebp+0x08] 
0x5050cfa5  # jne 0x5050CFB3; push ebx; mov ebx, [0x5054A04C]; call ebx 
0x5050cf86  # jne 0x5050CF94; push ebx; call [0x5054A04C] 
0x50516258  # jne 0x50516266; push ebx; call [esi+0x04] 
0x50540335  # jne 0x50540343; push ebx; push [ebp-0x0C]; push 0x00000000; push 0x0000FDE9; call [0x5054A240] 
0x5053635e  # jne 0x5053636C; push esi; push ebx; push 0x00000000; push [0x5055D69C]; call [0x5054A080] 
0x5050787b  # jne 0x50507889; push esi; push esi; call edi 
0x5051355b  # jne 0x50513569; push esi; call [0x5054A04C] 
0x50538441  # jne 0x5053844F; push esi; call [0x5054A1CC] 
0x5052dcd5  # jne 0x5052DCE3; push esi; call [eax+0x08] 
0x5050657f  # jne 0x5050658D; push 0x00000200; push eax; call [0x5054A190] 
0x5053171f  # jne 0x5053172D; push 0x00000001; push eax; call [ecx+0x08] 
0x50501039  # jne 0x50501047; push 0x00000001; push 0x00000000; call [0x5054A240] 
0x505414a0  # jne 0x505414AE; push 0x00000001; push [ebp+0x18]; call esi 
0x50537b33  # jne 0x50537B41; jc 0x50537B23; pop esi; pop ebp; ret 
0x505071a5  # jne 0x505071B3; je 0x505071D2; push [ebp+0x0C]; call ebx 
0x50506fce  # jne 0x50506FDC; je 0x5050703F; push [ebp+0x0C]; call ebx 
0x50505c92  # jne 0x50505CA0; mov [esi+0x0000051C], eax; lea eax, [esi+0x00000520]; push eax; call ebx 
0x505103de  # jne 0x505103EC; mov [esi+0x00000AA0], eax; call [0x5054A0A8] 
0x5052dae7  # jne 0x5052DAF5; mov eax, [esi]; push esi; call [eax+0x0C] 
0x5052dc80  # jne 0x5052DC8E; mov ecx, [eax]; push eax; call [ecx+0x04] 
0x5052daa0  # jne 0x5052DAAE; mov ecx, [eax]; push eax; call [ecx+0x08] 
0x50509ed7  # jne 0x50509EE5; mov esi, [0x5054A260]; lea eax, [ebp-0x44]; push 0x5054A358; push eax; call esi 
0x50515143  # jne 0x50515151; mov eax, [ebp+0x08]; shr ecx, 0x08; mov byte [ebp-0x02], cl; call [eax+0x04] 
0x50541430  # jne 0x5054143E; lea eax, [0x00000001+eax*8]; push eax; push [ebp+0x18]; call esi 
0x5050facb  # jne 0x5050FAD9; lea eax, [esi+0x000006A0]; push eax; call ebx 
0x5051039b  # jne 0x505103A9; lea eax, [esi+0x000006A0]; push eax; call edi 
0x50503958  # jne 0x50503966; lea ebx, [esi+0x00002AC0]; push ebx; call [0x5054A050] 
0x5050c886  # jne 0x5050C894; call [0x5054A038]; push eax; call [0x5054A040] 
0x505012d4  # jne 0x505012E2; call [0x5054A038] 
0x5051433d  # jne 0x5051434B; call [0x5054A03C]; pop ebp; retn 0x000C 
0x50501a41  # jne 0x50501A4F; call [0x5054A03C] 
0x50503667  # jne 0x50503675; call [0x5054A040] 
0x50514334  # jne 0x50514342; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C]; pop ebp; retn 0x000C 
0x50509592  # jne 0x505095A0; call [0x5054A04C]; push [ebp+0x0C]; call [0x5054A03C] 
0x50509592  # jne 0x505095A0; call [0x5054A04C] 
0x50503904  # jne 0x50503912; call [0x5054A05C] 
0x50541ae3  # jne 0x50541AF1; call [0x5054A190] 
0x505081eb  # jne 0x505081F9; call [0x5055C9A4] 
0x5053b19c  # jne 0x5053B1AA; call [0x5054A0A8]; cmp eax, 0xFFFFFFFF; jne 0x5053B1DD; call [0x5054A0E4] 
0x5050fbce  # jne 0x5050FBDC; call [0x5054A0A8]; mov [ebp+0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x5050FC2A; call [0x5054A0E4] 
0x505070d1  # jne 0x505070DF; call [0x5054A0A8] 
0x50507022  # jne 0x50507030; call [0x5054A0AC] 
0x51012fad  # add byte [eax], al; add byte [eax], al; call ebx; lea eax, [ebp+0x000000A0]; push eax; call [0x51017040] 
0x51012e8b  # add byte [eax], al; add byte [eax], al; call ebx 
0x51015fc9  # add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x51015e70  # add byte [eax], al; add byte [eax+0x68], al; in al, dx; lea eax, [ecx]; push ecx; call [0x51017084] 
0x51013bad  # add byte [eax], al; add byte [eax+0x57], dl; call esi 
0x51012a25  # add byte [eax], al; add byte [eax+0x6A], dl; add [ebp-0x00AF67BB], ecx; jne 0x510129C6; call [0x51017004] 
0x51012816  # add byte [eax], al; add byte [eax+0x74], dl; pop ss; push 0x80000001; call esi 
0x51012892  # add byte [eax], al; add byte [ecx+0x50], dl; cmp [ebp-0x7C], ecx; je 0x510128EE; push 0x80000001; call esi 
0x51013e54  # add byte [eax], al; add byte [edi+0x5B], bl; pop esi; leave; ret 
0x5101213e  # add byte [eax], al; add byte [eax+0x00CE8150], al; add byte [eax], al; adc byte [esi-0x73], dl; test [esi+edi*8-0x01], edi; call [eax-0x73] 
0x51012b39  # add byte [eax], al; add byte [eax-0x00018217], al; call [edi-0x73] 
0x51012834  # add byte [eax], al; add byte [eax+0x458DE7EB], al; mov word [eax-0x01], ss; jne 0x510127C9; call [0x5101700C] 
0x51012201  # add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov edi, [0x51017000]; mov [ebp-0x58], eax; call edi 
0x510122c1  # add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x5101396c  # add byte [eax], al; add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x51017040] 
0x51015fc1  # add byte [eax], al; add byte [ebx-0x55160038], al; add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x51013964  # add byte [eax], al; add byte [ebp-0x6E7BF025], al; add byte [eax], al; add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x51017040] 
0x51015482  # add byte [eax], al; add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x51014c1f  # add byte [eax], al; add byte [ebx+0x558BDC45], cl; loopne 0x51014C11; enter 0xFF5F, 0xFF; ret 
0x5101264d  # add byte [eax], al; add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x51012115  # add byte [eax], al; add byte [ebp-0x0000837B], cl; call [eax-0x01] 
0x51012476  # add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x51013c55  # add byte [eax], al; add cl, cl; ret 
0x51015962  # add byte [eax], al; add al, ch; call [ebp-0x01] 
0x51015afe  # add byte [eax], al; add bl, ch; jecxz 0x51015A8F; call [ebp-0x75] 
0x51012146  # add byte [eax], al; adc byte [esi-0x73], dl; test [esi+edi*8-0x01], edi; call [eax-0x73]; test [ebp+edi*8-0x01], edi; call [eax-0x01] 
0x51012146  # add byte [eax], al; adc byte [esi-0x73], dl; test [esi+edi*8-0x01], edi; call [eax-0x73] 
0x510154a6  # add byte [eax], al; xor eax, eax; pop ebp; ret 
0x51015e71  # add byte [eax], al; inc eax; push 0x51018DEC; call [0x51017084]; mov [0x5101F978], eax; ret 
0x51015e71  # add byte [eax], al; inc eax; push 0x51018DEC; call [0x51017084] 
0x51013bae  # add byte [eax], al; push eax; push edi; call esi 
0x51012817  # add byte [eax], al; push eax; je 0x51012833; push 0x80000001; call esi 
0x51013b81  # add byte [eax], al; push eax; call [0x510170D8] 
0x5101152b  # add byte [eax], al; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x5101562a  # add byte [eax], al; pop ecx; pop ebp; ret 
0x51013e55  # add byte [eax], al; pop edi; pop ebx; pop esi; leave; ret 
0x510129b8  # add byte [eax], al; push 0x80000001; call [0x51017014] 
0x51013227  # add byte [eax], al; jc 0x510131FA; pop edi; pop esi; retn 0x000C 
0x510131d9  # add byte [eax], al; jc 0x510131C5; xor eax, eax; retn 0x0004 
0x51012835  # add byte [eax], al; sub bl, 0xE7; lea eax, [ebp-0x74]; push eax; push [ebp-0x78]; call [0x5101700C] 
0x51012202  # add byte [eax], al; cmp bh, 0xD6; push [ebp-0x54]; mov edi, [0x51017000]; mov [ebp-0x58], eax; call edi 
0x510122c2  # add byte [eax], al; cmp bh, 0xD6; push [ebp-0x54]; mov esi, eax; call edi 
0x5101396d  # add byte [eax], al; cmp [ebp+0x14], 0x01; jl 0x51013A00; push eax; call [0x51017040] 
0x5101591e  # add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x5101303e  # add byte [eax], al; test eax, eax; je 0x51013052; push [ebp-0x64]; call [0x51017000] 
0x51012a0f  # add byte [eax], al; mov ebx, [0x51017040]; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x510110c6  # add byte [eax], al; mov esi, [0x51017064]; push 0x51018CF8; push eax; call esi 
0x51011095  # add byte [eax], al; mov esi, [0x5101706C]; push edi; push 0x00008000; call esi 
0x510106ff  # add byte [eax], al; mov esi, [0x51017170]; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x51015483  # add byte [eax], al; mov eax, [ecx+0x08]; and [ecx+0x04], 0x00000000; mov [ecx], eax; pop ebp; ret 
0x51012d13  # add byte [eax], al; mov eax, esi; pop esi; pop ebp; retn 0x0010 
0x5101298a  # add byte [eax], al; mov ebx, eax; call [0x510170D4] 
0x51013bde  # add byte [eax], al; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x51013132  # add byte [eax], al; lea eax, [esi+0x34]; push eax; call [0x51017040] 
0x51012a7e  # add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x51013c56  # add byte [eax], al; leave; ret 
0x510118b9  # add byte [eax], al; call [0x51020704] 
0x510124ed  # add byte [eax], al; call [0x51017008]; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x510124ed  # add byte [eax], al; call [0x51017008] 
0x51013aed  # add byte [eax], al; call [0x5101705C] 
0x51014d7d  # add byte [eax], al; call [0x510170BC] 
0x51015226  # add byte [eax], al; call [0x510170E8] 
0x5101407d  # add byte [eax], al; jmp [0x51014A7A+eax*4] 
0x51010693  # add byte [eax], al; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x510171B0] 
0x51012faf  # add byte [eax], al; call ebx; lea eax, [ebp+0x000000A0]; push eax; call [0x51017040] 
0x510110a1  # add byte [eax], al; call esi; push 0x51018D08; mov edi, eax; call [0x51017068] 
0x51013bdc  # add byte [ecx], al; add byte [eax], al; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x510124eb  # add byte [ecx], al; add byte [eax], al; call [0x51017008]; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x510124eb  # add byte [ecx], al; add byte [eax], al; call [0x51017008] 
0x510124aa  # add byte [edx], al; add byte [edx+0x00], ch; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x51017018] 
0x5101141a  # add byte [eax], cl; add dl, byte [ecx+0x56]; xor edi, edi; call [0x510170E4] 
0x51011415  # add byte [eax], cl; add dl, byte [ecx-0x42]; add byte [eax], cl; add dl, byte [ecx+0x56]; xor edi, edi; call [0x510170E4] 
0x51015960  # add byte [ecx], cl; add byte [eax], al; add al, ch; call [ebp-0x01] 
0x51012274  # add byte [edi], cl; add byte [edx+0x00], ch; push 0x5101784F; push ebx; call esi 
0x51012240  # add byte [edi], cl; add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x510125d1  # add byte [edi], cl; add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x51017018] 
0x510122b7  # add byte [edi], cl; add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x510159f1  # add byte [ecx], bl; add dl, byte [ecx-0x73]; inc esp; cmp byte [eax+edx*2], cl; call [0x51017024] 
0x51015a2a  # add byte [ecx], bl; add dl, byte [ecx-0x3F]; loopne 0x51015A37; lea eax, [ecx+eax+0x0C]; push eax; call [0x51017028] 
0x51013e16  # add byte [ebx], ah; retn 0xC483 
0x51011d1f  # add byte [ebx], dh; rol byte [eax-0x15], 0xF8; mov eax, [0x51020704]; test eax, eax; jne 0x51011D34; jmp [0x5101702C] 
0x51015fcb  # add byte [ebx], dh; fstp tword [ebx]; ret 
0x51011f1f  # add byte [ecx], bh; pop ebp; mov eax, 0x4D8B1675; adc al, 0x3B; ret 
0x51015e72  # add byte [eax+0x68], al; in al, dx; lea eax, [ecx]; push ecx; call [0x51017084] 
0x510136fd  # add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x51013810  # add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0014 
0x510138c4  # add byte [ebx-0x01], cl; dec ecx; retn 0x0010 
0x51013baf  # add byte [eax+0x57], dl; call esi 
0x51012a27  # add byte [eax+0x6A], dl; add [ebp-0x00AF67BB], ecx; jne 0x510129C6; call [0x51017004] 
0x51012818  # add byte [eax+0x74], dl; pop ss; push 0x80000001; call esi 
0x51012e7c  # add byte [eax-0x73], dl; inc ebp; mov al, byte [0x9C75FF50]; mov [ebp-0x68], edi; mov byte [ebp+0x000000A0], 0x00; call ebx 
0x51011056  # add byte [eax-0x01], dl; adc eax, 0x51017030; jmp [0x51020700] 
0x51012894  # add byte [ecx+0x50], dl; cmp [ebp-0x7C], ecx; je 0x510128EE; push 0x80000001; call esi 
0x5101284e  # add byte [ebx-0x73], dl; inc ebp; mov word [eax+0x6A], ss; add bh, bh; jne 0x510127E1; call [0x51017010] 
0x51011410  # add byte [esi+0x57], dl; push [0x51020800]; mov esi, 0x51020800; push esi; xor edi, edi; call [0x510170E4] 
0x51011554  # add byte [esi+0x74], dl; adc byte [esi-0x01], dl; adc eax, 0x5102068C; push eax; call [0x51020760] 
0x510135a8  # add byte [esi+0x74], dl; inc esp; push [ebp+0x0C]; call [0x51017040] 
0x5101152c  # add byte [esi-0x39], dl; inc ebp; cld; add al, 0x00; add byte [eax], al; call eax 
0x51015ef5  # add byte [esi-0x18], dl; lodsd; idiv edi; call [eax-0x18] 
0x510129ae  # add byte [edi+0x50], dl; test bl, 0x01; je 0x51012B38; push 0x80000001; call [0x51017014] 
0x51012e34  # add byte [edi+0x50], dl; test bl, 0x01; je 0x51012E55; push 0x80000001; call [0x51017018] 
0x51013cd5  # add byte [ecx+0x59], bl; mov eax, esi; pop esi; pop ebx; leave; ret 
0x5101562b  # add byte [ecx+0x5D], bl; ret 
0x51015c7b  # add byte [ecx-0x7D], bl; clc; push [ebx+eax-0x01]; inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x510155fb  # add byte [ecx-0x15], bl; or al, byte [ebx-0x00A9DF3A]; adc eax, 0x51017024; pop esi; pop ebp; ret 
0x51015973  # add byte [esi+0x5D], bl; ret 
0x51013e56  # add byte [edi+0x5B], bl; pop esi; leave; ret 
0x51012126  # add byte [eax+0x00], ch; add [eax], eax; add byte [ebp-0x0001837B], cl; call [eax+0x6A] 
0x51012278  # add byte [eax+0x4F], ch; js 0x5101227E; push ecx; push ebx; call esi 
0x5101264a  # add byte [eax-0x0080], ch; add byte [eax], al; add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x51012276  # add byte [edx+0x00], ch; push 0x5101784F; push ebx; call esi 
0x51012242  # add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x510125d3  # add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x51017018] 
0x510122b9  # add byte [edx+0x00], ch; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x510124ac  # add byte [edx+0x00], ch; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x51017018] 
0x51012868  # add byte [eax+0x01], dh; push ecx; call ebx 
0x51013228  # add byte [edx-0x31], dh; pop edi; pop esi; retn 0x000C 
0x510131da  # add byte [edx-0x18], dh; xor eax, eax; retn 0x0004 
0x5101146c  # add byte [esp+eax*2-0x01], dh; jne 0x5101147E; call [0x51017040] 
0x51013efb  # add byte [edi-0x2B], bh; pop esi; pop ebx; pop ebp; ret 
0x51013eaf  # add byte [edi-0x19], bh; pop esi; pop ebp; ret 
0x51015628  # add byte [eax+0x5D590000], al; ret 
0x510155f8  # add byte [eax-0x14A70000], al; or al, byte [ebx-0x00A9DF3A]; adc eax, 0x51017024; pop esi; pop ebp; ret 
0x5101109f  # add byte [eax-0x29010000], al; push 0x51018D08; mov edi, eax; call [0x51017068] 
0x51012140  # add byte [eax+0x00CE8150], al; add byte [eax], al; adc byte [esi-0x73], dl; test [esi+edi*8-0x01], edi; call [eax-0x73] 
0x5101385f  # add byte [eax-0x7CB7FA87], al; enter 0x40F8, 0x85; sar byte [edi+0x4D], 0x8B; ret 
0x51012b3b  # add byte [eax-0x00018217], al; call [edi-0x73] 
0x51012836  # add byte [eax+0x458DE7EB], al; mov word [eax-0x01], ss; jne 0x510127C9; call [0x5101700C] 
0x5101289f  # add byte [eax-0x3F7A2901], al; jne 0x510128BE; push [ebp-0x0080]; push [ebp-0x78]; call [0x5101700C] 
0x51012203  # add byte [eax+0x75FFD6FF], al; lodsb; mov edi, [0x51017000]; mov [ebp-0x58], eax; call edi 
0x510122c3  # add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x5101396e  # add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x51017040] 
0x510141f2  # add byte [ebx-0x00020F73], al; call [eax] 
0x510141fe  # add byte [ebx-0x00020F73], al; jmp [eax] 
0x51015fc3  # add byte [ebx-0x55160038], al; add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x51011bc2  # add byte [ebx-0x00AF0320], al; xor eax, 0x5101BF10; call [0x51017030] 
0x51012498  # add byte [ebp-0x577BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x51012470  # add byte [ebp-0x2F7BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x5101303f  # add byte [ebp-0x00F18B40], al; jne 0x51012FE3; call [0x51017000] 
0x51013966  # add byte [ebp-0x6E7BF025], al; add byte [eax], al; add byte [ebx+0x0F01147D], al; mov word [edi+0x50000000], es; call [0x51017040] 
0x5101548b  # add byte [ecx-0x743CA2FF], cl; call [ebp-0x75] 
0x51015d32  # add byte [ecx-0x3C74A1FA], cl; pop ebx; pop ebp; ret 
0x5101427e  # add byte [ecx-0x00026B4B], cl; dec [ebp-0x00025B7B]; call [eax+0x0F] 
0x51012a10  # add byte [ebx+0x0170401D], cl; push ecx; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x510110c7  # add byte [ebx+0x01706435], cl; push ecx; push 0x51018CF8; push eax; call esi 
0x51011096  # add byte [ebx+0x01706C35], cl; push ecx; push edi; push 0x00008000; call esi 
0x51015484  # add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x51014c21  # add byte [ebx+0x558BDC45], cl; loopne 0x51014C11; enter 0xFF5F, 0xFF; ret 
0x51012244  # add byte [ebp+0x53503045], cl; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x51012244  # add byte [ebp+0x53503045], cl; call esi 
0x510122bb  # add byte [ebp+0x68503045], cl; add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x51011a70  # add byte [ebp-0x00AF1FBB], cl; jne 0x51011A68; push [ebp-0x08]; push [ebp-0x0C]; push [ebp+0x08]; call [0x510206C8] 
0x5101264f  # add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x5101506a  # add byte [ebp-0x001AD37B], cl; call [eax+0x53] 
0x51015239  # add byte [ebp-0x001AD37B], cl; call [eax-0x75]; ret 
0x51015239  # add byte [ebp-0x001AD37B], cl; call [eax-0x75] 
0x51014e80  # add byte [ebp-0x001AC37B], cl; call [eax+0x56] 
0x51014ed4  # add byte [ebp-0x001AC37B], cl; call [eax+0x6A] 
0x5101212b  # add byte [ebp-0x0001837B], cl; call [eax+0x6A] 
0x5101216d  # add byte [ebp-0x0000837B], cl; call [eax-0x73]; test [ebp+edi*8-0x01], edi; call [eax+0x57]; call [0x510171D8] 
0x5101216d  # add byte [ebp-0x0000837B], cl; call [eax-0x73]; test [ebp+edi*8-0x01], edi; call [eax+0x57] 
0x5101216d  # add byte [ebp-0x0000837B], cl; call [eax-0x73] 
0x51012117  # add byte [ebp-0x0000837B], cl; call [eax-0x01] 
0x51014427  # add byte [ebp-0x00020B7B], cl; call [eax-0x73] 
0x51012478  # add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x5101149c  # add byte [ebp-0x0004037B], cl; call [eax-0x75] 
0x51012e2e  # add byte [ebp+0x0002B486], cl; add byte [edi+0x50], dl; test bl, 0x01; je 0x51012E55; push 0x80000001; call [0x51017018] 
0x5101529d  # add byte [ebp-0x001AD373], cl; call [ecx-0x01]; jne 0x510152B8; push [ebp-0x00001ACC]; push [eax]; call [0x51017194] 
0x5101529d  # add byte [ebp-0x001AD373], cl; call [ecx-0x01] 
0x51013a36  # add cl, cl; ret 
0x51015964  # add al, ch; call [ebp-0x01] 
0x51011d89  # add bl, ch; in eax, 0x83; enter 0x5002, 0xFF; xor eax, 0x5101BF10; call [0x51017030] 
0x51012c6d  # add bh, dh; int1; pop esi; retn 0x0004 
0x51013a2e  # add bh, dh; stc; imul eax, eax, 0x00015180; leave; ret 
0x510124ee  # add bh, bh; adc eax, 0x51017008; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x51014e94  # add bh, bh; xor al, 0x07; call [0x51017194] 
0x51010694  # add bh, bh; jne 0x510106A0; mov byte [ebp-0x06], 0x00; call [0x510171B0] 
0x510128da  # add bh, bh; jne 0x51012866; call [0x51017000] 
0x51012855  # add bh, bh; jne 0x510127E1; call [0x51017010] 
0x510110a2  # add bh, bh; salc; push 0x51018D08; mov edi, eax; call [0x51017068] 
0x51012648  # add [eax], eax; add byte [eax-0x0080], ch; add byte [eax], al; add byte [ebp-0x0000FB7B], cl; call [eax-0x01] 
0x5101289d  # add [eax], eax; add byte [eax-0x3F7A2901], al; jne 0x510128BE; push [ebp-0x0080]; push [ebp-0x78]; call [0x5101700C] 
0x51012129  # add [eax], eax; add byte [ebp-0x0001837B], cl; call [eax+0x6A] 
0x51012bc1  # add [eax], eax; add cl, cl; retn 0x0004 
0x510124ec  # add [eax], eax; add bh, bh; adc eax, 0x51017008; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x51013a35  # add [eax], eax; leave; ret 
0x51012c6c  # add [eax], eax; div ecx; pop esi; retn 0x0004 
0x51013a2d  # add [eax], eax; idiv ecx; imul eax, eax, 0x00015180; leave; ret 
0x510154ec  # add [ebx+eax*4], eax; loopne 0x51015531; pop esi; pop ebp; ret 
0x51015a33  # add [eax+edx*2], ecx; call [0x51017028]; pop ebp; ret 
0x51015a33  # add [eax+edx*2], ecx; call [0x51017028] 
0x510129b3  # add [edi], ecx; test byte [esi+0x01], bh; add byte [eax], al; push 0x80000001; call [0x51017014] 
0x5101312d  # add [edi], ecx; test byte [eax-0x73000000], cl; inc esi; xor al, 0x50; call [0x51017040] 
0x51013972  # add [edi], ecx; mov word [edi+0x50000000], es; call [0x51017040] 
0x51013667  # add [edx], esi; retn 0x0688 
0x51011a25  # add [ebx], esi; rcl byte [eax+0x50], 0x50; lea eax, [ebp-0x40]; push eax; call ebx 
0x510156e2  # add [ebx], esi; leave; cmp [0x51020894], eax; sete cl; mov eax, ecx; ret 
0x510134be  # add [edx], edi; ret 
0x51011943  # add [eax-0x01], edx; xor eax, 0x5101BF10; call [0x51017030] 
0x51015afb  # add [ecx+0x01], edx; add byte [eax], al; add bl, ch; jecxz 0x51015A8F; call [ebp-0x75] 
0x51015a94  # add [ecx+0x02], edx; jne 0x51015A73; call [0x510170FC] 
0x51011d59  # add [ecx+0x0F], edx; mov dh, 0xC0; and eax, 0x01; ret 
0x5101304b  # add [ecx+0x33], edx; rol byte [eax-0x15], 0x15; push [ebp-0x64]; call [0x51017000] 
0x51011462  # add [ecx+0x33], edx; lds ecx, [ecx+0x7D83FC45]; or al, 0x00; je 0x510114B3; push [ebp+0x0C]; call [0x51017040] 
0x51011a3e  # add [ecx+0x33], edx; dec [ecx+0x16EBDC7D]; push [ebp-0x34]; push [ebp-0x38]; push [ebp-0x3C]; call [0x51017048] 
0x51011a54  # add [ecx+0x50], edx; call [0x510171D0]; push [0x5101BF10]; call [0x51017034] 
0x51011a54  # add [ecx+0x50], edx; call [0x510171D0] 
0x51015abd  # add [ecx+0x50], edx; call [0x510170E8] 
0x510110d1  # add [ecx+0x50], edx; call esi; push 0x51018CE8; push [0x510207F8]; mov [0x51020738], eax; call esi 
0x5101227c  # add [ecx+0x53], edx; call esi 
0x51013aad  # add [ecx+0x56], edx; call [0x51017040] 
0x5101109b  # add [ecx+0x57], edx; push 0x00008000; call esi; push 0x51018D08; mov edi, eax; call [0x51017068] 
0x5101109b  # add [ecx+0x57], edx; push 0x00008000; call esi 
0x510110b0  # add [ecx+0x57], edx; mov [0x510207F8], eax; call esi 
0x510110cc  # add [ecx+0x68], edx; clc; mov word [ecx], es; push ecx; push eax; call esi 
0x51011a22  # add [ecx+0x6A], edx; add [ebx], esi; rcl byte [eax+0x50], 0x50; lea eax, [ebp-0x40]; push eax; call ebx 
0x51010495  # add [ecx+0x75], edx; or ch, al; xor eax, 0xA3FFFFFF; add al, 0xFD; add [ecx+0x3B], edx; ret 
0x510155a2  # add [ecx+0x7C], edx; into; pop edi; xor eax, eax; pop esi; ret 
0x5101215c  # add [ecx-0x7D], edx; les edx, [eax]; push 0x00000010; call [0x510171DC] 
0x510156de  # add [ecx-0x7D], edx; enter 0x3301, 0xC9; cmp [0x51020894], eax; sete cl; mov eax, ecx; ret 
0x51011aac  # add [ecx-0x7D], edx; loopne 0x51011AAD; push eax; push [0x5101BF10]; call [0x51017030] 
0x51010ffd  # add [ecx-0x7D], edx; clc; add [eax+esi*8-0x7D], edi; cmp eax, 0x5101BF10; push [ebp+0x0B]; call [0x510170D0] 
0x510113f9  # add [ecx-0x7D], edx; clc; add [eax+esi*8-0x01], edi; jne 0x5101140F; push [ebp+0x08]; call [0x5102073C] 
0x51012181  # add [ecx-0x7D], edx; clc; add dh, byte [ebp+0x0B]; push 0x00000001; call [0x51017120] 
0x5101104e  # add [ecx-0x7D], edx; clc; push [ecx+ecx+0x6A]; add byte [eax-0x01], dl; adc eax, 0x51017030; jmp [0x51020700] 
0x51011d4a  # add [ecx-0x7D], edx; clc; push [ebp+0x03]; xor eax, eax; ret 
0x5101285d  # add [ecx-0x7B], edx; sal byte [edi+edx*8-0x01], 0x75; mov byte [ebx+0x0170001D], cl; push ecx; call ebx 
0x510125e3  # add [ecx-0x7B], edx; sal byte [ebp+0x16], 0x8D; inc ebp; lock push eax; push [ebp-0x14]; call [0x5101700C] 
0x51015a8a  # add [ecx-0x7B], edx; sal byte [ebp+0x67], 0x83; cmp eax, 0x5101F970; add dh, byte [ebp-0x26]; call [0x510170FC] 
0x51011425  # add [ecx-0x7B], edx; sar byte [edi+0x04], 0x33; shr bl, 0x16; push esi; call [0x51017020] 
0x51014ae0  # add [ecx-0x77], edx; inc ebp; clc; cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x51011bd1  # add [ecx-0x75], edx; inc ebp; or al, 0x33; fstp tword [ebx]; ret 
0x51011e6a  # add [ecx-0x75], edx; inc ebp; mov ah, 0x3B; ret 
0x5101522c  # add [ecx-0x75], edx; fdivr [ebx]; fimul word [edi]; test byte [edi+0x6A000000], dl; add byte [ebp-0x001AD37B], cl; call [eax-0x75] 
0x510110a8  # add [ecx-0x75], edx; clc; call [0x51017068]; push edi; mov [0x510207F8], eax; call esi 
0x510110a8  # add [ecx-0x75], edx; clc; call [0x51017068] 
0x51013c5e  # add [ecx-0x75], edx; call [ebp-0x75] 
0x51012811  # add [ecx-0x73], edx; test [eax+eax+0x74500000], ecx; pop ss; push 0x80000001; call esi 
0x51012a15  # add [ecx-0x73], edx; test [eax+0x50000000], ebx; call ebx 
0x51013ba8  # add [ecx-0x73], edx; test [eax+eax+0x57500000], ebp; call esi 
0x51011011  # add [ecx-0x5D], edx; adc byte [edi+0x75FF5101], bh; sar bh, 1; jne 0x51011096; call [0x510206FC] 
0x51011915  # add [ecx-0x58], edx; add [ebp+ecx+0x68], esi; xor al, 0x27; add byte [eax], al; call [0x51020704] 
0x510114f7  # add [ecx-0x58], edx; add [eax+edx-0x7D], esi; enter 0x5002, 0xFF; xor eax, 0x5101BF10; call [0x51017030] 
0x51014a90  # add [ecx-0x4F], edx; inc ecx; add [ecx-0x21], edx; inc edx; add [ecx-0x75], edx; call [ebp-0x75] 
0x510103bc  # add [ecx-0x3F], edx; clc; add dh, bh; fcomp [esi+0x5D]; ret 
0x51014a94  # add [ecx-0x21], edx; inc edx; add [ecx-0x75], edx; call [ebp-0x75] 
0x510105a4  # add [ecx-0x18], edx; and byte [ecx-0x3B7C0001], bl; or al, 0x3B; ret 
0x51011d94  # add [ecx-0x01], edx; adc eax, 0x51017030; xor eax, eax; ret 
0x51011aa6  # add [ecx-0x01], edx; adc eax, 0x51017034; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51015e77  # add [ecx-0x01], edx; adc eax, 0x51017084; mov [0x5101F978], eax; ret 
0x51011a5b  # add [ecx-0x01], edx; xor eax, 0x5101BF10; call [0x51017034] 
0x51010f08  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020700], eax; call esi 
0x51010f1a  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020704], eax; call esi 
0x51010f2c  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020708], eax; call esi 
0x51010f3e  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x5102070C], eax; call esi 
0x51010f50  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020710], eax; call esi 
0x51010f62  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020714], eax; call esi 
0x51010f74  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020718], eax; call esi 
0x51010f98  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020720], eax; call esi 
0x51010faa  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020724], eax; call esi 
0x51010fbc  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020728], eax; call esi 
0x51010ee4  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x5102072C], eax; call esi 
0x51010fce  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020730], eax; call esi 
0x51010fe0  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020734], eax; call esi 
0x51010e30  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206D4], eax; call esi 
0x51010e42  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206D8], eax; call esi 
0x51010e54  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206DC], eax; call esi 
0x51010e66  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206E0], eax; call esi 
0x51010e78  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206E4], eax; call esi 
0x51010e8a  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206E8], eax; call esi 
0x51010e9c  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206EC], eax; call esi 
0x51010eae  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206F0], eax; call esi 
0x51010ec0  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206F4], eax; call esi 
0x51010ed2  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206F8], eax; call esi 
0x51010ef6  # add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x510206FC], eax; call esi 
0x51010e23  # add [ecx-0x01], edx; xor eax, 0x510207F4; call esi 
0x510110d9  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020738], eax; call esi 
0x510110eb  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102073C], eax; call esi 
0x510110fd  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020740], eax; call esi 
0x5101110f  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020744], eax; call esi 
0x51011121  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020748], eax; call esi 
0x51011133  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102074C], eax; call esi 
0x51011145  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020750], eax; call esi 
0x51011157  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020754], eax; call esi 
0x5101117b  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020758], eax; call esi 
0x5101118d  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102075C], eax; call esi 
0x5101119f  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020760], eax; call esi 
0x510111b1  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020764], eax; call esi 
0x510111c3  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020768], eax; call esi 
0x510111d5  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102076C], eax; call esi 
0x510111e7  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020770], eax; call esi 
0x510111f9  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020774], eax; call esi 
0x5101121d  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102077C], eax; call esi 
0x51011241  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020784], eax; call esi 
0x51011253  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020788], eax; call esi 
0x51011265  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102078C], eax; call esi 
0x51011277  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020790], eax; call esi 
0x51011289  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020794], eax; call esi 
0x5101129b  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020798], eax; call esi 
0x510112ad  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102079C], eax; call esi 
0x510112bf  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207A0], eax; call esi 
0x510112d1  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207A4], eax; call esi 
0x51011169  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510208A4], eax; call esi 
0x510112e3  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207A8], eax; call esi 
0x510112f5  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207AC], eax; call esi 
0x51011307  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207B0], eax; call esi 
0x51011319  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207B4], eax; call esi 
0x5101132b  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207C8], eax; call esi 
0x5101133d  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207CC], eax; call esi 
0x5101134f  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207D0], eax; call esi 
0x51011361  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207D4], eax; call esi 
0x51011373  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207D8], eax; call esi 
0x51011385  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207DC], eax; call esi 
0x510113a9  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207E4], eax; call esi 
0x510113bb  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207E8], eax; call esi 
0x510113cd  # add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207EC], eax; call esi 
0x51011234  # add [ecx-0x01], edx; xor eax, 0x510207F8; call esi 
0x51011008  # add [ecx-0x01], edx; jne 0x51011018; call [0x510170D0] 
0x510128b1  # add [ecx-0x01], edx; jne 0x5101283E; mov esi, eax; call ebx 
0x51012b84  # add [ecx-0x01], edx; jne 0x51012B1D; test eax, eax; je 0x51012BA1; call [0x51017000] 
0x51011016  # add [ecx-0x01], edx; jne 0x51010FEB; push [ebp+0x78]; call [0x510206FC] 
0x510125f4  # add [ecx-0x01], edx; jne 0x510125E5; call [0x51017000] 
0x51011d43  # add [ecx-0x01], edx; loopne 0x51011CE9; adc byte [edi-0x077CAEFF], bh; push [ebp+0x03]; xor eax, eax; ret 
0x51015c03  # add [esi+0x6A], edx; or edi, edi; jo 0x51015C0E; call [0x510170F0] 
0x51011918  # add [ebp+ecx+0x68], esi; xor al, 0x27; add byte [eax], al; call [0x51020704] 
0x510114fa  # add [eax+edx-0x7D], esi; enter 0x5002, 0xFF; xor eax, 0x5101BF10; call [0x51017030] 
0x5101071b  # add [ebp+0x58], esi; lea eax, [ebp-0x18]; push eax; push [ebp+0x0C]; call esi 
0x51011001  # add [eax+esi*8-0x7D], edi; cmp eax, 0x5101BF10; push [ebp+0x0B]; call [0x510170D0] 
0x510113fd  # add [eax+esi*8-0x01], edi; jne 0x5101140F; push [ebp+0x08]; call [0x5102073C] 
0x51015ab3  # add [ebp+0x56500845], ecx; call [0x510170AC]; push eax; call [0x510170E8] 
0x51015ab3  # add [ebp+0x56500845], ecx; call [0x510170AC] 
0x51012296  # add [ebp-0x00AFCFBB], ecx; jne 0x5101224A; call [0x51017004] 
0x51012a2a  # add [ebp-0x00AF67BB], ecx; jne 0x510129C6; call [0x51017004] 
0x51015a80  # add [ebp+0x5051084D], ecx; call [0x510170A8] 
0x51015804  # add [ebp+0x5351144D], ecx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x510170E8] 
0x51014e59  # add [ebp-0x001ABF73], ecx; call [ecx+0x50]; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x510170E8] 
0x51014e59  # add [ebp-0x001ABF73], ecx; call [ecx+0x50] 
0x5101077f  # add edi, edi; jne 0x5101078B; call ebx 
0x51015ef3  # add al, byte [eax]; add byte [esi-0x18], dl; lodsd; idiv edi; call [eax-0x18] 
0x510129ac  # add al, byte [eax]; add byte [edi+0x50], dl; test bl, 0x01; je 0x51012B38; push 0x80000001; call [0x51017014] 
0x51012e32  # add al, byte [eax]; add byte [edi+0x50], dl; test bl, 0x01; je 0x51012E55; push 0x80000001; call [0x51017018] 
0x51014425  # add al, byte [eax]; add byte [ebp-0x00020B7B], cl; call [eax-0x73] 
0x510124ab  # add al, byte [eax]; push 0x00000000; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x51017018] 
0x51013813  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0014 
0x510137b3  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; retn 0x000C 
0x5101611b  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5D; ret 
0x510114b2  # add dh, byte [ebx]; ror byte [ebx-0x32CC03B3], 0xE8; or [edi-0x01], ebp; dec ecx; ret 
0x510160eb  # add dh, byte [ebx]; call [esi-0x18] 
0x51011779  # add al, byte [edx-0x75]; retn 0x4848 
0x51011d8e  # add dl, byte [eax-0x01]; xor eax, 0x5101BF10; call [0x51017030]; xor eax, eax; ret 
0x510114ff  # add dl, byte [eax-0x01]; xor eax, 0x5101BF10; call [0x51017030] 
0x51011552  # add dl, byte [ecx+0x00]; push esi; je 0x51011568; push esi; call [0x5102068C] 
0x51011ce3  # add dl, byte [ecx+0x00]; je 0x51011CFB; push [esp+0x04]; push [esp+0x08]; call eax 
0x5101155d  # add dl, byte [ecx+0x50]; call [0x51020760] 
0x51013c19  # add dl, byte [ecx+0x53]; push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x5101141c  # add dl, byte [ecx+0x56]; xor edi, edi; call [0x510170E4] 
0x51011812  # add dl, byte [ecx+0x56]; call [0x510171F4] 
0x5101156c  # add dl, byte [ecx+0x5E]; leave; retn 0x0004 
0x51010e1e  # add dl, byte [ecx+0x68]; and al, 0x89; add [ecx-0x01], edx; xor eax, 0x510207F4; call esi 
0x51011397  # add dl, byte [ecx+0x68]; xor al, 0x8A; add [ecx-0x01], edx; xor eax, 0x510207F8; call esi 
0x51010f86  # add dl, byte [ecx+0x68]; enter 0x0187, 0x51; push [0x510207F4]; call esi 
0x510154b7  # add dl, byte [ecx+0x72]; sbb al, 0xE8; lock je 0x510154BE; call [esi+0x56] 
0x51011543  # add dl, byte [ecx-0x7B]; sal byte [ebp+eax+0x6A], 0x01; push esi; call eax 
0x510113e4  # add dl, byte [ecx-0x7B]; sal byte [esi+eax-0x73], 0x4D; clc; push ecx; call eax 
0x510114e3  # add dl, byte [ecx-0x7B]; sal byte [ebp+0x68], 0x6D; daa; add byte [eax], al; call eax 
0x5101144b  # add dl, byte [ecx-0x7B]; sal byte [ebp+0x03], 0xC2; or al, 0x00; jmp eax 
0x51011ca0  # add dl, byte [ecx-0x7B]; sal byte [ebp+0x04], 0x5D; retn 0x000C 
0x5101553f  # add dl, byte [ecx-0x7B]; sal byte [ebp+0x05], 0x6A; sbb bl, byte [eax+0x5E]; ret 
0x51011d28  # add dl, byte [ecx-0x7B]; sal byte [ebp+0x06], 0xFF; and eax, 0x5101702C; jmp eax 
0x51011d39  # add dl, byte [ecx-0x7B]; sal byte [ebp+0x06], 0xFF; and eax, 0x510170FC; jmp eax 
0x51011a85  # add dl, byte [ecx-0x77]; inc ebp; in al, dx; cmp eax, 0xFFFFFFFF; jne 0x51011A98; call [0x51020708] 
0x51015c8d  # add dl, byte [ecx-0x75]; add al, 0x06; add eax, 0x20; push eax; call [0x51017078] 
0x510159f3  # add dl, byte [ecx-0x73]; inc esp; cmp byte [eax+edx*2], cl; call [0x51017024] 
0x510118bf  # add dl, byte [ecx-0x5F]; test byte [edi], al; add dl, byte [ecx+0x3B]; ret 
0x5101116f  # add dl, byte [ecx-0x5D]; movsb; or byte [edx], al; push ecx; call esi 
0x51011331  # add dl, byte [ecx-0x5D]; enter 0x0207, 0x51; call esi 
0x51011417  # add dl, byte [ecx-0x42]; add byte [eax], cl; add dl, byte [ecx+0x56]; xor edi, edi; call [0x510170E4] 
0x51015a2c  # add dl, byte [ecx-0x3F]; loopne 0x51015A37; lea eax, [ecx+eax+0x0C]; push eax; call [0x51017028] 
0x510114af  # add dl, byte [ecx-0x15]; add dh, byte [ebx]; ror byte [ebx-0x32CC03B3], 0xE8; or [edi-0x01], ebp; dec ecx; ret 
0x51011564  # add dl, byte [ecx-0x15]; push es; call [0x5102068C]; pop esi; leave; retn 0x0004 
0x51011564  # add dl, byte [ecx-0x15]; push es; call [0x5102068C] 
0x510115a8  # add dl, byte [ecx-0x15]; salc; pop ebp; jmp eax 
0x5101103b  # add dl, byte [ecx-0x01]; adc eax, 0x51017020; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x51010e4d  # add dl, byte [ecx-0x01]; salc; push 0x51018900; push [0x510207F4]; mov [0x510206DC], eax; call esi 
0x510113b4  # add dl, byte [ecx-0x01]; salc; push 0x51018A08; push [0x510207F8]; mov [0x510207E8], eax; call esi 
0x510111ce  # add dl, byte [ecx-0x01]; salc; push 0x51018C0C; push [0x510207F8]; mov [0x5102076C], eax; call esi 
0x51010e3b  # add dl, byte [ecx-0x01]; salc; push 0x51018910; push [0x510207F4]; mov [0x510206D8], eax; call esi 
0x51010f49  # add dl, byte [ecx-0x01]; salc; push 0x51018814; push [0x510207F4]; mov [0x51020710], eax; call esi 
0x51010e29  # add dl, byte [ecx-0x01]; salc; push 0x51018918; push [0x510207F4]; mov [0x510206D4], eax; call esi 
0x510111bc  # add dl, byte [ecx-0x01]; salc; push 0x51018C1C; push [0x510207F8]; mov [0x51020768], eax; call esi 
0x510113a2  # add dl, byte [ecx-0x01]; salc; push 0x51018A20; push [0x510207F8]; mov [0x510207E4], eax; call esi 
0x510112ee  # add dl, byte [ecx-0x01]; salc; push 0x51018B20; push [0x510207F8]; mov [0x510207AC], eax; call esi 
0x51010f37  # add dl, byte [ecx-0x01]; salc; push 0x5101882C; push [0x510207F4]; mov [0x5102070C], eax; call esi 
0x510111aa  # add dl, byte [ecx-0x01]; salc; push 0x51018C2C; push [0x510207F8]; mov [0x51020764], eax; call esi 
0x51010e05  # add dl, byte [ecx-0x01]; salc; push 0x51018930; push [0x510207F4]; mov [0x510206CC], eax; call esi 
0x510112dc  # add dl, byte [ecx-0x01]; salc; push 0x51018B34; push [0x510207F8]; mov [0x510207A8], eax; call esi 
0x51011198  # add dl, byte [ecx-0x01]; salc; push 0x51018C3C; push [0x510207F8]; mov [0x51020760], eax; call esi 
0x51010f25  # add dl, byte [ecx-0x01]; salc; push 0x51018844; push [0x510207F4]; mov [0x51020708], eax; call esi 
0x5101137e  # add dl, byte [ecx-0x01]; salc; push 0x51018A48; push [0x510207F8]; mov [0x510207DC], eax; call esi 
0x510112ca  # add dl, byte [ecx-0x01]; salc; push 0x51018B48; push [0x510207F8]; mov [0x510207A4], eax; call esi 
0x51011186  # add dl, byte [ecx-0x01]; salc; push 0x51018C48; push [0x510207F8]; mov [0x5102075C], eax; call esi 
0x51011174  # add dl, byte [ecx-0x01]; salc; push 0x51018C58; push [0x510207F8]; mov [0x51020758], eax; call esi 
0x51010f13  # add dl, byte [ecx-0x01]; salc; push 0x5101885C; push [0x510207F4]; mov [0x51020704], eax; call esi 
0x510112b8  # add dl, byte [ecx-0x01]; salc; push 0x51018B5C; push [0x510207F8]; mov [0x510207A0], eax; call esi 
0x51011162  # add dl, byte [ecx-0x01]; salc; push 0x51018C60; push [0x510207F8]; mov [0x510208A4], eax; call esi 
0x5101136c  # add dl, byte [ecx-0x01]; salc; push 0x51018A64; push [0x510207F8]; mov [0x510207D8], eax; call esi 
0x51010fd9  # add dl, byte [ecx-0x01]; salc; push 0x5101876C; push [0x510207F4]; mov [0x51020734], eax; call esi 
0x51010f01  # add dl, byte [ecx-0x01]; salc; push 0x5101886C; push [0x510207F4]; mov [0x51020700], eax; call esi 
0x510112a6  # add dl, byte [ecx-0x01]; salc; push 0x51018B6C; push [0x510207F8]; mov [0x5102079C], eax; call esi 
0x51011150  # add dl, byte [ecx-0x01]; salc; push 0x51018C6C; push [0x510207F8]; mov [0x51020754], eax; call esi 
0x51010fc7  # add dl, byte [ecx-0x01]; salc; push 0x51018778; push [0x510207F4]; mov [0x51020730], eax; call esi 
0x51010eef  # add dl, byte [ecx-0x01]; salc; push 0x5101887C; push [0x510207F4]; mov [0x510206FC], eax; call esi 
0x5101113e  # add dl, byte [ecx-0x01]; salc; push 0x51018C7C; push [0x510207F8]; mov [0x51020750], eax; call esi 
0x5101135a  # add dl, byte [ecx-0x01]; salc; push 0x51018A80; push [0x510207F8]; mov [0x510207D4], eax; call esi 
0x51011294  # add dl, byte [ecx-0x01]; salc; push 0x51018B80; push [0x510207F8]; mov [0x51020798], eax; call esi 
0x51010edd  # add dl, byte [ecx-0x01]; salc; push 0x51018888; push [0x510207F4]; mov [0x5102072C], eax; call esi 
0x51010fb5  # add dl, byte [ecx-0x01]; salc; push 0x51018790; push [0x510207F4]; mov [0x51020728], eax; call esi 
0x5101112c  # add dl, byte [ecx-0x01]; salc; push 0x51018C90; push [0x510207F8]; mov [0x5102074C], eax; call esi 
0x51010ecb  # add dl, byte [ecx-0x01]; salc; push 0x51018894; push [0x510207F4]; mov [0x510206F8], eax; call esi 
0x51011282  # add dl, byte [ecx-0x01]; salc; push 0x51018B94; push [0x510207F8]; mov [0x51020794], eax; call esi 
0x51011348  # add dl, byte [ecx-0x01]; salc; push 0x51018A9C; push [0x510207F8]; mov [0x510207D0], eax; call esi 
0x51010fa3  # add dl, byte [ecx-0x01]; salc; push 0x510187A0; push [0x510207F4]; mov [0x51020724], eax; call esi 
0x51010eb9  # add dl, byte [ecx-0x01]; salc; push 0x510188A0; push [0x510207F4]; mov [0x510206F4], eax; call esi 
0x51011270  # add dl, byte [ecx-0x01]; salc; push 0x51018BA0; push [0x510207F8]; mov [0x51020790], eax; call esi 
0x5101111a  # add dl, byte [ecx-0x01]; salc; push 0x51018CA4; push [0x510207F8]; mov [0x51020748], eax; call esi 
0x5101125e  # add dl, byte [ecx-0x01]; salc; push 0x51018BAC; push [0x510207F8]; mov [0x5102078C], eax; call esi 
0x51010f91  # add dl, byte [ecx-0x01]; salc; push 0x510187B0; push [0x510207F4]; mov [0x51020720], eax; call esi 
0x51010ea7  # add dl, byte [ecx-0x01]; salc; push 0x510188B0; push [0x510207F4]; mov [0x510206F0], eax; call esi 
0x51011108  # add dl, byte [ecx-0x01]; salc; push 0x51018CB4; push [0x510207F8]; mov [0x51020744], eax; call esi 
0x51011336  # add dl, byte [ecx-0x01]; salc; push 0x51018AB8; push [0x510207F8]; mov [0x510207CC], eax; call esi 
0x5101124c  # add dl, byte [ecx-0x01]; salc; push 0x51018BBC; push [0x510207F8]; mov [0x51020788], eax; call esi 
0x51010e95  # add dl, byte [ecx-0x01]; salc; push 0x510188C4; push [0x510207F4]; mov [0x510206EC], eax; call esi 
0x510110f6  # add dl, byte [ecx-0x01]; salc; push 0x51018CC4; push [0x510207F8]; mov [0x51020740], eax; call esi 
0x5101123a  # add dl, byte [ecx-0x01]; salc; push 0x51018BC8; push [0x510207F8]; mov [0x51020784], eax; call esi 
0x51010e83  # add dl, byte [ecx-0x01]; salc; push 0x510188D4; push [0x510207F4]; mov [0x510206E8], eax; call esi 
0x51011324  # add dl, byte [ecx-0x01]; salc; push 0x51018AD4; push [0x510207F8]; mov [0x510207C8], eax; call esi 
0x510110e4  # add dl, byte [ecx-0x01]; salc; push 0x51018CD8; push [0x510207F8]; mov [0x5102073C], eax; call esi 
0x51011216  # add dl, byte [ecx-0x01]; salc; push 0x51018BDC; push [0x510207F8]; mov [0x5102077C], eax; call esi 
0x51010f6d  # add dl, byte [ecx-0x01]; salc; push 0x510187E0; push [0x510207F4]; mov [0x51020718], eax; call esi 
0x51010e71  # add dl, byte [ecx-0x01]; salc; push 0x510188E4; push [0x510207F4]; mov [0x510206E4], eax; call esi 
0x51011204  # add dl, byte [ecx-0x01]; salc; push 0x51018BE8; push [0x510207F8]; mov [0x51020778], eax; call esi 
0x51010e5f  # add dl, byte [ecx-0x01]; salc; push 0x510188F0; push [0x510207F4]; mov [0x510206E0], eax; call esi 
0x51011312  # add dl, byte [ecx-0x01]; salc; push 0x51018AF0; push [0x510207F8]; mov [0x510207B4], eax; call esi 
0x510111f2  # add dl, byte [ecx-0x01]; salc; push 0x51018BF0; push [0x510207F8]; mov [0x51020774], eax; call esi 
0x51010f5b  # add dl, byte [ecx-0x01]; salc; push 0x510187F8; push [0x510207F4]; mov [0x51020714], eax; call esi 
0x510113c6  # add dl, byte [ecx-0x01]; salc; push 0x510189FC; push [0x510207F8]; mov [0x510207EC], eax; call esi 
0x510111e0  # add dl, byte [ecx-0x01]; salc; push 0x51018BFC; push [0x510207F8]; mov [0x51020770], eax; call esi 
0x51010f7f  # add dl, byte [ecx-0x01]; salc; mov [0x5102071C], eax; push 0x510187C8; push [0x510207F4]; call esi 
0x51011228  # add dl, byte [ecx-0x01]; salc; mov [0x51020780], eax; push 0x51018BD0; push [0x510207F8]; call esi 
0x51010feb  # add dl, byte [ecx-0x01]; salc; mov [0x510208A0], eax; push 0x510207FC; call [0x510170C8] 
0x51010e17  # add dl, byte [ecx-0x01]; salc; mov [0x510206D0], eax; push 0x51018924; push [0x510207F4]; call esi 
0x51011390  # add dl, byte [ecx-0x01]; salc; mov [0x510207E0], eax; push 0x51018A34; push [0x510207F8]; call esi 
0x51012185  # add dh, byte [ebp+0x0B]; push 0x00000001; call [0x51017120] 
0x51015a96  # add dh, byte [ebp-0x26]; call [0x510170FC] 
0x51011e10  # add cl, byte [eax+0x74F33B1F]; push esi; call [0x51017040] 
0x51012c1c  # add cl, byte [ecx+0x40C03306]; pop esi; retn 0x000C 
0x51011bed  # add cl, byte [ecx+0x2714681E]; add byte [eax], al; call [0x51020704] 
0x51011be4  # add cl, byte [ecx+0x14758B1F]; cmp esi, ebx; je 0x51011BF0; mov [esi], ebx; push 0x00002714; call [0x51020704] 
0x51014e10  # add cl, byte [ebp-0x001ABF7B]; call [ebx+0x50] 
0x510103c0  # add dh, bh; fcomp [esi+0x5D]; ret 
0x510110c5  # add eax, [eax]; add byte [ebx+0x01706435], cl; push ecx; push 0x51018CF8; push eax; call esi 
0x51011094  # add eax, [eax]; add byte [ebx+0x01706C35], cl; push ecx; push edi; push 0x00008000; call esi 
0x5101303c  # add ecx, [ecx]; add byte [eax], al; test eax, eax; je 0x51013052; push [ebp-0x64]; call [0x51017000] 
0x51013e88  # add ecx, [ecx]; push es; ret 
0x51012ac5  # add ecx, [esi]; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x51011d50  # add esi, [ebx]; rol bl, 0x50; call [0x51017034]; movzx eax, al; and eax, 0x01; ret 
0x51011d50  # add esi, [ebx]; rol bl, 0x50; call [0x51017034] 
0x51013ac1  # add ecx, [ecx-0x01]; dec ecx; retn 0x000C 
0x51015e6b  # add edx, [eax+0x6A]; add ebp, [eax+0x00]; add byte [eax], al; inc eax; push 0x51018DEC; call [0x51017084] 
0x51015eac  # add edx, [eax-0x01]; salc; pop esi; ret 
0x51015e6e  # add ebp, [eax+0x00]; add byte [eax], al; inc eax; push 0x51018DEC; call [0x51017084] 
0x510117d0  # add eax, [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0004 
0x510156d4  # add ecx, [ebx+0x5D5E1040]; ret 
0x51011450  # add eax, edx; or al, 0x00; jmp eax 
0x51015c81  # add edi, edi; inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x51011531  # add al, 0x00; add byte [eax], al; call eax 
0x51011cdd  # add al, 0x00; cmp [0x510207A0], 0x00000000; je 0x51011CFB; push [esp+0x04]; push [esp+0x08]; call eax 
0x5101548a  # add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x51011682  # add al, 0x00; jmp eax 
0x51015c90  # add al, 0x06; add eax, 0x20; push eax; call [0x51017078] 
0x510114e1  # add al, 0x07; add dl, byte [ecx-0x7B]; sal byte [ebp+0x68], 0x6D; daa; add byte [eax], al; call eax 
0x51011d26  # add al, 0x07; add dl, byte [ecx-0x7B]; sal byte [ebp+0x06], 0xFF; and eax, 0x5101702C; jmp eax 
0x510118bd  # add al, 0x07; add dl, byte [ecx-0x5F]; test byte [edi], al; add dl, byte [ecx+0x3B]; ret 
0x51010691  # add al, 0x10; add byte [eax], al; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x510171B0] 
0x5101142a  # add al, 0x33; shr bl, 0x16; push esi; call [0x51017020] 
0x5101406f  # add al, 0x59; mov [ebp-0x0000026C], eax; cmp eax, ecx; ja 0x51014A2C; jmp [0x51014A7A+eax*4] 
0x51011ca5  # add al, 0x5D; retn 0x000C 
0x5101621c  # add al, 0x5E; pop ebp; ret 
0x51012b82  # add al, 0x70; add [ecx-0x01], edx; jne 0x51012B1D; test eax, eax; je 0x51012BA1; call [0x51017000] 
0x51011929  # add al, 0x74; adc eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x510206C8] 
0x510118f0  # add al, 0x75; sbb eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x510154ed  # add al, 0x83; loopne 0x51015531; pop esi; pop ebp; ret 
0x510159ef  # add al, 0x85; add byte [ecx], bl; add dl, byte [ecx-0x73]; inc esp; cmp byte [eax+edx*2], cl; call [0x51017024] 
0x5101049f  # add al, 0xFD; add [ecx+0x3B], edx; ret 
0x510103ba  # add al, 0xFD; add [ecx-0x3F], edx; clc; add dh, bh; fcomp [esi+0x5D]; ret 
0x510105a2  # add al, 0xFD; add [ecx-0x18], edx; and byte [ecx-0x3B7C0001], bl; or al, 0x3B; ret 
0x5101143e  # add al, 0xFF; ror byte [ebx+0x5FC78BF8], 1; pop esi; ret 
0x510103b9  # add eax, 0x5101FD04; sar eax, 0x02; neg eax; pop esi; pop ebp; ret 
0x51015b25  # add eax, 0x8966C933; or byte [ebx], dh; rcr byte [esi+0x5B], 0xC9; ret 
0x51013736  # add eax, 0xF8CE834E; inc esi; and [eax], 0x00000000; push edi; call [0x51017040] 
0x510121ff  # add eax, 0x00000068; cmp bh, 0xD6; push [ebp-0x54]; mov edi, [0x51017000]; mov [ebp-0x58], eax; call edi 
0x51015544  # add eax, 0x5E581A6A; ret 
0x510159e7  # add eax, 0xC11FE783; out 0x06, eax; mov eax, [0x51021900+eax*4]; lea eax, [eax+edi+0x0C]; push eax; call [0x51017024] 
0x51015aad  # add eax, 0x50F4458D; push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x510170AC] 
0x510156e6  # add eax, 0x51020894; sete cl; mov eax, ecx; ret 
0x510143a0  # add eax, 0xFFFFFFB9; jnle 0x5101432A; mov [edi+esi*8], 0xFFFDF085; call [eax] 
0x510136fc  # push es; add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x5101380f  # push es; add byte [eax-0x15], al; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0014 
0x5101155c  # push es; add dl, byte [ecx+0x50]; call [0x51020760] 
0x51011811  # push es; add dl, byte [ecx+0x56]; call [0x510171F4] 
0x5101156b  # push es; add dl, byte [ecx+0x5E]; leave; retn 0x0004 
0x51010e1d  # push es; add dl, byte [ecx+0x68]; and al, 0x89; add [ecx-0x01], edx; xor eax, 0x510207F4; call esi 
0x51011542  # push es; add dl, byte [ecx-0x7B]; sal byte [ebp+eax+0x6A], 0x01; push esi; call eax 
0x51011c9f  # push es; add dl, byte [ecx-0x7B]; sal byte [ebp+0x04], 0x5D; retn 0x000C 
0x510154e8  # push es; movsx eax, byte [ecx+eax+0x04]; and eax, 0x40; pop esi; pop ebp; ret 
0x51012c1e  # push es; xor eax, eax; inc eax; pop esi; retn 0x000C 
0x51015d34  # push es; pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x51013eab  # push es; cmp [ebp+0x0C], 0x00000000; jnle 0x51013E99; pop esi; pop ebp; ret 
0x51015c91  # push es; add eax, 0x20; push eax; call [0x51017078] 
0x510115b7  # push es; or eax, 0xFFFFFFFF; retn 0x000C 
0x51016216  # push es; mov [esi+0x08], eax; mov [esi+0x04], eax; pop esi; pop ebp; ret 
0x510159ed  # push es; mov eax, [0x51021900+eax*4]; lea eax, [eax+edi+0x0C]; push eax; call [0x51017024] 
0x51010425  # push es; mov eax, [ebp-0x04]; pop esi; pop edi; leave; ret 
0x51015a30  # push es; lea eax, [ecx+eax+0x0C]; push eax; call [0x51017028]; pop ebp; ret 
0x51015a30  # push es; lea eax, [ecx+eax+0x0C]; push eax; call [0x51017028] 
0x510113e9  # push es; lea ecx, [ebp-0x08]; push ecx; call eax; push 0x51020800; call [0x510170C8] 
0x510113e9  # push es; lea ecx, [ebp-0x08]; push ecx; call eax 
0x51013e8a  # push es; ret 
0x51011567  # push es; call [0x5102068C]; pop esi; leave; retn 0x0004 
0x51011567  # push es; call [0x5102068C] 
0x51011d2d  # push es; jmp [0x5101702C] 
0x51011d3e  # push es; jmp [0x510170FC] 
0x51014d55  # push es; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x510170B8] 
0x5101507b  # push es; push [edi+eax]; call [0x51017194] 
0x51011822  # push es; push [esp+0x04]; call eax; retn 0x0004 
0x51011822  # push es; push [esp+0x04]; call eax 
0x51011551  # pop es; add dl, byte [ecx+0x00]; push esi; je 0x51011568; push esi; call [0x5102068C] 
0x51011ce2  # pop es; add dl, byte [ecx+0x00]; je 0x51011CFB; push [esp+0x04]; push [esp+0x08]; call eax 
0x510118c3  # pop es; add dl, byte [ecx+0x3B]; ret 
0x51011396  # pop es; add dl, byte [ecx+0x68]; xor al, 0x8A; add [ecx-0x01], edx; xor eax, 0x510207F8; call esi 
0x51010f85  # pop es; add dl, byte [ecx+0x68]; enter 0x0187, 0x51; push [0x510207F4]; call esi 
0x510113e3  # pop es; add dl, byte [ecx-0x7B]; sal byte [esi+eax-0x73], 0x4D; clc; push ecx; call eax 
0x510114e2  # pop es; add dl, byte [ecx-0x7B]; sal byte [ebp+0x68], 0x6D; daa; add byte [eax], al; call eax 
0x51011d27  # pop es; add dl, byte [ecx-0x7B]; sal byte [ebp+0x06], 0xFF; and eax, 0x5101702C; jmp eax 
0x51011d38  # pop es; add dl, byte [ecx-0x7B]; sal byte [ebp+0x06], 0xFF; and eax, 0x510170FC; jmp eax 
0x510118be  # pop es; add dl, byte [ecx-0x5F]; test byte [edi], al; add dl, byte [ecx+0x3B]; ret 
0x5101116e  # pop es; add dl, byte [ecx-0x5D]; movsb; or byte [edx], al; push ecx; call esi 
0x51011330  # pop es; add dl, byte [ecx-0x5D]; enter 0x0207, 0x51; call esi 
0x51011563  # pop es; add dl, byte [ecx-0x15]; push es; call [0x5102068C] 
0x510115a7  # pop es; add dl, byte [ecx-0x15]; salc; pop ebp; jmp eax 
0x51010fea  # pop es; add dl, byte [ecx-0x01]; salc; mov [0x510208A0], eax; push 0x510207FC; call [0x510170C8] 
0x5101157e  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x000C 
0x51011837  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x0010 
0x51011607  # pop es; or eax, 0xFFFFFFFF; pop ebp; retn 0x0014 
0x51014d58  # pop es; mov [ebp-0x00001AE0], ecx; call [0x510170B8] 
0x51014e97  # pop es; call [0x51017194] 
0x510141f0  # or byte [eax], al; add byte [ebx-0x00020F73], al; call [eax] 
0x510141fc  # or byte [eax], al; add byte [ebx-0x00020F73], al; jmp [eax] 
0x51013efa  # or byte [eax], al; jnle 0x51013ED3; pop esi; pop ebx; pop ebp; ret 
0x510128d9  # or byte [eax], al; push [ebp-0x78]; call [0x51017000] 
0x510156e8  # or byte [edx], al; push ecx; sete cl; mov eax, ecx; ret 
0x5101141b  # or byte [edx], al; push ecx; push esi; xor edi, edi; call [0x510170E4] 
0x51010ff1  # or byte [edx], al; push ecx; push 0x510207FC; call [0x510170C8] 
0x5101144a  # or byte [edx], al; push ecx; test eax, eax; jne 0x51011454; retn 0x000C 
0x51015c8c  # or byte [edx], al; push ecx; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x51017078] 
0x51011416  # or byte [edx], al; push ecx; mov esi, 0x51020800; push esi; xor edi, edi; call [0x510170E4] 
0x510113f2  # or byte [edx], al; push ecx; call [0x510170C8] 
0x51011173  # or byte [edx], al; push ecx; call esi 
0x51011d37  # or byte [edi], al; add dl, byte [ecx-0x7B]; sal byte [ebp+0x06], 0xFF; and eax, 0x510170FC; jmp eax 
0x51015b8d  # or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x5101169a  # or byte [edi], cl; mov dh, 0xC0; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x51013e51  # or byte [0x000000FF], ah; pop edi; pop ebx; pop esi; leave; ret 
0x51015b2a  # or byte [ebx], dh; rcr byte [esi+0x5B], 0xC9; ret 
0x51015ab6  # or byte [eax+0x56], dl; call [0x510170AC]; push eax; call [0x510170E8] 
0x51015ab6  # or byte [eax+0x56], dl; call [0x510170AC] 
0x510133df  # or byte [eax+0x6A], dl; call [esi-0x18] 
0x51015a83  # or byte [ecx+0x50], dl; call [0x510170A8] 
0x51015b94  # or byte [ecx+0x56], dl; push 0x00000009; push [eax+0x04]; call [0x510170F0] 
0x51011c12  # or byte [edx-0x01], ch; call eax 
0x510124f1  # or byte [eax+0x01], dh; push ecx; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x51015ea7  # or byte [ebx+0x0374FEF8], al; push eax; call esi; pop esi; ret 
0x51015e95  # or byte [ebx+0x0374FEF8], al; push eax; call esi 
0x51014d76  # or byte [ebx+ebx*8+0x0250840F], al; add byte [eax], al; call [0x510170BC] 
0x51016219  # or byte [ecx+0x5D5E0446], cl; ret 
0x51013e4e  # or byte [ebx-0x00DAF7BB], cl; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; leave; ret 
0x51015bfe  # or byte [ebx+0x016AF045], cl; push esi; push 0x00000009; push [eax+0x04]; call [0x510170F0] 
0x510110a6  # or byte [ebp-0x0774AEFF], cl; call [0x51017068]; push edi; mov [0x510207F8], eax; call esi 
0x510110a6  # or byte [ebp-0x0774AEFF], cl; call [0x51017068] 
0x51014c30  # or al, ch; loope 0x51014C41; add byte [eax], al; pop ecx; ret 
0x51011405  # or bh, bh; adc eax, 0x5102073C; pop esi; leave; retn 0x0008 
0x51011a80  # or bh, bh; adc eax, 0x510206C8; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x51011A98; call [0x51020708] 
0x51011597  # or bh, bh; jne 0x510115AB; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x51011853  # or bh, bh; jne 0x5101186B; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x51011b97  # or bh, bh; jne 0x51011B87; call eax 
0x510118ff  # or bh, bh; ror byte [ebx+0x0784A1F0], 1; add dl, byte [ecx+0x3B]; ret 
0x51010782  # or bh, bh; ror [ebx+0x75F73BF0], cl; ret 
0x510154a4  # or [eax], eax; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x5101591c  # or [eax], eax; add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x5101303d  # or [eax], eax; add byte [ebp-0x00F18B40], al; jne 0x51012FE3; call [0x51017000] 
0x51013e89  # or [esi], eax; ret 
0x51011bbb  # or [eax-0x01], ebp; dec ecx; retn 0x0014 
0x51011054  # or [edx+0x00], ebp; push eax; call [0x51017030]; jmp [0x51020700] 
0x510114bb  # or [edi-0x01], ebp; dec ecx; ret 
0x510106bb  # or [ebp-0x01], edi; dec ecx; ret 
0x51015b98  # or edi, edi; jo 0x51015BA0; call [0x510170F0] 
0x51011ba2  # or edi, edi; jne 0x51011B8E; call [0x51020704] 
0x51012bba  # or bl, byte [eax-0x01]; inc [ecx+0x00019CC5]; add cl, cl; retn 0x0004 
0x51013547  # or bl, byte [ecx+0x2B]; retn 0xF799 
0x510155fe  # or al, byte [ebx-0x00A9DF3A]; adc eax, 0x51017024; pop esi; pop ebp; ret 
0x51010498  # or ch, al; xor eax, 0xA3FFFFFF; add al, 0xFD; add [ecx+0x3B], edx; ret 
0x51012187  # or ebp, [edx+0x01]; call [0x51017120] 
0x5101167f  # or eax, ecx; retn 0x0004 
0x5101167d  # or eax, edx; or eax, ecx; retn 0x0004 
0x51013226  # or al, 0x00; add byte [edx-0x31], dh; pop edi; pop esi; retn 0x000C 
0x510131d8  # or al, 0x00; add byte [edx-0x18], dh; xor eax, eax; retn 0x0004 
0x510135a7  # or al, 0x00; push esi; je 0x510135F0; push [ebp+0x0C]; call [0x51017040] 
0x51011036  # or al, 0x00; push 0x510207FC; call [0x51017020] 
0x5101146b  # or al, 0x00; je 0x510114B3; push [ebp+0x0C]; call [0x51017040] 
0x51013eae  # or al, 0x00; jnle 0x51013E99; pop esi; pop ebp; ret 
0x51015627  # or al, 0x00; add byte [eax], 0x00; pop ecx; pop ebp; ret 
0x51011452  # or al, 0x00; jmp eax 
0x5101312c  # or al, 0x01; je 0x510131BC; lea eax, [esi+0x34]; push eax; call [0x51017040] 
0x51011bd5  # or al, 0x33; fstp tword [ebx]; ret 
0x510159f8  # or al, 0x50; call [0x51017024] 
0x51015a34  # or al, 0x50; call [0x51017028]; pop ebp; ret 
0x51015a34  # or al, 0x50; call [0x51017028] 
0x5101149a  # or al, 0x6A; add byte [ebp-0x0004037B], cl; call [eax-0x75] 
0x510128af  # or al, 0x70; add [ecx-0x01], edx; jne 0x5101283E; mov esi, eax; call ebx 
0x510125f2  # or al, 0x70; add [ecx-0x01], edx; jne 0x510125E5; call [0x51017000] 
0x51013c6d  # or al, 0x75; sbb eax, 0xFF8D3BE8; call [ebx+0x53] 
0x51015631  # or al, 0x83; shl byte [eax], 0x50; call [0x51017024]; pop ebp; ret 
0x51015631  # or al, 0x83; shl byte [eax], 0x50; call [0x51017024] 
0x51011305  # or al, 0x8B; add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207B0], eax; call esi 
0x510111d3  # or al, 0x8C; add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x5102076C], eax; call esi 
0x51011b7f  # or al, 0xA1; test byte [edi], al; add dl, byte [ecx+0x3B]; ret 
0x51013d8b  # or al, 0xE8; call [esi] 
0x510104fd  # or al, 0xFD; add [ecx+0x3B], edx; ret 
0x510118d5  # or al, 0xFF; jne 0x510118E1; push esi; call eax 
0x51011c0f  # or al, 0xFF; jne 0x51011C1B; push 0xFFFFFFFF; call eax 
0x51011402  # or al, 0xFF; jne 0x5101140E; call [0x5102073C]; pop esi; leave; retn 0x0008 
0x51011402  # or al, 0xFF; jne 0x5101140E; call [0x5102073C] 
0x51010213  # or al, 0xFF; jne 0x5101021F; call [0x510171B8] 
0x51011935  # or al, 0xFF; jne 0x51011941; call [0x510206C8] 
0x51010159  # or al, 0xFF; jne 0x51010165; call [0x510170E0] 
0x51011594  # or al, 0xFF; jne 0x510115A0; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x51011b94  # or al, 0xFF; jne 0x51011BA0; push [ebp-0x14]; call eax 
0x5101159d  # or al, 0xFF; jne 0x510115A9; call eax; push eax; call [0x51020764] 
0x510115ea  # or al, 0xFF; jne 0x510115F6; call eax; push eax; call [0x51020770] 
0x51011632  # or al, 0xFF; jne 0x5101163E; call eax; push eax; call [0x51020774] 
0x5101185c  # or al, 0xFF; jne 0x51011868; call eax; push eax; call [0x5102077C] 
0x51011c4c  # or al, 0xFF; jne 0x51011C58; call eax; push eax; call [0x51020788] 
0x51011c88  # or al, 0xFF; jne 0x51011C94; call eax; push eax; call [0x51020798] 
0x51011cc1  # or al, 0xFF; jne 0x51011CCD; call eax; push eax; call [0x5102079C] 
0x51011dcf  # or al, 0xFF; jne 0x51011DDB; call eax; push eax; call [0x510207E4] 
0x5101159d  # or al, 0xFF; jne 0x510115A9; call eax 
0x51012d12  # or eax, 0xC68B0000; pop esi; pop ebp; retn 0x0010 
0x510118aa  # or eax, 0x5101BF10; or esi, 0xFFFFFFFF; cmp ecx, esi; jne 0x510118E3; push 0x0000276D; call [0x51020704] 
0x51012c18  # or eax, 0x0274F685; mov [esi], eax; xor eax, eax; inc eax; pop esi; retn 0x000C 
0x51013d88  # or eax, 0xE80C75FF; call [esi] 
0x51012ac6  # push cs; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x51011e5d  # push cs; push [ebp+0x14]; lea eax, [ebp-0x44]; push eax; push edi; call [0x51017054] 
0x51013043  # push cs; push [ebp-0x64]; call [0x51017000] 
0x51012275  # verw word [edx+0x00]; push 0x5101784F; push ebx; call esi 
0x51012241  # verw word [edx+0x00]; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x510125d2  # verw word [edx+0x00]; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x51017018] 
0x510122b8  # verw word [edx+0x00]; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x51011a9c  # je 0x510119A9; push [0x5101BF10]; call [0x51017034] 
0x510110c2  # je 0x5101140C; mov esi, [0x51017064]; push 0x51018CF8; push eax; call esi 
0x51014d79  # je 0x51014FCF; call [0x510170BC] 
0x510106fb  # je 0x51010860; mov esi, [0x51017170]; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x510129b4  # je 0x51012B38; push 0x80000001; call [0x51017014] 
0x5101312e  # je 0x510131BC; lea eax, [esi+0x34]; push eax; call [0x51017040] 
0x51013969  # je 0x51013A00; cmp [ebp+0x14], 0x01; jl 0x51013A00; push eax; call [0x51017040] 
0x51011ec2  # je 0x51011FB1; push esi; call [0x51017040] 
0x51011091  # jne 0x510113F0; mov esi, [0x5101706C]; push edi; push 0x00008000; call esi 
0x51014079  # ja 0x51014A2C; jmp [0x51014A7A+eax*4] 
0x51013973  # jl 0x51013A00; push eax; call [0x51017040] 
0x51014d50  # sete cl; push eax; mov eax, [esi]; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x510170B8] 
0x51011804  # movzx eax, byte [esp+0x14]; push eax; push 0x51017644; mov esi, 0x51020664; push esi; call [0x510171F4] 
0x51011693  # movzx ecx, byte [esp+0x04]; shr eax, 0x08; movzx eax, al; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x51011d5b  # movzx eax, al; and eax, 0x01; ret 
0x5101169b  # movzx eax, al; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x5101167a  # movzx ecx, cl; or eax, edx; or eax, ecx; retn 0x0004 
0x51011674  # movzx edx, dx; shl eax, 0x10; movzx ecx, cl; or eax, edx; or eax, ecx; retn 0x0004 
0x510154e9  # movsx eax, byte [ecx+eax+0x04]; and eax, 0x40; pop esi; pop ebp; ret 
0x51010692  # adc byte [eax], al; add bh, bh; jne 0x510106A0; mov byte [ebp-0x06], 0x00; call [0x510171B0] 
0x51011679  # adc byte [edi], cl; mov dh, 0xC9; or eax, edx; or eax, ecx; retn 0x0004 
0x51012148  # adc byte [esi-0x73], dl; test [esi+edi*8-0x01], edi; call [eax-0x73]; test [ebp+edi*8-0x01], edi; call [eax-0x01] 
0x51012148  # adc byte [esi-0x73], dl; test [esi+edi*8-0x01], edi; call [eax-0x73] 
0x51011557  # adc byte [esi-0x01], dl; adc eax, 0x5102068C; push eax; call [0x51020760] 
0x510156d7  # adc byte [esi+0x5D], bl; ret 
0x51012160  # adc byte [edx+0x10], ch; call [0x510171DC] 
0x51015b86  # adc byte [eax+0x33], bh; sar byte [ecx], cl; pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x51012526  # adc byte [esi+0x11], bh; push [ebp+0x10]; lea eax, [ebp-0x00000084]; push eax; push edi; call [0x51017054] 
0x510114fc  # adc byte [ebx-0x00AFFD38], al; xor eax, 0x5101BF10; call [0x51017030] 
0x510138db  # adc byte [ebp+0x531E74FF], al; call [0x51017040] 
0x51012cb4  # adc byte [ecx-0x36CCEBB8], cl; inc ecx; mov [eax+0x30], ecx; mov eax, ecx; pop ebp; retn 0x000C 
0x51013aa3  # adc byte [ebp+0x5650BC45], cl; call [0x51017054]; push esi; call [0x51017040] 
0x51013aa3  # adc byte [ebp+0x5650BC45], cl; call [0x51017054] 
0x5101252b  # adc byte [ebp-0x0000837B], cl; call [eax+0x57]; call [0x51017054] 
0x5101252b  # adc byte [ebp-0x0000837B], cl; call [eax+0x57] 
0x5101104c  # adc byte [edi-0x077CAEFF], bh; push [ecx+ecx+0x6A]; add byte [eax-0x01], dl; adc eax, 0x51017030; jmp [0x51020700] 
0x51011d48  # adc byte [edi-0x077CAEFF], bh; push [ebp+0x03]; xor eax, eax; ret 
0x51011d92  # adc byte [edi+0x15FF5101], bh; xor byte [eax+0x01], dh; push ecx; xor eax, eax; ret 
0x51011014  # adc byte [edi+0x75FF5101], bh; sar bh, 1; jne 0x51011096; call [0x510206FC] 
0x51012ac3  # adc al, ch; add ecx, [esi]; add byte [eax], al; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x51012a7a  # adc al, ch; cmp eax, 0x8D00000D; test [eax+0x50000000], ebx; call ebx 
0x51012b08  # adc al, ch; mov esi, 0x8D00000D; test [eax+0x50000000], ebx; call ebx 
0x51012f7b  # adc al, ch; retn 0x0009 
0x510118d2  # adc bh, bh; jne 0x510118E2; push [ebp+0x08]; push esi; call eax 
0x51011932  # adc bh, bh; jne 0x51011942; push [ebp+0x08]; call [0x510206C8] 
0x51011b91  # adc bh, bh; jne 0x51011BA1; push [ebp+0x08]; push [ebp-0x14]; call eax 
0x5101159a  # adc bh, bh; jne 0x510115AA; push [ebp+0x08]; call eax; push eax; call [0x51020764] 
0x510115e7  # adc bh, bh; jne 0x510115F7; push [ebp+0x08]; call eax; push eax; call [0x51020770] 
0x5101162f  # adc bh, bh; jne 0x5101163F; push [ebp+0x08]; call eax; push eax; call [0x51020774] 
0x51011859  # adc bh, bh; jne 0x51011869; push [ebp+0x08]; call eax; push eax; call [0x5102077C] 
0x51011c49  # adc bh, bh; jne 0x51011C59; push [ebp+0x08]; call eax; push eax; call [0x51020788] 
0x51011c85  # adc bh, bh; jne 0x51011C95; push [ebp+0x08]; call eax; push eax; call [0x51020798] 
0x51011cbe  # adc bh, bh; jne 0x51011CCE; push [ebp+0x08]; call eax; push eax; call [0x5102079C] 
0x51011dcc  # adc bh, bh; jne 0x51011DDC; push [ebp+0x08]; call eax; push eax; call [0x510207E4] 
0x5101159a  # adc bh, bh; jne 0x510115AA; push [ebp+0x08]; call eax 
0x51012124  # adc [eax], eax; add byte [eax+0x00], ch; add [eax], eax; add byte [ebp-0x0001837B], cl; call [eax+0x6A] 
0x51012496  # adc [eax], eax; add byte [ebp-0x577BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x5101246e  # adc [eax], eax; add byte [ebp-0x2F7BF040], al; add byte [eax], al; add byte [ebp-0x0002077B], cl; call [eax+0x68] 
0x51012528  # adc edi, edi; jne 0x5101253C; lea eax, [ebp-0x00000084]; push eax; push edi; call [0x51017054] 
0x510114df  # adc ah, byte [ecx+0x51020704]; test eax, eax; je 0x510114CE; push 0x0000276D; call eax 
0x51011f1d  # adc eax, [eax]; add byte [ecx], bh; pop ebp; mov eax, 0x4D8B1675; adc al, 0x3B; ret 
0x510149d8  # adc ecx, [ebx-0x00021B73]; call [eax-0x73] 
0x51011bc1  # adc al, 0x00; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51013971  # adc al, 0x01; jl 0x51013A00; push eax; call [0x51017040] 
0x51015edd  # adc al, 0x0B; ret 
0x51011bf1  # adc al, 0x27; add byte [eax], al; call [0x51020704] 
0x51011be9  # adc al, 0x3B; je 0x51011BF0; mov [esi], ebx; push 0x00002714; call [0x51020704] 
0x51011808  # adc al, 0x50; push 0x51017644; mov esi, 0x51020664; push esi; call [0x510171F4] 
0x51015807  # adc al, 0x51; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x510170E8] 
0x51015c87  # adc al, 0x7C; sub byte [ecx+0x510208A8], ah; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x51017078] 
0x510138fb  # adc al, 0x7D; cmp dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x51011e0e  # adc al, 0x7E; add cl, byte [eax+0x74F33B1F]; push esi; call [0x51017040] 
0x5101596c  # adc al, 0x83; enter 0xEBFF, 0x02; mov eax, [eax]; pop esi; pop ebp; ret 
0x510156cf  # adc al, 0x83; enter 0xEBFF, 0x03; mov eax, [eax+0x10]; pop esi; pop ebp; ret 
0x51010f4e  # adc al, 0x88; add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x51020710], eax; call esi 
0x51014d49  # adc al, 0x8D; test [0x940FFFFF], ebx; rcl [eax-0x75], 0x06; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x510170B8] 
0x51013aa0  # adc al, 0xFF; jne 0x51013AB4; lea eax, [ebp-0x44]; push eax; push esi; call [0x51017054] 
0x510118cf  # adc al, 0xFF; jne 0x510118E3; push [ebp+0x0C]; push [ebp+0x08]; push esi; call eax 
0x5101192f  # adc al, 0xFF; jne 0x51011943; push [ebp+0x0C]; push [ebp+0x08]; call [0x510206C8] 
0x51011b8e  # adc al, 0xFF; jne 0x51011BA2; push [ebp+0x0C]; push [ebp+0x08]; push [ebp-0x14]; call eax 
0x5101162c  # adc al, 0xFF; jne 0x51011640; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x51012761  # adc al, 0xFF; jne 0x510127E1; lea eax, [ebp-0x000001FC]; push eax; push edi; call [0x51017054] 
0x51012b81  # adc eax, 0x51017004; push [ebp-0x6C]; test eax, eax; je 0x51012BA1; call [0x51017000] 
0x51011a90  # adc eax, 0x51020708; mov [ebp-0x18], eax; cmp [ebp-0x14], 0x00000000; je 0x510119A9; push [0x5101BF10]; call [0x51017034] 
0x510124f0  # adc eax, 0x51017008; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x510128ae  # adc eax, 0x5101700C; push [ebp-0x78]; mov esi, eax; call ebx 
0x510125f1  # adc eax, 0x5101700C; push [ebp-0x14]; call [0x51017000] 
0x5101285a  # adc eax, 0x51017010; test eax, eax; je 0x5101283A; push [ebp-0x78]; mov ebx, [0x51017000]; call ebx 
0x5101103e  # adc eax, 0x51017020; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x51011431  # adc eax, 0x51017020; mov eax, [0x51020740]; test eax, eax; je 0x51011443; call eax 
0x51015637  # adc eax, 0x51017024; pop ebp; ret 
0x51011d97  # adc eax, 0x51017030; xor eax, eax; ret 
0x51011059  # adc eax, 0x51017030; jmp [0x51020700] 
0x51011d56  # adc eax, 0x51017034; movzx eax, al; and eax, 0x01; ret 
0x51011aa9  # adc eax, 0x51017034; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51011912  # adc eax, 0x51017034; test al, 0x01; je 0x51011928; push 0x00002734; call [0x51020704] 
0x51011407  # adc eax, 0x5102073C; pop esi; leave; retn 0x0008 
0x51011a51  # adc eax, 0x51017048; push eax; call [0x510171D0]; push [0x5101BF10]; call [0x51017034] 
0x51011a51  # adc eax, 0x51017048; push eax; call [0x510171D0] 
0x51013aaa  # adc eax, 0x51017054; push esi; call [0x51017040] 
0x5101192b  # adc eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x510206C8] 
0x510110ad  # adc eax, 0x51017068; push edi; mov [0x510207F8], eax; call esi 
0x510160d9  # adc eax, 0x5101707C; test eax, eax; jne 0x510160EC; call [0x510170FC] 
0x51015e7a  # adc eax, 0x51017084; mov [0x5101F978], eax; ret 
0x5101155a  # adc eax, 0x5102068C; push eax; call [0x51020760] 
0x51011569  # adc eax, 0x5102068C; pop esi; leave; retn 0x0004 
0x51015a87  # adc eax, 0x510170A8; test eax, eax; jne 0x51015AF7; cmp [0x5101F970], 0x02; jne 0x51015A73; call [0x510170FC] 
0x51015aba  # adc eax, 0x510170AC; push eax; call [0x510170E8] 
0x51016032  # adc eax, 0x510171BC; test eax, eax; jne 0x51016046; call [0x510170FC] 
0x51014add  # adc eax, 0x510170C0; mov [ebp-0x08], eax; cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x51011a82  # adc eax, 0x510206C8; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x51011A98; call [0x51020708] 
0x51010ffa  # adc eax, 0x510170C8; cmp eax, 0x01; jl 0x51010FF4; cmp [0x5101BF10], 0xFFFFFFFF; jne 0x51011018; call [0x510170D0] 
0x510113f6  # adc eax, 0x510170C8; cmp eax, 0x01; jl 0x510113F0; push [ebp+0x0C]; push [ebp+0x08]; call [0x5102073C] 
0x5101100e  # adc eax, 0x510170D0; mov [0x5101BF10], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x510206FC] 
0x51011a58  # adc eax, 0x510171D0; push [0x5101BF10]; call [0x51017034] 
0x5101217e  # adc eax, 0x510171D8; cmp eax, 0x02; jne 0x51012193; push 0x00000001; call [0x51017120] 
0x510130de  # adc eax, 0xFFF811E8; call [edi-0x18] 
0x51011a15  # adc eax, 0x510171EC; lea eax, [ebp-0x40]; push eax; call [0x510171F0] 
0x51012159  # adc eax, 0x510171F4; add esp, 0x10; push 0x00000010; call [0x510171DC] 
0x51011f93  # adc eax, 0x6AB075FF; call [esi+0x53] 
0x5101142e  # push ss; push esi; call [0x51017020] 
0x510125e8  # push ss; lea eax, [ebp-0x10]; push eax; push [ebp-0x14]; call [0x5101700C] 
0x51011a46  # push ss; push [ebp-0x34]; push [ebp-0x38]; push [ebp-0x3C]; call [0x51017048] 
0x5101281b  # pop ss; push 0x80000001; call esi 
0x510128a6  # pop ss; push [ebp-0x0080]; push [ebp-0x78]; call [0x5101700C] 
0x51010277  # sbb byte [eax+0x7400FC7D], al; pop es; mov ecx, [ebp-0x08]; and [ecx+0x70], 0xFFFFFFFD; leave; ret 
0x510158f7  # sbb byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x5101181d  # sbb byte [ebx+0x06EB5EC6], cl; push [esp+0x04]; call eax; retn 0x0004 
0x5101181d  # sbb byte [ebx+0x06EB5EC6], cl; push [esp+0x04]; call eax 
0x5101466b  # sbb byte [ebp-0x00025B7B], cl; call [eax+0x53] 
0x51011629  # sbb bh, bh; jne 0x51011641; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x51010140  # sbb bh, bh; jne 0x51010128; push 0x00000001; push [ebp+0x1C]; call esi 
0x510159f2  # sbb [edx], eax; push ecx; lea eax, [eax+edi+0x0C]; push eax; call [0x51017024] 
0x51015a2b  # sbb [edx], eax; push ecx; shl eax, 0x06; lea eax, [ecx+eax+0x0C]; push eax; call [0x51017028] 
0x51015546  # sbb bl, byte [eax+0x5E]; ret 
0x51010f84  # sbb al, 0x07; add dl, byte [ecx+0x68]; enter 0x0187, 0x51; push [0x510207F4]; call esi 
0x510107e3  # sbb al, 0x53; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call [0x510170E8] 
0x510111c1  # sbb al, 0x8C; add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020768], eax; call esi 
0x510154ba  # sbb al, 0xE8; lock je 0x510154BE; call [esi+0x56] 
0x51012867  # sbb eax, 0x51017000; call ebx 
0x51012a12  # sbb eax, 0x51017040; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x510118f2  # sbb eax, 0x1475FF57; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x51013c6f  # sbb eax, 0xFF8D3BE8; call [ebx+0x53] 
0x51010441  # sbb eax, 0xFFC569E8; call [ebx+0x53] 
0x510156b7  # sbb eax, 0xFF72F3E8; call [esi+0x56] 
0x510138df  # push ds; push ebx; call [0x51017040] 
0x51013bda  # push ds; push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x51011bef  # push ds; push 0x00002714; call [0x51020704] 
0x51011e12  # pop ds; cmp esi, ebx; je 0x51011E7C; push esi; call [0x51017040] 
0x510159ea  # pop ds; shl edi, 0x06; mov eax, [0x51021900+eax*4]; lea eax, [eax+edi+0x0C]; push eax; call [0x51017024] 
0x5101216b  # and byte [eax], al; add byte [ebp-0x0000837B], cl; call [eax-0x73]; test [ebp+edi*8-0x01], edi; call [eax+0x57]; call [0x510171D8] 
0x5101216b  # and byte [eax], al; add byte [ebp-0x0000837B], cl; call [eax-0x73]; test [ebp+edi*8-0x01], edi; call [eax+0x57] 
0x5101216b  # and byte [eax], al; add byte [ebp-0x0000837B], cl; call [eax-0x73] 
0x5101373d  # and byte [eax], al; push edi; call [0x51017040] 
0x51015b88  # and byte [ebx], dh; sar byte [ecx], cl; pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x51015634  # and byte [eax-0x01], dl; adc eax, 0x51017024; pop ebp; ret 
0x51015670  # and byte [eax-0x01], dl; adc eax, 0x51017028; pop ebp; ret 
0x51013c67  # and byte [ebx+0x33], dl; fstp tword [ecx]; pop ebp; or al, 0x75; sbb eax, 0xFF8D3BE8; call [ebx+0x53] 
0x51015601  # and byte [esi-0x01], dl; adc eax, 0x51017024; pop esi; pop ebp; ret 
0x5101103f  # and byte [eax+0x01], dh; push ecx; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x51011432  # and byte [eax+0x01], dh; push ecx; mov eax, [0x51020740]; test eax, eax; je 0x51011443; call eax 
0x510105a7  # and byte [ecx-0x3B7C0001], bl; or al, 0x3B; ret 
0x51010424  # and [esi], eax; mov eax, [ebp-0x04]; pop esi; pop edi; leave; ret 
0x51013ae4  # and [ebp-0x24], ebx; push eax; mov [ebp-0x20], 0x00000094; call [0x5101705C] 
0x51010624  # and ecx, eax; push ecx; push edi; call [0x510170DC] 
0x51011d13  # and al, 0x04; je 0x51011D20; test eax, eax; jne 0x51011D0B; xor eax, eax; retn 0x0008 
0x51011696  # and al, 0x04; shr eax, 0x08; movzx eax, al; shl ecx, 0x08; or eax, ecx; retn 0x0004 
0x51011cea  # and al, 0x04; push [esp+0x08]; call eax; push eax; call [0x510207A0] 
0x51011cea  # and al, 0x04; push [esp+0x08]; call eax 
0x51011825  # and al, 0x04; call eax; retn 0x0004 
0x51011825  # and al, 0x04; call eax 
0x51011cee  # and al, 0x08; call eax; push eax; call [0x510207A0] 
0x51011cee  # and al, 0x08; call eax 
0x51012d11  # and al, 0x0D; add byte [eax], al; mov eax, esi; pop esi; pop ebp; retn 0x0010 
0x51011807  # and al, 0x14; push eax; push 0x51017644; mov esi, 0x51020664; push esi; call [0x510171F4] 
0x51012727  # and al, 0x50; lea eax, [ebp-0x3C]; push eax; call esi 
0x51012754  # and al, 0x50; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x51015638  # and al, 0x70; add [ecx+0x5D], edx; ret 
0x51010e21  # and al, 0x89; add [ecx-0x01], edx; xor eax, 0x510207F4; call esi 
0x51011d2f  # and eax, 0x5101702C; jmp eax 
0x510138d8  # and eax, 0x85107D8B; push [esi+ebx+0x53]; call [0x51017040] 
0x51011d40  # and eax, 0x510170FC; jmp eax 
0x51013e52  # and eax, 0x000000FF; pop edi; pop ebx; pop esi; leave; ret 
0x51011a36  # push [ebp-0x38]; call [0x510171D4] 
0x510118b8  # daa; add byte [eax], al; call [0x51020704] 
0x510114eb  # daa; add byte [eax], al; call eax 
0x51015c89  # sub byte [ecx+0x510208A8], ah; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x51017078] 
0x51015af2  # sub bh, bh; dec ecx; ret 
0x5101219b  # sub [edx-0x01], esp; dec ecx; retn 0x0010 
0x510103b8  # sub eax, [0x5101FD04]; sar eax, 0x02; neg eax; pop esi; pop ebp; ret 
0x51014c81  # sub edi, [ebp-0x01]; call [esi+0x56] 
0x51012c65  # sub eax, ecx; xor edx, edx; mov ecx, 0x00015180; div ecx; pop esi; retn 0x0004 
0x51010f3c  # sub al, 0x88; add [ecx-0x01], edx; xor eax, 0x510207F4; mov [0x5102070C], eax; call esi 
0x510111af  # sub al, 0x8C; add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020764], eax; call esi 
0x51010775  # sub eax, 0x75FF5757; fdiv st7, st0; jne 0x51010756; push 0x00000001; push [ebp+0x08]; call ebx 
0x51012247  # xor byte [eax+0x53], dl; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x51012247  # xor byte [eax+0x53], dl; call esi 
0x510122be  # xor byte [eax+0x68], dl; add byte [eax], al; add byte [eax+0x75FFD6FF], al; lodsb; mov esi, eax; call edi 
0x51012598  # xor byte [eax-0x0A], dl; ret 
0x51012299  # xor byte [eax-0x01], dl; jne 0x5101224A; call [0x51017004] 
0x51011d98  # xor byte [eax+0x01], dh; push ecx; xor eax, eax; ret 
0x5101105a  # xor byte [eax+0x01], dh; push ecx; jmp [0x51020700] 
0x51014c7f  # xor al, ch; sub edi, [ebp-0x01]; call [esi+0x56] 
0x51015954  # xor al, ch; push esi; jo 0x51015958; call [esi+0x56] 
0x51015366  # xor bh, bh; dec ecx; ret 
0x5101013b  # xor [ebx+0x57], edx; push [ebp+0x18]; push [ebp-0x1C]; push 0x00000001; push [ebp+0x1C]; call esi 
0x51011e91  # xor esp, [ebp-0x01]; dec ecx; retn 0x0010 
0x51012c1f  # xor eax, eax; inc eax; pop esi; retn 0x000C 
0x5101291d  # xor eax, eax; pop ecx; inc eax; ret 
0x5101344f  # xor eax, eax; pop esi; pop ebx; pop ebp; retn 0x000C 
0x510135e9  # xor eax, eax; pop esi; pop ebp; retn 0x000C 
0x51013701  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x51013814  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; retn 0x0014 
0x510137b4  # xor eax, eax; pop edi; pop esi; pop ebx; leave; retn 0x000C 
0x5101367a  # xor eax, eax; pop edi; pop esi; retn 0x000C 
0x51011464  # xor eax, ebp; mov [ebp-0x04], eax; cmp [ebp+0x0C], 0x00000000; je 0x510114B3; push [ebp+0x0C]; call [0x51017040] 
0x51014d6d  # xor ecx, ecx; cmp [ebp-0x00001AE0], ecx; je 0x51014D7F; test bl, bl; je 0x51014FCF; call [0x510170BC] 
0x51012cb8  # xor ecx, ecx; inc ecx; mov [eax+0x30], ecx; mov eax, ecx; pop ebp; retn 0x000C 
0x51012c67  # xor edx, edx; mov ecx, 0x00015180; div ecx; pop esi; retn 0x0004 
0x51013ae2  # xor ebx, ebx; and [ebp-0x24], ebx; push eax; mov [ebp-0x20], 0x00000094; call [0x5101705C] 
0x5101141f  # xor edi, edi; call [0x510170E4] 
0x51010fe9  # xor al, 0x07; add dl, byte [ecx-0x01]; salc; mov [0x510208A0], eax; push 0x510207FC; call [0x510170C8] 
0x51014d57  # xor al, 0x07; mov [ebp-0x00001AE0], ecx; call [0x510170B8] 
0x51014e96  # xor al, 0x07; call [0x51017194] 
0x5101191c  # xor al, 0x27; add byte [eax], al; call [0x51020704] 
0x51013136  # xor al, 0x50; call [0x51017040] 
0x51011d57  # xor al, 0x70; add [ecx+0x0F], edx; mov dh, 0xC0; and eax, 0x01; ret 
0x51011aaa  # xor al, 0x70; add [ecx-0x7D], edx; loopne 0x51011AAD; push eax; push [0x5101BF10]; call [0x51017030] 
0x51011913  # xor al, 0x70; add [ecx-0x58], edx; add [ebp+ecx+0x68], esi; xor al, 0x27; add byte [eax], al; call [0x51020704] 
0x510114f5  # xor al, 0x70; add [ecx-0x58], edx; add [eax+edx-0x7D], esi; enter 0x5002, 0xFF; xor eax, 0x5101BF10; call [0x51017030] 
0x5101139a  # xor al, 0x8A; add [ecx-0x01], edx; xor eax, 0x510207F8; call esi 
0x510112e1  # xor al, 0x8B; add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x510207A8], eax; call esi 
0x51011414  # xor eax, 0x51020800; mov esi, 0x51020800; push esi; xor edi, edi; call [0x510170E4] 
0x51011d91  # xor eax, 0x5101BF10; call [0x51017030]; xor eax, eax; ret 
0x51011502  # xor eax, 0x5101BF10; call [0x51017030] 
0x51011aa3  # xor eax, 0x5101BF10; call [0x51017034]; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51011a5e  # xor eax, 0x5101BF10; call [0x51017034] 
0x5101280e  # xor eax, 0x51017018; lea eax, [ebp+0x0000008C]; push eax; je 0x51012833; push 0x80000001; call esi 
0x510110c9  # xor eax, 0x51017064; push 0x51018CF8; push eax; call esi 
0x51013ba5  # xor eax, 0x51017064; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x51011098  # xor eax, 0x5101706C; push edi; push 0x00008000; call esi 
0x51010702  # xor eax, 0x51017170; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x51015248  # xor eax, 0xFFFFEBF0; push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; push [edi+eax]; call [0x51017194] 
0x51010f1d  # xor eax, 0x510207F4; mov [0x51020704], eax; call esi 
0x51010f2f  # xor eax, 0x510207F4; mov [0x51020708], eax; call esi 
0x51010f41  # xor eax, 0x510207F4; mov [0x5102070C], eax; call esi 
0x51010f53  # xor eax, 0x510207F4; mov [0x51020710], eax; call esi 
0x51010f65  # xor eax, 0x510207F4; mov [0x51020714], eax; call esi 
0x51010f77  # xor eax, 0x510207F4; mov [0x51020718], eax; call esi 
0x51010f9b  # xor eax, 0x510207F4; mov [0x51020720], eax; call esi 
0x51010fad  # xor eax, 0x510207F4; mov [0x51020724], eax; call esi 
0x51010fbf  # xor eax, 0x510207F4; mov [0x51020728], eax; call esi 
0x51010ee7  # xor eax, 0x510207F4; mov [0x5102072C], eax; call esi 
0x51010fd1  # xor eax, 0x510207F4; mov [0x51020730], eax; call esi 
0x51010fe3  # xor eax, 0x510207F4; mov [0x51020734], eax; call esi; mov [0x510208A0], eax; push 0x510207FC; call [0x510170C8] 
0x51010fe3  # xor eax, 0x510207F4; mov [0x51020734], eax; call esi 
0x51010e0f  # xor eax, 0x510207F4; mov [0x510206CC], eax; call esi 
0x51010e33  # xor eax, 0x510207F4; mov [0x510206D4], eax; call esi 
0x51010e45  # xor eax, 0x510207F4; mov [0x510206D8], eax; call esi 
0x51010e57  # xor eax, 0x510207F4; mov [0x510206DC], eax; call esi 
0x51010e69  # xor eax, 0x510207F4; mov [0x510206E0], eax; call esi 
0x51010e7b  # xor eax, 0x510207F4; mov [0x510206E4], eax; call esi 
0x51010e8d  # xor eax, 0x510207F4; mov [0x510206E8], eax; call esi 
0x51010e9f  # xor eax, 0x510207F4; mov [0x510206EC], eax; call esi 
0x51010eb1  # xor eax, 0x510207F4; mov [0x510206F0], eax; call esi 
0x51010ec3  # xor eax, 0x510207F4; mov [0x510206F4], eax; call esi 
0x51010ed5  # xor eax, 0x510207F4; mov [0x510206F8], eax; call esi 
0x51010ef9  # xor eax, 0x510207F4; mov [0x510206FC], eax; call esi 
0x51010e26  # xor eax, 0x510207F4; call esi; push 0x51018918; push [0x510207F4]; mov [0x510206D4], eax; call esi 
0x51010f8e  # xor eax, 0x510207F4; call esi; push 0x510187B0; push [0x510207F4]; mov [0x51020720], eax; call esi 
0x51010e26  # xor eax, 0x510207F4; call esi 
0x510110dc  # xor eax, 0x510207F8; mov [0x51020738], eax; call esi 
0x510110ee  # xor eax, 0x510207F8; mov [0x5102073C], eax; call esi 
0x51011112  # xor eax, 0x510207F8; mov [0x51020744], eax; call esi 
0x51011124  # xor eax, 0x510207F8; mov [0x51020748], eax; call esi 
0x51011136  # xor eax, 0x510207F8; mov [0x5102074C], eax; call esi 
0x51011148  # xor eax, 0x510207F8; mov [0x51020750], eax; call esi 
0x5101115a  # xor eax, 0x510207F8; mov [0x51020754], eax; call esi 
0x5101117e  # xor eax, 0x510207F8; mov [0x51020758], eax; call esi 
0x51011190  # xor eax, 0x510207F8; mov [0x5102075C], eax; call esi 
0x510111a2  # xor eax, 0x510207F8; mov [0x51020760], eax; call esi 
0x510111b4  # xor eax, 0x510207F8; mov [0x51020764], eax; call esi 
0x510111c6  # xor eax, 0x510207F8; mov [0x51020768], eax; call esi 
0x510111d8  # xor eax, 0x510207F8; mov [0x5102076C], eax; call esi 
0x510111ea  # xor eax, 0x510207F8; mov [0x51020770], eax; call esi 
0x510111fc  # xor eax, 0x510207F8; mov [0x51020774], eax; call esi 
0x5101120e  # xor eax, 0x510207F8; mov [0x51020778], eax; call esi 
0x51011244  # xor eax, 0x510207F8; mov [0x51020784], eax; call esi 
0x51011256  # xor eax, 0x510207F8; mov [0x51020788], eax; call esi 
0x51011268  # xor eax, 0x510207F8; mov [0x5102078C], eax; call esi 
0x5101127a  # xor eax, 0x510207F8; mov [0x51020790], eax; call esi 
0x5101128c  # xor eax, 0x510207F8; mov [0x51020794], eax; call esi 
0x5101129e  # xor eax, 0x510207F8; mov [0x51020798], eax; call esi 
0x510112b0  # xor eax, 0x510207F8; mov [0x5102079C], eax; call esi 
0x510112c2  # xor eax, 0x510207F8; mov [0x510207A0], eax; call esi 
0x510112d4  # xor eax, 0x510207F8; mov [0x510207A4], eax; call esi 
0x5101116c  # xor eax, 0x510207F8; mov [0x510208A4], eax; call esi 
0x510112e6  # xor eax, 0x510207F8; mov [0x510207A8], eax; call esi 
0x510112f8  # xor eax, 0x510207F8; mov [0x510207AC], eax; call esi 
0x5101131c  # xor eax, 0x510207F8; mov [0x510207B4], eax; call esi 
0x5101132e  # xor eax, 0x510207F8; mov [0x510207C8], eax; call esi 
0x51011340  # xor eax, 0x510207F8; mov [0x510207CC], eax; call esi 
0x51011352  # xor eax, 0x510207F8; mov [0x510207D0], eax; call esi 
0x51011364  # xor eax, 0x510207F8; mov [0x510207D4], eax; call esi 
0x51011376  # xor eax, 0x510207F8; mov [0x510207D8], eax; call esi 
0x51011388  # xor eax, 0x510207F8; mov [0x510207DC], eax; call esi 
0x510113ac  # xor eax, 0x510207F8; mov [0x510207E4], eax; call esi 
0x510113be  # xor eax, 0x510207F8; mov [0x510207E8], eax; call esi 
0x510113d0  # xor eax, 0x510207F8; mov [0x510207EC], eax; call esi 
0x5101139f  # xor eax, 0x510207F8; call esi; push 0x51018A20; push [0x510207F8]; mov [0x510207E4], eax; call esi 
0x51011237  # xor eax, 0x510207F8; call esi; push 0x51018BC8; push [0x510207F8]; mov [0x51020784], eax; call esi 
0x51011237  # xor eax, 0x510207F8; call esi 
0x5101049a  # xor eax, 0xA3FFFFFF; add al, 0xFD; add [ecx+0x3B], edx; ret 
0x51011a0f  # aaa; lea eax, [ebp-0x40]; push eax; call [0x510171EC] 
0x51012507  # aaa; lea eax, [ebp-0x00000104]; push eax; lea eax, [ebp-0x00000204]; push eax; call [0x51017090] 
0x510113e2  # cmp byte [edi], al; add dl, byte [ecx-0x7B]; sal byte [esi+eax-0x73], 0x4D; clc; push ecx; call eax 
0x510159f7  # cmp byte [eax+edx*2], cl; call [0x51017024] 
0x5101278c  # cmp byte [edi+edi*8-0x01], bl; add ebp, 0x68; leave; retn 0x0010 
0x51013222  # cmp byte [ecx+0x000CE8F9], al; add byte [edx-0x31], dh; pop edi; pop esi; retn 0x000C 
0x510156e5  # cmp [0x51020894], eax; sete cl; mov eax, ecx; ret 
0x51012897  # cmp [ebp-0x7C], ecx; je 0x510128EE; push 0x80000001; call esi 
0x51013bd6  # cmp [ebp-0x78], ebx; je 0x51013BF9; push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x51014d6f  # cmp [ebp-0x00001AE0], ecx; je 0x51014D7F; test bl, bl; je 0x51014FCF; call [0x510170BC] 
0x51014a74  # cmp edi, edi; dec ecx; ret 
0x510138fd  # cmp dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x51011d11  # cmp edx, [esp+0x04]; je 0x51011D20; test eax, eax; jne 0x51011D0B; xor eax, eax; retn 0x0008 
0x51014077  # cmp eax, ecx; ja 0x51014A2C; jmp [0x51014A7A+eax*4] 
0x51014ae5  # cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x510118b2  # cmp ecx, esi; jne 0x510118E3; push 0x0000276D; call [0x51020704] 
0x51011ec0  # cmp esi, ebx; je 0x51011FB1; push esi; call [0x51017040] 
0x51011bea  # cmp esi, ebx; je 0x51011BF0; mov [esi], ebx; push 0x00002714; call [0x51020704] 
0x51011e13  # cmp esi, ebx; je 0x51011E7C; push esi; call [0x51017040] 
0x51011408  # cmp al, 0x07; add dl, byte [ecx+0x5E]; leave; retn 0x0008 
0x5101119d  # cmp al, 0x8C; add [ecx-0x01], edx; xor eax, 0x510207F8; mov [0x51020760], eax; call esi 
0x51012a7c  # cmp eax, 0x8D00000D; test [eax+0x50000000], ebx; call ebx 
0x51011005  # cmp eax, 0x5101BF10; push [ebp+0x0B]; call [0x510170D0] 
0x5101154f  # cmp eax, 0x51020760; add byte [esi+0x74], dl; adc byte [esi-0x01], dl; adc eax, 0x5102068C; push eax; call [0x51020760] 
0x51015a91  # cmp eax, 0x5101F970; add dh, byte [ebp-0x26]; call [0x510170FC] 
0x51012390  # cmp eax, 0x510171F4; call edi 
0x51013ea8  # push [esi+eax-0x7D]; jnl 0x51013EBB; add byte [edi-0x19], bh; pop esi; pop ebp; ret 
0x51012273  # aas; add byte [edi], cl; add byte [edx+0x00], ch; push 0x5101784F; push ebx; call esi 
0x510156d6  # inc eax; adc byte [esi+0x5D], bl; ret 
0x510154f0  # inc eax; pop esi; pop ebp; ret 
0x51012c21  # inc eax; pop esi; retn 0x000C 
0x51015e73  # inc eax; push 0x51018DEC; call [0x51017084]; mov [0x5101F978], eax; ret 
0x51015e73  # inc eax; push 0x51018DEC; call [0x51017084] 
0x51012a13  # inc eax; jo 0x51012A17; push ecx; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x510131d4  # inc eax; cmp ecx, 0x00000CE8; jc 0x510131C5; xor eax, eax; retn 0x0004 
0x51014e38  # inc eax; in eax, 0xFF; call [eax-0x18] 
0x51014e5c  # inc eax; in eax, 0xFF; call [ecx+0x50] 
0x51014e13  # inc eax; in eax, 0xFF; call [ebx+0x50] 
0x51014a93  # inc ecx; add [ecx-0x21], edx; inc edx; add [ecx-0x75], edx; call [ebp-0x75] 
0x51012cba  # inc ecx; mov [eax+0x30], ecx; mov eax, ecx; pop ebp; retn 0x000C 
0x51014a97  # inc edx; add [ecx-0x75], edx; call [ebp-0x75] 
0x51014e68  # inc ebx; inc [ebp-0x00001ABC]; call [0x510170E8] 
0x510154eb  # inc esp; add [ebx+eax*4], eax; loopne 0x51015531; pop esi; pop ebp; ret 
0x51015a32  # inc esp; add [eax+edx*2], ecx; call [0x51017028]; pop ebp; ret 
0x51015a32  # inc esp; add [eax+edx*2], ecx; call [0x51017028] 
0x510159f6  # inc esp; cmp byte [eax+edx*2], cl; call [0x51017024] 
0x51010f2a  # inc esp; mov byte [ecx], al; push ecx; push [0x510207F4]; mov [0x51020708], eax; call esi 
0x5101146e  # inc esp; push [ebp+0x0C]; call [0x51017040] 
0x51013c8e  # inc ebp; or byte [ebx], bh; ret 
0x51015ab5  # inc ebp; or byte [eax+0x56], dl; call [0x510170AC]; push eax; call [0x510170E8] 
0x51015ab5  # inc ebp; or byte [eax+0x56], dl; call [0x510170AC] 
0x510133de  # inc ebp; or byte [eax+0x6A], dl; call [esi-0x18] 
0x5101312b  # inc ebp; or al, 0x01; je 0x510131BC; lea eax, [esi+0x34]; push eax; call [0x51017040] 
0x51011bd4  # inc ebp; or al, 0x33; fstp tword [ebx]; ret 
0x51013495  # inc ebp; or al, 0x3B; ret 
0x51015630  # inc ebp; or al, 0x83; shl byte [eax], 0x50; call [0x51017024]; pop ebp; ret 
0x51015630  # inc ebp; or al, 0x83; shl byte [eax], 0x50; call [0x51017024] 
0x510138fa  # inc ebp; adc al, 0x7D; cmp dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x51012726  # inc ebp; and al, 0x50; lea eax, [ebp-0x3C]; push eax; call esi 
0x51012753  # inc ebp; and al, 0x50; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x51012246  # inc ebp; xor byte [eax+0x53], dl; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x51012246  # inc ebp; xor byte [eax+0x53], dl; call esi 
0x51012597  # inc ebp; xor byte [eax-0x0A], dl; ret 
0x51012298  # inc ebp; xor byte [eax-0x01], dl; jne 0x5101224A; call [0x51017004] 
0x51012a75  # inc ebp; adc byte [eax-0x01], 0x76; adc al, ch; cmp eax, 0x8D00000D; test [eax+0x50000000], ebx; call ebx 
0x51012851  # inc ebp; mov word [eax+0x6A], ss; add bh, bh; jne 0x510127E1; call [0x51017010] 
0x5101283b  # inc ebp; mov word [eax-0x01], ss; jne 0x510127C9; call [0x5101700C] 
0x51012a2c  # inc ebp; cwde; push eax; push [ebp-0x6C]; call [0x51017004] 
0x51012e7f  # inc ebp; mov al, byte [0x9C75FF50]; mov [ebp-0x68], edi; mov byte [ebp+0x000000A0], 0x00; call ebx 
0x51012286  # inc ebp; mov al, 0x50; call [0x51017040] 
0x5101238b  # inc ebp; mov esp, 0x3D8B5750; hlt; jno 0x51012395; push ecx; call edi 
0x51015c83  # inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x51011a88  # inc ebp; in al, dx; cmp eax, 0xFFFFFFFF; jne 0x51011A98; call [0x51020708] 
0x510125ea  # inc ebp; lock push eax; push [ebp-0x14]; call [0x5101700C]; push [ebp-0x14]; call [0x51017000] 
0x510125ea  # inc ebp; lock push eax; push [ebp-0x14]; call [0x5101700C] 
0x51015ad8  # inc ebp; hlt; push eax; push ecx; call [0x510170B0] 
0x51014ae3  # inc ebp; clc; cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x5101152f  # inc ebp; cld; add al, 0x00; add byte [eax], al; call eax 
0x51010427  # inc ebp; cld; pop esi; pop edi; leave; ret 
0x51011467  # inc ebp; cld; cmp [ebp+0x0C], 0x00000000; je 0x510114B3; push [ebp+0x0C]; call [0x51017040] 
0x5101621b  # inc esi; add al, 0x5E; pop ebp; ret 
0x51016218  # inc esi; or byte [ecx+0x5D5E0446], cl; ret 
0x51013135  # inc esi; xor al, 0x50; call [0x51017040] 
0x5101373b  # inc esi; and [eax], 0x00000000; push edi; call [0x51017040] 
0x51015626  # dec eax; or al, 0x00; add byte [eax], 0x00; pop ecx; pop ebp; ret 
0x51011a52  # dec eax; jo 0x51011A56; push ecx; push eax; call [0x510171D0] 
0x51011383  # dec eax; mov al, byte [ecx]; push ecx; push [0x510207F8]; mov [0x510207DC], eax; call esi 
0x510112cf  # dec eax; mov eax, [ecx]; push ecx; push [0x510207F8]; mov [0x510207A4], eax; call esi 
0x5101118b  # dec eax; mov word [ecx], es; push ecx; push [0x510207F8]; mov [0x5102075C], eax; call esi 
0x51015075  # dec eax; in eax, 0xFF; call [eax-0x75]; push es; push [edi+eax]; call [0x51017194] 
0x51015075  # dec eax; in eax, 0xFF; call [eax-0x75] 
0x51015a82  # dec ebp; or byte [ecx+0x50], dl; call [0x510170A8] 
0x51011f05  # dec ebp; adc byte [ebx], bh; ret 
0x51011f26  # dec ebp; adc al, 0x3B; ret 
0x51015806  # dec ebp; adc al, 0x51; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x510170E8] 
0x51012284  # dec ebp; lea eax, [ebp-0x50]; push eax; call [0x51017040] 
0x510113eb  # dec ebp; clc; push ecx; call eax; push 0x51020800; call [0x510170C8] 
0x510113eb  # dec ebp; clc; push ecx; call eax 
0x51014ad5  # dec ebp; cld; push ecx; push [ebp-0x08]; push eax; call [0x510170C0] 
0x51013737  # dec esi; or esi, 0xFFFFFFF8; inc esi; and [eax], 0x00000000; push edi; call [0x51017040] 
0x5101227a  # dec edi; js 0x5101227E; push ecx; push ebx; call esi 
0x51012896  # push eax; cmp [ebp-0x7C], ecx; je 0x510128EE; push 0x80000001; call esi 
0x51011a28  # push eax; push eax; push eax; lea eax, [ebp-0x40]; push eax; call ebx 
0x51011a29  # push eax; push eax; lea eax, [ebp-0x40]; push eax; call ebx 
0x51015ada  # push eax; push ecx; call [0x510170B0] 
0x51012248  # push eax; push ebx; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x51012248  # push eax; push ebx; call esi 
0x51015221  # push eax; push esi; push 0x0000FDE9; call [0x510170E8] 
0x51013aa7  # push eax; push esi; call [0x51017054]; push esi; call [0x51017040] 
0x51013aa7  # push eax; push esi; call [0x51017054] 
0x51015ab7  # push eax; push esi; call [0x510170AC]; push eax; call [0x510170E8] 
0x51015ab7  # push eax; push esi; call [0x510170AC] 
0x5101082f  # push eax; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call ebx 
0x510123e7  # push eax; push esi; call edi 
0x5101238d  # push eax; push edi; mov edi, [0x510171F4]; call edi 
0x5101217b  # push eax; push edi; call [0x510171D8] 
0x51013bb0  # push eax; push edi; call esi 
0x510124b2  # push eax; push 0x80000000; call [0x51017018] 
0x510122bf  # push eax; push 0x80000000; call esi; push [ebp-0x54]; mov esi, eax; call edi 
0x510122bf  # push eax; push 0x80000000; call esi 
0x5101068f  # push eax; push 0x00001004; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x510171B0] 
0x51012271  # push eax; push 0x000F003F; push 0x00000000; push 0x5101784F; push ebx; call esi 
0x51012853  # push eax; push 0x00000000; push [ebp-0x78]; call [0x51017010] 
0x51015ab1  # push eax; push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x510170AC] 
0x51012294  # push eax; push 0x00000001; lea eax, [ebp+0x30]; push eax; push [ebp-0x54]; call [0x51017004] 
0x51012a28  # push eax; push 0x00000001; lea eax, [ebp-0x68]; push eax; push [ebp-0x6C]; call [0x51017004] 
0x51015e6c  # push eax; push 0x00000003; push 0x40000000; push 0x51018DEC; call [0x51017084] 
0x51012819  # push eax; je 0x51012833; push 0x80000001; call esi 
0x51014d53  # push eax; mov eax, [esi]; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x510170B8] 
0x51015079  # push eax; mov eax, [esi]; push [edi+eax]; call [0x51017194] 
0x510114a3  # push eax; mov eax, [ebp+0x08]; and eax, 0xFFFFFFFB; push eax; call [0x510208A4] 
0x51014ee1  # push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; mov byte [ebp-0x0C], 0x0D; push [edi+eax]; call [0x51017194] 
0x51014e8c  # push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; push [edi+eax]; call [0x51017194] 
0x5101521e  # push eax; mov eax, ecx; push eax; push esi; push 0x0000FDE9; call [0x510170E8] 
0x51012751  # push eax; lea eax, [ebp+0x24]; push eax; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x51013a93  # push eax; lea eax, [ebp-0x44]; push eax; call [0x510171F4] 
0x51011a2a  # push eax; lea eax, [ebp-0x40]; push eax; call ebx 
0x51012728  # push eax; lea eax, [ebp-0x3C]; push eax; call esi 
0x51015ad6  # push eax; lea eax, [ebp-0x0C]; push eax; push ecx; call [0x510170B0] 
0x51012755  # push eax; lea eax, [ebp-0x000001FC]; push eax; call esi 
0x51012174  # push eax; lea eax, [ebp-0x00000284]; push eax; push edi; call [0x510171D8] 
0x51012150  # push eax; lea eax, [ebp-0x00000284]; push eax; call [0x510171F4] 
0x510124d7  # push eax; lea eax, [ebp-0x00000084]; push eax; push [ebp-0x00000208]; mov [ebp-0x0000020C], 0x00000100; call [0x51017008] 
0x5101250e  # push eax; lea eax, [ebp-0x00000204]; push eax; call [0x51017090] 
0x51013ae7  # push eax; mov [ebp-0x20], 0x00000094; call [0x5101705C] 
0x510129b0  # push eax; test bl, 0x01; je 0x51012B38; push 0x80000001; call [0x51017014] 
0x51012e36  # push eax; test bl, 0x01; je 0x51012E55; push 0x80000001; call [0x51017018] 
0x51015635  # push eax; call [0x51017024]; pop ebp; ret 
0x51015635  # push eax; call [0x51017024] 
0x51015671  # push eax; call [0x51017028]; pop ebp; ret 
0x51015671  # push eax; call [0x51017028] 
0x51011057  # push eax; call [0x51017030]; jmp [0x51020700] 
0x51011d54  # push eax; call [0x51017034]; movzx eax, al; and eax, 0x01; ret 
0x5101155f  # push eax; call [0x51020760] 
0x510115a3  # push eax; call [0x51020764] 
0x510115f0  # push eax; call [0x51020770] 
0x51011638  # push eax; call [0x51020774] 
0x51011862  # push eax; call [0x5102077C] 
0x510160d7  # push eax; call [0x5101707C]; test eax, eax; jne 0x510160EC; call [0x510170FC] 
0x510160d7  # push eax; call [0x5101707C] 
0x51011c52  # push eax; call [0x51020788] 
0x51012515  # push eax; call [0x51017090] 
0x51011c8e  # push eax; call [0x51020798] 
0x51011cc7  # push eax; call [0x5102079C] 
0x51011cf2  # push eax; call [0x510207A0] 
0x510114aa  # push eax; call [0x510208A4] 
0x51015a85  # push eax; call [0x510170A8] 
0x51016030  # push eax; call [0x510171BC]; test eax, eax; jne 0x51016046; call [0x510170FC] 
0x51016030  # push eax; call [0x510171BC] 
0x51014adb  # push eax; call [0x510170C0]; mov [ebp-0x08], eax; cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x51014adb  # push eax; call [0x510170C0] 
0x51011a56  # push eax; call [0x510171D0]; push [0x5101BF10]; call [0x51017034] 
0x51011a56  # push eax; call [0x510171D0] 
0x51013b83  # push eax; call [0x510170D8] 
0x51011dd5  # push eax; call [0x510207E4] 
0x51011a13  # push eax; call [0x510171EC]; lea eax, [ebp-0x40]; push eax; call [0x510171F0] 
0x51012157  # push eax; call [0x510171F4]; add esp, 0x10; push 0x00000010; call [0x510171DC] 
0x51011d8f  # push eax; push [0x5101BF10]; call [0x51017030]; xor eax, eax; ret 
0x51013be3  # push eax; call [ebp-0x78] 
0x51010721  # push eax; push [ebp+0x0C]; call esi 
0x5101283d  # push eax; push [ebp-0x78]; call [0x5101700C] 
0x51012a2e  # push eax; push [ebp-0x6C]; call [0x51017004] 
0x51012e81  # push eax; push [ebp-0x64]; mov [ebp-0x68], edi; mov byte [ebp+0x000000A0], 0x00; call ebx 
0x510123e0  # push eax; push [ebp-0x54]; lea eax, [ebp-0x44]; push eax; push esi; call edi 
0x5101229a  # push eax; push [ebp-0x54]; call [0x51017004] 
0x510125ec  # push eax; push [ebp-0x14]; call [0x5101700C]; push [ebp-0x14]; call [0x51017000] 
0x510125ec  # push eax; push [ebp-0x14]; call [0x5101700C] 
0x51011a74  # push eax; push [ebp-0x10]; push [ebp-0x08]; push [ebp-0x0C]; push [ebp+0x08]; call [0x510206C8] 
0x51014e61  # push eax; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x510170E8] 
0x510124de  # push eax; push [ebp-0x00000208]; mov [ebp-0x0000020C], 0x00000100; call [0x51017008] 
0x51015ead  # push eax; call esi; pop esi; ret 
0x510110d3  # push eax; call esi; push 0x51018CE8; push [0x510207F8]; mov [0x51020738], eax; call esi 
0x51011553  # push ecx; add byte [esi+0x74], dl; adc byte [esi-0x01], dl; adc eax, 0x5102068C; push eax; call [0x51020760] 
0x51013a34  # push ecx; add [eax], eax; leave; ret 
0x51012c6b  # push ecx; add [eax], eax; div ecx; pop esi; retn 0x0004 
0x51013a2c  # push ecx; add [eax], eax; idiv ecx; imul eax, eax, 0x00015180; leave; ret 
0x51015a95  # push ecx; add dh, byte [ebp-0x26]; call [0x510170FC] 
0x510156ea  # push ecx; sete cl; mov eax, ecx; ret 
0x51011d5a  # push ecx; movzx eax, al; and eax, 0x01; ret 
0x51014a73  # push ecx; cmp edi, edi; dec ecx; ret 
0x51012895  # push ecx; push eax; cmp [ebp-0x7C], ecx; je 0x510128EE; push 0x80000001; call esi 
0x5101155e  # push ecx; push eax; call [0x51020760] 
0x51015a84  # push ecx; push eax; call [0x510170A8] 
0x51011a55  # push ecx; push eax; call [0x510171D0]; push [0x5101BF10]; call [0x51017034] 
0x51011a55  # push ecx; push eax; call [0x510171D0] 
0x51015abe  # push ecx; push eax; call [0x510170E8] 
0x51014e60  # push ecx; push eax; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x510170E8] 
0x51013c1a  # push ecx; push ebx; push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x51015808  # push ecx; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x510170E8] 
0x5101227d  # push ecx; push ebx; call esi 
0x5101141d  # push ecx; push esi; xor edi, edi; call [0x510170E4] 
0x51015b95  # push ecx; push esi; push 0x00000009; push [eax+0x04]; call [0x510170F0] 
0x51013aae  # push ecx; push esi; call [0x51017040] 
0x51011813  # push ecx; push esi; call [0x510171F4] 
0x5101109c  # push ecx; push edi; push 0x00008000; call esi 
0x510110b1  # push ecx; push edi; mov [0x510207F8], eax; call esi 
0x51010626  # push ecx; push edi; call [0x510170DC] 
0x5101156d  # push ecx; pop esi; leave; retn 0x0004 
0x51010e1f  # push ecx; push 0x51018924; push [0x510207F4]; call esi 
0x51011398  # push ecx; push 0x51018A34; push [0x510207F8]; call esi 
0x51010f87  # push ecx; push 0x510187C8; push [0x510207F4]; call esi 
0x51011230  # push ecx; push 0x51018BD0; push [0x510207F8]; call esi 
0x510110cd  # push ecx; push 0x51018CF8; push eax; call esi 
0x51010ff3  # push ecx; push 0x510207FC; call [0x510170C8] 
0x51015a7e  # push ecx; push 0x00000001; lea ecx, [ebp+0x08]; push ecx; push eax; call [0x510170A8] 
0x51011525  # push ecx; push 0x00000002; push 0x0000FFFF; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x510155a3  # push ecx; jl 0x51015574; pop edi; xor eax, eax; pop esi; ret 
0x5101215d  # push ecx; add esp, 0x10; push 0x00000010; call [0x510171DC] 
0x510118ae  # push ecx; or esi, 0xFFFFFFFF; cmp ecx, esi; jne 0x510118E3; push 0x0000276D; call [0x51020704] 
0x51011aad  # push ecx; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51010ffe  # push ecx; cmp eax, 0x01; jl 0x51010FF4; cmp [0x5101BF10], 0xFFFFFFFF; jne 0x51011018; call [0x510170D0] 
0x510113fa  # push ecx; cmp eax, 0x01; jl 0x510113F0; push [ebp+0x0C]; push [ebp+0x08]; call [0x5102073C] 
0x51012182  # push ecx; cmp eax, 0x02; jne 0x51012193; push 0x00000001; call [0x51017120] 
0x51011d4b  # push ecx; cmp eax, 0xFFFFFFFF; jne 0x51011D54; xor eax, eax; ret 
0x5101143a  # push ecx; test eax, eax; je 0x51011443; call eax 
0x51011544  # push ecx; test eax, eax; je 0x5101154E; push 0x00000001; push esi; call eax 
0x510113e5  # push ecx; test eax, eax; je 0x510113F0; lea ecx, [ebp-0x08]; push ecx; call eax 
0x5101285e  # push ecx; test eax, eax; je 0x5101283A; push [ebp-0x78]; mov ebx, [0x51017000]; call ebx 
0x510114e4  # push ecx; test eax, eax; je 0x510114CE; push 0x0000276D; call eax 
0x51011cd7  # push ecx; test eax, eax; jne 0x51011CDF; retn 0x0004 
0x5101144c  # push ecx; test eax, eax; jne 0x51011454; retn 0x000C 
0x51011ca1  # push ecx; test eax, eax; jne 0x51011CAA; pop ebp; retn 0x000C 
0x510115b3  # push ecx; test eax, eax; jne 0x510115BE; or eax, 0xFFFFFFFF; retn 0x000C 
0x51011d29  # push ecx; test eax, eax; jne 0x51011D34; jmp [0x5101702C] 
0x51011d3a  # push ecx; test eax, eax; jne 0x51011D45; jmp [0x510170FC] 
0x5101157a  # push ecx; test eax, eax; jne 0x51011586; or eax, 0xFFFFFFFF; pop ebp; retn 0x000C 
0x51011833  # push ecx; test eax, eax; jne 0x5101183F; or eax, 0xFFFFFFFF; pop ebp; retn 0x0010 
0x51011603  # push ecx; test eax, eax; jne 0x5101160F; or eax, 0xFFFFFFFF; pop ebp; retn 0x0014 
0x510160dd  # push ecx; test eax, eax; jne 0x510160EC; call [0x510170FC] 
0x51016036  # push ecx; test eax, eax; jne 0x51016046; call [0x510170FC] 
0x51015a8b  # push ecx; test eax, eax; jne 0x51015AF7; cmp [0x5101F970], 0x02; jne 0x51015A73; call [0x510170FC] 
0x51011042  # push ecx; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x5101220f  # push ecx; mov [ebp-0x58], eax; call edi 
0x51011a94  # push ecx; mov [ebp-0x18], eax; cmp [ebp-0x14], 0x00000000; je 0x510119A9; push [0x5101BF10]; call [0x51017034] 
0x51011a86  # push ecx; mov [ebp-0x14], eax; cmp eax, 0xFFFFFFFF; jne 0x51011A98; call [0x51020708] 
0x51014ae1  # push ecx; mov [ebp-0x08], eax; cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x51015c8e  # push ecx; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x51017078] 
0x510110a9  # push ecx; mov edi, eax; call [0x51017068]; push edi; mov [0x510207F8], eax; call esi 
0x510110a9  # push ecx; mov edi, eax; call [0x51017068] 
0x510159f4  # push ecx; lea eax, [eax+edi+0x0C]; push eax; call [0x51017024] 
0x51011a19  # push ecx; lea eax, [ebp-0x40]; push eax; call [0x510171F0] 
0x51010706  # push ecx; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x51012812  # push ecx; lea eax, [ebp+0x0000008C]; push eax; je 0x51012833; push 0x80000001; call esi 
0x51012a16  # push ecx; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x51013ba9  # push ecx; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x51011435  # push ecx; mov eax, [0x51020740]; test eax, eax; je 0x51011443; call eax 
0x51010f0f  # push ecx; mov [0x51020700], eax; call esi 
0x51010f21  # push ecx; mov [0x51020704], eax; call esi 
0x51010f33  # push ecx; mov [0x51020708], eax; call esi 
0x51010f45  # push ecx; mov [0x5102070C], eax; call esi 
0x51010f57  # push ecx; mov [0x51020710], eax; call esi 
0x51011012  # push ecx; mov [0x5101BF10], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x510206FC] 
0x51010f69  # push ecx; mov [0x51020714], eax; call esi 
0x51010f7b  # push ecx; mov [0x51020718], eax; call esi 
0x51010f9f  # push ecx; mov [0x51020720], eax; call esi 
0x51010fb1  # push ecx; mov [0x51020724], eax; call esi 
0x51010fc3  # push ecx; mov [0x51020728], eax; call esi 
0x51010eeb  # push ecx; mov [0x5102072C], eax; call esi 
0x51010fd5  # push ecx; mov [0x51020730], eax; call esi 
0x51010fe7  # push ecx; mov [0x51020734], eax; call esi; mov [0x510208A0], eax; push 0x510207FC; call [0x510170C8] 
0x51010fe7  # push ecx; mov [0x51020734], eax; call esi 
0x510110e0  # push ecx; mov [0x51020738], eax; call esi 
0x510110f2  # push ecx; mov [0x5102073C], eax; call esi 
0x51011104  # push ecx; mov [0x51020740], eax; call esi 
0x51011116  # push ecx; mov [0x51020744], eax; call esi 
0x51011128  # push ecx; mov [0x51020748], eax; call esi 
0x5101113a  # push ecx; mov [0x5102074C], eax; call esi 
0x5101114c  # push ecx; mov [0x51020750], eax; call esi 
0x5101115e  # push ecx; mov [0x51020754], eax; call esi 
0x51011182  # push ecx; mov [0x51020758], eax; call esi 
0x51011194  # push ecx; mov [0x5102075C], eax; call esi 
0x510111a6  # push ecx; mov [0x51020760], eax; call esi 
0x510111b8  # push ecx; mov [0x51020764], eax; call esi 
0x510111ca  # push ecx; mov [0x51020768], eax; call esi 
0x510111dc  # push ecx; mov [0x5102076C], eax; call esi 
0x510111ee  # push ecx; mov [0x51020770], eax; call esi 
0x51011212  # push ecx; mov [0x51020778], eax; call esi 
0x51015e7e  # push ecx; mov [0x5101F978], eax; ret 
0x51011224  # push ecx; mov [0x5102077C], eax; call esi 
0x51011248  # push ecx; mov [0x51020784], eax; call esi 
0x5101125a  # push ecx; mov [0x51020788], eax; call esi 
0x5101126c  # push ecx; mov [0x5102078C], eax; call esi 
0x5101127e  # push ecx; mov [0x51020790], eax; call esi 
0x51011290  # push ecx; mov [0x51020794], eax; call esi 
0x510112a2  # push ecx; mov [0x51020798], eax; call esi 
0x510112b4  # push ecx; mov [0x5102079C], eax; call esi 
0x510112c6  # push ecx; mov [0x510207A0], eax; call esi 
0x510112d8  # push ecx; mov [0x510207A4], eax; call esi 
0x51011170  # push ecx; mov [0x510208A4], eax; call esi 
0x510112ea  # push ecx; mov [0x510207A8], eax; call esi 
0x510112fc  # push ecx; mov [0x510207AC], eax; call esi 
0x5101130e  # push ecx; mov [0x510207B0], eax; call esi 
0x51010e01  # push ecx; mov [0x510206C8], eax; call esi 
0x51011332  # push ecx; mov [0x510207C8], eax; call esi 
0x51010e13  # push ecx; mov [0x510206CC], eax; call esi 
0x51011344  # push ecx; mov [0x510207CC], eax; call esi 
0x51011356  # push ecx; mov [0x510207D0], eax; call esi 
0x51010e37  # push ecx; mov [0x510206D4], eax; call esi 
0x51011368  # push ecx; mov [0x510207D4], eax; call esi 
0x51010e49  # push ecx; mov [0x510206D8], eax; call esi 
0x5101137a  # push ecx; mov [0x510207D8], eax; call esi 
0x51010e5b  # push ecx; mov [0x510206DC], eax; call esi 
0x5101138c  # push ecx; mov [0x510207DC], eax; call esi 
0x51010e6d  # push ecx; mov [0x510206E0], eax; call esi 
0x51010e7f  # push ecx; mov [0x510206E4], eax; call esi 
0x510113b0  # push ecx; mov [0x510207E4], eax; call esi 
0x51010e91  # push ecx; mov [0x510206E8], eax; call esi 
0x510113c2  # push ecx; mov [0x510207E8], eax; call esi 
0x51010ea3  # push ecx; mov [0x510206EC], eax; call esi 
0x510113d4  # push ecx; mov [0x510207EC], eax; call esi 
0x51010eb5  # push ecx; mov [0x510206F0], eax; call esi 
0x51010ec7  # push ecx; mov [0x510206F4], eax; call esi 
0x51010ed9  # push ecx; mov [0x510206F8], eax; call esi 
0x51010efd  # push ecx; mov [0x510206FC], eax; call esi 
0x51011916  # push ecx; test al, 0x01; je 0x51011928; push 0x00002734; call [0x51020704] 
0x51014a91  # push ecx; mov cl, 0x41; add [ecx-0x21], edx; inc edx; add [ecx-0x75], edx; call [ebp-0x75] 
0x51011418  # push ecx; mov esi, 0x51020800; push esi; xor edi, edi; call [0x510170E4] 
0x5101180e  # push ecx; mov esi, 0x51020664; push esi; call [0x510171F4] 
0x51015a2d  # push ecx; shl eax, 0x06; lea eax, [ecx+eax+0x0C]; push eax; call [0x51017028] 
0x510103bd  # push ecx; sar eax, 0x02; neg eax; pop esi; pop ebp; ret 
0x5101103c  # push ecx; call [0x51017020]; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x51011d95  # push ecx; call [0x51017030]; xor eax, eax; ret 
0x51011aa7  # push ecx; call [0x51017034]; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51011910  # push ecx; call [0x51017034]; test al, 0x01; je 0x51011928; push 0x00002734; call [0x51020704] 
0x5101384e  # push ecx; call [0x51017040] 
0x51015e78  # push ecx; call [0x51017084]; mov [0x5101F978], eax; ret 
0x51015e78  # push ecx; call [0x51017084] 
0x51015adb  # push ecx; call [0x510170B0] 
0x51010ff8  # push ecx; call [0x510170C8] 
0x5101105d  # push ecx; jmp [0x51020700] 
0x51011a5c  # push ecx; push [0x5101BF10]; call [0x51017034] 
0x51010f1b  # push ecx; push [0x510207F4]; mov [0x51020704], eax; call esi 
0x51010f2d  # push ecx; push [0x510207F4]; mov [0x51020708], eax; call esi 
0x51010f3f  # push ecx; push [0x510207F4]; mov [0x5102070C], eax; call esi 
0x51010f51  # push ecx; push [0x510207F4]; mov [0x51020710], eax; call esi 
0x51010f63  # push ecx; push [0x510207F4]; mov [0x51020714], eax; call esi 
0x51010f75  # push ecx; push [0x510207F4]; mov [0x51020718], eax; call esi 
0x51010f99  # push ecx; push [0x510207F4]; mov [0x51020720], eax; call esi 
0x51010fab  # push ecx; push [0x510207F4]; mov [0x51020724], eax; call esi 
0x51010fbd  # push ecx; push [0x510207F4]; mov [0x51020728], eax; call esi 
0x51010ee5  # push ecx; push [0x510207F4]; mov [0x5102072C], eax; call esi 
0x51010fcf  # push ecx; push [0x510207F4]; mov [0x51020730], eax; call esi 
0x51010fe1  # push ecx; push [0x510207F4]; mov [0x51020734], eax; call esi 
0x51010e31  # push ecx; push [0x510207F4]; mov [0x510206D4], eax; call esi 
0x51010e43  # push ecx; push [0x510207F4]; mov [0x510206D8], eax; call esi 
0x51010e55  # push ecx; push [0x510207F4]; mov [0x510206DC], eax; call esi 
0x51010e67  # push ecx; push [0x510207F4]; mov [0x510206E0], eax; call esi 
0x51010e79  # push ecx; push [0x510207F4]; mov [0x510206E4], eax; call esi 
0x51010e8b  # push ecx; push [0x510207F4]; mov [0x510206E8], eax; call esi 
0x51010e9d  # push ecx; push [0x510207F4]; mov [0x510206EC], eax; call esi 
0x51010eaf  # push ecx; push [0x510207F4]; mov [0x510206F0], eax; call esi 
0x51010ec1  # push ecx; push [0x510207F4]; mov [0x510206F4], eax; call esi 
0x51010ed3  # push ecx; push [0x510207F4]; mov [0x510206F8], eax; call esi 
0x51010ef7  # push ecx; push [0x510207F4]; mov [0x510206FC], eax; call esi 
0x51010e24  # push ecx; push [0x510207F4]; call esi 
0x510110da  # push ecx; push [0x510207F8]; mov [0x51020738], eax; call esi 
0x510110ec  # push ecx; push [0x510207F8]; mov [0x5102073C], eax; call esi 
0x510110fe  # push ecx; push [0x510207F8]; mov [0x51020740], eax; call esi 
0x51011110  # push ecx; push [0x510207F8]; mov [0x51020744], eax; call esi 
0x51011122  # push ecx; push [0x510207F8]; mov [0x51020748], eax; call esi 
0x51011134  # push ecx; push [0x510207F8]; mov [0x5102074C], eax; call esi 
0x51011146  # push ecx; push [0x510207F8]; mov [0x51020750], eax; call esi 
0x51011158  # push ecx; push [0x510207F8]; mov [0x51020754], eax; call esi 
0x5101117c  # push ecx; push [0x510207F8]; mov [0x51020758], eax; call esi 
0x5101118e  # push ecx; push [0x510207F8]; mov [0x5102075C], eax; call esi 
0x510111a0  # push ecx; push [0x510207F8]; mov [0x51020760], eax; call esi 
0x510111b2  # push ecx; push [0x510207F8]; mov [0x51020764], eax; call esi 
0x510111c4  # push ecx; push [0x510207F8]; mov [0x51020768], eax; call esi 
0x510111d6  # push ecx; push [0x510207F8]; mov [0x5102076C], eax; call esi 
0x510111e8  # push ecx; push [0x510207F8]; mov [0x51020770], eax; call esi 
0x510111fa  # push ecx; push [0x510207F8]; mov [0x51020774], eax; call esi 
0x5101121e  # push ecx; push [0x510207F8]; mov [0x5102077C], eax; call esi 
0x51011242  # push ecx; push [0x510207F8]; mov [0x51020784], eax; call esi 
0x51011254  # push ecx; push [0x510207F8]; mov [0x51020788], eax; call esi 
0x51011266  # push ecx; push [0x510207F8]; mov [0x5102078C], eax; call esi 
0x51011278  # push ecx; push [0x510207F8]; mov [0x51020790], eax; call esi 
0x5101128a  # push ecx; push [0x510207F8]; mov [0x51020794], eax; call esi 
0x5101129c  # push ecx; push [0x510207F8]; mov [0x51020798], eax; call esi 
0x510112ae  # push ecx; push [0x510207F8]; mov [0x5102079C], eax; call esi 
0x510112c0  # push ecx; push [0x510207F8]; mov [0x510207A0], eax; call esi 
0x510112d2  # push ecx; push [0x510207F8]; mov [0x510207A4], eax; call esi 
0x5101116a  # push ecx; push [0x510207F8]; mov [0x510208A4], eax; call esi 
0x510112e4  # push ecx; push [0x510207F8]; mov [0x510207A8], eax; call esi 
0x510112f6  # push ecx; push [0x510207F8]; mov [0x510207AC], eax; call esi 
0x51011308  # push ecx; push [0x510207F8]; mov [0x510207B0], eax; call esi 
0x5101131a  # push ecx; push [0x510207F8]; mov [0x510207B4], eax; call esi 
0x5101132c  # push ecx; push [0x510207F8]; mov [0x510207C8], eax; call esi 
0x5101133e  # push ecx; push [0x510207F8]; mov [0x510207CC], eax; call esi 
0x51011350  # push ecx; push [0x510207F8]; mov [0x510207D0], eax; call esi 
0x51011362  # push ecx; push [0x510207F8]; mov [0x510207D4], eax; call esi 
0x51011374  # push ecx; push [0x510207F8]; mov [0x510207D8], eax; call esi 
0x51011386  # push ecx; push [0x510207F8]; mov [0x510207DC], eax; call esi 
0x510113aa  # push ecx; push [0x510207F8]; mov [0x510207E4], eax; call esi 
0x510113bc  # push ecx; push [0x510207F8]; mov [0x510207E8], eax; call esi 
0x510113ce  # push ecx; push [0x510207F8]; mov [0x510207EC], eax; call esi 
0x51011235  # push ecx; push [0x510207F8]; call esi 
0x510152a4  # push ecx; push [ebp+0x10]; push [ebp-0x00001ACC]; push [eax]; call [0x51017194] 
0x510128b2  # push ecx; push [ebp-0x78]; mov esi, eax; call ebx 
0x51012b85  # push ecx; push [ebp-0x6C]; test eax, eax; je 0x51012BA1; call [0x51017000] 
0x51011017  # push ecx; push [ebp-0x30]; push [ebp+0x78]; call [0x510206FC] 
0x510125f5  # push ecx; push [ebp-0x14]; call [0x51017000] 
0x51014ad7  # push ecx; push [ebp-0x08]; push eax; call [0x510170C0] 
0x510124f4  # push ecx; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x510113ed  # push ecx; call eax; push 0x51020800; call [0x510170C8] 
0x510113ed  # push ecx; call eax 
0x51010e4e  # push ecx; call esi; push 0x51018900; push [0x510207F4]; mov [0x510206DC], eax; call esi 
0x510113b5  # push ecx; call esi; push 0x51018A08; push [0x510207F8]; mov [0x510207E8], eax; call esi 
0x51011301  # push ecx; call esi; push 0x51018B0C; push [0x510207F8]; mov [0x510207B0], eax; call esi 
0x510111cf  # push ecx; call esi; push 0x51018C0C; push [0x510207F8]; mov [0x5102076C], eax; call esi 
0x51010e3c  # push ecx; call esi; push 0x51018910; push [0x510207F4]; mov [0x510206D8], eax; call esi 
0x51010f4a  # push ecx; call esi; push 0x51018814; push [0x510207F4]; mov [0x51020710], eax; call esi 
0x51010e2a  # push ecx; call esi; push 0x51018918; push [0x510207F4]; mov [0x510206D4], eax; call esi 
0x510111bd  # push ecx; call esi; push 0x51018C1C; push [0x510207F8]; mov [0x51020768], eax; call esi 
0x510113a3  # push ecx; call esi; push 0x51018A20; push [0x510207F8]; mov [0x510207E4], eax; call esi 
0x510112ef  # push ecx; call esi; push 0x51018B20; push [0x510207F8]; mov [0x510207AC], eax; call esi 
0x51010f38  # push ecx; call esi; push 0x5101882C; push [0x510207F4]; mov [0x5102070C], eax; call esi 
0x510111ab  # push ecx; call esi; push 0x51018C2C; push [0x510207F8]; mov [0x51020764], eax; call esi 
0x51010e06  # push ecx; call esi; push 0x51018930; push [0x510207F4]; mov [0x510206CC], eax; call esi 
0x510112dd  # push ecx; call esi; push 0x51018B34; push [0x510207F8]; mov [0x510207A8], eax; call esi 
0x51011199  # push ecx; call esi; push 0x51018C3C; push [0x510207F8]; mov [0x51020760], eax; call esi 
0x51010f26  # push ecx; call esi; push 0x51018844; push [0x510207F4]; mov [0x51020708], eax; call esi 
0x5101137f  # push ecx; call esi; push 0x51018A48; push [0x510207F8]; mov [0x510207DC], eax; call esi 
0x510112cb  # push ecx; call esi; push 0x51018B48; push [0x510207F8]; mov [0x510207A4], eax; call esi 
0x51011187  # push ecx; call esi; push 0x51018C48; push [0x510207F8]; mov [0x5102075C], eax; call esi 
0x51011175  # push ecx; call esi; push 0x51018C58; push [0x510207F8]; mov [0x51020758], eax; call esi 
0x51010f14  # push ecx; call esi; push 0x5101885C; push [0x510207F4]; mov [0x51020704], eax; call esi 
0x510112b9  # push ecx; call esi; push 0x51018B5C; push [0x510207F8]; mov [0x510207A0], eax; call esi 
0x51011163  # push ecx; call esi; push 0x51018C60; push [0x510207F8]; mov [0x510208A4], eax; call esi 
0x5101136d  # push ecx; call esi; push 0x51018A64; push [0x510207F8]; mov [0x510207D8], eax; call esi 
0x51010fda  # push ecx; call esi; push 0x5101876C; push [0x510207F4]; mov [0x51020734], eax; call esi 
0x51010f02  # push ecx; call esi; push 0x5101886C; push [0x510207F4]; mov [0x51020700], eax; call esi 
0x510112a7  # push ecx; call esi; push 0x51018B6C; push [0x510207F8]; mov [0x5102079C], eax; call esi 
0x51011151  # push ecx; call esi; push 0x51018C6C; push [0x510207F8]; mov [0x51020754], eax; call esi 
0x51010fc8  # push ecx; call esi; push 0x51018778; push [0x510207F4]; mov [0x51020730], eax; call esi 
0x51010ef0  # push ecx; call esi; push 0x5101887C; push [0x510207F4]; mov [0x510206FC], eax; call esi 
0x5101113f  # push ecx; call esi; push 0x51018C7C; push [0x510207F8]; mov [0x51020750], eax; call esi 
0x5101135b  # push ecx; call esi; push 0x51018A80; push [0x510207F8]; mov [0x510207D4], eax; call esi 
0x51011295  # push ecx; call esi; push 0x51018B80; push [0x510207F8]; mov [0x51020798], eax; call esi 
0x51010ede  # push ecx; call esi; push 0x51018888; push [0x510207F4]; mov [0x5102072C], eax; call esi 
0x51010fb6  # push ecx; call esi; push 0x51018790; push [0x510207F4]; mov [0x51020728], eax; call esi 
0x5101112d  # push ecx; call esi; push 0x51018C90; push [0x510207F8]; mov [0x5102074C], eax; call esi 
0x51010ecc  # push ecx; call esi; push 0x51018894; push [0x510207F4]; mov [0x510206F8], eax; call esi 
0x51011283  # push ecx; call esi; push 0x51018B94; push [0x510207F8]; mov [0x51020794], eax; call esi 
0x51011349  # push ecx; call esi; push 0x51018A9C; push [0x510207F8]; mov [0x510207D0], eax; call esi 
0x51010fa4  # push ecx; call esi; push 0x510187A0; push [0x510207F4]; mov [0x51020724], eax; call esi 
0x51010eba  # push ecx; call esi; push 0x510188A0; push [0x510207F4]; mov [0x510206F4], eax; call esi 
0x51011271  # push ecx; call esi; push 0x51018BA0; push [0x510207F8]; mov [0x51020790], eax; call esi 
0x5101111b  # push ecx; call esi; push 0x51018CA4; push [0x510207F8]; mov [0x51020748], eax; call esi 
0x5101125f  # push ecx; call esi; push 0x51018BAC; push [0x510207F8]; mov [0x5102078C], eax; call esi 
0x51010f92  # push ecx; call esi; push 0x510187B0; push [0x510207F4]; mov [0x51020720], eax; call esi 
0x51010ea8  # push ecx; call esi; push 0x510188B0; push [0x510207F4]; mov [0x510206F0], eax; call esi 
0x51011337  # push ecx; call esi; push 0x51018AB8; push [0x510207F8]; mov [0x510207CC], eax; call esi 
0x5101124d  # push ecx; call esi; push 0x51018BBC; push [0x510207F8]; mov [0x51020788], eax; call esi 
0x51010e96  # push ecx; call esi; push 0x510188C4; push [0x510207F4]; mov [0x510206EC], eax; call esi 
0x510110f7  # push ecx; call esi; push 0x51018CC4; push [0x510207F8]; mov [0x51020740], eax; call esi 
0x5101123b  # push ecx; call esi; push 0x51018BC8; push [0x510207F8]; mov [0x51020784], eax; call esi 
0x51010e84  # push ecx; call esi; push 0x510188D4; push [0x510207F4]; mov [0x510206E8], eax; call esi 
0x51011325  # push ecx; call esi; push 0x51018AD4; push [0x510207F8]; mov [0x510207C8], eax; call esi 
0x510110e5  # push ecx; call esi; push 0x51018CD8; push [0x510207F8]; mov [0x5102073C], eax; call esi 
0x51011217  # push ecx; call esi; push 0x51018BDC; push [0x510207F8]; mov [0x5102077C], eax; call esi 
0x51010f6e  # push ecx; call esi; push 0x510187E0; push [0x510207F4]; mov [0x51020718], eax; call esi 
0x51010e72  # push ecx; call esi; push 0x510188E4; push [0x510207F4]; mov [0x510206E4], eax; call esi 
0x51011205  # push ecx; call esi; push 0x51018BE8; push [0x510207F8]; mov [0x51020778], eax; call esi 
0x51010e60  # push ecx; call esi; push 0x510188F0; push [0x510207F4]; mov [0x510206E0], eax; call esi 
0x51011313  # push ecx; call esi; push 0x51018AF0; push [0x510207F8]; mov [0x510207B4], eax; call esi 
0x510111f3  # push ecx; call esi; push 0x51018BF0; push [0x510207F8]; mov [0x51020774], eax; call esi 
0x51010f5c  # push ecx; call esi; push 0x510187F8; push [0x510207F4]; mov [0x51020714], eax; call esi 
0x510113c7  # push ecx; call esi; push 0x510189FC; push [0x510207F8]; mov [0x510207EC], eax; call esi 
0x510111e1  # push ecx; call esi; push 0x51018BFC; push [0x510207F8]; mov [0x51020770], eax; call esi 
0x51010f80  # push ecx; call esi; mov [0x5102071C], eax; push 0x510187C8; push [0x510207F4]; call esi 
0x51011229  # push ecx; call esi; mov [0x51020780], eax; push 0x51018BD0; push [0x510207F8]; call esi 
0x51010fec  # push ecx; call esi; mov [0x510208A0], eax; push 0x510207FC; call [0x510170C8] 
0x51010e18  # push ecx; call esi; mov [0x510206D0], eax; push 0x51018924; push [0x510207F4]; call esi 
0x51011391  # push ecx; call esi; mov [0x510207E0], eax; push 0x51018A34; push [0x510207F8]; call esi 
0x51011d33  # push ecx; jmp eax 
0x51015ad5  # push edx; push eax; lea eax, [ebp-0x0C]; push eax; push ecx; call [0x510170B0] 
0x5101289b  # push edx; push 0x80000001; call esi 
0x51013c1b  # push ebx; push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x510107e4  # push ebx; push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call [0x510170E8] 
0x510158d3  # push ebx; push 0xFFFFFFF6; call [0x510170B4] 
0x5101284f  # push ebx; lea eax, [ebp-0x74]; push eax; push 0x00000000; push [ebp-0x78]; call [0x51017010] 
0x51013c1c  # push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x51015072  # push ebx; lea eax, [ebp-0x00001AB8]; push eax; mov eax, [esi]; push [edi+eax]; call [0x51017194] 
0x51012249  # push ebx; call esi; push [ebp-0x54]; mov [ebp-0x58], eax; call edi 
0x51013aab  # push esp; jo 0x51013AAF; push ecx; push esi; call [0x51017040] 
0x5101086f  # push ebp; jnp 0x51010871; dec ecx; ret 
0x51014c26  # push ebp; loopne 0x51014C11; enter 0xFF5F, 0xFF; ret 
0x51014b19  # push ebp; cld; pop edi; pop esi; leave; ret 
0x5101141e  # push esi; xor edi, edi; call [0x510170E4] 
0x51015222  # push esi; push 0x0000FDE9; call [0x510170E8] 
0x51015b96  # push esi; push 0x00000009; push [eax+0x04]; call [0x510170F0] 
0x51015956  # push esi; jo 0x51015958; call [esi+0x56] 
0x51011555  # push esi; je 0x51011568; push esi; call [0x5102068C]; push eax; call [0x51020760] 
0x51011555  # push esi; je 0x51011568; push esi; call [0x5102068C] 
0x510135a9  # push esi; je 0x510135F0; push [ebp+0x0C]; call [0x51017040] 
0x51012149  # push esi; lea eax, [ebp-0x00000184]; push eax; lea eax, [ebp-0x00000284]; push eax; call [0x510171F4] 
0x5101152d  # push esi; mov [ebp-0x04], 0x00000004; call eax 
0x5101142f  # push esi; call [0x51017020]; mov eax, [0x51020740]; test eax, eax; je 0x51011443; call eax 
0x51015602  # push esi; call [0x51017024]; pop esi; pop ebp; ret 
0x51015602  # push esi; call [0x51017024] 
0x51013aa8  # push esi; call [0x51017054]; push esi; call [0x51017040] 
0x51013aa8  # push esi; call [0x51017054] 
0x51011558  # push esi; call [0x5102068C]; push eax; call [0x51020760] 
0x51011558  # push esi; call [0x5102068C] 
0x51015ab8  # push esi; call [0x510170AC]; push eax; call [0x510170E8] 
0x51015ab8  # push esi; call [0x510170AC] 
0x51011814  # push esi; call [0x510171F4] 
0x510107e5  # push esi; push [ebp-0x1C]; push edi; push [ebp+0x0C]; call [0x510170E8] 
0x5101154b  # push esi; call eax 
0x510129af  # push edi; push eax; test bl, 0x01; je 0x51012B38; push 0x80000001; call [0x51017014] 
0x51012e35  # push edi; push eax; test bl, 0x01; je 0x51012E55; push 0x80000001; call [0x51017018] 
0x5101109d  # push edi; push 0x00008000; call esi; push 0x51018D08; mov edi, eax; call [0x51017068] 
0x5101109d  # push edi; push 0x00008000; call esi 
0x5101238e  # push edi; mov edi, [0x510171F4]; call edi 
0x510110b2  # push edi; mov [0x510207F8], eax; call esi 
0x5101217c  # push edi; call [0x510171D8]; cmp eax, 0x02; jne 0x51012193; push 0x00000001; call [0x51017120] 
0x5101217c  # push edi; call [0x510171D8] 
0x51010627  # push edi; call [0x510170DC] 
0x51011412  # push edi; push [0x51020800]; mov esi, 0x51020800; push esi; xor edi, edi; call [0x510170E4] 
0x510107e9  # push edi; push [ebp+0x0C]; call [0x510170E8] 
0x5101080f  # push edi; push [ebp+0x0C]; call ebx 
0x5101192c  # push edi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x510206C8] 
0x510118f3  # push edi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call eax 
0x5101013d  # push edi; push [ebp+0x18]; push [ebp-0x1C]; push 0x00000001; push [ebp+0x1C]; call esi 
0x51010150  # push edi; push [ebp-0x2C]; push [ebp-0x20]; push [ebp+0x0C]; push [ebp+0x08]; call [0x510170E0] 
0x51010777  # push edi; push [ebp-0x24]; push [ebp-0x28]; push 0x00000001; push [ebp+0x08]; call ebx 
0x51011179  # pop eax; mov word [ecx], es; push ecx; push [0x510207F8]; mov [0x51020758], eax; call esi 
0x5101071d  # pop eax; lea eax, [ebp-0x18]; push eax; push [ebp+0x0C]; call esi 
0x5101291f  # pop ecx; inc eax; ret 
0x510160d6  # pop ecx; push eax; call [0x5101707C]; test eax, eax; jne 0x510160EC; call [0x510170FC] 
0x510160d6  # pop ecx; push eax; call [0x5101707C] 
0x5101602f  # pop ecx; push eax; call [0x510171BC]; test eax, eax; jne 0x51016046; call [0x510170FC] 
0x5101602f  # pop ecx; push eax; call [0x510171BC] 
0x51013e82  # pop ecx; pop ecx; cmp eax, 0xFFFFFFFF; jne 0x51013E8C; or [esi], eax; ret 
0x51013e83  # pop ecx; cmp eax, 0xFFFFFFFF; jne 0x51013E8C; or [esi], eax; ret 
0x51014070  # pop ecx; mov [ebp-0x0000026C], eax; cmp eax, ecx; ja 0x51014A2C; jmp [0x51014A7A+eax*4] 
0x51013cd7  # pop ecx; mov eax, esi; pop esi; pop ebx; leave; ret 
0x51013a29  # pop ecx; mov ecx, 0x00015180; idiv ecx; imul eax, eax, 0x00015180; leave; ret 
0x51013818  # pop ebx; pop ebp; retn 0x0014 
0x51012dcf  # pop ebx; pop edi; pop ebp; retn 0x0004 
0x51013193  # pop ebx; pop edi; leave; retn 0x0008 
0x51010f18  # pop esp; mov byte [ecx], al; push ecx; push [0x510207F4]; mov [0x51020704], eax; call esi 
0x510112bd  # pop esp; mov eax, [ecx]; push ecx; push [0x510207F8]; mov [0x510207A0], eax; call esi 
0x51015b8c  # pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x51013c6c  # pop ebp; or al, 0x75; sbb eax, 0xFF8D3BE8; call [ebx+0x53] 
0x51011ebe  # pop ebp; mov ah, 0x3B; je 0x51011FB1; push esi; call [0x51017040] 
0x51011f21  # pop ebp; mov eax, 0x4D8B1675; adc al, 0x3B; ret 
0x51013817  # pop esi; pop ebx; pop ebp; retn 0x0014 
0x51012dce  # pop esi; pop ebx; pop edi; pop ebp; retn 0x0004 
0x51013192  # pop esi; pop ebx; pop edi; leave; retn 0x0008 
0x51012d17  # pop esi; pop ebp; retn 0x0010 
0x5101339a  # pop esi; pop edi; retn 0x0004 
0x51015d35  # pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x51015365  # pop edi; xor bh, bh; dec ecx; ret 
0x510155a6  # pop edi; xor eax, eax; pop esi; ret 
0x51012dd0  # pop edi; pop ebp; retn 0x0004 
0x51013816  # pop edi; pop esi; pop ebx; pop ebp; retn 0x0014 
0x5101322b  # pop edi; pop esi; retn 0x000C 
0x51013194  # pop edi; leave; retn 0x0008 
0x51011562  # pushad; pop es; add dl, byte [ecx-0x15]; push es; call [0x5102068C] 
0x51011167  # pushad; mov word [ecx], es; push ecx; push [0x510207F8]; mov [0x510208A4], eax; call esi 
0x510155a0  # pushad; test [ecx], 0x5FCE7C51; xor eax, eax; pop esi; ret 
0x51015489  # popad; add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x5101219c  # bound edi, [edi]; dec ecx; retn 0x0010 
0x51011810  # push es; add dl, byte [ecx+0x56]; call [0x510171F4] 
0x510115a6  # pop es; add dl, byte [ecx-0x15]; salc; pop ebp; jmp eax 
0x510110ca  # jo 0x510110CE; push ecx; push 0x51018CF8; push eax; call esi 
0x51013ba6  # jo 0x51013BAA; push ecx; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x51011371  # mov al, byte [fs:ecx]; push ecx; push [0x510207F8]; mov [0x510207D8], eax; call esi 
0x51011e16  # push esi; call [0x51017040] 
0x51013129  # test byte [ebp+0x0C], 0x01; je 0x510131BC; lea eax, [esi+0x34]; push eax; call [0x51017040] 
0x51015b28  # mov word [eax], cx; xor eax, eax; pop esi; pop ebx; leave; ret 
0x51015a8f  # cmp [di], 0x70; stc; add [ecx+0x02], edx; jne 0x51015A73; call [0x510170FC] 
0x51015e6f  # push 0x40000000; push 0x51018DEC; call [0x51017084]; mov [0x5101F978], eax; ret 
0x51015e6f  # push 0x40000000; push 0x51018DEC; call [0x51017084] 
0x510124b3  # push 0x80000000; call [0x51017018] 
0x510122c0  # push 0x80000000; call esi; push [ebp-0x54]; mov esi, eax; call edi 
0x51013bdb  # push 0x00000100; lea eax, [ebp-0x74]; push eax; call [ebp-0x78] 
0x510113f0  # push 0x51020800; call [0x510170C8] 
0x5101109e  # push 0x00008000; call esi; push 0x51018D08; mov edi, eax; call [0x51017068] 
0x51010e51  # push 0x51018900; push [0x510207F4]; mov [0x510206DC], eax; call esi 
0x510129ba  # push 0x80000001; call [0x51017014] 
0x51012e3c  # push 0x80000001; call [0x51017018] 
0x5101281c  # push 0x80000001; call esi 
0x51010690  # push 0x00001004; push [ebp+0x08]; mov byte [ebp-0x06], 0x00; call [0x510171B0] 
0x510111cc  # push 0xFF510207; salc; push 0x51018C0C; push [0x510207F8]; mov [0x5102076C], eax; call esi 
0x510113b8  # push 0x51018A08; push [0x510207F8]; mov [0x510207E8], eax; call esi 
0x510110a5  # push 0x51018D08; mov edi, eax; call [0x51017068]; push edi; mov [0x510207F8], eax; call esi 
0x510110a5  # push 0x51018D08; mov edi, eax; call [0x51017068] 
0x51011304  # push 0x51018B0C; push [0x510207F8]; mov [0x510207B0], eax; call esi 
0x510111d2  # push 0x51018C0C; push [0x510207F8]; mov [0x5102076C], eax; call esi 
0x51010e3f  # push 0x51018910; push [0x510207F4]; mov [0x510206D8], eax; call esi 
0x51011bf0  # push 0x00002714; call [0x51020704] 
0x51010f4d  # push 0x51018814; push [0x510207F4]; mov [0x51020710], eax; call esi 
0x51010e2d  # push 0x51018918; push [0x510207F4]; mov [0x510206D4], eax; call esi 
0x510124a8  # push 0x00020019; push 0x00000000; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x51017018] 
0x510111c0  # push 0x51018C1C; push [0x510207F8]; mov [0x51020768], eax; call esi 
0x510113a6  # push 0x51018A20; push [0x510207F8]; mov [0x510207E4], eax; call esi 
0x510112f2  # push 0x51018B20; push [0x510207F8]; mov [0x510207AC], eax; call esi 
0x51010f3b  # push 0x5101882C; push [0x510207F4]; mov [0x5102070C], eax; call esi 
0x510111ae  # push 0x51018C2C; push [0x510207F8]; mov [0x51020764], eax; call esi 
0x5101191b  # push 0x00002734; call [0x51020704] 
0x51011399  # push 0x51018A34; push [0x510207F8]; call esi 
0x510112e0  # push 0x51018B34; push [0x510207F8]; mov [0x510207A8], eax; call esi 
0x5101119c  # push 0x51018C3C; push [0x510207F8]; mov [0x51020760], eax; call esi 
0x51012272  # push 0x000F003F; push 0x00000000; push 0x5101784F; push ebx; call esi 
0x5101223e  # push 0x000F003F; push 0x00000000; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x510125cf  # push 0x000F003F; push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x51017018] 
0x510122b5  # push 0x000F003F; push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x51010f29  # push 0x51018844; push [0x510207F4]; mov [0x51020708], eax; call esi 
0x51011382  # push 0x51018A48; push [0x510207F8]; mov [0x510207DC], eax; call esi 
0x510112ce  # push 0x51018B48; push [0x510207F8]; mov [0x510207A4], eax; call esi 
0x5101118a  # push 0x51018C48; push [0x510207F8]; mov [0x5102075C], eax; call esi 
0x51012279  # push 0x5101784F; push ebx; call esi 
0x51011178  # push 0x51018C58; push [0x510207F8]; mov [0x51020758], eax; call esi 
0x51010f17  # push 0x5101885C; push [0x510207F4]; mov [0x51020704], eax; call esi 
0x510112bc  # push 0x51018B5C; push [0x510207F8]; mov [0x510207A0], eax; call esi 
0x51011166  # push 0x51018C60; push [0x510207F8]; mov [0x510208A4], eax; call esi 
0x51011370  # push 0x51018A64; push [0x510207F8]; mov [0x510207D8], eax; call esi 
0x51010fdd  # push 0x5101876C; push [0x510207F4]; mov [0x51020734], eax; call esi 
0x51010f05  # push 0x5101886C; push [0x510207F4]; mov [0x51020700], eax; call esi 
0x510112aa  # push 0x51018B6C; push [0x510207F8]; mov [0x5102079C], eax; call esi 
0x51011154  # push 0x51018C6C; push [0x510207F8]; mov [0x51020754], eax; call esi 
0x510118b6  # push 0x0000276D; call [0x51020704] 
0x510114e9  # push 0x0000276D; call eax 
0x510110ae  # push 0x57510170; mov [0x510207F8], eax; call esi 
0x51010fcb  # push 0x51018778; push [0x510207F4]; mov [0x51020730], eax; call esi 
0x51010ef3  # push 0x5101887C; push [0x510207F4]; mov [0x510206FC], eax; call esi 
0x51011142  # push 0x51018C7C; push [0x510207F8]; mov [0x51020750], eax; call esi 
0x5101135e  # push 0x51018A80; push [0x510207F8]; mov [0x510207D4], eax; call esi 
0x51011298  # push 0x51018B80; push [0x510207F8]; mov [0x51020798], eax; call esi 
0x51010ee1  # push 0x51018888; push [0x510207F4]; mov [0x5102072C], eax; call esi 
0x51013c16  # push 0x5102088C; push ebx; push ebx; lea eax, [ebp-0x74]; push eax; call esi 
0x51010fb9  # push 0x51018790; push [0x510207F4]; mov [0x51020728], eax; call esi 
0x51011130  # push 0x51018C90; push [0x510207F8]; mov [0x5102074C], eax; call esi 
0x51010ecf  # push 0x51018894; push [0x510207F4]; mov [0x510206F8], eax; call esi 
0x51011286  # push 0x51018B94; push [0x510207F8]; mov [0x51020794], eax; call esi 
0x5101134c  # push 0x51018A9C; push [0x510207F8]; mov [0x510207D0], eax; call esi 
0x51010fa7  # push 0x510187A0; push [0x510207F4]; mov [0x51020724], eax; call esi 
0x51010ebd  # push 0x510188A0; push [0x510207F4]; mov [0x510206F4], eax; call esi 
0x51011274  # push 0x51018BA0; push [0x510207F8]; mov [0x51020790], eax; call esi 
0x5101111e  # push 0x51018CA4; push [0x510207F8]; mov [0x51020748], eax; call esi 
0x51011262  # push 0x51018BAC; push [0x510207F8]; mov [0x5102078C], eax; call esi 
0x51010f95  # push 0x510187B0; push [0x510207F4]; mov [0x51020720], eax; call esi 
0x51010eab  # push 0x510188B0; push [0x510207F4]; mov [0x510206F0], eax; call esi 
0x5101133a  # push 0x51018AB8; push [0x510207F8]; mov [0x510207CC], eax; call esi 
0x51011250  # push 0x51018BBC; push [0x510207F8]; mov [0x51020788], eax; call esi 
0x51010e99  # push 0x510188C4; push [0x510207F4]; mov [0x510206EC], eax; call esi 
0x510110fa  # push 0x51018CC4; push [0x510207F8]; mov [0x51020740], eax; call esi 
0x51010f88  # push 0x510187C8; push [0x510207F4]; call esi 
0x5101123e  # push 0x51018BC8; push [0x510207F8]; mov [0x51020784], eax; call esi 
0x51011231  # push 0x51018BD0; push [0x510207F8]; call esi 
0x51010e87  # push 0x510188D4; push [0x510207F4]; mov [0x510206E8], eax; call esi 
0x51011328  # push 0x51018AD4; push [0x510207F8]; mov [0x510207C8], eax; call esi 
0x510110e8  # push 0x51018CD8; push [0x510207F8]; mov [0x5102073C], eax; call esi 
0x5101121a  # push 0x51018BDC; push [0x510207F8]; mov [0x5102077C], eax; call esi 
0x51010f71  # push 0x510187E0; push [0x510207F4]; mov [0x51020718], eax; call esi 
0x51010e75  # push 0x510188E4; push [0x510207F4]; mov [0x510206E4], eax; call esi 
0x51011208  # push 0x51018BE8; push [0x510207F8]; mov [0x51020778], eax; call esi 
0x510110d6  # push 0x51018CE8; push [0x510207F8]; mov [0x51020738], eax; call esi 
0x51015223  # push 0x0000FDE9; call [0x510170E8] 
0x51015e74  # push 0x51018DEC; call [0x51017084]; mov [0x5101F978], eax; ret 
0x51015e74  # push 0x51018DEC; call [0x51017084] 
0x51010e63  # push 0x510188F0; push [0x510207F4]; mov [0x510206E0], eax; call esi 
0x51011316  # push 0x51018AF0; push [0x510207F8]; mov [0x510207B4], eax; call esi 
0x510111f6  # push 0x51018BF0; push [0x510207F8]; mov [0x51020774], eax; call esi 
0x51010f5f  # push 0x510187F8; push [0x510207F4]; mov [0x51020714], eax; call esi 
0x510110ce  # push 0x51018CF8; push eax; call esi 
0x51011038  # push 0x510207FC; call [0x51017020]; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x51011038  # push 0x510207FC; call [0x51017020] 
0x51010ff4  # push 0x510207FC; call [0x510170C8] 
0x510113ca  # push 0x510189FC; push [0x510207F8]; mov [0x510207EC], eax; call esi 
0x510111e4  # push 0x51018BFC; push [0x510207F8]; mov [0x51020770], eax; call esi 
0x51011528  # push 0x0000FFFF; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x51011b7a  # push 0xC483FFFF; or al, 0xA1; test byte [edi], al; add dl, byte [ecx+0x3B]; ret 
0x51011bbc  # push 0xC2C9FFFF; adc al, 0x00; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x51013a31  # imul eax, eax, 0x00015180; leave; ret 
0x51011055  # push 0x00000000; push eax; call [0x51017030]; jmp [0x51020700] 
0x51012277  # push 0x00000000; push 0x5101784F; push ebx; call esi 
0x51012243  # push 0x00000000; lea eax, [ebp+0x30]; push eax; push ebx; call esi 
0x510125d4  # push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call [0x51017018] 
0x510122ba  # push 0x00000000; lea eax, [ebp+0x30]; push eax; push 0x80000000; call esi 
0x510124ad  # push 0x00000000; lea eax, [ebp-0x44]; push eax; push 0x80000000; call [0x51017018] 
0x51012854  # push 0x00000000; push [ebp-0x78]; call [0x51017010] 
0x51015c02  # push 0x00000001; push esi; push 0x00000009; push [eax+0x04]; call [0x510170F0] 
0x51011549  # push 0x00000001; push esi; call eax 
0x51015ab2  # push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x510170AC] 
0x51012295  # push 0x00000001; lea eax, [ebp+0x30]; push eax; push [ebp-0x54]; call [0x51017004] 
0x51012a29  # push 0x00000001; lea eax, [ebp-0x68]; push eax; push [ebp-0x6C]; call [0x51017004] 
0x51015a7f  # push 0x00000001; lea ecx, [ebp+0x08]; push ecx; push eax; call [0x510170A8] 
0x51012188  # push 0x00000001; call [0x51017120] 
0x5101077e  # push 0x00000001; push [ebp+0x08]; call ebx 
0x51011526  # push 0x00000002; push 0x0000FFFF; push esi; mov [ebp-0x04], 0x00000004; call eax 
0x51015e6a  # push 0x00000003; push eax; push 0x00000003; push 0x40000000; push 0x51018DEC; call [0x51017084] 
0x51015e6d  # push 0x00000003; push 0x40000000; push 0x51018DEC; call [0x51017084]; mov [0x5101F978], eax; ret 
0x51015e6d  # push 0x00000003; push 0x40000000; push 0x51018DEC; call [0x51017084] 
0x51015b97  # push 0x00000009; push [eax+0x04]; call [0x510170F0] 
0x51012161  # push 0x00000010; call [0x510171DC] 
0x51015545  # push 0x0000001A; pop eax; pop esi; ret 
0x510158d4  # push 0xFFFFFFF6; call [0x510170B4] 
0x51015ec8  # push 0xFFFFFFFF; call [edi+0x57] 
0x51011c13  # push 0xFFFFFFFF; call eax 
0x51014a8e  # imul eax, [ecx+0x01], 0x51; mov cl, 0x41; add [ecx-0x21], edx; inc edx; add [ecx-0x75], edx; call [ebp-0x75] 
0x51011099  # insb; jo 0x5101109D; push ecx; push edi; push 0x00008000; call esi 
0x51010fde  # insb; xchg [ecx], eax; push ecx; push [0x510207F4]; mov [0x51020734], eax; call esi 
0x51010f06  # insb; mov byte [ecx], al; push ecx; push [0x510207F4]; mov [0x51020700], eax; call esi 
0x510112ab  # insb; mov eax, [ecx]; push ecx; push [0x510207F8]; mov [0x5102079C], eax; call esi 
0x51011155  # insb; mov word [ecx], es; push ecx; push [0x510207F8]; mov [0x51020754], eax; call esi 
0x510118b7  # insd; daa; add byte [eax], al; call [0x51020704] 
0x510114ea  # insd; daa; add byte [eax], al; call eax 
0x51013849  # outsd; test esi, esi; je 0x510138B9; push ecx; call [0x51017040] 
0x51011d58  # jo 0x51011D5B; push ecx; movzx eax, al; and eax, 0x01; ret 
0x51011d99  # jo 0x51011D9C; push ecx; xor eax, eax; ret 
0x51011a53  # jo 0x51011A56; push ecx; push eax; call [0x510171D0]; push [0x5101BF10]; call [0x51017034] 
0x51011a53  # jo 0x51011A56; push ecx; push eax; call [0x510171D0] 
0x51015abc  # jo 0x51015ABF; push ecx; push eax; call [0x510170E8] 
0x51013aac  # jo 0x51013AAF; push ecx; push esi; call [0x51017040] 
0x5101109a  # jo 0x5101109D; push ecx; push edi; push 0x00008000; call esi 
0x510110af  # jo 0x510110B2; push ecx; push edi; mov [0x510207F8], eax; call esi 
0x510110cb  # jo 0x510110CE; push ecx; push 0x51018CF8; push eax; call esi 
0x51011aab  # jo 0x51011AAE; push ecx; and eax, 0xFFFFFFFC; push eax; push [0x5101BF10]; call [0x51017030] 
0x510160db  # jo 0x510160DE; push ecx; test eax, eax; jne 0x510160EC; call [0x510170FC] 
0x51011040  # jo 0x51011043; push ecx; test eax, eax; jnl 0x5101104B; or eax, 0xFFFFFFFF; ret 
0x51014adf  # jo 0x51014AE2; push ecx; mov [ebp-0x08], eax; cmp eax, edi; jne 0x51014AFC; call [0x510170FC] 
0x51012a14  # jo 0x51012A17; push ecx; lea eax, [ebp+0x00000098]; push eax; call ebx 
0x51013ba7  # jo 0x51013BAA; push ecx; lea eax, [ebp+0x000000AC]; push eax; push edi; call esi 
0x51011433  # jo 0x51011436; push ecx; mov eax, [0x51020740]; test eax, eax; je 0x51011443; call eax 
0x51011010  # jo 0x51011013; push ecx; mov [0x5101BF10], eax; push [ebp-0x30]; push [ebp+0x78]; call [0x510206FC] 
0x51015e7c  # jo 0x51015E7F; push ecx; mov [0x5101F978], eax; ret 
0x51011914  # jo 0x51011917; push ecx; test al, 0x01; je 0x51011928; push 0x00002734; call [0x51020704] 
0x5101105b  # jo 0x5101105E; push ecx; jmp [0x51020700] 
0x510128b0  # jo 0x510128B3; push ecx; push [ebp-0x78]; mov esi, eax; call ebx 
0x51012b83  # jo 0x51012B86; push ecx; push [ebp-0x6C]; test eax, eax; je 0x51012BA1; call [0x51017000] 
0x510125f3  # jo 0x510125F6; push ecx; push [ebp-0x14]; call [0x51017000] 
0x510124f2  # jo 0x510124F5; push ecx; push [ebp-0x00000208]; mov esi, eax; call [0x51017000] 
0x51011d31  # jo 0x51011D34; push ecx; jmp eax 
0x5101580e  # jo 0x51015814; call [0x510170E8] 
0x51015b9a  # jo 0x51015BA0; call [0x510170F0] 
0x510115f3  # jo 0x510115FC; add dl, byte [ecx-0x15]; salc; pop ebp; jmp eax 
0x51013a8e  # jo 0x51013A9C; lea eax, [ebp-0x24]; push eax; lea eax, [ebp-0x44]; push eax; call [0x510171F4] 
0x51015af9  # jo 0x51015AF4; add [ecx+0x01], edx; add byte [eax], al; add bl, ch; jecxz 0x51015A8F; call [ebp-0x75] 
0x51015a92  # jo 0x51015A8D; add [ecx+0x02], edx; jne 0x51015A73; call [0x510170FC] 
0x5101579d  # jo 0x5101579C; pop edi; pop esi; pop ebx; leave; ret 
0x51015957  # jo 0x51015958; call [esi+0x56] 
0x5101215b  # jno 0x5101215E; push ecx; add esp, 0x10; push 0x00000010; call [0x510171DC] 
0x51012180  # jno 0x51012183; push ecx; cmp eax, 0x02; jne 0x51012193; push 0x00000001; call [0x51017120] 
0x51016034  # jno 0x51016037; push ecx; test eax, eax; jne 0x51016046; call [0x510170FC] 
0x51011a17  # jno 0x51011A1A; push ecx; lea eax, [ebp-0x40]; push eax; call [0x510171F0] 
0x51010704  # jno 0x51010707; push ecx; lea ecx, [ebp-0x18]; push ecx; push eax; call esi 
0x51011a5a  # jno 0x51011A5D; push ecx; push [0x5101BF10]; call [0x51017034] 
0x51012392  # jno 0x51012395; push ecx; call edi 
0x51013229  # jc 0x510131FA; pop edi; pop esi; retn 0x000C 
0x510131db  # jc 0x510131C5; xor eax, eax; retn 0x0004 
0x510156ba  # jc 0x510156BB; call [esi+0x56] 
0x51013845  # jnc 0x510137CC; sal byte [edi+ebp*2-0x7B], 0xF6; je 0x510138B9; push ecx; call [0x51017040] 
0x5101102e  # jnc 0x5101102F; inc [ebx-0x3D36933B]; or al, 0x00; push 0x510207FC; call [0x51017020] 
0x51012c1b  # je 0x51012C1F; mov [esi], eax; xor eax, eax; inc eax; pop esi; retn 0x000C 
0x51011bec  # je 0x51011BF0; mov [esi], ebx; push 0x00002714; call [0x51020704] 
0x51015eab  # je 0x51015EB0; push eax; call esi; pop esi; ret 
0x5101143d  # je 0x51011443; call eax 
0x51011547  # je 0x5101154E; push 0x00000001; push esi; call eax 
0x51013eaa  # je 0x51013EB2; cmp [ebp+0x0C], 0x00000000; jnle 0x51013E99; pop esi; pop ebp; ret 
0x510113e8  # je 0x510113F0; lea ecx, [ebp-0x08]; push ecx; call eax; push 0x51020800; call [0x510170C8] 
0x510113e8  # je 0x510113F0; lea ecx, [ebp-0x08]; push ecx; call eax 
0x51015e94  # je 0x51015E9E; cmp eax, 0xFFFFFFFE; je 0x51015E9E; push eax; call esi 
0x51014d75  # je 0x51014D7F; test bl, bl; je 0x51014FCF; call [0x510170BC] 
0x51011053  # je 0x5101105E; push 0x00000000; push eax; call [0x51017030]; jmp [0x51020700] 
0x51011d15  # je 0x51011D20; test eax, eax; jne 0x51011D0B; xor eax, eax; retn 0x0008 
0x5021b3e3  # add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x5021dbe5  # add byte [eax], al; add byte [eax+0x68], al; in al, dx; sub byte [edx], ah; push eax; call [0x5022010C] 
0x5021543e  # add byte [eax], al; add byte [eax-0x75], dl; ret 
0x50218e2d  # add byte [eax], al; add byte [edi+0x5B], bl; pop esi; leave; ret 
0x502137bd  # add byte [eax], al; add byte [eax-0x7AF0CEC8], al; retn 0x0000 
0x5021fdaa  # add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x5021bc70  # add byte [eax], al; add byte [ebx+0x7600087D], al; int 0x80 
0x5021c8ab  # add byte [eax], al; add byte [ebx+0x7500DC7D], al; pop ss; lea ebx, [esi+0x0C]; push ebx; call [0x50220088] 
0x5021b3db  # add byte [eax], al; add byte [ebx-0x55160038], al; add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x50218ad9  # add byte [eax], al; add byte [ebp+0x530B74F6], al; push [ebp-0x00000114]; call edi 
0x5021b3b1  # add byte [eax], al; add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x5021a3e5  # add byte [eax], al; add byte [ebx+0x15E8E445], cl; cmp esi, 0xFFFFFFFF; ret 
0x5021df8c  # add byte [eax], al; add byte [ebx-0x357C0BBB], cl; call ebx 
0x5021dc85  # add byte [eax], al; add byte [ebx+0x00001000], bh; push ebx; push 0x00000008; call [0x5022017C] 
0x5021dd98  # add byte [eax], al; add al, ch; xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x5021c06a  # add byte [eax], al; add al, ch; push eax; jne 0x5021C06F; call [ebx+0x53] 
0x5021a3ce  # add byte [eax], al; add al, ch; call [ecx+0x3089FFFE] 
0x5021882e  # add byte [eax], al; add bl, ch; mov byte [ebx], bh; ret 
0x5021c488  # add byte [eax], al; add bl, ch; jecxz 0x5021C419; call [ebp-0x75] 
0x50215b11  # add byte [eax], al; add bh, bh; jbe 0x50215B23; mov [esi+0x04], eax; push [edi+0x28]; call [edi+0x24] 
0x5021fa8b  # add byte [eax], al; add dh, byte [edx+ecx+0x3B]; sal [ebp+0x0F], 1; or eax, 0x00008000; ret 
0x5021f9f8  # add byte [eax], al; add al, 0x00; je 0x5021FA03; or eax, 0x00001000; ret 
0x5021de90  # add byte [eax], al; add eax, 0x00004000; pop ebp; ret 
0x5021c37a  # add byte [eax], al; xor eax, eax; pop ebp; ret 
0x5021dbe6  # add byte [eax], al; inc eax; push 0x502228EC; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021dbe6  # add byte [eax], al; inc eax; push 0x502228EC; call [0x5022010C] 
0x50213691  # add byte [eax], al; push eax; mov [ebx], eax; push [edi+0x28]; call [edi+0x20] 
0x50215893  # add byte [eax], al; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021dc8b  # add byte [eax], al; push ebx; push 0x00000008; call [0x5022017C]; push eax; call [0x5022009C] 
0x5021dc8b  # add byte [eax], al; push ebx; push 0x00000008; call [0x5022017C] 
0x502197ef  # add byte [eax], al; pop ecx; push eax; call [0x50220108] 
0x5021b447  # add byte [eax], al; pop ecx; push eax; call [0x50220168] 
0x50213793  # add byte [eax], al; pop ecx; pop ecx; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x502180bd  # add byte [eax], al; pop ecx; pop ebp; ret 
0x50214c07  # add byte [eax], al; pop ebx; ret 
0x50214b51  # add byte [eax], al; pop ebx; leave; ret 
0x50218e2e  # add byte [eax], al; pop edi; pop ebx; pop esi; leave; ret 
0x502135fd  # add byte [eax], al; push 0x00000001; push [edi+0x28]; call [edi+0x20] 
0x5021588a  # add byte [eax], al; push 0x00000004; lea eax, [eax+ecx+0x00000102]; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021fdab  # add byte [eax], al; sbb byte [edi+0x5E], 0x5B; leave; ret 
0x5021c8ac  # add byte [eax], al; cmp [ebp-0x24], 0x00000000; jne 0x5021C8CB; lea ebx, [esi+0x0C]; push ebx; call [0x50220088] 
0x50213764  # add byte [eax], al; add esp, 0x0C; xor eax, eax; pop esi; ret 
0x5021725e  # add byte [eax], al; add esp, 0x1C; push [ebp-0x0000024C]; mov [edi+0x20], eax; call [0x50220150] 
0x5021c6e3  # add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x50218ada  # add byte [eax], al; test esi, esi; je 0x50218AEB; push ebx; push [ebp-0x00000114]; call edi 
0x50216fd2  # add byte [eax], al; mov [ebp-0x00000268], eax; lea eax, [ebp-0x00000248]; push eax; push esi; call [0x5022015C] 
0x50213d86  # add byte [eax], al; mov [eax+0x00001698], ecx; pop esi; ret 
0x50213d7a  # add byte [eax], al; mov [eax+0x000016A0], ecx; mov [eax+0x000016A8], ecx; mov [eax+0x00001698], ecx; pop esi; ret 
0x50213d80  # add byte [eax], al; mov [eax+0x000016A8], ecx; mov [eax+0x00001698], ecx; pop esi; ret 
0x5021b3b2  # add byte [eax], al; mov eax, [ecx+0x08]; and [ecx+0x04], 0x00000000; mov [ecx], eax; pop ebp; ret 
0x502170f7  # add byte [eax], al; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x50220154] 
0x5021dc86  # add byte [eax], al; mov ebx, 0x00001000; push ebx; push 0x00000008; call [0x5022017C] 
0x50218445  # add byte [eax], al; fnclex; pop ebp; ret 
0x50214c2e  # add byte [eax], al; clc; mov word [ecx], dx; pop esi; pop ebx; ret 
0x50218f7a  # add byte [eax], al; call [0x50220160] 
0x5021a133  # add byte [eax], al; call [0x502200D4]; mov [ebp-0x10], eax; test eax, eax; jne 0x5021A176; call [0x50220028] 
0x5021a769  # add byte [eax], al; jmp [0x5021B166+eax*4] 
0x502138ea  # add byte [eax], al; jmp [0x50213BE1+eax*4] 
0x5021e9eb  # add byte [eax], al; jmp [0x5021F022+ecx*4] 
0x50215d9c  # add byte [eax], al; jmp [0x50216281+ecx*4] 
0x5021cc41  # add byte [eax], al; push [ebp-0x1C]; call [0x50220044] 
0x50215b12  # add byte [eax], al; push [esi+0x0C]; mov [esi+0x04], eax; push [edi+0x28]; call [edi+0x24] 
0x502166c8  # add byte [eax], al; push [esi+0x28]; call [esi+0x20] 
0x50218a9c  # add byte [eax], al; call edi 
0x5021683e  # add byte [ecx], al; pop edi; adc al, 0x2B; ret 
0x5021fb39  # add byte [edx], al; add bh, dh; ret 
0x5021fa8c  # add byte [edx], al; je 0x5021FA9A; cmp edx, ecx; jne 0x5021FAA3; or eax, 0x00008000; ret 
0x5021cab9  # add byte [eax+eax], al; add byte [ebx], bh; sar [edi+0x00000100], 0x7F; cmp esi, [eax+esi+0x3B]; ret 
0x5021fa25  # add byte [eax+eax], al; add dh, dh; retn 0x7402 
0x5021f9f9  # add byte [eax+eax], al; je 0x5021FA03; or eax, 0x00001000; ret 
0x5021de91  # add byte [0x00004000], al; pop ebp; ret 
0x5021a3cc  # add byte [ecx], cl; add byte [eax], al; add al, ch; call [ecx+0x3089FFFE] 
0x5021dd96  # add byte [0xE8000000], cl; xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x5021c068  # add byte [edi], cl; add byte [eax], al; add al, ch; push eax; jne 0x5021C06F; call [ebx+0x53] 
0x502130fd  # add byte [edi], cl; test [edx+0x33FFFFFD], edi; rcr byte [edi+0x5E], 0x5D; pop ebx; ret 
0x5021dc89  # add byte [eax], dl; add byte [eax], al; push ebx; push 0x00000008; call [0x5022017C] 
0x5021f9ff  # add byte [eax], dl; add byte [eax], al; ret 
0x5021882c  # add byte [edx], ah; add byte [eax], al; add bl, ch; mov byte [ebx], bh; ret 
0x5021bffc  # add byte [edx], ah; push eax; test eax, eax; je 0x5021C008; push 0x00000000; call eax 
0x5021a138  # add byte [edx], ah; push eax; mov [ebp-0x10], eax; test eax, eax; jne 0x5021A176; call [0x50220028] 
0x5021c8bb  # add byte [edx], ah; push eax; test byte [esi+0x04], 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x50218def  # add byte [ebx], ah; retn 0xC483 
0x5021cab5  # add byte [ebx], ah; retn 0x00B9 
0x50213377  # add byte [ebx], ch; retn 0x5150 
0x5021b3e5  # add byte [ebx], dh; fstp tword [ebx]; ret 
0x5021d4e3  # add byte [edx], bh; ret 
0x5021cabc  # add byte [ebx], bh; sar [edi+0x00000100], 0x7F; cmp esi, [eax+esi+0x3B]; ret 
0x5021c935  # add byte [ebx], bh; retn 0x1773 
0x5021fd51  # add byte [eax+0x00], al; add byte [esp+ecx+0x3B], dh; ret 
0x5021dbe7  # add byte [eax+0x68], al; in al, dx; sub byte [edx], ah; push eax; call [0x5022010C] 
0x50213692  # add byte [eax-0x77], dl; add edi, edi; jnbe 0x502136C1; call [edi+0x20] 
0x50215440  # add byte [eax-0x75], dl; ret 
0x50215894  # add byte [eax-0x01], dl; jnbe 0x502158C1; call [edi+0x20] 
0x5021dc8c  # add byte [ebx+0x6A], dl; or bh, bh; adc eax, 0x5022017C; push eax; call [0x5022009C] 
0x5021663e  # add byte [esi-0x75], dl; jne 0x5021665B; push 0x00000004; push 0x00000013; push [esi+0x28]; call [esi+0x20] 
0x502166be  # add byte [esi-0x75], dl; jne 0x502166EB; push 0x00000004; push 0x00000120; push [esi+0x28]; call [esi+0x20] 
0x502197f0  # add byte [ecx+0x50], bl; call [0x50220108]; test eax, eax; jne 0x50219807; call [0x50220028] 
0x502197f0  # add byte [ecx+0x50], bl; call [0x50220108] 
0x5021b448  # add byte [ecx+0x50], bl; call [0x50220168]; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021b448  # add byte [ecx+0x50], bl; call [0x50220168] 
0x5021dbd3  # add byte [ecx+0x59], bl; xor eax, eax; pop esi; pop ebp; ret 
0x502137a3  # add byte [ecx+0x59], bl; xor eax, eax; pop esi; ret 
0x5021885d  # add byte [ecx+0x59], bl; pop edi; pop esi; pop ebx; leave; ret 
0x50213794  # add byte [ecx+0x59], bl; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x502180be  # add byte [ecx+0x5D], bl; ret 
0x5021a543  # add byte [ecx+0x5E], bl; pop ebp; ret 
0x50217f84  # add byte [ecx-0x3D], bl; mov eax, 0x502270E0; ret 
0x5021808e  # add byte [ecx-0x15], bl; or al, byte [ebx-0x00A9DF3A]; adc eax, 0x50220088; pop esi; pop ebp; ret 
0x50214b52  # add byte [ebx-0x37], bl; ret 
0x5021db48  # add byte [ebp+0x5E], bl; pop edi; retn 0x0010 
0x5021c738  # add byte [esi+0x5D], bl; ret 
0x5021b588  # add byte [esi+0x74], bl; pop es; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50218e2f  # add byte [edi+0x5B], bl; pop esi; leave; ret 
0x5021dcb5  # add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50214b4a  # add byte [edi+0x5E], bl; mov [eax+0x000016AC], ecx; pop ebx; leave; ret 
0x502183b4  # add byte [edi-0x3D], bl; mov word [edi], dx; mov eax, [esp+0x08]; pop edi; ret 
0x50214c01  # add byte [esi-0x77], ah; mov byte [eax+0x5B000016], dh; ret 
0x5021a12f  # add byte [eax-0x17], ch; std; add byte [eax], al; call [0x502200D4] 
0x502135fe  # add byte [edx+0x01], ch; push [edi+0x28]; call [edi+0x20] 
0x5021588b  # add byte [edx+0x04], ch; lea eax, [eax+ecx+0x00000102]; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021fda6  # add byte [ebp+eax+0x0D], dh; add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x5021f9fb  # add byte [ebp+eax+0x0D], dh; add byte [eax], dl; add byte [eax], al; ret 
0x5021fd54  # add byte [esp+ecx+0x3B], dh; ret 
0x50218395  # add byte [edx+edx-0x09], dh; retn 0x0000 
0x5021fd4d  # add byte [ebx+ebx+0x3D], dh; add byte [eax+0x00], al; add byte [esp+ecx+0x3B], dh; ret 
0x50216768  # add byte [ebp+0x04], dh; cmp ebx, edi; jnbe 0x5021679C; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x502127aa  # add byte [ebp+0x06], dh; mov eax, [esi+0x08]; mov [esi+0x10], eax; pop edi; pop esi; ret 
0x5021c8b1  # add byte [ebp+0x17], dh; lea ebx, [esi+0x0C]; push ebx; call [0x50220088] 
0x50214004  # add byte [ebp-0x60], dh; pop edi; pop esi; pop ebx; leave; ret 
0x5021a5e7  # add byte [edi-0x2B], bh; pop esi; pop ebx; pop ebp; ret 
0x50214bc4  # add byte [edi-0x1A], bh; shr eax, 1; ret 
0x5021a59b  # add byte [edi-0x19], bh; pop esi; pop ebp; ret 
0x502180bb  # add byte [eax+0x5D590000], al; ret 
0x5021808b  # add byte [eax-0x14A70000], al; or al, byte [ebx-0x00A9DF3A]; adc eax, 0x50220088; pop esi; pop ebp; ret 
0x5021fa95  # add byte [eax-0x7C3D0000], al; enter 0xC340, 0x0D; inc eax; add byte [eax], 0x00; ret 
0x502137bf  # add byte [eax-0x7AF0CEC8], al; retn 0x0000 
0x5021fdac  # add byte [eax-0x36A4A1A1], al; ret 
0x5021a53c  # add byte [ebx+0x66830026], al; or byte [eax], al; pop ecx; pop esi; pop ebp; ret 
0x5021a204  # add byte [ebx+0x6A021045], al; add byte [ebp+0x6A50E845], cl; add cl, byte [ebp-0x74AF07BB]; pop es; push [esi+eax]; call [0x50220104] 
0x5021a53f  # add byte [ebx+0x59000866], al; pop esi; pop ebp; ret 
0x5021bc72  # add byte [ebx+0x7600087D], al; int 0x80 
0x5021c8ad  # add byte [ebx+0x7500DC7D], al; pop ss; lea ebx, [esi+0x0C]; push ebx; call [0x50220088] 
0x5021a8de  # add byte [ebx-0x00020F73], al; call [eax] 
0x5021a8ea  # add byte [ebx-0x00020F73], al; jmp [eax] 
0x50213765  # add byte [ebx-0x3FCCF33C], al; pop esi; ret 
0x502155eb  # add byte [ebx+0x5E5F0CC4], al; pop ebx; leave; ret 
0x50215b08  # add byte [ebx-0x3F7AEB3C], al; je 0x50215BD1; push [esi+0x0C]; mov [esi+0x04], eax; push [edi+0x28]; call [edi+0x24] 
0x5021c637  # add byte [ebx+0x5E5FFFC8], al; pop ebp; ret 
0x5021b3dd  # add byte [ebx-0x55160038], al; add byte [eax], al; add byte [ebx], dh; fstp tword [ebx]; ret 
0x50218adb  # add byte [ebp+0x530B74F6], al; push [ebp-0x00000114]; call edi 
0x5021819b  # add byte [ecx-0x3C74A1FA], cl; pop ebx; pop ebp; ret 
0x50216fd3  # add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56]; call [0x5022015C] 
0x50216fd3  # add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56] 
0x5021a96a  # add byte [ecx-0x00026B4B], cl; dec [ebp-0x00025B7B]; call [eax+0x0F] 
0x5021b3b3  # add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x5021b5e5  # add byte [ebx+0x4D8B0C45], cl; or byte [ecx+0x0CC48308], cl; leave; ret 
0x50216426  # add byte [ebx+0x4DFF5045], cl; cmp byte [ebx], al; ret 
0x5021a3e7  # add byte [ebx+0x15E8E445], cl; cmp esi, 0xFFFFFFFF; ret 
0x5021df8e  # add byte [ebx-0x357C0BBB], cl; call ebx 
0x502127f3  # add byte [ebx-0x6544FBBA], cl; add al, byte [eax]; add byte [ebx], bh; ret 
0x50216f29  # add byte [ebx-0x3B7CEBB3], cl; or al, 0x89; add [edi+0x5E], ebx; pop ebp; ret 
0x5021fb49  # add byte [ebx+0x4D8B0C7D], cl; or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x50219fe1  # add byte [ebp+0x6A50E845], cl; add [ebp-0x74AF00BB], ecx; pop es; push [esi+eax]; call [0x50220104] 
0x50219267  # add byte [ebp-0x001AD37B], cl; call [eax+0x53] 
0x50219436  # add byte [ebp-0x001AD37B], cl; call [eax-0x75]; ret 
0x50219436  # add byte [ebp-0x001AD37B], cl; call [eax-0x75] 
0x5021907d  # add byte [ebp-0x001AC37B], cl; call [eax+0x56] 
0x502190d1  # add byte [ebp-0x001AC37B], cl; call [eax+0x6A] 
0x502170f8  # add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x5021ab13  # add byte [ebp-0x00020B7B], cl; call [eax-0x73] 
0x50217019  # add byte [ebp-0x0001077B], cl; call [esi+0x50] 
0x5021949a  # add byte [ebp-0x001AD373], cl; call [ecx-0x01]; jne 0x502194B5; push [ebp-0x00001ACC]; push [eax]; call [0x502200A8] 
0x5021949a  # add byte [ebp-0x001AD373], cl; call [ecx-0x01] 
0x50219406  # add byte [ebp-0x00140F73], cl; call [ecx-0x73] 
0x502167f1  # add byte [eax-0x74AFDDA1], bl; inc esp; and al, 0x10; mov [eax], 0x50226F98; xor eax, eax; ret 
0x5021dc87  # add byte [ebx+0x00001000], bh; push ebx; push 0x00000008; call [0x5022017C]; push eax; call [0x5022009C] 
0x5021dc87  # add byte [ebx+0x00001000], bh; push ebx; push 0x00000008; call [0x5022017C] 
0x5021de8e  # add al, al; add byte [eax], al; add eax, 0x00004000; pop ebp; ret 
0x5021fa98  # add bl, al; or eax, 0x40; ret 
0x50218446  # add bl, bl; loop 0x502184A7; ret 
0x5021dd9a  # add al, ch; xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x50214799  # add al, ch; xor eax, 0x5FFFFFF9; pop esi; pop ebx; leave; ret 
0x5021c06c  # add al, ch; push eax; jne 0x5021C06F; call [ebx+0x53] 
0x5021a3d0  # add al, ch; call [ecx+0x3089FFFE] 
0x5021cc3d  # add cl, ch; je 0x5021CC45; add byte [eax], al; push [ebp-0x1C]; call [0x50220044] 
0x5021d96c  # add bl, ch; and al, 0x33; fstp tword [ebx]; ret 
0x5021c14b  # add bl, ch; sub byte [ebp+0x5750F845], cl; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x50218830  # add bl, ch; mov byte [ebx], bh; ret 
0x5021c48a  # add bl, ch; jecxz 0x5021C419; call [ebp-0x75] 
0x5021fa32  # add dh, dh; retn 0x7401 
0x5021fa28  # add dh, dh; retn 0x7402 
0x5021fa17  # add dh, dh; retn 0x7408 
0x5021fa41  # add bh, dh; retn 0x0000 
0x5021fb3b  # add bh, dh; ret 
0x50214c2f  # add al, bh; mov word [ecx], dx; pop esi; pop ebx; ret 
0x50218393  # add bh, bh; add byte [edx+edx-0x09], dh; retn 0x0000 
0x5021dd12  # add bh, bh; adc eax, 0x5022017C; push eax; call [0x50220030] 
0x5021a134  # add bh, bh; adc eax, 0x502200D4; mov [ebp-0x10], eax; test eax, eax; jne 0x5021A176; call [0x50220028] 
0x50219091  # add bh, bh; xor al, 0x07; call [0x502200A8] 
0x5021b1b0  # add bh, bh; jne 0x5021B1C0; push eax; call [0x50220118] 
0x5021cc42  # add bh, bh; jne 0x5021CC2A; call [0x50220044] 
0x50215b13  # add bh, bh; jbe 0x50215B23; mov [esi+0x04], eax; push [edi+0x28]; call [edi+0x24] 
0x502166c9  # add bh, bh; jbe 0x502166F5; call [esi+0x20] 
0x50215892  # add [eax], eax; add byte [eax-0x01], dl; jnbe 0x502158C1; call [edi+0x20] 
0x50217f82  # add [eax], eax; add byte [ecx-0x3D], bl; mov eax, 0x502270E0; ret 
0x50216424  # add [eax], eax; add byte [ebx+0x4DFF5045], cl; cmp byte [ebx], al; ret 
0x502127f1  # add [eax], eax; add byte [ebx-0x6544FBBA], cl; add al, byte [eax]; add byte [ebx], bh; ret 
0x502170f6  # add [eax], eax; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x50217017  # add [eax], eax; add byte [ebp-0x0001077B], cl; call [esi+0x50] 
0x50212621  # add [eax], eax; add cl, cl; ret 
0x5021fa3f  # add [eax], eax; add bh, dh; retn 0x0000 
0x502166c7  # add [eax], eax; add bh, bh; jbe 0x502166F5; call [esi+0x20] 
0x50218383  # add [ecx], eax; xor [ecx-0x7C], 0x843474D2; div byte [edi-0x09]; retn 0x0000 
0x5021c3c0  # add [ebx+eax*4], eax; loopne 0x5021C405; pop esi; pop ebp; ret 
0x5021c7f8  # add [eax+edx*2], ecx; call [0x50220084]; pop ebp; ret 
0x5021c7f8  # add [eax+edx*2], ecx; call [0x50220084] 
0x5021f95b  # add [edi], ecx; xchg eax, ebp; retn 0xCAFE 
0x5021dd16  # add [edx], esp; push eax; push eax; call [0x50220030] 
0x5021c446  # add [edx], esp; push eax; push eax; call [0x50220060] 
0x5021dc93  # add [edx], esp; push eax; push eax; call [0x5022009C] 
0x5021d062  # add [edx], esp; push eax; cmp eax, 0xFFFFFFFF; jne 0x5021D09E; call [0x50220028] 
0x50216c2d  # add [edx], esp; push eax; test eax, eax; jne 0x50216C3C; call [0x50220028] 
0x502197f6  # add [edx], esp; push eax; test eax, eax; jne 0x50219807; call [0x50220028] 
0x5021b44e  # add [edx], esp; push eax; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021b1b8  # add [edx], esp; push eax; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021dbf1  # add [edx], esp; push eax; mov [0x50227484], eax; ret 
0x5021d578  # add [ebx], esi; leave; cmp [0x50228214], eax; sete cl; mov eax, ecx; ret 
0x50218c76  # add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5021766f  # add [edx], edi; retn 0x0A74 
0x50217662  # add [edx], edi; retn 0x1774 
0x50212ac2  # add [esi], edi; add [esi+0x08], edi; add esp, 0x0C; mov eax, edi; pop edi; ret 
0x5021f97c  # add [eax-0x0A], eax; ret 
0x5021c58d  # add [esi+0x6A], edx; or edi, edi; jo 0x5021C598; call [0x502200D4] 
0x50216f31  # add [edi+0x5E], ebx; pop ebp; ret 
0x5021faba  # add [ebx+eax+0x6A], esi; adc byte [edx-0x0A], bl; ret 
0x50218c71  # add [esp+edx-0x73], esi; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5021c8c1  # add [ebx+ebx+0x53], esi; call [0x50220084] 
0x5021d03c  # add [esi+esi*2-0x01], esi; jne 0x5021D026; call [0x50220108] 
0x50216ecc  # add [ebp+0x04], esi; xor eax, eax; inc eax; ret 
0x5021c03f  # add [ebp-0x29], esi; xor eax, eax; pop ebp; ret 
0x50212ac4  # add [esi+0x08], edi; add esp, 0x0C; mov eax, edi; pop edi; ret 
0x5021c926  # add [ebx+0x22926C05], eax; push eax; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x50215033  # add [ebx+0x000016A0], ecx; pop ebx; ret 
0x5021c43d  # add [ebp+0x56500845], ecx; call [0x50220174]; push eax; call [0x50220060] 
0x5021c43d  # add [ebp+0x56500845], ecx; call [0x50220174] 
0x50219fe7  # add [ebp-0x74AF00BB], ecx; pop es; push [esi+eax]; call [0x50220104] 
0x5021d69a  # add [ebp+0x5351144D], ecx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x50220060] 
0x50219056  # add [ebp-0x001ABF73], ecx; call [ecx+0x50]; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x50220060] 
0x50219056  # add [ebp-0x001ABF73], ecx; call [ecx+0x50] 
0x50214c26  # add edi, edi; inc eax; adc al, 0x83; xor byte [esi+edx+0x66F80000], 0x89; adc [esi+0x5B], ebx; ret 
0x50215d2e  # add edi, edi; jo 0x50215D5A; call [eax+0x20] 
0x502154f3  # add edi, edi; jbe 0x5021551F; call [esi+0x20] 
0x502127f9  # add al, byte [eax]; add byte [ebx], bh; ret 
0x5021ab11  # add al, byte [eax]; add byte [ebp-0x00020B7B], cl; call [eax-0x73] 
0x5021fa15  # add al, byte [eax]; add dh, dh; retn 0x7408 
0x502183b3  # add al, byte [eax]; pop edi; ret 
0x50215891  # add al, byte [ecx]; add byte [eax], al; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021baae  # add al, byte [ebx]; ret 
0x50214b47  # add al, byte [eax+eax]; add byte [edi+0x5E], bl; mov [eax+0x000016AC], ecx; pop ebx; leave; ret 
0x5021f9f2  # add cl, byte [ebx]; retn 0xF75E 
0x5021fa1c  # add cl, byte [ebx]; ret 
0x502122b8  # add ch, byte [ebx]; retn 0x558B 
0x50219836  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5D; ret 
0x50216c3b  # add dh, byte [ebx]; rol byte [ebp+0x500C74C0], 0xE8; mov al, byte [0x59FFFEC9]; or eax, 0xFFFFFFFF; pop ebp; ret 
0x50219806  # add dh, byte [ebx]; call [esi-0x18] 
0x5021eaee  # add al, byte [edx+0x3A]; ret 
0x5021fa8d  # add dh, byte [edx+ecx+0x3B]; sal [ebp+0x0F], 1; or eax, 0x00008000; ret 
0x502135f7  # add dh, byte [edi-0x66]; push 0x000016B8; push 0x00000001; push [edi+0x28]; call [edi+0x20] 
0x50213653  # add cl, byte [ecx-0x76ACDBA2]; inc esi; push eax; push [edi+0x28]; call [edi+0x20] 
0x50217306  # add cl, byte [ebx-0x36A00339]; ret 
0x5021a210  # add cl, byte [ebp-0x74AF07BB]; pop es; push [esi+eax]; call [0x50220104] 
0x5021fad7  # add dh, dh; ret 
0x50213662  # add bh, bh; jbe 0x5021368A; mov [esi+0x30], eax; push [edi+0x28]; call [edi+0x20] 
0x50213670  # add bh, bh; jbe 0x502136B8; mov [esi+0x38], eax; push [edi+0x28]; call [edi+0x20] 
0x50215889  # add eax, [eax]; add byte [edx+0x04], ch; lea eax, [eax+ecx+0x00000102]; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021fda4  # add ecx, [eax]; add byte [ebp+eax+0x0D], dh; add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x5021a574  # add ecx, [ecx]; push es; ret 
0x5021ca11  # add ebp, [ebx]; ret 
0x5021a06f  # add eax, [ebx-0x75]; ret 
0x5021dbe0  # add edx, [eax+0x6A]; add ebp, [eax+0x00]; add byte [eax], al; inc eax; push 0x502228EC; call [0x5022010C] 
0x5021d050  # add edx, [eax-0x01]; jne 0x5021D045; and edi, 0x7FFFFFFF; push edi; push [ebp+0x0C]; call [0x5022010C] 
0x5021dc21  # add edx, [eax-0x01]; salc; pop esi; ret 
0x50211274  # add edx, [esi+0x7E]; xor al, 0x83; retn 0xEBFC 
0x5021dbe3  # add ebp, [eax+0x00]; add byte [eax], al; inc eax; push 0x502228EC; call [0x5022010C] 
0x5021388a  # add ebp, [edx-0x06]; pop eax; pop edi; pop esi; pop ebx; ret 
0x50212a78  # add ebp, [edx-0x02]; pop eax; pop edi; pop esi; ret 
0x5021502f  # add eax, [ebx-0x74FEEE3F]; mov al, byte [0x5B000016]; ret 
0x5021273e  # add ecx, [ecx+0x5E5F1C47]; pop ebx; leave; ret 
0x5021966f  # add ecx, [ebx+0x5D5E1040]; ret 
0x50214bba  # add eax, eax; dec [esp+0x08]; cmp [esp+0x08], 0x00000000; jnle 0x50214BAD; shr eax, 1; ret 
0x50217e03  # add eax, ecx; pop esi; pop edi; pop ebx; leave; ret 
0x5021eae9  # add edi, edi; inc ebp; mov al, 0x8A; add al, byte [edx+0x3A]; ret 
0x5021b324  # add edi, edi; inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x50213695  # add edi, edi; jnbe 0x502136C1; call [edi+0x20] 
0x5021caba  # add al, 0x00; add byte [ebx], bh; sar [edi+0x00000100], 0x7F; cmp esi, [eax+esi+0x3B]; ret 
0x50214b48  # add al, 0x00; add byte [edi+0x5E], bl; mov [eax+0x000016AC], ecx; pop ebx; leave; ret 
0x5021fa26  # add al, 0x00; add dh, dh; retn 0x7402 
0x5021cc40  # add al, 0x00; add bh, bh; jne 0x5021CC2A; call [0x50220044] 
0x50212d7b  # add al, 0x00; jne 0x50212C96; pop esi; pop ebx; leave; ret 
0x5021f9fa  # add al, 0x00; je 0x5021FA03; or eax, 0x00001000; ret 
0x5021b3b9  # add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x5021c8c0  # add al, 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x5021b333  # add al, 0x06; add eax, 0x20; push eax; call [0x5022004C] 
0x50219ce8  # add al, 0x06; add eax, 0x20; push eax; call [0x50220088] 
0x50212e6e  # add al, 0x0F; xchg eax, esp; retn 0x8B52 
0x50216ece  # add al, 0x33; rol byte [eax-0x3D], 0x33; rol bl, 0x8B; call [ebp-0x75] 
0x50215502  # add al, 0x33; shr bl, 0x6F; push 0x000005A0; push 0x00000008; push [esi+0x28]; call [esi+0x20] 
0x50213735  # add al, 0x33; sar byte [ebx], cl; retn 0x3174 
0x502152f3  # add al, 0x3B; retn 0x1B77 
0x5021676a  # add al, 0x3B; fbstp [edi+0x2D]; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x5021a75b  # add al, 0x59; mov [ebp-0x0000026C], eax; cmp eax, ecx; ja 0x5021B118; jmp [0x5021B166+eax*4] 
0x50219937  # add al, 0x5E; pop ebp; ret 
0x502166c4  # add al, 0x68; and byte [ecx], al; add byte [eax], al; push [esi+0x28]; call [esi+0x20] 
0x50216644  # add al, 0x6A; adc edi, edi; jbe 0x50216672; call [esi+0x20] 
0x5021fa21  # add al, 0x74; add eax, 0x0004000D; add dh, dh; retn 0x7402 
0x5021549d  # add al, 0x74; add eax, 0x7505F883; or edi, edi; jbe 0x502154B4; push [edi+0x28]; call [edi+0x24] 
0x50218d98  # add al, 0x7E; sbb eax, 0x75FF5057; or al, 0xE8; ret 
0x5021cc26  # add al, 0x80; and dh, bh; call [0x50220028] 
0x5021ca08  # add al, 0x80; dec ebp; inc [eax-0x1F7C3E75]; add ebp, [ebx]; ret 
0x5021843c  # add al, 0x82; and dl, byte [eax+0x74]; add eax, 0x003B34E8; add bl, bl; loop 0x502184A7; ret 
0x50211451  # add al, 0x83; retn 0xFF04 
0x50219799  # add al, 0x83; enter 0x5FFF, 0x5E; pop ebp; ret 
0x5021c3c1  # add al, 0x83; loopne 0x5021C405; pop esi; pop ebp; ret 
0x5021cc17  # add al, 0x85; adc byte [edx-0x197CAFDE], 0x1F; shl esi, 0x06; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x50220028] 
0x5021c7b4  # add al, 0x85; adc byte [edx+0x448D5022], 0x38; or al, 0x50; call [0x50220088] 
0x502162ac  # add al, 0x8B; inc esp; and al, 0x0C; push [eax+0x28]; call [eax+0x24] 
0x5021d8a2  # add al, 0x8B; retn 0x02EB 
0x5021a6de  # add al, 0x8D; adc byte [edx+0x02EB5022], 0x8B; retn 0x40F6 
0x5021f985  # add al, 0xF6; ret 
0x50215b19  # add al, 0xFF; jnbe 0x50215B45; call [edi+0x24] 
0x50217b21  # add eax, 0x8B000000; inc ebp; in al, 0xEB; ret 
0x5021de92  # add eax, 0x00004000; pop ebp; ret 
0x5021fda8  # add eax, 0x0000000D; sbb byte [edi+0x5E], 0x5B; leave; ret 
0x5021fa23  # add eax, 0x0004000D; add dh, dh; retn 0x7402 
0x5021fa2d  # add eax, 0x0008000D; add dh, dh; retn 0x7401 
0x5021d57c  # add eax, 0x50228214; sete cl; mov eax, ecx; ret 
0x50215e18  # add eax, 0xEB48C22B; add eax, 0x2B2C478B; retn 0x7D83 
0x50216087  # add eax, 0xEB48C22B; add eax, 0x2B2C478B; retn 0xC085 
0x502160b2  # add eax, 0xEB48C22B; add eax, 0x2B2C478B; retn 0x4F8B 
0x5021bfda  # add eax, 0xC940C033; ret 
0x5021c4af  # add eax, 0x8966C933; or byte [ebx], dh; rcr byte [esi+0x5B], 0xC9; ret 
0x50216ec9  # add eax, 0x75015038; add al, 0x33; rol byte [eax-0x3D], 0x33; rol bl, 0x8B; call [ebp-0x75] 
0x5021ca03  # add eax, 0x74E04539; add al, 0x80; dec ebp; inc [eax-0x1F7C3E75]; add ebp, [ebx]; ret 
0x5021c002  # add eax, 0xD0FF006A; ret 
0x50217fd7  # add eax, 0x5E581A6A; ret 
0x5021c928  # add eax, 0x5022926C; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x502154a2  # add eax, 0x76FF0B75; or al, 0xFF; jnbe 0x502154D3; call [edi+0x24] 
0x5021bfd8  # add eax, 0xC033057A; inc eax; leave; ret 
0x5021c7ac  # add eax, 0xC11FE783; out 0x06, eax; mov eax, [0x50229280+eax*4]; lea eax, [eax+edi+0x0C]; push eax; call [0x50220088] 
0x5021c03c  # add eax, 0x7501F883; xlatb; xor eax, eax; pop ebp; ret 
0x5021549f  # add eax, 0x7505F883; or edi, edi; jbe 0x502154B4; push [edi+0x28]; call [edi+0x24] 
0x50215e1d  # add eax, 0x2B2C478B; retn 0x7D83 
0x5021608c  # add eax, 0x2B2C478B; retn 0xC085 
0x502160b7  # add eax, 0x2B2C478B; retn 0x4F8B 
0x502152ee  # add eax, 0x468DD18B; add al, 0x3B; retn 0x1B77 
0x5021c437  # add eax, 0x50F4458D; push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x50220174] 
0x5021aa8c  # add eax, 0xFFFFFFB9; jnle 0x5021AA16; mov [edi+esi*8], 0xFFFDF085; call [eax] 
0x5021a6d9  # add eax, 0x0306E0C1; add al, 0x8D; adc byte [edx+0x02EB5022], 0x8B; retn 0x40F6 
0x50218441  # add eax, 0x003B34E8; add bl, bl; loop 0x502184A7; ret 
0x50216fce  # add eax, 0x001A97E8; add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56]; call [0x5022015C] 
0x50216fce  # add eax, 0x001A97E8; add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56] 
0x5021dbce  # add eax, 0x001ED0E8; add byte [ecx+0x59], bl; xor eax, eax; pop esi; pop ebp; ret 
0x5021db59  # push es; shrd eax, edx, cl; shr edx, cl; ret 
0x5021c3bc  # push es; movsx eax, byte [ecx+eax+0x04]; and eax, 0x40; pop esi; pop ebp; ret 
0x5021819d  # push es; pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x5021a597  # push es; cmp [ebp+0x0C], 0x00000000; jnle 0x5021A585; pop esi; pop ebp; ret 
0x5021b334  # push es; add eax, 0x20; push eax; call [0x5022004C] 
0x50219ce9  # push es; add eax, 0x20; push eax; call [0x50220088] 
0x50219931  # push es; mov [esi+0x08], eax; mov [esi+0x04], eax; pop esi; pop ebp; ret 
0x5021c7b2  # push es; mov eax, [0x50229280+eax*4]; lea eax, [eax+edi+0x0C]; push eax; call [0x50220088] 
0x502127ac  # push es; mov eax, [esi+0x08]; mov [esi+0x10], eax; pop edi; pop esi; ret 
0x5021c7f5  # push es; lea eax, [ecx+eax+0x0C]; push eax; call [0x50220084]; pop ebp; ret 
0x5021c7f5  # push es; lea eax, [ecx+eax+0x0C]; push eax; call [0x50220084] 
0x5021cc22  # push es; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x50220028] 
0x5021a576  # push es; ret 
0x50219ff0  # push es; call [0x50220104]; test eax, eax; jne 0x5021A005; call [0x50220028] 
0x50219f38  # push es; call [0x50220104] 
0x50218f52  # push es; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x50220164] 
0x50219278  # push es; push [edi+eax]; call [0x502200A8] 
0x50216e55  # pop es; or eax, edi; pop edi; pop esi; pop ebp; ret 
0x50218f55  # pop es; mov [ebp-0x00001AE0], ecx; call [0x50220164] 
0x5021de81  # pop es; mov eax, 0x00008000; pop ebp; ret 
0x50219094  # pop es; call [0x502200A8] 
0x50219fed  # pop es; push [esi+eax]; call [0x50220104]; test eax, eax; jne 0x5021A005; call [0x50220028] 
0x50219f35  # pop es; push [esi+eax]; call [0x50220104] 
0x5021c933  # or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x5021a8dc  # or byte [eax], al; add byte [ebx-0x00020F73], al; call [eax] 
0x5021a8e8  # or byte [eax], al; add byte [ebx-0x00020F73], al; jmp [eax] 
0x5021fa30  # or byte [eax], al; add dh, dh; retn 0x7401 
0x5021a542  # or byte [eax], al; pop ecx; pop esi; pop ebp; ret 
0x5021a5e6  # or byte [eax], al; jnle 0x5021A5BF; pop esi; pop ebx; pop ebp; ret 
0x50214bc3  # or byte [eax], al; jnle 0x50214BAD; shr eax, 1; ret 
0x50215890  # or byte [edx], al; add [eax], eax; add byte [eax-0x01], dl; jnbe 0x502158C1; call [edi+0x20] 
0x5021c517  # or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x50218e2a  # or byte [0x000000FF], ah; pop edi; pop ebx; pop esi; leave; ret 
0x5021577b  # or byte [ebx], ch; retn 0x8948 
0x50215d8b  # or byte [ebx], ch; retn 0xE948 
0x5021c4b4  # or byte [ebx], dh; rcr byte [esi+0x5B], 0xC9; ret 
0x5021ba6f  # or byte [ebx], bh; retn 0x860F 
0x50217814  # or byte [ebx], bh; ret 
0x5021dc7f  # or byte [ebx], bh; jbe 0x5021DD44; mov ebx, 0x00001000; push ebx; push 0x00000008; call [0x5022017C] 
0x5021c440  # or byte [eax+0x56], dl; call [0x50220174]; push eax; call [0x50220060] 
0x5021c440  # or byte [eax+0x56], dl; call [0x50220174] 
0x5021c51e  # or byte [ecx+0x56], dl; push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x50211270  # or byte [ebx-0x7D], dl; stc; add edx, [esi+0x7E]; xor al, 0x83; retn 0xEBFC 
0x502177b0  # or byte [esi-0x18], dl; sbb cl, byte [ecx]; add byte [eax], al; pop ecx; ret 
0x502154ee  # or byte [edi+0x6A], dl; inc eax; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021d9d8  # or byte [ebx-0x37], bl; ret 
0x502183a7  # or byte [edi-0x3D], bl; mov word [edi], dx; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x502183bd  # or byte [edi-0x3D], bl; mov byte [edi], dl; mov eax, [esp+0x08]; pop edi; ret 
0x5021d526  # or byte [esi+0x0B], ah; retn 0x0F46 
0x5021fa1a  # or byte [edx+eax+0x0B], dh; ret 
0x50218782  # or byte [ebp+0x5B], dh; push ebx; push ebx; push ebx; push eax; call esi 
0x502112db  # or byte [ebp-0x2D], bh; pop esi; pop ebx; leave; ret 
0x502145df  # or byte [ecx-0x0001003E], al; call ebx 
0x50214bbf  # or byte [ebx+0x0008247C], al; jnle 0x50214BAD; shr eax, 1; ret 
0x50212ac6  # or byte [ebx-0x3874F33C], al; pop edi; ret 
0x5021dc1c  # or byte [ebx+0x0374FEF8], al; push eax; call esi; pop esi; ret 
0x50218f73  # or byte [ebx+ebx*8+0x0250840F], al; add byte [eax], al; call [0x50220160] 
0x50212a16  # or byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x5021275f  # or byte [eax+0x40FF3114], cl; adc al, 0x5F; pop esi; ret 
0x5021c0c6  # or byte [eax-0x76FC14E1], cl; pop ebp; or byte [ebx], bh; ret 
0x5021b5eb  # or byte [ecx+0x0CC48308], cl; leave; ret 
0x502174ff  # or byte [ecx+0x4589E045], cl; in al, 0x33; fstp tword [ebx]; ret 
0x50219934  # or byte [ecx+0x5D5E0446], cl; ret 
0x502127af  # or byte [ecx+0x5E5F1046], cl; ret 
0x50219bf8  # or byte [ecx+0x48891C58], cl; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50213e36  # or byte [ecx+0x0B54908C], cl; add byte [eax], al; leave; ret 
0x50218c6b  # or byte [edx+0x513A0150], cl; add [esp+edx-0x73], esi; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x50218e27  # or byte [ebx-0x00DAF7BB], cl; add byte [eax], al; add byte [edi+0x5B], bl; pop esi; leave; ret 
0x5021c588  # or byte [ebx+0x016AF045], cl; push esi; push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x5021e01b  # or byte [ebx-0x377C07B3], cl; call ebx 
0x5021fb4f  # or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x50216d83  # or byte [ebp-0x067C60B8], cl; sbb [edi+0x11], esi; add eax, 0xFFFFFFE0; pop ebp; ret 
0x502183b0  # or dh, al; inc edi; add al, byte [eax]; pop edi; ret 
0x5021b59e  # or ah, bl; sbb bh, bl; loopne 0x5021B59A; les eax, [ecx+0x7A]; add eax, 0x5D40C033; ret 
0x5021b8a6  # or al, ch; adc eax, 0x83FFFFFF; les ebx, [eax]; pop ebp; ret 
0x50217f7f  # or al, ch; dec esp; add [eax], eax; add byte [ecx-0x3D], bl; mov eax, 0x502270E0; ret 
0x5021c35c  # or al, ch; jp 0x5021C364; add byte [eax], al; pop ecx; ret 
0x5021b443  # or al, ch; jl 0x5021B459; add byte [eax], al; pop ecx; push eax; call [0x50220168] 
0x5021b602  # or al, ch; test eax, 0x83FFFFFF; les edx, [eax]; pop ebp; ret 
0x50216d95  # or al, ch; retn 0xFFFE 
0x5021867d  # or al, ch; enter 0xFFFD, 0xFF; add esp, 0x0C; pop ebp; ret 
0x50219902  # or al, ch; aam 0x2E; add byte [eax], al; pop ecx; ret 
0x5021a3f3  # or al, ch; jecxz 0x5021A41A; add byte [eax], al; pop ecx; ret 
0x50215477  # or al, ch; ret 
0x5021f98d  # or dh, dh; ret 
0x50216c29  # or bh, bh; adc eax, 0x50220100; test eax, eax; jne 0x50216C3C; call [0x50220028] 
0x5021dc8f  # or bh, bh; adc eax, 0x5022017C; push eax; call [0x5022009C] 
0x5021c378  # or [eax], eax; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x5021c6e1  # or [eax], eax; add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x5021a575  # or [esi], eax; ret 
0x5021c21e  # or [eax-0x18], edx; ret 
0x50212a1a  # or [eax-0x01], edx; jbe 0x50212A47; call [esi+0x24] 
0x5021c9c1  # or [ecx+0x45C6D85D], ecx; call [eax] 
0x5021c522  # or edi, edi; jo 0x5021C52A; call [0x502200D4] 
0x502155a8  # or ch, byte [ebx]; retn 0x8B48 
0x5021f34a  # or bh, byte [ebx]; retn 0x0472 
0x5021fa8f  # or bh, byte [ebx]; sal [ebp+0x0F], 1; or eax, 0x00008000; ret 
0x50214ec5  # or dl, byte [esi-0x75]; ret 
0x5021669a  # or ch, byte [edx-0x03]; mov [esi+0x18], 0x50222690; pop ebx; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x50218091  # or al, byte [ebx-0x00A9DF3A]; adc eax, 0x50220088; pop esi; pop ebp; ret 
0x50217673  # or al, byte [eax+eax*8+0x5B5EF375]; pop edi; xor eax, eax; ret 
0x5021eadf  # or bh, bh; inc ebp; mov ah, 0x2A; ret 
0x50213e3b  # or eax, [eax]; add cl, cl; ret 
0x50210e11  # or esp, [ecx]; push eax; ret 
0x5021551d  # or edx, [edi-0x01]; jbe 0x5021554A; call [esi+0x24] 
0x50217060  # or ebp, [eax+0x6A59FFFE]; call [ebx+0x53] 
0x5021f9f3  # or eax, edx; pop esi; test ebx, 0x00040000; je 0x5021FA03; or eax, 0x00001000; ret 
0x50213d25  # or eax, esi; pop edi; pop esi; pop ebp; ret 
0x50216e56  # or eax, edi; pop edi; pop esi; pop ebp; ret 
0x5021eb39  # or edi, edi; inc ebp; mov ah, 0x2A; ret 
0x502154a4  # or edi, edi; jbe 0x502154B4; push [edi+0x28]; call [edi+0x24] 
0x502114fd  # or al, 0x00; jg 0x50211307; pop edi; pop ebx; leave; ret 
0x5021bffb  # or al, 0x00; and dl, byte [eax-0x7B]; sal byte [ebp+eax+0x6A], 0x00; call eax; ret 
0x5021bffb  # or al, 0x00; and dl, byte [eax-0x7B]; sal byte [ebp+eax+0x6A], 0x00; call eax 
0x5021a59a  # or al, 0x00; jnle 0x5021A585; pop esi; pop ebp; ret 
0x502180ba  # or al, 0x00; add byte [eax], 0x00; pop ecx; pop ebp; ret 
0x5021d061  # or al, 0x01; and dl, byte [eax-0x7D]; clc; push [ebp+0x34]; call [0x50220028] 
0x5021dbf0  # or al, 0x01; and dl, byte [eax-0x5D]; test byte [edx+0x50], dh; ret 
0x502106a7  # or al, 0x24; rdmsr; retn 0x0788 
0x50215488  # or al, 0x33; fist [edi+0x3B]; ret 
0x5021fb5c  # or al, 0x3B; retn 0x840F 
0x5021b1b3  # or al, 0x50; call [0x50220118]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021b1b3  # or al, 0x50; call [0x50220118] 
0x5021c7f9  # or al, 0x50; call [0x50220084]; pop ebp; ret 
0x5021c7f9  # or al, 0x50; call [0x50220084] 
0x5021c7bd  # or al, 0x50; call [0x50220088] 
0x5021c8b6  # or al, 0x53; call [0x50220088]; test byte [esi+0x04], 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x5021c8b6  # or al, 0x53; call [0x50220088] 
0x5021a129  # or al, 0x53; push [ebp-0x0C]; push 0x00000000; push 0x0000FDE9; call [0x502200D4] 
0x502155ee  # or al, 0x5F; pop esi; pop ebx; leave; ret 
0x5021bb7b  # or al, 0x7F; add al, 0x3B; ret 
0x502180c4  # or al, 0x83; shl byte [eax], 0x50; call [0x50220088]; pop ebp; ret 
0x502180c4  # or al, 0x83; shl byte [eax], 0x50; call [0x50220088] 
0x50212a8e  # or al, 0x85; push [ebp+0x04]; xor eax, eax; pop edi; ret 
0x50216f2f  # or al, 0x89; add [edi+0x5E], ebx; pop ebp; ret 
0x5021e40f  # or al, 0x89; sbb [edi+0x5B], ebx; leave; ret 
0x50215b16  # or al, 0x89; inc esi; add al, 0xFF; jnbe 0x50215B45; call [edi+0x24] 
0x50215516  # or al, 0x89; inc edi; and al, 0x85; sal byte [ebp+0x0B], 0x57; push [esi+0x28]; call [esi+0x24] 
0x50215539  # or al, 0x89; inc edi; sub byte [ebp-0x00E88A40], al; jnbe 0x50215568; push [esi+0x28]; call [esi+0x24] 
0x502154e2  # or al, 0x89; inc edi; xor byte [edi+0x5E], bl; pop ebx; ret 
0x5021b5e8  # or al, 0x8B; dec ebp; or byte [ecx+0x0CC48308], cl; leave; ret 
0x5021fb4c  # or al, 0x8B; dec ebp; or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x502169e8  # or al, 0x8B; dec ebp; adc al, 0x23; ret 
0x5021fc10  # or al, 0x8B; retn 0xF633 
0x5021c7ed  # or al, 0x8D; adc byte [edx-0x1F3EAFDE], 0x06; lea eax, [ecx+eax+0x0C]; push eax; call [0x50220084] 
0x5021b5f0  # or al, 0xC9; ret 
0x50218d9f  # or al, 0xE8; ret 
0x50217cc7  # or al, 0xF7; retn 0x0108 
0x5021d05e  # or al, 0xFF; adc eax, 0x5022010C; cmp eax, 0xFFFFFFFF; jne 0x5021D09E; call [0x50220028] 
0x5021d6a2  # or al, 0xFF; jo 0x5021D6AA; call [0x50220060] 
0x502162b0  # or al, 0xFF; jo 0x502162DC; call [eax+0x24]; pop ecx; pop ecx; ret 
0x502162b0  # or al, 0xFF; jo 0x502162DC; call [eax+0x24] 
0x502154a7  # or al, 0xFF; jnbe 0x502154D3; call [edi+0x24] 
0x5021fda9  # or eax, 0x80000000; pop edi; pop esi; pop ebx; leave; ret 
0x5021dd97  # or eax, 0xE8000000; xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x5021f9fe  # or eax, 0x00001000; ret 
0x5021fa94  # or eax, 0x00008000; ret 
0x5021dec6  # or eax, 0x5022821C; mov [eax], ecx; xor eax, eax; pop esi; pop ebp; ret 
0x5021fa9e  # or eax, 0x00008040; ret 
0x50213989  # or eax, 0xC729895D; inc esi; sbb byte [eax+ebx+0x39E95022], dh; add [eax], eax; add dh, dh; ret 
0x502138e5  # or eax, 0x01F3E95D; add byte [eax], al; jmp [0x50213BE1+eax*4] 
0x5021766a  # or eax, 0xC683068A; add [edx], edi; retn 0x0A74 
0x502154d7  # push cs; push ebx; push ebx; push ebx; call eax 
0x5021c069  # sldt word [eax]; add al, ch; push eax; jne 0x5021C06F; call [ebx+0x53] 
0x5021fa93  # nop [eax]; add byte [eax], 0x00; ret 
0x502106a9  # rdmsr; retn 0x0788 
0x502169e3  # psrad mm6, 0x8B; inc ebp; or al, 0x8B; dec ebp; adc al, 0x23; ret 
0x502167b1  # jnc 0x5A9664AF; mov [esi+0x18], 0x502226DC; mov [ebp+0x28], ecx; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x5021717d  # je 0x502172B2; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x50220154] 
0x50218f76  # je 0x502191CC; call [0x50220160] 
0x502128fc  # je 0x5021298E; mov eax, [esi+0x7C]; push [ebp+0x0C]; imul eax, eax, 0x0C; push esi; call [eax+0x50221818] 
0x50217207  # je 0x502172B2; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x50220154] 
0x502170f3  # je 0x502172B2; lea eax, [ebp-0x0000025C]; push eax; lea eax, [ebp-0x00000264]; push eax; call [0x50220154] 
0x50215b0e  # je 0x50215BD1; push [esi+0x0C]; mov [esi+0x04], eax; push [edi+0x28]; call [edi+0x24] 
0x50212d7d  # jne 0x50212C96; pop esi; pop ebx; leave; ret 
0x50212e46  # jne 0x50212DA3; xor eax, eax; pop edi; pop esi; pop ebx; ret 
0x50214563  # jne 0x5021410F; pop edi; pop esi; pop ebx; leave; ret 
0x5021dc82  # jbe 0x5021DD44; mov ebx, 0x00001000; push ebx; push 0x00000008; call [0x5022017C] 
0x5021e9e7  # ja 0x5021EC1C; jmp [0x5021F022+ecx*4] 
0x50215886  # ja 0x50215BF4; push 0x00000004; lea eax, [eax+ecx+0x00000102]; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021a765  # ja 0x5021B118; jmp [0x5021B166+eax*4] 
0x50211c40  # jns 0x50211A6A; pop edi; pop ebx; leave; ret 
0x502114ff  # jg 0x50211307; pop edi; pop ebx; leave; ret 
0x50211f77  # jg 0x50211C92; pop edi; pop esi; pop ebx; leave; ret 
0x50218f4d  # sete cl; push eax; mov eax, [esi]; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x50220164] 
0x50217ef9  # setne cl; dec ecx; mov eax, ecx; pop esi; pop ebp; ret 
0x5021db5a  # shrd eax, edx, cl; shr edx, cl; ret 
0x5021c3bd  # movsx eax, byte [ecx+eax+0x04]; and eax, 0x40; pop esi; pop ebp; ret 
0x5021556c  # ud0 edi, edi; inc [ebx-0x3874F33C]; pop ebx; pop edi; pop esi; ret 
0x5021dc8a  # adc byte [eax], al; add byte [ebx+0x6A], dl; or bh, bh; adc eax, 0x5022017C; push eax; call [0x5022009C] 
0x5021d03b  # adc byte [ecx], al; je 0x5021D0B5; push [ebp-0x1C]; call [0x50220108] 
0x5021cf05  # adc byte [ebx], cl; retn 0x840F 
0x5021ce85  # adc byte [ebx], cl; retn 0xC774 
0x50213c53  # adc byte [edi], cl; mov word [ebp-0x75000000], ss; retn 0xE8C1 
0x5021cf1a  # adc byte [ebx], ah; retn 0xF883 
0x50216964  # adc byte [ebx], ah; ret 
0x5021d917  # adc byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x5021b815  # adc byte [ebx], bh; ret 
0x5021d89c  # adc byte [ebx], bh; ror [eax-0x74FB81E2], cl; retn 0x02EB 
0x50219f32  # adc byte [eax-0x75], dl; pop es; push [esi+eax]; call [0x50220104] 
0x502172ac  # adc byte [ecx+0x33], bl; shr bl, 0x1C; call [0x50220028] 
0x5021fabe  # adc byte [edx-0x0A], bl; ret 
0x502168ea  # adc byte [esi+0x5B], bl; leave; ret 
0x50219bfe  # adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x502127b2  # adc byte [edi+0x5E], bl; ret 
0x502162a5  # adc byte [edx+0x21], ah; push eax; push [esp+0x04]; mov eax, [esp+0x0C]; push [eax+0x28]; call [eax+0x24] 
0x5021b1ae  # adc byte [edx+0x00], ch; push [ebp+0x0C]; push eax; call [0x50220118] 
0x50216ec7  # adc byte [ebp+eax+0x38], dh; push eax; add [ebp+0x04], esi; xor eax, eax; inc eax; ret 
0x5021c510  # adc byte [eax+0x33], bh; sar byte [ecx], cl; pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x50211843  # adc byte [eax-0x2883C4F4], cl; pop edi; pop esi; pop ebx; leave; ret 
0x50216846  # adc byte [ebx-0x3F7AC7BA], cl; je 0x50216861; push ebx; push ecx; push [esi+0x3C]; call eax 
0x5021db76  # adc byte [ebx-0x00DAF3B3], cl; push edi; jmp [ebx] 
0x5021f995  # adc dh, dh; ret 
0x50215032  # adc [ecx], eax; mov esp, [eax+0x5B000016]; ret 
0x50214c33  # adc [esi+0x5B], ebx; ret 
0x5021c92f  # adc [ecx+0x000800C2], eax; add byte [ebx], bh; retn 0x1773 
0x5021837d  # adc [ebx+0x00A904C1], eax; add [ecx], eax; xor [ecx-0x7C], 0x843474D2; div byte [edi-0x09]; retn 0x0000 
0x50210388  # adc [ebx-0x7E2ED42D], ecx; retn 0x0E7C 
0x50215c08  # adc edi, edi; jbe 0x50215C18; push [edi+0x28]; call [edi+0x24] 
0x5021b446  # adc al, byte [eax]; add byte [ecx+0x50], bl; call [0x50220168]; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021b446  # adc al, byte [eax]; add byte [ecx+0x50], bl; call [0x50220168] 
0x502155e9  # adc al, byte [eax]; add byte [ebx+0x5E5F0CC4], al; pop ebx; leave; ret 
0x50211cdf  # adc al, byte [ebx]; ret 
0x50212cab  # adc al, byte [ebp-0x74F18A2E]; ret 
0x50218397  # adc dh, bh; retn 0x0000 
0x5021684d  # adc edx, [ebx+0x51]; push [esi+0x3C]; call eax 
0x5021b0c4  # adc ecx, [ebx-0x00021B73]; call [eax-0x73] 
0x50216646  # adc edi, edi; jbe 0x50216672; call [esi+0x20] 
0x502176f1  # adc al, 0x0B; ret 
0x502169eb  # adc al, 0x23; ret 
0x50216841  # adc al, 0x2B; ret 
0x50212761  # adc al, 0x31; inc [eax+0x14]; pop edi; pop esi; ret 
0x50217342  # adc al, 0x33; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x50214bf9  # adc al, 0x33; leave; and [eax+0x000016B4], ecx; mov word [eax+0x000016B0], cx; pop ebx; ret 
0x5021d69d  # adc al, 0x51; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x50220060] 
0x5021bfa3  # adc al, 0x5E; ret 
0x50212765  # adc al, 0x5F; pop esi; ret 
0x5021b32a  # adc al, 0x7C; sub byte [ecx+0x50228220], ah; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x5022004C] 
0x50211183  # adc al, 0x7E; fstp [esi+0x5D]; ret 
0x50214dee  # adc al, 0x83; dec ebp; clc; call [esi-0x75] 
0x50214c29  # adc al, 0x83; xor byte [esi+edx+0x66F80000], 0x89; adc [esi+0x5B], ebx; ret 
0x50216f2c  # adc al, 0x83; les ecx, [ecx+ecx*4]; add [edi+0x5E], ebx; pop ebp; ret 
0x5021c731  # adc al, 0x83; enter 0xEBFF, 0x02; mov eax, [eax]; pop esi; pop ebp; ret 
0x5021966a  # adc al, 0x83; enter 0xEBFF, 0x03; mov eax, [eax+0x10]; pop esi; pop ebp; ret 
0x5021544b  # adc al, 0x8B; ret 
0x50218c73  # adc al, 0x8D; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x50218f46  # adc al, 0x8D; test [0x940FFFFF], ebx; rcl [eax-0x75], 0x06; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x50220164] 
0x502174e9  # adc al, 0xE8; loop 0x502174F8; add byte [eax], al; pop ecx; ret 
0x50219e52  # adc al, 0xEB; xor al, 0x8B; retn 0xE8D1 
0x50216c2b  # adc eax, 0x50220100; test eax, eax; jne 0x50216C3C; call [0x50220028] 
0x50219ff2  # adc eax, 0x50220104; test eax, eax; jne 0x5021A005; call [0x50220028] 
0x502197f4  # adc eax, 0x50220108; test eax, eax; jne 0x50219807; call [0x50220028] 
0x5021bffa  # adc eax, 0x5022000C; test eax, eax; je 0x5021C008; push 0x00000000; call eax; ret 
0x5021bffa  # adc eax, 0x5022000C; test eax, eax; je 0x5021C008; push 0x00000000; call eax 
0x5021d060  # adc eax, 0x5022010C; cmp eax, 0xFFFFFFFF; jne 0x5021D09E; call [0x50220028] 
0x5021dbef  # adc eax, 0x5022010C; mov [0x50227484], eax; ret 
0x5021b1b6  # adc eax, 0x50220118; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021b44c  # adc eax, 0x50220168; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021bff2  # adc eax, 0x22286868; push eax; push eax; call [0x5022000C] 
0x5021bfea  # adc eax, 0x5022016C; test eax, eax; je 0x5021C008; push 0x50222868; push eax; call [0x5022000C] 
0x5021c444  # adc eax, 0x50220174; push eax; call [0x50220060] 
0x5021c411  # adc eax, 0x50220178; test eax, eax; jne 0x5021C481; cmp [0x50227470], 0x02; jne 0x5021C3FD; call [0x50220028] 
0x5021dd14  # adc eax, 0x5022017C; push eax; call [0x50220030] 
0x5021dc91  # adc eax, 0x5022017C; push eax; call [0x5022009C] 
0x5021db54  # adc eax, 0x7320F980; push es; shrd eax, edx, cl; shr edx, cl; ret 
0x502180ca  # adc eax, 0x50220088; pop ebp; ret 
0x5021c8b9  # adc eax, 0x50220088; test byte [esi+0x04], 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x5021a136  # adc eax, 0x502200D4; mov [ebp-0x10], eax; test eax, eax; jne 0x5021A176; call [0x50220028] 
0x50211f79  # adc eax, 0x5FFFFFFD; pop esi; pop ebx; leave; ret 
0x5021b8a8  # adc eax, 0x83FFFFFF; les ebx, [eax]; pop ebp; ret 
0x50213690  # push ss; add byte [eax], al; push eax; mov [ebx], eax; push [edi+0x28]; call [edi+0x20] 
0x50214c06  # push ss; add byte [eax], al; pop ebx; ret 
0x50214b50  # push ss; add byte [eax], al; pop ebx; leave; ret 
0x50213d8b  # push ss; add byte [eax], al; pop esi; ret 
0x50214bff  # push ss; add byte [eax], al; mov word [eax+0x000016B0], cx; pop ebx; ret 
0x502135fc  # push ss; add byte [eax], al; push 0x00000001; push [edi+0x28]; call [edi+0x20] 
0x5021725d  # push ss; add byte [eax], al; add esp, 0x1C; push [ebp-0x0000024C]; mov [edi+0x20], eax; call [0x50220150] 
0x50213d85  # push ss; add byte [eax], al; mov [eax+0x00001698], ecx; pop esi; ret 
0x50213d7f  # push ss; add byte [eax], al; mov [eax+0x000016A8], ecx; mov [eax+0x00001698], ecx; pop esi; ret 
0x5021a472  # push ss; pop eax; pop edi; pop esi; pop ebp; ret 
0x502155e8  # pop ss; adc al, byte [eax]; add byte [ebx+0x5E5F0CC4], al; pop ebx; leave; ret 
0x50211fbd  # pop ss; and dl, byte [eax-0x18]; retn 0x005F 
0x502183a3  # pop ss; mov eax, [esp+0x08]; pop edi; ret 
0x502183ac  # pop ss; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x5021c8b3  # pop ss; lea ebx, [esi+0x0C]; push ebx; call [0x50220088] 
0x5021212d  # pop ss; jmp [esi+0x0F] 
0x50215540  # pop ss; push [edi+0x24]; push [esi+0x28]; call [esi+0x24] 
0x50216f27  # sbb byte [eax], al; add byte [ebx-0x3B7CEBB3], cl; or al, 0x89; add [edi+0x5E], ebx; pop ebp; ret 
0x5021b1b7  # sbb byte [ecx], al; and dl, byte [eax-0x75]; clc; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021311e  # sbb byte [ebx], dh; rol byte [ebx-0x6BF0FB02], cl; retn 0x8B52 
0x50213804  # sbb byte [ebx+0x53], al; push [esi+0x28]; call [esi+0x20] 
0x5021552d  # sbb byte [ebx+0x6A], dl; add edi, edi; jbe 0x5021555C; call [esi+0x20] 
0x50216642  # sbb byte [edx+0x04], ch; push 0x00000013; push [esi+0x28]; call [esi+0x20] 
0x50215d2a  # sbb byte [edx+0x1C], ch; push 0x00000001; push [eax+0x28]; call [eax+0x20] 
0x5021c0a6  # sbb byte [ebp-0x02], dh; call [ebx+0x53] 
0x50216765  # sbb byte [ebx+0x04750038], al; cmp ebx, edi; jnbe 0x5021679C; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x5021c6bc  # sbb byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x5021ad57  # sbb byte [ebp-0x00025B7B], cl; call [eax+0x53] 
0x5021669f  # sbb byte [eax+0x5B502226], dl; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x5021398f  # sbb byte [eax+ebx+0x39E95022], dh; add [eax], eax; add dh, dh; ret 
0x5021b5a0  # sbb bh, bl; loopne 0x5021B59A; les eax, [ecx+0x7A]; add eax, 0x5D40C033; ret 
0x5021b7fa  # sbb al, ch; retn 0xFE7D 
0x502166a7  # sbb bh, bh; jbe 0x502166D3; call [esi+0x24] 
0x5021e411  # sbb [edi+0x5B], ebx; leave; ret 
0x50216d89  # sbb [edi+0x11], esi; add eax, 0xFFFFFFE0; pop ebp; ret 
0x50216fd1  # sbb al, byte [eax]; add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56]; call [0x5022015C] 
0x50216fd1  # sbb al, byte [eax]; add byte [ecx-0x0002677B], cl; dec [ebp-0x0002477B]; call [eax+0x56] 
0x502177b3  # sbb cl, byte [ecx]; add byte [eax], al; pop ecx; ret 
0x50217fd9  # sbb bl, byte [eax+0x5E]; ret 
0x50218c78  # sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5021ead9  # sbb al, byte [ebx+0x7319B47D]; or bh, bh; inc ebp; mov ah, 0x2A; ret 
0x50214ba1  # sbb al, al; inc al; pop esi; mov byte [ecx+0x1C], al; pop ebx; ret 
0x5021da66  # sbb edi, [ecx-0x02]; dec ecx; ret 
0x5021de8b  # sbb eax, eax; and eax, 0x0000C000; add eax, 0x00004000; pop ebp; ret 
0x5021be0f  # sbb ebp, eax; lodsd; jnbe 0x5021BE12; call [ebx+0x53] 
0x502137a2  # sbb al, 0x00; pop ecx; pop ecx; xor eax, eax; pop esi; ret 
0x502135f6  # sbb al, 0x02; jnbe 0x50213594; push 0x000016B8; push 0x00000001; push [edi+0x28]; call [edi+0x20] 
0x502138bd  # sbb al, 0x3B; ret 
0x50214ba8  # sbb al, 0x5B; ret 
0x5021bf78  # sbb al, 0x5D; ret 
0x50212741  # sbb al, 0x5F; pop esi; pop ebx; leave; ret 
0x50215d2c  # sbb al, 0x6A; add edi, edi; jo 0x50215D5A; call [eax+0x20] 
0x50219bfb  # sbb al, 0x89; dec eax; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x502154d0  # sbb al, 0x89; pop esi; and byte [ebx], bh; ret 
0x50212a4c  # sbb al, 0x8B; inc eax; xor byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50212a39  # sbb al, 0x8B; inc eax; cmp byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50212a26  # sbb al, 0x8B; inc eax; cmp al, 0x85; sal byte [ecx+ecx+0x50], 0xFF; jbe 0x50212A5A; call [esi+0x24] 
0x5021c38e  # sbb al, 0xE8; jc 0x5021C391; call [esi+0x56] 
0x50212a5f  # sbb al, 0xFF; jbe 0x50212A8B; call [esi+0x24] 
0x502161e2  # sbb eax, 0x83000006; les ecx, [edi+ebx*2]; pop esi; pop ebx; leave; ret 
0x50218d9a  # sbb eax, 0x75FF5057; or al, 0xE8; ret 
0x50215557  # sbb eax, 0x03002783; ret 
0x5021dea7  # sbb eax, 0xFE5715E8; call [esi+0x56] 
0x50219685  # sbb eax, 0xFE9F37E8; call [edi+0x57] 
0x50219652  # sbb eax, 0xFE9F6AE8; call [esi+0x56] 
0x502184a0  # push ds; mov cl, 0xFE; call [esi+0x56] 
0x5021fda3  # pop ds; add ecx, [eax]; add byte [ebp+eax+0x0D], dh; add byte [eax], al; add byte [eax-0x36A4A1A1], al; ret 
0x5021cc1f  # pop ds; shl esi, 0x06; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x50220028] 
0x5021c7af  # pop ds; shl edi, 0x06; mov eax, [0x50229280+eax*4]; lea eax, [eax+edi+0x0C]; push eax; call [0x50220088] 
0x5021db66  # pop ds; shr eax, cl; ret 
0x5021fd4b  # and byte [eax], al; add byte [ebx+ebx+0x3D], dh; add byte [eax+0x00], al; add byte [esp+ecx+0x3B], dh; ret 
0x5021c636  # and byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop esi; pop ebp; ret 
0x502166c6  # and byte [ecx], al; add byte [eax], al; push [esi+0x28]; call [esi+0x20] 
0x5021c512  # and byte [ebx], dh; sar byte [ecx], cl; pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x50211c26  # and byte [edi-0x7D], al; ret 
0x50218103  # and byte [eax-0x01], dl; adc eax, 0x50220084; pop ebp; ret 
0x502180c7  # and byte [eax-0x01], dl; adc eax, 0x50220088; pop ebp; ret 
0x50218094  # and byte [esi-0x01], dl; adc eax, 0x50220088; pop esi; pop ebp; ret 
0x50213660  # and byte [edx+0x02], ch; push [esi+0x24]; mov [esi+0x30], eax; push [edi+0x28]; call [edi+0x20] 
0x5021366e  # and byte [edx+0x02], ch; push [esi+0x44]; mov [esi+0x38], eax; push [edi+0x28]; call [edi+0x20] 
0x5021db57  # and byte [ebx+0x06], dh; shrd eax, edx, cl; shr edx, cl; ret 
0x50217fd0  # and byte [edx-0x3F7AAFDE], al; jne 0x50217FDD; push 0x0000001A; pop eax; pop esi; ret 
0x5021b32e  # and byte [edx+0x048B5022], al; push es; add eax, 0x20; push eax; call [0x5022004C] 
0x50215513  # and byte [ebx+0x47890CC4], al; and al, 0x85; sal byte [ebp+0x0B], 0x57; push [esi+0x28]; call [esi+0x24] 
0x50215536  # and byte [ebx+0x47890CC4], al; sub byte [ebp-0x00E88A40], al; jnbe 0x50215568; push [esi+0x28]; call [esi+0x24] 
0x5021c92d  # and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x5021f99d  # and bh, dh; ret 
0x5021b1f3  # and ch, bh; mov eax, edi; pop edi; pop esi; pop ebp; ret 
0x5021cc28  # and dh, bh; call [0x50220028] 
0x5021b5e3  # and [eax], eax; add byte [ebx+0x4D8B0C45], cl; or byte [ecx+0x0CC48308], cl; leave; ret 
0x502137ff  # and [eax+0x33], edx; fld tword [edx+0x18]; inc ebx; push ebx; push [esi+0x28]; call [esi+0x20] 
0x50210e0e  # and [eax+0x5B], edx; or esp, [ecx]; push eax; ret 
0x5021b184  # and [eax-0x75], edx; call [ebp-0x75] 
0x5021de79  # and [eax+0x5E5FFF85], eax; pop ebx; jne 0x5021DE89; mov eax, 0x00008000; pop ebp; ret 
0x50214bfc  # and [eax+0x000016B4], ecx; mov word [eax+0x000016B0], cx; pop ebx; ret 
0x5021c485  # and dl, byte [eax+0x01]; add byte [eax], al; add bl, ch; jecxz 0x5021C419; call [ebp-0x75] 
0x5021c41e  # and dl, byte [eax+0x02]; jne 0x5021C3FD; call [0x50220028] 
0x50218417  # and dl, byte [eax+0x13]; mov ch, 0x21; push eax; mov [0x502249EC], 0x5021B4A0; ret 
0x5021bff6  # and dl, byte [eax+0x50]; call [0x5022000C]; test eax, eax; je 0x5021C008; push 0x00000000; call eax 
0x5021dd17  # and dl, byte [eax+0x50]; call [0x50220030] 
0x5021c447  # and dl, byte [eax+0x50]; call [0x50220060] 
0x5021dc94  # and dl, byte [eax+0x50]; call [0x5022009C] 
0x502166a2  # and dl, byte [eax+0x5B]; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x5021c38b  # and dl, byte [eax+0x72]; sbb al, 0xE8; jc 0x5021C391; call [esi+0x56] 
0x5021843e  # and dl, byte [eax+0x74]; add eax, 0x003B34E8; add bl, bl; loop 0x502184A7; ret 
0x50218035  # and dl, byte [eax+0x7C]; into; pop edi; xor eax, eax; pop esi; ret 
0x5021d574  # and dl, byte [eax-0x7D]; enter 0x3301, 0xC9; cmp [0x50228214], eax; sete cl; mov eax, ecx; ret 
0x5021cc1b  # and dl, byte [eax-0x7D]; out 0x1F, al; shl esi, 0x06; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x50220028] 
0x5021d063  # and dl, byte [eax-0x7D]; clc; push [ebp+0x34]; call [0x50220028] 
0x50217179  # and dl, byte [eax-0x7B]; ror byte [edi], 0x84; das; add [eax], eax; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x50217203  # and dl, byte [eax-0x7B]; ror byte [edi], 0x84; movsd; add byte [eax], al; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x5021bffd  # and dl, byte [eax-0x7B]; sal byte [ebp+eax+0x6A], 0x00; call eax; ret 
0x5021bffd  # and dl, byte [eax-0x7B]; sal byte [ebp+eax+0x6A], 0x00; call eax 
0x5021c037  # and dl, byte [eax-0x7B]; sal byte [ebp+eax-0x7D], 0xF8; add [ebp-0x29], esi; xor eax, eax; pop ebp; ret 
0x5021c219  # and dl, byte [eax-0x7B]; sal byte [ecx+ecx+0x50], 0xE8; ret 
0x5021bfed  # and dl, byte [eax-0x7B]; sal byte [ebp+edx+0x68], 0x68; sub byte [edx], ah; push eax; push eax; call [0x5022000C] 
0x50217fd2  # and dl, byte [eax-0x7B]; sal byte [ebp+0x05], 0x6A; sbb bl, byte [eax+0x5E]; ret 
0x5021c414  # and dl, byte [eax-0x7B]; sal byte [ebp+0x67], 0x83; cmp eax, 0x50227470; add dh, byte [ebp-0x26]; call [0x50220028] 
0x5021a139  # and dl, byte [eax-0x77]; inc ebp; lock test eax, eax; jne 0x5021A176; call [0x50220028] 
0x502167bc  # and dl, byte [eax-0x77]; dec ebp; sub bh, bh; jne 0x502167C0; push [esi+0x28]; call [esi+0x24] 
0x5021b330  # and dl, byte [eax-0x75]; add al, 0x06; add eax, 0x20; push eax; call [0x5022004C] 
0x502167f4  # and dl, byte [eax-0x75]; inc esp; and al, 0x10; mov [eax], 0x50226F98; xor eax, eax; ret 
0x50219429  # and dl, byte [eax-0x75]; fdivr [ebx]; fimul word [edi]; test byte [edi+0x6A000000], dl; add byte [ebp-0x001AD37B], cl; call [eax-0x75] 
0x5021b1b9  # and dl, byte [eax-0x75]; clc; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021c7b8  # and dl, byte [eax-0x73]; inc esp; cmp byte [eax+edx*2], cl; call [0x50220088] 
0x50218421  # and dl, byte [eax-0x60]; mov ah, 0x21; push eax; ret 
0x5021dbf2  # and dl, byte [eax-0x5D]; test byte [edx+0x50], dh; ret 
0x5021c7f1  # and dl, byte [eax-0x3F]; loopne 0x5021C7FC; lea eax, [ecx+eax+0x0C]; push eax; call [0x50220084] 
0x5021ad35  # and dl, byte [eax-0x18]; mov [0x59FFFE65], eax; call eax 
0x50211fbe  # and dl, byte [eax-0x18]; retn 0x005F 
0x502174f6  # and dl, byte [eax-0x18]; ret 
0x5021c8bc  # and dl, byte [eax-0x0A]; inc esi; add al, 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x5021dbec  # and dl, byte [eax-0x01]; adc eax, 0x5022010C; mov [0x50227484], eax; ret 
0x50212666  # and dh, dh; retn 0x7401 
0x50211c5c  # and al, 0x04; cmp cl, al; jbe 0x50211C64; mov al, cl; ret 
0x502162ab  # and al, 0x04; mov eax, [esp+0x0C]; push [eax+0x28]; call [eax+0x24] 
0x50214bc2  # and al, 0x08; add byte [edi-0x1A], bh; shr eax, 1; ret 
0x502154ed  # and al, 0x08; push edi; push 0x00000040; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x50214bbe  # and al, 0x08; cmp [esp+0x08], 0x00000000; jnle 0x50214BAD; shr eax, 1; ret 
0x502183af  # and al, 0x08; mov byte [edi+0x02], 0x00; pop edi; ret 
0x50212a8d  # and al, 0x0C; test edi, edi; jne 0x50212A97; xor eax, eax; pop edi; ret 
0x502167ee  # and al, 0x0C; mov [eax], 0x50225F98; mov eax, [esp+0x10]; mov [eax], 0x50226F98; xor eax, eax; ret 
0x502162af  # and al, 0x0C; push [eax+0x28]; call [eax+0x24]; pop ecx; pop ecx; ret 
0x502162af  # and al, 0x0C; push [eax+0x28]; call [eax+0x24] 
0x502167f8  # and al, 0x10; mov [eax], 0x50226F98; xor eax, eax; ret 
0x5021552c  # and al, 0x18; push ebx; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021d96e  # and al, 0x33; fstp tword [ebx]; ret 
0x5021ea71  # and al, 0x3A; ret 
0x50213656  # and al, 0x53; mov [esi+0x50], eax; push [edi+0x28]; call [edi+0x20] 
0x50215549  # and al, 0x57; push [esi+0x28]; call [esi+0x24] 
0x502162b6  # and al, 0x59; pop ecx; ret 
0x50212a5a  # and al, 0x59; pop ecx; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x50215d1f  # and al, 0x5F; xor eax, eax; pop esi; ret 
0x50215d1c  # and al, 0x83; les esp, [edi+ebx*2]; xor eax, eax; pop esi; ret 
0x50215519  # and al, 0x85; sal byte [ebp+0x0B], 0x57; push [esi+0x28]; call [esi+0x24] 
0x50213665  # and al, 0x89; inc esi; xor bh, bh; jnbe 0x50213694; call [edi+0x20] 
0x50215543  # and al, 0xFF; jbe 0x5021556F; call [esi+0x24]; push edi; push [esi+0x28]; call [esi+0x24] 
0x50215543  # and al, 0xFF; jbe 0x5021556F; call [esi+0x24] 
0x50213792  # and eax, 0x59590000; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x5021de8d  # and eax, 0x0000C000; add eax, 0x00004000; pop ebp; ret 
0x50218e2b  # and eax, 0x000000FF; pop edi; pop ebx; pop esi; leave; ret 
0x50212abf  # and eax, 0x3E01FFFF; add [esi+0x08], edi; add esp, 0x0C; mov eax, edi; pop edi; ret 
0x5021a53e  # add byte [ebx+0x59000866], al; pop esi; pop ebp; ret 
0x502166a1  # and dl, byte [eax+0x5B]; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x502167bb  # and dl, byte [eax-0x77]; dec ebp; sub bh, bh; jne 0x502167C0; push [esi+0x28]; call [esi+0x24] 
0x50215559  # daa; add byte [ebx], al; ret 
0x5021d85a  # daa; jnp 0x5021D85B; dec ecx; ret 
0x5021c217  # sub byte [eax], al; and dl, byte [eax-0x7B]; sal byte [ecx+ecx+0x50], 0xE8; ret 
0x5021bff5  # sub byte [edx], ah; push eax; push eax; call [0x5022000C] 
0x5021dbeb  # sub byte [edx], ah; push eax; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021dbeb  # sub byte [edx], ah; push eax; call [0x5022010C] 
0x5021bfe6  # sub byte [edx], ah; push eax; call [0x5022016C] 
0x50216a80  # sub byte [ebx], bh; ret 
0x502167cc  # sub byte [ecx+0x59], bl; pop edi; pop ebx; pop esi; leave; ret 
0x502166c2  # sub byte [edx+0x04], ch; push 0x00000120; push [esi+0x28]; call [esi+0x20] 
0x5021553c  # sub byte [ebp-0x00E88A40], al; jnbe 0x50215568; push [esi+0x28]; call [esi+0x24] 
0x5021c14d  # sub byte [ebp+0x5750F845], cl; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x5021b32c  # sub byte [ecx+0x50228220], ah; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x5022004C] 
0x502162b3  # sub bh, bh; push eax; and al, 0x59; pop ecx; ret 
0x50215546  # sub bh, bh; push esi; and al, 0x57; push [esi+0x28]; call [esi+0x24] 
0x502167c0  # sub bh, bh; jne 0x502167C0; push [esi+0x28]; call [esi+0x24] 
0x50215d06  # sub bh, bh; jbe 0x50215D32; call [esi+0x24]; push [edi+0x24]; push [esi+0x28]; call [esi+0x24] 
0x50215d06  # sub bh, bh; jbe 0x50215D32; call [esi+0x24] 
0x5021398c  # sub edi, eax; inc esi; sbb byte [eax+ebx+0x39E95022], dh; add [eax], eax; add dh, dh; ret 
0x5021dd8f  # sub eax, ebp; sub eax, 0xC7FFFE58; add byte [0xE8000000], cl; xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x5021608f  # sub al, 0x2B; retn 0xC085 
0x502160ba  # sub al, 0x2B; retn 0x4F8B 
0x50215d96  # sub al, 0x2B; retn 0x10E9 
0x502160de  # sub al, 0x2B; retn 0x03EB 
0x5021dd91  # sub eax, 0xC7FFFE58; add byte [0xE8000000], cl; xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x5021676e  # sub eax, 0xFFFC75FF; jbe 0x5021679D; call [esi+0x24] 
0x5021261b  # sub eax, 0xC581FFFF; mov byte [ecx], al; add byte [eax], al; leave; ret 
0x502197ee  # add byte [eax], al; pop ecx; push eax; call [0x50220108] 
0x50219905  # add byte [eax], al; pop ecx; ret 
0x5021c390  # jc 0x5021C391; call [esi+0x56] 
0x5021717f  # das; add [eax], eax; add byte [ebp-0x00025B7B], cl; call [eax-0x73] 
0x5021cc25  # xor byte [eax+eax*4], al; and dh, bh; call [0x50220028] 
0x5021cac7  # xor byte [ebx], bh; ret 
0x502154e5  # xor byte [edi+0x5E], bl; pop ebx; ret 
0x50212a4f  # xor byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x502168e7  # xor byte [ebx+0x5B5E1045], cl; leave; ret 
0x50213668  # xor bh, bh; jnbe 0x50213694; call [edi+0x20] 
0x50212762  # xor edi, edi; inc eax; adc al, 0x5F; pop esi; ret 
0x50211a2d  # xor al, al; pop edi; pop esi; pop ebx; pop ebp; ret 
0x5021db6a  # xor eax, eax; xor edx, edx; ret 
0x5021bfdb  # xor eax, eax; inc eax; leave; ret 
0x5021c176  # xor eax, eax; pop esi; pop edi; pop ebx; leave; ret 
0x5021866a  # xor eax, eax; pop edi; pop ebx; pop esi; leave; ret 
0x50212e4c  # xor eax, eax; pop edi; pop esi; pop ebx; ret 
0x50213104  # xor eax, eax; pop edi; pop esi; pop ebp; pop ebx; ret 
0x50212a93  # xor eax, eax; pop edi; ret 
0x5021bfe0  # xor eax, eax; leave; ret 
0x50218f6a  # xor ecx, ecx; cmp [ebp-0x00001AE0], ecx; je 0x50218F7C; test bl, bl; je 0x502191CC; call [0x50220160] 
0x5021db62  # xor edx, edx; and cl, 0x1F; shr eax, cl; ret 
0x50213801  # xor ebx, ebx; push 0x00000018; inc ebx; push ebx; push [esi+0x28]; call [esi+0x20] 
0x50218ded  # xor al, 0x00; add byte [ebx], ah; retn 0xC483 
0x50219fef  # xor al, 0x06; call [0x50220104]; test eax, eax; jne 0x5021A005; call [0x50220028] 
0x50219f37  # xor al, 0x06; call [0x50220104] 
0x50218f54  # xor al, 0x07; mov [ebp-0x00001AE0], ecx; call [0x50220164] 
0x50219093  # xor al, 0x07; call [0x502200A8] 
0x50218443  # xor al, 0x3B; add byte [eax], al; fnclex; pop ebp; ret 
0x50216c1b  # xor al, 0x58; pop edi; pop esi; pop ebx; leave; ret 
0x50211277  # xor al, 0x83; retn 0xEBFC 
0x5021838b  # xor al, 0x84; div byte [edi-0x09]; retn 0x0000 
0x50219e54  # xor al, 0x8B; retn 0xE8D1 
0x50217cb8  # xor eax, 0xC4830000; or al, 0x3B; ret 
0x5021dd9c  # xor eax, 0x8BFFFE58; lock call [0x50220028] 
0x50219445  # xor eax, 0xFFFFEBF0; push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; push [edi+eax]; call [0x502200A8] 
0x5021479b  # xor eax, 0x5FFFFFF9; pop esi; pop ebx; leave; ret 
0x5021647e  # cmp byte [ebx], al; retn 0x558B 
0x5021642c  # cmp byte [ebx], al; ret 
0x5021c7bc  # cmp byte [eax+edx*2], cl; call [0x50220088] 
0x50212f10  # cmp byte [ebx], ah; retn 0x8966 
0x502136bc  # cmp byte [ebx], bh; retn 0x3474 
0x5021b505  # cmp byte [ebp-0x04], cl; je 0x5021B511; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50216eca  # cmp byte [eax+0x01], dl; jne 0x50216ED3; xor eax, eax; inc eax; ret 
0x502136b5  # cmp byte [ebp+edi+0x39], dh; push esi; cmp al, 0x74; cmp byte [ebx], bh; retn 0x3474 
0x50212a3c  # cmp byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50216849  # cmp byte [ebp+0x531374C0], al; push ecx; push [esi+0x3C]; call eax 
0x5021631b  # cmp byte [ecx+0x5FC0333B], cl; pop esi; pop ebx; add ebp, 0x54; leave; ret 
0x50213676  # cmp bh, bh; jnbe 0x502136A2; call [edi+0x20] 
0x5021d57b  # cmp [0x50228214], eax; sete cl; mov eax, ecx; ret 
0x5021b2c8  # cmp [esi+edi*8-0x01], esi; ret 
0x50218f6c  # cmp [ebp-0x00001AE0], ecx; je 0x50218F7C; test bl, bl; je 0x502191CC; call [0x50220160] 
0x50211c5e  # cmp cl, al; jbe 0x50211C64; mov al, cl; ret 
0x50218444  # cmp eax, [eax]; add bl, bl; loop 0x502184A7; ret 
0x5021631d  # cmp esi, [ebx]; rcr byte [edi+0x5E], 0x5B; add ebp, 0x54; leave; ret 
0x502112d9  # cmp edx, [ebp+0x08]; jnl 0x502112B1; pop esi; pop ebx; leave; ret 
0x50211181  # cmp edx, [ebp+0x14]; jle 0x5021115F; pop esi; pop ebp; ret 
0x5021cac5  # cmp esi, [eax+esi+0x3B]; ret 
0x50211846  # cmp edi, [edi+edx*8+0x5F]; pop esi; pop ebx; leave; ret 
0x5021a763  # cmp eax, ecx; ja 0x5021B118; jmp [0x5021B166+eax*4] 
0x502154d4  # cmp eax, ebx; je 0x502154E6; push ebx; push ebx; push ebx; call eax 
0x5021878b  # cmp eax, ebx; jne 0x502187A2; call [0x50220028] 
0x5021c211  # cmp eax, edi; jne 0x5021C228; call [0x50220028] 
0x5021d035  # cmp ecx, eax; jne 0x5021D0B5; test byte [ebp+0x10], 0x01; je 0x5021D0B5; push [ebp-0x1C]; call [0x50220108] 
0x5021fa90  # cmp edx, ecx; jne 0x5021FAA3; or eax, 0x00008000; ret 
0x5021676b  # cmp ebx, edi; jnbe 0x5021679C; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x5021dc80  # cmp esi, ebx; jbe 0x5021DD44; mov ebx, 0x00001000; push ebx; push 0x00000008; call [0x5022017C] 
0x502136ba  # cmp al, 0x74; cmp byte [ebx], bh; retn 0x3474 
0x502154df  # cmp al, 0x83; les ecx, [ecx+ecx*4]; inc edi; xor byte [edi+0x5E], bl; pop ebx; ret 
0x50212a29  # cmp al, 0x85; sal byte [ecx+ecx+0x50], 0xFF; jbe 0x50212A5A; call [esi+0x24] 
0x50218a8b  # cmp eax, 0x50220128; lea ebx, [ebp-0x0000010C]; mov eax, ebx; push eax; push 0x00000105; call edi 
0x502136b7  # cmp eax, 0x743C5639; cmp byte [ebx], bh; retn 0x3474 
0x5021c41b  # cmp eax, 0x50227470; add dh, byte [ebp-0x26]; call [0x50220028] 
0x50212ac3  # add [esi+0x08], edi; add esp, 0x0C; mov eax, edi; pop edi; ret 
0x5021a594  # push [esi+eax-0x7D]; jnl 0x5021A5A7; add byte [edi-0x19], bh; pop esi; pop ebp; ret 
0x5021de94  # inc eax; add byte [eax], al; pop ebp; ret 
0x50212a15  # inc eax; or byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50219671  # inc eax; adc byte [esi+0x5D], bl; ret 
0x50212764  # inc eax; adc al, 0x5F; pop esi; ret 
0x50214c28  # inc eax; adc al, 0x83; xor byte [esi+edx+0x66F80000], 0x89; adc [esi+0x5B], ebx; ret 
0x50212a4e  # inc eax; xor byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50217cb7  # inc eax; xor eax, 0xC4830000; or al, 0x3B; ret 
0x50212a3b  # inc eax; cmp byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50212a28  # inc eax; cmp al, 0x85; sal byte [ecx+ecx+0x50], 0xFF; jbe 0x50212A5A; call [esi+0x24] 
0x5021c3c4  # inc eax; pop esi; pop ebp; ret 
0x5021dbe8  # inc eax; push 0x502228EC; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021dbe8  # inc eax; push 0x502228EC; call [0x5022010C] 
0x502154f1  # inc eax; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021fa9f  # inc eax; add byte [eax], 0x00; ret 
0x50212b3f  # inc eax; mov [esi+0x70], eax; mov [esi+0x58], eax; pop edi; ret 
0x5021bfdd  # inc eax; leave; ret 
0x50219035  # inc eax; in eax, 0xFF; call [eax-0x18] 
0x50219059  # inc eax; in eax, 0xFF; call [ecx+0x50] 
0x50219010  # inc eax; in eax, 0xFF; call [ebx+0x50] 
0x50214ba7  # inc ecx; sbb al, 0x5B; ret 
0x5021b5a5  # inc ecx; jp 0x5021B5AD; xor eax, eax; inc eax; pop ebp; ret 
0x50211180  # inc edx; cmp edx, [ebp+0x14]; jle 0x5021115F; pop esi; pop ebp; ret 
0x5021e9e3  # inc edx; cmp ecx, 0x0B; ja 0x5021EC1C; jmp [0x5021F022+ecx*4] 
0x50213805  # inc ebx; push ebx; push [esi+0x28]; call [esi+0x20] 
0x50219065  # inc ebx; inc [ebp-0x00001ABC]; call [0x50220060] 
0x5021c3bf  # inc esp; add [ebx+eax*4], eax; loopne 0x5021C405; pop esi; pop ebp; ret 
0x5021c7f7  # inc esp; add [eax+edx*2], ecx; call [0x50220084]; pop ebp; ret 
0x5021c7f7  # inc esp; add [eax+edx*2], ecx; call [0x50220084] 
0x5021212c  # inc esp; pop ss; jmp [esi+0x0F] 
0x50211c5b  # inc esp; and al, 0x04; cmp cl, al; jbe 0x50211C64; mov al, cl; ret 
0x502183ae  # inc esp; and al, 0x08; mov byte [edi+0x02], 0x00; pop edi; ret 
0x502162ae  # inc esp; and al, 0x0C; push [eax+0x28]; call [eax+0x24] 
0x502167f7  # inc esp; and al, 0x10; mov [eax], 0x50226F98; xor eax, eax; ret 
0x5021cc24  # inc esp; xor byte [eax+eax*4], al; and dh, bh; call [0x50220028] 
0x5021c7bb  # inc esp; cmp byte [eax+edx*2], cl; call [0x50220088] 
0x50213673  # inc esp; mov [esi+0x38], eax; push [edi+0x28]; call [edi+0x20] 
0x50217813  # inc ebp; or byte [ebx], bh; ret 
0x5021c43f  # inc ebp; or byte [eax+0x56], dl; call [0x50220174]; push eax; call [0x50220060] 
0x5021c43f  # inc ebp; or byte [eax+0x56], dl; call [0x50220174] 
0x502174fe  # inc ebp; or byte [ecx+0x4589E045], cl; in al, 0x33; fstp tword [ebx]; ret 
0x50216d82  # inc ebp; or byte [ebp-0x067C60B8], cl; sbb [edi+0x11], esi; add eax, 0xFFFFFFE0; pop ebp; ret 
0x5021fb5b  # inc ebp; or al, 0x3B; retn 0x840F 
0x502180c3  # inc ebp; or al, 0x83; shl byte [eax], 0x50; call [0x50220088]; pop ebp; ret 
0x502180c3  # inc ebp; or al, 0x83; shl byte [eax], 0x50; call [0x50220088] 
0x5021b5e7  # inc ebp; or al, 0x8B; dec ebp; or byte [ecx+0x0CC48308], cl; leave; ret 
0x502169e7  # inc ebp; or al, 0x8B; dec ebp; adc al, 0x23; ret 
0x5021d03a  # inc ebp; adc byte [ecx], al; je 0x5021D0B5; push [ebp-0x1C]; call [0x50220108] 
0x5021b814  # inc ebp; adc byte [ebx], bh; ret 
0x502168e9  # inc ebp; adc byte [esi+0x5B], bl; leave; ret 
0x5021db75  # inc ebp; adc byte [ebx-0x00DAF3B3], cl; push edi; jmp [ebx] 
0x50215d29  # inc ebp; sbb byte [edx+0x1C], ch; push 0x00000001; push [eax+0x28]; call [eax+0x20] 
0x50211c25  # inc ebp; and byte [edi-0x7D], al; ret 
0x50211fb7  # inc ebp; push 0x8868157C; pop ss; and dl, byte [eax-0x18]; retn 0x005F 
0x5021eaeb  # inc ebp; mov al, 0x8A; add al, byte [edx+0x3A]; ret 
0x5021eae1  # inc ebp; mov ah, 0x2A; ret 
0x5021cbc0  # inc ebp; rcl byte [eax-0x01], 1; jne 0x5021CBB6; push [ebp-0x08]; push [ebp+0x0C]; call edi 
0x50217501  # inc ebp; loopne 0x5021748D; inc ebp; in al, 0x33; fstp tword [ebx]; ret 
0x50217504  # inc ebp; in al, 0x33; fstp tword [ebx]; ret 
0x5021b326  # inc ebp; in al, 0x83; call [esp+edi*2+0x00] 
0x5021b2c5  # inc ebp; in al, 0xE8; cmp [esi+edi*8-0x01], esi; ret 
0x50217b26  # inc ebp; in al, 0xEB; ret 
0x5021c58a  # inc ebp; lock push 0x00000001; push esi; push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x5021a13c  # inc ebp; lock test eax, eax; jne 0x5021A176; call [0x50220028] 
0x5021c462  # inc ebp; hlt; push eax; push ecx; call [0x50220170] 
0x5021c20f  # inc ebp; clc; cmp eax, edi; jne 0x5021C228; call [0x50220028] 
0x5021a212  # inc ebp; clc; push eax; mov eax, [edi]; push [esi+eax]; call [0x50220104] 
0x5021c0fb  # inc ebp; cld; push eax; call esi 
0x5021873e  # inc ebp; cld; pop esi; pop ebx; leave; ret 
0x5021c9c6  # inc ebp; call [eax] 
0x50219fe9  # inc ebp; call [eax-0x75]; pop es; push [esi+eax]; call [0x50220104] 
0x50219fe9  # inc ebp; call [eax-0x75] 
0x5021c8bf  # inc esi; add al, 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x502152f2  # inc esi; add al, 0x3B; retn 0x1B77 
0x502128d7  # inc esi; add al, 0x3B; ret 
0x50219936  # inc esi; add al, 0x5E; pop ebp; ret 
0x50215b18  # inc esi; add al, 0xFF; jnbe 0x50215B45; call [edi+0x24] 
0x50219933  # inc esi; or byte [ecx+0x5D5E0446], cl; ret 
0x502127ae  # inc esi; or byte [ecx+0x5E5F1046], cl; ret 
0x502127b1  # inc esi; adc byte [edi+0x5E], bl; ret 
0x5021669e  # inc esi; sbb byte [eax+0x5B502226], dl; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x5021398e  # inc esi; sbb byte [eax+ebx+0x39E95022], dh; add [eax], eax; add dh, dh; ret 
0x502138bc  # inc esi; sbb al, 0x3B; ret 
0x50212a4b  # inc esi; sbb al, 0x8B; inc eax; xor byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x50212a38  # inc esi; sbb al, 0x8B; inc eax; cmp byte [ebp+0x500974C0], al; push [esi+0x28]; call [esi+0x24] 
0x502168e6  # inc esi; xor byte [ebx+0x5B5E1045], cl; leave; ret 
0x50213667  # inc esi; xor bh, bh; jnbe 0x50213694; call [edi+0x20] 
0x50216848  # inc esi; cmp byte [ebp+0x531374C0], al; push ecx; push [esi+0x3C]; call eax 
0x50213675  # inc esi; cmp bh, bh; jnbe 0x502136A2; call [edi+0x20] 
0x50213659  # inc esi; push eax; push [edi+0x28]; call [edi+0x20] 
0x50212b44  # inc esi; pop eax; pop edi; ret 
0x50212b41  # inc esi; jo 0x50212ACD; inc esi; pop eax; pop edi; ret 
0x50212903  # inc esi; jl 0x50212905; jne 0x50212914; imul eax, eax, 0x0C; push esi; call [eax+0x50221818] 
0x502183b2  # inc edi; add al, byte [eax]; pop edi; ret 
0x502155d4  # inc edi; add al, 0x8B; ret 
0x502172ab  # inc edi; adc byte [ecx+0x33], bl; shr bl, 0x1C; call [0x50220028] 
0x50212740  # inc edi; sbb al, 0x5F; pop esi; pop ebx; leave; ret 
0x50215518  # inc edi; and al, 0x85; sal byte [ebp+0x0B], 0x57; push [esi+0x28]; call [esi+0x24] 
0x5021553b  # inc edi; sub byte [ebp-0x00E88A40], al; jnbe 0x50215568; push [esi+0x28]; call [esi+0x24] 
0x50215e1f  # inc edi; sub al, 0x2B; retn 0x7D83 
0x5021608e  # inc edi; sub al, 0x2B; retn 0xC085 
0x502160b9  # inc edi; sub al, 0x2B; retn 0x4F8B 
0x50215d95  # inc edi; sub al, 0x2B; retn 0x10E9 
0x502160dd  # inc edi; sub al, 0x2B; retn 0x03EB 
0x502154e4  # inc edi; xor byte [edi+0x5E], bl; pop ebx; ret 
0x5021d9d7  # dec eax; or byte [ebx-0x37], bl; ret 
0x502180b9  # dec eax; or al, 0x00; add byte [eax], 0x00; pop ecx; pop ebp; ret 
0x50219bfd  # dec eax; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x50219272  # dec eax; in eax, 0xFF; call [eax-0x75]; push es; push [edi+eax]; call [0x502200A8] 
0x50219272  # dec eax; in eax, 0xFF; call [eax-0x75] 
0x50218416  # dec ecx; and dl, byte [eax+0x13]; mov ch, 0x21; push eax; mov [0x502249EC], 0x5021B4A0; ret 
0x5021ad34  # dec ecx; and dl, byte [eax-0x18]; mov [0x59FFFE65], eax; call eax 
0x50217efc  # dec ecx; mov eax, ecx; pop esi; pop ebp; ret 
0x502185b8  # dec ebx; call [ecx+0x57] 
0x50217f81  # dec esp; add [eax], eax; add byte [ecx-0x3D], bl; mov eax, 0x502270E0; ret 
0x50214bbd  # dec esp; and al, 0x08; cmp [esp+0x08], 0x00000000; jnle 0x50214BAD; shr eax, 1; ret 
0x5021126f  # dec ebp; or byte [ebx-0x7D], dl; stc; add edx, [esi+0x7E]; xor al, 0x83; retn 0xEBFC 
0x5021c0c5  # dec ebp; or byte [eax-0x76FC14E1], cl; pop ebp; or byte [ebx], bh; ret 
0x5021b5ea  # dec ebp; or byte [ecx+0x0CC48308], cl; leave; ret 
0x5021e01a  # dec ebp; or byte [ebx-0x377C07B3], cl; call ebx 
0x5021fb4e  # dec ebp; or byte [ebx+0x23D0F7C7], cl; retn 0xCF23 
0x5021e40e  # dec ebp; or al, 0x89; sbb [edi+0x5B], ebx; leave; ret 
0x50216963  # dec ebp; adc byte [ebx], ah; ret 
0x502169ea  # dec ebp; adc al, 0x23; ret 
0x5021d69c  # dec ebp; adc al, 0x51; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x50220060] 
0x50216f2b  # dec ebp; adc al, 0x83; les ecx, [ecx+ecx*4]; add [edi+0x5E], ebx; pop ebp; ret 
0x502167bf  # dec ebp; sub bh, bh; jne 0x502167C0; push [esi+0x28]; call [esi+0x24] 
0x5021642b  # dec ebp; cmp byte [ebx], al; ret 
0x5021eb25  # dec ebp; mov al, 0x8A; add al, byte [edx+0x3A]; ret 
0x502140db  # dec ebp; in al, dx; call [ebx+0x56] 
0x502155f5  # dec ebp; lock mov edx, [ebp-0x08]; jmp [0x50215CC9+eax*4] 
0x50214df0  # dec ebp; clc; call [esi-0x75] 
0x5021c201  # dec ebp; cld; push ecx; push [ebp-0x08]; push eax; call [0x50220118] 
0x50213e32  # dec ebp; cld; mov edx, [ebp+0x08]; mov [eax+edx*4+0x00000B54], ecx; leave; ret 
0x50218d97  # dec esi; add al, 0x7E; sbb eax, 0x75FF5057; or al, 0xE8; ret 
0x502152ed  # dec esi; add eax, 0x468DD18B; add al, 0x3B; retn 0x1B77 
0x502131ff  # dec edi; and al, 0x2B; ret 
0x50212f0f  # dec edi; cmp byte [ebx], ah; retn 0x8966 
0x50218c75  # push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x50216ecb  # push eax; add [ebp+0x04], esi; xor eax, eax; inc eax; ret 
0x5021c41f  # push eax; add dh, byte [ebp-0x26]; call [0x50220028] 
0x5021d580  # push eax; sete cl; mov eax, ecx; ret 
0x5021c92c  # push eax; and byte [ebx+0x00C28111], cl; or byte [eax], al; add byte [ebx], bh; retn 0x1773 
0x502162b5  # push eax; and al, 0x59; pop ecx; ret 
0x5021dd18  # push eax; push eax; call [0x50220030] 
0x5021c448  # push eax; push eax; call [0x50220060] 
0x5021dc95  # push eax; push eax; call [0x5022009C] 
0x5021c464  # push eax; push ecx; call [0x50220170] 
0x5021941e  # push eax; push esi; push 0x0000FDE9; call [0x50220060] 
0x50216fe0  # push eax; push esi; call [0x5022015C] 
0x5021c441  # push eax; push esi; call [0x50220174]; push eax; call [0x50220060] 
0x5021c441  # push eax; push esi; call [0x50220174] 
0x5021c0f5  # push eax; push edi; push [ebp+0x08]; lea eax, [ebp-0x04]; push eax; call esi 
0x5021c151  # push eax; push edi; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x50210e0f  # push eax; pop ebx; or esp, [ecx]; push eax; ret 
0x502166a3  # push eax; pop ebx; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x50218a98  # push eax; push 0x00000105; call edi 
0x5021c43b  # push eax; push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x50220174] 
0x5021dbe1  # push eax; push 0x00000003; push 0x40000000; push 0x502228EC; call [0x5022010C] 
0x5021c06e  # push eax; jne 0x5021C06F; call [ebx+0x53] 
0x50218036  # push eax; jl 0x50218007; pop edi; xor eax, eax; pop esi; ret 
0x5021cc1c  # push eax; and esi, 0x1F; shl esi, 0x06; lea eax, [eax+esi+0x04]; and byte [eax], 0xFE; call [0x50220028] 
0x5021d064  # push eax; cmp eax, 0xFFFFFFFF; jne 0x5021D09E; call [0x50220028] 
0x5021bffe  # push eax; test eax, eax; je 0x5021C008; push 0x00000000; call eax; ret 
0x5021bffe  # push eax; test eax, eax; je 0x5021C008; push 0x00000000; call eax 
0x5021bfee  # push eax; test eax, eax; je 0x5021C008; push 0x50222868; push eax; call [0x5022000C] 
0x50216c2f  # push eax; test eax, eax; jne 0x50216C3C; call [0x50220028] 
0x502197f8  # push eax; test eax, eax; jne 0x50219807; call [0x50220028] 
0x5021b450  # push eax; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021c415  # push eax; test eax, eax; jne 0x5021C481; cmp [0x50227470], 0x02; jne 0x5021C3FD; call [0x50220028] 
0x50213693  # push eax; mov [ebx], eax; push [edi+0x28]; call [edi+0x20]
0x50213691  # pop ecx; mov [ebx], edx; ret;
0x50213692  # pop eax; mov edx, eax; ret;
0x5021a13a  # push eax; mov [ebp-0x10], eax; test eax, eax; jne 0x5021A176; call [0x50220028] 
0x502167bd  # push eax; mov [ebp+0x28], ecx; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x5021b331  # push eax; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x5022004C] 
0x50218f50  # push eax; mov eax, [esi]; push [edi+eax]; mov [ebp-0x00001AE0], ecx; call [0x50220164] 
0x50219276  # push eax; mov eax, [esi]; push [edi+eax]; call [0x502200A8] 
0x50219f33  # push eax; mov eax, [edi]; push [esi+eax]; call [0x50220104] 
0x502167f5  # push eax; mov eax, [esp+0x10]; mov [eax], 0x50226F98; xor eax, eax; ret 
0x502190de  # push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; mov byte [ebp-0x0C], 0x0D; push [edi+eax]; call [0x502200A8] 
0x50219089  # push eax; mov eax, [ebp-0x00001AD8]; mov eax, [eax]; push [edi+eax]; call [0x502200A8] 
0x5021941b  # push eax; mov eax, ecx; push eax; push esi; push 0x0000FDE9; call [0x50220060] 
0x5021b1ba  # push eax; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021c7b9  # push eax; lea eax, [eax+edi+0x0C]; push eax; call [0x50220088] 
0x5021c460  # push eax; lea eax, [ebp-0x0C]; push eax; push ecx; call [0x50220170] 
0x502170ff  # push eax; lea eax, [ebp-0x00000264]; push eax; call [0x50220154] 
0x502171f7  # push eax; lea eax, [ebp-0x00000244]; push eax; call [0x50220158] 
0x5021716d  # push eax; lea eax, [ebp-0x0000023C]; push eax; call [0x50220158] 
0x502170e3  # push eax; lea eax, [ebp-0x00000234]; push eax; call [0x50220158] 
0x50218a8f  # push eax; lea ebx, [ebp-0x0000010C]; mov eax, ebx; push eax; push 0x00000105; call edi 
0x5021dbf3  # push eax; mov [0x50227484], eax; ret 
0x5021c7f2  # push eax; shl eax, 0x06; lea eax, [ecx+eax+0x0C]; push eax; call [0x50220084] 
0x502183fe  # push eax; mov [0x502249E0], 0x5021BED0; mov [0x502249E4], 0x5021B5B1; mov [0x502249E8], 0x5021B513; mov [0x502249EC], 0x5021B4A0; ret 
0x50218408  # push eax; mov [0x502249E4], 0x5021B5B1; mov [0x502249E8], 0x5021B513; mov [0x502249EC], 0x5021B4A0; ret 
0x50218412  # push eax; mov [0x502249E8], 0x5021B513; mov [0x502249EC], 0x5021B4A0; ret 
0x5021841c  # push eax; mov [0x502249EC], 0x5021B4A0; ret 
0x5021c8bd  # push eax; test byte [esi+0x04], 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x502197f2  # push eax; call [0x50220108]; test eax, eax; jne 0x50219807; call [0x50220028] 
0x5021bff8  # push eax; call [0x5022000C]; test eax, eax; je 0x5021C008; push 0x00000000; call eax 
0x5021dbed  # push eax; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021c207  # push eax; call [0x50220118]; mov [ebp-0x08], eax; cmp eax, edi; jne 0x5021C228; call [0x50220028] 
0x5021b1b4  # push eax; call [0x50220118]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x5021B1CA; call [0x50220028] 
0x5021b1b4  # push eax; call [0x50220118] 
0x5021dd74  # push eax; call [0x50220148] 
0x50217106  # push eax; call [0x50220154] 
0x502170ea  # push eax; call [0x50220158] 
0x5021b44a  # push eax; call [0x50220168]; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021b44a  # push eax; call [0x50220168] 
0x5021bfe8  # push eax; call [0x5022016C] 
0x5021c40f  # push eax; call [0x50220178] 
0x502180c8  # push eax; call [0x50220088]; pop ebp; ret 
0x502180c8  # push eax; call [0x50220088] 
0x502162a8  # push eax; push [esp+0x04]; mov eax, [esp+0x0C]; push [eax+0x28]; call [eax+0x24] 
0x5021d051  # push eax; push [ebp-0x10]; and edi, 0x7FFFFFFF; push edi; push [ebp+0x0C]; call [0x5022010C] 
0x5021cbc2  # push eax; push [ebp-0x10]; push [ebp-0x08]; push [ebp+0x0C]; call edi 
0x50212a1b  # push eax; push [esi+0x28]; call [esi+0x24] 
0x5021365a  # push eax; push [edi+0x28]; call [edi+0x20] 
0x5021905e  # push eax; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x50220060] 
0x50218788  # push eax; call esi; cmp eax, ebx; jne 0x502187A2; call [0x50220028] 
0x5021dc22  # push eax; call esi; pop esi; ret 
0x50218c70  # push ecx; add [esp+edx-0x73], esi; push eax; add [eax], edi; sbb dh, byte [ebp+ecx-0x75]; retn 0x04EB 
0x5021c40e  # push ecx; push eax; call [0x50220178] 
0x5021905d  # push ecx; push eax; push [ebp-0x00001AE4]; inc ebx; inc [ebp-0x00001ABC]; call [0x50220060] 
0x5021d69e  # push ecx; push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x50220060] 
0x5021c51f  # push ecx; push esi; push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x5021c408  # push ecx; push 0x00000001; lea ecx, [ebp+0x08]; push ecx; push eax; call [0x50220178] 
0x5021c465  # push ecx; call [0x50220170] 
0x50219f2f  # push ecx; push [ebp+0x10]; push eax; mov eax, [edi]; push [esi+eax]; call [0x50220104] 
0x502194a1  # push ecx; push [ebp+0x10]; push [ebp-0x00001ACC]; push [eax]; call [0x502200A8] 
0x5021c203  # push ecx; push [ebp-0x08]; push eax; call [0x50220118] 
0x5021684f  # push ecx; push [esi+0x3C]; call eax 
0x5021c45f  # push edx; push eax; lea eax, [ebp-0x0C]; push eax; push ecx; call [0x50220170] 
0x50218787  # push ebx; push eax; call esi; cmp eax, ebx; jne 0x502187A2; call [0x50220028] 
0x50218787  # push ebx; push eax; call esi 
0x5021684e  # push ebx; push ecx; push [esi+0x3C]; call eax 
0x50218786  # push ebx; push ebx; push eax; call esi 
0x50218785  # push ebx; push ebx; push ebx; push eax; call esi 
0x502154d8  # push ebx; push ebx; push ebx; call eax 
0x502154d9  # push ebx; push ebx; call eax 
0x5021552e  # push ebx; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021dc8d  # push ebx; push 0x00000008; call [0x5022017C]; push eax; call [0x5022009C] 
0x5021dc8d  # push ebx; push 0x00000008; call [0x5022017C] 
0x5021c612  # push ebx; push 0xFFFFFFF6; call [0x5022014C] 
0x50213657  # push ebx; mov [esi+0x50], eax; push [edi+0x28]; call [edi+0x20] 
0x5021d69f  # push ebx; mov [ebp+0x0C], ebx; push [eax+0x04]; call [0x50220060] 
0x50215529  # push ebx; mov ebx, [esp+0x18]; push ebx; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021926f  # push ebx; lea eax, [ebp-0x00001AB8]; push eax; mov eax, [esi]; push [edi+eax]; call [0x502200A8] 
0x50218b2e  # push ebx; enter 0xFFFE, 0xC9; ret 
0x5021c8c4  # push ebx; call [0x50220084] 
0x5021c8b7  # push ebx; call [0x50220088]; test byte [esi+0x04], 0x01; je 0x5021C8DF; push ebx; call [0x50220084] 
0x5021c8b7  # push ebx; call [0x50220088] 
0x5021a12a  # push ebx; push [ebp-0x0C]; push 0x00000000; push 0x0000FDE9; call [0x502200D4] 
0x50213806  # push ebx; push [esi+0x28]; call [esi+0x20] 
0x50218ae0  # push ebx; push [ebp-0x00000114]; call edi 
0x50213e3a  # push esp; or eax, [eax]; add cl, cl; ret 
0x50216325  # push esp; leave; ret 
0x502112da  # push ebp; or byte [ebp-0x2D], bh; pop esi; pop ebx; leave; ret 
0x502145de  # push ebp; or byte [ecx-0x0001003E], al; call ebx 
0x50213e35  # push ebp; or byte [ecx+0x0B54908C], cl; add byte [eax], al; leave; ret 
0x5021fc0f  # push ebp; or al, 0x8B; retn 0xF633 
0x5021d89b  # push ebp; adc byte [ebx], bh; ror [eax-0x74FB81E2], cl; retn 0x02EB 
0x50211182  # push ebp; adc al, 0x7E; fstp [esi+0x5D]; ret 
0x5021647d  # push ebp; cmp byte [ebx], al; retn 0x558B 
0x502103a1  # push ebp; test byte [ebx-0x7E2ED42D], cl; retn 0x0E78 
0x50216c24  # push ebp; mov ebp, esp; push [ebp+0x08]; call [0x50220100] 
0x50218469  # push ebp; mov cl, 0xFE; call [esi+0x56] 
0x502155f8  # push ebp; clc; jmp [0x50215CC9+eax*4] 
0x5021c245  # push ebp; cld; pop edi; pop esi; leave; ret 
0x50215512  # push esi; and byte [ebx+0x47890CC4], al; and al, 0x85; sal byte [ebp+0x0B], 0x57; push [esi+0x28]; call [esi+0x24] 
0x50215535  # push esi; and byte [ebx+0x47890CC4], al; sub byte [ebp-0x00E88A40], al; jnbe 0x50215568; push [esi+0x28]; call [esi+0x24] 
0x50212665  # push esi; and dh, dh; retn 0x7401 
0x50215548  # push esi; and al, 0x57; push [esi+0x28]; call [esi+0x24] 
0x50212a59  # push esi; and al, 0x59; pop ecx; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x50215d1b  # push esi; and al, 0x83; les esp, [edi+ebx*2]; xor eax, eax; pop esi; ret 
0x502136b4  # push esi; cmp byte [ebp+edi+0x39], dh; push esi; cmp al, 0x74; cmp byte [ebx], bh; retn 0x3474 
0x502136b9  # push esi; cmp al, 0x74; cmp byte [ebx], bh; retn 0x3474 
0x5021941f  # push esi; push 0x0000FDE9; call [0x50220060] 
0x5021663f  # push esi; mov esi, [ebp+0x18]; push 0x00000004; push 0x00000013; push [esi+0x28]; call [esi+0x20] 
0x502166bf  # push esi; mov esi, [ebp+0x28]; push 0x00000004; push 0x00000120; push [esi+0x28]; call [esi+0x20] 
0x50217045  # push esi; call [0x50220130] 
0x50216fe1  # push esi; call [0x5022015C] 
0x5021c442  # push esi; call [0x50220174]; push eax; call [0x50220060] 
0x5021c442  # push esi; call [0x50220174] 
0x50218095  # push esi; call [0x50220088]; pop esi; pop ebp; ret 
0x50218095  # push esi; call [0x50220088] 
0x50217cc6  # push edi; or al, 0xF7; retn 0x0108 
0x5021365f  # push edi; and byte [edx+0x02], ch; push [esi+0x24]; mov [esi+0x30], eax; push [edi+0x28]; call [edi+0x20] 
0x5021366d  # push edi; and byte [edx+0x02], ch; push [esi+0x44]; mov [esi+0x38], eax; push [edi+0x28]; call [edi+0x20] 
0x502154ef  # push edi; push 0x00000040; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021c0f6  # push edi; push [ebp+0x08]; lea eax, [ebp-0x04]; push eax; call esi 
0x5021d05b  # push edi; push [ebp+0x0C]; call [0x5022010C]; cmp eax, 0xFFFFFFFF; jne 0x5021D09E; call [0x50220028] 
0x5021d05b  # push edi; push [ebp+0x0C]; call [0x5022010C] 
0x5021880e  # push edi; push [ebp+0x0C]; call esi 
0x5021b1ab  # push edi; push [ebp+0x10]; push 0x00000000; push [ebp+0x0C]; push eax; call [0x50220118] 
0x5021c152  # push edi; push [ebp+0x10]; lea eax, [ebp-0x04]; push eax; call esi 
0x5021551e  # push edi; push [esi+0x28]; call [esi+0x24] 
0x50219bf7  # pop eax; or byte [ecx+0x48891C58], cl; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x502129e4  # pop eax; pop edi; pop esi; pop ebx; pop ebp; ret 
0x5021388d  # pop eax; pop edi; pop esi; pop ebx; ret 
0x50213aeb  # pop eax; pop edi; pop esi; pop ebp; pop ebx; ret 
0x5021a473  # pop eax; pop edi; pop esi; pop ebp; ret 
0x50212a7b  # pop eax; pop edi; pop esi; ret 
0x50212b45  # pop eax; pop edi; ret 
0x5021dbd5  # pop ecx; xor eax, eax; pop esi; pop ebp; ret 
0x502137a5  # pop ecx; xor eax, eax; pop esi; ret 
0x502197f1  # pop ecx; push eax; call [0x50220108]; test eax, eax; jne 0x50219807; call [0x50220028] 
0x502197f1  # pop ecx; push eax; call [0x50220108] 
0x5021dd73  # pop ecx; push eax; call [0x50220148] 
0x5021b449  # pop ecx; push eax; call [0x50220168]; test eax, eax; jne 0x5021B460; call [0x50220028] 
0x5021b449  # pop ecx; push eax; call [0x50220168] 
0x5021dbd4  # pop ecx; pop ecx; xor eax, eax; pop esi; pop ebp; ret 
0x502137a4  # pop ecx; pop ecx; xor eax, eax; pop esi; ret 
0x5021a56e  # pop ecx; pop ecx; cmp eax, 0xFFFFFFFF; jne 0x5021A578; or [esi], eax; ret 
0x50212a5b  # pop ecx; pop ecx; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x502167ce  # pop ecx; pop edi; pop ebx; pop esi; leave; ret 
0x5021885f  # pop ecx; pop edi; pop esi; pop ebx; leave; ret 
0x50214fd5  # pop ecx; pop edi; pop esi; leave; ret 
0x50216c48  # pop ecx; or eax, 0xFFFFFFFF; pop ebp; ret 
0x5021a56f  # pop ecx; cmp eax, 0xFFFFFFFF; jne 0x5021A578; or [esi], eax; ret 
0x5021a75c  # pop ecx; mov [ebp-0x0000026C], eax; cmp eax, ecx; ja 0x5021B118; jmp [0x5021B166+eax*4] 
0x502166af  # pop ecx; mov eax, ebx; pop ebx; pop esi; leave; ret 
0x5021cc79  # pop ecx; push [ebp-0x1C]; call [0x50220108] 
0x50212a5c  # pop ecx; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x502172be  # pop ecx; push [ebp-0x0000024C]; call [0x50220150] 
0x50210e10  # pop ebx; or esp, [ecx]; push eax; ret 
0x50218dec  # pop ebx; xor al, 0x00; add byte [ebx], ah; retn 0xC483 
0x50218784  # pop ebx; push ebx; push ebx; push ebx; push eax; call esi 
0x50217679  # pop ebx; pop edi; xor eax, eax; ret 
0x502176bd  # pop ebx; pop edi; ret 
0x5021de7f  # pop ebx; jne 0x5021DE89; mov eax, 0x00008000; pop ebp; ret 
0x50216322  # pop ebx; add ebp, 0x54; leave; ret 
0x50213e30  # pop ebx; mov ecx, [ebp-0x04]; mov edx, [ebp+0x08]; mov [eax+edx*4+0x00000B54], ecx; leave; ret 
0x502166a4  # pop ebx; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x5021552b  # pop esp; and al, 0x18; push ebx; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x50213791  # pop esp; and eax, 0x59590000; push [esi+0x1C]; push [esi+0x28]; call [esi+0x24] 
0x5021c516  # pop ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x5021c0cc  # pop ebp; or byte [ebx], bh; ret 
0x5021d6a1  # pop ebp; or al, 0xFF; jo 0x5021D6AA; call [0x50220060] 
0x50213108  # pop ebp; pop ebx; ret 
0x5021db49  # pop ebp; pop esi; pop edi; retn 0x0010 
0x50211eda  # pop ebp; enter 0xC18B, 0x2B; retn 0xD83B 
0x50211ed7  # pop ebp; aam 0x2B; pop ebp; enter 0xC18B, 0x2B; retn 0xD83B 
0x5021c9be  # pop ebp; aam 0x74; or [ecx+0x45C6D85D], ecx; call [eax] 
0x5021c9c3  # pop ebp; fadd st0, st6; inc ebp; call [eax] 
0x5021c8b5  # pop esi; or al, 0x53; call [0x50220088] 
0x502154cf  # pop esi; sbb al, 0x89; pop esi; and byte [ebx], bh; ret 
0x502154d2  # pop esi; and byte [ebx], bh; ret 
0x50213655  # pop esi; and al, 0x53; mov [esi+0x50], eax; push [edi+0x28]; call [edi+0x20] 
0x50217678  # pop esi; pop ebx; pop edi; xor eax, eax; ret 
0x502176bc  # pop esi; pop ebx; pop edi; ret 
0x5021de7e  # pop esi; pop ebx; jne 0x5021DE89; mov eax, 0x00008000; pop ebp; ret 
0x50216321  # pop esi; pop ebx; add ebp, 0x54; leave; ret 
0x50213107  # pop esi; pop ebp; pop ebx; ret 
0x5021db4a  # pop esi; pop edi; retn 0x0010 
0x5021d9d4  # pop esi; mov word [eax+0x08], cx; pop ebx; leave; ret 
0x5021b589  # pop esi; je 0x5021B593; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50214ba5  # pop esi; mov byte [ecx+0x1C], al; pop ebx; ret 
0x50214b4c  # pop esi; mov [eax+0x000016AC], ecx; pop ebx; leave; ret 
0x5021819e  # pop esi; mov eax, ebx; pop ebx; pop ebp; ret 
0x5021527e  # pop esi; mov [eax+0x000016AC], 0x00000007; pop ebx; ret 
0x5021f9f5  # pop esi; test ebx, 0x00040000; je 0x5021FA03; or eax, 0x00001000; ret 
0x50216840  # pop edi; adc al, 0x2B; ret 
0x50216a7f  # pop edi; sub byte [ebx], bh; ret 
0x5021767a  # pop edi; xor eax, eax; ret 
0x502167cf  # pop edi; pop ebx; pop esi; leave; ret 
0x50213106  # pop edi; pop esi; pop ebp; pop ebx; ret 
0x5021d9d3  # pop edi; pop esi; mov word [eax+0x08], cx; pop ebx; leave; ret 
0x50214b4b  # pop edi; pop esi; mov [eax+0x000016AC], ecx; pop ebx; leave; ret 
0x5021b50e  # pushad; jo 0x5021B50E; leave; ret 
0x50212b3c  # pushad; mov [esi+0x40], edi; mov [esi+0x70], eax; mov [esi+0x58], eax; pop edi; ret 
0x5021b3b8  # popad; add al, 0x00; mov [ecx], eax; pop ebp; ret 
0x502162a6  # bound esp, [ecx]; push eax; push [esp+0x04]; mov eax, [esp+0x0C]; push [eax+0x28]; call [eax+0x24] 
0x5021f01c  # arpl si, di; dec ecx; ret 
0x50212a13  # mov eax, [gs:eax+0x08]; test eax, eax; je 0x50212A24; push eax; push [esi+0x28]; call [esi+0x24] 
0x5021a541  # or byte [eax], al; pop ecx; pop esi; pop ebp; ret 
0x502137a1  # sbb al, 0x00; pop ecx; pop ecx; xor eax, eax; pop esi; ret 
0x50217044  # push si; call [0x50220130] 
0x5021f01b  # arpl si, di; dec ecx; ret 
0x5021c4b2  # mov word [eax], cx; xor eax, eax; pop esi; pop ebx; leave; ret 
0x50214c31  # mov word [ecx], dx; pop esi; pop ebx; ret 
0x502183b7  # mov word [edi], dx; mov eax, [esp+0x08]; pop edi; ret 
0x502183aa  # mov word [edi], dx; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x5021d9d5  # mov word [eax+0x08], cx; pop ebx; leave; ret 
0x50214c02  # mov word [eax+0x000016B0], cx; pop ebx; ret 
0x5021261a  # sub eax, 0xC581FFFF; mov byte [ecx], al; add byte [eax], al; leave; ret 
0x5021c419  # cmp [di], 0x70; je 0x5021C441; push eax; add dh, byte [ebp-0x26]; call [0x50220028] 
0x5021dbe4  # push 0x40000000; push 0x502228EC; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021dbe4  # push 0x40000000; push 0x502228EC; call [0x5022010C] 
0x50218a99  # push 0x00000105; call edi 
0x502166c5  # push 0x00000120; push [esi+0x28]; call [esi+0x20] 
0x5021bff4  # push 0x50502228; call [0x5022000C]; test eax, eax; je 0x5021C008; push 0x00000000; call eax 
0x5021bff4  # push 0x50502228; call [0x5022000C] 
0x5021bff3  # push 0x50222868; push eax; call [0x5022000C] 
0x50211fb8  # push 0x8868157C; pop ss; and dl, byte [eax-0x18]; retn 0x005F 
0x5021bfe4  # push 0x50222884; call [0x5022016C] 
0x50215507  # push 0x000005A0; push 0x00000008; push [esi+0x28]; call [esi+0x20] 
0x502135fa  # push 0x000016B8; push 0x00000001; push [edi+0x28]; call [edi+0x20] 
0x5021a130  # push 0x0000FDE9; call [0x502200D4]; mov [ebp-0x10], eax; test eax, eax; jne 0x5021A176; call [0x50220028] 
0x5021a130  # push 0x0000FDE9; call [0x502200D4] 
0x5021dbe9  # push 0x502228EC; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021dbe9  # push 0x502228EC; call [0x5022010C] 
0x5021cc33  # imul edi, esi, 0x86E859FF; imul edi, esi, 0xE9008BFF; je 0x5021CC45; add byte [eax], al; push [ebp-0x1C]; call [0x50220044] 
0x5021cc39  # imul edi, esi, 0xE9008BFF; je 0x5021CC45; add byte [eax], al; push [ebp-0x1C]; call [0x50220044] 
0x5021a12e  # push 0x00000000; push 0x0000FDE9; call [0x502200D4] 
0x5021dd11  # push 0x00000000; call [0x5022017C]; push eax; call [0x50220030] 
0x5021dd11  # push 0x00000000; call [0x5022017C] 
0x5021b1af  # push 0x00000000; push [ebp+0x0C]; push eax; call [0x50220118] 
0x5021c003  # push 0x00000000; call eax; ret 
0x5021c003  # push 0x00000000; call eax 
0x5021c58c  # push 0x00000001; push esi; push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x5021c43c  # push 0x00000001; lea eax, [ebp+0x08]; push eax; push esi; call [0x50220174] 
0x50219fe6  # push 0x00000001; lea eax, [ebp-0x01]; push eax; mov eax, [edi]; push [esi+eax]; call [0x50220104] 
0x50215d2d  # push 0x00000001; push [eax+0x28]; call [eax+0x20] 
0x502154f2  # push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x502135ff  # push 0x00000001; push [edi+0x28]; call [edi+0x20] 
0x50213652  # push 0x00000002; mov [esi+0x24], ebx; push ebx; mov [esi+0x50], eax; push [edi+0x28]; call [edi+0x20] 
0x5021a20f  # push 0x00000002; lea eax, [ebp-0x08]; push eax; mov eax, [edi]; push [esi+eax]; call [0x50220104] 
0x50213661  # push 0x00000002; push [esi+0x24]; mov [esi+0x30], eax; push [edi+0x28]; call [edi+0x20] 
0x5021366f  # push 0x00000002; push [esi+0x44]; mov [esi+0x38], eax; push [edi+0x28]; call [edi+0x20] 
0x5021dbdf  # push 0x00000003; push eax; push 0x00000003; push 0x40000000; push 0x502228EC; call [0x5022010C] 
0x5021dbe2  # push 0x00000003; push 0x40000000; push 0x502228EC; call [0x5022010C]; mov [0x50227484], eax; ret 
0x5021dbe2  # push 0x00000003; push 0x40000000; push 0x502228EC; call [0x5022010C] 
0x502166c3  # push 0x00000004; push 0x00000120; push [esi+0x28]; call [esi+0x20] 
0x50216643  # push 0x00000004; push 0x00000013; push [esi+0x28]; call [esi+0x20] 
0x5021588c  # push 0x00000004; lea eax, [eax+ecx+0x00000102]; push eax; push [edi+0x28]; call [edi+0x20] 
0x5021368b  # push 0x00000004; lea ebx, [esi+0x00001694]; push eax; mov [ebx], eax; push [edi+0x28]; call [edi+0x20] 
0x5021dc8e  # push 0x00000008; call [0x5022017C]; push eax; call [0x5022009C] 
0x5021dc8e  # push 0x00000008; call [0x5022017C] 
0x5021c521  # push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x50216645  # push 0x00000013; push [esi+0x28]; call [esi+0x20] 
0x5021a471  # push 0x00000016; pop eax; pop edi; pop esi; pop ebp; ret 
0x50213803  # push 0x00000018; inc ebx; push ebx; push [esi+0x28]; call [esi+0x20] 
0x50217fd8  # push 0x0000001A; pop eax; pop esi; ret 
0x50215d2b  # push 0x0000001C; push 0x00000001; push [eax+0x28]; call [eax+0x20] 
0x502154f0  # push 0x00000040; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x5021c613  # push 0xFFFFFFF6; call [0x5022014C] 
0x5021388b  # push 0xFFFFFFFA; pop eax; pop edi; pop esi; pop ebx; ret 
0x5021669b  # push 0xFFFFFFFD; mov [esi+0x18], 0x50222690; pop ebx; push [ebp+0x18]; push [esi+0x28]; call [esi+0x24] 
0x50213557  # push 0xFFFFFFFE; pop eax; pop esi; ret 
0x50212a79  # push 0xFFFFFFFE; pop eax; pop edi; pop esi; ret 
0x5021376d  # push 0xFFFFFFFE; pop eax; ret 
0x50212908  # imul eax, eax, 0x0C; push esi; call [eax+0x50221818] 
0x5021502d  # imul ecx, ecx, 0x03; add ecx, 0x11; add [ebx+0x000016A0], ecx; pop ebx; ret 
0x5021c389  # insb; xchg eax, edx; and dl, byte [eax+0x72]; sbb al, 0xE8; jc 0x5021C391; call [esi+0x56] 
0x50213ffe  # insd; hlt; add al, byte [ebx+0x7500FC7D]; mov al, byte [0xC95B5E5F]; ret 
0x50215506  # outsd; push 0x000005A0; push 0x00000008; push [esi+0x28]; call [esi+0x20] 
0x5021d6a4  # jo 0x5021D6AA; call [0x50220060] 
0x5021c524  # jo 0x5021C52A; call [0x502200D4] 
0x5021275e  # jo 0x50212768; mov byte [ecx+esi], dl; inc [eax+0x14]; pop edi; pop esi; ret 
0x50217f89  # jo 0x50217FAD; push eax; ret 
0x50215d30  # jo 0x50215D5A; call [eax+0x20] 
0x502162b2  # jo 0x502162DC; call [eax+0x24]; pop ecx; pop ecx; ret 
0x502162b2  # jo 0x502162DC; call [eax+0x24] 
0x5021c483  # jo 0x5021C4F9; and dl, byte [eax+0x01]; add byte [eax], al; add bl, ch; jecxz 0x5021C419; call [ebp-0x75] 
0x5021c41c  # jo 0x5021C492; and dl, byte [eax+0x02]; jne 0x5021C3FD; call [0x50220028] 
0x50212b42  # jo 0x50212ACD; inc esi; pop eax; pop edi; ret 
0x5021d633  # jo 0x5021D632; pop edi; pop esi; pop ebx; leave; ret 
0x5021873b  # jo 0x5021873A; mov eax, [ebp-0x04]; pop esi; pop ebx; leave; ret 
0x5021c391  # jc 0x5021C391; call [esi+0x56] 
0x5021db58  # jnc 0x5021DB60; shrd eax, edx, cl; shr edx, cl; ret 
0x5021db53  # jnc 0x5021DB6A; cmp cl, 0x20; jnc 0x5021DB60; shrd eax, edx, cl; shr edx, cl; ret 
0x5021c445  # je 0x5021C448; and dl, byte [eax+0x50]; call [0x50220060] 
0x5021cc3f  # je 0x5021CC45; add byte [eax], al; push [ebp-0x1C]; call [0x50220044] 
0x5021f9fc  # je 0x5021FA03; or eax, 0x00001000; ret 
0x50216ec8  # je 0x50216ECF; cmp byte [eax+0x01], dl; jne 0x50216ED3; xor eax, eax; inc eax; ret 
0x5021c001  # je 0x5021C008; push 0x00000000; call eax; ret 
0x5021c001  # je 0x5021C008; push 0x00000000; call eax 
0x5021c03b  # je 0x5021C042; cmp eax, 0x01; jne 0x5021C019; xor eax, eax; pop ebp; ret 
0x5021549e  # je 0x502154A5; cmp eax, 0x05; jne 0x502154B0; push [esi+0x0C]; push [edi+0x28]; call [edi+0x24] 
0x5021a596  # je 0x5021A59E; cmp [ebp+0x0C], 0x00000000; jnle 0x5021A585; pop esi; pop ebp; ret 
0x5021b508  # je 0x5021B511; mov eax, [ebp-0x08]; and [eax+0x70], 0xFFFFFFFD; leave; ret 
0x50218f72  # je 0x50218F7C; test bl, bl; je 0x502191CC; call [0x50220160] 
0x50212a19  # je 0x50212A24; push eax; push [esi+0x28]; call [esi+0x24] 
0x5021fa8e  # je 0x5021FA9A; cmp edx, ecx; jne 0x5021FAA3; or eax, 0x00008000; ret 
0x502167b5  # je 0x502167C1; mov [esi+0x18], 0x502226DC; mov [ebp+0x28], ecx; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x50218ade  # je 0x50218AEB; push ebx; push [ebp-0x00000114]; call edi 
0x502154d6  # je 0x502154E6; push ebx; push ebx; push ebx; call eax 
0x5021684c  # je 0x50216861; push ebx; push ecx; push [esi+0x3C]; call eax 
0x5021bff1  # je 0x5021C008; push 0x50222868; push eax; call [0x5022000C] 
0x5021c8c2  # je 0x5021C8DF; push ebx; call [0x50220084] 
0x5021c41d  # je 0x5021C441; push eax; add dh, byte [ebp-0x26]; call [0x50220028] 
0x5021dbf6  # je 0x5021DC1A; push eax; ret 
0x502162aa  # je 0x502162D0; add al, 0x8B; inc esp; and al, 0x0C; push [eax+0x28]; call [eax+0x24] 
0x502154ec  # je 0x50215512; or byte [edi+0x6A], dl; inc eax; push 0x00000001; push [esi+0x28]; call [esi+0x20] 
0x50215475  # je 0x5021549B; or al, ch; ret 
0x50215486  # je 0x502154AC; or al, 0x33; fist [edi+0x3B]; ret 
0x5021311c  # je 0x50213142; sbb byte [ebx], dh; rol byte [ebx-0x6BF0FB02], cl; retn 0x8B52 
0x50217043  # je 0x502170AB; push esi; call [0x50220130] 
0x5021d03d  # je 0x5021D0B5; push [ebp-0x1C]; call [0x50220108] 
0x5021212a  # je 0x502120B9; inc esp; pop ss; jmp [esi+0x0F] 
0x5021a573  # jne 0x5021A578; or [esi], eax; ret 
0x50216ecd  # jne 0x50216ED3; xor eax, eax; inc eax; ret 
0x50212a91  # jne 0x50212A97; xor eax, eax; pop edi; ret 
0x50216769  # jne 0x5021676F; cmp ebx, edi; jnbe 0x5021679C; push [ebp-0x04]; push [esi+0x28]; call [esi+0x24] 
0x5021c017  # jne 0x5021C01E; xor eax, eax; inc eax; pop ebp; ret 
0x50217fd6  # jne 0x50217FDD; push 0x0000001A; pop eax; pop esi; ret 
0x502127ab  # jne 0x502127B3; mov eax, [esi+0x08]; mov [esi+0x10], eax; pop edi; pop esi; ret 
0x5021de80  # jne 0x5021DE89; mov eax, 0x00008000; pop ebp; ret 
0x5021c51d  # jne 0x5021C527; push ecx; push esi; push 0x00000009; push [eax+0x04]; call [0x502200D4] 
0x5021c0f8  # jne 0x5021C102; lea eax, [ebp-0x04]; push eax; call esi 
0x50216c28  # jne 0x50216C32; call [0x50220100]; test eax, eax; jne 0x50216C3C; call [0x50220028] 
0x50216c28  # jne 0x50216C32; call [0x50220100] 
0x50216c32  # jne 0x50216C3C; call [0x50220028] 
0x10010175  # add byte [eax], al; add byte [eax], al; add byte [ebx+0x0F74003E], al; mov eax, [esi+0x00000088]; push eax; call edi 
0x100164f5  # add byte [eax], al; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x1001018a  # add byte [eax], al; add byte [eax], al; pop edi; xor eax, eax; pop esi; ret 
0x10014d5c  # add byte [eax], al; add byte [eax], al; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x10012f15  # add byte [eax], al; add byte [eax], al; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10012f01  # add byte [eax], al; add byte [eax], al; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0E4] 
0x10016088  # add byte [eax], al; add byte [eax], al; mov ecx, [ebp-0x04]; push ecx; call [0x1001F0E4] 
0x10016191  # add byte [eax], al; add byte [eax], al; mov eax, 0x00000001; mov esp, ebp; pop ebp; ret 
0x10010fd7  # add byte [eax], al; add byte [eax], al; ret 
0x10010fd0  # add byte [eax], al; add byte [eax], al; mov [eax+0x04], 0x00000000; ret 
0x10019954  # add byte [eax], al; add byte [ebx], al; retn 0xC06B 
0x10016a2c  # add byte [eax], al; add byte [ebx], ch; inc ebp; lock mov esp, ebp; pop ebp; ret 
0x10013348  # add byte [eax], al; add byte [eax+0x00], ch; add [eax], eax; add byte [ebp-0x0000FF7B], cl; call [eax-0x75] 
0x100131b7  # add byte [eax], al; add byte [eax+0x00], ch; add [eax], eax; add byte [ebp-0x0000FF73], cl; call [ecx-0x75] 
0x10018c1d  # add byte [eax], al; add byte [eax-0x78], ch; lahf; add dl, byte [eax]; call [0x1001F114] 
0x10010177  # add byte [eax], al; add byte [ebx+0x0F74003E], al; mov eax, [esi+0x00000088]; push eax; call edi 
0x100166ec  # add byte [eax], al; add byte [ebx-0x3FCCF73C], al; mov esp, ebp; pop ebp; ret 
0x10010773  # add byte [eax], al; add byte [ebx-0x3974F73C], al; pop esi; ret 
0x1001650f  # add byte [eax], al; add byte [ebx-0x3FCCF33C], al; pop ebp; ret 
0x10015ead  # add byte [eax], al; add byte [ebx+0x458B0CC4], al; clc; mov esp, ebp; pop ebp; ret 
0x10018cbb  # add byte [eax], al; add byte [ebx-0x1A74F33C], al; pop ebp; ret 
0x10012ee8  # add byte [eax], al; add byte [ebx+0x458910C4], al; cld; mov eax, [ebp-0x58]; push eax; call [0x1001F0E4] 
0x10016bad  # add byte [eax], al; add byte [ebx-0x1A74EF3C], al; pop ebp; ret 
0x10010131  # add byte [eax], al; add byte [ebp-0x7CE58B40], al; rol al, 0x50; mov [esi+0x0000008C], eax; call [0x1001F030] 
0x10010207  # add byte [eax], al; add byte [ebp+0x320975C0], al; rol byte [ecx+0x000080C4], 0x00; ret 
0x10015c50  # add byte [eax], al; add byte [ebx+0x02A1C80D], cl; adc cl, al; loope 0x10015C5E; push ecx; call [0x1001F0F0] 
0x10012f16  # add byte [eax], al; add byte [ebx-0x1A7403BB], cl; pop ebp; ret 
0x10014946  # add byte [eax], al; add byte [ebx+0x518B084D], cl; adc al, 0x81; retn 0x076C 
0x100154d3  # add byte [eax], al; add byte [ebx-0x3FCC2BB3], cl; mov al, byte [ecx+0x10015616]; jmp [0x100155FE+eax*4] 
0x100163a8  # add byte [eax], al; add byte [ebp-0x74AF7FBB], cl; lea edi, [edi+edi*8-0x01]; call [ecx-0x18] 
0x100165c6  # add byte [eax], al; add byte [ebp-0x00010773], cl; call [ecx-0x73] 
0x10016192  # add byte [eax], al; add byte [eax+0x00000001], bh; mov esp, ebp; pop ebp; ret 
0x10010281  # add byte [eax], al; add bl, al; push eax; call [0x1001F03C] 
0x10016828  # add byte [eax], al; add al, ch; mov bh, 0x00; add byte [eax], al; push eax; call [0x1001F120] 
0x1001652a  # add byte [eax], al; add cl, ch; retn 0x0001 
0x1001b512  # add byte [eax], al; add cl, ch; ret 
0x10015cdd  # add byte [eax], al; add bl, ch; fisubr [edx+0x10]; call [0x1001F0F0] 
0x1001212d  # add byte [eax], al; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100121c0  # add byte [eax], al; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x1001225a  # add byte [eax], al; movsx ecx, byte [ebp-0x0A]; push ecx; call [0x1001F118] 
0x1001233c  # add byte [eax], al; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012206  # add byte [eax], al; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x10012382  # add byte [eax], al; movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x10016a2d  # add byte [eax], al; sub eax, [ebp-0x10]; mov esp, ebp; pop ebp; ret 
0x100164f7  # add byte [eax], al; xor eax, eax; pop ebp; ret 
0x1001682e  # add byte [eax], al; push eax; call [0x1001F120] 
0x10010183  # add byte [eax], al; push eax; call edi 
0x1001018c  # add byte [eax], al; pop edi; xor eax, eax; pop esi; ret 
0x10014ca7  # add byte [eax], al; push 0x10028F28; mov eax, [ebp+0x08]; push eax; call [0x1001F0C0] 
0x10018c1e  # add byte [eax], al; push 0x10029F88; call [0x1001F114] 
0x10011f27  # add byte [eax], al; push 0x10028EB8; call [0x1001F114] 
0x100157c1  # add byte [eax], al; push 0x00000014; call [0x1001F0F0] 
0x100151a6  # add byte [eax], al; push 0x0000002F; mov edx, [ebp+0x08]; push edx; call [0x1001F090] 
0x10018a03  # add byte [eax], al; push 0x00000054; call [0x1001F0F0] 
0x100164d4  # add byte [eax], al; cmp [0x1002A1D4], 0x00000000; je 0x100164F9; mov ecx, [0x1002A1D4]; push ecx; call [0x1001F0E4] 
0x10010178  # add byte [eax], al; cmp [esi], 0x00000000; je 0x1001018E; mov eax, [esi+0x00000088]; push eax; call edi 
0x10015cf7  # add byte [eax], al; add esp, 0x04; add eax, 0x01; push eax; call [0x1001F0F0] 
0x1001583e  # add byte [eax], al; add esp, 0x04; mov eax, [ebp-0x48]; push eax; call [0x1001F0E4] 
0x100168bb  # add byte [eax], al; add esp, 0x04; mov eax, [ebp-0x04]; push eax; call [0x1001F0E4] 
0x10015891  # add byte [eax], al; add esp, 0x04; mov edx, [ebp-0x48]; push edx; call [0x1001F0E4] 
0x10014ce1  # add byte [eax], al; add esp, 0x04; mov esp, ebp; pop ebp; ret 
0x100166ed  # add byte [eax], al; add esp, 0x08; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x10010edd  # add byte [eax], al; add esp, 0x08; test eax, eax; setne al; ret 
0x10018b2a  # add byte [eax], al; add esp, 0x08; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x10010774  # add byte [eax], al; add esp, 0x08; mov eax, esi; pop esi; ret 
0x1001547c  # add byte [eax], al; add esp, 0x08; mov esp, ebp; pop ebp; ret 
0x10016510  # add byte [eax], al; add esp, 0x0C; xor eax, eax; pop ebp; ret 
0x10015eae  # add byte [eax], al; add esp, 0x0C; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x10018cbc  # add byte [eax], al; add esp, 0x0C; mov esp, ebp; pop ebp; ret 
0x10012ee9  # add byte [eax], al; add esp, 0x10; mov [ebp-0x04], eax; mov eax, [ebp-0x58]; push eax; call [0x1001F0E4] 
0x10014f68  # add byte [eax], al; add esp, 0x10; mov esp, ebp; pop ebp; ret 
0x10010208  # add byte [eax], al; test eax, eax; jne 0x10010217; xor al, al; add esp, 0x00000080; ret 
0x10014d8b  # add byte [eax], al; mov ecx, [0x1002900C]; mov [ebp+0x08], ecx; push 0x00000054; call [0x1001F0F0] 
0x10015c51  # add byte [eax], al; mov ecx, [0x1002A1C8]; shl ecx, 0x02; push ecx; call [0x1001F0F0] 
0x10014d5e  # add byte [eax], al; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x100176f7  # add byte [eax], al; mov eax, [ebp-0x18]; jmp [0x10017844+eax*4] 
0x1001750f  # add byte [eax], al; mov eax, [ebp-0x18]; jmp [0x1001765C+eax*4] 
0x10012e03  # add byte [eax], al; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x100154d4  # add byte [eax], al; mov ecx, [ebp-0x2C]; xor eax, eax; mov al, byte [ecx+0x10015616]; jmp [0x100155FE+eax*4] 
0x10018dc8  # add byte [eax], al; mov ecx, [ebp-0x18]; mov [ebp-0x00000170], ecx; mov edx, [ebp-0x00000170]; push edx; call [0x1001F0F0] 
0x10012f03  # add byte [eax], al; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0E4] 
0x10016684  # add byte [eax], al; mov ecx, [ebp-0x04]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x1001608a  # add byte [eax], al; mov ecx, [ebp-0x04]; push ecx; call [0x1001F0E4] 
0x100191f8  # add byte [eax], al; mov edx, [ebp+0x08]; mov [edx+0x08], eax; pop ebp; ret 
0x10019084  # add byte [eax], al; mov edx, [ebp+0x08]; mov [edx+0x18], eax; pop ebp; ret 
0x10017325  # add byte [eax], al; mov edx, [ebp-0x18]; jmp [0x10017474+edx*4] 
0x1001713f  # add byte [eax], al; mov edx, [ebp-0x18]; jmp [0x1001728E+edx*4] 
0x10018fb3  # add byte [eax], al; mov ecx, [ebp-0x00000138]; push ecx; call [0x1001F0E4] 
0x10013127  # add byte [eax], al; mov edx, [ebp-0x00000218]; xor ecx, ecx; mov cl, byte [edx+0x10014880]; jmp [0x10014824+ecx*4] 
0x10014c96  # add byte [eax], al; mov esp, ebp; pop ebp; ret 
0x10018da0  # add byte [eax], al; lea ecx, [ebp-0x2C]; push ecx; mov edx, [ebp-0x34]; push edx; call [0x1001F164] 
0x10014e72  # add byte [eax], al; mov eax, [0x1002900C]; pop ebp; ret 
0x10016193  # add byte [eax], al; mov eax, 0x00000001; mov esp, ebp; pop ebp; ret 
0x10016369  # add byte [eax], al; mov byte [0x1002A1D0], 0x01; push 0x10029524; call [0x1001F114] 
0x10010fd2  # add byte [eax], al; mov [eax+0x04], 0x00000000; ret 
0x10016784  # add byte [eax], al; mov [ebp-0x00000194], 0x00000000; mov eax, 0x00000001; mov esp, ebp; pop ebp; ret 
0x10016730  # add byte [eax], al; call [0x1001F078]; push eax; call [0x1001F018] 
0x10016730  # add byte [eax], al; call [0x1001F078] 
0x10011cf0  # add byte [eax], al; call [0x1001F0F0] 
0x10012891  # add byte [ecx], al; mov [ebp-0x08], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10019956  # add byte [ebx], al; retn 0xC06B 
0x100149ac  # add byte [edi], cl; xchg eax, esp; retn 0x5589 
0x10018126  # add byte [edi], cl; mov esi, 0x029A8091; adc byte [ebx], al; retn 0x7CEB 
0x10018034  # add byte [edi], cl; mov esi, 0x0295A091; adc byte [ebx], al; retn 0x7CEB 
0x10016a2e  # add byte [ebx], ch; inc ebp; lock mov esp, ebp; pop ebp; ret 
0x10010157  # add byte [edi-0x75], dl; cmp eax, 0x1001F03C; test eax, eax; je 0x1001017A; push eax; call edi 
0x10011d66  # add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x10011b53  # add byte [ebx+0x5E], bl; pop edi; retn 0x0010 
0x10011a9c  # add byte [edi+0x5B], bl; retn 0x0010 
0x1001334a  # add byte [eax+0x00], ch; add [eax], eax; add byte [ebp-0x0000FF7B], cl; call [eax-0x75] 
0x100131b9  # add byte [eax+0x00], ch; add [eax], eax; add byte [ebp-0x0000FF73], cl; call [ecx-0x75] 
0x10018c1f  # add byte [eax-0x78], ch; lahf; add dl, byte [eax]; call [0x1001F114] 
0x100157c2  # add byte [edx+0x14], ch; call [0x1001F0F0] 
0x100151a7  # add byte [edx+0x2F], ch; mov edx, [ebp+0x08]; push edx; call [0x1001F090] 
0x10018a04  # add byte [edx+0x54], ch; call [0x1001F0F0] 
0x100101b1  # add byte [edx-0x01], ch; push eax; call [0x1001F044] 
0x100157b8  # add byte [eax+ecx-0x75], dh; inc ebp; mov eax, 0x000282E9; add byte [edx+0x14], ch; call [0x1001F0F0] 
0x10012c23  # add byte [eax+ecx-0x75], dh; dec ebp; adc byte [ebx+0x20750039], al; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10012ca7  # add byte [eax+ecx-0x75], dh; push ebp; adc byte [ebx+0x2075003A], al; mov eax, [ebp-0x08]; push eax; call [0x1001F0F0] 
0x10016872  # add byte [eax+ecx-0x5F], dh; fsub [ecx+0x45891002]; clc; mov ecx, [ebp-0x0C]; push ecx; call [0x1001F0F0] 
0x10016935  # add byte [ecx+ecx-0x75], dh; or eax, 0x1002A1D4; mov [ebp-0x04], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100167be  # add byte [ecx+ecx-0x75], dh; or eax, 0x1002A1D8; mov [ebp-0x04], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10016807  # add byte [ebp+ecx-0x75], dh; inc ebp; cld; push eax; call [0x1001F0E4] 
0x100168d0  # add byte [ebp+ecx-0x75], dh; dec ebp; clc; push ecx; call [0x1001F0E4] 
0x1001017c  # add byte [edi+ecx-0x75], dh; xchg byte [eax+0x50000000], cl; call edi 
0x100164dc  # add byte [edx+ebx-0x75], dh; or eax, 0x1002A1D4; push ecx; call [0x1001F0E4] 
0x10011e1f  # add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1001F01C]; push 0x00000001; pop eax; retn 0x000C 
0x10011e1f  # add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1001F01C] 
0x10018a6f  # add byte [ebp+0x14], dh; mov eax, [ebp-0x08]; push eax; call [0x1001F0E4] 
0x10015134  # add byte [ebp+0x1A], dh; mov ecx, [ebp-0x08]; mov edx, [ecx+0x10]; push edx; call [0x1001F0E4] 
0x10012d36  # add byte [ebp+0x20], dh; mov eax, [ebp-0x0C]; push eax; call [0x1001F0F0] 
0x10012caf  # add byte [ebp+0x20], dh; mov eax, [ebp-0x08]; push eax; call [0x1001F0F0] 
0x10012c2b  # add byte [ebp+0x20], dh; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10016031  # add byte [ebp+0x22], dh; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1001F0E4] 
0x10015c46  # add byte [ebp+0x24], dh; mov [0x1002A1C8], 0x0000000A; mov ecx, [0x1002A1C8]; shl ecx, 0x02; push ecx; call [0x1001F0F0] 
0x10014f08  # add byte [ebp+0x2B], dh; push 0x10028F34; call [0x1001F114] 
0x10012b31  # add byte [ebp+0x30], dh; mov ecx, [ebp-0x04]; push ecx; call [0x1001F0E4] 
0x1001228b  # add byte [ebp+0x4C], dh; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F158] 
0x100123b5  # add byte [ebp+0x6B], dh; movsx edx, byte [ebp-0x0C]; push edx; call [0x1001F158] 
0x10015803  # add byte [ebp+0x14], bh; mov eax, [ebp-0x48]; push eax; call [0x1001F0E4] 
0x100143c3  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x000001E4]; push eax; call [0x1001F174] 
0x10013e5d  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x000001AC]; push eax; call [0x1001F174] 
0x10013e04  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x000001A4]; push eax; call [0x1001F174] 
0x10013cc6  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x00000198]; push eax; call [0x1001F174] 
0x100138e4  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x00000174]; push eax; call [0x1001F174] 
0x100135cf  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x00000154]; push eax; call [0x1001F174] 
0x100132fb  # add byte [esi+0x25], bh; push 0x00000008; mov ax, word [ebp-0x00000140]; push eax; call [0x1001F174] 
0x10013a2c  # add byte [esi+0x25], bh; push 0x00000008; mov cx, word [ebp-0x00000180]; push ecx; call [0x1001F174] 
0x10013799  # add byte [esi+0x25], bh; push 0x00000008; mov cx, word [ebp-0x00000168]; push ecx; call [0x1001F174] 
0x10013717  # add byte [esi+0x25], bh; push 0x00000008; mov cx, word [ebp-0x00000160]; push ecx; call [0x1001F174] 
0x1001316a  # add byte [esi+0x25], bh; push 0x00000008; mov cx, word [ebp-0x00000138]; push ecx; call [0x1001F174] 
0x10012f69  # add byte [esi+0x25], bh; push 0x00000008; mov cx, word [ebp-0x00000120]; push ecx; call [0x1001F174] 
0x10014654  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x000001FC]; push edx; call [0x1001F174] 
0x10014266  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x000001D8]; push edx; call [0x1001F174] 
0x100141e4  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x000001D0]; push edx; call [0x1001F174] 
0x100140a7  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x000001C4]; push edx; call [0x1001F174] 
0x10014025  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x000001BC]; push edx; call [0x1001F174] 
0x10013fa3  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x000001B4]; push edx; call [0x1001F174] 
0x10013b7b  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x0000018C]; push edx; call [0x1001F174] 
0x10013488  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x00000148]; push edx; call [0x1001F174] 
0x10013084  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x00000130]; push edx; call [0x1001F174] 
0x100147c9  # add byte [esi+0x25], bh; push 0x00000008; mov dx, word [ebp-0x00000208]; push edx; call [0x1001F174] 
0x100164d5  # add byte [ebx+0x02A1D43D], al; adc byte [eax], al; je 0x100164F9; mov ecx, [0x1002A1D4]; push ecx; call [0x1001F0E4] 
0x10010179  # add byte [ebx+0x0F74003E], al; mov eax, [esi+0x00000088]; push eax; call edi 
0x1001585f  # add byte [ebx+0x086A04C4], al; push 0x10028F4C; lea edx, [ebp-0x20]; push edx; call [0x1001F0CC] 
0x10012d69  # add byte [ebx-0x3F7CFB3C], al; add [ecx+0x458BF845], ecx; clc; shl eax, 1; push eax; call [0x1001F0F0] 
0x100168bc  # add byte [ebx+0x458B04C4], al; cld; push eax; call [0x1001F0E4] 
0x10014ce2  # add byte [ebx-0x1A74FB3C], al; pop ebp; ret 
0x100166ee  # add byte [ebx-0x3FCCF73C], al; mov esp, ebp; pop ebp; ret 
0x10010ede  # add byte [ebx-0x3F7AF73C], al; setne al; ret 
0x10018b2b  # add byte [ebx+0x458B08C4], al; clc; mov esp, ebp; pop ebp; ret 
0x10010775  # add byte [ebx-0x3974F73C], al; pop esi; ret 
0x1001547d  # add byte [ebx-0x1A74F73C], al; pop ebp; ret 
0x10016511  # add byte [ebx-0x3FCCF33C], al; pop ebp; ret 
0x1001595f  # add byte [ebx-0x077CF33C], al; sbb al, 0x74; xor ecx, [ebx+0x518BB84D]; or al, 0x52; call [0x1001F0E4] 
0x10015fe8  # add byte [ebx-0x077CF33C], al; push [ebp+0x21]; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1001F0E4] 
0x10015f67  # add byte [ebx-0x077CF33C], al; push [ebp+0x21]; mov edx, [ebp+0x0C]; mov eax, [edx+0x10]; push eax; call [0x1001F0E4] 
0x10015eaf  # add byte [ebx+0x458B0CC4], al; clc; mov esp, ebp; pop ebp; ret 
0x10018cbd  # add byte [ebx-0x1A74F33C], al; pop ebp; ret 
0x10012eea  # add byte [ebx+0x458910C4], al; cld; mov eax, [ebp-0x58]; push eax; call [0x1001F0E4] 
0x10014f69  # add byte [ebx-0x1A74EF3C], al; pop ebp; ret 
0x10010133  # add byte [ebp-0x7CE58B40], al; rol al, 0x50; mov [esi+0x0000008C], eax; call [0x1001F030] 
0x100106f9  # add byte [ebp-0x170D8A40], al; sbb eax, 0x5FFFFF98; pop esi; pop ebx; ret 
0x10012284  # add byte [ecx+0x7D83D445], cl; aam 0x00; jne 0x100122DA; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F158] 
0x100123ae  # add byte [ecx+0x7D83C84D], cl; enter 0x7500, 0x6B; movsx edx, byte [ebp-0x0C]; push edx; call [0x1001F158] 
0x10014d8c  # add byte [ebx+0x02900C0D], cl; adc byte [ecx+0x546A084D], cl; call [0x1001F0F0] 
0x100121f7  # add byte [ebx+0x01F11C0D], cl; adc byte [ebx+0x187E0139], al; push 0x00000103; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x10012373  # add byte [ebx+0x01F11C0D], cl; adc byte [ebx+0x187E0139], al; push 0x00000107; movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x10015c52  # add byte [ebx+0x02A1C80D], cl; adc cl, al; loope 0x10015C5E; push ecx; call [0x1001F0F0] 
0x1001211e  # add byte [ebx+0x01F11C15], cl; adc byte [ebx+0x187E013A], al; push 0x00000103; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100139ff  # add byte [ebx-0x41F0F7BB], cl; or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], eax; call [0x1001F178] 
0x1001376c  # add byte [ebx-0x41F0F7BB], cl; or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], ebx; call [0x1001F178] 
0x100136ea  # add byte [ebx-0x41F0F7BB], cl; or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], esp; call [0x1001F178] 
0x10014d5f  # add byte [ebx-0x00AFF7BB], cl; adc eax, 0x1001F0E4; add esp, 0x04; xor eax, eax; pop ebp; ret 
0x100170c7  # add byte [ebx-0x1A74EBBB], cl; pop ebp; ret 
0x1001264c  # add byte [ebx+0x452B1845], cl; clc; mov esp, ebp; pop ebp; ret 
0x10012e04  # add byte [ebx-0x1A7403BB], cl; pop ebp; ret 
0x10013ff8  # add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea eax, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013f76  # add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013b4e  # add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea esi, [esi+edi*8-0x01]; call [ecx-0x01] 
0x1001345b  # add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea edi, [eax+0x51FFFFFE]; call [0x1001F178] 
0x10014948  # add byte [ebx+0x518B084D], cl; adc al, 0x81; retn 0x076C 
0x100154d5  # add byte [ebx-0x3FCC2BB3], cl; mov al, byte [ecx+0x10015616]; jmp [0x100155FE+eax*4] 
0x10013c99  # add byte [ebx-0x41F0F7AB], cl; add al, byte [ebp+0x6A4A74C0]; add cl, byte [ebx-0x72AEF7B3]; xchg eax, ebp; push 0x52FFFFFE; call [0x1001F178] 
0x100132ce  # add byte [ebx-0x41F0F7AB], cl; add al, byte [ebp+0x6A4A74C0]; add cl, byte [ebx-0x72AEF7B3]; xchg eax, ebp; sar dh, 0xFF; call [edx-0x01] 
0x10016ba6  # add byte [ebx-0x17ADF7AB], cl; pop es; add byte [eax], al; add byte [ebx-0x1A74EF3C], al; pop ebp; ret 
0x10017d7c  # add byte [ebx-0x3D7CF7AB], cl; add cl, byte [ecx-0x2214F7AB]; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10018e04  # add byte [ebx-0x00016F73], cl; call [ecx-0x75] 
0x10018fb4  # add byte [ebx-0x00013773], cl; call [ecx-0x01] 
0x10013128  # add byte [ebx-0x0002176B], cl; push [ebx]; leave; mov cl, byte [edx+0x10014880]; jmp [0x10014824+ecx*4] 
0x10010543  # add byte [ebx+0x75FF85F8], cl; add ebx, [edi+0x5E]; ret 
0x1001583c  # add byte [eax+eax+0x04C48300], cl; mov eax, [ebp-0x48]; push eax; call [0x1001F0E4] 
0x100163aa  # add byte [ebp-0x74AF7FBB], cl; lea edi, [edi+edi*8-0x01]; call [ecx-0x18] 
0x10018da1  # add byte [ebp-0x74AE2BB3], cl; push ebp; int3; push edx; call [0x1001F164] 
0x1001322a  # add byte [ebp-0x0000FF7B], cl; call [eax-0x75] 
0x1001324c  # add byte [ebp-0x0000FF7B], cl; call [eax-0x18] 
0x10018d82  # add byte [ebp-0x0001337B], cl; call [eax-0x18] 
0x1001535b  # add byte [ebp-0x00041F7B], cl; call [eax-0x75] 
0x10013ef7  # add byte [ebp-0x0000FF73], cl; call [ecx+0x6A]; sub [ebx-0x0001136B], ecx; call [edx-0x01] 
0x10013ef7  # add byte [ebp-0x0000FF73], cl; call [ecx+0x6A] 
0x100131be  # add byte [ebp-0x0000FF73], cl; call [ecx-0x75] 
0x100131e0  # add byte [ebp-0x0000FF73], cl; call [ecx-0x18] 
0x1001662b  # add byte [ebp-0x00008773], cl; dec [ecx+0x036A084D]; push 0x10029558; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x100165c8  # add byte [ebp-0x00010773], cl; call [ecx-0x73] 
0x10013e89  # add byte [ebp-0x0000FF6B], cl; call [edx+0x6A]; sub byte [ebx-0x0001137B], cl; call [eax-0x01] 
0x10013e89  # add byte [ebp-0x0000FF6B], cl; call [edx+0x6A] 
0x100133bb  # add byte [ebp-0x0000FF6B], cl; call [edx-0x75] 
0x100133dd  # add byte [ebp-0x0000FF6B], cl; call [edx-0x18] 
0x10014e73  # add byte [ecx+0x1002900C], ah; pop ebp; ret 
0x10016194  # add byte [eax+0x00000001], bh; mov esp, ebp; pop ebp; ret 
0x10010283  # add bl, al; push eax; call [0x1001F03C]; mov al, 0x01; add esp, 0x00000080; ret 
0x10010283  # add bl, al; push eax; call [0x1001F03C] 
0x1001636a  # add dh, al; add eax, 0x1002A1D0; add [eax+0x24], ebp; xchg eax, ebp; add dl, byte [eax]; call [0x1001F114] 
0x1001682a  # add al, ch; mov bh, 0x00; add byte [eax], al; push eax; call [0x1001F120] 
0x1001652c  # add cl, ch; retn 0x0001 
0x1001b514  # add cl, ch; ret 
0x10015cdf  # add bl, ch; fisubr [edx+0x10]; call [0x1001F0F0] 
0x10016731  # add bh, bh; adc eax, 0x1001F078; push eax; call [0x1001F018] 
0x10014c94  # add [eax], eax; add byte [eax], al; mov esp, ebp; pop ebp; ret 
0x100149aa  # add [eax], eax; add byte [edi], cl; xchg eax, esp; retn 0x5589 
0x10018a02  # add [eax], eax; add byte [edx+0x54], ch; call [0x1001F0F0] 
0x100123ac  # add [eax], eax; add byte [ecx+0x7D83C84D], cl; enter 0x7500, 0x6B; movsx edx, byte [ebp-0x0C]; push edx; call [0x1001F158] 
0x10018e02  # add [eax], eax; add byte [ebx-0x00016F73], cl; call [ecx-0x75] 
0x10013228  # add [eax], eax; add byte [ebp-0x0000FF7B], cl; call [eax-0x75] 
0x10013ef5  # add [eax], eax; add byte [ebp-0x0000FF73], cl; call [ecx+0x6A]; sub [ebx-0x0001136B], ecx; call [edx-0x01] 
0x10013ef5  # add [eax], eax; add byte [ebp-0x0000FF73], cl; call [ecx+0x6A] 
0x100131bc  # add [eax], eax; add byte [ebp-0x0000FF73], cl; call [ecx-0x75] 
0x10013e87  # add [eax], eax; add byte [ebp-0x0000FF6B], cl; call [edx+0x6A]; sub byte [ebx-0x0001137B], cl; call [eax-0x01] 
0x10013e87  # add [eax], eax; add byte [ebp-0x0000FF6B], cl; call [edx+0x6A] 
0x100133b9  # add [eax], eax; add byte [ebp-0x0000FF6B], cl; call [edx-0x75] 
0x1001674f  # add [eax], edx; push eax; call [0x1001F018]; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x10016736  # add [eax], edx; push eax; call [0x1001F018] 
0x10011e2a  # add [eax], edx; push 0x00000001; pop eax; retn 0x000C 
0x1001259f  # add [eax], edx; add esp, 0x04; xor eax, eax; pop ebp; ret 
0x10016812  # add [eax], edx; add esp, 0x04; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x10012923  # add [eax], edx; add esp, 0x04; pop ebp; ret 
0x100123c1  # add [eax], edx; add esp, 0x04; mov byte [ebp-0x0C], al; movsx eax, byte [ebp-0x0B]; push eax; call [0x1001F158] 
0x10012297  # add [eax], edx; add esp, 0x04; mov byte [ebp-0x0C], al; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F158] 
0x100123d2  # add [eax], edx; add esp, 0x04; mov byte [ebp-0x0B], al; movsx ecx, byte [ebp-0x09]; push ecx; call [0x1001F154] 
0x100123e3  # add [eax], edx; add esp, 0x04; mov byte [ebp-0x09], al; movsx edx, byte [ebp-0x08]; push edx; call [0x1001F154] 
0x1001515e  # add [eax], edx; add esp, 0x04; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x10012bd5  # add [eax], edx; add esp, 0x04; mov eax, [ebp-0x0C]; push eax; call [0x1001F0E4] 
0x10012dc1  # add [eax], edx; add esp, 0x04; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10016337  # add [eax], edx; add esp, 0x04; mov edx, [ebp+0x08]; push edx; call [0x1001F0E4] 
0x10012b3c  # add [eax], edx; add esp, 0x04; mov edx, [ebp-0x0C]; push edx; call [0x1001F0E4] 
0x10016344  # add [eax], edx; add esp, 0x04; mov esp, ebp; pop ebp; ret 
0x100164ea  # add [eax], edx; add esp, 0x04; mov [0x1002A1D4], 0x00000000; xor eax, eax; pop ebp; ret 
0x10012ef9  # add [eax], edx; add esp, 0x04; mov [ebp-0x58], 0x00000000; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0E4] 
0x10011f78  # add [eax], edx; add esp, 0x0C; call [0x1001F014] 
0x10012b19  # add [eax], edx; add esp, 0x10; mov [ebp-0x08], eax; mov eax, [ebp-0x10]; push eax; call [0x1001F0E4] 
0x1001015d  # add [eax], edx; test eax, eax; je 0x1001017A; push eax; call edi 
0x10016756  # add [eax], edx; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x1001028a  # add [eax], edx; mov al, 0x01; add esp, 0x00000080; ret 
0x100154df  # add [eax], edx; jmp [0x100155FE+eax*4] 
0x10013135  # add [eax], edx; jmp [0x10014824+ecx*4] 
0x10018589  # add [eax], edx; jmp [0x10018707+edx*4] 
0x10016c3f  # add [eax], edx; jmp [0x10016E2E+edx*4] 
0x10018244  # add [eax], edx; jmp [0x10018336+edx*4] 
0x10016abe  # add [eax], edx; jmp [0x10016B38+edx*4] 
0x10018398  # add [eax], edx; jmp [0x1001848A+edx*4] 
0x10018834  # add [eax], edx; jmp [0x100189CA+edx*4] 
0x1001e432  # add [eax], edx; jmp [0x1001F138] 
0x1001e438  # add [eax], edx; jmp [0x1001F13C] 
0x1001e43e  # add [eax], edx; jmp [0x1001F144] 
0x1001e474  # add [eax], edx; jmp [0x1001F160] 
0x1001e444  # add [eax], edx; jmp [0x1001F168] 
0x1001e44a  # add [eax], edx; jmp [0x1001F16C] 
0x1001e450  # add [eax], edx; jmp [0x1001F170] 
0x1001e456  # add [eax], edx; jmp [0x1001F180] 
0x1001e45c  # add [eax], edx; jmp [0x1001F188] 
0x1001e462  # add [eax], edx; jmp [0x1001F18C] 
0x10011e44  # add [eax], edx; jmp [0x1001F194] 
0x10011e4a  # add [eax], edx; jmp [0x1001F1A0] 
0x10011e50  # add [eax], edx; jmp [0x1001F1A4] 
0x10011e56  # add [eax], edx; jmp [0x1001F1A8] 
0x10011f69  # add [edx+0x68], edx; ror byte [esi+0x458B1002], 0x08; push eax; call [0x1001F0C8]; add esp, 0x0C; call [0x1001F014] 
0x10011f69  # add [edx+0x68], edx; ror byte [esi+0x458B1002], 0x08; push eax; call [0x1001F0C8] 
0x100103ef  # add [edi+0x5E], ebx; ret 
0x10016371  # add [eax+0x24], ebp; xchg eax, ebp; add dl, byte [eax]; call [0x1001F114] 
0x10011e16  # add [ebp+0x13], esi; cmp [0x1002A1F4], 0x00000000; jne 0x10011E2C; push [esp+0x04]; call [0x1001F01C] 
0x1001216a  # add [esi+0x15], edi; push 0x00000004; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012127  # add [esi+0x18], edi; push 0x00000103; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100121ba  # add [esi+0x18], edi; push 0x00000103; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x10012336  # add [esi+0x18], edi; push 0x00000103; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012254  # add [esi+0x18], edi; push 0x00000107; movsx ecx, byte [ebp-0x0A]; push ecx; call [0x1001F118] 
0x1001237c  # add [esi+0x18], edi; push 0x00000107; movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x100134ee  # add [esi+0x1A], edi; push 0x00000004; mov ecx, [ebp+0x08]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x10018f4c  # add [esi+0x1A], edi; push 0x00000008; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10018f02  # add [esi+0x1A], edi; push 0x00000020; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x1001667e  # add [esi+0x1D], edi; push 0x00000107; mov ecx, [ebp-0x04]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x10012d6f  # add [ecx+0x458BF845], ecx; clc; shl eax, 1; push eax; call [0x1001F0F0] 
0x100128dc  # add [ecx+0x4D8BF845], ecx; clc; push ecx; call [0x1001F0F0] 
0x10017a85  # add [ecx-0x1F1403BB], ecx; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10012892  # add [ecx+0x558BF84D], ecx; clc; push edx; call [0x1001F0F0] 
0x10017ac7  # add [ecx-0x2F1403AB], ecx; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10011ce2  # add [ebx-0x17F276F7], ecx; mov eax, [0x3F751002]; push 0x00000080; call [0x1001F0F0] 
0x10014dd5  # add [ebx+0x5E5FFC45], ecx; mov esp, ebp; pop ebp; ret 
0x10012910  # add [ebx-0x1A7403BB], ecx; pop ebp; ret 
0x100180ef  # add [ebx-0x3D7C03AB], ecx; add cl, byte [ecx-0x2F1403AB]; mov eax, [ebp+0x0C]; mov esp, ebp; pop ebp; ret 
0x10011b95  # add [ebx-0x74F7741F], ecx; inc eax; add al, 0x50; ret 
0x10011947  # add ebx, eax; mov eax, [eax]; ret 
0x100197c2  # add ecx, ebp; cmp ch, 0xFF; dec [ebx-0x1A740BBB]; pop ebp; ret 
0x100178ce  # add ebx, ebp; mov ecx, 0x8BFC458B; in eax, 0x5D; ret 
0x100157c0  # add al, byte [eax]; add byte [edx+0x14], ch; call [0x1001F0F0] 
0x100151a5  # add al, byte [eax]; add byte [edx+0x2F], ch; mov edx, [ebp+0x08]; push edx; call [0x1001F090] 
0x10014f67  # add al, byte [eax]; add byte [ebx-0x1A74EF3C], al; pop ebp; ret 
0x10017ca6  # add al, byte [eax]; add byte [ebx-0x1A7403BB], cl; pop ebp; ret 
0x10018d9f  # add al, byte [eax]; add byte [ebp-0x74AE2BB3], cl; push ebp; int3; push edx; call [0x1001F164] 
0x100164f3  # add dl, byte [eax]; add byte [eax], al; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x10011d64  # add dl, byte [eax]; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x100164da  # add dl, byte [eax]; add byte [edx+ebx-0x75], dh; or eax, 0x1002A1D4; push ecx; call [0x1001F0E4] 
0x10011e1d  # add dl, byte [eax]; add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1001F01C] 
0x1001636f  # add dl, byte [eax]; add [eax+0x24], ebp; xchg eax, ebp; add dl, byte [eax]; call [0x1001F114] 
0x10014e5b  # add dl, byte [eax]; xor eax, eax; pop ebp; ret 
0x10016475  # add dl, byte [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x100164c0  # add dl, byte [eax]; push eax; call [0x1001F0E4] 
0x10015ca3  # add dl, byte [eax]; push eax; call [0x1001F0E8] 
0x100167e9  # add dl, byte [eax]; push ecx; call [0x1001F09C] 
0x100164e3  # add dl, byte [eax]; push ecx; call [0x1001F0E4] 
0x10014e77  # add dl, byte [eax]; pop ebp; ret 
0x10011ce9  # add dl, byte [eax]; jne 0x10011D2C; push 0x00000080; call [0x1001F0F0] 
0x10014e55  # add dl, byte [eax]; mov [0x1002900C], edx; xor eax, eax; pop ebp; ret 
0x10016878  # add dl, byte [eax]; mov [ebp-0x08], eax; mov ecx, [ebp-0x0C]; push ecx; call [0x1001F0F0] 
0x10014d91  # add dl, byte [eax]; mov [ebp+0x08], ecx; push 0x00000054; call [0x1001F0F0] 
0x10014e98  # add dl, byte [eax]; mov [ebp+0x08], ecx; mov eax, [ebp+0x08]; add eax, 0x06; pop ebp; ret 
0x100167c5  # add dl, byte [eax]; mov [ebp-0x04], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100150ba  # add dl, byte [eax]; mov eax, [edx+ecx*4]; mov ecx, [eax]; push ecx; call [0x1001F0E4] 
0x100150d1  # add dl, byte [eax]; mov ecx, [eax+edx*4]; push ecx; call [0x1001F0E4] 
0x10015bf4  # add dl, byte [eax]; mov ecx, [eax+edx*4]; mov edx, [ecx]; push edx; call [0x1001F0E4] 
0x1001695a  # add dl, byte [eax]; mov ecx, [0x1002A1D4]; push ecx; call [0x1001F09C] 
0x100167e3  # add dl, byte [eax]; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x10015aa4  # add dl, byte [eax]; mov edx, [ecx+eax*4]; mov eax, [edx+0x04]; mov esp, ebp; pop ebp; ret 
0x10014cac  # add dl, byte [eax]; mov eax, [ebp+0x08]; push eax; call [0x1001F0C0] 
0x10011f6e  # add dl, byte [eax]; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8]; add esp, 0x0C; call [0x1001F014] 
0x10011f6e  # add dl, byte [eax]; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8] 
0x1001663a  # add dl, byte [eax]; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x10011f10  # add dl, byte [eax]; mov esp, ebp; pop ebp; ret 
0x10015868  # add dl, byte [eax]; lea edx, [ebp-0x20]; push edx; call [0x1001F0CC] 
0x10018be6  # add dl, byte [eax]; lea eax, [ebp-0x00000108]; push eax; call [0x1001F09C] 
0x10018b7d  # add dl, byte [eax]; lea ecx, [ebp-0x00000108]; push ecx; call [0x1001F09C] 
0x10018c75  # add dl, byte [eax]; lea edx, [ebp-0x00000108]; push edx; call [0x1001F09C] 
0x10015c57  # add dl, byte [eax]; shl ecx, 0x02; push ecx; call [0x1001F0F0] 
0x10015c9a  # add dl, byte [eax]; shl edx, 0x02; push edx; mov eax, [0x1002A1C4]; push eax; call [0x1001F0E8] 
0x10011ed2  # add bh, byte [ebx]; retn 0x2775 
0x10019950  # add al, byte [ecx+0x0000FFE2]; add byte [ebx], al; retn 0xC06B 
0x100178c6  # add al, byte [ebx+0x4D8B01C0]; or al, 0x89; add ebx, ebp; mov ecx, 0x8BFC458B; in eax, 0x5D; ret 
0x10013c9f  # add al, byte [ebp+0x6A4A74C0]; add cl, byte [ebx-0x72AEF7B3]; xchg eax, ebp; push 0x52FFFFFE; call [0x1001F178] 
0x100132d4  # add al, byte [ebp+0x6A4A74C0]; add cl, byte [ebx-0x72AEF7B3]; xchg eax, ebp; sar dh, 0xFF; call [edx-0x01] 
0x10017f6a  # add cl, byte [ecx+0x4D8BFC45]; adc byte [ebx+0x1189FC55], cl; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x10017b17  # add cl, byte [ecx+0x558B084D]; or al, 0x83; retn 0x8902 
0x10017dee  # add cl, byte [ecx-0x5A14F7B3]; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x10012a9f  # add cl, byte [ecx+0x558BE04D]; loopne 0x10012AF9; call [0x1001F0F0] 
0x10017d82  # add cl, byte [ecx-0x2214F7AB]; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x100180f5  # add cl, byte [ecx-0x2F1403AB]; mov eax, [ebp+0x0C]; mov esp, ebp; pop ebp; ret 
0x10014004  # add cl, byte [ebx-0x72AFF7BB]; lea eax, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013f82  # add cl, byte [ebx-0x72AFF7BB]; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013b5a  # add cl, byte [ebx-0x72AFF7BB]; lea esi, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013467  # add cl, byte [ebx-0x72AFF7BB]; lea edi, [eax+0x51FFFFFE]; call [0x1001F178] 
0x100128c6  # add cl, byte [ebx-0x1A7403BB]; pop ebp; ret 
0x10013ca5  # add cl, byte [ebx-0x72AEF7B3]; xchg eax, ebp; push 0x52FFFFFE; call [0x1001F178] 
0x100132da  # add cl, byte [ebx-0x72AEF7B3]; xchg eax, ebp; sar dh, 0xFF; call [edx-0x01] 
0x10017b11  # add cl, byte [ebx-0x3E7CF7B3]; add cl, byte [ecx+0x558B084D]; or al, 0x83; retn 0x8902 
0x10014e23  # add cl, byte [ebx+0x018B084D]; mov esp, ebp; pop ebp; ret 
0x10013778  # add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], ebx; call [0x1001F178] 
0x100136f6  # add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], esp; call [0x1001F178] 
0x10015298  # add cl, byte [ebp-0x0004436B]; call [edx-0x73] 
0x1001e41e  # add ch, bl; add eax, 0xFFFBD1E9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x1001547b  # add eax, [eax]; add byte [ebx-0x1A74F73C], al; pop ebp; ret 
0x1001212b  # add eax, [ecx]; add byte [eax], al; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100121be  # add eax, [ecx]; add byte [eax], al; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x1001233a  # add eax, [ecx]; add byte [eax], al; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012204  # add eax, [ecx]; add byte [eax], al; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x10011fd3  # add ecx, [ebp+0x0C]; mov byte [ecx-0x01], 0x00; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x1001243b  # add ecx, [ebp+0x10]; mov byte [ecx-0x01], 0x00; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x100156b6  # add ecx, [ebp-0x0C]; mov edx, [ebp+0x08]; mov [edx], ecx; mov esp, ebp; pop ebp; ret 
0x10015794  # add ecx, [ebp-0x08]; mov edx, [ebp+0x08]; mov [edx], ecx; mov esp, ebp; pop ebp; ret 
0x10016772  # add edx, [ebp+0x10]; mov byte [edx-0x01], 0x00; xor eax, eax; pop ebp; ret 
0x10016636  # add ebp, [eax+0x58]; xchg eax, ebp; add dl, byte [eax]; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x100128d9  # add eax, [ebx+0x458901C0]; clc; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0F0] 
0x10012561  # add ecx, [ebx-0x1A74F3BB]; pop ebp; ret 
0x10014fea  # add ecx, [ebx-0x1A74EBBB]; pop ebp; ret 
0x10015a41  # add ecx, [ebx-0x1A7447BB]; pop ebp; ret 
0x100112b9  # add edx, [ebx-0x17A90001]; lea ecx, [esi-0x3B7C0001]; or al, 0x5E; ret 
0x10015efb  # add ecx, eax; push ecx; call [0x1001F0F0] 
0x10011cbe  # add edx, ebx; pop ebx; retn 0x0010 
0x10011cb6  # add ebx, eax; mov eax, [esp+0x08]; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x10016a2b  # add al, 0x00; add byte [eax], al; sub eax, [ebp-0x10]; mov esp, ebp; pop ebp; ret 
0x10010541  # add al, 0x00; add byte [ebx+0x75FF85F8], cl; add ebx, [edi+0x5E]; ret 
0x10015802  # add al, 0x00; jnl 0x1001581A; mov eax, [ebp-0x48]; push eax; call [0x1001F0E4] 
0x1001672e  # add al, 0x10; add byte [eax], al; call [0x1001F078]; push eax; call [0x1001F018] 
0x1001672e  # add al, 0x10; add byte [eax], al; call [0x1001F078] 
0x100168df  # add al, 0x33; rcr byte [esi-0x75], 0xE5; pop ebp; ret 
0x1001698d  # add al, 0x33; ror byte [ebx+0x55C35DE5], 0x8B; in al, dx; push ecx; push 0x10029594; call [0x1001F114] 
0x10018dfd  # add al, 0x33; shr cl, 0xC7; add [eax], eax; add byte [ebx-0x00016F73], cl; call [ecx-0x75] 
0x10015a3d  # add al, 0x33; shr bl, 0x03; mov eax, [ebp-0x48]; mov esp, ebp; pop ebp; ret 
0x100106dc  # add al, 0x50; push edi; call [0x1001F0D4] 
0x10011b9c  # add al, 0x50; ret 
0x10012927  # add al, 0x5D; ret 
0x10010203  # add al, 0x81; in al, dx; add byte [eax], 0x00; add byte [ebp+0x320975C0], al; rol byte [ecx+0x000080C4], 0x00; ret 
0x10012b2d  # add al, 0x83; jnl 0x10012B29; add byte [ebp+0x30], dh; mov ecx, [ebp-0x04]; push ecx; call [0x1001F0E4] 
0x10015cfb  # add al, 0x83; rol byte [ecx], 0x50; call [0x1001F0F0] 
0x10010fc9  # add al, 0x85; sal byte [ebp+ecx-0x39], 0x00; add byte [eax], al; add byte [eax], al; mov [eax+0x04], 0x00000000; ret 
0x10011943  # add al, 0x85; sal byte [ebp+0x01], 0xC3; mov eax, [eax]; ret 
0x100123c5  # add al, 0x88; inc ebp; hlt; movsx eax, byte [ebp-0x0B]; push eax; call [0x1001F158] 
0x1001229b  # add al, 0x88; inc ebp; hlt; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F158] 
0x100123d6  # add al, 0x88; inc ebp; cmc; movsx ecx, byte [ebp-0x09]; push ecx; call [0x1001F154] 
0x100123e7  # add al, 0x88; inc ebp; test [edi], 0x52F855BE; call [0x1001F154] 
0x100150bd  # add al, 0x8A; mov ecx, [eax]; push ecx; call [0x1001F0E4] 
0x10012bd9  # add al, 0x8B; inc ebp; hlt; push eax; call [0x1001F0E4] 
0x100168bf  # add al, 0x8B; inc ebp; cld; push eax; call [0x1001F0E4] 
0x10012dc5  # add al, 0x8B; inc ebp; cld; mov esp, ebp; pop ebp; ret 
0x10012b40  # add al, 0x8B; push ebp; hlt; push edx; call [0x1001F0E4] 
0x1001082b  # add al, 0x8B; push esi; or byte [edx-0x18], dl; mov edi, [ecx-0x01]; call [esi-0x18] 
0x10014ce5  # add al, 0x8B; in eax, 0x5D; ret 
0x10011e25  # add al, 0xFF; adc eax, 0x1001F01C; push 0x00000001; pop eax; retn 0x000C 
0x1001563d  # add eax, 0xEC8B5504; sub esp, 0x0C; push 0x0000005F; mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x10016a24  # add eax, 0xEBFFC883; or byte [eax+0x00000004], bh; sub eax, [ebp-0x10]; mov esp, ebp; pop ebp; ret 
0x10017c2c  # add eax, 0xEBF8458B; add eax, 0x458B9CEB; clc; mov esp, ebp; pop ebp; ret 
0x1001636c  # add eax, 0x1002A1D0; add [eax+0x24], ebp; xchg eax, ebp; add dl, byte [eax]; call [0x1001F114] 
0x100164f0  # add eax, 0x1002A1D4; add byte [eax], al; add byte [eax], al; xor eax, eax; pop ebp; ret 
0x10014d87  # add eax, 0x0015C3E8; add byte [ebx+0x02900C0D], cl; adc byte [ecx+0x546A084D], cl; call [0x1001F0F0] 
0x10014e6e  # add eax, 0x0014DCE8; add byte [ecx+0x1002900C], ah; pop ebp; ret 
0x10016b6e  # add eax, 0xFFF7DCE8; jmp [ecx+0x1002900C] 
0x1001b81d  # add eax, 0xFFFE04E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001d967  # add eax, 0xFFFE0AE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001bb2a  # add eax, 0xFFFD30E9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x1001d35d  # add eax, 0xFFFA4DE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001d724  # add eax, 0xFFFC5CE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001c9dd  # add eax, 0xFFFD69E9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x1001befc  # add eax, 0xFFFC6BE9; dec [ebx-0x1A740BBB]; pop ebp; ret 
0x10019ef2  # add eax, 0xFFFD70E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001dcfa  # add eax, 0xFFFCAAE9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x1001ad4c  # add eax, 0xFFFCB7E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001a9d9  # add eax, 0xFFFABAE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001cd46  # add eax, 0xFFFCD4E9; dec [ebx-0x1A740FBB]; pop ebp; ret 
0x1001c484  # add eax, 0xFFFAD6E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x10019c38  # add eax, 0xFFFBE8E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x10017c31  # add eax, 0x458B9CEB; clc; mov esp, ebp; pop ebp; ret 
0x10014ea2  # push es; pop ebp; ret 
0x10016e23  # push es; mov eax, [ebp+0x14]; sub eax, [ebp-0x0C]; mov esp, ebp; pop ebp; ret 
0x10016b2d  # push es; mov eax, [ebp+0x14]; sub eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x1001650e  # pop es; add byte [eax], al; add byte [ebx-0x3FCCF33C], al; pop ebp; ret 
0x10018cba  # pop es; add byte [eax], al; add byte [ebx-0x1A74F33C], al; pop ebp; ret 
0x10016bac  # pop es; add byte [eax], al; add byte [ebx-0x1A74EF3C], al; pop ebp; ret 
0x10011d4c  # pop es; call ecx 
0x10013f74  # or byte [eax], al; add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10011e15  # or byte [ecx], al; jne 0x10011E2C; cmp [0x1002A1F4], 0x00000000; jne 0x10011E2C; push [esp+0x04]; call [0x1001F01C] 
0x10017bf8  # or byte [ebx], dh; shl byte [esi-0x75], cl; adc [ebx], edi; retn 0x1774 
0x10010641  # or byte [eax-0x77], al; inc edi; or byte [edi+0x5E], bl; mov al, 0x01; pop ebx; ret 
0x10010840  # or byte [eax-0x77], cl; inc edi; or byte [edi+0x5E], bl; ret 
0x1001689a  # or byte [eax+0x68], dl; jo 0x10016834; add dl, byte [eax]; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x10016955  # or byte [eax+0x68], dl; mov byte [ebp+0x0D8B1002], dl; aam 0xA1; add dl, byte [eax]; push ecx; call [0x1001F09C] 
0x10014007  # or byte [eax-0x73], dl; lea eax, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013f85  # or byte [eax-0x73], dl; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013b5d  # or byte [eax-0x73], dl; lea esi, [esi+edi*8-0x01]; call [ecx-0x01] 
0x1001346a  # or byte [eax-0x73], dl; lea edi, [eax+0x51FFFFFE]; call [0x1001F178] 
0x10011f72  # or byte [eax-0x01], dl; adc eax, 0x1001F0C8; add esp, 0x0C; call [0x1001F014] 
0x10012599  # or byte [eax-0x01], dl; adc eax, 0x1001F0E4; add esp, 0x04; xor eax, eax; pop ebp; ret 
0x1001291d  # or byte [eax-0x01], dl; adc eax, 0x1001F0E4; add esp, 0x04; pop ebp; ret 
0x10013ca8  # or byte [ecx-0x73], dl; xchg eax, ebp; push 0x52FFFFFE; call [0x1001F178] 
0x100132dd  # or byte [ecx-0x73], dl; xchg eax, ebp; sar dh, 0xFF; call [edx-0x01] 
0x10014cdc  # or byte [ecx-0x18], dl; std; cmp al, 0x00; add byte [ebx-0x1A74FB3C], al; pop ebp; ret 
0x10012429  # or byte [edx-0x75], dl; inc ebp; or al, 0x50; call [0x1001F0C8] 
0x10013a0e  # or byte [edx-0x73], dl; test [eax+0x50FFFFFE], eax; call [0x1001F178] 
0x1001377b  # or byte [edx-0x73], dl; test [eax+0x50FFFFFE], ebx; call [0x1001F178] 
0x100136f9  # or byte [edx-0x73], dl; test [eax+0x50FFFFFE], esp; call [0x1001F178] 
0x10016ba9  # or byte [edx-0x18], dl; pop es; add byte [eax], al; add byte [ebx-0x1A74EF3C], al; pop ebp; ret 
0x1001082e  # or byte [edx-0x18], dl; mov edi, [ecx-0x01]; call [esi-0x18] 
0x1001633e  # or byte [edx-0x01], dl; adc eax, 0x1001F0E4; add esp, 0x04; mov esp, ebp; pop ebp; ret 
0x100106d9  # or byte [ebx+0x6A], dl; add al, 0x50; push edi; call [0x1001F0D4] 
0x10011df9  # or byte [edi+0x56], dl; push ebx; call eax 
0x10010645  # or byte [edi+0x5E], bl; mov al, 0x01; pop ebx; ret 
0x10013e61  # or byte [esi-0x75], ah; test [esi+edi*8-0x01], edx; call [eax-0x01] 
0x10013e08  # or byte [esi-0x75], ah; test [esi+edi*8-0x01], ebx; call [eax-0x01] 
0x10013a30  # or byte [esi-0x75], ah; lea eax, [eax+0x51FFFFFE]; call [0x1001F174] 
0x1001379d  # or byte [esi-0x75], ah; lea ebx, [eax+0x51FFFFFE]; call [0x1001F174] 
0x1001371b  # or byte [esi-0x75], ah; lea esp, [eax+0x51FFFFFE]; call [0x1001F174] 
0x1001348c  # or byte [esi-0x75], ah; xchg eax, ebp; mov eax, 0x52FFFFFE; call [0x1001F174] 
0x10017ca3  # or byte [esi-0x39], ah; add al, byte [eax]; add byte [ebx-0x1A7403BB], cl; pop ebp; ret 
0x10016634  # or byte [edx+0x03], ch; push 0x10029558; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x1001574a  # or byte [edx+0x2E], ch; mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x10014d95  # or byte [edx+0x54], ch; call [0x1001F0F0] 
0x10010223  # or byte [edx+0x7D], ch; push eax; lea eax, [esp+0x14]; push eax; call [0x1001F0C8] 
0x10017d7f  # or byte [ebx+0x558902C2], al; or bl, ch; fisttp qword [ebx-0x1A7403BB]; pop ebp; ret 
0x1001083d  # or byte [ebx-0x76B7F73C], al; inc edi; or byte [edi+0x5E], bl; ret 
0x10010ee1  # or byte [ebp-0x3F6AF040], al; ret 
0x100151c9  # or byte [ebp-0x74CF8B40], al; dec ebp; or byte [ecx-0x00042373], cl; dec [ebp-0x00046F6B]; call [edx-0x75] 
0x100151b6  # or byte [ebp+0x6A1375C0], al; pop esp; mov eax, [ebp+0x08]; push eax; call [0x1001F090] 
0x100165bf  # or byte [ebp+0x686875C0], al; add byte [eax], 0x00; add byte [ebp-0x00010773], cl; call [ecx-0x73] 
0x10013a05  # or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], eax; call [0x1001F178] 
0x10013772  # or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], ebx; call [0x1001F178] 
0x100136f0  # or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], esp; call [0x1001F178] 
0x10010534  # or byte [ebp+0x057557F6], al; pop edi; xor eax, eax; pop esi; ret 
0x100156bb  # or byte [ecx+0x5DE58B0A], cl; ret 
0x100106cb  # or byte [ecx-0x7CFF74EF], cl; rol [0x8BF275C0+eax*4], 0x46; or byte [ebx+0x6A], dl; add al, 0x50; push edi; call [0x1001F0D4] 
0x10015653  # or byte [ecx+0x2E6AFC45], cl; mov ecx, [ebp+0x0C]; push ecx; call [0x1001F090] 
0x10018a68  # or byte [ecx+0x7D83FC45], cl; cld; add byte [ebp+0x14], dh; mov eax, [ebp-0x08]; push eax; call [0x1001F0E4] 
0x100180b2  # or byte [ecx-0x701403BB], cl; mov ax, word [ebp+0x0C]; pop esi; mov esp, ebp; pop ebp; ret 
0x1001aa9b  # or byte [ecx+0x7D81F04D], cl; lock call edi 
0x100151d0  # or byte [ecx-0x00042373], cl; dec [ebp-0x00046F6B]; call [edx-0x75] 
0x10014e26  # or byte [ebx+0x5DE58B01], cl; ret 
0x100156b3  # or byte [ebx-0x0BB2FCF8], cl; mov edx, [ebp+0x08]; mov [edx], ecx; mov esp, ebp; pop ebp; ret 
0x10015791  # or byte [ebx-0x07B2FCF8], cl; mov edx, [ebp+0x08]; mov [edx], ecx; mov esp, ebp; pop ebp; ret 
0x10014e9c  # or byte [ebx-0x3F7CF7BB], cl; push es; pop ebp; ret 
0x100128d3  # or byte [ebx-0x3F94EFBB], cl; add eax, [ebx+0x458901C0]; clc; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0F0] 
0x1001288b  # or byte [ebx+0x4C8D1045], cl; add byte [ecx], al; mov [ebp-0x08], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100157ba  # or byte [ebx-0x7D1647BB], cl; add al, byte [eax]; add byte [edx+0x14], ch; call [0x1001F0F0] 
0x10018b2e  # or byte [ebx-0x1A7407BB], cl; pop ebp; ret 
0x10018c17  # or byte [ebx-0x5E1607BB], cl; add byte [eax], al; add byte [eax-0x78], ch; lahf; add dl, byte [eax]; call [0x1001F114] 
0x1001632e  # or byte [ebx-0x00AEF3B8], cl; adc eax, 0x1001F0E4; add esp, 0x04; mov edx, [ebp+0x08]; push edx; call [0x1001F0E4] 
0x10014cd9  # or byte [ebx-0x17AEF7B3], cl; std; cmp al, 0x00; add byte [ebx-0x1A74FB3C], al; pop ebp; ret 
0x10012c25  # or byte [ebx+0x3983104D], cl; add byte [ebp+0x20], dh; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10015155  # or byte [ebx-0x00ADF3AF], cl; adc eax, 0x1001F0E4; add esp, 0x04; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x10012ca9  # or byte [ebx+0x3A831055], cl; add byte [ebp+0x20], dh; mov eax, [ebp-0x08]; push eax; call [0x1001F0F0] 
0x10012d30  # or byte [ebx+0x3A831455], cl; add byte [ebp+0x20], dh; mov eax, [ebp-0x0C]; push eax; call [0x1001F0F0] 
0x100158b2  # or byte [ebx-0x2D940BAB], cl; and al, 0x52; call [0x1001F0F0] 
0x10017d07  # or byte [ebx+0x0C558BC1], cl; xor ecx, ecx; mov cx, word [edx]; sub eax, ecx; pop ebp; ret 
0x10014e53  # or byte [eax+0x15891002], dl; or al, 0x90; add dl, byte [eax]; xor eax, eax; pop ebp; ret 
0x10016874  # or byte [ecx+0x1002A1D8], ah; mov [ebp-0x08], eax; mov ecx, [ebp-0x0C]; push ecx; call [0x1001F0F0] 
0x100103ed  # or byte [eax-0x3CA1A0FF], dh; pop edi; xor al, al; pop esi; ret 
0x10014c92  # or byte [eax+0x00000001], bh; mov esp, ebp; pop ebp; ret 
0x10016a29  # or byte [eax+0x00000004], bh; sub eax, [ebp-0x10]; mov esp, ebp; pop ebp; ret 
0x100170c3  # or dh, al; inc edx; inc ebp; add byte [ebx-0x1A74EBBB], cl; pop ebp; ret 
0x1001b81b  # or bl, ch; add eax, 0xFFFE04E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001d965  # or bl, ch; add eax, 0xFFFE0AE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001bb28  # or bl, ch; add eax, 0xFFFD30E9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x1001c9db  # or bl, ch; add eax, 0xFFFD69E9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x1001dcf8  # or bl, ch; add eax, 0xFFFCAAE9; dec [ebx-0x1A7407BB]; pop ebp; ret 
0x10019c36  # or bl, ch; add eax, 0xFFFBE8E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x10017df1  # or bl, ch; movsd; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x10017d85  # or bl, ch; fisttp qword [ebx-0x1A7403BB]; pop ebp; ret 
0x10011d9d  # or [edi+0x56], edx; push ebx; call eax 
0x10018238  # or [edi+0x19], esi; mov eax, [ebp-0x20]; xor edx, edx; mov dl, byte [eax+0x1001833E]; jmp [0x10018336+edx*4] 
0x1001838c  # or [edi+0x19], esi; mov eax, [ebp-0x20]; xor edx, edx; mov dl, byte [eax+0x10018492]; jmp [0x1001848A+edx*4] 
0x1001857d  # or [edi+0x19], esi; mov eax, [ebp-0x18]; xor edx, edx; mov dl, byte [eax+0x1001870F]; jmp [0x10018707+edx*4] 
0x10018828  # or [edi+0x19], esi; mov eax, [ebp-0x18]; xor edx, edx; mov dl, byte [eax+0x100189D2]; jmp [0x100189CA+edx*4] 
0x10016c33  # or [edi+0x2E], esi; mov eax, [ebp-0x20]; xor edx, edx; mov dl, byte [eax+0x10016E36]; jmp [0x10016E2E+edx*4] 
0x10016ab2  # or [edi+0x31], esi; mov eax, [ebp-0x14]; xor edx, edx; mov dl, byte [eax+0x10016B40]; jmp [0x10016B38+edx*4] 
0x10011ce4  # or [ecx+0x02A1E80D], ecx; adc byte [ebp+0x3F], dh; push 0x00000080; call [0x1001F0F0] 
0x10016937  # or [ebx+0x02A1D40D], ecx; adc byte [ecx+0x558BFC4D], cl; clc; push edx; call [0x1001F0F0] 
0x100167c0  # or [ebx+0x02A1D80D], ecx; adc byte [ecx+0x558BFC4D], cl; clc; push edx; call [0x1001F0F0] 
0x10015c4f  # or al, byte [eax]; add byte [eax], al; mov ecx, [0x1002A1C8]; shl ecx, 0x02; push ecx; call [0x1001F0F0] 
0x10010edc  # or al, byte [eax]; add byte [ebx-0x3F7AF73C], al; setne al; ret 
0x10016d02  # or cl, byte [ebx+0x38810C45]; call edi 
0x10017654  # or cl, byte [ebx-0x1A7403BB]; pop ebp; ret 
0x10017a7f  # or ecx, [ebx-0x3F7C03BB]; add [ecx-0x1F1403BB], ecx; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10017ac1  # or ecx, [ebx-0x3D7C03AB]; add [ecx-0x2F1403AB], ecx; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10011c98  # or ecx, eax; mov ecx, [esp+0x0C]; jne 0x10011CA9; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x1001674a  # or edi, edi; adc eax, 0x1001F078; push eax; call [0x1001F018] 
0x10013b4c  # or al, 0x00; add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea esi, [esi+edi*8-0x01]; call [ecx-0x01] 
0x1001528b  # or al, 0x0F; mov esi, 0xFFFBBE8D; inc [ebp+0x6A2274C9]; add cl, byte [ebp-0x0004436B]; call [edx-0x73] 
0x10018e1e  # or al, 0x3B; test [eax+0x74FFFFFE], edx; and ecx, [ebx-0x00013773]; call [ecx-0x01] 
0x1001672b  # or al, 0x50; push 0x00001004; call [0x1001F078]; push eax; call [0x1001F018] 
0x1001672b  # or al, 0x50; push 0x00001004; call [0x1001F078] 
0x100156a0  # or al, 0x50; mov ecx, [ebp+0x08]; mov edx, [ecx]; push edx; call [0x1001F0C8] 
0x10013066  # or al, 0x50; lea ecx, [ebp-0x00000130]; push ecx; call [0x1001F178] 
0x100147ab  # or al, 0x50; lea ecx, [ebp-0x00000208]; push ecx; call [0x1001F178] 
0x1001675a  # or al, 0x50; call [0x1001F184] 
0x10015649  # or al, 0x50; call [0x1001F090] 
0x1001565b  # or al, 0x51; call [0x1001F090] 
0x10016331  # or al, 0x51; call [0x1001F0E4]; add esp, 0x04; mov edx, [ebp+0x08]; push edx; call [0x1001F0E4] 
0x10016331  # or al, 0x51; call [0x1001F0E4] 
0x10016747  # or al, 0x52; push 0x0000000B; call [0x1001F078]; push eax; call [0x1001F018] 
0x10016747  # or al, 0x52; push 0x0000000B; call [0x1001F078] 
0x10012f4b  # or al, 0x52; lea eax, [ebp-0x00000120]; push eax; call [0x1001F178] 
0x100122be  # or al, 0x52; call [0x1001F0C8] 
0x10015158  # or al, 0x52; call [0x1001F0E4]; add esp, 0x04; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x10015158  # or al, 0x52; call [0x1001F0E4] 
0x100180bb  # or al, 0x5E; mov esp, ebp; pop ebp; ret 
0x10011e04  # or al, 0x5F; pop esi; pop ebx; pop ebp; retn 0x000C 
0x10015644  # or al, 0x6A; pop edi; mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x10017b1d  # or al, 0x83; retn 0x8902 
0x10015962  # or al, 0x83; clc; sbb al, 0x74; xor ecx, [ebx+0x518BB84D]; or al, 0x52; call [0x1001F0E4] 
0x10017b23  # or al, 0x85; sal byte [edx+eax-0x15], 0xD4; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x100178cc  # or al, 0x89; add ebx, ebp; mov ecx, 0x8BFC458B; in eax, 0x5D; ret 
0x1001bfba  # or al, 0x89; adc cl, ch; ret 
0x1001601a  # or al, 0x89; dec ebp; clc; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10011822  # or al, 0x8A; fsubr st0, st0; test byte [esi-0x3C750001], 0x5B; ret 
0x1001bfb2  # or al, 0x8B; adc [ebx+0x458B01C2], eax; or al, 0x89; adc cl, ch; ret 
0x10014e50  # or al, 0x8B; adc eax, 0x10029008; mov [0x1002900C], edx; xor eax, eax; pop ebp; ret 
0x10015eb2  # or al, 0x8B; inc ebp; clc; mov esp, ebp; pop ebp; ret 
0x1001258c  # or al, 0x8B; inc ebp; cld; mov esp, ebp; pop ebp; ret 
0x10012564  # or al, 0x8B; in eax, 0x5D; ret 
0x10014e59  # or al, 0x90; add dl, byte [eax]; xor eax, eax; pop ebp; ret 
0x10014e75  # or al, 0x90; add dl, byte [eax]; pop ebp; ret 
0x10014d8f  # or al, 0x90; add dl, byte [eax]; mov [ebp+0x08], ecx; push 0x00000054; call [0x1001F0F0] 
0x100150d4  # or al, 0x90; push ecx; call [0x1001F0E4] 
0x10015bf7  # or al, 0x90; mov edx, [ecx]; push edx; call [0x1001F0E4] 
0x10015d58  # or al, 0x90; mov eax, 0x00000001; mov esp, ebp; pop ebp; ret 
0x10014fe8  # or al, 0xEB; add ecx, [ebx-0x1A74EBBB]; pop ebp; ret 
0x10017c9e  # or al, 0xEB; les ecx, [ebx-0x3899F7AB]; add al, byte [eax]; add byte [ebx-0x1A7403BB], cl; pop ebp; ret 
0x10014d8e  # or eax, 0x1002900C; mov [ebp+0x08], ecx; push 0x00000054; call [0x1001F0F0] 
0x10014e95  # or eax, 0x1002900C; mov [ebp+0x08], ecx; mov eax, [ebp+0x08]; add eax, 0x06; pop ebp; ret 
0x100168d2  # or eax, 0x51F84D8B; call [0x1001F0E4] 
0x10015aa1  # or eax, 0x1002A1C4; mov edx, [ecx+eax*4]; mov eax, [edx+0x04]; mov esp, ebp; pop ebp; ret 
0x10010fcd  # or eax, 0x000000C7; add byte [eax], al; mov [eax+0x04], 0x00000000; ret 
0x10015c54  # or eax, 0x1002A1C8; shl ecx, 0x02; push ecx; call [0x1001F0F0] 
0x1001695d  # or eax, 0x1002A1D4; push ecx; call [0x1001F09C] 
0x100164e0  # or eax, 0x1002A1D4; push ecx; call [0x1001F0E4] 
0x10016939  # or eax, 0x1002A1D4; mov [ebp-0x04], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100167e6  # or eax, 0x1002A1D8; push ecx; call [0x1001F09C] 
0x100167c2  # or eax, 0x1002A1D8; mov [ebp-0x04], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10011ce6  # or eax, 0x1002A1E8; jne 0x10011D2C; push 0x00000080; call [0x1001F0F0] 
0x10012db2  # or eax, 0x83FFFFFA; les edx, [ebx+ecx*4]; inc ebp; lock push eax; call [0x1001F0E4] 
0x10011d48  # push cs; test ecx, ecx; je 0x10011D54; call ecx 
0x10013123  # ja 0x10014796; mov edx, [ebp-0x00000218]; xor ecx, ecx; mov cl, byte [edx+0x10014880]; jmp [0x10014824+ecx*4] 
0x100154d0  # ja 0x1001559A; mov ecx, [ebp-0x2C]; xor eax, eax; mov al, byte [ecx+0x10015616]; jmp [0x100155FE+eax*4] 
0x100176f3  # ja 0x100177F6; mov eax, [ebp-0x18]; jmp [0x10017844+eax*4] 
0x10017321  # ja 0x10017424; mov edx, [ebp-0x18]; jmp [0x10017474+edx*4] 
0x1001713b  # ja 0x1001723E; mov edx, [ebp-0x18]; jmp [0x1001728E+edx*4] 
0x10016405  # jnp 0x1000DC98; call [ecx-0x18] 
0x10010ee4  # setne al; ret 
0x1001363e  # movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10013808  # movsx ecx, byte [eax]; push ecx; call [0x1001F118] 
0x10016562  # movsx ecx, byte [eax]; push ecx; call [0x1001F154] 
0x100134f6  # movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x100123c9  # movsx eax, byte [ebp-0x0B]; push eax; call [0x1001F158] 
0x1001212f  # movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100121c2  # movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x1001228e  # movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F158] 
0x1001225c  # movsx ecx, byte [ebp-0x0A]; push ecx; call [0x1001F118] 
0x100123da  # movsx ecx, byte [ebp-0x09]; push ecx; call [0x1001F154] 
0x1001216f  # movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x100123b8  # movsx edx, byte [ebp-0x0C]; push edx; call [0x1001F158] 
0x10012208  # movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x1001229f  # movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F158] 
0x100123eb  # movsx edx, byte [ebp-0x08]; push edx; call [0x1001F154] 
0x10012384  # movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x1001376a  # adc byte [eax], al; add byte [ebx-0x41F0F7BB], cl; or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], ebx; call [0x1001F178] 
0x100136e8  # adc byte [eax], al; add byte [ebx-0x41F0F7BB], cl; or byte [ebp+0x6A4A74C9], al; add cl, byte [ebx-0x72ADF7AB]; test [eax+0x50FFFFFE], esp; call [0x1001F178] 
0x1001672f  # adc byte [eax], al; add bh, bh; adc eax, 0x1001F078; push eax; call [0x1001F018] 
0x10011d65  # adc byte [eax], al; pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x100164b9  # adc byte [eax], al; je 0x100164D6; mov eax, [0x1002A1D8]; push eax; call [0x1001F0E4] 
0x100164db  # adc byte [eax], al; je 0x100164F9; mov ecx, [0x1002A1D4]; push ecx; call [0x1001F0E4] 
0x10011e1e  # adc byte [eax], al; jne 0x10011E2C; push [esp+0x04]; call [0x1001F01C] 
0x10014944  # adc byte [ecx], al; add byte [eax], al; add byte [ebx+0x518B084D], cl; adc al, 0x81; retn 0x076C 
0x10016370  # adc byte [ecx], al; push 0x10029524; call [0x1001F114] 
0x1001803b  # adc byte [ebx], al; retn 0x7CEB 
0x10016750  # adc byte [eax-0x01], dl; adc eax, 0x1001F018; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x10012425  # adc byte [ecx-0x75], dl; push ebp; or byte [edx-0x75], dl; inc ebp; or al, 0x50; call [0x1001F0C8] 
0x10016743  # adc byte [ecx-0x75], dl; push ebp; or al, 0x52; push 0x0000000B; call [0x1001F078] 
0x10016727  # adc byte [edx-0x75], dl; inc ebp; or al, 0x50; push 0x00001004; call [0x1001F078] 
0x10010113  # adc byte [edi+0x5E], bl; pop ebp; pop ebx; add esp, 0x00000084; ret 
0x100163a5  # adc byte [eax-0x0080], ch; add byte [eax], al; add byte [ebp-0x74AF7FBB], cl; lea edi, [edi+edi*8-0x01]; call [ecx-0x18] 
0x10011e2b  # adc byte [edx+0x01], ch; pop eax; retn 0x000C 
0x100128d6  # adc byte [ebx-0x40], ch; add eax, [ebx+0x458901C0]; clc; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0F0] 
0x10011cea  # adc byte [ebp+0x3F], dh; push 0x00000080; call [0x1001F0F0] 
0x10012167  # adc byte [ebx+0x157E0138], al; push 0x00000004; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x100121b7  # adc byte [ebx+0x187E0138], al; push 0x00000103; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x10012333  # adc byte [ebx+0x187E0138], al; push 0x00000103; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012251  # adc byte [ebx+0x187E0138], al; push 0x00000107; movsx ecx, byte [ebp-0x0A]; push ecx; call [0x1001F118] 
0x100134eb  # adc byte [ebx+0x1A7E0138], al; push 0x00000004; mov ecx, [ebp+0x08]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x1001667b  # adc byte [ebx+0x1D7E0138], al; push 0x00000107; mov ecx, [ebp-0x04]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x10012c28  # adc byte [ebx+0x20750039], al; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100121fd  # adc byte [ebx+0x187E0139], al; push 0x00000103; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x10012379  # adc byte [ebx+0x187E0139], al; push 0x00000107; movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x10013633  # adc byte [ebx+0x1A7E0139], al; push 0x00000004; mov edx, [ebp+0x08]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10018f49  # adc byte [ebx+0x1A7E0139], al; push 0x00000008; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10018eff  # adc byte [ebx+0x1A7E0139], al; push 0x00000020; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10012cac  # adc byte [ebx+0x2075003A], al; mov eax, [ebp-0x08]; push eax; call [0x1001F0F0] 
0x10012124  # adc byte [ebx+0x187E013A], al; push 0x00000103; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100137fd  # adc byte [ebx+0x1A7E013A], al; push 0x00000004; mov eax, [ebp+0x08]; movsx ecx, byte [eax]; push ecx; call [0x1001F118] 
0x10011e11  # adc byte [ebx+0x0108247C], al; jne 0x10011E2C; cmp [0x1002A1F4], 0x00000000; jne 0x10011E2C; push [esp+0x04]; call [0x1001F01C] 
0x100125a0  # adc byte [ebx-0x3FCCFB3C], al; pop ebp; ret 
0x100168dc  # adc byte [ebx-0x3FCCFB3C], al; pop esi; mov esp, ebp; pop ebp; ret 
0x10016813  # adc byte [ebx-0x3FCCFB3C], al; mov esp, ebp; pop ebp; ret 
0x10012b2a  # adc byte [ebx+0x7D8304C4], al; clc; add byte [ebp+0x30], dh; mov ecx, [ebp-0x04]; push ecx; call [0x1001F0E4] 
0x100123c2  # adc byte [ebx+0x458804C4], al; hlt; movsx eax, byte [ebp-0x0B]; push eax; call [0x1001F158] 
0x10012298  # adc byte [ebx+0x458804C4], al; hlt; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F158] 
0x100123d3  # adc byte [ebx+0x458804C4], al; cmc; movsx ecx, byte [ebp-0x09]; push ecx; call [0x1001F154] 
0x100123e4  # adc byte [ebx+0x458804C4], al; test [edi], 0x52F855BE; call [0x1001F154] 
0x10014efe  # adc byte [ebx+0x458904C4], al; cld; cmp [ebp-0x04], 0x00000000; jne 0x10014F36; push 0x10028F34; call [0x1001F114] 
0x10015c01  # adc byte [ebx+0x458B04C4], al; in al, dx; mov ecx, [0x1002A1C4]; mov edx, [ecx+eax*4]; push edx; call [0x1001F0E4] 
0x10012bd6  # adc byte [ebx+0x458B04C4], al; hlt; push eax; call [0x1001F0E4] 
0x10012be3  # adc byte [ebx+0x458B04C4], al; clc; sub eax, 0x01; mov esp, ebp; pop ebp; ret 
0x10012dc2  # adc byte [ebx+0x458B04C4], al; cld; mov esp, ebp; pop ebp; ret 
0x10012b3d  # adc byte [ebx+0x558B04C4], al; hlt; push edx; call [0x1001F0E4] 
0x100150c7  # adc byte [ebx+0x558B04C4], al; hlt; mov eax, [0x1002A1C4]; mov ecx, [eax+edx*4]; push ecx; call [0x1001F0E4] 
0x10016345  # adc byte [ebx-0x1A74FB3C], al; pop ebp; ret 
0x100151b3  # adc byte [ebx-0x3F7AF73C], al; jne 0x100151CE; push 0x0000005C; mov eax, [ebp+0x08]; push eax; call [0x1001F090] 
0x10015650  # adc byte [ebx+0x458908C4], al; cld; push 0x0000002E; mov ecx, [ebp+0x0C]; push ecx; call [0x1001F090] 
0x10012b1a  # adc byte [ebx+0x458910C4], al; clc; mov eax, [ebp-0x10]; push eax; call [0x1001F0E4] 
0x10011d53  # adc byte [ebx-0x1514FB12], al; push eax; call [0x1001F0E4] 
0x10011cdf  # adc byte [ebx+0x098B01F8], al; mov [0x1002A1E8], ecx; jne 0x10011D2C; push 0x00000080; call [0x1001F0F0] 
0x10011df5  # adc byte [ebp+0x570874C0], al; push esi; push ebx; call eax 
0x10011d99  # adc byte [ebp+0x570974C0], al; push esi; push ebx; call eax 
0x1001015e  # adc byte [ebp+0x501774C0], al; call edi 
0x10014d83  # adc byte [ebp-0x17FA8A40], al; ret 
0x10014e6a  # adc byte [ebp-0x17FA8A40], al; fcom qword [eax+eax]; add byte [ecx+0x1002900C], ah; pop ebp; ret 
0x10012b1d  # adc byte [ecx+0x458BF845], cl; lock push eax; call [0x1001F0E4] 
0x10016879  # adc byte [ecx+0x4D8BF845], cl; hlt; push ecx; call [0x1001F0F0] 
0x10012eed  # adc byte [ecx+0x458BFC45], cl; test al, 0x50; call [0x1001F0E4] 
0x10014d92  # adc byte [ecx+0x546A084D], cl; call [0x1001F0F0] 
0x100167c6  # adc byte [ecx+0x558BFC4D], cl; clc; push edx; call [0x1001F0F0] 
0x100150bb  # adc byte [ebx+0x088B8A04], cl; push ecx; call [0x1001F0E4] 
0x10015bf5  # adc byte [ebx+0x118B900C], cl; push edx; call [0x1001F0E4] 
0x10011cd9  # adc byte [ebx+0x01F0FC0D], cl; adc byte [ebx+0x098B01F8], al; mov [0x1002A1E8], ecx; jne 0x10011D2C; push 0x00000080; call [0x1001F0F0] 
0x10015aa5  # adc byte [ebx+0x428B8114], cl; add al, 0x8B; in eax, 0x5D; ret 
0x10016897  # adc byte [ebx+0x68500845], cl; jo 0x10016834; add dl, byte [eax]; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x10016952  # adc byte [ebx+0x68500845], cl; mov byte [ebp+0x0D8B1002], dl; aam 0xA1; add dl, byte [eax]; push ecx; call [0x1001F09C] 
0x10011f6f  # adc byte [ebx-0x00AFF7BB], cl; adc eax, 0x1001F0C8; add esp, 0x0C; call [0x1001F014] 
0x10015d53  # adc byte [ebx+0x0C89FC4D], cl; nop; mov eax, 0x00000001; mov esp, ebp; pop ebp; ret 
0x10017f70  # adc byte [ebx+0x1189FC55], cl; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x1001288e  # adc byte [ebp-0x76FEFFB4], cl; dec ebp; clc; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100165b0  # adc byte [ebp-0x0000877B], cl; call [eax-0x18] 
0x10018be7  # adc byte [ebp-0x0001077B], cl; call [eax-0x01] 
0x10016580  # adc byte [ebp-0x00008773], cl; call [ecx-0x18] 
0x10018b7e  # adc byte [ebp-0x00010773], cl; call [ecx-0x01] 
0x10016598  # adc byte [ebp-0x0000876B], cl; call [edx-0x18] 
0x10018c76  # adc byte [ebp-0x0001076B], cl; call [edx-0x01] 
0x10016473  # adc byte [eax-0x3FCCEFFE], dl; mov esp, ebp; pop ebp; ret 
0x10015c58  # adc cl, al; loope 0x10015C5E; push ecx; call [0x1001F0F0] 
0x10015c9b  # adc cl, al; loop 0x10015CA1; push edx; mov eax, [0x1002A1C4]; push eax; call [0x1001F0E8] 
0x10016774  # adc dh, al; inc edx; inc [eax]; xor eax, eax; pop ebp; ret 
0x10018cb8  # adc al, ch; pop es; add byte [eax], al; add byte [ebx-0x1A74F33C], al; pop ebp; ret 
0x100189ff  # adc cl, ch; sub eax, 0x6A000001; push esp; call [0x1001F0F0] 
0x1001bfbc  # adc cl, ch; ret 
0x1001255f  # adc bl, ch; add ecx, [ebx-0x1A74F3BB]; pop ebp; ret 
0x1001e433  # adc bh, bh; and eax, 0x1001F138; jmp [0x1001F13C] 
0x1001e439  # adc bh, bh; and eax, 0x1001F13C; jmp [0x1001F144] 
0x1001e43f  # adc bh, bh; and eax, 0x1001F144; jmp [0x1001F168] 
0x1001e445  # adc bh, bh; and eax, 0x1001F168; jmp [0x1001F16C] 
0x1001e44b  # adc bh, bh; and eax, 0x1001F16C; jmp [0x1001F170] 
0x1001e451  # adc bh, bh; and eax, 0x1001F170; jmp [0x1001F180] 
0x1001e457  # adc bh, bh; and eax, 0x1001F180; jmp [0x1001F188] 
0x1001e45d  # adc bh, bh; and eax, 0x1001F188; jmp [0x1001F18C] 
0x10011e45  # adc bh, bh; and eax, 0x1001F194; jmp [0x1001F1A0] 
0x10011e4b  # adc bh, bh; and eax, 0x1001F1A0; jmp [0x1001F1A4] 
0x10011e51  # adc bh, bh; and eax, 0x1001F1A4; jmp [0x1001F1A8] 
0x100180a8  # adc [ebx], eax; retn 0x0FEB 
0x10018940  # adc [ebx], ebp; retn 0x4589 
0x100184d3  # adc [ebx], ebp; retn 0x5BEB 
0x1001875d  # adc [ebx], ebp; retn 0x6FEB 
0x10017bfd  # adc [ebx], edi; retn 0x1774 
0x10011e9c  # adc [ebx], edi; retn 0x6775 
0x1001bfb4  # adc [ebx+0x458B01C2], eax; or al, 0x89; adc cl, ch; ret 
0x1001655a  # adc [ebp-0x74E88B2E], eax; inc ebp; cld; movsx ecx, byte [eax]; push ecx; call [0x1001F154] 
0x10013ffe  # adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea eax, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013f7c  # adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013b54  # adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea esi, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013461  # adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea edi, [eax+0x51FFFFFE]; call [0x1001F178] 
0x10017f75  # adc [ebx-0x1A7407BB], ecx; pop ebp; ret 
0x100163d8  # adc [ebx-0x0000877B], ecx; call [eax-0x18] 
0x1001d35b  # adc ebx, ebp; add eax, 0xFFFA4DE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001d722  # adc ebx, ebp; add eax, 0xFFFC5CE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001befa  # adc ebx, ebp; add eax, 0xFFFC6BE9; dec [ebx-0x1A740BBB]; pop ebp; ret 
0x10019ef0  # adc ebx, ebp; add eax, 0xFFFD70E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001ad4a  # adc ebx, ebp; add eax, 0xFFFCB7E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001a9d7  # adc ebx, ebp; add eax, 0xFFFABAE9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x1001cd44  # adc ebx, ebp; add eax, 0xFFFCD4E9; dec [ebx-0x1A740FBB]; pop ebp; ret 
0x1001c482  # adc ebx, ebp; add eax, 0xFFFAD6E9; dec [ebx-0x1A7403BB]; pop ebp; ret 
0x10011d46  # adc cl, byte [ebx+0x74C9850E]; pop es; call ecx 
0x10013459  # adc eax, [eax]; add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea edi, [eax+0x51FFFFFE]; call [0x1001F178] 
0x100151ba  # adc ebp, [edx+0x5C]; mov eax, [ebp+0x08]; push eax; call [0x1001F090] 
0x10011e18  # adc eax, [ebx+0x02A1F43D]; adc byte [eax], al; jne 0x10011E2C; push [esp+0x04]; call [0x1001F01C] 
0x10014e71  # adc al, 0x00; add byte [ecx+0x1002900C], ah; pop ebp; ret 
0x10014f66  # adc al, 0x02; add byte [eax], al; add esp, 0x10; mov esp, ebp; pop ebp; ret 
0x10016e26  # adc al, 0x2B; inc ebp; hlt; mov esp, ebp; pop ebp; ret 
0x10016b30  # adc al, 0x2B; inc ebp; clc; mov esp, ebp; pop ebp; ret 
0x1001022a  # adc al, 0x50; call [0x1001F0C8] 
0x100155e4  # adc al, 0x51; call [0x1001F128] 
0x10012a4f  # adc al, 0x52; mov eax, [ebp+0x10]; push eax; call [0x1001F0D8] 
0x10015c0f  # adc al, 0x81; push edx; call [0x1001F0E4] 
0x10015aa7  # adc al, 0x81; mov eax, [edx+0x04]; mov esp, ebp; pop ebp; ret 
0x1001494e  # adc al, 0x81; retn 0x076C 
0x10012d33  # adc al, 0x83; cmp al, byte [eax]; jne 0x10012D59; mov eax, [ebp-0x0C]; push eax; call [0x1001F0F0] 
0x1001290e  # adc al, 0x89; add [ebx-0x1A7403BB], ecx; pop ebp; ret 
0x100197c0  # adc al, 0x89; add ecx, ebp; cmp ch, 0xFF; dec [ebx-0x1A740BBB]; pop ebp; ret 
0x100128c4  # adc al, 0x89; add cl, byte [ebx-0x1A7403BB]; pop ebp; ret 
0x10012bc9  # adc al, 0x89; inc ebp; clc; mov edx, [ebp-0x04]; push edx; call [0x1001F0E4] 
0x10012db8  # adc al, 0x8B; inc ebp; lock push eax; call [0x1001F0E4] 
0x10018a71  # adc al, 0x8B; inc ebp; clc; push eax; call [0x1001F0E4] 
0x10012c6f  # adc al, 0x8B; inc ebp; cld; mov esp, ebp; pop ebp; ret 
0x100128c1  # adc al, 0x8B; push ebp; adc al, 0x89; add cl, byte [ebx-0x1A7403BB]; pop ebp; ret 
0x10014fed  # adc al, 0x8B; in eax, 0x5D; ret 
0x10012ab5  # adc al, 0xC1; loopne 0x10012ABB; mov [ebp-0x18], eax; mov ecx, [ebp-0x18]; push ecx; call [0x1001F0F0] 
0x10014d8a  # adc eax, 0x0D8B0000; or al, 0x90; add dl, byte [eax]; mov [ebp+0x08], ecx; push 0x00000054; call [0x1001F0F0] 
0x10014e52  # adc eax, 0x10029008; mov [0x1002900C], edx; xor eax, eax; pop ebp; ret 
0x10014e58  # adc eax, 0x1002900C; xor eax, eax; pop ebp; ret 
0x10016472  # adc eax, 0x10029010; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x10016753  # adc eax, 0x1001F018; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x10011e27  # adc eax, 0x1001F01C; push 0x00000001; pop eax; retn 0x000C 
0x10010287  # adc eax, 0x1001F03C; mov al, 0x01; add esp, 0x00000080; ret 
0x100123e0  # adc eax, 0x1001F154; add esp, 0x04; mov byte [ebp-0x09], al; movsx edx, byte [ebp-0x08]; push edx; call [0x1001F154] 
0x100123be  # adc eax, 0x1001F158; add esp, 0x04; mov byte [ebp-0x0C], al; movsx eax, byte [ebp-0x0B]; push eax; call [0x1001F158] 
0x100123cf  # adc eax, 0x1001F158; add esp, 0x04; mov byte [ebp-0x0B], al; movsx ecx, byte [ebp-0x09]; push ecx; call [0x1001F154] 
0x1001216c  # adc eax, 0xBE0F046A; dec ebp; clc; push ecx; call [0x1001F118] 
0x1001674c  # adc eax, 0x1001F078; push eax; call [0x1001F018]; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x10016733  # adc eax, 0x1001F078; push eax; call [0x1001F018] 
0x100155dd  # adc eax, 0x50D8458D; mov ecx, [ebp+0x14]; push ecx; call [0x1001F128] 
0x10010837  # adc eax, 0x8BFFFF99; inc edi; or byte [ebx-0x76B7F73C], al; inc edi; or byte [edi+0x5E], bl; ret 
0x100150b7  # adc eax, 0x1002A1C4; mov eax, [edx+ecx*4]; mov ecx, [eax]; push ecx; call [0x1001F0E4] 
0x10015c97  # adc eax, 0x1002A1C8; shl edx, 0x02; push edx; mov eax, [0x1002A1C4]; push eax; call [0x1001F0E8] 
0x10011f75  # adc eax, 0x1001F0C8; add esp, 0x0C; call [0x1001F014] 
0x10012b16  # adc eax, 0x1001F0D8; add esp, 0x10; mov [ebp-0x08], eax; mov eax, [ebp-0x10]; push eax; call [0x1001F0E4] 
0x1001259c  # adc eax, 0x1001F0E4; add esp, 0x04; xor eax, eax; pop ebp; ret 
0x1001680f  # adc eax, 0x1001F0E4; add esp, 0x04; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x1001515b  # adc eax, 0x1001F0E4; add esp, 0x04; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x10012bd2  # adc eax, 0x1001F0E4; add esp, 0x04; mov eax, [ebp-0x0C]; push eax; call [0x1001F0E4] 
0x10012dbe  # adc eax, 0x1001F0E4; add esp, 0x04; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10016334  # adc eax, 0x1001F0E4; add esp, 0x04; mov edx, [ebp+0x08]; push edx; call [0x1001F0E4] 
0x10012b39  # adc eax, 0x1001F0E4; add esp, 0x04; mov edx, [ebp-0x0C]; push edx; call [0x1001F0E4] 
0x10016341  # adc eax, 0x1001F0E4; add esp, 0x04; mov esp, ebp; pop ebp; ret 
0x100164e7  # adc eax, 0x1001F0E4; add esp, 0x04; mov [0x1002A1D4], 0x00000000; xor eax, eax; pop ebp; ret 
0x10012ef6  # adc eax, 0x1001F0E4; add esp, 0x04; mov [ebp-0x58], 0x00000000; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0E4] 
0x10013126  # push ss; add byte [eax], al; mov edx, [ebp-0x00000218]; xor ecx, ecx; mov cl, byte [edx+0x10014880]; jmp [0x10014824+ecx*4] 
0x100154dd  # push ss; push esi; add [eax], edx; jmp [0x100155FE+eax*4] 
0x10010162  # pop ss; push eax; call edi 
0x1001655e  # pop ss; mov eax, [ebp-0x04]; movsx ecx, byte [eax]; push ecx; call [0x1001F154] 
0x1001264f  # sbb byte [ebx], ch; inc ebp; clc; mov esp, ebp; pop ebp; ret 
0x10012a4b  # sbb byte [ecx-0x75], dl; push ebp; adc al, 0x52; mov eax, [ebp+0x10]; push eax; call [0x1001F0D8] 
0x10017284  # sbb byte [ecx-0x03BA74FF], cl; mov esp, ebp; pop ebp; ret 
0x10017652  # sbb byte [ecx-0x03BA74F6], cl; mov esp, ebp; pop ebp; ret 
0x1001727d  # sbb byte [ebx-0x743ED4FE], cl; dec ebp; sbb byte [ecx-0x03BA74FF], cl; mov esp, ebp; pop ebp; ret 
0x1001764b  # sbb byte [ebx-0x7435D4F8], cl; push ebp; sbb byte [ecx-0x03BA74F6], cl; mov esp, ebp; pop ebp; ret 
0x10014d47  # sbb byte [ebx+0x088B0845], cl; push ecx; call [0x1001F0E4] 
0x10016754  # sbb al, dh; add [eax], edx; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x10014d7c  # sbb [ebx], esi; shl byte [eax+0x1002A1D0], 0x85; sal byte [ebp+0x05], 0xE8; ret 
0x1001823a  # sbb [ebx-0x2DCC1FBB], ecx; mov dl, byte [eax+0x1001833E]; jmp [0x10018336+edx*4] 
0x1001838e  # sbb [ebx-0x2DCC1FBB], ecx; mov dl, byte [eax+0x10018492]; jmp [0x1001848A+edx*4] 
0x1001857f  # sbb [ebx-0x2DCC17BB], ecx; mov dl, byte [eax+0x1001870F]; jmp [0x10018707+edx*4] 
0x1001882a  # sbb [ebx-0x2DCC17BB], ecx; mov dl, byte [eax+0x100189D2]; jmp [0x100189CA+edx*4] 
0x100164bc  # sbb [ecx+0x1002A1D8], esp; push eax; call [0x1001F0E4] 
0x10013802  # sbb ch, byte [edx+0x04]; mov eax, [ebp+0x08]; movsx ecx, byte [eax]; push ecx; call [0x1001F118] 
0x100134f0  # sbb ch, byte [edx+0x04]; mov ecx, [ebp+0x08]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x10013638  # sbb ch, byte [edx+0x04]; mov edx, [ebp+0x08]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10018f4e  # sbb ch, byte [edx+0x08]; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10018f04  # sbb ch, byte [edx+0x20]; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10011c76  # sbb edx, [esp+0x0C]; neg edx; neg eax; sbb edx, 0x00000000; pop ebx; retn 0x0010 
0x10011731  # sbb ecx, [edx-0x3B7C0001]; add al, 0x5E; ret 
0x10014804  # sbb ecx, [ebx-0x74ADEBAB]; inc ebp; adc byte [eax-0x18], dl; ret 
0x10015965  # sbb al, 0x74; xor ecx, [ebx+0x518BB84D]; or al, 0x52; call [0x1001F0E4] 
0x10011e28  # sbb al, 0xF0; add [eax], edx; push 0x00000001; pop eax; retn 0x000C 
0x100106ff  # sbb eax, 0x5FFFFF98; pop esi; pop ebx; ret 
0x10016190  # and byte [eax], al; add byte [eax], al; add byte [eax+0x00000001], bh; mov esp, ebp; pop ebp; ret 
0x10015133  # and byte [eax], al; jne 0x10015151; mov ecx, [ebp-0x08]; mov edx, [ecx+0x10]; push edx; call [0x1001F0E4] 
0x10013576  # and byte [ebx-0x00010F43], al; jmp [ebp+edi*2+0x17] 
0x100116fc  # and byte [eax-0x39740001], cl; pop esi; ret 
0x10018e9f  # and byte [ebp-0x0001676B], cl; call [edx-0x75] 
0x10015278  # and byte [ebp-0x0004436B], cl; call [edx-0x75] 
0x100136bd  # and [ebx-0x00010F43], eax; jmp [eax] 
0x100145fa  # and [ebx-0x00010F43], eax; jmp [ebp+edi*2+0x18] 
0x10012422  # and [ebx-0x74AEEFB3], ecx; push ebp; or byte [edx-0x75], dl; inc ebp; or al, 0x50; call [0x1001F0C8] 
0x100153dc  # and [ebp-0x00041F7B], ecx; call [eax-0x75] 
0x1001547a  # and al, byte [ebx]; add byte [eax], al; add esp, 0x08; mov esp, ebp; pop ebp; ret 
0x10015296  # and ch, byte [edx+0x02]; lea edx, [ebp-0x00000444]; push edx; lea eax, [ebp-0x00000474]; push eax; call [0x1001F0C8] 
0x10015410  # and cl, byte [ebp-0x00041F6B]; call [edx-0x75] 
0x10018e26  # and ecx, [ebx-0x00013773]; call [ecx-0x01] 
0x100118e2  # and al, 0x04; xor eax, eax; test ecx, ecx; setne al; ret 
0x10011ca2  # and al, 0x04; mul ecx; retn 0x0010 
0x10011e24  # and al, 0x04; call [0x1001F01C]; push 0x00000001; pop eax; retn 0x000C 
0x10011e24  # and al, 0x04; call [0x1001F01C] 
0x10011e14  # and al, 0x08; add [ebp+0x13], esi; cmp [0x1002A1F4], 0x00000000; jne 0x10011E2C; push [esp+0x04]; call [0x1001F01C] 
0x10010123  # and al, 0x08; test esi, esi; jne 0x1001012E; or eax, 0xFFFFFFFF; pop esi; ret 
0x10011cba  # and al, 0x08; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x10011c9c  # and al, 0x0C; jne 0x10011CA9; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x10011c78  # and al, 0x0C; neg edx; neg eax; sbb edx, 0x00000000; pop ebx; retn 0x0010 
0x10010229  # and al, 0x14; push eax; call [0x1001F0C8] 
0x100158b8  # and al, 0x52; call [0x1001F0F0] 
0x10016373  # and al, 0x95; add dl, byte [eax]; call [0x1001F114] 
0x1001e42f  # and eax, 0x1001F134; jmp [0x1001F138] 
0x1001e435  # and eax, 0x1001F138; jmp [0x1001F13C] 
0x1001e43b  # and eax, 0x1001F13C; jmp [0x1001F144] 
0x1001e441  # and eax, 0x1001F144; jmp [0x1001F168] 
0x1001e447  # and eax, 0x1001F168; jmp [0x1001F16C] 
0x10013e5f  # and eax, 0x8B66086A; test [esi+edi*8-0x01], edx; call [eax-0x01] 
0x10013e06  # and eax, 0x8B66086A; test [esi+edi*8-0x01], ebx; call [eax-0x01] 
0x10013a2e  # and eax, 0x8B66086A; lea eax, [eax+0x51FFFFFE]; call [0x1001F174] 
0x1001379b  # and eax, 0x8B66086A; lea ebx, [eax+0x51FFFFFE]; call [0x1001F174] 
0x10013719  # and eax, 0x8B66086A; lea esp, [eax+0x51FFFFFE]; call [0x1001F174] 
0x1001348a  # and eax, 0x8B66086A; xchg eax, ebp; mov eax, 0x52FFFFFE; call [0x1001F174] 
0x1001e44d  # and eax, 0x1001F16C; jmp [0x1001F170] 
0x1001e453  # and eax, 0x1001F170; jmp [0x1001F180] 
0x1001e459  # and eax, 0x1001F180; jmp [0x1001F188] 
0x1001e45f  # and eax, 0x1001F188; jmp [0x1001F18C] 
0x10011e47  # and eax, 0x1001F194; jmp [0x1001F1A0] 
0x10011e41  # and eax, 0x1001F198; jmp [0x1001F194] 
0x1001e471  # and eax, 0x1001F19C; jmp [0x1001F160] 
0x10011e4d  # and eax, 0x1001F1A0; jmp [0x1001F1A4] 
0x10011e53  # and eax, 0x1001F1A4; jmp [0x1001F1A8] 
0x10011d61  # and eax, 0x1002A1F0; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x10012e02  # add byte [eax], al; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10013f73  # or byte [eax], al; add byte [ebx-0x41F0F7B3], cl; adc [ebp+0x6A4A74D2], eax; add cl, byte [ebx-0x72AFF7BB]; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10011796  # mov di, seg?; inc [ebx+0x468908C4]; or al, 0xB0; add [edi+0x5E], ebx; pop ebx; ret 
0x100154cf  # sub byte [edi], cl; xchg esp, eax; add byte [eax], al; add byte [ebx-0x3FCC2BB3], cl; mov al, byte [ecx+0x10015616]; jmp [0x100155FE+eax*4] 
0x10013e92  # sub byte [ebx-0x0001137B], cl; call [eax-0x01] 
0x10014742  # sub al, byte [ecx-0x00010F43]; call [eax] 
0x10016a2f  # sub eax, [ebp-0x10]; mov esp, ebp; pop ebp; ret 
0x10016e27  # sub eax, [ebp-0x0C]; mov esp, ebp; pop ebp; ret 
0x10012650  # sub eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x10017d12  # sub eax, ecx; pop ebp; ret 
0x10014ef5  # sub al, 0x8F; add dl, byte [eax]; call [0x1001F114] 
0x10018a01  # sub eax, 0x6A000001; push esp; call [0x1001F0F0] 
0x1001574c  # mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x10016c35  # mov eax, [ebp-0x20]; xor edx, edx; mov dl, byte [eax+0x10016E36]; jmp [0x10016E2E+edx*4] 
0x10015658  # mov ecx, [ebp+0x0C]; push ecx; call [0x1001F090] 
0x10016071  # mov ecx, [ebp+0x0C]; mov edx, [ecx+0x10]; push edx; call [0x1001F0E4] 
0x100151a9  # das; mov edx, [ebp+0x08]; push edx; call [0x1001F090] 
0x10012b33  # xor byte [ebx-0x00AE03B3], cl; adc eax, 0x1001F0E4; add esp, 0x04; mov edx, [ebp-0x0C]; push edx; call [0x1001F0E4] 
0x100163a2  # xor byte [ebp-0x7F97EFFE], dl; add byte [eax], al; add byte [ebp-0x74AF7FBB], cl; lea edi, [edi+edi*8-0x01]; call [ecx-0x18] 
0x10016ab4  # xor [ebx-0x2DCC13BB], ecx; mov dl, byte [eax+0x10016B40]; jmp [0x10016B38+edx*4] 
0x1001020e  # xor al, al; add esp, 0x00000080; ret 
0x10015967  # xor ecx, [ebx+0x518BB84D]; or al, 0x52; call [0x1001F0E4] 
0x100168e0  # xor eax, eax; pop esi; mov esp, ebp; pop ebp; ret 
0x100118e4  # xor eax, eax; test ecx, ecx; setne al; ret 
0x100154d9  # xor eax, eax; mov al, byte [ecx+0x10015616]; jmp [0x100155FE+eax*4] 
0x10011fda  # xor eax, eax; mov esp, ebp; pop ebp; ret 
0x1001312f  # xor ecx, ecx; mov cl, byte [edx+0x10014880]; jmp [0x10014824+ecx*4] 
0x10018583  # xor edx, edx; mov dl, byte [eax+0x1001870F]; jmp [0x10018707+edx*4] 
0x10016c39  # xor edx, edx; mov dl, byte [eax+0x10016E36]; jmp [0x10016E2E+edx*4] 
0x1001823e  # xor edx, edx; mov dl, byte [eax+0x1001833E]; jmp [0x10018336+edx*4] 
0x10016ab8  # xor edx, edx; mov dl, byte [eax+0x10016B40]; jmp [0x10016B38+edx*4] 
0x10018392  # xor edx, edx; mov dl, byte [eax+0x10018492]; jmp [0x1001848A+edx*4] 
0x1001882e  # xor edx, edx; mov dl, byte [eax+0x100189D2]; jmp [0x100189CA+edx*4] 
0x10011bff  # xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x100101a5  # xor esi, esi; test eax, eax; jne 0x100101B0; or eax, 0xFFFFFFFF; pop esi; ret 
0x1001e430  # xor al, 0xF1; add [eax], edx; jmp [0x1001F138] 
0x10012ee7  # xor eax, 0x83000000; les edx, [eax]; mov [ebp-0x04], eax; mov eax, [ebp-0x58]; push eax; call [0x1001F0E4] 
0x10016c3d  # outsb; add [eax], edx; jmp [0x10016E2E+edx*4] 
0x100104fa  # test esi, esi; jne 0x100104E8; mov eax, esi; pop esi; pop edi; ret 
0x1001034c  # aaa; pop edi; pop esi; mov al, 0x01; pop ebx; ret 
0x10012169  # cmp byte [ecx], al; jle 0x10012182; push 0x00000004; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x100121b9  # cmp byte [ecx], al; jle 0x100121D5; push 0x00000103; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x10012335  # cmp byte [ecx], al; jle 0x10012351; push 0x00000103; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012253  # cmp byte [ecx], al; jle 0x1001226F; push 0x00000107; movsx ecx, byte [ebp-0x0A]; push ecx; call [0x1001F118] 
0x1001e436  # cmp cl, dh; add [eax], edx; jmp [0x1001F13C] 
0x10012c2a  # cmp [eax], eax; jne 0x10012C4E; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100121ff  # cmp [ecx], eax; jle 0x1001221B; push 0x00000103; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x1001237b  # cmp [ecx], eax; jle 0x10012397; push 0x00000107; movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x10012d35  # cmp al, byte [eax]; jne 0x10012D59; mov eax, [ebp-0x0C]; push eax; call [0x1001F0F0] 
0x10012cae  # cmp al, byte [eax]; jne 0x10012CD2; mov eax, [ebp-0x08]; push eax; call [0x1001F0F0] 
0x10012126  # cmp al, byte [ecx]; jle 0x10012142; push 0x00000103; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x10015fae  # cmp eax, [ecx+0x18]; je 0x10015FD4; mov edx, [ebp+0x0C]; mov eax, [edx+0x10]; push eax; call [0x1001F0E4] 
0x1001606d  # cmp eax, [ebp-0x08]; je 0x100160A0; mov ecx, [ebp+0x0C]; mov edx, [ecx+0x10]; push edx; call [0x1001F0E4] 
0x10018e1f  # cmp eax, [ebp-0x00000170]; je 0x10018E4A; mov ecx, [ebp-0x00000138]; push ecx; call [0x1001F0E4] 
0x1001010f  # cmp ecx, [ebx+0x5F102444]; pop esi; pop ebp; pop ebx; add esp, 0x00000084; ret 
0x10011d43  # cmp esi, eax; jc 0x10011D59; mov ecx, [esi]; test ecx, ecx; je 0x10011D54; call ecx 
0x10014ce0  # cmp al, 0x00; add byte [ebx-0x1A74FB3C], al; pop ebp; ret 
0x10019ff0  # cmp al, 0x3B; retn 0x4375 
0x1001015b  # cmp al, 0xF0; add [eax], edx; test eax, eax; je 0x1001017A; push eax; call edi 
0x10010288  # cmp al, 0xF0; add [eax], edx; mov al, 0x01; add esp, 0x00000080; ret 
0x1001e43c  # cmp al, 0xF1; add [eax], edx; jmp [0x1001F144] 
0x1001015a  # cmp eax, 0x1001F03C; test eax, eax; je 0x1001017A; push eax; call edi 
0x100164d7  # cmp eax, 0x1002A1D4; add byte [edx+ebx-0x75], dh; or eax, 0x1002A1D4; push ecx; call [0x1001F0E4] 
0x10011e1a  # cmp eax, 0x1002A1F4; add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1001F01C] 
0x1001017b  # add byte [edi+ecx-0x75], dh; xchg byte [eax+0x50000000], cl; call edi 
0x10018242  # add [ecx], 0x10; jmp [0x10018336+edx*4] 
0x10011cec  # aas; push 0x00000080; call [0x1001F0F0] 
0x10011b9b  # inc eax; add al, 0x50; ret 
0x10014943  # inc eax; adc byte [ecx], al; add byte [eax], al; add byte [ebx+0x518B084D], cl; adc al, 0x81; retn 0x076C 
0x10016abc  # inc eax; imul eax, [ecx], 0x10; jmp [0x10016B38+edx*4] 
0x10014c91  # inc ecx; or byte [eax+0x00000001], bh; mov esp, ebp; pop ebp; ret 
0x10012e01  # inc ecx; add byte [eax], al; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10011fd7  # inc ecx; inc [eax]; xor eax, eax; mov esp, ebp; pop ebp; ret 
0x10015aaa  # inc edx; add al, 0x8B; in eax, 0x5D; ret 
0x100170c5  # inc edx; inc ebp; add byte [ebx-0x1A74EBBB], cl; pop ebp; ret 
0x10014ef3  # inc edx; push 0x10028F2C; call [0x1001F114] 
0x10016776  # inc edx; inc [eax]; xor eax, eax; pop ebp; ret 
0x10011ca1  # inc esp; and al, 0x04; mul ecx; retn 0x0010 
0x10011cb9  # inc esp; and al, 0x08; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x10010228  # inc esp; and al, 0x14; push eax; call [0x1001F0C8] 
0x100133cb  # inc esp; push eax; mov ecx, [ebp-0x00000114]; push ecx; call [0x1001F018] 
0x1001e442  # inc esp; int1; add [eax], edx; jmp [0x1001F168] 
0x100170c6  # inc ebp; add byte [ebx-0x1A74EBBB], cl; pop ebp; ret 
0x1001264b  # inc ebp; add byte [ebx+0x452B1845], cl; clc; mov esp, ebp; pop ebp; ret 
0x10014006  # inc ebp; or byte [eax-0x73], dl; lea eax, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013f84  # inc ebp; or byte [eax-0x73], dl; lea ecx, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013b5c  # inc ebp; or byte [eax-0x73], dl; lea esi, [esi+edi*8-0x01]; call [ecx-0x01] 
0x10013469  # inc ebp; or byte [eax-0x73], dl; lea edi, [eax+0x51FFFFFE]; call [0x1001F178] 
0x10011f71  # inc ebp; or byte [eax-0x01], dl; adc eax, 0x1001F0C8; add esp, 0x0C; call [0x1001F014] 
0x1001291c  # inc ebp; or byte [eax-0x01], dl; adc eax, 0x1001F0E4; add esp, 0x04; pop ebp; ret 
0x1001672a  # inc ebp; or al, 0x50; push 0x00001004; call [0x1001F078]; push eax; call [0x1001F018] 
0x1001672a  # inc ebp; or al, 0x50; push 0x00001004; call [0x1001F078] 
0x1001569f  # inc ebp; or al, 0x50; mov ecx, [ebp+0x08]; mov edx, [ecx]; push edx; call [0x1001F0C8] 
0x10013065  # inc ebp; or al, 0x50; lea ecx, [ebp-0x00000130]; push ecx; call [0x1001F178] 
0x100147aa  # inc ebp; or al, 0x50; lea ecx, [ebp-0x00000208]; push ecx; call [0x1001F178] 
0x10016759  # inc ebp; or al, 0x50; call [0x1001F184] 
0x10015648  # inc ebp; or al, 0x50; call [0x1001F090] 
0x100180ba  # inc ebp; or al, 0x5E; mov esp, ebp; pop ebp; ret 
0x10011e03  # inc ebp; or al, 0x5F; pop esi; pop ebx; pop ebp; retn 0x000C 
0x1001bfb9  # inc ebp; or al, 0x89; adc cl, ch; ret 
0x10012563  # inc ebp; or al, 0x8B; in eax, 0x5D; ret 
0x10014fec  # inc ebp; adc al, 0x8B; in eax, 0x5D; ret 
0x10012ef2  # inc ebp; test al, 0x50; call [0x1001F0E4] 
0x100158ab  # inc ebp; mov eax, 0x89F44D8B; dec eax; or byte [ebx-0x2D940BAB], cl; and al, 0x52; call [0x1001F0F0] 
0x100157bc  # inc ebp; mov eax, 0x000282E9; add byte [edx+0x14], ch; call [0x1001F0F0] 
0x10018fb0  # inc ebp; rol dh, 1; add byte [eax], al; mov ecx, [ebp-0x00000138]; push ecx; call [0x1001F0E4] 
0x10019ad6  # inc ebp; aam 0x03; retn 0x4D8B 
0x100155df  # inc ebp; fcom [eax-0x75]; dec ebp; adc al, 0x51; call [0x1001F128] 
0x10019a9a  # inc ebp; loopne 0x10019AA0; retn 0x4D8B 
0x1001a478  # inc ebp; in al, 0x03; retn 0x4589 
0x10016ab6  # inc ebp; in al, dx; xor edx, edx; mov dl, byte [eax+0x10016B40]; jmp [0x10016B38+edx*4] 
0x10015c06  # inc ebp; in al, dx; mov ecx, [0x1002A1C4]; mov edx, [ecx+eax*4]; push edx; call [0x1001F0E4] 
0x10012a89  # inc ebp; in al, dx; shl eax, 1; push eax; call [0x1001F0F0] 
0x10012b22  # inc ebp; lock push eax; call [0x1001F0E4] 
0x10016a30  # inc ebp; lock mov esp, ebp; pop ebp; ret 
0x100123c7  # inc ebp; hlt; movsx eax, byte [ebp-0x0B]; push eax; call [0x1001F158] 
0x1001229d  # inc ebp; hlt; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F158] 
0x10012bdb  # inc ebp; hlt; push eax; call [0x1001F0E4] 
0x10012d3a  # inc ebp; hlt; push eax; call [0x1001F0F0] 
0x100162b6  # inc ebp; hlt; mov esp, ebp; pop ebp; ret 
0x100123d8  # inc ebp; cmc; movsx ecx, byte [ebp-0x09]; push ecx; call [0x1001F154] 
0x100123cb  # inc ebp; cmc; push eax; call [0x1001F158] 
0x100123e9  # inc ebp; test [edi], 0x52F855BE; call [0x1001F154] 
0x10018a73  # inc ebp; clc; push eax; call [0x1001F0E4] 
0x10012cb3  # inc ebp; clc; push eax; call [0x1001F0F0] 
0x10012be8  # inc ebp; clc; sub eax, 0x01; mov esp, ebp; pop ebp; ret 
0x10012b1f  # inc ebp; clc; mov eax, [ebp-0x10]; push eax; call [0x1001F0E4] 
0x10012d71  # inc ebp; clc; mov eax, [ebp-0x08]; shl eax, 1; push eax; call [0x1001F0F0] 
0x1001687b  # inc ebp; clc; mov ecx, [ebp-0x0C]; push ecx; call [0x1001F0F0] 
0x100128de  # inc ebp; clc; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0F0] 
0x10012bcb  # inc ebp; clc; mov edx, [ebp-0x04]; push edx; call [0x1001F0E4] 
0x10012651  # inc ebp; clc; mov esp, ebp; pop ebp; ret 
0x10012d74  # inc ebp; clc; shl eax, 1; push eax; call [0x1001F0F0] 
0x10016560  # inc ebp; cld; movsx ecx, byte [eax]; push ecx; call [0x1001F154] 
0x10011f52  # inc ebp; cld; push eax; mov ecx, [ebp+0x08]; push ecx; call [0x1001F0C8] 
0x1001617f  # inc ebp; cld; push eax; call [0x1001F0E4] 
0x10015655  # inc ebp; cld; push 0x0000002E; mov ecx, [ebp+0x0C]; push ecx; call [0x1001F090] 
0x10014f03  # inc ebp; cld; cmp [ebp-0x04], 0x00000000; jne 0x10014F36; push 0x10028F34; call [0x1001F114] 
0x10012eef  # inc ebp; cld; mov eax, [ebp-0x58]; push eax; call [0x1001F0E4] 
0x10016311  # inc ebp; cld; mov ecx, [eax+0x10]; push ecx; call [0x1001F0E4] 
0x1001258e  # inc ebp; cld; mov esp, ebp; pop ebp; ret 
0x100106d8  # inc esi; or byte [ebx+0x6A], dl; add al, 0x50; push edi; call [0x1001F0D4] 
0x10010644  # inc edi; or byte [edi+0x5E], bl; mov al, 0x01; pop ebx; ret 
0x10010843  # inc edi; or byte [edi+0x5E], bl; ret 
0x1001083c  # inc edi; or byte [ebx-0x76B7F73C], al; inc edi; or byte [edi+0x5E], bl; ret 
0x10013134  # dec eax; add [eax], edx; jmp [0x10014824+ecx*4] 
0x100158b1  # dec eax; or byte [ebx-0x2D940BAB], cl; and al, 0x52; call [0x1001F0F0] 
0x10016330  # dec eax; or al, 0x51; call [0x1001F0E4] 
0x10010841  # dec eax; mov [edi+0x08], eax; pop edi; pop esi; ret 
0x10012890  # dec esp; add byte [ecx], al; mov [ebp-0x08], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x1001228d  # dec esp; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F158] 
0x100118e1  # dec esp; and al, 0x04; xor eax, eax; test ecx, ecx; setne al; ret 
0x10011c9b  # dec esp; and al, 0x0C; jne 0x10011CA9; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x10017bf7  # dec ebp; or byte [ebx], dh; shl byte [esi-0x75], cl; adc [ebx], edi; retn 0x1774 
0x10013ca7  # dec ebp; or byte [ecx-0x73], dl; xchg eax, ebp; push 0x52FFFFFE; call [0x1001F178] 
0x100132dc  # dec ebp; or byte [ecx-0x73], dl; xchg eax, ebp; sar dh, 0xFF; call [edx-0x01] 
0x10016633  # dec ebp; or byte [edx+0x03], ch; push 0x10029558; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x10014d94  # dec ebp; or byte [edx+0x54], ch; call [0x1001F0F0] 
0x100151cf  # dec ebp; or byte [ecx-0x00042373], cl; dec [ebp-0x00046F6B]; call [edx-0x75] 
0x10014e25  # dec ebp; or byte [ebx+0x5DE58B01], cl; ret 
0x10014e9b  # dec ebp; or byte [ebx-0x3F7CF7BB], cl; push es; pop ebp; ret 
0x1001565a  # dec ebp; or al, 0x51; call [0x1001F090] 
0x100178cb  # dec ebp; or al, 0x89; add ebx, ebp; mov ecx, 0x8BFC458B; in eax, 0x5D; ret 
0x1001bfb1  # dec ebp; or al, 0x8B; adc [ebx+0x458B01C2], eax; or al, 0x89; adc cl, ch; ret 
0x10016742  # dec ebp; adc byte [ecx-0x75], dl; push ebp; or al, 0x52; push 0x0000000B; call [0x1001F078] 
0x10012c27  # dec ebp; adc byte [ebx+0x20750039], al; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10017f6f  # dec ebp; adc byte [ebx+0x1189FC55], cl; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x100155e3  # dec ebp; adc al, 0x51; call [0x1001F128] 
0x10017283  # dec ebp; sbb byte [ecx-0x03BA74FF], cl; mov esp, ebp; pop ebp; ret 
0x10015969  # dec ebp; mov eax, 0x520C518B; call [0x1001F0E4] 
0x100123b0  # dec ebp; enter 0x7D83, 0xC8; add byte [ebp+0x6B], dh; movsx edx, byte [ebp-0x0C]; push edx; call [0x1001F158] 
0x100154d7  # dec ebp; aam 0x33; ror byte [edx+0x01561681], 0x10; jmp [0x100155FE+eax*4] 
0x10018da3  # dec ebp; aam 0x51; mov edx, [ebp-0x34]; push edx; call [0x1001F164] 
0x10012aa1  # dec ebp; loopne 0x10012A2F; push ebp; loopne 0x10012AF9; call [0x1001F0F0] 
0x100122b9  # dec ebp; hlt; push ecx; mov edx, [ebp+0x0C]; push edx; call [0x1001F0C8] 
0x100121c4  # dec ebp; hlt; push ecx; call [0x1001F118] 
0x10012290  # dec ebp; hlt; push ecx; call [0x1001F158] 
0x10012b83  # dec ebp; hlt; push ecx; call [0x1001F0E8] 
0x1001687e  # dec ebp; hlt; push ecx; call [0x1001F0F0] 
0x10012171  # dec ebp; clc; push ecx; call [0x1001F118] 
0x10012f06  # dec ebp; clc; push ecx; call [0x1001F0E4] 
0x100128e1  # dec ebp; clc; push ecx; call [0x1001F0F0] 
0x10015b1a  # dec ebp; clc; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x10015138  # dec ebp; clc; mov edx, [ecx+0x10]; push edx; call [0x1001F0E4] 
0x10012894  # dec ebp; clc; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10016687  # dec ebp; cld; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x100124c2  # dec ebp; cld; push ecx; mov edx, [ebp+0x0C]; push edx; call [0x1001F0C8] 
0x10012b35  # dec ebp; cld; push ecx; call [0x1001F0E4] 
0x100167c8  # dec ebp; cld; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x10011bfe  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x1001082a  # dec edi; add al, 0x8B; push esi; or byte [edx-0x18], dl; mov edi, [ecx-0x01]; call [esi-0x18] 
0x100106dd  # push eax; push edi; call [0x1001F0D4] 
0x1001672c  # push eax; push 0x00001004; call [0x1001F078]; push eax; call [0x1001F018] 
0x1001672c  # push eax; push 0x00001004; call [0x1001F078] 
0x100167df  # push eax; push 0x10029560; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x1001689b  # push eax; push 0x10029570; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x10018b79  # push eax; push 0x10029F74; lea ecx, [ebp-0x00000108]; push ecx; call [0x1001F09C] 
0x10016956  # push eax; push 0x10029588; mov ecx, [0x1002A1D4]; push ecx; call [0x1001F09C] 
0x10011f54  # push eax; mov ecx, [ebp+0x08]; push ecx; call [0x1001F0C8] 
0x100156a1  # push eax; mov ecx, [ebp+0x08]; mov edx, [ecx]; push edx; call [0x1001F0C8] 
0x100155e1  # push eax; mov ecx, [ebp+0x14]; push ecx; call [0x1001F128] 
0x10012b81  # push eax; mov ecx, [ebp-0x0C]; push ecx; call [0x1001F0E8] 
0x100124c0  # push eax; mov ecx, [ebp-0x04]; push ecx; mov edx, [ebp+0x0C]; push edx; call [0x1001F0C8] 
0x100133cc  # push eax; mov ecx, [ebp-0x00000114]; push ecx; call [0x1001F018] 
0x10010226  # push eax; lea eax, [esp+0x14]; push eax; call [0x1001F0C8] 
0x100122b7  # push eax; lea ecx, [ebp-0x0C]; push ecx; mov edx, [ebp+0x0C]; push edx; call [0x1001F0C8] 
0x10014637  # push eax; lea ecx, [ebp-0x000001FC]; push ecx; call [0x1001F178] 
0x10014249  # push eax; lea ecx, [ebp-0x000001D8]; push ecx; call [0x1001F178] 
0x100141c7  # push eax; lea ecx, [ebp-0x000001D0]; push ecx; call [0x1001F178] 
0x1001408a  # push eax; lea ecx, [ebp-0x000001C4]; push ecx; call [0x1001F178] 
0x10014008  # push eax; lea ecx, [ebp-0x000001BC]; push ecx; call [0x1001F178] 
0x10013f86  # push eax; lea ecx, [ebp-0x000001B4]; push ecx; call [0x1001F178] 
0x10013b5e  # push eax; lea ecx, [ebp-0x0000018C]; push ecx; call [0x1001F178] 
0x1001346b  # push eax; lea ecx, [ebp-0x00000148]; push ecx; call [0x1001F178] 
0x10013067  # push eax; lea ecx, [ebp-0x00000130]; push ecx; call [0x1001F178] 
0x100147ac  # push eax; lea ecx, [ebp-0x00000208]; push ecx; call [0x1001F178] 
0x10016751  # push eax; call [0x1001F018]; mov eax, [ebp+0x0C]; push eax; call [0x1001F184] 
0x100131d6  # push eax; call [0x1001F018] 
0x10016830  # push eax; call [0x1001F120] 
0x10010285  # push eax; call [0x1001F03C]; mov al, 0x01; add esp, 0x00000080; ret 
0x100123cd  # push eax; call [0x1001F158] 
0x10013016  # push eax; call [0x1001F174] 
0x10012f53  # push eax; call [0x1001F178] 
0x1001675b  # push eax; call [0x1001F184] 
0x10014cb1  # push eax; call [0x1001F0C0] 
0x10011f73  # push eax; call [0x1001F0C8]; add esp, 0x0C; call [0x1001F014] 
0x10012a54  # push eax; call [0x1001F0D8] 
0x1001259a  # push eax; call [0x1001F0E4]; add esp, 0x04; xor eax, eax; pop ebp; ret 
0x1001291e  # push eax; call [0x1001F0E4]; add esp, 0x04; pop ebp; ret 
0x10011ed1  # push ecx; add bh, byte [ebx]; retn 0x2775 
0x1001994f  # push ecx; add al, byte [ecx+0x0000FFE2]; add byte [ebx], al; retn 0xC06B 
0x10015157  # push ecx; or al, 0x52; call [0x1001F0E4] 
0x1001494d  # push ecx; adc al, 0x81; retn 0x076C 
0x10019fef  # push ecx; cmp al, 0x3B; retn 0x4375 
0x100168ea  # push ecx; push 0x10029580; call [0x1001F114] 
0x10016997  # push ecx; push 0x10029594; call [0x1001F114] 
0x10018c71  # push ecx; push 0x10029FA4; lea edx, [ebp-0x00000108]; push edx; call [0x1001F09C] 
0x1001256c  # push ecx; push 0x00000020; call [0x1001F0F0] 
0x10013efe  # push ecx; push 0x00000029; mov edx, [ebp-0x00000114]; push edx; call [0x1001F018] 
0x10012426  # push ecx; mov edx, [ebp+0x08]; push edx; mov eax, [ebp+0x0C]; push eax; call [0x1001F0C8] 
0x10016744  # push ecx; mov edx, [ebp+0x0C]; push edx; push 0x0000000B; call [0x1001F078] 
0x100122bb  # push ecx; mov edx, [ebp+0x0C]; push edx; call [0x1001F0C8] 
0x10012a4c  # push ecx; mov edx, [ebp+0x14]; push edx; mov eax, [ebp+0x10]; push eax; call [0x1001F0D8] 
0x10018da5  # push ecx; mov edx, [ebp-0x34]; push edx; call [0x1001F164] 
0x10012b10  # push ecx; mov edx, [ebp-0x04]; push edx; call [0x1001F0D8] 
0x1001323b  # push ecx; mov edx, [ebp-0x00000114]; push edx; call [0x1001F018] 
0x1001252d  # push ecx; lea edx, [ebp-0x0C]; push edx; mov eax, [ebp+0x0C]; push eax; call [0x1001F0C8] 
0x100143a6  # push ecx; lea edx, [ebp-0x000001E4]; push edx; call [0x1001F178] 
0x10013e40  # push ecx; lea edx, [ebp-0x000001AC]; push edx; call [0x1001F178] 
0x10013de7  # push ecx; lea edx, [ebp-0x000001A4]; push edx; call [0x1001F178] 
0x10013ca9  # push ecx; lea edx, [ebp-0x00000198]; push edx; call [0x1001F178] 
0x100138c7  # push ecx; lea edx, [ebp-0x00000174]; push edx; call [0x1001F178] 
0x100135b2  # push ecx; lea edx, [ebp-0x00000154]; push edx; call [0x1001F178] 
0x100132de  # push ecx; lea edx, [ebp-0x00000140]; push edx; call [0x1001F178] 
0x10012fed  # push ecx; lea edx, [ebp-0x00000128]; push edx; call [0x1001F178] 
0x100133d3  # push ecx; call [0x1001F018] 
0x100155e5  # push ecx; call [0x1001F128] 
0x100123de  # push ecx; call [0x1001F154] 
0x10012292  # push ecx; call [0x1001F158] 
0x10012f75  # push ecx; call [0x1001F174] 
0x1001306e  # push ecx; call [0x1001F178] 
0x1001565c  # push ecx; call [0x1001F090] 
0x100167eb  # push ecx; call [0x1001F09C] 
0x10016332  # push ecx; call [0x1001F0E4]; add esp, 0x04; mov edx, [ebp+0x08]; push edx; call [0x1001F0E4] 
0x10012b37  # push ecx; call [0x1001F0E4]; add esp, 0x04; mov edx, [ebp-0x0C]; push edx; call [0x1001F0E4] 
0x10012b37  # push ecx; call [0x1001F0E4] 
0x10012b85  # push ecx; call [0x1001F0E8] 
0x100128e3  # push ecx; call [0x1001F0F0] 
0x100191f7  # push edx; add byte [eax], al; mov edx, [ebp+0x08]; mov [edx+0x08], eax; pop ebp; ret 
0x10019185  # push edx; add byte [eax], al; mov edx, [ebp+0x08]; mov [edx+0x18], eax; pop ebp; ret 
0x10018be2  # push edx; push 0x10029F80; lea eax, [ebp-0x00000108]; push eax; call [0x1001F09C] 
0x10011f6a  # push edx; push 0x10028EC0; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8] 
0x10011fbd  # push edx; push 0x10028EC4; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8] 
0x10016748  # push edx; push 0x0000000B; call [0x1001F078]; push eax; call [0x1001F018] 
0x10016748  # push edx; push 0x0000000B; call [0x1001F078] 
0x10013e90  # push edx; push 0x00000028; mov eax, [ebp-0x00000114]; push eax; call [0x1001F018] 
0x10016728  # push edx; mov eax, [ebp+0x0C]; push eax; push 0x00001004; call [0x1001F078] 
0x10012a50  # push edx; mov eax, [ebp+0x10]; push eax; call [0x1001F0D8] 
0x10011f50  # push edx; mov eax, [ebp-0x04]; push eax; mov ecx, [ebp+0x08]; push ecx; call [0x1001F0C8] 
0x100151dd  # push edx; mov eax, [ebp-0x00000424]; push eax; call [0x1001F128] 
0x100131cf  # push edx; mov eax, [ebp-0x00000114]; push eax; call [0x1001F018] 
0x100144ee  # push edx; lea eax, [ebp-0x000001F0]; push eax; call [0x1001F178] 
0x10013a0f  # push edx; lea eax, [ebp-0x00000180]; push eax; call [0x1001F178] 
0x1001529f  # push edx; lea eax, [ebp-0x00000474]; push eax; call [0x1001F0C8] 
0x1001377c  # push edx; lea eax, [ebp-0x00000168]; push eax; call [0x1001F178] 
0x100136fa  # push edx; lea eax, [ebp-0x00000160]; push eax; call [0x1001F178] 
0x1001314d  # push edx; lea eax, [ebp-0x00000138]; push eax; call [0x1001F178] 
0x10012f4c  # push edx; lea eax, [ebp-0x00000120]; push eax; call [0x1001F178] 
0x10015c9f  # push edx; mov eax, [0x1002A1C4]; push eax; call [0x1001F0E8] 
0x10013242  # push edx; call [0x1001F018] 
0x100123ef  # push edx; call [0x1001F154] 
0x100122a3  # push edx; call [0x1001F158] 
0x10018da9  # push edx; call [0x1001F164] 
0x10013090  # push edx; call [0x1001F174] 
0x10012ff4  # push edx; call [0x1001F178] 
0x10014a8a  # push edx; call [0x1001F17C] 
0x100151ad  # push edx; call [0x1001F090] 
0x10018c7d  # push edx; call [0x1001F09C] 
0x1001586d  # push edx; call [0x1001F0CC] 
0x10015159  # push edx; call [0x1001F0E4]; add esp, 0x04; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x10012bd0  # push edx; call [0x1001F0E4]; add esp, 0x04; mov eax, [ebp-0x0C]; push eax; call [0x1001F0E4] 
0x1001633f  # push edx; call [0x1001F0E4]; add esp, 0x04; mov esp, ebp; pop ebp; ret 
0x10012b44  # push edx; call [0x1001F0E4] 
0x10012899  # push edx; call [0x1001F0F0] 
0x10019083  # push ebx; add byte [eax], al; mov edx, [ebp+0x08]; mov [edx+0x18], eax; pop ebp; ret 
0x100106da  # push ebx; push 0x00000004; push eax; push edi; call [0x1001F0D4] 
0x10011da0  # push ebx; call eax 
0x10013122  # push esp; ja 0x10014796; mov edx, [ebp-0x00000218]; xor ecx, ecx; mov cl, byte [edx+0x10014880]; jmp [0x10014824+ecx*4] 
0x10014d97  # push esp; call [0x1001F0F0] 
0x10012428  # push ebp; or byte [edx-0x75], dl; inc ebp; or al, 0x50; call [0x1001F0C8] 
0x1001377a  # push ebp; or byte [edx-0x73], dl; test [eax+0x50FFFFFE], ebx; call [0x1001F178] 
0x100136f8  # push ebp; or byte [edx-0x73], dl; test [eax+0x50FFFFFE], esp; call [0x1001F178] 
0x10017ca2  # push ebp; or byte [esi-0x39], ah; add al, byte [eax]; add byte [ebx-0x1A7403BB], cl; pop ebp; ret 
0x10017d7e  # push ebp; or byte [ebx+0x558902C2], al; or bl, ch; fisttp qword [ebx-0x1A7403BB]; pop ebp; ret 
0x100156ba  # push ebp; or byte [ecx+0x5DE58B0A], cl; ret 
0x10017d84  # push ebp; or bl, ch; fisttp qword [ebx-0x1A7403BB]; pop ebp; ret 
0x10016746  # push ebp; or al, 0x52; push 0x0000000B; call [0x1001F078]; push eax; call [0x1001F018] 
0x10016746  # push ebp; or al, 0x52; push 0x0000000B; call [0x1001F078] 
0x10012f4a  # push ebp; or al, 0x52; lea eax, [ebp-0x00000120]; push eax; call [0x1001F178] 
0x100122bd  # push ebp; or al, 0x52; call [0x1001F0C8] 
0x10017b1c  # push ebp; or al, 0x83; retn 0x8902 
0x10016cff  # push ebp; or al, 0x89; or cl, byte [ebx+0x38810C45]; call edi 
0x10016726  # push ebp; adc byte [edx-0x75], dl; inc ebp; or al, 0x50; push 0x00001004; call [0x1001F078] 
0x10012cab  # push ebp; adc byte [ebx+0x2075003A], al; mov eax, [ebp-0x08]; push eax; call [0x1001F0F0] 
0x10012a4e  # push ebp; adc al, 0x52; mov eax, [ebp+0x10]; push eax; call [0x1001F0D8] 
0x100128c3  # push ebp; adc al, 0x89; add cl, byte [ebx-0x1A7403BB]; pop ebp; ret 
0x10017651  # push ebp; sbb byte [ecx-0x03BA74F6], cl; mov esp, ebp; pop ebp; ret 
0x100168e7  # push ebp; mov ebp, esp; push ecx; push 0x10029580; call [0x1001F114] 
0x10016994  # push ebp; mov ebp, esp; push ecx; push 0x10029594; call [0x1001F114] 
0x10012569  # push ebp; mov ebp, esp; push ecx; push 0x00000020; call [0x1001F0F0] 
0x10012594  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; push eax; call [0x1001F0E4] 
0x100157fe  # push ebp; mov eax, 0x00047A83; jnl 0x1001581A; mov eax, [ebp-0x48]; push eax; call [0x1001F0E4] 
0x1001a861  # push ebp; retn 0x458B 
0x10018da7  # push ebp; int3; push edx; call [0x1001F164] 
0x10014a88  # push ebp; int3; push edx; call [0x1001F17C] 
0x10014eed  # push ebp; fmul qword [ecx+0x42EBFC55]; push 0x10028F2C; call [0x1001F114] 
0x1001586b  # push ebp; loopne 0x100158C0; call [0x1001F0CC] 
0x10012aa4  # push ebp; loopne 0x10012AF9; call [0x1001F0F0] 
0x100160b1  # push ebp; in al, 0x83; retn 0x8901 
0x10012a86  # push ebp; in al, dx; mov eax, [ebp-0x14]; shl eax, 1; push eax; call [0x1001F0F0] 
0x1001252f  # push ebp; hlt; push edx; mov eax, [ebp+0x0C]; push eax; call [0x1001F0C8] 
0x100123ba  # push ebp; hlt; push edx; call [0x1001F158] 
0x10012b42  # push ebp; hlt; push edx; call [0x1001F0E4] 
0x100158b4  # push ebp; hlt; imul edx, edx, 0x24; push edx; call [0x1001F0F0] 
0x100150cc  # push ebp; hlt; mov eax, [0x1002A1C4]; mov ecx, [eax+edx*4]; push ecx; call [0x1001F0E4] 
0x100122a1  # push ebp; cmc; push edx; call [0x1001F158] 
0x100123ed  # push ebp; clc; push edx; call [0x1001F154] 
0x10012897  # push ebp; clc; push edx; call [0x1001F0F0] 
0x10012386  # push ebp; stc; push edx; call [0x1001F118] 
0x10018f08  # push ebp; cld; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10012b12  # push ebp; cld; push edx; call [0x1001F0D8] 
0x10012bce  # push ebp; cld; push edx; call [0x1001F0E4] 
0x100154de  # push esi; add [eax], edx; jmp [0x100155FE+eax*4] 
0x1001082d  # push esi; or byte [edx-0x18], dl; mov edi, [ecx-0x01]; call [esi-0x18] 
0x10011d9f  # push esi; push ebx; call eax 
0x10011d9e  # push edi; push esi; push ebx; call eax 
0x10010537  # push edi; jne 0x1001053F; pop edi; xor eax, eax; pop esi; ret 
0x10010158  # push edi; mov edi, [0x1001F03C]; test eax, eax; je 0x1001017A; push eax; call edi 
0x100106de  # push edi; call [0x1001F0D4] 
0x10016638  # pop eax; xchg eax, ebp; add dl, byte [eax]; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x10011d67  # pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x10011e07  # pop ebx; pop ebp; retn 0x000C 
0x10011b54  # pop ebx; pop esi; pop edi; retn 0x0010 
0x10010279  # pop ebx; jne 0x10010285; xor al, al; add esp, 0x00000080; ret 
0x100151bc  # pop esp; mov eax, [ebp+0x08]; push eax; call [0x1001F090] 
0x10011e06  # pop esi; pop ebx; pop ebp; retn 0x000C 
0x10011c03  # pop esi; pop ebx; retn 0x0010 
0x10010115  # pop esi; pop ebp; pop ebx; add esp, 0x00000084; ret 
0x10011b55  # pop esi; pop edi; retn 0x0010 
0x10011d68  # pop esi; push 0x00000001; pop eax; retn 0x000C 
0x10014dda  # pop esi; mov esp, ebp; pop ebp; ret 
0x10011a9d  # pop edi; pop ebx; retn 0x0010 
0x10011e05  # pop edi; pop esi; pop ebx; pop ebp; retn 0x000C 
0x10010114  # pop edi; pop esi; pop ebp; pop ebx; add esp, 0x00000084; ret 
0x10014dd9  # pop edi; pop esi; mov esp, ebp; pop ebp; ret 
0x10015646  # pop edi; mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x100167e1  # pushad; xchg eax, ebp; add dl, byte [eax]; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x10017d0f  # mov cx, word [edx]; sub eax, ecx; pop ebp; ret 
0x100180b8  # mov ax, word [ebp+0x0C]; pop esi; mov esp, ebp; pop ebp; ret 
0x100143c8  # mov ax, word [ebp-0x000001E4]; push eax; call [0x1001F174] 
0x10013e62  # mov ax, word [ebp-0x000001AC]; push eax; call [0x1001F174] 
0x10013ccb  # mov ax, word [ebp-0x00000198]; push eax; call [0x1001F174] 
0x100138e9  # mov ax, word [ebp-0x00000174]; push eax; call [0x1001F174] 
0x100135d4  # mov ax, word [ebp-0x00000154]; push eax; call [0x1001F174] 
0x1001300f  # mov ax, word [ebp-0x00000128]; push eax; call [0x1001F174] 
0x10014510  # mov cx, word [ebp-0x000001F0]; push ecx; call [0x1001F174] 
0x10013a31  # mov cx, word [ebp-0x00000180]; push ecx; call [0x1001F174] 
0x1001379e  # mov cx, word [ebp-0x00000168]; push ecx; call [0x1001F174] 
0x1001371c  # mov cx, word [ebp-0x00000160]; push ecx; call [0x1001F174] 
0x1001316f  # mov cx, word [ebp-0x00000138]; push ecx; call [0x1001F174] 
0x10012f6e  # mov cx, word [ebp-0x00000120]; push ecx; call [0x1001F174] 
0x10014659  # mov dx, word [ebp-0x000001FC]; push edx; call [0x1001F174] 
0x1001426b  # mov dx, word [ebp-0x000001D8]; push edx; call [0x1001F174] 
0x100141e9  # mov dx, word [ebp-0x000001D0]; push edx; call [0x1001F174] 
0x100140ac  # mov dx, word [ebp-0x000001C4]; push edx; call [0x1001F174] 
0x1001402a  # mov dx, word [ebp-0x000001BC]; push edx; call [0x1001F174] 
0x10013fa8  # mov dx, word [ebp-0x000001B4]; push edx; call [0x1001F174] 
0x10013b80  # mov dx, word [ebp-0x0000018C]; push edx; call [0x1001F174] 
0x1001348d  # mov dx, word [ebp-0x00000148]; push edx; call [0x1001F174] 
0x10013089  # mov dx, word [ebp-0x00000130]; push edx; call [0x1001F174] 
0x100147ce  # mov dx, word [ebp-0x00000208]; push edx; call [0x1001F174] 
0x10017ca4  # mov word [edx], 0x0000; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x10012dff  # mov word [ecx+0x26], 0x0000; mov eax, [ebp-0x04]; mov esp, ebp; pop ebp; ret 
0x1001212a  # push 0x00000103; movsx eax, byte [ebp-0x09]; push eax; call [0x1001F118] 
0x100121bd  # push 0x00000103; movsx ecx, byte [ebp-0x0C]; push ecx; call [0x1001F118] 
0x10012339  # push 0x00000103; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x10012203  # push 0x00000103; movsx edx, byte [ebp-0x0B]; push edx; call [0x1001F118] 
0x1001672d  # push 0x00001004; call [0x1001F078]; push eax; call [0x1001F018] 
0x1001672d  # push 0x00001004; call [0x1001F078] 
0x10012257  # push 0x00000107; movsx ecx, byte [ebp-0x0A]; push ecx; call [0x1001F118] 
0x1001237f  # push 0x00000107; movsx edx, byte [ebp-0x07]; push edx; call [0x1001F118] 
0x10016681  # push 0x00000107; mov ecx, [ebp-0x04]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x10016372  # push 0x10029524; call [0x1001F114] 
0x10014ca9  # push 0x10028F28; mov eax, [ebp+0x08]; push eax; call [0x1001F0C0] 
0x10014ef4  # push 0x10028F2C; call [0x1001F114] 
0x10015865  # push 0x10028F4C; lea edx, [ebp-0x20]; push edx; call [0x1001F0CC] 
0x10016637  # push 0x10029558; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x100167e0  # push 0x10029560; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x100165c3  # push 0x00008068; add byte [ebp-0x00010773], cl; call [ecx-0x73] 
0x1001689c  # push 0x10029570; mov ecx, [0x1002A1D8]; push ecx; call [0x1001F09C] 
0x10018b7a  # push 0x10029F74; lea ecx, [ebp-0x00000108]; push ecx; call [0x1001F09C] 
0x10011ced  # push 0x00000080; call [0x1001F0F0] 
0x100168eb  # push 0x10029580; call [0x1001F114] 
0x10018be3  # push 0x10029F80; lea eax, [ebp-0x00000108]; push eax; call [0x1001F09C] 
0x10016957  # push 0x10029588; mov ecx, [0x1002A1D4]; push ecx; call [0x1001F09C] 
0x10016998  # push 0x10029594; call [0x1001F114] 
0x10018c72  # push 0x10029FA4; lea edx, [ebp-0x00000108]; push edx; call [0x1001F09C] 
0x10011f29  # push 0x10028EB8; call [0x1001F114] 
0x10011f6b  # push 0x10028EC0; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8]; add esp, 0x0C; call [0x1001F014] 
0x10011f6b  # push 0x10028EC0; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8] 
0x10011fbe  # push 0x10028EC4; mov eax, [ebp+0x08]; push eax; call [0x1001F0C8] 
0x1001e448  # push 0xFF1001F1; and eax, 0x1001F16C; jmp [0x1001F170] 
0x10013cce  # push 0x50FFFFFE; call [0x1001F174] 
0x10013cac  # push 0x52FFFFFE; call [0x1001F178] 
0x10011853  # imul ecx, [ebx-0x3B7C0001], 0xC033C304; ret 
0x1001c9df  # imul edi, ebp, 0x458BFFFF; clc; mov esp, ebp; pop ebp; ret 
0x10011d69  # push 0x00000001; pop eax; retn 0x000C 
0x10014632  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x000001FC]; push ecx; call [0x1001F178] 
0x10014244  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x000001D8]; push ecx; call [0x1001F178] 
0x100141c2  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x000001D0]; push ecx; call [0x1001F178] 
0x10014085  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x000001C4]; push ecx; call [0x1001F178] 
0x10014003  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x000001BC]; push ecx; call [0x1001F178] 
0x10013f81  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x000001B4]; push ecx; call [0x1001F178] 
0x10013b59  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x0000018C]; push ecx; call [0x1001F178] 
0x10013466  # push 0x00000002; mov eax, [ebp+0x08]; push eax; lea ecx, [ebp-0x00000148]; push ecx; call [0x1001F178] 
0x10013062  # push 0x00000002; mov eax, [ebp+0x0C]; push eax; lea ecx, [ebp-0x00000130]; push ecx; call [0x1001F178] 
0x100147a7  # push 0x00000002; mov eax, [ebp+0x0C]; push eax; lea ecx, [ebp-0x00000208]; push ecx; call [0x1001F178] 
0x100143a1  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x000001E4]; push edx; call [0x1001F178] 
0x10013e3b  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x000001AC]; push edx; call [0x1001F178] 
0x10013de2  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x000001A4]; push edx; call [0x1001F178] 
0x10013ca4  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x00000198]; push edx; call [0x1001F178] 
0x100138c2  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x00000174]; push edx; call [0x1001F178] 
0x100135ad  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x00000154]; push edx; call [0x1001F178] 
0x100132d9  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x00000140]; push edx; call [0x1001F178] 
0x10012fe8  # push 0x00000002; mov ecx, [ebp+0x08]; push ecx; lea edx, [ebp-0x00000128]; push edx; call [0x1001F178] 
0x100144e9  # push 0x00000002; mov edx, [ebp+0x08]; push edx; lea eax, [ebp-0x000001F0]; push eax; call [0x1001F178] 
0x10013777  # push 0x00000002; mov edx, [ebp+0x08]; push edx; lea eax, [ebp-0x00000168]; push eax; call [0x1001F178] 
0x100136f5  # push 0x00000002; mov edx, [ebp+0x08]; push edx; lea eax, [ebp-0x00000160]; push eax; call [0x1001F178] 
0x10013148  # push 0x00000002; mov edx, [ebp+0x08]; push edx; lea eax, [ebp-0x00000138]; push eax; call [0x1001F178] 
0x10012f47  # push 0x00000002; mov edx, [ebp+0x0C]; push edx; lea eax, [ebp-0x00000120]; push eax; call [0x1001F178] 
0x10015297  # push 0x00000002; lea edx, [ebp-0x00000444]; push edx; lea eax, [ebp-0x00000474]; push eax; call [0x1001F0C8] 
0x10016635  # push 0x00000003; push 0x10029558; mov edx, [ebp+0x08]; push edx; call [0x1001F0CC] 
0x1001216d  # push 0x00000004; movsx ecx, byte [ebp-0x08]; push ecx; call [0x1001F118] 
0x100106db  # push 0x00000004; push eax; push edi; call [0x1001F0D4] 
0x10013803  # push 0x00000004; mov eax, [ebp+0x08]; movsx ecx, byte [eax]; push ecx; call [0x1001F118] 
0x100134f1  # push 0x00000004; mov ecx, [ebp+0x08]; movsx edx, byte [ecx]; push edx; call [0x1001F118] 
0x10013639  # push 0x00000004; mov edx, [ebp+0x08]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x100143c6  # push 0x00000008; mov ax, word [ebp-0x000001E4]; push eax; call [0x1001F174] 
0x10013e60  # push 0x00000008; mov ax, word [ebp-0x000001AC]; push eax; call [0x1001F174] 
0x10013e07  # push 0x00000008; mov ax, word [ebp-0x000001A4]; push eax; call [0x1001F174] 
0x10013cc9  # push 0x00000008; mov ax, word [ebp-0x00000198]; push eax; call [0x1001F174] 
0x100138e7  # push 0x00000008; mov ax, word [ebp-0x00000174]; push eax; call [0x1001F174] 
0x100135d2  # push 0x00000008; mov ax, word [ebp-0x00000154]; push eax; call [0x1001F174] 
0x100132fe  # push 0x00000008; mov ax, word [ebp-0x00000140]; push eax; call [0x1001F174] 
0x1001450e  # push 0x00000008; mov cx, word [ebp-0x000001F0]; push ecx; call [0x1001F174] 
0x10013a2f  # push 0x00000008; mov cx, word [ebp-0x00000180]; push ecx; call [0x1001F174] 
0x1001379c  # push 0x00000008; mov cx, word [ebp-0x00000168]; push ecx; call [0x1001F174] 
0x1001371a  # push 0x00000008; mov cx, word [ebp-0x00000160]; push ecx; call [0x1001F174] 
0x1001316d  # push 0x00000008; mov cx, word [ebp-0x00000138]; push ecx; call [0x1001F174] 
0x10012f6c  # push 0x00000008; mov cx, word [ebp-0x00000120]; push ecx; call [0x1001F174] 
0x10014657  # push 0x00000008; mov dx, word [ebp-0x000001FC]; push edx; call [0x1001F174] 
0x10014269  # push 0x00000008; mov dx, word [ebp-0x000001D8]; push edx; call [0x1001F174] 
0x100141e7  # push 0x00000008; mov dx, word [ebp-0x000001D0]; push edx; call [0x1001F174] 
0x100140aa  # push 0x00000008; mov dx, word [ebp-0x000001C4]; push edx; call [0x1001F174] 
0x10014028  # push 0x00000008; mov dx, word [ebp-0x000001BC]; push edx; call [0x1001F174] 
0x10013fa6  # push 0x00000008; mov dx, word [ebp-0x000001B4]; push edx; call [0x1001F174] 
0x10013b7e  # push 0x00000008; mov dx, word [ebp-0x0000018C]; push edx; call [0x1001F174] 
0x1001348b  # push 0x00000008; mov dx, word [ebp-0x00000148]; push edx; call [0x1001F174] 
0x10013087  # push 0x00000008; mov dx, word [ebp-0x00000130]; push edx; call [0x1001F174] 
0x100147cc  # push 0x00000008; mov dx, word [ebp-0x00000208]; push edx; call [0x1001F174] 
0x10015863  # push 0x00000008; push 0x10028F4C; lea edx, [ebp-0x20]; push edx; call [0x1001F0CC] 
0x10018f4f  # push 0x00000008; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x10016749  # push 0x0000000B; call [0x1001F078]; push eax; call [0x1001F018] 
0x10016749  # push 0x0000000B; call [0x1001F078] 
0x10015ce2  # push 0x00000010; call [0x1001F0F0] 
0x100157c3  # push 0x00000014; call [0x1001F0F0] 
0x10018f05  # push 0x00000020; mov edx, [ebp-0x04]; movsx eax, byte [edx]; push eax; call [0x1001F118] 
0x1001256d  # push 0x00000020; call [0x1001F0F0] 
0x10013e91  # push 0x00000028; mov eax, [ebp-0x00000114]; push eax; call [0x1001F018] 
0x10013eff  # push 0x00000029; mov edx, [ebp-0x00000114]; push edx; call [0x1001F018] 
0x1001574b  # push 0x0000002E; mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x10015657  # push 0x0000002E; mov ecx, [ebp+0x0C]; push ecx; call [0x1001F090] 
0x100151a8  # push 0x0000002F; mov edx, [ebp+0x08]; push edx; call [0x1001F090] 
0x10014d96  # push 0x00000054; call [0x1001F0F0] 
0x100151bb  # push 0x0000005C; mov eax, [ebp+0x08]; push eax; call [0x1001F090] 
0x10015645  # push 0x0000005F; mov eax, [ebp+0x0C]; push eax; call [0x1001F090] 
0x10010224  # push 0x0000007D; push eax; lea eax, [esp+0x14]; push eax; call [0x1001F0C8] 
0x10016abd  # imul eax, [ecx], 0x10; jmp [0x10016B38+edx*4] 
0x100123b7  # imul ecx, [edi], 0xBE; push ebp; hlt; push edx; call [0x1001F158] 
0x100114b1  # imul ecx, [edx-0x39740001], 0x5E; ret 
0x1001943b  # imul ecx, [ebx+0x118B0C4D], 0x83; retn 0x3B01 
0x100128d7  # imul eax, eax, 0x03; add eax, 0x01; mov [ebp-0x08], eax; mov ecx, [ebp-0x08]; push ecx; call [0x1001F0F0] 
0x10015ef8  # imul eax, eax, 0x18; add ecx, eax; push ecx; call [0x1001F0F0] 
0x10016018  # imul ecx, ecx, 0x0C; mov [ebp-0x08], ecx; mov edx, [ebp-0x08]; push edx; call [0x1001F0F0] 
0x100158b6  # imul edx, edx, 0x24; push edx; call [0x1001F0F0] 
0x1001befe  # imul edi, esp, 0xFF; dec [ebx-0x1A740BBB]; pop ebp; ret 
0x1001e44e  # insb; int1; add [eax], edx; jmp [0x1001F170] 
0x100149a9  # outsb; add [eax], eax; add byte [edi], cl; xchg eax, esp; retn 0x5589 
0x10016c3e  # outsb; add [eax], edx; jmp [0x10016E2E+edx*4] 
0x1c0106b8  # add byte [eax], al; add byte [eax], al; mov ecx, [ebp-0x04]; push ecx; call [0x1C01A15C] 
0x1c0104dd  # add byte [eax], al; add byte [ebx+0x458B0CC4], al; clc; mov esp, ebp; pop ebp; ret 
0x1c010280  # add byte [eax], al; add byte [ebx+0x0120340D], cl; sbb al, 0xC1; loope 0x1C01028E; push ecx; call [0x1C01A168] 
0x1c010327  # add byte [eax], al; add esp, 0x04; add eax, 0x01; push eax; call [0x1C01A168] 
0x1c010e80  # add byte [eax], al; add esp, 0x0C; mov eax, [ebp-0x1C]; push eax; call [0x1C01A15C] 
0x1c0104de  # add byte [eax], al; add esp, 0x0C; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x1c010281  # add byte [eax], al; mov ecx, [0x1C012034]; shl ecx, 0x02; push ecx; call [0x1C01A168] 
0x1c0106ba  # add byte [eax], al; mov ecx, [ebp-0x04]; push ecx; call [0x1C01A15C] 
0x1c011264  # add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x1c010edd  # add byte [edx+0x0A], ch; lea edx, [ebp-0x04]; push edx; mov eax, [ebp+0x10]; push eax; call [0x1C01A1D0] 
0x1c01134f  # add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1C01A138]; push 0x00000001; pop eax; retn 0x000C 
0x1c01134f  # add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1C01A138] 
0x1c010661  # add byte [ebp+0x22], dh; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1C01A15C] 
0x1c010276  # add byte [ebp+0x24], dh; mov [0x1C012034], 0x0000000A; mov ecx, [0x1C012034]; shl ecx, 0x02; push ecx; call [0x1C01A168] 
0x1c010618  # add byte [ebx-0x077CF33C], al; push [ebp+0x21]; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1C01A15C] 
0x1c010597  # add byte [ebx-0x077CF33C], al; push [ebp+0x21]; mov edx, [ebp+0x0C]; mov eax, [edx+0x10]; push eax; call [0x1C01A15C] 
0x1c010e81  # add byte [ebx+0x458B0CC4], al; in al, 0x50; call [0x1C01A15C] 
0x1c0104df  # add byte [ebx+0x458B0CC4], al; clc; mov esp, ebp; pop ebp; ret 
0x1c010282  # add byte [ebx+0x0120340D], cl; sbb al, 0xC1; loope 0x1C01028E; push ecx; call [0x1C01A168] 
0x1c0111b1  # add byte [ebx-0x003CA21B], cl; and eax, 0x1C01A210; jmp [0x1C01A20C] 
0x1c01030f  # add bl, ch; fisubr [edx+0x10]; call [0x1C01A168] 
0x1c010e7f  # add [eax], eax; add byte [ebx+0x458B0CC4], al; in al, 0x50; call [0x1C01A15C] 
0x1c0111b0  # add [eax], eax; mov esp, ebp; pop ebp; ret 
0x1c011262  # add [eax+eax], ebx; pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x1c01134d  # add [eax+eax], ebx; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c0102d3  # add [eax+edx*2], ebx; call [0x1C01A1A0] 
0x1c0111e7  # add [0x0080683F+esi*2], ebx; add byte [eax], al; call [0x1C01A168] 
0x1c01125c  # add [ebx+eax*4], ebx; and eax, 0x1C012048; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x1c0112f2  # add [0x570874C0+eax*4], ebx; push esi; push ebx; call eax 
0x1c011296  # add [0x570974C0+eax*4], ebx; push esi; push ebx; call eax 
0x1c010224  # add [ebx+ecx*4], ebx; or al, 0x90; mov edx, [ecx]; push edx; call [0x1C01A15C] 
0x1c01023c  # add [ebx+ecx*4], ebx; adc al, 0x81; push edx; call [0x1C01A15C] 
0x1c010287  # add [ecx+eax*8], ebx; loope 0x1C01028E; push ecx; call [0x1C01A168] 
0x1c0102ca  # add [ecx+eax*8], ebx; loop 0x1C0102D1; push edx; mov eax, [0x1C012030]; push eax; call [0x1C01A1A0] 
0x1c01132c  # add [esp+ecx*8+0x00], ebx; int3; jmp [0x1C01A1AC] 
0x1c011380  # add [edi+edi*8], ebx; and eax, 0x1C01A200; jmp [0x1C01A204] 
0x1c011386  # add [edi+edi*8], ebx; and eax, 0x1C01A204; jmp [0x1C01A1F8] 
0x1c011314  # add [edi+edi*8], ebx; and eax, 0x1C01A170; jmp [0x1C01A174] 
0x1c01131a  # add [edi+edi*8], ebx; and eax, 0x1C01A174; jmp [0x1C01A178] 
0x1c011326  # add [edi+edi*8], ebx; and eax, 0x1C01A17C; int3; int3; jmp [0x1C01A1AC] 
0x1c01130e  # add [edi+edi*8], ebx; and eax, 0x1C01A190; jmp [0x1C01A170] 
0x1c011334  # add [edi+edi*8], ebx; and eax, 0x1C01A1CC; jmp [0x1C01A1D4] 
0x1c01137a  # add [edi+edi*8], ebx; and eax, 0x1C01A1E4; jmp [0x1C01A200] 
0x1c011374  # add [edi+edi*8], ebx; and eax, 0x1C01A1E8; jmp [0x1C01A1E4] 
0x1c010f9e  # add [eax-0x75], edx; dec ebp; hlt; push ecx; call [0x1C01A1A0] 
0x1c010f3d  # add [edx-0x75], edx; inc ebp; hlt; push eax; call [0x1C01A1A0] 
0x1c011346  # add [ebp+0x13], esi; cmp [0x1C01204C], 0x00000000; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c0111a6  # add [ecx-0x2D14F3BB], ecx; mov ecx, [ebp-0x04]; mov byte [ecx], 0x00; mov esp, ebp; pop ebp; ret 
0x1c0111e0  # add [ebx+0x400D8909], ecx; and byte [ecx], al; sbb al, 0x75; aas; push 0x00000080; call [0x1C01A168] 
0x1c0102ce  # add dl, byte [edx-0x5F]; xor byte [eax], ah; add [eax+edx*2], ebx; call [0x1C01A1A0] 
0x1c01052b  # add ecx, eax; push ecx; call [0x1C01A168] 
0x1c0110bb  # add al, 0x51; call [0x1C01A168] 
0x1c01032b  # add al, 0x83; rol byte [ecx], 0x50; call [0x1C01A168] 
0x1c011355  # add al, 0xFF; adc eax, 0x1C01A138; push 0x00000001; pop eax; retn 0x000C 
0x1c010f9d  # push es; add [eax-0x75], edx; dec ebp; hlt; push ecx; call [0x1C01A1A0] 
0x1c010f3c  # push es; add [edx-0x75], edx; inc ebp; hlt; push eax; call [0x1C01A1A0] 
0x1c01124a  # pop es; call ecx 
0x1c011345  # or byte [ecx], al; jne 0x1C01135C; cmp [0x1C01204C], 0x00000000; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c0112f7  # or byte [edi+0x56], dl; push ebx; call eax 
0x1c01129b  # or [edi+0x56], edx; push ebx; call eax 
0x1c0111e2  # or [ecx+0x0120400D], ecx; sbb al, 0x75; aas; push 0x00000080; call [0x1C01A168] 
0x1c01027f  # or al, byte [eax]; add byte [eax], al; mov ecx, [0x1C012034]; shl ecx, 0x02; push ecx; call [0x1C01A168] 
0x1c011308  # or al, 0x00; jmp [0x1C01A154] 
0x1c011302  # or al, 0x5F; pop esi; pop ebx; pop ebp; retn 0x000C 
0x1c01064a  # or al, 0x89; dec ebp; clc; mov edx, [ebp-0x08]; push edx; call [0x1C01A168] 
0x1c010e84  # or al, 0x8B; inc ebp; in al, 0x50; call [0x1C01A15C] 
0x1c0104e2  # or al, 0x8B; inc ebp; clc; mov esp, ebp; pop ebp; ret 
0x1c010227  # or al, 0x90; mov edx, [ecx]; push edx; call [0x1C01A15C] 
0x1c010388  # or al, 0x90; mov eax, 0x00000001; mov esp, ebp; pop ebp; ret 
0x1c0111a9  # or al, 0xEB; ror byte [ebx+0x01C6FC4D], cl; add byte [ebx-0x003CA21B], cl; and eax, 0x1C01A210; jmp [0x1C01A20C] 
0x1c010239  # or eax, 0x1C012030; mov edx, [ecx+eax*4]; push edx; call [0x1C01A15C] 
0x1c010284  # or eax, 0x1C012034; shl ecx, 0x02; push ecx; call [0x1C01A168] 
0x1c0111e4  # or eax, 0x1C012040; jne 0x1C01122A; push 0x00000080; call [0x1C01A168] 
0x1c011246  # push cs; test ecx, ecx; je 0x1C011252; call ecx 
0x1c010326  # sldt word [eax]; add esp, 0x04; add eax, 0x01; push eax; call [0x1C01A168] 
0x1c010fd2  # je 0x1C010EDE; mov eax, [ebp-0x0C]; pop esi; mov esp, ebp; pop ebp; ret 
0x1c010ec6  # adc byte [ecx+0x016AFC45], cl; call [0x1C01A168] 
0x1c011244  # adc cl, byte [ebx+0x74C9850E]; pop es; call ecx 
0x1c011348  # adc eax, [ebx+0x01204C3D]; sbb al, 0x00; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c010ec2  # adc al, 0x56; mov eax, [ebp+0x10]; mov [ebp-0x04], eax; push 0x00000001; call [0x1C01A168] 
0x1c01023f  # adc al, 0x81; push edx; call [0x1C01A15C] 
0x1c0102c7  # adc eax, 0x1C012034; shl edx, 0x02; push edx; mov eax, [0x1C012030]; push eax; call [0x1C01A1A0] 
0x1c011357  # adc eax, 0x1C01A138; push 0x00000001; pop eax; retn 0x000C 
0x1c011263  # sbb al, 0x00; pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x1c01134e  # sbb al, 0x00; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c0102d4  # sbb al, 0x50; call [0x1C01A1A0] 
0x1c0111e8  # sbb al, 0x75; aas; push 0x00000080; call [0x1C01A168] 
0x1c01125d  # sbb al, 0x83; and eax, 0x1C012048; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x1c0112f3  # sbb al, 0x85; sal byte [eax+ecx+0x57], 0x56; push ebx; call eax 
0x1c011297  # sbb al, 0x85; sal byte [ecx+ecx+0x57], 0x56; push ebx; call eax 
0x1c010225  # sbb al, 0x8B; or al, 0x90; mov edx, [ecx]; push edx; call [0x1C01A15C] 
0x1c01023d  # sbb al, 0x8B; adc al, 0x81; push edx; call [0x1C01A15C] 
0x1c010288  # sbb al, 0xC1; loope 0x1C01028E; push ecx; call [0x1C01A168] 
0x1c0102cb  # sbb al, 0xC1; loop 0x1C0102D1; push edx; mov eax, [0x1C012030]; push eax; call [0x1C01A1A0] 
0x1c01132d  # sbb al, 0xCC; int3; jmp [0x1C01A1AC] 
0x1c011381  # sbb al, 0xFF; and eax, 0x1C01A200; jmp [0x1C01A204] 
0x1c011387  # sbb al, 0xFF; and eax, 0x1C01A204; jmp [0x1C01A1F8] 
0x1c011315  # sbb al, 0xFF; and eax, 0x1C01A170; jmp [0x1C01A174] 
0x1c01131b  # sbb al, 0xFF; and eax, 0x1C01A174; jmp [0x1C01A178] 
0x1c011321  # sbb al, 0xFF; and eax, 0x1C01A178; jmp [0x1C01A17C] 
0x1c011327  # sbb al, 0xFF; and eax, 0x1C01A17C; int3; int3; jmp [0x1C01A1AC] 
0x1c01130f  # sbb al, 0xFF; and eax, 0x1C01A190; jmp [0x1C01A170] 
0x1c011335  # sbb al, 0xFF; and eax, 0x1C01A1CC; jmp [0x1C01A1D4] 
0x1c01137b  # sbb al, 0xFF; and eax, 0x1C01A1E4; jmp [0x1C01A200] 
0x1c011375  # sbb al, 0xFF; and eax, 0x1C01A1E8; jmp [0x1C01A1E4] 
0x1c0107c0  # and byte [eax], al; add byte [eax], al; add byte [eax+0x00000001], bh; mov esp, ebp; pop ebp; ret 
0x1c01134c  # and byte [ecx], al; sbb al, 0x00; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c0102d2  # and byte [ecx], al; sbb al, 0x50; call [0x1C01A1A0] 
0x1c0111e6  # and byte [ecx], al; sbb al, 0x75; aas; push 0x00000080; call [0x1C01A168] 
0x1c0112f1  # and byte [ecx], al; sbb al, 0x85; sal byte [eax+ecx+0x57], 0x56; push ebx; call eax 
0x1c011295  # and byte [ecx], al; sbb al, 0x85; sal byte [ecx+ecx+0x57], 0x56; push ebx; call eax 
0x1c010223  # and byte [ecx], al; sbb al, 0x8B; or al, 0x90; mov edx, [ecx]; push edx; call [0x1C01A15C] 
0x1c01023b  # and byte [ecx], al; sbb al, 0x8B; adc al, 0x81; push edx; call [0x1C01A15C] 
0x1c010286  # and byte [ecx], al; sbb al, 0xC1; loope 0x1C01028E; push ecx; call [0x1C01A168] 
0x1c011354  # and al, 0x04; call [0x1C01A138]; push 0x00000001; pop eax; retn 0x000C 
0x1c011354  # and al, 0x04; call [0x1C01A138] 
0x1c011344  # and al, 0x08; add [ebp+0x13], esi; cmp [0x1C01204C], 0x00000000; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c011383  # and eax, 0x1C01A200; jmp [0x1C01A204] 
0x1c011389  # and eax, 0x1C01A204; jmp [0x1C01A1F8] 
0x1c0111b7  # and eax, 0x1C01A210; jmp [0x1C01A20C] 
0x1c01125f  # and eax, 0x1C012048; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x1c011317  # and eax, 0x1C01A170; jmp [0x1C01A174] 
0x1c01131d  # and eax, 0x1C01A174; jmp [0x1C01A178] 
0x1c011323  # and eax, 0x1C01A178; jmp [0x1C01A17C] 
0x1c011329  # and eax, 0x1C01A17C; int3; int3; jmp [0x1C01A1AC] 
0x1c011311  # and eax, 0x1C01A190; jmp [0x1C01A170] 
0x1c011331  # and eax, 0x1C01A1AC; jmp [0x1C01A1CC] 
0x1c011337  # and eax, 0x1C01A1CC; jmp [0x1C01A1D4] 
0x1c01137d  # and eax, 0x1C01A1E4; jmp [0x1C01A200] 
0x1c011377  # and eax, 0x1C01A1E8; jmp [0x1C01A1E4] 
0x1c011371  # and eax, 0x1C01A1EC; jmp [0x1C01A1E8] 
0x1c010fd1  # je 0x1C010EDE; mov eax, [ebp-0x0C]; pop esi; mov esp, ebp; pop ebp; ret 
0x1c0106a1  # mov ecx, [ebp+0x0C]; mov edx, [ecx+0x10]; push edx; call [0x1C01A15C] 
0x1c0102d1  # xor byte [eax], ah; add [eax+edx*2], ebx; call [0x1C01A1A0] 
0x1c010222  # xor byte [eax], ah; add [ebx+ecx*4], ebx; or al, 0x90; mov edx, [ecx]; push edx; call [0x1C01A15C] 
0x1c01023a  # xor byte [eax], ah; add [ebx+ecx*4], ebx; adc al, 0x81; push edx; call [0x1C01A15C] 
0x1c010285  # xor al, 0x20; add [ecx+eax*8], ebx; loope 0x1C01028E; push ecx; call [0x1C01A168] 
0x1c011358  # cmp byte [ecx+0x016A1C01], ah; pop eax; retn 0x000C 
0x1c0105de  # cmp eax, [ecx+0x18]; je 0x1C010604; mov edx, [ebp+0x0C]; mov eax, [edx+0x10]; push eax; call [0x1C01A15C] 
0x1c01069d  # cmp eax, [ebp-0x08]; je 0x1C0106D0; mov ecx, [ebp+0x0C]; mov edx, [ecx+0x10]; push edx; call [0x1C01A15C] 
0x1c011241  # cmp esi, eax; jc 0x1C011257; mov ecx, [esi]; test ecx, ecx; je 0x1C011252; call ecx 
0x1c01134a  # cmp eax, 0x1C01204C; add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x1C01A138] 
0x1c0111ea  # aas; push 0x00000080; call [0x1C01A168] 
0x1c0111e5  # inc eax; and byte [ecx], al; sbb al, 0x75; aas; push 0x00000080; call [0x1C01A168] 
0x1c011301  # inc ebp; or al, 0x5F; pop esi; pop ebx; pop ebp; retn 0x000C 
0x1c0111a8  # inc ebp; or al, 0xEB; ror byte [ebx+0x01C6FC4D], cl; add byte [ebx-0x003CA21B], cl; and eax, 0x1C01A210; jmp [0x1C01A20C] 
0x1c010ec5  # inc ebp; adc byte [ecx+0x016AFC45], cl; call [0x1C01A168] 
0x1c010e86  # inc ebp; in al, 0x50; call [0x1C01A15C] 
0x1c010236  # inc ebp; in al, dx; mov ecx, [0x1C012030]; mov edx, [ecx+eax*4]; push edx; call [0x1C01A15C] 
0x1c010f40  # inc ebp; hlt; push eax; call [0x1C01A1A0] 
0x1c010fd9  # inc ebp; hlt; pop esi; mov esp, ebp; pop ebp; ret 
0x1c011035  # inc ebp; clc; push eax; call [0x1C01A1F0] 
0x1c010ec8  # inc ebp; cld; push 0x00000001; call [0x1C01A168] 
0x1c01111f  # dec eax; add al, 0x51; mov edx, [ebp+0x08]; mov eax, [edx]; push eax; call [0x1C01A1A0] 
0x1c0110ba  # dec eax; add al, 0x51; call [0x1C01A168] 
0x1c01134b  # dec esp; and byte [ecx], al; sbb al, 0x00; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c0112f0  # dec esp; and byte [ecx], al; sbb al, 0x85; sal byte [eax+ecx+0x57], 0x56; push ebx; call eax 
0x1c011294  # dec esp; and byte [ecx], al; sbb al, 0x85; sal byte [ecx+ecx+0x57], 0x56; push ebx; call eax 
0x1c01014a  # dec ebp; clc; mov eax, [ebp-0x08]; mov esp, ebp; pop ebp; ret 
0x1c0111ad  # dec ebp; cld; mov byte [ecx], 0x00; mov esp, ebp; pop ebp; ret 
0x1c010ee7  # push eax; call [0x1C01A1D0] 
0x1c011121  # push ecx; mov edx, [ebp+0x08]; mov eax, [edx]; push eax; call [0x1C01A1A0] 
0x1c010ee3  # push edx; mov eax, [ebp+0x10]; push eax; call [0x1C01A1D0] 
0x1c010f3e  # push edx; mov eax, [ebp-0x0C]; push eax; call [0x1C01A1A0] 
0x1c0102cf  # push edx; mov eax, [0x1C012030]; push eax; call [0x1C01A1A0] 
0x1c01129e  # push ebx; call eax 
0x1c0106e1  # push ebp; in al, 0x83; retn 0x8901 
0x1c010ee1  # push ebp; cld; push edx; mov eax, [ebp+0x10]; push eax; call [0x1C01A1D0] 
0x1c01129d  # push esi; push ebx; call eax 
0x1c010ec3  # push esi; mov eax, [ebp+0x10]; mov [ebp-0x04], eax; push 0x00000001; call [0x1C01A168] 
0x1c01129c  # push edi; push esi; push ebx; call eax 
0x1c011265  # pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x1c011305  # pop ebx; pop ebp; retn 0x000C 
0x1c011304  # pop esi; pop ebx; pop ebp; retn 0x000C 
0x1c011266  # pop esi; push 0x00000001; pop eax; retn 0x000C 
0x1c011303  # pop edi; pop esi; pop ebx; pop ebp; retn 0x000C 
0x1c0111eb  # push 0x00000080; call [0x1C01A168] 
0x1c011267  # push 0x00000001; pop eax; retn 0x000C 
0x1c010eca  # push 0x00000001; call [0x1C01A168] 
0x1c010ede  # push 0x0000000A; lea edx, [ebp-0x04]; push edx; mov eax, [ebp+0x10]; push eax; call [0x1C01A1D0] 
0x1c010312  # push 0x00000010; call [0x1C01A168] 
0x1c010528  # imul eax, eax, 0x18; add ecx, eax; push ecx; call [0x1C01A168] 
0x1c010648  # imul ecx, ecx, 0x0C; mov [ebp-0x08], ecx; mov edx, [ebp-0x08]; push edx; call [0x1C01A168] 
0x1c011318  # jo 0x1C0112BB; add [edi+edi*8], ebx; and eax, 0x1C01A174; jmp [0x1C01A178] 
0x1c011243  # jc 0x1C011257; mov ecx, [esi]; test ecx, ecx; je 0x1C011252; call ecx 
0x1c011249  # je 0x1C011252; call ecx 
0x1c0112f6  # je 0x1C011300; push edi; push esi; push ebx; call eax 
0x1c01129a  # je 0x1C0112A5; push edi; push esi; push ebx; call eax 
0x1c0105e1  # je 0x1C010604; mov edx, [ebp+0x0C]; mov eax, [edx+0x10]; push eax; call [0x1C01A15C] 
0x1c011353  # je 0x1C011379; add al, 0xFF; adc eax, 0x1C01A138; push 0x00000001; pop eax; retn 0x000C 
0x1c0106a0  # je 0x1C0106D0; mov ecx, [ebp+0x0C]; mov edx, [ecx+0x10]; push edx; call [0x1C01A15C] 
0x1c01131e  # je 0x1C0112C1; add [edi+edi*8], ebx; and eax, 0x1C01A178; jmp [0x1C01A17C] 
0x1c011350  # jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138]; push 0x00000001; pop eax; retn 0x000C 
0x1c011350  # jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c011347  # jne 0x1C01135C; cmp [0x1C01204C], 0x00000000; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c01061f  # jne 0x1C010642; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1C01A15C] 
0x1c01059e  # jne 0x1C0105C1; mov edx, [ebp+0x0C]; mov eax, [edx+0x10]; push eax; call [0x1C01A15C] 
0x1c010662  # jne 0x1C010686; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1C01A15C] 
0x1c010277  # jne 0x1C01029D; mov [0x1C012034], 0x0000000A; mov ecx, [0x1C012034]; shl ecx, 0x02; push ecx; call [0x1C01A168] 
0x1c0111e9  # jne 0x1C01122A; push 0x00000080; call [0x1C01A168] 
0x1c011324  # js 0x1C0112C7; add [edi+edi*8], ebx; and eax, 0x1C01A17C; int3; int3; jmp [0x1C01A1AC] 
0x1c01132a  # jl 0x1C0112CD; add [esp+ecx*8+0x00], ebx; int3; jmp [0x1C01A1AC] 
0x1c01065f  # jnl 0x1C01065D; add byte [ebp+0x22], dh; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1C01A15C] 
0x1c01125e  # and [0x1C012048], 0x00000000; pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x1c011349  # cmp [0x1C01204C], 0x00000000; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c011342  # cmp [esp+0x08], 0x01; jne 0x1C01135C; cmp [0x1C01204C], 0x00000000; jne 0x1C01135C; push [esp+0x04]; call [0x1C01A138] 
0x1c01065e  # cmp [ebp-0x04], 0x00000000; jne 0x1C010686; mov eax, [ebp+0x0C]; mov ecx, [eax+0x10]; push ecx; call [0x1C01A15C] 
0x1c01032c  # add eax, 0x01; push eax; call [0x1C01A168] 
0x1c010329  # add esp, 0x04; add eax, 0x01; push eax; call [0x1C01A168] 
0x1c0106af  # add esp, 0x04; mov eax, [ebp+0x0C]; mov [eax+0x10], 0x00000000; mov ecx, [ebp-0x04]; push ecx; call [0x1C01A15C] 
0x1c010232  # add esp, 0x04; mov eax, [ebp-0x14]; mov ecx, [0x1C012030]; mov edx, [ecx+eax*4]; push edx; call [0x1C01A15C] 
0x10011ef9  # add byte [eax], al; add byte [eax], al; pop ebx; add esp, 0x00001128; ret 
0x10011fe4  # add byte [eax], al; add byte [eax], al; push 0x00000002; push esi; call [0x1001313C] 
0x10010e5e  # add byte [eax], al; add byte [eax], al; call [0x1001305C] 
0x100107af  # add byte [eax], al; add byte [esi-0x007F], bl; les eax, [eax+edx]; add byte [eax], al; ret 
0x10010389  # add byte [eax], al; add byte [esi-0x3D], bl; push esi; call [0x10013034] 
0x100114ce  # add byte [eax], al; add byte [edi+0x5E], bl; pop ebx; mov esp, ebp; pop ebp; retn 0x0004 
0x10011fe5  # add byte [eax], al; add byte [edx+0x02], ch; push esi; call [0x1001313C]; push esi; call [0x10013138] 
0x10011fe5  # add byte [eax], al; add byte [edx+0x02], ch; push esi; call [0x1001313C] 
0x10011794  # add byte [eax], al; add byte [ebx-0x077CF33C], al; add [ebp+0x56], esi; lea ecx, [esi-0x08]; push ecx; call [0x100130B4] 
0x10011ae9  # add byte [eax], al; add byte [ebx-0x5B0CFC1F], al; pop esi; pop edi; add esp, 0x00000104; ret 
0x100110fb  # add byte [eax], al; add byte [ebp-0x0004337B], cl; call [eax-0x73] 
0x100117d6  # add byte [eax], al; push eax; call [0x100130AC] 
0x100108ca  # add byte [eax], al; push ecx; push edx; push eax; call [0x10013120] 
0x1001057b  # add byte [eax], al; push ecx; push edx; call [0x100130E0] 
0x10011659  # add byte [eax], al; push ecx; call [0x100130AC] 
0x10011ba9  # add byte [eax], al; push edx; call [0x10013004]; test eax, eax; jne 0x10011BC2; call [0x10013070] 
0x10011ba9  # add byte [eax], al; push edx; call [0x10013004] 
0x10011bfc  # add byte [eax], al; push edx; call [0x1001300C]; test eax, eax; jne 0x10011C15; call [0x10013070] 
0x10011bfc  # add byte [eax], al; push edx; call [0x1001300C] 
0x1001187a  # add byte [eax], al; push edx; call [0x100130AC] 
0x10010654  # add byte [eax], al; push ebx; push esi; push edi; call [0x10013070] 
0x10011f11  # add byte [eax], al; push esi; call [0x1001315C]; push 0x7F000001; mov word [esp+0x24], 0x0002; call [0x10013128] 
0x10011f11  # add byte [eax], al; push esi; call [0x1001315C] 
0x1001195b  # add byte [eax], al; push esi; call [0x1001308C] 
0x10011f6c  # add byte [eax], al; push edi; push eax; push esi; call [0x10013158] 
0x10011984  # add byte [eax], al; push edi; push 0x1001F6D4; call [0x100130A8] 
0x10011335  # add byte [eax], al; push edi; call [0x1001308C] 
0x100106ab  # add byte [eax], al; pop ebx; add esp, 0x00000800; ret 
0x10011efb  # add byte [eax], al; pop ebx; add esp, 0x00001128; ret 
0x10011922  # add byte [eax], al; pop esi; add esp, 0x00000100; ret 
0x100107b0  # add byte [eax], al; pop esi; add esp, 0x00001004; ret 
0x1001034e  # add byte [eax], al; pop esi; ret 
0x10011fe6  # add byte [eax], al; push 0x00000002; push esi; call [0x1001313C]; push esi; call [0x10013138] 
0x10011fe6  # add byte [eax], al; push 0x00000002; push esi; call [0x1001313C] 
0x10011c46  # add byte [eax], al; add esp, 0x0C; ret 
0x10011a1f  # add byte [eax], al; add esp, 0x18; lea edx, [esp+0x00]; push esi; push edx; call [0x100130BC] 
0x10010194  # add byte [eax], al; add esp, 0x20; push edi; call [0x10013030] 
0x1001014a  # add byte [eax], al; add esp, 0x20; mov eax, esi; pop edi; pop esi; retn 0x000C 
0x10011a5e  # add byte [eax], al; add esp, 0x2C; mov eax, esi; pop esi; add esp, 0x00000104; ret 
0x10011f2f  # add byte [eax], al; mov [esp+0x28], eax; call [0x1001312C] 
0x10010108  # add byte [eax], al; mov eax, [esp+0x34]; add esp, 0x28; push edi; push eax; call [0x1001302C] 
0x100114a4  # add byte [eax], al; mov edx, [edi+0x04]; push edx; call [ebp-0x1C] 
0x10011570  # add byte [eax], al; mov ebx, eax; call esi 
0x100119eb  # add byte [eax], al; lea eax, [esp+0x04]; push 0x1001F650; push eax; call [0x100130FC] 
0x100115fd  # add byte [eax], al; lea ebx, [edi+0x0C]; push ebx; call [0x100130B0] 
0x10010349  # add byte [eax], al; mov eax, 0x00000001; pop esi; ret 
0x10011b79  # add byte [eax], al; lock push 0x00000001; push 0x00000000; push 0x00000000; push eax; call [0x10013000] 
0x10010365  # add byte [eax], al; call [0x10013038]; test eax, eax; jne 0x1001037F; call edi 
0x10010365  # add byte [eax], al; call [0x10013038] 
0x100106f1  # add byte [eax], al; call [0x1001303C]; push esi; mov edi, eax; call [0x10013034] 
0x1001073c  # add byte [eax], al; call [0x10013040] 
0x10011942  # add byte [eax], al; call [0x10013058] 
0x10010e60  # add byte [eax], al; call [0x1001305C] 
0x10011fa4  # add byte [eax], al; call [0x10013160] 
0x10012302  # add byte [eax], al; call [0x100130B0] 
0x1001167f  # add byte [ecx], al; add byte [eax], al; ret 
0x10010652  # add byte [eax], cl; add byte [eax], al; push ebx; push esi; push edi; call [0x10013070] 
0x100106b0  # add byte [eax], cl; add byte [eax], al; ret 
0x1001073a  # add byte [eax], cl; add byte [eax], al; call [0x10013040] 
0x10010579  # add byte [eax], dl; add byte [eax], al; push ecx; push edx; call [0x100130E0] 
0x100104fd  # add byte [eax], dl; add byte [eax], al; ret 
0x1001056d  # add byte [eax], ah; add byte [eax], al; ret 
0x10011b85  # add byte [eax], dh; add [eax], edx; test eax, eax; jne 0x10011B99; call [0x10013070] 
0x100103f1  # add byte [ecx], dh; add [eax], edx; add esp, 0x0C; ret 
0x10011bcf  # add byte [eax+0x51], dl; push edx; call [0x10013008]; test eax, eax; jne 0x10011BE9; call [0x10013070] 
0x10011bcf  # add byte [eax+0x51], dl; push edx; call [0x10013008] 
0x100106e9  # add byte [eax+0x51], dl; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10011b81  # add byte [eax-0x01], dl; adc eax, 0x10013000; test eax, eax; jne 0x10011B99; call [0x10013070] 
0x10011c2b  # add byte [eax-0x01], dl; adc eax, 0x10013010; test eax, eax; jne 0x10011C43; call [0x10013070] 
0x10011523  # add byte [ecx+0x52], dl; push eax; push 0x00000000; call [0x10013068] 
0x100108cb  # add byte [ecx+0x52], dl; push eax; call [0x10013120] 
0x1001057c  # add byte [ecx+0x52], dl; call [0x100130E0]; add esp, 0x08; add esp, 0x00002000; ret 
0x1001057c  # add byte [ecx+0x52], dl; call [0x100130E0] 
0x10011ba0  # add byte [ecx+0x6A], dl; add byte [edx+0x00], ch; push 0x00008003; push edx; call [0x10013004] 
0x1001174b  # add byte [edx+0x50], dl; push 0x1001F4F0; lea ecx, [esp+0x1C]; push 0x000000FF; push ecx; call [0x100130AC] 
0x10010e2e  # add byte [edx+0x50], dl; lea edx, [esp+0x14]; push ecx; push edx; call [0x10013050] 
0x10010f67  # add byte [edx+0x6A], dl; push es; push ebx; push ebp; push eax; call edi 
0x10011baa  # add byte [edx-0x01], dl; adc eax, 0x10013004; test eax, eax; jne 0x10011BC2; call [0x10013070] 
0x10011bfd  # add byte [edx-0x01], dl; adc eax, 0x1001300C; test eax, eax; jne 0x10011C15; call [0x10013070] 
0x10010832  # add byte [edx-0x01], dl; adc eax, 0x10013044; add esp, 0x00001000; ret 
0x10010505  # add byte [edx-0x01], dl; adc eax, 0x100130E4; add esp, 0x04; add esp, 0x00001000; ret 
0x10010e55  # add byte [ebx+0x55], dl; push esi; push edi; mov [esp+0x14], 0x00000000; call [0x1001305C] 
0x10010655  # add byte [ebx+0x56], dl; push edi; call [0x10013070] 
0x100108c2  # add byte [esi+0x50], dl; mov eax, [esp+0x00001018]; push ecx; push edx; push eax; call [0x10013120] 
0x10011a27  # add byte [esi+0x52], dl; call [0x100130BC] 
0x10011f6d  # add byte [edi+0x50], dl; push esi; call [0x10013158] 
0x10011985  # add byte [edi+0x68], dl; aam 0xF6; add [eax], edx; call [0x100130A8] 
0x10012378  # add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x10012223  # add byte [ebx+0x5E], bl; pop edi; retn 0x0010 
0x100106ac  # add byte [ebx-0x007F], bl; les eax, [eax]; or byte [eax], al; add bl, al; push ebx; call [0x10013034] 
0x100107b1  # add byte [esi-0x007F], bl; les eax, [eax+edx]; add byte [eax], al; ret 
0x1001038b  # add byte [esi-0x3D], bl; push esi; call [0x10013034] 
0x10011ec4  # add byte [edi+0x5E], bl; pop ebx; mov [ecx], eax; mov eax, 0xFFFFFFF9; add esp, 0x00001128; ret 
0x100114d0  # add byte [edi+0x5E], bl; pop ebx; mov esp, ebp; pop ebp; retn 0x0004 
0x10011eef  # add byte [edi+0x5E], bl; mov eax, 0xFFFFFFF9; mov [edx], 0x00000000; pop ebx; add esp, 0x00001128; ret 
0x10011ba5  # add byte [eax+0x03], ch; add byte [eax], 0x00; push edx; call [0x10013004] 
0x10010361  # add byte [eax-0x17], ch; std; add byte [eax], al; call [0x10013038] 
0x10010605  # add byte [eax-0x17], ch; std; add byte [eax], al; call [0x1001303C] 
0x10011bcd  # add byte [edx+0x00], ch; push eax; push ecx; push edx; call [0x10013008] 
0x100106e7  # add byte [edx+0x00], ch; push eax; push ecx; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10011f94  # add byte [edx+0x00], ch; push eax; push 0x00000001; mov [esp+0x48], esi; mov [esp+0x44], 0x00000001; call [0x10013160] 
0x10011b7f  # add byte [edx+0x00], ch; push eax; call [0x10013000]; test eax, eax; jne 0x10011B99; call [0x10013070] 
0x10011b7f  # add byte [edx+0x00], ch; push eax; call [0x10013000] 
0x10011ba3  # add byte [edx+0x00], ch; push 0x00008003; push edx; call [0x10013004] 
0x10011fcd  # add byte [edx+0x00], ch; mov edx, [edi]; push edx; push eax; push esi; call [0x10013154] 
0x10011f64  # add byte [edx+0x00], ch; lea eax, [esp+0x00000138]; push edi; push eax; push esi; call [0x10013158] 
0x10011c27  # add byte [edx+0x01], ch; push 0x00000000; push eax; call [0x10013010] 
0x10011ed7  # add byte [edx+0x01], ch; push 0x00000002; call [0x10013168] 
0x10011fe7  # add byte [edx+0x02], ch; push esi; call [0x1001313C]; push esi; call [0x10013138] 
0x10011fe7  # add byte [edx+0x02], ch; push esi; call [0x1001313C] 
0x10012431  # add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x10013098]; push 0x00000001; pop eax; retn 0x000C 
0x10012431  # add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x10013098] 
0x10010342  # add byte [ebp+0x0D], dh; pop edi; mov word [ecx], 0x0000; mov eax, 0x00000001; pop esi; ret 
0x100105e0  # add byte [ebp+0x11], dh; push esi; mov byte [ecx], 0x00; call [0x10013034] 
0x10011796  # add byte [ebx-0x077CF33C], al; add [ebp+0x56], esi; lea ecx, [esi-0x08]; push ecx; call [0x100130B4] 
0x10010195  # add byte [ebx-0x00A8DF3C], al; adc eax, 0x10013030; mov esi, eax; test esi, esi; jne 0x100101E3; call [0x10013070] 
0x1001014b  # add byte [ebx-0x3974DF3C], al; pop edi; pop esi; retn 0x000C 
0x10011773  # add byte [ebx+0x5E5F24C4], al; pop ebx; add esp, 0x00000100; ret 
0x10011895  # add byte [ebx-0x3FCCD73C], al; pop edi; pop esi; add esp, 0x00000100; ret 
0x1001190f  # add byte [ebx+0x335F28C4], al; rcr byte [esi-0x007F], 0xC4; add byte [ecx], al; add byte [eax], al; ret 
0x100117f1  # add byte [ebx+0x5E5F28C4], al; pop ebx; add esp, 0x00000100; ret 
0x100116d9  # add byte [ebx+0x5E5F28C4], al; pop ebp; xor eax, eax; pop ebx; add esp, 0x00000100; ret 
0x10011a5f  # add byte [ebx-0x3974D33C], al; pop esi; add esp, 0x00000104; ret 
0x10011aeb  # add byte [ebx-0x5B0CFC1F], al; pop esi; pop edi; add esp, 0x00000104; ret 
0x10011fcf  # add byte [ebx+0x56505217], cl; call [0x10013154] 
0x1001074e  # add byte [ebx+0x5F082444], cl; pop esi; mov [edx], eax; xor eax, eax; add esp, 0x00001004; ret 
0x100114d9  # add byte [ebx-0x17AE13B3], cl; or eax, 0x83FFFFFF; les eax, [eax+edi*4]; add [eax], eax; add byte [eax], al; ret 
0x100119ec  # add byte [ebp+0x68042444], cl; push eax; test byte [ecx], 0x10; push eax; call [0x100130FC] 
0x10011f66  # add byte [ebp+0x01382484], cl; add byte [eax], al; push edi; push eax; push esi; call [0x10013158] 
0x100110fd  # add byte [ebp-0x0004337B], cl; call [eax-0x73] 
0x1001121c  # add byte [ebp-0x00042F73], cl; call [ecx-0x18] 
0x10010575  # add byte [ebp+0x10002494], cl; add byte [eax], al; push ecx; push edx; call [0x100130E0] 
0x1001034a  # add byte [eax+0x00000001], bh; pop esi; ret 
0x10011af8  # add bl, al; xor eax, eax; pop edi; add esp, 0x00000104; ret 
0x100106b3  # add bl, al; push ebx; call [0x10013034] 
0x1001191c  # add bl, al; pop edi; mov eax, 0x00000001; pop esi; add esp, 0x00000100; ret 
0x10011ed4  # add bl, al; push 0x00000000; push 0x00000001; push 0x00000002; call [0x10013168] 
0x10010570  # add bl, al; lea ecx, [esp+0x00]; lea edx, [esp+0x00001000]; push ecx; push edx; call [0x100130E0] 
0x1001082d  # add bl, al; lea edx, [esp+0x00]; push edx; call [0x10013044]; add esp, 0x00001000; ret 
0x1001082d  # add bl, al; lea edx, [esp+0x00]; push edx; call [0x10013044] 
0x10011060  # add bl, al; call [0x10013070] 
0x10011b7a  # add al, dh; push 0x00000001; push 0x00000000; push 0x00000000; push eax; call [0x10013000] 
0x10011f25  # add bh, bh; adc eax, 0x10013128; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x100105e6  # add bh, bh; adc eax, 0x10013034; mov eax, 0x00000001; pop esi; ret 
0x10010366  # add bh, bh; adc eax, 0x10013038; test eax, eax; jne 0x1001037F; call edi 
0x100106f2  # add bh, bh; adc eax, 0x1001303C; push esi; mov edi, eax; call [0x10013034] 
0x10011286  # add bh, bh; adc eax, 0x10013058; mov [ebp-0x00000228], eax; test ebx, ebx; je 0x100112E8; call [0x10013080] 
0x100106a9  # add [eax], eax; add byte [eax], al; pop ebx; add esp, 0x00000800; ret 
0x100107ae  # add [eax], eax; add byte [eax], al; pop esi; add esp, 0x00001004; ret 
0x1001034c  # add [eax], eax; add byte [eax], al; pop esi; ret 
0x10011c44  # add [eax], eax; add byte [eax], al; add esp, 0x0C; ret 
0x100114a2  # add [eax], eax; add byte [eax], al; mov edx, [edi+0x04]; push edx; call [ebp-0x1C] 
0x10011fa2  # add [eax], eax; add byte [eax], al; call [0x10013160] 
0x10011f6b  # add [eax], eax; add byte [edi+0x50], dl; push esi; call [0x10013158] 
0x10011983  # add [eax], eax; add byte [edi+0x68], dl; aam 0xF6; add [eax], edx; call [0x100130A8] 
0x100119ea  # add [eax], eax; add byte [ebp+0x68042444], cl; push eax; test byte [ecx], 0x10; push eax; call [0x100130FC] 
0x10010348  # add [eax], eax; add byte [eax+0x00000001], bh; pop esi; ret 
0x10011af6  # add [eax], eax; add bl, al; xor eax, eax; pop edi; add esp, 0x00000104; ret 
0x100105e5  # add [eax], eax; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x100105e5  # add [eax], eax; call [0x10013034] 
0x10010628  # add [eax], edx; xor eax, eax; pop esi; ret 
0x10011b91  # add [eax], edx; xor eax, eax; add esp, 0x0C; ret 
0x1001193b  # add [eax], edx; push eax; push edi; push 0x00000410; call [0x10013058] 
0x100119f4  # add [eax], edx; push eax; call [0x100130FC] 
0x100106f7  # add [eax], edx; push esi; mov edi, eax; call [0x10013034] 
0x10011fef  # add [eax], edx; push esi; call [0x10013138] 
0x10011566  # add [eax], edx; push edi; push 0x0000000C; call esi 
0x10010378  # add [eax], edx; pop edi; xor eax, eax; pop esi; ret 
0x10010384  # add [eax], edx; pop edi; mov eax, 0x00000001; pop esi; ret 
0x10011f18  # add [eax], edx; push 0x7F000001; mov word [esp+0x24], 0x0002; call [0x10013128] 
0x10011f2a  # add [eax], edx; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x10011875  # add [eax], edx; push 0x000000FF; push edx; call [0x100130AC] 
0x1001243c  # add [eax], edx; push 0x00000001; pop eax; retn 0x000C 
0x10010838  # add [eax], edx; add esp, 0x00001000; ret 
0x100105b9  # add [eax], edx; add esp, 0x04; ret 
0x10010583  # add [eax], edx; add esp, 0x08; add esp, 0x00002000; ret 
0x1001140e  # add [eax], edx; add esp, 0x0C; mov eax, 0x00000001; pop esi; ret 
0x100103f3  # add [eax], edx; add esp, 0x0C; ret 
0x100103d8  # add [eax], edx; add esp, 0x10; ret 
0x1001060f  # add [eax], edx; test eax, eax; push esi; je 0x10010624; call [0x10013034] 
0x10011b87  # add [eax], edx; test eax, eax; jne 0x10011B99; call [0x10013070] 
0x1001036b  # add [eax], edx; test eax, eax; jne 0x1001037F; call edi; push eax; call [0x10013034] 
0x1001036b  # add [eax], edx; test eax, eax; jne 0x1001037F; call edi 
0x1001128b  # add [eax], edx; mov [ebp-0x00000228], eax; test ebx, ebx; je 0x100112E8; call [0x10013080] 
0x10011055  # add [eax], edx; mov eax, [esp+0x04]; add esp, 0x00000318; ret 
0x10011962  # add [eax], edx; mov eax, [esp+0x14]; pop edi; pop esi; add esp, 0x28; ret 
0x1001154e  # add [eax], edx; mov eax, esi; pop esi; ret 
0x10010e66  # add [eax], edx; mov ebp, eax; push ebp; push 0x00000001; push 0x001F0FFF; call [0x10013058] 
0x1001019e  # add [eax], edx; mov esi, eax; test esi, esi; jne 0x100101E3; call [0x10013070] 
0x10010117  # add [eax], edx; mov esi, eax; call [0x10013070] 
0x100117cd  # add [eax], edx; lea eax, [esp+0x20]; push 0x000000FF; push eax; call [0x100130AC] 
0x10011751  # add [eax], edx; lea ecx, [esp+0x1C]; push 0x000000FF; push ecx; call [0x100130AC] 
0x100116b6  # add [eax], edx; lea ecx, [esp+0x24]; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011650  # add [eax], edx; lea ecx, [esp+0x28]; push 0x000000FF; push ecx; call [0x100130AC] 
0x100105eb  # add [eax], edx; mov eax, 0x00000001; pop esi; ret 
0x1001198a  # add [eax], edx; call [0x100130A8] 
0x10012134  # add [eax], edx; jmp [0x10013170] 
0x1001213a  # add [eax], edx; jmp [0x10013174] 
0x10012140  # add [eax], edx; jmp [0x10013178] 
0x10012146  # add [eax], edx; jmp [0x1001317C] 
0x1001214c  # add [eax], edx; jmp [0x10013180] 
0x10012152  # add [eax], edx; jmp [0x10013184] 
0x10012158  # add [eax], edx; jmp [0x10013188] 
0x1001215e  # add [eax], edx; jmp [0x1001318C] 
0x1001216a  # add [eax], edx; jmp [0x10013190] 
0x10012164  # add [eax], edx; jmp [0x10013194] 
0x10012170  # add [eax], edx; jmp [0x10013198] 
0x100114bb  # add [eax], edx; call esi; push edi; call esi 
0x100114bb  # add [eax], edx; call esi 
0x100114fa  # add [eax], edx; call edi; push esi; call edi 
0x10011bfa  # add [eax+0x00], ebp; add byte [edx-0x01], dl; adc eax, 0x1001300C; test eax, eax; jne 0x10011C15; call [0x10013070] 
0x10010e6c  # add [eax-0x01], ebp; nop [eax]; call [0x10013058] 
0x10011c29  # add [edx+0x00], ebp; push eax; call [0x10013010]; test eax, eax; jne 0x10011C43; call [0x10013070] 
0x10011c29  # add [edx+0x00], ebp; push eax; call [0x10013010] 
0x10011b7d  # add [edx+0x00], ebp; push 0x00000000; push eax; call [0x10013000] 
0x10011ed9  # add [edx+0x02], ebp; call [0x10013168] 
0x10012428  # add [ebp+0x13], esi; cmp [0x1002FDC8], 0x00000000; jne 0x1001243E; push [esp+0x04]; call [0x10013098] 
0x1001179c  # add [ebp+0x56], esi; lea ecx, [esi-0x08]; push ecx; call [0x100130B4] 
0x10011f99  # add [ecx-0x38B7DB8C], ecx; inc esp; and al, 0x44; add [eax], eax; add byte [eax], al; call [0x10013160] 
0x100122f4  # add [ebx-0x43F276F7], ecx; std; add dl, byte [eax]; jne 0x1001233E; push 0x00000080; call [0x100130B0] 
0x100122c5  # add [ebx-0x74F7741F], ecx; inc eax; add al, 0x50; ret 
0x10011ec9  # add [eax-0x00000007], edi; add esp, 0x00001128; ret 
0x1001121a  # add al, byte [eax]; add byte [ebp-0x00042F73], cl; call [ecx-0x18] 
0x10011f24  # add al, byte [eax]; call [0x10013128]; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x10011f24  # add al, byte [eax]; call [0x10013128] 
0x10012376  # add dl, byte [eax]; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x1001242f  # add dl, byte [eax]; add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x10013098] 
0x100122fb  # add dl, byte [eax]; jne 0x1001233E; push 0x00000080; call [0x100130B0] 
0x10010307  # add dl, byte [eax]; mov eax, [esp+0x08]; pop edi; pop esi; pop ecx; ret 
0x10010756  # add dh, byte [ebx]; rol byte [ecx+0x001004C4], 0x00; ret 
0x10011fe9  # add dl, byte [esi-0x01]; adc eax, 0x1001313C; push esi; call [0x10013138] 
0x10010696  # add dh, bl; movsd; mov ecx, edx; and ecx, 0x03; rep movsb; call [0x10013034] 
0x10010e53  # add eax, [eax]; add byte [ebx+0x55], dl; push esi; push edi; mov [esp+0x14], 0x00000000; call [0x1001305C] 
0x1001105e  # add eax, [eax]; add bl, al; call [0x10013070] 
0x10011ba7  # add eax, [eax-0x00AE0000]; adc eax, 0x10013004; test eax, eax; jne 0x10011BC2; call [0x10013070] 
0x10011aee  # add esi, ebx; movsb; pop esi; pop edi; add esp, 0x00000104; ret 
0x1001042f  # add esi, ebx; movsb; pop edi; pop esi; pop ebx; ret 
0x10010486  # add esi, ebx; movsb; pop edi; pop esi; ret 
0x1001069d  # add esi, ebx; movsb; call [0x10013034] 
0x10011982  # add al, 0x01; add byte [eax], al; push edi; push 0x1001F6D4; call [0x100130A8] 
0x100119e9  # add al, 0x01; add byte [eax], al; lea eax, [esp+0x04]; push 0x1001F650; push eax; call [0x100130FC] 
0x10011a68  # add al, 0x01; add byte [eax], al; ret 
0x1001075b  # add al, 0x10; add byte [eax], al; ret 
0x10011bae  # add al, 0x30; add [eax], edx; test eax, eax; jne 0x10011BC2; call [0x10013070] 
0x100103eb  # add al, 0x50; push ecx; push edx; call [0x10013100]; add esp, 0x0C; ret 
0x100103eb  # add al, 0x50; push ecx; push edx; call [0x10013100] 
0x10011b57  # add al, 0x50; push ecx; call [0x10013014]; ret 
0x10011b57  # add al, 0x50; push ecx; call [0x10013014] 
0x10010857  # add al, 0x50; push ecx; call [0x1001302C]; ret 
0x10010857  # add al, 0x50; push ecx; call [0x1001302C] 
0x1001147a  # add al, 0x50; push 0x406D1388; call [0x10013060] 
0x100122cc  # add al, 0x50; ret 
0x100105b3  # add al, 0x50; call [0x100130D8]; add esp, 0x04; ret 
0x100105b3  # add al, 0x50; call [0x100130D8] 
0x100119d0  # add al, 0x52; push 0x00000000; push 0x00000000; push 0x00008023; push 0x00000000; call [0x1001311C] 
0x100114a8  # add al, 0x52; call [ebp-0x1C] 
0x1001072e  # add al, 0x57; lea ecx, [esp+0x0C]; push eax; push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x100107ed  # add al, 0x5F; pop esi; pop ebx; ret 
0x100119f0  # add al, 0x68; push eax; test byte [ecx], 0x10; push eax; call [0x100130FC] 
0x10010713  # add al, 0x6A; call [eax-0x18] 
0x1001105a  # add al, 0x81; les ebx, [eax]; add eax, [eax]; add bl, al; call [0x10013070] 
0x100114af  # add al, 0x89; jne 0x100114AF; mov eax, [edi+0x08]; push eax; mov esi, [0x100130B4]; call esi 
0x10012103  # add al, 0x8B; inc eax; sub al, 0x85; sal byte [edi+eax+0x50], 0xFF; adc eax, 0x1001308C; ret 
0x100114e5  # add al, 0xB8; add [eax], eax; add byte [eax], al; ret 
0x100105bd  # add al, 0xC3; nop; push esi; call [0x10013070] 
0x10012437  # add al, 0xFF; adc eax, 0x10013098; push 0x00000001; pop eax; retn 0x000C 
0x10010795  # push es; xor eax, eax; pop edi; pop esi; add esp, 0x00001004; ret 
0x10010f6a  # push es; push ebx; push ebp; push eax; call edi 
0x100107ab  # push es; pop edi; mov eax, 0x00000001; pop esi; add esp, 0x00001004; ret 
0x10011fe3  # pop es; add byte [eax], al; add byte [eax], al; push 0x00000002; push esi; call [0x1001313C] 
0x1001195a  # pop es; add byte [eax], al; push esi; call [0x1001308C] 
0x1001104f  # pop es; push eax; call [0x10013054]; mov eax, [esp+0x04]; add esp, 0x00000318; ret 
0x1001104f  # pop es; push eax; call [0x10013054] 
0x10010827  # pop es; add esp, 0x00001000; ret 
0x1001144a  # pop es; mov [ebp-0x1C], eax; mov esi, [edi+0x08]; call [0x10013080] 
0x1001235e  # pop es; call ecx 
0x10010653  # or byte [eax], al; add byte [ebx+0x56], dl; push edi; call [0x10013070] 
0x10011893  # or byte [eax], al; add byte [ebx-0x3FCCD73C], al; pop edi; pop esi; add esp, 0x00000100; ret 
0x100106b1  # or byte [eax], al; add bl, al; push ebx; call [0x10013034] 
0x10012427  # or byte [ecx], al; jne 0x1001243E; cmp [0x1002FDC8], 0x00000000; jne 0x1001243E; push [esp+0x04]; call [0x10013098] 
0x1001156e  # or byte [edx], al; add byte [eax], al; mov ebx, eax; call esi 
0x10011bd5  # or byte [eax], dh; add [eax], edx; test eax, eax; jne 0x10011BE9; call [0x10013070] 
0x100114b5  # or byte [eax-0x75], dl; xor eax, 0x100130B4; call esi; push edi; call esi 
0x100114b5  # or byte [eax-0x75], dl; xor eax, 0x100130B4; call esi 
0x100104c0  # or byte [ecx+0x52], dl; push eax; call [0x100130E8]; add esp, 0x10; ret 
0x100104c0  # or byte [ecx+0x52], dl; push eax; call [0x100130E8] 
0x100103d0  # or byte [ecx+0x52], dl; push eax; call [0x100130F0]; add esp, 0x10; ret 
0x100103d0  # or byte [ecx+0x52], dl; push eax; call [0x100130F0] 
0x100114f4  # or byte [edx-0x75], dl; cmp eax, 0x100130B4; call edi; push esi; call edi 
0x100114f4  # or byte [edx-0x75], dl; cmp eax, 0x100130B4; call edi 
0x10011330  # or byte [edi-0x17], dl; mov eax, [eax]; add byte [eax], al; push edi; call [0x1001308C] 
0x10010752  # or byte [edi+0x5E], bl; mov [edx], eax; xor eax, eax; add esp, 0x00001004; ret 
0x10011503  # or byte [edx-0x01], ch; call [0x100130B8] 
0x1001153e  # or byte [ebx+0x1074FFFE], al; mov edx, [esp+0x18]; push edx; push esi; call [0x10013064] 
0x100107e9  # or byte [ebp+0x5F0475C0], al; pop esi; pop ebx; ret 
0x1001119a  # or byte [ecx-0x0006477B], cl; inc [ebp+0x681675C0]; push 0x6A1001F0; and byte [ebp-0x00066B6B], cl; call [edx-0x18] 
0x10011448  # or byte [ebx-0x1BBA76F9], cl; mov esi, [edi+0x08]; call [0x10013080] 
0x100122c9  # or byte [ebx-0x3CAFFBC0], cl; int3; jmp [0x100130C0] 
0x10011b53  # or byte [ebx+0x5004244C], cl; push ecx; call [0x10013014]; ret 
0x10011b53  # or byte [ebx+0x5004244C], cl; push ecx; call [0x10013014] 
0x10010853  # or byte [ebx+0x5004244C], cl; push ecx; call [0x1001302C]; ret 
0x10010853  # or byte [ebx+0x5004244C], cl; push ecx; call [0x1001302C] 
0x100103e7  # or byte [ebx+0x50042454], cl; push ecx; push edx; call [0x10013100]; add esp, 0x0C; ret 
0x100103e7  # or byte [ebx+0x50042454], cl; push ecx; push edx; call [0x10013100] 
0x100114f1  # or byte [ebx-0x74ADF7AA], cl; cmp eax, 0x100130B4; call edi; push esi; call edi 
0x100114f1  # or byte [ebx-0x74ADF7AA], cl; cmp eax, 0x100130B4; call edi 
0x100113b6  # or byte [ebx-0x00066F7B], cl; inc [ebp+0x500774C0]; call [0x1001308C] 
0x100104b7  # or byte [ebp+0x50102444], cl; mov eax, [esp+0x08]; push ecx; push edx; push eax; call [0x100130E8] 
0x10011396  # or bl, ch; das; mov eax, 0x00000001; ret 
0x10011771  # or [eax], eax; add byte [ebx+0x5E5F24C4], al; pop ebx; add esp, 0x00000100; ret 
0x100117ef  # or [eax], eax; add byte [ebx+0x5E5F28C4], al; pop ebx; add esp, 0x00000100; ret 
0x10010568  # or [ebx], esi; rol byte [ecx+0x002000C4], 0x00; ret 
0x100123af  # or [edi+0x56], edx; push ebx; call eax 
0x100122f6  # or [ecx+0x02FDBC0D], ecx; adc byte [ebp+0x3F], dh; push 0x00000080; call [0x100130B0] 
0x100104f7  # or al, byte [ebx-0x3B7E0038]; add byte [eax], dl; add byte [eax], al; ret 
0x1001241c  # or al, 0x00; jmp [0x100130A4] 
0x10011c01  # or al, 0x30; add [eax], edx; test eax, eax; jne 0x10011C15; call [0x10013070] 
0x1001059b  # or al, 0x50; push ecx; push edx; call [0x100130DC]; add esp, 0x0C; ret 
0x1001059b  # or al, 0x50; push ecx; push edx; call [0x100130DC] 
0x1001049b  # or al, 0x50; push ecx; push edx; call [0x100130EC]; add esp, 0x0C; ret 
0x1001049b  # or al, 0x50; push ecx; push edx; call [0x100130EC] 
0x10010733  # or al, 0x50; push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x10010880  # or al, 0x51; mov ecx, [esp+0x0C]; push edx; push eax; push ecx; call [0x10013048] 
0x10010885  # or al, 0x52; push eax; push ecx; call [0x10013048]; ret 
0x10010885  # or al, 0x52; push eax; push ecx; call [0x10013048] 
0x10011601  # or al, 0x53; call [0x100130B0] 
0x10012416  # or al, 0x5F; pop esi; pop ebx; pop ebp; retn 0x000C 
0x10011189  # or al, 0x6A; and byte [ebp-0x00066B73], cl; call [ecx-0x18] 
0x10011799  # or al, 0x83; clc; add [ebp+0x56], esi; lea ecx, [esi-0x08]; push ecx; call [0x100130B4] 
0x100104f3  # or al, 0x85; sal byte [ebp+0x0A], 0x83; enter 0x81FF, 0xC4; add byte [eax], dl; add byte [eax], al; ret 
0x10011412  # or al, 0xB8; add [eax], eax; add byte [eax], al; pop esi; ret 
0x10011c41  # or al, 0xC3; mov eax, 0x00000001; add esp, 0x0C; ret 
0x10011b8c  # or al, 0xFF; adc eax, 0x10013070; xor eax, eax; add esp, 0x0C; ret 
0x1001156a  # or al, 0xFF; salc; push 0x00000208; mov ebx, eax; call esi 
0x10011b3b  # or eax, 0x835FC01B; fdivr st0, st7; pop esi; ret 
0x10010344  # or eax, 0x01C7665F; add byte [eax], al; mov eax, 0x00000001; pop esi; ret 
0x100122f8  # or eax, 0x1002FDBC; jne 0x1001233E; push 0x00000080; call [0x100130B0] 
0x100114df  # or eax, 0x83FFFFFF; les eax, [eax+edi*4]; add [eax], eax; add byte [eax], al; ret 
0x1001235a  # push cs; test ecx, ecx; je 0x10012366; call ecx 
0x10010615  # push cs; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x10010615  # push cs; call [0x10013034] 
0x10010370  # push cs; call edi; push eax; call [0x10013034] 
0x10010370  # push cs; call edi 
0x10011284  # nop [eax]; call [0x10013058]; mov [ebp-0x00000228], eax; test ebx, ebx; je 0x100112E8; call [0x10013080] 
0x10010e6f  # nop [eax]; call [0x10013058] 
0x100108c9  # adc byte [eax], al; add byte [ecx+0x52], dl; push eax; call [0x10013120] 
0x1001057a  # adc byte [eax], al; add byte [ecx+0x52], dl; call [0x100130E0]; add esp, 0x08; add esp, 0x00002000; ret 
0x1001057a  # adc byte [eax], al; add byte [ecx+0x52], dl; call [0x100130E0] 
0x10010e2c  # adc byte [eax], al; add byte [edx+0x50], dl; lea edx, [esp+0x14]; push ecx; push edx; call [0x10013050] 
0x1001082b  # adc byte [eax], al; add bl, al; lea edx, [esp+0x00]; push edx; call [0x10013044] 
0x100104fe  # adc byte [eax], al; add bl, al; lea edx, [esp+0x00]; push edx; call [0x100130E4] 
0x10012377  # adc byte [eax], al; pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x10012430  # adc byte [eax], al; jne 0x1001243E; push [esp+0x04]; call [0x10013098] 
0x10011c2f  # adc byte [eax], dh; add [eax], edx; test eax, eax; jne 0x10011C43; call [0x10013070] 
0x1001193c  # adc byte [eax+0x57], dl; push 0x00000410; call [0x10013058] 
0x10011f40  # adc byte [ecx+0x56], dl; mov word [esp+0x2E], ax; call [0x10013150] 
0x10011c24  # adc byte [edx+0x6A], dl; add byte [edx+0x01], ch; push 0x00000000; push eax; call [0x10013010] 
0x100106f8  # adc byte [esi-0x75], dl; clc; call [0x10013034] 
0x100111ca  # adc byte [esi-0x18], dl; mov edi, 0x83FFFFF3; les ecx, [0xFFFDE08D+ecx*4]; call [ecx-0x18] 
0x100112c9  # adc byte [esi-0x18], dl; sal dl, 0xFF; dec [ebx-0x00069B7B]; call [eax+0x50] 
0x10011567  # adc byte [edi+0x6A], dl; or al, 0xFF; salc; push 0x00000208; mov ebx, eax; call esi 
0x10010379  # adc byte [edi+0x33], bl; rcr byte [esi-0x3D], 0x56; call [0x10013034] 
0x100106bb  # adc byte [edi+0x5E], bl; xor eax, eax; pop ebx; add esp, 0x00000800; ret 
0x10011ff7  # adc byte [edi+0x5E], bl; or eax, 0xFFFFFFFF; pop ebx; add esp, 0x00001128; ret 
0x100106a5  # adc byte [edi+0x5E], bl; mov eax, 0x00000001; pop ebx; add esp, 0x00000800; ret 
0x10010385  # adc byte [edi-0x48], bl; add [eax], eax; add byte [eax], al; pop esi; ret 
0x10011217  # adc byte [eax+0x08], ch; add al, byte [eax]; add byte [ebp-0x00042F73], cl; call [ecx-0x18] 
0x1001243d  # adc byte [edx+0x01], ch; pop eax; retn 0x000C 
0x100122fc  # adc byte [ebp+0x3F], dh; push 0x00000080; call [0x100130B0] 
0x10012423  # adc byte [ebx+0x0108247C], al; jne 0x1001243E; cmp [0x1002FDC8], 0x00000000; jne 0x1001243E; push [esp+0x04]; call [0x10013098] 
0x100105ba  # adc byte [ebx-0x6F3CFB3C], al; push esi; call [0x10013070] 
0x10010584  # adc byte [ebx-0x3B7EF73C], al; add byte [eax], ah; add byte [eax], al; ret 
0x10012365  # adc byte [ebx-0x1514FB12], al; push eax; call [0x100130B4] 
0x100122f1  # adc byte [ebx+0x098B01F8], al; mov [0x1002FDBC], ecx; jne 0x1001233E; push 0x00000080; call [0x100130B0] 
0x10010610  # adc byte [ebp+0x0E7456C0], al; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x10010610  # adc byte [ebp+0x0E7456C0], al; call [0x10013034] 
0x100119e2  # adc byte [ebp+0x1A755FC0], al; push 0x00000104; lea eax, [esp+0x04]; push 0x1001F650; push eax; call [0x100130FC] 
0x10012407  # adc byte [ebp+0x570874C0], al; push esi; push ebx; call eax 
0x100123ab  # adc byte [ebp+0x570974C0], al; push esi; push ebx; call eax 
0x10011b88  # adc byte [ebp-0x00F38A40], al; adc eax, 0x10013070; xor eax, eax; add esp, 0x0C; ret 
0x1001036c  # adc byte [ebp-0x00F18A40], al; xlatb; push eax; call [0x10013034] 
0x100122eb  # adc byte [ebx+0x0130A00D], cl; adc byte [ebx+0x098B01F8], al; mov [0x1002FDBC], ecx; jne 0x1001233E; push 0x00000080; call [0x100130B0] 
0x10011056  # adc byte [ebx-0x7EFBDBBC], cl; les ebx, [eax]; add eax, [eax]; add bl, al; call [0x10013070] 
0x10010308  # adc byte [ebx+0x5F082444], cl; pop esi; pop ecx; ret 
0x10011963  # adc byte [ebx+0x5F142444], cl; pop esi; add esp, 0x28; ret 
0x10011543  # adc byte [ebx+0x52182454], cl; push esi; call [0x10013064]; mov eax, esi; pop esi; ret 
0x10011543  # adc byte [ebx+0x52182454], cl; push esi; call [0x10013064] 
0x10011fda  # adc byte [ebx-0x00047C28], cl; jne 0x10012005; mov [edi], 0x00000000; push 0x00000002; push esi; call [0x1001313C] 
0x10010e67  # adc byte [ebx+0x016A55E8], cl; push 0x001F0FFF; call [0x10013058] 
0x100117ce  # adc byte [ebp+0x68202444], cl; inc [eax]; add byte [eax], al; push eax; call [0x100130AC] 
0x10011752  # adc byte [ebp+0x681C244C], cl; inc [eax]; add byte [eax], al; push ecx; call [0x100130AC] 
0x10011f3a  # adc byte [ebp+0x6A20244C], cl; adc byte [ecx+0x56], dl; mov word [esp+0x2E], ax; call [0x10013150] 
0x100116b7  # adc byte [ebp+0x6824244C], cl; inc [eax]; add byte [eax], al; push ecx; call [0x100130AC] 
0x10011651  # adc byte [ebp+0x6828244C], cl; inc [eax]; add byte [eax], al; push ecx; call [0x100130AC] 
0x100105ec  # adc byte [eax+0x00000001], bh; pop esi; ret 
0x10012135  # adc bh, bh; and eax, 0x10013170; jmp [0x10013174] 
0x1001213b  # adc bh, bh; and eax, 0x10013174; jmp [0x10013178] 
0x10012141  # adc bh, bh; and eax, 0x10013178; jmp [0x1001317C] 
0x10012147  # adc bh, bh; and eax, 0x1001317C; jmp [0x10013180] 
0x1001214d  # adc bh, bh; and eax, 0x10013180; jmp [0x10013184] 
0x10012153  # adc bh, bh; and eax, 0x10013184; jmp [0x10013188] 
0x10012159  # adc bh, bh; and eax, 0x10013188; jmp [0x1001318C] 
0x1001215f  # adc bh, bh; and eax, 0x1001318C; jmp [0x10013194] 
0x1001216b  # adc bh, bh; and eax, 0x10013190; jmp [0x10013198] 
0x10012165  # adc bh, bh; and eax, 0x10013194; jmp [0x10013190] 
0x100114bc  # adc bh, bh; salc; push edi; call esi 
0x100114fb  # adc bh, bh; xlatb; push esi; call edi 
0x10011ed2  # adc [eax], eax; add bl, al; push 0x00000000; push 0x00000001; push 0x00000002; call [0x10013168] 
0x100105e2  # adc [esi-0x3A], edx; add [eax], eax; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x100105e2  # adc [esi-0x3A], edx; add [eax], eax; call [0x10013034] 
0x10012358  # adc cl, byte [ebx+0x74C9850E]; pop es; call ecx 
0x1001147e  # adc ebp, [ebp+0x40]; call [0x10013060] 
0x1001242a  # adc eax, [ebx+0x02FDC83D]; adc byte [eax], al; jne 0x1001243E; push [esp+0x04]; call [0x10013098] 
0x100115fb  # adc al, 0x01; add byte [eax], al; lea ebx, [edi+0x0C]; push ebx; call [0x100130B0] 
0x10011b5c  # adc al, 0x30; add [eax], edx; ret 
0x10012132  # adc al, 0x31; add [eax], edx; jmp [0x10013170] 
0x10010e34  # adc al, 0x51; push edx; call [0x10013050]; add esp, 0x00001000; ret 
0x10010e34  # adc al, 0x51; push edx; call [0x10013050] 
0x10011967  # adc al, 0x5F; pop esi; add esp, 0x28; ret 
0x10011521  # adc al, 0x6A; add byte [ecx+0x52], dl; push eax; push 0x00000000; call [0x10013068] 
0x1001153c  # adc al, 0x89; or byte [ebx+0x1074FFFE], al; mov edx, [esp+0x18]; push edx; push esi; call [0x10013064] 
0x10011b84  # adc eax, 0x10013000; test eax, eax; jne 0x10011B99; call [0x10013070] 
0x100103f0  # adc eax, 0x10013100; add esp, 0x0C; ret 
0x10011bad  # adc eax, 0x10013004; test eax, eax; jne 0x10011BC2; call [0x10013070] 
0x10011a1d  # adc eax, 0x83000007; les ebx, [eax]; lea edx, [esp+0x00]; push esi; push edx; call [0x100130BC] 
0x10011bd4  # adc eax, 0x10013008; test eax, eax; jne 0x10011BE9; call [0x10013070] 
0x10011c2e  # adc eax, 0x10013010; test eax, eax; jne 0x10011C43; call [0x10013070] 
0x10011b5b  # adc eax, 0x10013014; ret 
0x10011f27  # adc eax, 0x10013128; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x10010114  # adc eax, 0x1001302C; mov esi, eax; call [0x10013070] 
0x1001085b  # adc eax, 0x1001302C; ret 
0x1001019b  # adc eax, 0x10013030; mov esi, eax; test esi, esi; jne 0x100101E3; call [0x10013070] 
0x10010625  # adc eax, 0x10013034; xor eax, eax; pop esi; ret 
0x10010381  # adc eax, 0x10013034; pop edi; mov eax, 0x00000001; pop esi; ret 
0x100106fd  # adc eax, 0x10013034; mov eax, edi; pop edi; pop esi; ret 
0x100105e8  # adc eax, 0x10013034; mov eax, 0x00000001; pop esi; ret 
0x10010368  # adc eax, 0x10013038; test eax, eax; jne 0x1001037F; call edi; push eax; call [0x10013034] 
0x10010368  # adc eax, 0x10013038; test eax, eax; jne 0x1001037F; call edi 
0x100106f4  # adc eax, 0x1001303C; push esi; mov edi, eax; call [0x10013034] 
0x10011fec  # adc eax, 0x1001313C; push esi; call [0x10013138] 
0x10010835  # adc eax, 0x10013044; add esp, 0x00001000; ret 
0x1001088a  # adc eax, 0x10013048; ret 
0x10010e38  # adc eax, 0x10013050; add esp, 0x00001000; ret 
0x10011052  # adc eax, 0x10013054; mov eax, [esp+0x04]; add esp, 0x00000318; ret 
0x10011288  # adc eax, 0x10013058; mov [ebp-0x00000228], eax; test ebx, ebx; je 0x100112E8; call [0x10013080] 
0x10011938  # adc eax, 0x1001305C; push eax; push edi; push 0x00000410; call [0x10013058] 
0x10010e63  # adc eax, 0x1001305C; mov ebp, eax; push ebp; push 0x00000001; push 0x001F0FFF; call [0x10013058] 
0x10011f15  # adc eax, 0x1001315C; push 0x7F000001; mov word [esp+0x24], 0x0002; call [0x10013128] 
0x1001154b  # adc eax, 0x10013064; mov eax, esi; pop esi; ret 
0x10011b8e  # adc eax, 0x10013070; xor eax, eax; add esp, 0x0C; ret 
0x1001195f  # adc eax, 0x1001308C; mov eax, [esp+0x14]; pop edi; pop esi; add esp, 0x28; ret 
0x10012439  # adc eax, 0x10013098; push 0x00000001; pop eax; retn 0x000C 
0x100105b6  # adc eax, 0x100130D8; add esp, 0x04; ret 
0x100105a0  # adc eax, 0x100130DC; add esp, 0x0C; ret 
0x10010580  # adc eax, 0x100130E0; add esp, 0x08; add esp, 0x00002000; ret 
0x100104c5  # adc eax, 0x100130E8; add esp, 0x10; ret 
0x100104a0  # adc eax, 0x100130EC; add esp, 0x0C; ret 
0x100103d5  # adc eax, 0x100130F0; add esp, 0x10; ret 
0x10011fd1  # pop ss; push edx; push eax; push esi; call [0x10013154] 
0x1001105d  # sbb byte [ebx], al; add byte [eax], al; ret 
0x100108c8  # sbb byte [eax], dl; add byte [eax], al; push ecx; push edx; push eax; call [0x10013120] 
0x1001035d  # sbb byte [ecx+0x50], dl; push 0x00000000; push 0x0000FDE9; call [0x10013038] 
0x10011547  # sbb byte [edx+0x56], dl; call [0x10013064]; mov eax, esi; pop esi; ret 
0x10011547  # sbb byte [edx+0x56], dl; call [0x10013064] 
0x10010563  # sbb byte [ebp+0x09755EC6], al; xor eax, eax; add esp, 0x00002000; ret 
0x10011bc9  # sbb byte [ebx+0x6A002454], cl; add byte [eax+0x51], dl; push edx; call [0x10013008] 
0x10011a23  # sbb byte [ebp+0x56002454], cl; push edx; call [0x100130BC] 
0x10011b3c  # sbb eax, eax; pop edi; sbb eax, 0xFFFFFFFF; pop esi; ret 
0x10010601  # sbb al, 0x51; push eax; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10011756  # sbb al, 0x68; inc [eax]; add byte [eax], al; push ecx; call [0x100130AC] 
0x10011f08  # sbb al, 0x6A; add al, 0x50; push 0x00000004; push 0x0000FFFF; push esi; call [0x1001315C] 
0x10010193  # pop ds; add byte [eax], al; add esp, 0x20; push edi; call [0x10013030] 
0x10010107  # and byte [eax], al; add byte [ebx-0x7CCBDBBC], cl; les ebp, [eax]; push edi; push eax; call [0x1001302C] 
0x10010198  # and byte [edi-0x01], dl; adc eax, 0x10013030; mov esi, eax; test esi, esi; jne 0x100101E3; call [0x10013070] 
0x100115c6  # and byte [edi+0x5E], bl; pop ebx; ret 
0x10011f3e  # and byte [edx+0x10], ch; push ecx; push esi; mov word [esp+0x2E], ax; call [0x10013150] 
0x1001118b  # and byte [ebp-0x00066B73], cl; call [ecx-0x18] 
0x100111ab  # and byte [ebp-0x00066B6B], cl; call [edx-0x18] 
0x10010578  # and al, 0x00; adc byte [eax], al; add byte [ecx+0x52], dl; call [0x100130E0] 
0x10010831  # and al, 0x00; push edx; call [0x10013044]; add esp, 0x00001000; ret 
0x10010831  # and al, 0x00; push edx; call [0x10013044] 
0x10010504  # and al, 0x00; push edx; call [0x100130E4]; add esp, 0x04; add esp, 0x00001000; ret 
0x10010504  # and al, 0x00; push edx; call [0x100130E4] 
0x10011a26  # and al, 0x00; push esi; push edx; call [0x100130BC] 
0x10011bcc  # and al, 0x00; push 0x00000000; push eax; push ecx; push edx; call [0x10013008] 
0x10010574  # and al, 0x00; lea edx, [esp+0x00001000]; push ecx; push edx; call [0x100130E0] 
0x10011f23  # and al, 0x02; add bh, bh; adc eax, 0x10013128; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x100103ea  # and al, 0x04; push eax; push ecx; push edx; call [0x10013100] 
0x10010856  # and al, 0x04; push eax; push ecx; call [0x1001302C]; ret 
0x10010856  # and al, 0x04; push eax; push ecx; call [0x1001302C] 
0x100105b2  # and al, 0x04; push eax; call [0x100130D8]; add esp, 0x04; ret 
0x100105b2  # and al, 0x04; push eax; call [0x100130D8] 
0x100119ef  # and al, 0x04; push 0x1001F650; push eax; call [0x100130FC] 
0x10011059  # and al, 0x04; add esp, 0x00000318; ret 
0x10012102  # and al, 0x04; mov eax, [eax+0x2C]; test eax, eax; je 0x10012112; push eax; call [0x1001308C] 
0x10010596  # and al, 0x04; lea eax, [esp+0x0C]; push eax; push ecx; push edx; call [0x100130DC] 
0x10010496  # and al, 0x04; lea eax, [esp+0x0C]; push eax; push ecx; push edx; call [0x100130EC] 
0x10012436  # and al, 0x04; call [0x10013098]; push 0x00000001; pop eax; retn 0x000C 
0x10012436  # and al, 0x04; call [0x10013098] 
0x10012426  # and al, 0x08; add [ebp+0x13], esi; cmp [0x1002FDC8], 0x00000000; jne 0x1001243E; push [esp+0x04]; call [0x10013098] 
0x100104bf  # and al, 0x08; push ecx; push edx; push eax; call [0x100130E8] 
0x100103cf  # and al, 0x08; push ecx; push edx; push eax; call [0x100130F0] 
0x10011b52  # and al, 0x08; mov ecx, [esp+0x04]; push eax; push ecx; call [0x10013014]; ret 
0x10011b52  # and al, 0x08; mov ecx, [esp+0x04]; push eax; push ecx; call [0x10013014] 
0x10010852  # and al, 0x08; mov ecx, [esp+0x04]; push eax; push ecx; call [0x1001302C]; ret 
0x10010852  # and al, 0x08; mov ecx, [esp+0x04]; push eax; push ecx; call [0x1001302C] 
0x100103e6  # and al, 0x08; mov edx, [esp+0x04]; push eax; push ecx; push edx; call [0x10013100] 
0x1001059a  # and al, 0x0C; push eax; push ecx; push edx; call [0x100130DC] 
0x1001049a  # and al, 0x0C; push eax; push ecx; push edx; call [0x100130EC] 
0x10010732  # and al, 0x0C; push eax; push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x10010884  # and al, 0x0C; push edx; push eax; push ecx; call [0x10013048]; ret 
0x10010884  # and al, 0x0C; push edx; push eax; push ecx; call [0x10013048] 
0x10010738  # and al, 0x10; add byte [eax], cl; add byte [eax], al; call [0x10013040] 
0x10010e5c  # and al, 0x14; add byte [eax], al; add byte [eax], al; call [0x1001305C] 
0x10010e33  # and al, 0x14; push ecx; push edx; call [0x10013050]; add esp, 0x00001000; ret 
0x10010e33  # and al, 0x14; push ecx; push edx; call [0x10013050] 
0x10011966  # and al, 0x14; pop edi; pop esi; add esp, 0x28; ret 
0x100107c9  # and al, 0x14; mov eax, edi; shr eax, 1; push eax; push ebx; call [0x100130D4] 
0x100108c7  # and al, 0x18; adc byte [eax], al; add byte [ecx+0x52], dl; push eax; call [0x10013120] 
0x1001035c  # and al, 0x18; push ecx; push eax; push 0x00000000; push 0x0000FDE9; call [0x10013038] 
0x10011546  # and al, 0x18; push edx; push esi; call [0x10013064] 
0x10011755  # and al, 0x1C; push 0x000000FF; push ecx; call [0x100130AC] 
0x100117d1  # and al, 0x20; push 0x000000FF; push eax; call [0x100130AC] 
0x10011f3d  # and al, 0x20; push 0x00000010; push ecx; push esi; mov word [esp+0x2E], ax; call [0x10013150] 
0x10011f22  # and al, 0x24; add al, byte [eax]; call [0x10013128]; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x10011f22  # and al, 0x24; add al, byte [eax]; call [0x10013128] 
0x100116ba  # and al, 0x24; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011654  # and al, 0x28; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011f33  # and al, 0x28; call [0x1001312C] 
0x10011f46  # and al, 0x2E; call [0x10013150] 
0x10011f69  # and al, 0x38; add [eax], eax; add byte [edi+0x50], dl; push esi; call [0x10013158] 
0x10011fa0  # and al, 0x44; add [eax], eax; add byte [eax], al; call [0x10013160] 
0x10011f9c  # and al, 0x48; mov [esp+0x44], 0x00000001; call [0x10013160] 
0x10011776  # and al, 0x5F; pop esi; pop ebx; add esp, 0x00000100; ret 
0x100116bb  # and al, 0x68; inc [eax]; add byte [eax], al; push ecx; call [0x100130AC] 
0x10012131  # and eax, 0x10013114; jmp [0x10013170] 
0x10012137  # and eax, 0x10013170; jmp [0x10013174] 
0x1001213d  # and eax, 0x10013174; jmp [0x10013178] 
0x10012143  # and eax, 0x10013178; jmp [0x1001317C] 
0x10012149  # and eax, 0x1001317C; jmp [0x10013180] 
0x1001214f  # and eax, 0x10013180; jmp [0x10013184] 
0x10012155  # and eax, 0x10013184; jmp [0x10013188] 
0x1001215b  # and eax, 0x10013188; jmp [0x1001318C] 
0x10012161  # and eax, 0x1001318C; jmp [0x10013194] 
0x1001216d  # and eax, 0x10013190; jmp [0x10013198] 
0x10012167  # and eax, 0x10013194; jmp [0x10013190] 
0x10012373  # and eax, 0x1002FDC4; add byte [ecx+0x5E], bl; push 0x00000001; pop eax; retn 0x000C 
0x10011ce7  # sub byte [ecx], dl; add byte [eax], al; ret 
0x10011f28  # sub byte [ecx], dh; add [eax], edx; push 0x0000FEED; mov [esp+0x28], eax; call [0x1001312C] 
0x10011932  # sub byte [esi+0x57], dl; xor edi, edi; call [0x1001305C] 
0x10010110  # sub byte [edi+0x50], dl; call [0x1001302C]; mov esi, eax; call [0x10013070] 
0x10010110  # sub byte [edi+0x50], dl; call [0x1001302C] 
0x10011912  # sub byte [edi+0x33], bl; rcr byte [esi-0x007F], 0xC4; add byte [ecx], al; add byte [eax], al; ret 
0x100117f4  # sub byte [edi+0x5E], bl; pop ebx; add esp, 0x00000100; ret 
0x100116dc  # sub byte [edi+0x5E], bl; pop ebp; xor eax, eax; pop ebx; add esp, 0x00000100; ret 
0x100101db  # sub byte [ebx+0x5E5FFFC8], al; pop ecx; ret 
0x1001196c  # sub bl, al; mov eax, edi; pop edi; pop esi; add esp, 0x28; ret 
0x10010115  # sub al, 0x30; add [eax], edx; mov esi, eax; call [0x10013070] 
0x1001085c  # sub al, 0x30; add [eax], edx; ret 
0x10012106  # sub al, 0x85; sal byte [edi+eax+0x50], 0xFF; adc eax, 0x1001308C; ret 
0x10011f47  # call [0x10013150] 
0x10011398  # das; mov eax, 0x00000001; ret 
0x1001193a  # xor byte [ecx], al; adc byte [eax+0x57], dl; push 0x00000410; call [0x10013058] 
0x100106f6  # xor byte [ecx], al; adc byte [esi-0x75], dl; clc; call [0x10013034] 
0x10010377  # xor byte [ecx], al; adc byte [edi+0x33], bl; rcr byte [esi-0x3D], 0x56; call [0x10013034] 
0x100106b9  # xor byte [ecx], al; adc byte [edi+0x5E], bl; xor eax, eax; pop ebx; add esp, 0x00000800; ret 
0x100106a3  # xor byte [ecx], al; adc byte [edi+0x5E], bl; mov eax, 0x00000001; pop ebx; add esp, 0x00000800; ret 
0x10010383  # xor byte [ecx], al; adc byte [edi-0x48], bl; add [eax], eax; add byte [eax], al; pop esi; ret 
0x1001243b  # xor byte [ecx], al; adc byte [edx+0x01], ch; pop eax; retn 0x000C 
0x100105b8  # xor byte [ecx], al; adc byte [ebx-0x6F3CFB3C], al; push esi; call [0x10013070] 
0x10010582  # xor byte [ecx], al; adc byte [ebx-0x3B7EF73C], al; add byte [eax], ah; add byte [eax], al; ret 
0x100122ef  # xor byte [ecx], al; adc byte [ebx+0x098B01F8], al; mov [0x1002FDBC], ecx; jne 0x1001233E; push 0x00000080; call [0x100130B0] 
0x1001060e  # xor byte [ecx], al; adc byte [ebp+0x0E7456C0], al; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x1001060e  # xor byte [ecx], al; adc byte [ebp+0x0E7456C0], al; call [0x10013034] 
0x10011b86  # xor byte [ecx], al; adc byte [ebp-0x00F38A40], al; adc eax, 0x10013070; xor eax, eax; add esp, 0x0C; ret 
0x1001036a  # xor byte [ecx], al; adc byte [ebp-0x00F18A40], al; xlatb; push eax; call [0x10013034] 
0x10011054  # xor byte [ecx], al; adc byte [ebx-0x7EFBDBBC], cl; les ebx, [eax]; add eax, [eax]; add bl, al; call [0x10013070] 
0x10011961  # xor byte [ecx], al; adc byte [ebx+0x5F142444], cl; pop esi; add esp, 0x28; ret 
0x10010e65  # xor byte [ecx], al; adc byte [ebx+0x016A55E8], cl; push 0x001F0FFF; call [0x10013058] 
0x100105ea  # xor byte [ecx], al; adc byte [eax+0x00000001], bh; pop esi; ret 
0x100114ba  # xor byte [ecx], al; adc bh, bh; salc; push edi; call esi 
0x100114f9  # xor byte [ecx], al; adc bh, bh; xlatb; push esi; call edi 
0x1001019c  # xor byte [eax], dh; add [eax], edx; mov esi, eax; test esi, esi; jne 0x100101E3; call [0x10013070] 
0x10011124  # xor byte [ebp-0x00068F6B], cl; call [edx-0x18] 
0x10011ff5  # xor [ecx], eax; adc byte [edi+0x5E], bl; or eax, 0xFFFFFFFF; pop ebx; add esp, 0x00001128; ret 
0x10011f38  # xor [ecx], eax; adc byte [ebp+0x6A20244C], cl; adc byte [ecx+0x56], dl; mov word [esp+0x2E], ax; call [0x10013150] 
0x10012133  # xor [ecx], eax; adc bh, bh; and eax, 0x10013170; jmp [0x10013174] 
0x10012139  # xor [ecx], eax; adc bh, bh; and eax, 0x10013174; jmp [0x10013178] 
0x1001213f  # xor [ecx], eax; adc bh, bh; and eax, 0x10013178; jmp [0x1001317C] 
0x10012145  # xor [ecx], eax; adc bh, bh; and eax, 0x1001317C; jmp [0x10013180] 
0x1001214b  # xor [ecx], eax; adc bh, bh; and eax, 0x10013180; jmp [0x10013184] 
0x10012151  # xor [ecx], eax; adc bh, bh; and eax, 0x10013184; jmp [0x10013188] 
0x10012157  # xor [ecx], eax; adc bh, bh; and eax, 0x10013188; jmp [0x1001318C] 
0x1001215d  # xor [ecx], eax; adc bh, bh; and eax, 0x1001318C; jmp [0x10013194] 
0x10012169  # xor [ecx], eax; adc bh, bh; and eax, 0x10013190; jmp [0x10013198] 
0x10012163  # xor [ecx], eax; adc bh, bh; and eax, 0x10013194; jmp [0x10013190] 
0x100116e0  # xor eax, eax; pop ebx; add esp, 0x00000100; ret 
0x100106be  # xor eax, eax; pop ebx; add esp, 0x00000800; ret 
0x10011914  # xor eax, eax; pop esi; add esp, 0x00000100; ret 
0x10011899  # xor eax, eax; pop edi; pop esi; add esp, 0x00000100; ret 
0x10010796  # xor eax, eax; pop edi; pop esi; add esp, 0x00001004; ret 
0x10011afa  # xor eax, eax; pop edi; add esp, 0x00000104; ret 
0x10010569  # xor eax, eax; add esp, 0x00002000; ret 
0x10010757  # xor eax, eax; add esp, 0x00001004; ret 
0x10011b93  # xor eax, eax; add esp, 0x0C; ret 
0x1001228f  # xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x10011935  # xor edi, edi; call [0x1001305C]; push eax; push edi; push 0x00000410; call [0x10013058] 
0x10011935  # xor edi, edi; call [0x1001305C] 
0x10010626  # xor al, 0x30; add [eax], edx; xor eax, eax; pop esi; ret 
0x10010376  # xor al, 0x30; add [eax], edx; pop edi; xor eax, eax; pop esi; ret 
0x10010382  # xor al, 0x30; add [eax], edx; pop edi; mov eax, 0x00000001; pop esi; ret 
0x100106fe  # xor al, 0x30; add [eax], edx; mov eax, edi; pop edi; pop esi; ret 
0x100105e9  # xor al, 0x30; add [eax], edx; mov eax, 0x00000001; pop esi; ret 
0x10011563  # xor eax, 0x100130B0; push edi; push 0x0000000C; call esi 
0x100114b8  # xor eax, 0x100130B4; call esi; push edi; call esi 
0x100114b8  # xor eax, 0x100130B4; call esi 
0x100105df  # cmp byte [eax], al; jne 0x100105F4; push esi; mov byte [ecx], 0x00; call [0x10013034] 
0x10011f6a  # cmp byte [ecx], al; add byte [eax], al; push edi; push eax; push esi; call [0x10013158] 
0x10010369  # cmp byte [eax], dh; add [eax], edx; test eax, eax; jne 0x1001037F; call edi 
0x10011cdc  # cmp byte [edi+0x5E], bl; mov eax, 0xFFFFFFFE; pop ebx; add esp, 0x00001128; ret 
0x10012355  # cmp esi, eax; jc 0x1001236B; mov ecx, [esi]; test ecx, ecx; je 0x10012366; call ecx 
0x100106f5  # cmp al, 0x30; add [eax], edx; push esi; mov edi, eax; call [0x10013034] 
0x10011fed  # cmp al, 0x31; add [eax], edx; push esi; call [0x10013138] 
0x100116b4  # cmp al, 0xF4; add [eax], edx; lea ecx, [esp+0x24]; push 0x000000FF; push ecx; call [0x100130AC] 
0x100118ea  # cmp al, 0xF5; add [eax], edx; lea ecx, [esp+0x1C]; push 0x000000FF; push ecx; call [0x100130AC] 
0x10010323  # cmp eax, 0x10013070; call edi 
0x100114f7  # cmp eax, 0x100130B4; call edi; push esi; call edi 
0x100114f7  # cmp eax, 0x100130B4; call edi 
0x1001242c  # cmp eax, 0x1002FDC8; add byte [ebp+0x0A], dh; push [esp+0x04]; call [0x10013098] 
0x100122fe  # aas; push 0x00000080; call [0x100130B0] 
0x100122cb  # inc eax; add al, 0x50; ret 
0x10012105  # inc eax; sub al, 0x85; sal byte [edi+eax+0x50], 0xFF; adc eax, 0x1001308C; ret 
0x10011480  # inc eax; call [0x10013060] 
0x10011fa1  # inc esp; add [eax], eax; add byte [eax], al; call [0x10013160] 
0x100105b1  # inc esp; and al, 0x04; push eax; call [0x100130D8]; add esp, 0x04; ret 
0x100105b1  # inc esp; and al, 0x04; push eax; call [0x100130D8] 
0x100119ee  # inc esp; and al, 0x04; push 0x1001F650; push eax; call [0x100130FC] 
0x10011058  # inc esp; and al, 0x04; add esp, 0x00000318; ret 
0x100104be  # inc esp; and al, 0x08; push ecx; push edx; push eax; call [0x100130E8] 
0x100103ce  # inc esp; and al, 0x08; push ecx; push edx; push eax; call [0x100130F0] 
0x10011b51  # inc esp; and al, 0x08; mov ecx, [esp+0x04]; push eax; push ecx; call [0x10013014] 
0x10010851  # inc esp; and al, 0x08; mov ecx, [esp+0x04]; push eax; push ecx; call [0x1001302C] 
0x10010599  # inc esp; and al, 0x0C; push eax; push ecx; push edx; call [0x100130DC] 
0x10010499  # inc esp; and al, 0x0C; push eax; push ecx; push edx; call [0x100130EC] 
0x10010737  # inc esp; and al, 0x10; add byte [eax], cl; add byte [eax], al; call [0x10013040] 
0x10010e5b  # inc esp; and al, 0x14; add byte [eax], al; add byte [eax], al; call [0x1001305C] 
0x10011965  # inc esp; and al, 0x14; pop edi; pop esi; add esp, 0x28; ret 
0x100117d0  # inc esp; and al, 0x20; push 0x000000FF; push eax; call [0x100130AC] 
0x10011f21  # inc esp; and al, 0x24; add al, byte [eax]; call [0x10013128] 
0x10011f32  # inc esp; and al, 0x28; call [0x1001312C] 
0x10011f45  # inc esp; and al, 0x2E; call [0x10013150] 
0x10011f9f  # inc esp; and al, 0x44; add [eax], eax; add byte [eax], al; call [0x10013160] 
0x10012415  # inc ebp; or al, 0x5F; pop esi; pop ebx; pop ebp; retn 0x000C 
0x1001144c  # inc ebp; in al, 0x8B; jnbe 0x10011459; call [0x10013080] 
0x100105dc  # inc esi; cmp word [eax], 0x0000; jne 0x100105F4; push esi; mov byte [ecx], 0x00; call [0x10013034] 
0x100114b4  # inc edi; or byte [eax-0x75], dl; xor eax, 0x100130B4; call esi; push edi; call esi 
0x100114b4  # inc edi; or byte [eax-0x75], dl; xor eax, 0x100130B4; call esi 
0x10011f9d  # dec eax; mov [esp+0x44], 0x00000001; call [0x10013160] 
0x1001044e  # dec ecx; pop edi; mov eax, ecx; ret 
0x10010573  # dec esp; and al, 0x00; lea edx, [esp+0x00001000]; push ecx; push edx; call [0x100130E0] 
0x10011b55  # dec esp; and al, 0x04; push eax; push ecx; call [0x10013014]; ret 
0x10011b55  # dec esp; and al, 0x04; push eax; push ecx; call [0x10013014] 
0x10010855  # dec esp; and al, 0x04; push eax; push ecx; call [0x1001302C]; ret 
0x10010855  # dec esp; and al, 0x04; push eax; push ecx; call [0x1001302C] 
0x10010731  # dec esp; and al, 0x0C; push eax; push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x10010883  # dec esp; and al, 0x0C; push edx; push eax; push ecx; call [0x10013048] 
0x10011754  # dec esp; and al, 0x1C; push 0x000000FF; push ecx; call [0x100130AC] 
0x100116b9  # dec esp; and al, 0x24; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011653  # dec esp; and al, 0x28; push 0x000000FF; push ecx; call [0x100130AC] 
0x1001228e  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x100117a0  # dec esi; clc; push ecx; call [0x100130B4] 
0x100103ec  # push eax; push ecx; push edx; call [0x10013100]; add esp, 0x0C; ret 
0x100103ec  # push eax; push ecx; push edx; call [0x10013100] 
0x10011bd0  # push eax; push ecx; push edx; call [0x10013008] 
0x1001059c  # push eax; push ecx; push edx; call [0x100130DC]; add esp, 0x0C; ret 
0x1001059c  # push eax; push ecx; push edx; call [0x100130DC] 
0x1001049c  # push eax; push ecx; push edx; call [0x100130EC]; add esp, 0x0C; ret 
0x1001049c  # push eax; push ecx; push edx; call [0x100130EC] 
0x100106ea  # push eax; push ecx; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10010734  # push eax; push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x10011b58  # push eax; push ecx; call [0x10013014]; ret 
0x10011b58  # push eax; push ecx; call [0x10013014] 
0x10010858  # push eax; push ecx; call [0x1001302C]; ret 
0x10010858  # push eax; push ecx; call [0x1001302C] 
0x10010887  # push eax; push ecx; call [0x10013048]; ret 
0x10010887  # push eax; push ecx; call [0x10013048] 
0x100107cf  # push eax; push ebx; call [0x100130D4] 
0x10011fd3  # push eax; push esi; call [0x10013154] 
0x10011f6f  # push eax; push esi; call [0x10013158] 
0x1001193d  # push eax; push edi; push 0x00000410; call [0x10013058] 
0x1001147b  # push eax; push 0x406D1388; call [0x10013060] 
0x1001174d  # push eax; push 0x1001F4F0; lea ecx, [esp+0x1C]; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011bf5  # push eax; push 0x00000000; push ecx; push 0x00006801; push edx; call [0x1001300C] 
0x1001035f  # push eax; push 0x00000000; push 0x0000FDE9; call [0x10013038] 
0x10010603  # push eax; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10011526  # push eax; push 0x00000000; call [0x10013068] 
0x10011f97  # push eax; push 0x00000001; mov [esp+0x48], esi; mov [esp+0x44], 0x00000001; call [0x10013160] 
0x100114b6  # push eax; mov esi, [0x100130B4]; call esi; push edi; call esi 
0x100114b6  # push eax; mov esi, [0x100130B4]; call esi 
0x100104bc  # push eax; mov eax, [esp+0x08]; push ecx; push edx; push eax; call [0x100130E8] 
0x100103cc  # push eax; mov eax, [esp+0x08]; push ecx; push edx; push eax; call [0x100130F0] 
0x100108c4  # push eax; mov eax, [esp+0x00001018]; push ecx; push edx; push eax; call [0x10013120] 
0x10010e30  # push eax; lea edx, [esp+0x14]; push ecx; push edx; call [0x10013050] 
0x100119f2  # push eax; test byte [ecx], 0x10; push eax; call [0x100130FC] 
0x10011b82  # push eax; call [0x10013000]; test eax, eax; jne 0x10011B99; call [0x10013070] 
0x10011b82  # push eax; call [0x10013000] 
0x10011c2c  # push eax; call [0x10013010]; test eax, eax; jne 0x10011C43; call [0x10013070] 
0x10011c2c  # push eax; call [0x10013010] 
0x100108ce  # push eax; call [0x10013120] 
0x10010112  # push eax; call [0x1001302C]; mov esi, eax; call [0x10013070] 
0x10010112  # push eax; call [0x1001302C] 
0x10010373  # push eax; call [0x10013034]; pop edi; xor eax, eax; pop esi; ret 
0x10010373  # push eax; call [0x10013034] 
0x10011050  # push eax; call [0x10013054]; mov eax, [esp+0x04]; add esp, 0x00000318; ret 
0x10011050  # push eax; call [0x10013054] 
0x100117d8  # push eax; call [0x100130AC] 
0x1001236b  # push eax; call [0x100130B4] 
0x100105b4  # push eax; call [0x100130D8]; add esp, 0x04; ret 
0x100105b4  # push eax; call [0x100130D8] 
0x100104c3  # push eax; call [0x100130E8]; add esp, 0x10; ret 
0x100104c3  # push eax; call [0x100130E8] 
0x100103d3  # push eax; call [0x100130F0]; add esp, 0x10; ret 
0x100103d3  # push eax; call [0x100130F0] 
0x100119f6  # push eax; call [0x100130FC] 
0x1001035e  # push ecx; push eax; push 0x00000000; push 0x0000FDE9; call [0x10013038] 
0x10010602  # push ecx; push eax; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10011524  # push ecx; push edx; push eax; push 0x00000000; call [0x10013068] 
0x100108cc  # push ecx; push edx; push eax; call [0x10013120] 
0x100104c1  # push ecx; push edx; push eax; call [0x100130E8]; add esp, 0x10; ret 
0x100104c1  # push ecx; push edx; push eax; call [0x100130E8] 
0x100103d1  # push ecx; push edx; push eax; call [0x100130F0]; add esp, 0x10; ret 
0x100103d1  # push ecx; push edx; push eax; call [0x100130F0] 
0x10011a9a  # push ecx; push edx; push 0x00000000; stosb; call [0x1001306C] 
0x100103ed  # push ecx; push edx; call [0x10013100]; add esp, 0x0C; ret 
0x100103ed  # push ecx; push edx; call [0x10013100] 
0x10011bd1  # push ecx; push edx; call [0x10013008]; test eax, eax; jne 0x10011BE9; call [0x10013070] 
0x10011bd1  # push ecx; push edx; call [0x10013008] 
0x10010e35  # push ecx; push edx; call [0x10013050]; add esp, 0x00001000; ret 
0x10010e35  # push ecx; push edx; call [0x10013050] 
0x1001059d  # push ecx; push edx; call [0x100130DC]; add esp, 0x0C; ret 
0x1001059d  # push ecx; push edx; call [0x100130DC] 
0x1001057d  # push ecx; push edx; call [0x100130E0]; add esp, 0x08; add esp, 0x00002000; ret 
0x1001057d  # push ecx; push edx; call [0x100130E0] 
0x1001049d  # push ecx; push edx; call [0x100130EC]; add esp, 0x0C; ret 
0x1001049d  # push ecx; push edx; call [0x100130EC] 
0x10011f41  # push ecx; push esi; mov word [esp+0x2E], ax; call [0x10013150] 
0x10011870  # push ecx; push esi; push 0x1001F59C; push 0x000000FF; push edx; call [0x100130AC] 
0x10011bf8  # push ecx; push 0x00006801; push edx; call [0x1001300C] 
0x100106eb  # push ecx; push 0x00000000; push 0x0000FDE9; call [0x1001303C] 
0x10011ba1  # push ecx; push 0x00000000; push 0x00000000; push 0x00008003; push edx; call [0x10013004] 
0x10011478  # push ecx; push 0x00000004; push eax; push 0x406D1388; call [0x10013060] 
0x10010881  # push ecx; mov ecx, [esp+0x0C]; push edx; push eax; push ecx; call [0x10013048] 
0x10010735  # push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x10011b59  # push ecx; call [0x10013014]; ret 
0x10011b59  # push ecx; call [0x10013014] 
0x10010859  # push ecx; call [0x1001302C]; ret 
0x10010859  # push ecx; call [0x1001302C] 
0x10010888  # push ecx; call [0x10013048]; ret 
0x10010888  # push ecx; call [0x10013048] 
0x10011296  # push ecx; call [0x10013080] 
0x1001165b  # push ecx; call [0x100130AC] 
0x100117a2  # push ecx; call [0x100130B4] 
0x10010886  # push edx; push eax; push ecx; call [0x10013048]; ret 
0x10010886  # push edx; push eax; push ecx; call [0x10013048] 
0x10011fd2  # push edx; push eax; push esi; call [0x10013154] 
0x10011525  # push edx; push eax; push 0x00000000; call [0x10013068] 
0x10010e2f  # push edx; push eax; lea edx, [esp+0x14]; push ecx; push edx; call [0x10013050] 
0x100108cd  # push edx; push eax; call [0x10013120] 
0x100104c2  # push edx; push eax; call [0x100130E8]; add esp, 0x10; ret 
0x100104c2  # push edx; push eax; call [0x100130E8] 
0x100103d2  # push edx; push eax; call [0x100130F0]; add esp, 0x10; ret 
0x100103d2  # push edx; push eax; call [0x100130F0] 
0x10011548  # push edx; push esi; call [0x10013064]; mov eax, esi; pop esi; ret 
0x10011548  # push edx; push esi; call [0x10013064] 
0x100119d1  # push edx; push 0x00000000; push 0x00000000; push 0x00008023; push 0x00000000; call [0x1001311C] 
0x10011c25  # push edx; push 0x00000000; push 0x00000001; push 0x00000000; push eax; call [0x10013010] 
0x10011a9b  # push edx; push 0x00000000; stosb; call [0x1001306C] 
0x10010f68  # push edx; push 0x00000006; push ebx; push ebp; push eax; call edi 
0x100114f5  # push edx; mov edi, [0x100130B4]; call edi; push esi; call edi 
0x100114f5  # push edx; mov edi, [0x100130B4]; call edi 
0x100103ee  # push edx; call [0x10013100]; add esp, 0x0C; ret 
0x100103ee  # push edx; call [0x10013100] 
0x10011bab  # push edx; call [0x10013004]; test eax, eax; jne 0x10011BC2; call [0x10013070] 
0x10011bab  # push edx; call [0x10013004] 
0x10011bd2  # push edx; call [0x10013008]; test eax, eax; jne 0x10011BE9; call [0x10013070] 
0x10011bd2  # push edx; call [0x10013008] 
0x10011bfe  # push edx; call [0x1001300C]; test eax, eax; jne 0x10011C15; call [0x10013070] 
0x10011bfe  # push edx; call [0x1001300C] 
0x10010833  # push edx; call [0x10013044]; add esp, 0x00001000; ret 
0x10010833  # push edx; call [0x10013044] 
0x10010e36  # push edx; call [0x10013050]; add esp, 0x00001000; ret 
0x10010e36  # push edx; call [0x10013050] 
0x1001187c  # push edx; call [0x100130AC] 
0x10011a29  # push edx; call [0x100130BC] 
0x1001059e  # push edx; call [0x100130DC]; add esp, 0x0C; ret 
0x1001059e  # push edx; call [0x100130DC] 
0x1001057e  # push edx; call [0x100130E0]; add esp, 0x08; add esp, 0x00002000; ret 
0x1001057e  # push edx; call [0x100130E0] 
0x10010506  # push edx; call [0x100130E4]; add esp, 0x04; add esp, 0x00001000; ret 
0x10010506  # push edx; call [0x100130E4] 
0x1001049e  # push edx; call [0x100130EC]; add esp, 0x0C; ret 
0x1001049e  # push edx; call [0x100130EC] 
0x100114a9  # push edx; call [ebp-0x1C] 
0x10010f6b  # push ebx; push ebp; push eax; call edi 
0x10010e56  # push ebx; push ebp; push esi; push edi; mov [esp+0x14], 0x00000000; call [0x1001305C] 
0x10010656  # push ebx; push esi; push edi; call [0x10013070] 
0x10011560  # push ebx; push esi; mov esi, [0x100130B0]; push edi; push 0x0000000C; call esi 
0x100106b5  # push ebx; call [0x10013034] 
0x10011602  # push ebx; call [0x100130B0] 
0x100107d0  # push ebx; call [0x100130D4] 
0x10010830  # push esp; and al, 0x00; push edx; call [0x10013044]; add esp, 0x00001000; ret 
0x10010830  # push esp; and al, 0x00; push edx; call [0x10013044] 
0x10010503  # push esp; and al, 0x00; push edx; call [0x100130E4] 
0x10011a25  # push esp; and al, 0x00; push esi; push edx; call [0x100130BC] 
0x100103e9  # push esp; and al, 0x04; push eax; push ecx; push edx; call [0x10013100] 
0x10010e32  # push esp; and al, 0x14; push ecx; push edx; call [0x10013050] 
0x10011545  # push esp; and al, 0x18; push edx; push esi; call [0x10013064] 
0x10010f6c  # push ebp; push eax; call edi 
0x10010e57  # push ebp; push esi; push edi; mov [esp+0x14], 0x00000000; call [0x1001305C] 
0x10010e6a  # push ebp; push 0x00000001; push 0x001F0FFF; call [0x10013058] 
0x100114f3  # push esi; or byte [edx-0x75], dl; cmp eax, 0x100130B4; call edi; push esi; call edi 
0x100114f3  # push esi; or byte [edx-0x75], dl; cmp eax, 0x100130B4; call edi 
0x10011a28  # push esi; push edx; call [0x100130BC] 
0x100123b1  # push esi; push ebx; call eax 
0x10011933  # push esi; push edi; xor edi, edi; call [0x1001305C] 
0x10010e58  # push esi; push edi; mov [esp+0x14], 0x00000000; call [0x1001305C] 
0x10010657  # push esi; push edi; call [0x10013070] 
0x10011f42  # push esi; mov word [esp+0x2E], ax; call [0x10013150] 
0x100118e8  # push esi; push 0x1001F53C; lea ecx, [esp+0x1C]; push 0x000000FF; push ecx; call [0x100130AC] 
0x1001164c  # push esi; push 0x1001F484; lea ecx, [esp+0x28]; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011871  # push esi; push 0x1001F59C; push 0x000000FF; push edx; call [0x100130AC] 
0x100117c9  # push esi; push 0x1001F4BC; lea eax, [esp+0x20]; push 0x000000FF; push eax; call [0x100130AC] 
0x10010613  # push esi; je 0x10010624; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x10010613  # push esi; je 0x10010624; call [0x10013034] 
0x10011561  # push esi; mov esi, [0x100130B0]; push edi; push 0x0000000C; call esi 
0x100106f9  # push esi; mov edi, eax; call [0x10013034] 
0x1001179e  # push esi; lea ecx, [esi-0x08]; push ecx; call [0x100130B4] 
0x100105e3  # push esi; mov byte [ecx], 0x00; call [0x10013034]; mov eax, 0x00000001; pop esi; ret 
0x100105e3  # push esi; mov byte [ecx], 0x00; call [0x10013034] 
0x10010623  # push esi; call [0x10013034]; xor eax, eax; pop esi; ret 
0x1001038e  # push esi; call [0x10013034]; pop edi; xor eax, eax; pop esi; ret 
0x1001037f  # push esi; call [0x10013034]; pop edi; mov eax, 0x00000001; pop esi; ret 
0x1001037f  # push esi; call [0x10013034] 
0x10011fea  # push esi; call [0x1001313C]; push esi; call [0x10013138] 
0x10011fd4  # push esi; call [0x10013154] 
0x10011f13  # push esi; call [0x1001315C]; push 0x7F000001; mov word [esp+0x24], 0x0002; call [0x10013128] 
0x10011f13  # push esi; call [0x1001315C] 
0x10011549  # push esi; call [0x10013064]; mov eax, esi; pop esi; ret 
0x10011549  # push esi; call [0x10013064] 
0x100105c0  # push esi; call [0x10013070] 
0x1001195d  # push esi; call [0x1001308C] 
0x100114fe  # push esi; call edi; add esp, 0x08; push 0xFFFFFFFF; call [0x100130B8] 
0x100114a7  # push edi; add al, 0x52; call [ebp-0x1C] 
0x10011934  # push edi; xor edi, edi; call [0x1001305C] 
0x10011f6e  # push edi; push eax; push esi; call [0x10013158] 
0x10010111  # push edi; push eax; call [0x1001302C]; mov esi, eax; call [0x10013070] 
0x10010111  # push edi; push eax; call [0x1001302C] 
0x100123b0  # push edi; push esi; push ebx; call eax 
0x1001193e  # push edi; push 0x00000410; call [0x10013058] 
0x100116b2  # push edi; push 0x1001F43C; lea ecx, [esp+0x24]; push 0x000000FF; push ecx; call [0x100130AC] 
0x10011986  # push edi; push 0x1001F6D4; call [0x100130A8] 
0x1001127f  # push edi; push 0x00000001; push 0x001F0FFF; call [0x10013058] 
0x10011568  # push edi; push 0x0000000C; call esi; push 0x00000208; mov ebx, eax; call esi 
0x10011568  # push edi; push 0x0000000C; call esi 
0x10010321  # push edi; mov edi, [0x10013070]; call edi 
0x1001072f  # push edi; lea ecx, [esp+0x0C]; push eax; push ecx; mov [esp+0x10], 0x00000800; call [0x10013040] 
0x10010e59  # push edi; mov [esp+0x14], 0x00000000; call [0x1001305C] 
0x10010658  # push edi; call [0x10013070] 
0x10011337  # push edi; call [0x1001308C] 
0x100114bf  # push edi; call esi 
0x10012379  # pop ecx; pop esi; push 0x00000001; pop eax; retn 0x000C 
0x10012419  # pop ebx; pop ebp; retn 0x000C 
0x10012224  # pop ebx; pop esi; pop edi; retn 0x0010 
0x1001104d  # pop ebx; je 0x10011057; push eax; call [0x10013054] 
0x1001167c  # pop ebx; add esp, 0x00000100; ret 
0x100106ad  # pop ebx; add esp, 0x00000800; ret 
0x100108f7  # pop ebx; add esp, 0x00001000; ret 
0x10011ce4  # pop ebx; add esp, 0x00001128; ret 
0x10011ec7  # pop ebx; mov [ecx], eax; mov eax, 0xFFFFFFF9; add esp, 0x00001128; ret 
0x100114d3  # pop ebx; mov esp, ebp; pop ebp; retn 0x0004 
0x10011939  # pop esp; xor byte [ecx], al; adc byte [eax+0x57], dl; push 0x00000410; call [0x10013058] 
0x10010e64  # pop esp; xor byte [ecx], al; adc byte [ebx+0x016A55E8], cl; push 0x001F0FFF; call [0x10013058] 
0x100116df  # pop ebp; xor eax, eax; pop ebx; add esp, 0x00000100; ret 
0x1001167b  # pop ebp; pop ebx; add esp, 0x00000100; ret 
0x1001104a  # pop ebp; test eax, eax; pop ebx; je 0x10011057; push eax; call [0x10013054] 
0x100106bd  # pop esi; xor eax, eax; pop ebx; add esp, 0x00000800; ret 
0x10012418  # pop esi; pop ebx; pop ebp; retn 0x000C 
0x10011778  # pop esi; pop ebx; add esp, 0x00000100; ret 
0x10011ec6  # pop esi; pop ebx; mov [ecx], eax; mov eax, 0xFFFFFFF9; add esp, 0x00001128; ret 
0x100114d2  # pop esi; pop ebx; mov esp, ebp; pop ebp; retn 0x0004 
0x10012293  # pop esi; pop ebx; retn 0x0010 
0x100116de  # pop esi; pop ebp; xor eax, eax; pop ebx; add esp, 0x00000100; ret 
0x1001167a  # pop esi; pop ebp; pop ebx; add esp, 0x00000100; ret 
0x1001a96f  # add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7d7  # add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A7E8+edx*4] 
0x10020e61  # add byte [eax], al; add byte [eax], al; pop ebx; leave; retn 0x0004 
0x100237c5  # add byte [eax], al; add byte [eax], al; mov [esp+0x0C], ebp; lea ebp, [esp+0x0C]; push eax; ret 
0x1002025f  # add byte [eax], al; add byte [eax], al; leave; retn 0x0004 
0x100201a0  # add byte [eax], al; add byte [eax], al; leave; retn 0x000C 
0x1001ffd8  # add byte [eax], al; add byte [eax], al; leave; ret 
0x1001a970  # add byte [eax], al; add byte [ebx], al; lock add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7d8  # add byte [eax], al; add byte [ebx], al; lock add edi, eax; jmp [0x1001A7E8+edx*4] 
0x1001d312  # add byte [eax], al; add byte [edi], cl; mov bh, 0xC7; push eax; call [0x100250C0] 
0x10023ed4  # add byte [eax], al; add byte [ebx], ch; retn 0xC103 
0x10019d2d  # add byte [eax], al; add byte [ebx], dh; rol byte [ebx-0x62F0EF03], cl; retn 0x234A 
0x1001417b  # add byte [eax], al; add byte [ebx], bh; jne 0x1001418E; call ebp 
0x10013043  # add byte [eax], al; add byte [esi-0x75], dl; je 0x1001306E; or byte [ebp+0x500D75F6], al; call [0x10025270] 
0x100121ac  # add byte [eax], al; add byte [ecx+0x59], bl; ret 
0x100122ec  # add byte [eax], al; add byte [ecx+0x5E], bl; ret 
0x10015391  # add byte [eax], al; add byte [ecx+0x5F], bl; push [esi]; call [0x10025074] 
0x10020e62  # add byte [eax], al; add byte [ebx-0x37], bl; retn 0x0004 
0x10012181  # add byte [eax], al; add byte [edi+0x5E], bl; pop ebx; leave; ret 
0x100108cf  # add byte [eax], al; add byte [edi-0x75], bl; ret 
0x10013312  # add byte [eax], al; add byte [edi-0x3D], bl; push [esp+0x08]; mov [0x10036708], edi; call [0x1002527C] 
0x10020ede  # add byte [eax], al; add byte [eax-0x50], ch; sub al, 0x00; adc al, ch; pop edi; retn 0xFFFE 
0x1001d324  # add byte [eax], al; add byte [edx+0x01], ch; push [0x100369EC]; call [0x100250C4] 
0x10014ca6  # add byte [eax], al; add byte [esi+ecx-0x7D], dh; jnl 0x10014CA6; add byte [ebp+0x08], dh; push edi; call [0x10032D34] 
0x100160a3  # add byte [eax], al; add byte [ebx-0x3974F33C], al; pop esi; pop ebx; pop ebp; ret 
0x10010431  # add byte [eax], al; add byte [ebx+0x00C630C4], al; or al, byte [eax-0x74FFFEA0]; ret 
0x10011ad3  # add byte [eax], al; add byte [ebx+0x5B5FFFC8], al; leave; ret 
0x1001e231  # add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x1001a642  # add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; ret 
0x100241c5  # add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebp; ret 
0x100238a5  # add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; ret 
0x1001a6e0  # add byte [eax], al; add byte [ebx+0x0C7204E9], al; and eax, 0x03; add ecx, eax; jmp [0x1001A700+eax*4] 
0x10014172  # add byte [eax], al; add byte [ebx-0x7AF0FE08], al; add [eax], 0xF33B0000; jne 0x1001418E; call ebp 
0x1001a870  # add byte [eax], al; add byte [ebx+0x0C7204F9], al; and eax, 0x03; sub ecx, eax; jmp [0x1001A888+eax*4] 
0x10012317  # add byte [eax], al; add byte [ebp+0x057459C0], al; or eax, 0xFFFFFFFF; pop esi; ret 
0x100202c3  # add byte [eax], al; add byte [ebp-0x74F78B40], al; adc byte [edx+0x01], ch; mov ecx, eax; call [edx]; ret 
0x100202c3  # add byte [eax], al; add byte [ebp-0x74F78B40], al; adc byte [edx+0x01], ch; mov ecx, eax; call [edx] 
0x100237c6  # add byte [eax], al; add byte [ecx-0x72F3DB94], cl; insb; and al, 0x0C; push eax; ret 
0x10015261  # add byte [eax], al; add byte [ebx+0x3084F50C], cl; add edx, [eax]; pop esi; mov [eax], ecx; ret 
0x10017bb4  # add byte [eax], al; add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; ret 
0x10013a55  # add byte [eax], al; add byte [ebx-0x3B7CF3BB], cl; sub al, 0x5E; leave; ret 
0x1001393e  # add byte [eax], al; add byte [ebx-0x3B7CF3BB], cl; xor byte [esi-0x37], bl; ret 
0x1001a32b  # add byte [eax], al; add byte [ebx+0x5E5FFC45], cl; pop ebx; leave; ret 
0x10011a0f  # add byte [eax], al; add byte [ebp-0x72AF1BBB], cl; inc ebp; hlt; push eax; call [0x10025230] 
0x1001769d  # add byte [eax], al; add byte [ebp-0x0000A37B], cl; call [eax-0x18] 
0x1001d96c  # add byte [eax], al; add byte [ebp-0x0000937B], cl; inc edi; test [edi+edi*8-0x01], ebp; call [eax+eax-0x00B00000] 
0x100144f1  # add byte [eax], al; add byte [ecx+0x10036814], ah; pop ecx; test eax, eax; je 0x10014500; call eax 
0x10011f86  # add byte [eax], al; add byte [ebx+0x1003712C], bh; push ebx; call [0x1002524C] 
0x10011d19  # add byte [eax], al; add byte [edi+0x1003712C], bh; push edi; call [0x1002524C] 
0x10012fcd  # add byte [eax], al; add bl, al; push esi; push edi; call [0x100250B0] 
0x10015254  # add byte [eax], al; add bh, al; add byte [0x5E000000], cl; ret 
0x10020260  # add byte [eax], al; add cl, cl; retn 0x0004 
0x100201a1  # add byte [eax], al; add cl, cl; retn 0x000C 
0x1001ffd9  # add byte [eax], al; add cl, cl; ret 
0x10014502  # add byte [eax], al; add al, ch; add al, byte [eax]; add byte [eax], al; pop ecx; ret 
0x10024562  # add byte [eax], al; add al, ch; cmp byte [0x2083FFFF], cl; add byte [ebx-0x3D740036], al; pop esi; ret 
0x10015ff9  # add byte [eax], al; add al, ch; mov eax, [0x83FFFFF2]; and byte [eax], al; or eax, 0xFFFFFFFF; ret 
0x10022534  # add byte [eax], al; add cl, ch; add [eax], eax; add byte [eax], al; ret 
0x10017e90  # add byte [eax], al; add bl, ch; ret 
0x10017c17  # add byte [eax], al; add dh, dh; ret 
0x100153c4  # add byte [eax], al; add bh, bh; adc eax, 0x1002527C; ret 
0x1001ac1e  # add byte [eax], al; add bh, bh; jbe 0x1001AC7C; push 0x00000008; call ebx 
0x10019cbd  # add byte [eax], al; add [eax], eax; push 0x00001000; push ebx; push edi; call ebp 
0x10019e36  # add byte [eax], al; add eax, [esi+0x10]; push 0x00001000; push eax; call [0x100252BC] 
0x1001a971  # add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7d9  # add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A7E8+edx*4] 
0x1001ae4e  # add byte [eax], al; add al, 0x00; pop ebx; je 0x1001AE58; or ah, 0x10; ret 
0x1001adcb  # add byte [eax], al; add al, 0x00; ret 
0x1001ae89  # add byte [eax], al; or byte [eax], al; ret 
0x100143d9  # add byte [eax], al; sete al; push eax; call [0x100252B8] 
0x10020343  # add byte [eax], al; movzx eax, byte [eax]; pop esi; ret 
0x1001d313  # add byte [eax], al; movzx eax, di; push eax; call [0x100250C0] 
0x10019416  # add byte [eax], al; adc byte [eax], al; push edi; call [0x100252E0] 
0x1001445d  # add byte [eax], al; adc byte [eax], al; push [esi]; call edi 
0x1001703a  # add byte [eax], al; xor eax, eax; pop ebx; leave; ret 
0x100154cc  # add byte [eax], al; cmp [0x10036898], ebx; je 0x10015522; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001417c  # add byte [eax], al; cmp esi, ebx; jne 0x1001418E; call ebp 
0x10019ca8  # add byte [eax], al; inc eax; add byte [edx+0x00], ch; call ebp 
0x10014336  # add byte [eax], al; push eax; push ebx; call [0x10025298] 
0x1001a095  # add byte [eax], al; push eax; push esi; mov [ebp-0x08], eax; call [0x100252E0] 
0x1001d4bb  # add byte [eax], al; push eax; push esi; call [0x10036A0C] 
0x100142d2  # add byte [eax], al; push eax; push 0x100269A8; call [0x100252AC] 
0x10014574  # add byte [eax], al; push eax; push 0x00000000; call [0x10025298] 
0x10017059  # add byte [eax], al; push eax; mov byte [ebp+0x08], bl; mov byte [ebp+0x09], 0x3A; mov byte [ebp+0x0A], 0x2E; call [0x100252D0] 
0x1001d97d  # add byte [eax], al; push eax; call [0x100252B0] 
0x10019e3e  # add byte [eax], al; push eax; call [0x100252BC] 
0x10019868  # add byte [eax], al; push ecx; call [0x100252BC] 
0x10018fc7  # add byte [eax], al; push ebx; push ecx; call esi 
0x10019cc4  # add byte [eax], al; push ebx; push edi; call ebp 
0x10013ef9  # add byte [eax], al; push esi; push ebx; call [0x10025298] 
0x100187e4  # add byte [eax], al; push esi; push edi; call [0x100252DC] 
0x1001996c  # add byte [eax], al; push esi; call [0x100252E4] 
0x1001bbdd  # add byte [eax], al; push esi; push [ebp+0x20]; call [0x1002520C] 
0x10018a33  # add byte [eax], al; push edi; push esi; call [0x100252DC] 
0x100194a4  # add byte [eax], al; push edi; call [0x100252E0] 
0x10018d44  # add byte [eax], al; pop eax; ret 
0x10013633  # add byte [eax], al; pop ecx; xor edi, edi; ret 
0x10011b9c  # add byte [eax], al; pop ecx; push eax; call [0x10025164] 
0x10011b8d  # add byte [eax], al; pop ecx; push eax; call [0x10025168] 
0x10023a91  # add byte [eax], al; pop ecx; pop ecx; pop esi; pop ebp; ret 
0x100122ed  # add byte [eax], al; pop ecx; pop esi; ret 
0x10023ccc  # add byte [eax], al; pop ecx; pop edi; pop esi; leave; ret 
0x10015392  # add byte [eax], al; pop ecx; pop edi; push [esi]; call [0x10025074] 
0x1001d461  # add byte [eax], al; pop ecx; mov [0x100369F4], eax; push 0x00000001; push 0x1001D491; call [0x100250B8] 
0x1001d6c5  # add byte [eax], al; pop ecx; mov [0x100369F4], eax; push 0x00000001; push 0x1001D6EB; call [0x100250B8] 
0x1001acaf  # add byte [eax], al; pop ecx; leave; ret 
0x10012f88  # add byte [eax], al; pop ecx; call [0x10025260] 
0x10013ed6  # add byte [eax], al; pop ebx; ret 
0x10020e63  # add byte [eax], al; pop ebx; leave; retn 0x0004 
0x100242f0  # add byte [eax], al; pop esi; pop ebx; leave; ret 
0x1001525b  # add byte [eax], al; pop esi; ret 
0x100202b6  # add byte [eax], al; pop esi; leave; ret 
0x1002181a  # add byte [eax], al; pop edi; pop esi; pop ebx; leave; retn 0x0004 
0x10012182  # add byte [eax], al; pop edi; pop esi; pop ebx; leave; ret 
0x10013313  # add byte [eax], al; pop edi; ret 
0x10023b4f  # add byte [eax], al; or ax, 0x0000FFFF; pop esi; pop ebx; pop ebp; ret 
0x10021502  # add byte [eax], al; mov ax, word [eax]; pop esi; ret 
0x10019413  # add byte [eax], al; push 0x00100000; push edi; call [0x100252E0] 
0x1001445a  # add byte [eax], al; push 0x00100000; push [esi]; call edi 
0x10019ca5  # add byte [eax], al; push 0x00400000; push 0x00000000; call ebp 
0x10018fc2  # add byte [eax], al; push 0x00004000; push ebx; push ecx; call esi 
0x1001949f  # add byte [eax], al; push 0x00008000; push edi; call [0x100252E0] 
0x100199c5  # add byte [eax], al; push 0x00008000; push [ebp-0x0C]; call [0x100252E4] 
0x100144b3  # add byte [eax], al; push 0x00000000; push eax; call [0x100252BC] 
0x10019d84  # add byte [eax], al; push 0x00000000; push edi; call [0x100252BC] 
0x10018d03  # add byte [eax], al; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x10014468  # add byte [eax], al; push 0x00000000; push [esi]; call edi 
0x10019db5  # add byte [eax], al; push 0x00000000; push [esi+0x10]; call [0x100252BC] 
0x1001d916  # add byte [eax], al; push 0x00000001; or ah, 0x04; push eax; call [0x10036A0C] 
0x1001d325  # add byte [eax], al; push 0x00000001; push [0x100369EC]; call [0x100250C4] 
0x100193f1  # add byte [eax], al; push 0x00000008; lea eax, [eax+eax*4]; push [0x10038144]; lea esi, [ecx+eax*4]; call [0x10025258] 
0x10014ca7  # add byte [eax], al; je 0x10014CB9; cmp [ebp-0x08], 0x00000000; jne 0x10014CB9; push edi; call [0x10032D34] 
0x10019c59  # add byte [eax], al; jnbe 0x10019C66; push 0x00000001; mov [0x100355AC], eax; pop eax; ret 
0x10022f69  # add byte [eax], al; jl 0x10022F71; movzx eax, word [ebp-0x02]; leave; ret 
0x10011840  # add byte [eax], al; and [eax], 0x00000000; or eax, 0xFFFFFFFF; pop esi; ret 
0x10012305  # add byte [eax], al; add esp, 0x0C; mov eax, edi; pop edi; pop esi; ret 
0x10019905  # add byte [eax], al; add esp, 0x0C; dec [0x1003711C]; and [0x10037118], 0x00000000; ret 
0x10011772  # add byte [eax], al; add esp, 0x10; push eax; call [0x10025154] 
0x10011681  # add byte [eax], al; add esp, 0x10; mov eax, edi; pop edi; pop esi; ret 
0x100108ee  # add byte [eax], al; add esp, 0x14; ret 
0x1001246b  # add byte [eax], al; add esp, 0x18; mov eax, esi; pop esi; pop ebp; ret 
0x100113a9  # add byte [eax], al; add esp, 0x1C; test eax, eax; jne 0x100113B4; leave; ret 
0x10011340  # add byte [eax], al; add esp, 0x20; pop edi; pop esi; ret 
0x1001ba7d  # add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x10011694  # add byte [eax], al; or eax, 0xFFFFFFFF; pop esi; ret 
0x10011ad4  # add byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop ebx; leave; ret 
0x1001a643  # add byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop esi; pop ebx; ret 
0x100241c6  # add byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop esi; pop ebp; ret 
0x100238a6  # add byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop esi; ret 
0x1001a6e1  # add byte [eax], al; sub ecx, 0x04; jc 0x1001A6F4; and eax, 0x03; add ecx, eax; jmp [0x1001A700+eax*4] 
0x10014173  # add byte [eax], al; cmp eax, 0x01; jne 0x100141FF; cmp esi, ebx; jne 0x1001418E; call ebp 
0x1001a871  # add byte [eax], al; cmp ecx, 0x04; jc 0x1001A884; and eax, 0x03; sub ecx, eax; jmp [0x1001A888+eax*4] 
0x100131e3  # add byte [eax], al; test eax, eax; pop ecx; je 0x100131F3; push esi; call [0x100366C4] 
0x100121d4  # add byte [eax], al; test eax, eax; pop ecx; jne 0x100121B9; xor eax, eax; ret 
0x10014412  # add byte [eax], al; test eax, eax; jne 0x10014427; push [0x10038144]; call [0x100252B4] 
0x100237c7  # add byte [eax], al; mov [esp+0x0C], ebp; lea ebp, [esp+0x0C]; push eax; ret 
0x1001188e  # add byte [eax], al; mov eax, [ebx]; pop ecx; push [eax+edi]; call [0x10025180] 
0x10015262  # add byte [eax], al; mov ecx, [0x10033084+esi*8]; pop esi; mov [eax], ecx; ret 
0x10017bb5  # add byte [eax], al; mov eax, [ecx+0x08]; and [ecx+0x04], 0x00000000; mov [ecx], eax; ret 
0x10013a56  # add byte [eax], al; mov eax, [ebp+0x0C]; add esp, 0x2C; pop esi; leave; ret 
0x1001393f  # add byte [eax], al; mov eax, [ebp+0x0C]; add esp, 0x30; pop esi; leave; ret 
0x10021fca  # add byte [eax], al; mov ecx, [ebp-0x0C]; pop esi; mov [fs:0x00000000], ecx; leave; ret 
0x1002028e  # add byte [eax], al; mov eax, esi; pop esi; leave; ret 
0x10023d3f  # add byte [eax], al; mov eax, esi; pop edi; pop esi; retn 0x0004 
0x1002012e  # add byte [eax], al; mov eax, esi; pop edi; pop esi; ret 
0x10020304  # add byte [eax], al; mov eax, esi; pop edi; pop esi; leave; ret 
0x1001f098  # add byte [eax], al; mov esi, eax; add esp, 0x14; cmp esi, ebx; jne 0x1001F0F0; call [0x100250B0] 
0x10011a10  # add byte [eax], al; lea eax, [ebp-0x1C]; push eax; lea eax, [ebp-0x0C]; push eax; call [0x10025230] 
0x1001b70e  # add byte [eax], al; lea eax, [ebp-0x14]; push esi; push eax; push [0x10036EDC]; call [0x100250DC] 
0x10014569  # add byte [eax], al; lea eax, [ebp-0x000001A4]; push 0x00000104; push eax; push 0x00000000; call [0x10025298] 
0x1001d96d  # add byte [eax], al; lea eax, [ebp-0x00000094]; mov [ebp-0x00000094], 0x00000094; push eax; call [0x100252B0] 
0x100142c7  # add byte [eax], al; lea eax, [ebp-0x0000122C]; push 0x00001090; push eax; push 0x100269A8; call [0x100252AC] 
0x100144f2  # add byte [eax], al; mov eax, [0x10036814]; pop ecx; test eax, eax; je 0x10014500; call eax 
0x10012fa3  # add byte [eax], al; mov eax, [0x10032D20]; cmp eax, 0xFFFFFFFF; je 0x10012FBD; push eax; call [0x1002526C] 
0x10011f87  # add byte [eax], al; mov ebx, 0x1003712C; push ebx; call [0x1002524C] 
0x10013eef  # add byte [eax], al; mov esi, 0x1003670C; push 0x00000104; push esi; push ebx; call [0x10025298] 
0x10011d1a  # add byte [eax], al; mov edi, 0x1003712C; push edi; call [0x1002524C] 
0x1001985d  # add byte [eax], al; shl ecx, 0x0F; add ecx, [eax+0x0C]; push 0x00008000; push ecx; call [0x100252BC] 
0x100229bc  # add byte [eax], al; retn 0x0004 
0x10022230  # add byte [eax], al; retn 0x0008 
0x10015282  # add byte [eax], al; mov [eax], 0x00000008; pop esi; ret 
0x1001168e  # add byte [eax], al; mov [eax], 0x00000009; or eax, 0xFFFFFFFF; pop esi; ret 
0x10015255  # add byte [eax], al; mov [eax], 0x0000000D; pop esi; ret 
0x1001178e  # add byte [eax], al; mov [eax], 0x0000000D; call [0x100250B0] 
0x1001528f  # add byte [eax], al; mov [eax], 0x00000016; pop esi; ret 
0x10011cd1  # add byte [eax], al; mov [eax], 0x00000016; or eax, 0xFFFFFFFF; pop esi; ret 
0x100231ba  # add byte [eax], al; mov [esi], 0x10027B58; mov eax, esi; pop esi; retn 0x0004 
0x10020261  # add byte [eax], al; leave; retn 0x0004 
0x100201a2  # add byte [eax], al; leave; retn 0x000C 
0x1001546c  # add byte [eax], al; leave; ret 
0x10012330  # add byte [eax], al; neg eax; pop ecx; pop esi; sbb eax, eax; ret 
0x10017079  # add byte [eax], al; call [0x10025220] 
0x10012f50  # add byte [eax], al; call [0x10025268] 
0x100153c5  # add byte [eax], al; call [0x1002527C]; ret 
0x100153c5  # add byte [eax], al; call [0x1002527C] 
0x100142a3  # add byte [eax], al; call [0x100252B0] 
0x10014921  # add byte [eax], al; jmp [0x10015025+eax*4] 
0x1001db3d  # add byte [eax], al; jmp [0x1001DF7D+eax*4] 
0x1001b679  # add byte [eax], al; jmp [0x100250D4] 
0x1001b68e  # add byte [eax], al; jmp [0x100250D8] 
0x1001d383  # add byte [eax], al; push [0x10036A08]; call [0x10036A0C] 
0x1001ba5c  # add byte [eax], al; push [0x100368AC]; call [0x1002520C] 
0x1001d368  # add byte [eax], al; push [0x100369EC]; call [0x10036A0C] 
0x1001e98a  # add byte [eax], al; push [ebp+0x18]; call [0x1002520C] 
0x100189ae  # add byte [eax], al; push [ebp+0x20]; call [0x1002520C] 
0x100199ca  # add byte [eax], al; push [ebp-0x0C]; call [0x100252E4] 
0x1001ac1f  # add byte [eax], al; push [esi+0x58]; push 0x00000008; call ebx 
0x10013194  # add byte [eax], al; call eax 
0x100187e2  # add byte [ecx], al; add byte [eax], al; push esi; push edi; call [0x100252DC] 
0x10018a31  # add byte [ecx], al; add byte [eax], al; push edi; push esi; call [0x100252DC] 
0x10019cbe  # add byte [ecx], al; add byte [eax+0x00], ch; adc byte [eax], al; add byte [ebx+0x57], dl; call ebp 
0x1001a972  # add byte [ebx], al; lock add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7da  # add byte [ebx], al; lock add edi, eax; jmp [0x1001A7E8+edx*4] 
0x1001ae4f  # add byte [eax+eax], al; pop ebx; je 0x1001AE58; or ah, 0x10; ret 
0x1001adcc  # add byte [eax+eax], al; ret 
0x10015105  # add byte [ebx+ecx*4], al; add byte [esi-0x75], ah; inc eax; cld; ret 
0x100150f5  # add byte [eax], cl; mov ecx, [eax]; mov eax, [ecx-0x08]; mov edx, [ecx-0x04]; ret 
0x10011ad1  # add byte [ecx], cl; add byte [eax], al; add byte [ebx+0x5B5FFFC8], al; leave; ret 
0x1001a640  # add byte [ecx], cl; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; ret 
0x1001c13f  # add byte [edx], cl; add byte [eax], al; add byte [ebx+0x5D5BFFC8], al; ret 
0x10015258  # add byte [0x5E000000], cl; ret 
0x10020344  # add byte [edi], cl; mov dh, 0x00; pop esi; ret 
0x1001d314  # add byte [edi], cl; mov bh, 0xC7; push eax; call [0x100250C0] 
0x100143d7  # add byte [eax], dl; add byte [eax], al; sete al; push eax; call [0x100252B8] 
0x1001a093  # add byte [eax], dl; add byte [eax], al; push eax; push esi; mov [ebp-0x08], eax; call [0x100252E0] 
0x10019e3c  # add byte [eax], dl; add byte [eax], al; push eax; call [0x100252BC] 
0x10019cc2  # add byte [eax], dl; add byte [eax], al; push ebx; push edi; call ebp 
0x1001949d  # add byte [eax], dl; add byte [eax], al; push 0x00008000; push edi; call [0x100252E0] 
0x1001445e  # add byte [eax], dl; add bh, bh; call edi 
0x1001e22f  # add byte [esi], dl; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x100241c3  # add byte [esi], dl; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebp; ret 
0x100238a3  # add byte [esi], dl; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; ret 
0x10019411  # add byte [eax], ah; add byte [eax], al; push 0x00100000; push edi; call [0x100252E0] 
0x10019ca3  # add byte [eax], ah; add byte [eax], al; push 0x00400000; push 0x00000000; call ebp 
0x100241ae  # add byte [ebx], ah; retn 0xC483 
0x1001e89c  # add byte [edx], ch; ret 
0x10023ed6  # add byte [ebx], ch; retn 0xC103 
0x100214df  # add byte [ebx], dh; rol bl, 0x66; or eax, 0x56C3FFFF; mov esi, ecx; mov eax, [esi]; call [eax+0x10] 
0x10020325  # add byte [ebx], dh; rol bl, 0x83; enter 0xC3FF, 0x56; mov esi, ecx; mov eax, [esi]; call [eax+0x10] 
0x10020480  # add byte [ebx], dh; rol bl, 0xC2; add al, 0x00; mov eax, ecx; mov [eax], 0x10027938; retn 0x0004 
0x10021664  # add byte [ebx], dh; rol bl, 0xC2; add al, 0x00; mov eax, ecx; mov [eax], 0x100279D4; retn 0x0004 
0x10019d2f  # add byte [ebx], dh; rol byte [ebx-0x62F0EF03], cl; retn 0x234A 
0x100154cd  # add byte [ecx], bh; sbb eax, 0x10036898; je 0x10015522; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x10010efe  # add byte [edx], bh; retn 0xF074 
0x1001ccca  # add byte [ebx], bh; ret 
0x1001417d  # add byte [ebx], bh; jne 0x1001418E; call ebp 
0x1001eb9f  # add byte [ebx], bh; idiv [edi+0x41]; lea eax, [ebp-0x3C]; push eax; push [ebp+0x20]; call [0x100250DC] 
0x10018fc5  # add byte [eax+0x00], al; add byte [ebx+0x51], dl; call esi 
0x10014458  # add byte [eax+0x00], al; add byte [eax+0x00], ch; add byte [eax], dl; add bh, bh; call edi 
0x10019ca9  # add byte [eax+0x00], al; push 0x00000000; call ebp 
0x10015769  # add byte [eax-0x09], al; fistp [ebx]; fcomi st0, st7; shl [ebx], cl; fcom [ebx+0x56]; call [0x100252C4] 
0x100236bc  # add byte [eax+0x02], dl; adc bh, bh; and eax, 0x10025054; jmp [0x10025050] 
0x10014337  # add byte [eax+0x53], dl; call [0x10025298] 
0x1001a096  # add byte [eax+0x56], dl; mov [ebp-0x08], eax; call [0x100252E0] 
0x1001d4bc  # add byte [eax+0x56], dl; call [0x10036A0C] 
0x100142d3  # add byte [eax+0x68], dl; test al, 0x69; add dl, byte [eax]; call [0x100252AC] 
0x10011960  # add byte [eax-0x75], dl; add edi, edi; xor al, 0x38; call [0x10025178] 
0x10016d78  # add byte [eax-0x75], dl; pop es; push [ebp+0x10]; push edx; push [eax+esi]; call [0x10025174] 
0x100205b7  # add byte [eax-0x73], dl; inc ebp; call [eax-0x73] 
0x10020129  # add byte [eax-0x18], dl; inc edx; sbb eax, 0xC68B0000; pop edi; pop esi; ret 
0x100232e4  # add byte [ecx+0x02], dl; adc bh, bh; and eax, 0x10025104; jmp [0x10025108] 
0x10023464  # add byte [edx+0x02], dl; adc bh, bh; and eax, 0x10025204; jmp [0x10025208] 
0x1002323c  # add byte [ebx+0x02], dl; adc bh, bh; and eax, 0x10025314; jmp [0x100252FC] 
0x10018fc8  # add byte [ebx+0x51], dl; call esi 
0x10019cc5  # add byte [ebx+0x57], dl; call ebp 
0x1001e2bb  # add byte [ebx-0x18], dl; fbstp [eax-0x01]; call [edi-0x01] 
0x10013efa  # add byte [esi+0x53], dl; call [0x10025298] 
0x10018b33  # add byte [esi+0x56], dl; push [ebp-0x20]; push [ebp-0x1C]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252D8] 
0x100187e5  # add byte [esi+0x57], dl; call [0x100252DC] 
0x10013045  # add byte [esi-0x75], dl; je 0x1001306E; or byte [ebp+0x500D75F6], al; call [0x10025270] 
0x1001bbde  # add byte [esi-0x01], dl; jne 0x1001BC03; call [0x1002520C] 
0x10018a34  # add byte [edi+0x56], dl; call [0x100252DC] 
0x100204cb  # add byte [edi-0x18], dl; dec esp; ret 
0x1001fa44  # add byte [ecx+0x33], bl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x10011b8e  # add byte [ecx+0x50], bl; call [0x10025168] 
0x10015378  # add byte [ecx+0x57], bl; jne 0x10015387; call [0x10025090] 
0x1001c68a  # add byte [ecx+0x59], bl; xor eax, eax; pop esi; ret 
0x10023a92  # add byte [ecx+0x59], bl; pop esi; pop ebp; ret 
0x100128fc  # add byte [ecx+0x59], bl; pop edi; pop esi; pop ebx; leave; ret 
0x100122ee  # add byte [ecx+0x5E], bl; ret 
0x10023ccd  # add byte [ecx+0x5F], bl; pop esi; leave; ret 
0x10015393  # add byte [ecx+0x5F], bl; push [esi]; call [0x10025074]; pop esi; pop ebp; ret 
0x10015393  # add byte [ecx+0x5F], bl; push [esi]; call [0x10025074] 
0x10015df3  # add byte [ecx+0x75], bl; or eax, 0x500C468D; call [0x10025090] 
0x10015d9d  # add byte [ecx-0x7D], bl; or al, 0x00; mov eax, edi; pop edi; pop esi; ret 
0x1001547d  # add byte [ecx-0x7B], bl; rcr byte [ecx+0x75], 0x06; mov ax, word [ebp+0x08]; leave; ret 
0x10012168  # add byte [ecx-0x3D], bl; push esi; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x1001476d  # add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025074]; ret 
0x1001476d  # add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025074] 
0x100147bf  # add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025078]; ret 
0x100147bf  # add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025078] 
0x1001478c  # add byte [ecx-0x3D], bl; mov eax, [esp+0x08]; add eax, 0x20; push eax; call [0x10025074]; ret 
0x1001478c  # add byte [ecx-0x3D], bl; mov eax, [esp+0x08]; add eax, 0x20; push eax; call [0x10025074] 
0x100147de  # add byte [ecx-0x3D], bl; mov eax, [esp+0x08]; add eax, 0x20; push eax; call [0x10025078]; ret 
0x100147de  # add byte [ecx-0x3D], bl; mov eax, [esp+0x08]; add eax, 0x20; push eax; call [0x10025078] 
0x1001acb0  # add byte [ecx-0x37], bl; ret 
0x10011fcc  # add byte [ecx-0x15], bl; pop es; push ebx; call [0x10025248] 
0x10011d5f  # add byte [ecx-0x15], bl; pop es; push edi; call [0x10025248] 
0x10017c08  # add byte [ecx-0x0A], bl; ret 
0x100153ed  # add byte [ebx-0x3D], bl; push esi; mov esi, 0x1003712C; push edi; push esi; call [0x1002524C] 
0x10020e64  # add byte [ebx-0x37], bl; retn 0x0004 
0x100242f1  # add byte [esi+0x5B], bl; leave; ret 
0x100189e9  # add byte [esi+0x75], bl; add eax, 0x0424442B; ret 
0x100206f3  # add byte [esi-0x3D], bl; push edi; mov edi, [esi]; mov ecx, esi; call [edi+0x14] 
0x100202b7  # add byte [esi-0x37], bl; ret 
0x1001adc1  # add byte [edi+0x5D], bl; test bh, 0x10; pop ebx; je 0x1001ADCF; or eax, 0x00040000; ret 
0x1002181b  # add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0004 
0x10020e5b  # add byte [edi+0x5E], bl; mov [fs:0x00000000], ecx; pop ebx; leave; retn 0x0004 
0x100108d1  # add byte [edi-0x75], bl; ret 
0x1001033c  # add byte [edi-0x3D], bl; mov word [edi], dx; mov eax, [esp+0x08]; pop edi; ret 
0x10013314  # add byte [edi-0x3D], bl; push [esp+0x08]; mov [0x10036708], edi; call [0x1002527C]; pop edi; ret 
0x10013314  # add byte [edi-0x3D], bl; push [esp+0x08]; mov [0x10036708], edi; call [0x1002527C] 
0x1001d864  # add byte [esi-0x007F], ah; or eax, 0x10036A04; add al, 0x01; call [0x100250B4] 
0x10015108  # add byte [esi-0x75], ah; inc eax; cld; ret 
0x1001445b  # add byte [eax+0x00], ch; add byte [eax], dl; add bh, bh; call edi 
0x10019ca6  # add byte [eax+0x00], ch; add byte [eax+0x00], al; push 0x00000000; call ebp 
0x10019cc0  # add byte [eax+0x00], ch; adc byte [eax], al; add byte [ebx+0x57], dl; call ebp 
0x10018fc3  # add byte [eax+0x00], ch; inc eax; add byte [eax], al; push ebx; push ecx; call esi 
0x100125ef  # add byte [eax+0x00], ch; inc esi; ret 
0x100194a0  # add byte [eax+0x00], ch; add byte [eax], 0x00; push edi; call [0x100252E0] 
0x100199c6  # add byte [eax+0x00], ch; add byte [eax], 0x00; push [ebp-0x0C]; call [0x100252E4] 
0x100237a4  # add byte [eax+0x7B], ch; add dl, byte [eax]; retn 0x0004 
0x10020ee0  # add byte [eax-0x50], ch; sub al, 0x00; adc al, ch; pop edi; retn 0xFFFE 
0x100131f8  # add byte [eax-0x4D], ch; xor [ecx], eax; adc bh, bh; adc eax, 0x10025278; mov [0x100366C4], eax; ret 
0x100144b4  # add byte [edx+0x00], ch; push eax; call [0x100252BC] 
0x10019d85  # add byte [edx+0x00], ch; push edi; call [0x100252BC] 
0x1001efb4  # add byte [edx+0x00], ch; push 0xFFFFFFFF; push edi; push 0x00000001; push [0x100368AC]; call [0x10025208] 
0x10018d04  # add byte [edx+0x00], ch; push [0x10038144]; call [0x10025258] 
0x10014469  # add byte [edx+0x00], ch; push [esi]; call edi 
0x10019db6  # add byte [edx+0x00], ch; push [esi+0x10]; call [0x100252BC] 
0x10019cab  # add byte [edx+0x00], ch; call ebp 
0x10013289  # add byte [edx+0x01], ch; pop edi; cmp [0x10036708], edi; jne 0x100132A6; push [esp+0x08]; call [0x1002518C] 
0x1001d917  # add byte [edx+0x01], ch; or ah, 0x04; push eax; call [0x10036A0C] 
0x10018d2e  # add byte [edx+0x01], ch; mov [0x10037110], eax; mov [0x10037124], ecx; mov [0x10037108], 0x00000010; pop eax; ret 
0x1001d326  # add byte [edx+0x01], ch; push [0x100369EC]; call [0x100250C4] 
0x100155d9  # add byte [edx+0x01], ch; call ebx 
0x10019cb9  # add byte [edx+0x04], ch; mov ebx, 0x00010000; push 0x00001000; push ebx; push edi; call ebp 
0x100193f2  # add byte [edx+0x08], ch; lea eax, [eax+eax*4]; push [0x10038144]; lea esi, [ecx+eax*4]; call [0x10025258] 
0x1001efb6  # add byte [edx-0x01], ch; push edi; push 0x00000001; push [0x100368AC]; call [0x10025208] 
0x1001b815  # add byte [edi+0x03], ch; adc bl, ch; sbb al, 0xF6; retn 0x7402 
0x10023ce9  # add byte [eax+0x7B], dh; add dl, byte [eax]; ret 
0x10016bd8  # add byte [edx+0x52], dh; cmp ax, 0x0000005A; jnbe 0x10016C2D; add eax, 0x20; leave; ret 
0x10015460  # add byte [edx+0x54], dh; cmp ax, 0x0000007A; jnbe 0x100154B7; add eax, 0x0000FFE0; leave; ret 
0x100153e0  # add byte [edx+0x5D], dh; cmp ax, 0x0000007A; jnbe 0x10015440; add eax, 0x0000FFE0; pop ebx; ret 
0x10013dec  # add byte [edi+eax+0x53], dh; call [0x1002508C] 
0x1001ad2e  # add byte [ebx+ecx-0x7D], dh; pushad; and byte [eax], al; mov [eax+0x24], 0x0000FFFF; pop esi; ret 
0x100124fe  # add byte [ebp+ecx-0x75], dh; ret 
0x10014ca8  # add byte [esi+ecx-0x7D], dh; jnl 0x10014CA6; add byte [ebp+0x08], dh; push edi; call [0x10032D34] 
0x100164d3  # add byte [ebp+ebx-0x01], dh; jne 0x100164E5; mov esi, [0x10025228]; call esi; push [ebp-0x04]; call esi 
0x100164d3  # add byte [ebp+ebx-0x01], dh; jne 0x100164E5; mov esi, [0x10025228]; call esi 
0x1001a4db  # add byte [ebp+eax*2+0x56], dh; push ebp; lea ebp, [ebx+0x10]; call [edi+ecx*4+0x04] 
0x1001bf34  # add byte [ebp+0x04], dh; xor eax, eax; pop ebp; ret 
0x10012ca0  # add byte [ebp+0x04], dh; push 0x00000001; pop eax; ret 
0x10014cae  # add byte [ebp+0x08], dh; push edi; call [0x10032D34] 
0x1001373f  # add byte [ebp+0x13], dh; push [ebp+0x08]; push 0x00000000; push [0x10038144]; call [0x10025288] 
0x1001e1db  # add byte [ebp+0x16], dh; push edi; push 0x1001E275; call [0x100250A8] 
0x100135a9  # add byte [ebp+0x53], dh; push esi; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x10019c5a  # add byte [edi+0x09], dh; push 0x00000001; mov [0x100355AC], eax; pop eax; ret 
0x1001ba38  # add byte [edi+0x39], dh; push 0x00000001; mov byte [eax], cl; pop eax; pop ebp; ret 
0x10016bde  # add byte [edi+0x4C], dh; add eax, 0x20; leave; ret 
0x10015466  # add byte [edi+0x4E], dh; add eax, 0x0000FFE0; leave; ret 
0x100153e6  # add byte [edi+0x57], dh; add eax, 0x0000FFE0; pop ebx; ret 
0x10022f6a  # add byte [esp+eax+0x0F], bh; mov bh, 0x45; dec cl; ret 
0x10018fc0  # add byte [eax+0x00680000], al; inc eax; add byte [eax], al; push ebx; push ecx; call esi 
0x100144b1  # add byte [eax+0x006A0000], al; push eax; call [0x100252BC] 
0x10019d82  # add byte [eax+0x006A0000], al; push edi; call [0x100252BC] 
0x10014466  # add byte [eax+0x006A0000], al; push [esi]; call edi 
0x10019db3  # add byte [eax+0x006A0000], al; push [esi+0x10]; call [0x100252BC] 
0x100199c8  # add byte [eax+0x75FF0000], al; hlt; call [0x100252E4] 
0x1001f3b6  # add byte [eax+0x26837FFF], al; add byte [ecx+0x5E5F087E], cl; pop ebx; leave; ret 
0x10019d74  # add byte [ecx+0x001000C7], al; add bl, ch; fmul qword [ebx+0x6827EBC6]; add byte [eax+0x006A0000], al; push edi; call [0x100252BC] 
0x1001489c  # add byte [ebx+0x66830026], al; or byte [eax], al; pop ecx; pop esi; ret 
0x10023ce3  # add byte [ebx-0x38FFF7A0], al; add byte [eax+0x7B], dh; add dl, byte [eax]; ret 
0x1001489f  # add byte [ebx+0x59000866], al; pop esi; ret 
0x1001373b  # add byte [ebx+0x7500D87D], al; adc edi, edi; jne 0x1001374D; push 0x00000000; push [0x10038144]; call [0x10025288] 
0x100160a5  # add byte [ebx-0x3974F33C], al; pop esi; pop ebx; pop ebp; ret 
0x10012306  # add byte [ebx-0x3874F33C], al; pop edi; pop esi; ret 
0x10014a96  # add byte [ebx+0x6DE90CC4], al; add eax, 0xBE0F0000; ret 
0x10019906  # add byte [ebx+0x0DFF0CC4], al; sbb al, 0x71; add edx, [eax]; and [0x10037118], 0x00000000; ret 
0x10011682  # add byte [ebx-0x3874EF3C], al; pop edi; pop esi; ret 
0x10014f65  # add byte [ebx-0x3C09EF3C], al; or byte [edi+edx-0x0A], dh; ret 
0x100173ef  # add byte [ebx-0x077CEB3C], al; push [ebp+0x04]; or eax, eax; pop ebp; ret 
0x1001babc  # add byte [ebx-0x3F7AE73C], al; jne 0x1001BAC8; xor eax, eax; leave; ret 
0x1001246c  # add byte [ebx-0x3974E73C], al; pop esi; pop ebp; ret 
0x100135e6  # add byte [ebx+0x13EB18C4], al; push esi; push ebx; push 0x00000000; push [0x10038144]; call [0x10025284] 
0x100154a7  # add byte [ebx-0x3F7AE33C], al; mov ax, word [ebp+0x08]; je 0x100154B7; mov ax, word [ebp-0x02]; leave; ret 
0x100113aa  # add byte [ebx-0x3F7AE33C], al; jne 0x100113B4; leave; ret 
0x1001bf59  # add byte [ebx-0x3F7AE33C], al; jne 0x1001BF68; mov eax, 0x7FFFFFFF; pop ebp; ret 
0x10011341  # add byte [ebx+0x5E5F20C4], al; ret 
0x10012771  # add byte [ebx+0x016A20C4], al; pop eax; pop edi; pop esi; pop ebp; ret 
0x100126d7  # add byte [ebx-0x3C74D73C], al; pop edi; pop esi; pop ebx; ret 
0x1001cf5e  # add byte [ebx-0x3CF4CF3C], al; pop ebx; pop edi; pop esi; ret 
0x1001c9d4  # add byte [ebx-0x38F4CF3C], al; pop edi; pop ebx; pop esi; leave; ret 
0x10010433  # add byte [ebx+0x00C630C4], al; or al, byte [eax-0x74FFFEA0]; ret 
0x10011ad5  # add byte [ebx+0x5B5FFFC8], al; leave; ret 
0x1001e233  # add byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x1001a644  # add byte [ebx+0x5E5FFFC8], al; pop ebx; ret 
0x10011c1b  # add byte [ebx+0x5E5FFFC8], al; pop ebp; pop ebx; ret 
0x100241c7  # add byte [ebx+0x5E5FFFC8], al; pop ebp; ret 
0x10015f40  # add byte [ebx+0x5E5FFFC8], al; ret 
0x100164ed  # add byte [ebx+0x02EBFFC8], al; xor eax, eax; pop esi; pop ebx; leave; ret 
0x1002456c  # add byte [ebx-0x3D740036], al; pop esi; ret 
0x100116b6  # add byte [ebx-0x3B7C0035], al; or al, 0x3B; ret 
0x1001a6e2  # add byte [ebx+0x0C7204E9], al; and eax, 0x03; add ecx, eax; jmp [0x1001A700+eax*4] 
0x10014174  # add byte [ebx-0x7AF0FE08], al; add [eax], 0xF33B0000; jne 0x1001418E; call ebp 
0x1001b66b  # add byte [ebx+0x1075FEF8], al; mov [0x10036998], 0x00000001; jmp [0x100250D4] 
0x1001a872  # add byte [ebx+0x0C7204F9], al; and eax, 0x03; sub ecx, eax; jmp [0x1001A888+eax*4] 
0x10012319  # add byte [ebp+0x057459C0], al; or eax, 0xFFFFFFFF; pop esi; ret 
0x100131e4  # add byte [ebp+0x097459C0], al; push esi; call [0x100366C4] 
0x100121d5  # add byte [ebp-0x218AA640], al; xor eax, eax; ret 
0x100202c5  # add byte [ebp-0x74F78B40], al; adc byte [edx+0x01], ch; mov ecx, eax; call [edx]; ret 
0x100202c5  # add byte [ebp-0x74F78B40], al; adc byte [edx+0x01], ch; mov ecx, eax; call [edx] 
0x10015661  # add byte [ebp-0x7CC18B40], al; enter 0x5FFF, 0x5E; pop ebx; leave; ret 
0x10014413  # add byte [ebp-0x00F08A40], al; xor eax, 0x10038144; call [0x100252B4]; xor eax, eax; ret 
0x10014413  # add byte [ebp-0x00F08A40], al; xor eax, 0x10038144; call [0x100252B4] 
0x10022597  # add byte [ebp+0x6A0974C9], al; add eax, ebp; retn 0x0002 
0x10012698  # add byte [ecx+0x5B5E5F06], cl; leave; ret 
0x10012390  # add byte [ecx-0x3C74A0FA], cl; pop esi; pop ebx; ret 
0x100180a9  # add byte [ecx+0x0334200D], cl; adc byte [edx+0x742B3C06], cl; or byte [edx], bh; ret 
0x1001e0ea  # add byte [ecx+0x5FC18B31], cl; pop esi; pop ebx; ret 
0x100237c8  # add byte [ecx-0x72F3DB94], cl; insb; and al, 0x0C; push eax; ret 
0x1001f3bc  # add byte [ecx+0x5E5F087E], cl; pop ebx; leave; ret 
0x10015263  # add byte [ebx+0x3084F50C], cl; add edx, [eax]; pop esi; mov [eax], ecx; ret 
0x10019c99  # add byte [ebx+0x0252E02D], cl; adc byte [edx+0x04], ch; push 0x00002000; push 0x00400000; push 0x00000000; call ebp 
0x10017bb6  # add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; ret 
0x10021f71  # add byte [ebx-0x3F7AEFBF], cl; jne 0x10021F7E; mov eax, 0x10027AA0; ret 
0x10021c7f  # add byte [ebx+0x00831C41], cl; dec byte [ebx+0x008B1C41]; ret 
0x10021c7a  # add byte [ebx+0x00FF2C41], cl; mov eax, [ecx+0x1C]; add [eax], 0xFFFFFFFE; mov eax, [ecx+0x1C]; mov eax, [eax]; ret 
0x10021caf  # add byte [ebx+0x08FF3041], cl; mov ecx, [ecx+0x20]; mov eax, [ecx]; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x100138dc  # add byte [ebx+0x59590C45], cl; mov ecx, [ebp+0x10]; mov [eax], ecx; leave; ret 
0x10013a57  # add byte [ebx-0x3B7CF3BB], cl; sub al, 0x5E; leave; ret 
0x10013940  # add byte [ebx-0x3B7CF3BB], cl; xor byte [esi-0x37], bl; ret 
0x1001411c  # add byte [ebx+0x5E5F1445], cl; pop ebx; inc [eax]; pop ebp; ret 
0x1001069e  # add byte [ebx+0x5E5FF845], cl; pop ebx; leave; ret 
0x10021fcb  # add byte [ebx+0x645EF44D], cl; mov [0x00000000], ecx; leave; ret 
0x10020255  # add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10020196  # add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x000C 
0x1002047b  # add byte [ebx+0x0008C2C1], cl; xor eax, eax; ret 
0x1001043d  # add byte [ebx+0x5D5E5FC3], cl; pop ebx; ret 
0x10015840  # add byte [ebx+0x5B5D5EC5], cl; pop edi; ret 
0x10020305  # add byte [ebx-0x36A1A03A], cl; ret 
0x10022528  # add byte [ebx+0x5B5E5FC7], cl; pop ebp; retn 0x000C 
0x10012ff5  # add byte [ebx-0x097AA610], cl; pop ecx; je 0x10013024; push esi; push [0x10032D20]; call [0x10025264] 
0x10012f6a  # add byte [ebx-0x097AA610], cl; pop ecx; je 0x10012F9C; push esi; push [0x10032D20]; call [0x10025264] 
0x1001f099  # add byte [ebx+0x14C483F0], cl; cmp esi, ebx; jne 0x1001F0F0; call [0x100250B0] 
0x10017482  # add byte [ebp+0x348B7604], cl; test esp, edx; xor eax, [ebx]; adc cl, ch; ret 
0x1002379c  # add byte [ebp-0x743CF7BF], cl; rol edi, 0x00000000; push 0xC210027B; add al, 0x00; mov eax, ecx; retn 0x0004 
0x10011a11  # add byte [ebp-0x72AF1BBB], cl; inc ebp; hlt; push eax; call [0x10025230] 
0x1001b70f  # add byte [ebp+0x5056EC45], cl; push [0x10036EDC]; call [0x100250DC] 
0x1002226f  # add byte [ebp+0x43E8204E], cl; loopne 0x10022276; dec [ebx+0x645EF44D]; mov [0x00000000], ecx; leave; ret 
0x1001769f  # add byte [ebp-0x0000A37B], cl; call [eax-0x18] 
0x1001d96e  # add byte [ebp-0x0000937B], cl; inc edi; test [edi+edi*8-0x01], ebp; call [eax+eax-0x00B00000] 
0x10017565  # add byte [ebp-0x0000877B], cl; call [eax-0x01] 
0x100116ec  # add byte [ebp-0x0010037B], cl; call [ebx+0x56] 
0x100144f3  # add byte [ecx+0x10036814], ah; pop ecx; test eax, eax; je 0x10014500; call eax 
0x10012fa4  # add byte [ecx+0x10032D20], ah; cmp eax, 0xFFFFFFFF; je 0x10012FBD; push eax; call [0x1002526C] 
0x10013185  # add byte [ecx+0x10032D24], ah; test eax, eax; je 0x100131A5; mov [ebp-0x04], 0x00000001; call eax 
0x1001783a  # add byte [ecx+0x100333EC], ah; pop ecx; ret 
0x1001cd38  # add byte [edx+0x10032D04], ah; xor eax, eax; pop edi; pop ebp; pop ebx; ret 
0x1001a6f0  # add byte [edi+0x24FF1001], ah; lea edi, eax; cmpsd; add [eax], edx; nop; jmp [0x1001A77C+ecx*4] 
0x1001a7ec  # add byte [eax-0x57F3EFFF], ch; add [eax], edx; and byte [eax+0x458B1001], ch; or byte [esi+0x5F], bl; leave; ret 
0x100243d5  # add byte [eax+0x0000FFFF], bh; pop esi; ret 
0x10011f88  # add byte [ebx+0x1003712C], bh; push ebx; call [0x1002524C] 
0x10013ef0  # add byte [esi+0x1003670C], bh; push 0x00000104; push esi; push ebx; call [0x10025298] 
0x10011d1b  # add byte [edi+0x1003712C], bh; push edi; call [0x1002524C] 
0x10011cc8  # add al, al; add eax, esi; pop esi; ret 
0x1001ac16  # add al, al; jne 0x1001AC21; mov [esi+0x58], 0x0000008A; push [esi+0x58]; push 0x00000008; call ebx 
0x1001985e  # add cl, al; loope 0x10019871; add ecx, [eax+0x0C]; push 0x00008000; push ecx; call [0x100252BC] 
0x10012fcf  # add bl, al; push esi; push edi; call [0x100250B0] 
0x1001b6d0  # add bl, al; mov eax, 0x00000804; ret 
0x1001b6d6  # add bl, al; mov eax, 0x00000411; ret 
0x1001b6ca  # add bl, al; mov eax, 0x00000412; ret 
0x10011acf  # add bh, al; add byte [ecx], cl; add byte [eax], al; add byte [ebx+0x5B5FFFC8], al; leave; ret 
0x10015256  # add bh, al; add byte [0x5E000000], cl; ret 
0x10023ce7  # add bh, al; add byte [eax+0x7B], dh; add dl, byte [eax]; ret 
0x10017e8b  # add bh, al; inc esi; adc byte [ebx], cl; add byte [eax], al; add bl, ch; ret 
0x10020262  # add cl, cl; retn 0x0004 
0x100201a3  # add cl, cl; retn 0x000C 
0x1001546d  # add cl, cl; ret 
0x10014504  # add al, ch; add al, byte [eax]; add byte [eax], al; pop ecx; ret 
0x100229b8  # add al, ch; add eax, [eax]; add byte [eax], al; retn 0x0004 
0x1001327a  # add al, ch; add al, 0x00; add byte [eax], al; add esp, 0x0C; ret 
0x10022531  # add al, ch; add eax, 0xE9000000; add [eax], eax; add byte [eax], al; ret 
0x1001326b  # add al, ch; adc eax, [eax]; add byte [eax], al; add esp, 0x0C; ret 
0x10024564  # add al, ch; cmp byte [0x2083FFFF], cl; add byte [ebx-0x3D740036], al; pop esi; ret 
0x1001377b  # add al, ch; jl 0x100137F4; add byte [eax], al; pop ecx; pop ecx; ret 
0x10016cfb  # add al, ch; mov eax, [0x83FFFFE5]; and byte [eax], al; or eax, 0xFFFFFFFF; pop esi; ret 
0x10015ffb  # add al, ch; mov eax, [0x83FFFFF2]; and byte [eax], al; or eax, 0xFFFFFFFF; ret 
0x10022536  # add cl, ch; add [eax], eax; add byte [eax], al; ret 
0x1001a15f  # add bl, ch; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x1001d2db  # add bl, ch; adc al, 0x3B; ret 
0x1001d2d4  # add bl, ch; sbb ebp, eax; mov ecx, 0xEB000003; adc al, 0x3B; ret 
0x1001b440  # add bl, ch; and [ebx], esi; fstp tword [ebx]; ret 
0x10016f63  # add bl, ch; sub eax, 0x142474FF; push 0x00000000; push [esp+0x18]; push eax; call [0x10025160] 
0x10017e92  # add bl, ch; ret 
0x10019d7a  # add bl, ch; fmul qword [ebx+0x6827EBC6]; add byte [eax+0x006A0000], al; push edi; call [0x100252BC] 
0x10017c19  # add dh, dh; ret 
0x10012331  # add bh, dh; fcomp [ecx+0x5E]; sbb eax, eax; ret 
0x10021c84  # add dh, bh; mov eax, [ecx+0x1C]; mov eax, [eax]; ret 
0x100153c6  # add bh, bh; adc eax, 0x1002527C; ret 
0x100153bb  # add bh, bh; adc eax, 0x100252C0; push 0x000000FF; call [0x1002527C]; ret 
0x100153bb  # add bh, bh; adc eax, 0x100252C0; push 0x000000FF; call [0x1002527C] 
0x1001b67a  # add bh, bh; and eax, 0x100250D4; cmp eax, 0xFFFFFFFD; jne 0x1001B696; mov [0x10036998], 0x00000001; jmp [0x100250D8] 
0x1001d384  # add bh, bh; xor eax, 0x10036A08; call [0x10036A0C] 
0x100130c9  # add bh, bh; xor eax, 0x10032D20; call [0x10025264]; pop esi; ret 
0x100130c9  # add bh, bh; xor eax, 0x10032D20; call [0x10025264] 
0x1001216d  # add bh, bh; xor eax, 0x10038144; call [0x10025254] 
0x100122be  # add bh, bh; xor eax, 0x10038144; call [0x10025258] 
0x100135ef  # add bh, bh; xor eax, 0x10038144; call [0x10025284] 
0x10013746  # add bh, bh; xor eax, 0x10038144; call [0x10025288] 
0x10014474  # add bh, bh; xor eax, 0x10038144; call ebp 
0x1001ba5d  # add bh, bh; xor eax, 0x100368AC; call [0x1002520C] 
0x1001d369  # add bh, bh; xor eax, 0x100369EC; call [0x10036A0C] 
0x10014460  # add bh, bh; call edi; push 0x00008000; push 0x00000000; push [esi]; call edi 
0x1001446b  # add bh, bh; call edi; push [esi+0x04]; push 0x00000000; push [0x10038144]; call ebp 
0x10014460  # add bh, bh; call edi 
0x10019022  # add bh, bh; jo 0x10019032; call esi 
0x1001e98b  # add bh, bh; jne 0x1001E9A7; call [0x1002520C] 
0x100189af  # add bh, bh; jne 0x100189D3; call [0x1002520C] 
0x100199cb  # add bh, bh; jne 0x100199C3; call [0x100252E4] 
0x10019db8  # add bh, bh; jbe 0x10019DCC; call [0x100252BC] 
0x10013195  # add bh, bh; shr bl, 1; pop es; push 0x00000001; pop eax; ret 
0x10013ed4  # add [eax], eax; add byte [eax], al; pop ebx; ret 
0x10023d3d  # add [eax], eax; add byte [eax], al; mov eax, esi; pop edi; pop esi; retn 0x0004 
0x1001b677  # add [eax], eax; add byte [eax], al; jmp [0x100250D4] 
0x1001b68c  # add [eax], eax; add byte [eax], al; jmp [0x100250D8] 
0x10013192  # add [eax], eax; add byte [eax], al; call eax 
0x1001d07e  # add [eax], eax; add byte [ebx], bh; ret 
0x10014335  # add [eax], eax; add byte [eax+0x53], dl; call [0x10025298] 
0x10013ef8  # add [eax], eax; add byte [esi+0x53], dl; call [0x10025298] 
0x100187e3  # add [eax], eax; add byte [esi+0x57], dl; call [0x100252DC] 
0x10018a32  # add [eax], eax; add byte [edi+0x56], dl; call [0x100252DC] 
0x10012c7a  # add [eax], eax; add byte [ecx+0x59], bl; ret 
0x1001acae  # add [eax], eax; add byte [ecx-0x37], bl; ret 
0x100199c4  # add [eax], eax; add byte [eax+0x00], ch; add byte [eax], 0x00; push [ebp-0x0C]; call [0x100252E4] 
0x10018d02  # add [eax], eax; add byte [edx+0x00], ch; push [0x10038144]; call [0x10025258] 
0x10014f63  # add [eax], eax; add byte [ebx-0x3C09EF3C], al; or byte [edi+edx-0x0A], dh; ret 
0x10011f3b  # add [eax], eax; add byte [ebx+0x5F590845], cl; pop esi; leave; ret 
0x10017480  # add [eax], eax; add byte [ebp+0x348B7604], cl; test esp, edx; xor eax, [ebx]; adc cl, ch; ret 
0x1001a15d  # add [eax], eax; add bl, ch; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x1001d2d2  # add [eax], eax; add bl, ch; sbb ebp, eax; mov ecx, 0xEB000003; adc al, 0x3B; ret 
0x1001959d  # add [eax], eax; add dh, dh; ret 
0x1001195f  # add [eax], eax; push eax; mov eax, [ebx]; push [eax+edi]; call [0x10025178] 
0x10019cbf  # add [eax], eax; push 0x00001000; push ebx; push edi; call ebp 
0x1001ad2d  # add [eax], eax; je 0x1001AD3C; and [eax+0x20], 0x00000000; mov [eax+0x24], 0x0000FFFF; pop esi; ret 
0x10021c76  # add [eax], ecx; retn 0x0004 
0x10014177  # add [edi], ecx; test [ecx+0x3B000000], eax; jne 0x1001418E; call ebp 
0x10015634  # add [edi], ecx; xchg eax, esp; ret 
0x1001d711  # add [eax], edx; add byte [eax], al; push eax; push esi; call [0x10036A0C] 
0x1001d366  # add [eax], edx; add byte [eax], al; push [0x100369EC]; call [0x10036A0C] 
0x1001a7f2  # add [eax], edx; and byte [eax+0x458B1001], ch; or byte [esi+0x5F], bl; leave; ret 
0x1001a7f6  # add [eax], edx; mov eax, [ebp+0x08]; pop esi; pop edi; leave; ret 
0x1001a85c  # add [eax], edx; mov edi, edi; neg ecx; jmp [0x1001A930+ecx*4] 
0x1001a6f9  # add [eax], edx; nop; jmp [0x1001A77C+ecx*4] 
0x1001d7c1  # add [eax], edx; mov [0x100369F0], eax; call [0x100250B8] 
0x1001a98a  # add [eax], edx; mov esp, 0x8B1001A9; inc ebp; or byte [esi+0x5F], bl; leave; ret 
0x100131fc  # add [eax], edx; call [0x10025278]; mov [0x100366C4], eax; ret 
0x100131fc  # add [eax], edx; call [0x10025278] 
0x1001e1e2  # add [eax], edx; call [0x100250A8] 
0x1001d6d2  # add [eax], edx; call [0x100250B8]; test byte [0x10036A04], 0x04; jne 0x1001D6EA; and [0x10036A04], 0x00000000; ret 
0x1001d46e  # add [eax], edx; call [0x100250B8] 
0x1001a882  # add [eax], edx; jmp [0x1001A980+ecx*4] 
0x1001a6f2  # add [eax], edx; jmp [0x1001A7F8+ecx*4] 
0x1001d3ff  # add [ebx], edi; pop ebp; or al, 0x7E; mov ebp, 0x5D5B5E5F; ret 
0x10015e91  # add [ebx], edi; retn 0x1873 
0x1001d7bc  # add [eax+0x68], eax; fstp8 st7; add [eax], edx; mov [0x100369F0], eax; call [0x100250B8] 
0x10017b61  # add [ecx-0x77], eax; push cs; pop esi; ret 
0x1001b97b  # add [ebx-0x7D], eax; call [esp+edi*2+0x00] 
0x10017e55  # add [esi+0x1C], eax; mov eax, esi; pop esi; pop ebp; ret 
0x10013886  # add [eax-0x76], ecx; adc [eax+0x41], eax; test dl, dl; mov byte [eax], dl; jne 0x10013888; ret 
0x1001ba57  # add [eax+0x68], edx; and byte [edx], al; add byte [eax], al; push [0x100368AC]; call [0x1002520C] 
0x10016e4c  # add [eax-0x75], edx; pop es; push [eax+esi]; call [0x10025174] 
0x100244e9  # add [esi+0x6A], edx; or edi, edi; xor eax, 0x100368AC; call [0x10025208] 
0x1001f7bc  # add [edi+0x57], edx; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100250A0]; mov esi, eax; call [0x100250B0] 
0x1001f7bc  # add [edi+0x57], edx; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100250A0] 
0x1001c341  # add [edi+0x57], edx; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100251D0]; mov esi, eax; call [0x100250B0] 
0x1001c341  # add [edi+0x57], edx; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100251D0] 
0x1001710e  # add [eax+0x5D], ebx; ret 
0x10014873  # add [eax+0x5F], ebx; pop ebx; pop esi; ret 
0x10019840  # add [eax+0x5F], ebx; pop esi; pop ebx; leave; ret 
0x10012776  # add [eax+0x5F], ebx; pop esi; pop ebp; ret 
0x10012a31  # add [eax+0x5F], ebx; pop esi; ret 
0x100122b5  # add [eax-0x7D], ebx; ror byte [edi], 0x24; lock push eax; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x1001e4bf  # add [eax-0x75], ebx; push esp; and al, 0x10; pop esi; mov [edx], ecx; ret 
0x10012ca4  # add [eax-0x3D], ebx; xor eax, eax; ret 
0x100137ba  # add [eax-0x37], ebx; ret 
0x1001d3a8  # add [eax-0x15], ebx; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; ret 
0x1001adde  # add [eax-0x0A], ebx; ret 
0x1001243a  # add [ecx-0x75], ebx; ret 
0x100187d9  # add [ebx+0x53], ebx; push 0x10027134; mov esi, 0x00000100; push esi; push edi; call [0x100252DC] 
0x10018a28  # add [ebx+0x53], ebx; push 0x10027134; mov edi, 0x00000100; push edi; push esi; call [0x100252DC] 
0x10018693  # add [esi+0x56], ebx; push 0x10027134; push esi; call [0x100251FC] 
0x1001d7a2  # add [esi-0x37], ebx; retn 0x0004 
0x1001328b  # add [edi+0x39], ebx; cmp eax, 0x10036708; jne 0x100132A6; push [esp+0x08]; call [0x1002518C] 
0x1001d68d  # add [edi+0x5E], ebx; pop ebx; leave; retn 0x0004 
0x10021de3  # add [eax+0x68], ebp; outsb; add edx, [eax]; call [0x10025098] 
0x1001d6ce  # add [eax-0x15], ebp; salc; add [eax], edx; call [0x100250B8] 
0x1001adf7  # add [edx+eax+0x0C], esi; and bh, dh; ret 
0x10015e19  # add [eax+ebx+0x53], esi; call [0x10025078] 
0x1001f5c7  # add [edi+ebx-0x0A], esi; inc esp; and al, 0x08; add dh, byte [eax+ebx-0x18]; ret 
0x10013d12  # add [edx+esi-0x58], esi; or byte [ebp+0x0B], dh; push ecx; call [0x10025180] 
0x1002434f  # add [ebx+esi*2-0x7D], esi; clc; push [esi+ebp*2-0x75]; push esi; or al, 0xF6; retn 0x7582 
0x1001dfde  # add [ebp+0x03], esi; or esi, 0x02; mov eax, esi; pop esi; leave; ret 
0x10017737  # add [ebp+0x05], esi; mov [0x100368B0], eax; call [esi+0x100333D8] 
0x10021e1d  # add [ebp+0x0A], esi; push 0x00000001; call [0x10025084] 
0x1001faae  # add [ebp+0x17], esi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001e94d  # add [ebp+0x17], esi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100251FC] 
0x1001ef46  # add [ebp+0x52], esi; test esi, esi; jne 0x1001EF59; call edi 
0x100198ca  # add [esi+0x43], edi; push [eax+0x10]; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10010466  # add [eax+0x118830C2], eax; ret 
0x1001afcb  # add [ebx+0x754A04C0], eax; cmc; pop esi; ret 
0x100243bd  # add [ebx+0x0E8902C1], eax; pop esi; ret 
0x1001a74a  # add [ebx-0x387CFD3A], eax; add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x10012f96  # add [ecx-0x3CA1A7FA], ecx; xor eax, eax; pop esi; ret 
0x10023b8a  # add [ecx-0x7499F3BA], ecx; ret 
0x1001a71b  # add [edx-0x163EFDBA], ecx; add cl, byte [eax-0x397CFDB9]; add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x100225ab  # add [ebx-0x0BB2743F], ecx; mov [fs:0x00000000], ecx; leave; ret 
0x10013a04  # add [ebx+0x5B5E5FC7], ecx; pop ebp; ret 
0x10015fe8  # add [ebp+0x03748104], ecx; mov eax, [eax]; ret 
0x10021c95  # add [ebp+0x11890250], ecx; ret 
0x10018d30  # add [ebx+0x10037110], esp; mov [0x10037124], ecx; mov [0x10037108], 0x00000010; pop eax; ret 
0x10019c5e  # add [ebx+0x100355AC], esp; pop eax; ret 
0x1001239a  # add eax, ebp; add al, byte [eax]; add byte [eax], al; pop ecx; ret 
0x1001c0b2  # add ebx, ebp; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; ret 
0x1001fba1  # add ebx, ebp; adc eax, 0x016A5656; push esi; call [0x100250BC] 
0x1001fa8e  # add ebx, ebp; adc eax, 0x016A5757; push edi; call [0x100250BC] 
0x10017a43  # add ebx, ebp; test [ebx+0x5E5FFFC8], eax; pop ebx; pop ebp; ret 
0x1001d86d  # add edi, edi; adc eax, 0x100250B4; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001efbb  # add edi, edi; xor eax, 0x100368AC; call [0x10025208] 
0x1001d328  # add edi, edi; xor eax, 0x100369EC; call [0x100250C4] 
0x10018774  # add edi, edi; jne 0x10018790; call [0x10025208] 
0x100188d9  # add edi, edi; jne 0x100188FD; call [0x10025208] 
0x1001239c  # add al, byte [eax]; add byte [eax], al; pop ecx; ret 
0x10017bb3  # add al, byte [eax]; add byte [eax], al; mov eax, [ecx+0x08]; and [ecx+0x04], 0x00000000; mov [ecx], eax; ret 
0x1001bbdc  # add al, byte [eax]; add byte [esi-0x01], dl; jne 0x1001BC03; call [0x1002520C] 
0x10011e07  # add al, byte [eax]; add byte [ebx+0x5F590845], cl; pop esi; leave; ret 
0x1001ba5b  # add al, byte [eax]; add bh, bh; xor eax, 0x100368AC; call [0x1002520C] 
0x1001e989  # add al, byte [eax]; add bh, bh; jne 0x1001E9A7; call [0x1002520C] 
0x100189ad  # add al, byte [eax]; add bh, bh; jne 0x100189D3; call [0x1002520C] 
0x1001033b  # add al, byte [eax]; pop edi; ret 
0x1001ae48  # add cl, byte [ebx]; retn 0xF75E 
0x1001ae80  # add cl, byte [ecx+eax]; test cl, 0x02; je 0x1001AE8D; or eax, 0x00080000; ret 
0x10015878  # add cl, byte [edi]; xchg eax, esp; ret 
0x1001d4b9  # add dl, byte [eax]; add byte [eax], al; push eax; push esi; call [0x10036A0C] 
0x1001d381  # add dl, byte [eax]; add byte [eax], al; push [0x10036A08]; call [0x10036A0C] 
0x10014422  # add dl, byte [eax]; xor eax, eax; ret 
0x1001b9d8  # add dl, byte [eax]; xor ebx, ebx; cmp [0x10037128], ebx; je 0x1001B9F2; push esi; call edi 
0x10022fef  # add dl, byte [eax]; xor edi, edi; cmp [0x10037128], edi; je 0x10023013; push esi; call [0x10025248] 
0x100113ef  # add dl, byte [eax]; cmp [0x10037128], ebx; mov edi, [0x10025248]; je 0x1001140D; push esi; call edi 
0x100154e0  # add dl, byte [eax]; cmp [0x10037128], ebx; mov edi, [0x10025248]; je 0x10015504; push esi; call edi 
0x10011f93  # add dl, byte [eax]; cmp [0x10037128], esi; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011d26  # add dl, byte [eax]; cmp [0x10037128], esi; je 0x10011D48; push edi; call [0x10025248] 
0x10016b7a  # add dl, byte [eax]; cmp [0x10037128], edi; mov ebx, [0x10025248]; je 0x10016B98; push esi; call ebx 
0x100245b4  # add dl, byte [eax]; cmp eax, edi; mov [ebp-0x08], eax; jne 0x100245D4; call [0x100250B0] 
0x10014653  # add dl, byte [eax]; push eax; call [0x1002516C]; pop esi; leave; ret 
0x10014653  # add dl, byte [eax]; push eax; call [0x1002516C] 
0x1001329d  # add dl, byte [eax]; push eax; call [0x10025280] 
0x100186b2  # add dl, byte [eax]; push esi; push ebx; call [0x100251F8] 
0x1001e931  # add dl, byte [eax]; push esi; push edi; call [0x100251F8] 
0x10018699  # add dl, byte [eax]; push esi; call [0x100251FC] 
0x10018a4f  # add dl, byte [eax]; push edi; push esi; call [0x100252D8] 
0x1001b8f8  # add dl, byte [eax]; push edi; mov [0x100369A0], eax; call esi 
0x1001b8df  # add dl, byte [eax]; push edi; call esi 
0x1001ac4a  # add dl, byte [eax]; pop esi; pop ebx; leave; ret 
0x1001539c  # add dl, byte [eax]; pop esi; pop ebp; ret 
0x100130d4  # add dl, byte [eax]; pop esi; ret 
0x1001465a  # add dl, byte [eax]; pop esi; leave; ret 
0x1001d9e1  # add dl, byte [eax]; pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x10016108  # add dl, byte [eax]; pop edi; pop esi; pop ebx; ret 
0x10013dc6  # add dl, byte [eax]; pop edi; pop esi; pop ebx; leave; ret 
0x10022992  # add dl, byte [eax]; pop edi; pop esi; mov [fs:0x00000000], ecx; leave; ret 
0x100144ce  # add dl, byte [eax]; pop edi; pop esi; ret 
0x10013325  # add dl, byte [eax]; pop edi; ret 
0x1001b8da  # add dl, byte [eax]; push 0x100271B4; push edi; call esi 
0x100153c0  # add dl, byte [eax]; push 0x000000FF; call [0x1002527C]; ret 
0x100153c0  # add dl, byte [eax]; push 0x000000FF; call [0x1002527C] 
0x10019c9e  # add dl, byte [eax]; push 0x00000004; push 0x00002000; push 0x00400000; push 0x00000000; call ebp 
0x10016b86  # add dl, byte [eax]; je 0x10016B98; push esi; call ebx 
0x100113fb  # add dl, byte [eax]; je 0x1001140D; push esi; call edi 
0x100154ec  # add dl, byte [eax]; je 0x10015504; push esi; call edi 
0x1001c386  # add dl, byte [eax]; jne 0x1001C3A9; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x10012fb4  # add dl, byte [eax]; or [0x10032D20], 0xFFFFFFFF; ret 
0x10021e4a  # add dl, byte [eax]; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C]; ret 
0x10021e4a  # add dl, byte [eax]; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C] 
0x1001b694  # add dl, byte [eax]; cmp eax, 0xFFFFFFFC; jne 0x1001B6AA; mov eax, [0x100368AC]; mov [0x10036998], 0x00000001; ret 
0x1001b67f  # add dl, byte [eax]; cmp eax, 0xFFFFFFFD; jne 0x1001B696; mov [0x10036998], 0x00000001; jmp [0x100250D8] 
0x1001d31d  # add dl, byte [eax]; test eax, eax; je 0x1001D3AC; push 0x00000001; push [0x100369EC]; call [0x100250C4] 
0x100137db  # add dl, byte [eax]; test eax, eax; je 0x100137E6; push 0x00000000; call eax; ret 
0x100137db  # add dl, byte [eax]; test eax, eax; je 0x100137E6; push 0x00000000; call eax 
0x100137cb  # add dl, byte [eax]; test eax, eax; je 0x100137E6; push 0x10026958; push eax; call [0x10025190] 
0x100162f2  # add dl, byte [eax]; test eax, eax; jne 0x10016302; call [0x100250B0] 
0x10016031  # add dl, byte [eax]; test eax, eax; jne 0x10016046; call [0x100250B0] 
0x1001196b  # add dl, byte [eax]; test eax, eax; jne 0x10011983; call [0x100250B0] 
0x10021ded  # add dl, byte [eax]; test eax, eax; jne 0x10021E0D; push ebx; call [0x10025090] 
0x1001ef12  # add dl, byte [eax]; test eax, eax; jne 0x1001EF44; call edi 
0x10016d87  # add dl, byte [eax]; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x10018d11  # add dl, byte [eax]; test eax, eax; mov [0x10037120], eax; jne 0x10018D1D; ret 
0x100144bc  # add dl, byte [eax]; mov esi, [esi]; cmp esi, edi; jne 0x100144A9; push [0x10038144]; call [0x100252B4] 
0x10021e37  # add dl, byte [eax]; mov eax, esi; pop edi; pop esi; pop ebx; ret 
0x10013031  # add dl, byte [eax]; mov eax, esi; pop edi; pop esi; ret 
0x1001c34e  # add dl, byte [eax]; mov esi, eax; call [0x100250B0] 
0x10013d81  # add dl, byte [eax]; mov edi, eax; cmp edi, 0xFFFFFFFF; je 0x10013DA1; push edi; call [0x10025180] 
0x10016f75  # add dl, byte [eax]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x10016F86; call [0x100250B0] 
0x1001c393  # add dl, byte [eax]; lea eax, [ebp+0x10]; push eax; push [ebp-0x1C]; call [0x1002507C] 
0x10014452  # add dl, byte [eax]; lea esi, [eax+0x0C]; push 0x00004000; push 0x00100000; push [esi]; call edi 
0x10015ceb  # add dl, byte [eax]; mov eax, [0x10037130]; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x10025074] 
0x1001d872  # add dl, byte [eax]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x10013202  # add dl, byte [eax]; mov [0x100366C4], eax; ret 
0x100187df  # add dl, byte [eax]; mov esi, 0x00000100; push esi; push edi; call [0x100252DC] 
0x10018a2e  # add dl, byte [eax]; mov edi, 0x00000100; push edi; push esi; call [0x100252DC] 
0x10014912  # add dl, byte [eax]; sar eax, 0x04; cmp eax, 0x07; mov [ebp-0x3C], eax; ja 0x1001500C; jmp [0x10015025+eax*4] 
0x1002048d  # add dl, byte [eax]; retn 0x0004 
0x10013214  # add dl, byte [eax]; ret 
0x1001d6d8  # add dl, byte [eax]; test byte [0x10036A04], 0x04; jne 0x1001D6EA; and [0x10036A04], 0x00000000; ret 
0x10015e14  # add dl, byte [eax]; test byte [esi+0x04], 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x100142d8  # add dl, byte [eax]; call [0x100252AC] 
0x1001b8c8  # add dl, byte [eax]; call [0x100250D0] 
0x100236b8  # add dl, byte [eax]; jmp [0x10025000] 
0x100232e0  # add dl, byte [eax]; jmp [0x10025100] 
0x10023460  # add dl, byte [eax]; jmp [0x10025200] 
0x10023238  # add dl, byte [eax]; jmp [0x10025300] 
0x100236a0  # add dl, byte [eax]; jmp [0x10025004] 
0x100232e6  # add dl, byte [eax]; jmp [0x10025104] 
0x10023466  # add dl, byte [eax]; jmp [0x10025204] 
0x10023250  # add dl, byte [eax]; jmp [0x10025304] 
0x1002365e  # add dl, byte [eax]; jmp [0x10025008] 
0x100232ec  # add dl, byte [eax]; jmp [0x10025108] 
0x1002346c  # add dl, byte [eax]; jmp [0x10025208] 
0x10023256  # add dl, byte [eax]; jmp [0x10025308] 
0x10023664  # add dl, byte [eax]; jmp [0x1002500C] 
0x100232f2  # add dl, byte [eax]; jmp [0x1002510C] 
0x10023472  # add dl, byte [eax]; jmp [0x1002520C] 
0x1002325c  # add dl, byte [eax]; jmp [0x1002530C] 
0x1002366a  # add dl, byte [eax]; jmp [0x10025010] 
0x100232f8  # add dl, byte [eax]; jmp [0x10025110] 
0x10023478  # add dl, byte [eax]; jmp [0x10025210] 
0x1002324a  # add dl, byte [eax]; jmp [0x10025310] 
0x10023670  # add dl, byte [eax]; jmp [0x10025014] 
0x100232fe  # add dl, byte [eax]; jmp [0x10025114] 
0x1002347e  # add dl, byte [eax]; jmp [0x10025214] 
0x1002323e  # add dl, byte [eax]; jmp [0x10025314] 
0x10023676  # add dl, byte [eax]; jmp [0x10025018] 
0x10023304  # add dl, byte [eax]; jmp [0x10025118] 
0x10023484  # add dl, byte [eax]; jmp [0x10025218] 
0x1002367c  # add dl, byte [eax]; jmp [0x1002501C] 
0x1002348a  # add dl, byte [eax]; jmp [0x1002521C] 
0x10023280  # add dl, byte [eax]; jmp [0x1002531C] 
0x10023682  # add dl, byte [eax]; jmp [0x10025020] 
0x10023310  # add dl, byte [eax]; jmp [0x10025120] 
0x10023490  # add dl, byte [eax]; jmp [0x10025220] 
0x10023286  # add dl, byte [eax]; jmp [0x10025320] 
0x10023688  # add dl, byte [eax]; jmp [0x10025024] 
0x10023316  # add dl, byte [eax]; jmp [0x10025124] 
0x10023496  # add dl, byte [eax]; jmp [0x10025224] 
0x1002368e  # add dl, byte [eax]; jmp [0x10025028] 
0x1002331c  # add dl, byte [eax]; jmp [0x10025128] 
0x1002349c  # add dl, byte [eax]; jmp [0x10025228] 
0x10023268  # add dl, byte [eax]; jmp [0x10025328] 
0x10023694  # add dl, byte [eax]; jmp [0x1002502C] 
0x10023322  # add dl, byte [eax]; jmp [0x1002512C] 
0x100234a2  # add dl, byte [eax]; jmp [0x1002522C] 
0x10023262  # add dl, byte [eax]; jmp [0x1002532C] 
0x100236f4  # add dl, byte [eax]; jmp [0x10025030] 
0x10023328  # add dl, byte [eax]; jmp [0x10025130] 
0x100234a8  # add dl, byte [eax]; jmp [0x10025230] 
0x100236ee  # add dl, byte [eax]; jmp [0x10025034] 
0x1002332e  # add dl, byte [eax]; jmp [0x10025134] 
0x100234ae  # add dl, byte [eax]; jmp [0x10025234] 
0x100236fa  # add dl, byte [eax]; jmp [0x10025334] 
0x100236e8  # add dl, byte [eax]; jmp [0x10025038] 
0x10023334  # add dl, byte [eax]; jmp [0x10025138] 
0x100234b4  # add dl, byte [eax]; jmp [0x10025238] 
0x100236e2  # add dl, byte [eax]; jmp [0x1002503C] 
0x1002333a  # add dl, byte [eax]; jmp [0x1002513C] 
0x100234ba  # add dl, byte [eax]; jmp [0x1002523C] 
0x10023232  # add dl, byte [eax]; jmp [0x1002533C] 
0x100236dc  # add dl, byte [eax]; jmp [0x10025040] 
0x10023340  # add dl, byte [eax]; jmp [0x10025140] 
0x100234c0  # add dl, byte [eax]; jmp [0x10025240] 
0x100236d6  # add dl, byte [eax]; jmp [0x10025044] 
0x10023346  # add dl, byte [eax]; jmp [0x10025144] 
0x100234c6  # add dl, byte [eax]; jmp [0x10025244] 
0x100236d0  # add dl, byte [eax]; jmp [0x10025048] 
0x1002334c  # add dl, byte [eax]; jmp [0x10025148] 
0x100234cc  # add dl, byte [eax]; jmp [0x10025248] 
0x10023646  # add dl, byte [eax]; jmp [0x10025348] 
0x100236ca  # add dl, byte [eax]; jmp [0x1002504C] 
0x10023352  # add dl, byte [eax]; jmp [0x1002514C] 
0x100234d2  # add dl, byte [eax]; jmp [0x1002524C] 
0x1002364c  # add dl, byte [eax]; jmp [0x1002534C] 
0x100236c4  # add dl, byte [eax]; jmp [0x10025050] 
0x10023358  # add dl, byte [eax]; jmp [0x10025150] 
0x100234d8  # add dl, byte [eax]; jmp [0x10025250] 
0x10023652  # add dl, byte [eax]; jmp [0x10025350] 
0x100236be  # add dl, byte [eax]; jmp [0x10025054] 
0x1002335e  # add dl, byte [eax]; jmp [0x10025154] 
0x100234de  # add dl, byte [eax]; jmp [0x10025254] 
0x10023640  # add dl, byte [eax]; jmp [0x10025354] 
0x100236a6  # add dl, byte [eax]; jmp [0x10025058] 
0x10023364  # add dl, byte [eax]; jmp [0x10025158] 
0x100234e4  # add dl, byte [eax]; jmp [0x10025258] 
0x1002362e  # add dl, byte [eax]; jmp [0x10025358] 
0x100236b2  # add dl, byte [eax]; jmp [0x1002505C] 
0x1002336a  # add dl, byte [eax]; jmp [0x1002515C] 
0x100234ea  # add dl, byte [eax]; jmp [0x1002525C] 
0x1002363a  # add dl, byte [eax]; jmp [0x1002535C] 
0x100236ac  # add dl, byte [eax]; jmp [0x10025060] 
0x10023370  # add dl, byte [eax]; jmp [0x10025160] 
0x100234f0  # add dl, byte [eax]; jmp [0x10025260] 
0x10023634  # add dl, byte [eax]; jmp [0x10025360] 
0x1002369a  # add dl, byte [eax]; jmp [0x10025064] 
0x10023376  # add dl, byte [eax]; jmp [0x10025164] 
0x100234f6  # add dl, byte [eax]; jmp [0x10025264] 
0x10023658  # add dl, byte [eax]; jmp [0x10025364] 
0x1002337c  # add dl, byte [eax]; jmp [0x10025168] 
0x100234fc  # add dl, byte [eax]; jmp [0x10025268] 
0x1002327a  # add dl, byte [eax]; jmp [0x1002506C] 
0x10023382  # add dl, byte [eax]; jmp [0x1002516C] 
0x10023502  # add dl, byte [eax]; jmp [0x1002526C] 
0x1002328c  # add dl, byte [eax]; jmp [0x1002536C] 
0x10023388  # add dl, byte [eax]; jmp [0x10025170] 
0x10023508  # add dl, byte [eax]; jmp [0x10025270] 
0x10023292  # add dl, byte [eax]; jmp [0x10025370] 
0x1002338e  # add dl, byte [eax]; jmp [0x10025174] 
0x100130dc  # add dl, byte [eax]; jmp [0x10025274] 
0x10023298  # add dl, byte [eax]; jmp [0x10025374] 
0x10023394  # add dl, byte [eax]; jmp [0x10025178] 
0x10023514  # add dl, byte [eax]; jmp [0x10025278] 
0x1002329e  # add dl, byte [eax]; jmp [0x10025378] 
0x1002339a  # add dl, byte [eax]; jmp [0x1002517C] 
0x1002351a  # add dl, byte [eax]; jmp [0x1002527C] 
0x100233a0  # add dl, byte [eax]; jmp [0x10025180] 
0x100232b0  # add dl, byte [eax]; jmp [0x10025380] 
0x100233a6  # add dl, byte [eax]; jmp [0x10025184] 
0x10023526  # add dl, byte [eax]; jmp [0x10025284] 
0x100232aa  # add dl, byte [eax]; jmp [0x10025384] 
0x100233ac  # add dl, byte [eax]; jmp [0x10025188] 
0x1002352c  # add dl, byte [eax]; jmp [0x10025288] 
0x100232a4  # add dl, byte [eax]; jmp [0x10025388] 
0x100233b2  # add dl, byte [eax]; jmp [0x1002518C] 
0x10023532  # add dl, byte [eax]; jmp [0x1002528C] 
0x100232b6  # add dl, byte [eax]; jmp [0x1002538C] 
0x100233b8  # add dl, byte [eax]; jmp [0x10025190] 
0x10023538  # add dl, byte [eax]; jmp [0x10025290] 
0x100233be  # add dl, byte [eax]; jmp [0x10025194] 
0x1002353e  # add dl, byte [eax]; jmp [0x10025294] 
0x10023628  # add dl, byte [eax]; jmp [0x10025098] 
0x100233c4  # add dl, byte [eax]; jmp [0x10025198] 
0x10023544  # add dl, byte [eax]; jmp [0x10025298] 
0x10023622  # add dl, byte [eax]; jmp [0x1002509C] 
0x100233ca  # add dl, byte [eax]; jmp [0x1002519C] 
0x1002354a  # add dl, byte [eax]; jmp [0x1002529C] 
0x1002361c  # add dl, byte [eax]; jmp [0x100250A0] 
0x100233d0  # add dl, byte [eax]; jmp [0x100251A0] 
0x10023550  # add dl, byte [eax]; jmp [0x100252A0] 
0x10023616  # add dl, byte [eax]; jmp [0x100250A4] 
0x100233d6  # add dl, byte [eax]; jmp [0x100251A4] 
0x10023556  # add dl, byte [eax]; jmp [0x100252A4] 
0x10023610  # add dl, byte [eax]; jmp [0x100250A8] 
0x100233dc  # add dl, byte [eax]; jmp [0x100251A8] 
0x1002355c  # add dl, byte [eax]; jmp [0x100252A8] 
0x100233e2  # add dl, byte [eax]; jmp [0x100251AC] 
0x10023562  # add dl, byte [eax]; jmp [0x100252AC] 
0x100233e8  # add dl, byte [eax]; jmp [0x100251B0] 
0x10023568  # add dl, byte [eax]; jmp [0x100252B0] 
0x100233ee  # add dl, byte [eax]; jmp [0x100251B4] 
0x1002356e  # add dl, byte [eax]; jmp [0x100252B4] 
0x10023604  # add dl, byte [eax]; jmp [0x100250B8] 
0x100233f4  # add dl, byte [eax]; jmp [0x100251B8] 
0x10023574  # add dl, byte [eax]; jmp [0x100252B8] 
0x100235fe  # add dl, byte [eax]; jmp [0x100250BC] 
0x100233fa  # add dl, byte [eax]; jmp [0x100251BC] 
0x1002357a  # add dl, byte [eax]; jmp [0x100252BC] 
0x100235f8  # add dl, byte [eax]; jmp [0x100250C0] 
0x10023580  # add dl, byte [eax]; jmp [0x100252C0] 
0x100235f2  # add dl, byte [eax]; jmp [0x100250C4] 
0x10023406  # add dl, byte [eax]; jmp [0x100251C4] 
0x10023586  # add dl, byte [eax]; jmp [0x100252C4] 
0x100235ec  # add dl, byte [eax]; jmp [0x100250C8] 
0x1002358c  # add dl, byte [eax]; jmp [0x100252C8] 
0x100235e6  # add dl, byte [eax]; jmp [0x100250CC] 
0x10023412  # add dl, byte [eax]; jmp [0x100251CC] 
0x10023592  # add dl, byte [eax]; jmp [0x100252CC] 
0x100235e0  # add dl, byte [eax]; jmp [0x100250D0] 
0x10023418  # add dl, byte [eax]; jmp [0x100251D0] 
0x10023598  # add dl, byte [eax]; jmp [0x100252D0] 
0x100235da  # add dl, byte [eax]; jmp [0x100250D4] 
0x1002341e  # add dl, byte [eax]; jmp [0x100251D4] 
0x1002359e  # add dl, byte [eax]; jmp [0x100252D4] 
0x100235d4  # add dl, byte [eax]; jmp [0x100250D8] 
0x10023424  # add dl, byte [eax]; jmp [0x100251D8] 
0x100235a4  # add dl, byte [eax]; jmp [0x100252D8] 
0x100235ce  # add dl, byte [eax]; jmp [0x100250DC] 
0x1002342a  # add dl, byte [eax]; jmp [0x100251DC] 
0x100235aa  # add dl, byte [eax]; jmp [0x100252DC] 
0x100235c8  # add dl, byte [eax]; jmp [0x100250E0] 
0x10023430  # add dl, byte [eax]; jmp [0x100251E0] 
0x100235b0  # add dl, byte [eax]; jmp [0x100252E0] 
0x100235c2  # add dl, byte [eax]; jmp [0x100250E4] 
0x10023436  # add dl, byte [eax]; jmp [0x100251E4] 
0x100235b6  # add dl, byte [eax]; jmp [0x100252E4] 
0x100232bc  # add dl, byte [eax]; jmp [0x100250E8] 
0x1002343c  # add dl, byte [eax]; jmp [0x100251E8] 
0x100235bc  # add dl, byte [eax]; jmp [0x100252E8] 
0x100232c2  # add dl, byte [eax]; jmp [0x100250EC] 
0x10023442  # add dl, byte [eax]; jmp [0x100251EC] 
0x100232c8  # add dl, byte [eax]; jmp [0x100250F0] 
0x10023448  # add dl, byte [eax]; jmp [0x100251F0] 
0x1002326e  # add dl, byte [eax]; jmp [0x100252F0] 
0x100232ce  # add dl, byte [eax]; jmp [0x100250F4] 
0x1002344e  # add dl, byte [eax]; jmp [0x100251F4] 
0x10023274  # add dl, byte [eax]; jmp [0x100252F4] 
0x100232d4  # add dl, byte [eax]; jmp [0x100250F8] 
0x10023454  # add dl, byte [eax]; jmp [0x100251F8] 
0x100232da  # add dl, byte [eax]; jmp [0x100250FC] 
0x1002345a  # add dl, byte [eax]; jmp [0x100251FC] 
0x10023244  # add dl, byte [eax]; jmp [0x100252FC] 
0x10012fd7  # add dl, byte [eax]; push [0x10032D20]; mov edi, eax; call [0x10025270] 
0x100152b0  # add dl, byte [eax]; push [0x1003322C]; call esi; push [0x1003321C]; call esi 
0x100152b0  # add dl, byte [eax]; push [0x1003322C]; call esi 
0x1001c3a0  # add dl, byte [eax]; push [ebp-0x1C]; call esi 
0x1001bc3b  # add dl, byte [eax]; call ebx 
0x100164dd  # add dl, byte [eax]; call esi; push [ebp-0x04]; call esi 
0x100164dd  # add dl, byte [eax]; call esi 
0x100112b6  # add dh, byte [ebx]; rcr byte [esi+0x5B], 0x5D; ret 
0x100164f2  # add dh, byte [ebx]; rcr byte [esi+0x5B], 0xC9; ret 
0x10018cfa  # add dh, byte [ebx]; rcr byte [esi+0x5D], 0xC3; push 0x00000140; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x10016eda  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x1001424f  # add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5D; pop ebx; pop ecx; pop ecx; ret 
0x10016301  # add dh, byte [ebx]; call [esi-0x18] 
0x10019963  # add dh, byte [ebx]; dec [ebx-0x3B97EF8D]; inc ecx; add byte [eax], al; push esi; call [0x100252E4] 
0x1001a769  # add al, byte [edi-0x7D]; stc; or byte [edx-0x74], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x100193be  # add dl, byte [eax-0x01]; xor eax, 0x10037120; push edi; push [0x10038144]; call [0x10025284] 
0x1001992e  # add dl, byte [eax-0x01]; xor eax, 0x10037120; call [0x100252E4] 
0x1001f851  # add bl, byte [esi-0x75]; dec byte [ebx+0x74C08503]; adc byte [eax-0x7D], dl; ret 
0x10015b39  # add ah, byte [esi+0x3B]; ret 
0x1001adf0  # add dh, byte [edx+eax+0x0C]; adc dh, dh; ret 
0x1001d482  # add dh, byte [esp+eax-0x58]; pop es; jne 0x1001D490; and [0x10036A04], 0x00000000; ret 
0x1001ae85  # add dh, byte [ebp+eax+0x0D]; add byte [eax], al; or byte [eax], al; ret 
0x1001f5ce  # add dh, byte [eax+ebx-0x18]; ret 
0x1001d990  # add dh, byte [ebp+0x05]; push 0x00000001; pop eax; leave; ret 
0x1001772d  # add dh, byte [ebp+0x05]; mov [0x100368AC], eax; cmp edi, 0x01; jne 0x1001773F; mov [0x100368B0], eax; call [esi+0x100333D8] 
0x10021e63  # add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x10025078]; ret 
0x10021e63  # add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x10025078] 
0x10021e4e  # add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x1002508C]; ret 
0x10021e4e  # add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x1002508C] 
0x1001fbc1  # add dh, byte [ebp+0x17]; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10014201  # add dh, byte [ebp+0x4C]; cmp edi, ebx; jne 0x10014214; call [0x100252A4] 
0x1001ef9d  # add dh, byte [ebp+0x5D]; test esi, esi; jne 0x1001EFAC; call ebx 
0x1001a724  # add al, byte [ebx-0x387CFC3A]; add eax, [ebx-0x338DF707]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a74d  # add al, byte [ebx-0x067CFD39]; or byte [edx-0x5A], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001d79f  # add al, byte [ebx-0x36A1FE20]; retn 0x0004 
0x1001d68a  # add al, byte [ebx+0x5E5F01E0]; pop ebx; leave; retn 0x0004 
0x1001a84a  # add al, byte [ebx-0x067CFC1E]; or byte [edx+0x0D], dh; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a6ca  # add al, byte [ebx-0x067CFC1E]; or byte [edx+0x29], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a8c8  # add al, byte [ebx-0x107CFD12]; add al, byte [ebx-0x738DF707]; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a8cb  # add al, byte [ebx-0x067CFD11]; or byte [edx-0x74], dh; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a8ce  # add al, byte [ebx-0x738DF707]; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a750  # add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x10011489  # add al, byte [ebp-0x74FB8A40]; ret 
0x1001a747  # add cl, byte [eax-0x397CFEB9]; add al, byte [ebx-0x067CFD39]; or byte [edx-0x5A], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a721  # add cl, byte [eax-0x397CFDB9]; add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x100117b9  # add cl, byte [ebx-0x36A4A13D]; ret 
0x1001243f  # add cl, byte [ebx+0x5B5E5FC7]; ret 
0x1001024c  # add cl, byte [ebx+0x5D5E5FD5]; pop ebx; pop ecx; ret 
0x100113b1  # add cl, cl; ret 
0x1001d70e  # add dh, al; add eax, 0x00001001; push eax; push esi; call [0x10036A0C] 
0x1001ad63  # add dh, dh; ret 
0x10010188  # add dh, bh; fcomp [edi+0x5E]; pop ebp; pop ebx; ret 
0x100157ce  # add dh, bh; fcomp [edi+0x5E]; ret 
0x100159bc  # add dh, bh; fistp [ebx]; fcomi st0, st7; shl [ebx], cl; fcom [ebx+0x56]; call [0x100251F4] 
0x1001334b  # add bh, bh; rol byte [ebx-0x1214FB3A], 1; pop esi; ret 
0x100121ab  # add eax, [eax]; add byte [eax], al; pop ecx; pop ecx; ret 
0x100229ba  # add eax, [eax]; add byte [eax], al; retn 0x0004 
0x100241ac  # add eax, [eax]; add byte [ebx], ah; retn 0xC483 
0x1001d915  # add eax, [eax]; add byte [edx+0x01], ch; or ah, 0x04; push eax; call [0x10036A0C] 
0x1001d2d9  # add eax, [eax]; add bl, ch; adc al, 0x3B; ret 
0x1001fa42  # add edx, [eax]; add byte [ecx+0x33], bl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x1001c5f5  # add edx, [eax]; add byte [ecx+0x33], bl; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x1001c688  # add edx, [eax]; add byte [ecx+0x59], bl; xor eax, eax; pop esi; ret 
0x1001e1d9  # add edx, [eax]; add byte [ebp+0x16], dh; push edi; push 0x1001E275; call [0x100250A8] 
0x1001b669  # add edx, [eax]; add byte [ebx+0x1075FEF8], al; mov [0x10036998], 0x00000001; jmp [0x100250D4] 
0x10017838  # add edx, [eax]; add byte [ecx+0x100333EC], ah; pop ecx; ret 
0x10013ed2  # add edx, [eax]; add [eax], eax; add byte [eax], al; pop ebx; ret 
0x1001b6a4  # add edx, [eax]; add [eax], eax; add byte [eax], al; ret 
0x1001b675  # add edx, [eax]; add [eax], eax; add byte [eax], al; jmp [0x100250D4] 
0x1001b68a  # add edx, [eax]; add [eax], eax; add byte [eax], al; jmp [0x100250D8] 
0x10021e1b  # add edx, [eax]; add [ebp+0x0A], esi; push 0x00000001; call [0x10025084] 
0x100198c8  # add edx, [eax]; add [esi+0x43], edi; push [eax+0x10]; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10021e61  # add edx, [eax]; add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x10025078]; ret 
0x10021e61  # add edx, [eax]; add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x10025078] 
0x1001d86a  # add edx, [eax]; add al, 0x01; call [0x100250B4]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001d86a  # add edx, [eax]; add al, 0x01; call [0x100250B4] 
0x1001d6de  # add edx, [eax]; add al, 0x75; pop es; and [0x10036A04], 0x00000000; ret 
0x10018d40  # add edx, [eax]; adc byte [eax], al; add byte [eax], al; pop eax; ret 
0x1001d22b  # add edx, [eax]; xor eax, eax; pop ebx; leave; ret 
0x1001cd3c  # add edx, [eax]; xor eax, eax; pop edi; pop ebp; pop ebx; ret 
0x10011f8c  # add edx, [eax]; push ebx; call [0x1002524C] 
0x1001b8bf  # add edx, [eax]; push esi; push edi; jne 0x1001B907; push 0x100271C0; call [0x100250D0] 
0x100154d9  # add edx, [eax]; push esi; call [0x1002524C] 
0x100113e7  # add edx, [eax]; push edi; push esi; call [0x1002524C] 
0x10011d1f  # add edx, [eax]; push edi; call [0x1002524C] 
0x100193c4  # add edx, [eax]; push edi; push [0x10038144]; call [0x10025284] 
0x10017fb4  # add edx, [eax]; push edi; push [0x100368AC]; call esi 
0x10019c62  # add edx, [eax]; pop eax; ret 
0x10017454  # add edx, [eax]; pop ecx; cmp [0x1003712C], ebx; je 0x10017469; push 0x00000001; call [0x10025084] 
0x100144f7  # add edx, [eax]; pop ecx; test eax, eax; je 0x10014500; call eax 
0x1001783e  # add edx, [eax]; pop ecx; ret 
0x10013f6e  # add edx, [eax]; pop ebx; leave; ret 
0x10018467  # add edx, [eax]; pop esi; pop ebx; pop ebp; ret 
0x10015269  # add edx, [eax]; pop esi; mov [eax], ecx; ret 
0x1001b937  # add edx, [eax]; pop edi; pop esi; pop ebx; ret 
0x10017782  # add edx, [eax]; pop edi; pop esi; pop ebx; leave; ret 
0x10013ef4  # add edx, [eax]; push 0x00000104; push esi; push ebx; call [0x10025298] 
0x1001448d  # add edx, [eax]; push 0x00000000; push [0x10038144]; call ebp 
0x1001d467  # add edx, [eax]; push 0x00000001; push 0x1001D491; call [0x100250B8] 
0x1001d6cb  # add edx, [eax]; push 0x00000001; push 0x1001D6EB; call [0x100250B8] 
0x10017fe6  # add edx, [eax]; push 0xFFFFFFFF; push 0x10036920; push edi; push [0x100368AC]; call esi 
0x10017fad  # add edx, [eax]; push 0xFFFFFFFF; push 0x100368CC; push edi; push [0x100368AC]; call esi 
0x10011ae5  # add edx, [eax]; jc 0x10011AEC; xor eax, eax; ret 
0x1001d8f9  # add edx, [eax]; jc 0x1001D8EA; push 0x00000001; pop eax; ret 
0x1001b4fc  # add edx, [eax]; jc 0x1001B4F1; lea eax, [ebp-0x18]; push eax; push ebx; call [0x100250DC] 
0x1001745b  # add edx, [eax]; je 0x10017469; push 0x00000001; call [0x10025084] 
0x10015303  # add edx, [eax]; je 0x10015312; push eax; call edi 
0x1001b9e0  # add edx, [eax]; je 0x1001B9F2; push esi; call edi 
0x10019d93  # add edx, [eax]; je 0x10019DA6; push esi; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x100152fb  # add edx, [eax]; je 0x10015312; cmp esi, 0x100331EC; je 0x10015312; push eax; call edi 
0x10011f99  # add edx, [eax]; je 0x10011FB5; push ebx; call [0x10025248] 
0x10022ff7  # add edx, [eax]; je 0x10023013; push esi; call [0x10025248] 
0x10011d2c  # add edx, [eax]; je 0x10011D48; push edi; call [0x10025248] 
0x100154d2  # add edx, [eax]; je 0x10015522; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001b8e9  # add edx, [eax]; je 0x1001B93D; push 0x100271A4; push edi; call esi 
0x10018d18  # add edx, [eax]; jne 0x10018D1D; ret 
0x10021e2e  # add edx, [eax]; jne 0x10021E39; push ebx; call [0x10025074] 
0x10014682  # add edx, [eax]; jne 0x1001468D; mov eax, [eax+0x10032D6C]; ret 
0x10013291  # add edx, [eax]; jne 0x100132A6; push [esp+0x08]; call [0x1002518C]; push eax; call [0x10025280] 
0x10013291  # add edx, [eax]; jne 0x100132A6; push [esp+0x08]; call [0x1002518C] 
0x10021dde  # add edx, [eax]; jne 0x10021E17; push 0x00000001; push 0x10036E68; call [0x10025098] 
0x10013e19  # add edx, [eax]; jl 0x10013DD5; pop edi; pop esi; pop ebx; ret 
0x10015319  # add edx, [eax]; jl 0x100152E1; push [0x1003320C]; call edi; push [0x1003321C]; call edi 
0x10015319  # add edx, [eax]; jl 0x100152E1; push [0x1003320C]; call edi 
0x10014485  # add edx, [eax]; jl 0x10014457; push [0x10037120]; push 0x00000000; push [0x10038144]; call ebp 
0x10014732  # add edx, [eax]; jl 0x10014707; pop esi; ret 
0x1001990e  # add edx, [eax]; and [0x10037118], 0x00000000; ret 
0x10021e15  # add edx, [eax]; cmp [0x10036E68], 0x01; jne 0x10021E2A; push 0x00000001; call [0x10025084] 
0x10018c31  # add edx, [eax]; cmp eax, 0x03; jne 0x10018C3E; mov eax, [0x10037124]; ret 
0x10012fa8  # add edx, [eax]; cmp eax, 0xFFFFFFFF; je 0x10012FBD; push eax; call [0x1002526C] 
0x10017733  # add edx, [eax]; cmp edi, 0x01; jne 0x1001773F; mov [0x100368B0], eax; call [esi+0x100333D8] 
0x1001321a  # add edx, [eax]; test eax, eax; je 0x10013222; call eax 
0x1001b91b  # add edx, [eax]; test eax, eax; je 0x1001B926; push ebx; call eax 
0x1001a5a1  # add edx, [eax]; test eax, eax; je 0x1001A5B6; push [esp+0x04]; call eax 
0x10013189  # add edx, [eax]; test eax, eax; je 0x100131A5; mov [ebp-0x04], 0x00000001; call eax 
0x10018d34  # add edx, [eax]; mov [0x10037124], ecx; mov [0x10037108], 0x00000010; pop eax; ret 
0x10018461  # add edx, [eax]; mov [0x100334C8], ebx; pop esi; pop ebx; pop ebp; ret 
0x10011afc  # add edx, [eax]; mov al, byte [ecx+eax*4+0x04]; and eax, 0x40; ret 
0x10015cf0  # add edx, [eax]; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x10025074] 
0x1001b985  # add edx, [eax]; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x1002508C] 
0x10016b80  # add edx, [eax]; mov ebx, [0x10025248]; je 0x10016B98; push esi; call ebx 
0x100113f5  # add edx, [eax]; mov edi, [0x10025248]; je 0x1001140D; push esi; call edi 
0x100154e6  # add edx, [eax]; mov edi, [0x10025248]; je 0x10015504; push esi; call edi 
0x10012fdd  # add edx, [eax]; mov edi, eax; call [0x10025270] 
0x100193fc  # add edx, [eax]; lea esi, [ecx+eax*4]; call [0x10025258] 
0x10016122  # add edx, [eax]; lea eax, [ecx+eax*4+0x0C]; push eax; call [0x10025078]; ret 
0x10016122  # add edx, [eax]; lea eax, [ecx+eax*4+0x0C]; push eax; call [0x10025078] 
0x1001b905  # add edx, [eax]; mov eax, [0x100369A0]; test eax, eax; je 0x1001B926; call eax 
0x1001d877  # add edx, [eax]; mov [0x100369EC], eax; ret 
0x1002308b  # add edx, [eax]; mov ebx, 0x1003712C; push ebx; call [0x1002524C] 
0x100157ca  # add edx, [eax]; sar eax, 0x02; neg eax; pop edi; pop esi; ret 
0x10018d3a  # add edx, [eax]; mov [0x10037108], 0x00000010; pop eax; ret 
0x1001b69e  # add edx, [eax]; mov [0x10036998], 0x00000001; ret 
0x10012fc7  # add edx, [eax]; mov [eax+0x14], 0x00000001; ret 
0x1002256f  # add edx, [eax]; leave; ret 
0x10015fe2  # add edx, [eax]; test byte [ecx+eax*4+0x04], 0x01; lea eax, [ecx+eax*4]; je 0x10015FF1; mov eax, [eax]; ret 
0x1001b88f  # add edx, [eax]; neg eax; sbb eax, eax; and eax, [0x10036EDC]; ret 
0x1001efc0  # add edx, [eax]; call [0x10025208] 
0x1001ba62  # add edx, [eax]; call [0x1002520C] 
0x1001d36e  # add edx, [eax]; call [0x10036A0C] 
0x10019df0  # add edx, [eax]; call [0x10025254]; pop esi; ret 
0x10012172  # add edx, [eax]; call [0x10025254] 
0x100122c3  # add edx, [eax]; call [0x10025258] 
0x100130ce  # add edx, [eax]; call [0x10025264]; pop esi; ret 
0x10012f78  # add edx, [eax]; call [0x10025264] 
0x100153ac  # add edx, [eax]; call [0x10025078]; pop ebp; ret 
0x10021e69  # add edx, [eax]; call [0x10025078]; ret 
0x1001320e  # add edx, [eax]; call [0x10025278]; ret 
0x1001320e  # add edx, [eax]; call [0x10025278] 
0x1001331f  # add edx, [eax]; call [0x1002527C]; pop edi; ret 
0x1001331f  # add edx, [eax]; call [0x1002527C] 
0x100134a2  # add edx, [eax]; call [0x10025284] 
0x1001374b  # add edx, [eax]; call [0x10025288] 
0x10021e54  # add edx, [eax]; call [0x1002508C]; ret 
0x10021e54  # add edx, [eax]; call [0x1002508C] 
0x10013dc0  # add edx, [eax]; call [0x1002528C] 
0x10021e44  # add edx, [eax]; call [0x10025098]; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C] 
0x10021de7  # add edx, [eax]; call [0x10025098]; test eax, eax; jne 0x10021E0D; push ebx; call [0x10025090] 
0x10021de7  # add edx, [eax]; call [0x10025098] 
0x10017f25  # add edx, [eax]; call [0x10025198] 
0x1001441c  # add edx, [eax]; call [0x100252B4]; xor eax, eax; ret 
0x100144c8  # add edx, [eax]; call [0x100252B4]; pop edi; pop esi; ret 
0x1001441c  # add edx, [eax]; call [0x100252B4] 
0x1001d7c6  # add edx, [eax]; call [0x100250B8]; test byte [0x10036A04], 0x04; jne 0x1001D7DE; and [0x10036A04], 0x00000000; ret 
0x1001d7c6  # add edx, [eax]; call [0x100250B8] 
0x1001d32d  # add edx, [eax]; call [0x100250C4] 
0x1001b719  # add edx, [eax]; call [0x100250DC] 
0x10019934  # add edx, [eax]; call [0x100252E4] 
0x10019c6d  # add edx, [eax]; call [ebx+0x55] 
0x1001902b  # add edx, [eax]; push [eax+0x10]; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x1001773d  # add edx, [eax]; call [esi+0x100333D8] 
0x10012fba  # add edx, [eax]; inc ebx; mov eax, [esp+0x04]; mov [eax+0x50], 0x100355B0; mov [eax+0x14], 0x00000001; ret 
0x10014479  # add edx, [eax]; call ebp 
0x100152ce  # add edx, [eax]; call esi; pop esi; ret 
0x100152be  # add edx, [eax]; call esi; push [0x1003320C]; call esi; push [0x100331EC]; call esi 
0x100152be  # add edx, [eax]; call esi; push [0x1003320C]; call esi 
0x100152b6  # add edx, [eax]; call esi; push [0x1003321C]; call esi; push [0x1003320C]; call esi 
0x100152b6  # add edx, [eax]; call esi; push [0x1003321C]; call esi 
0x100152c6  # add edx, [eax]; call esi; push [0x100331EC]; call esi; pop esi; ret 
0x100152c6  # add edx, [eax]; call esi; push [0x100331EC]; call esi 
0x100152b6  # add edx, [eax]; call esi 
0x10015339  # add edx, [eax]; call edi; pop edi; pop esi; ret 
0x10015321  # add edx, [eax]; call edi; push [0x1003321C]; call edi; push [0x1003322C]; call edi 
0x10015321  # add edx, [eax]; call edi; push [0x1003321C]; call edi 
0x10015329  # add edx, [eax]; call edi; push [0x1003322C]; call edi; push [0x100331EC]; call edi 
0x10015329  # add edx, [eax]; call edi; push [0x1003322C]; call edi 
0x10015331  # add edx, [eax]; call edi; push [0x100331EC]; call edi 
0x10015321  # add edx, [eax]; call edi 
0x1001b6c2  # add esi, [ebx]; rol bl, 0xB8; add al, 0x04; add byte [eax], al; ret 
0x1001467d  # add edi, [ebx]; mov byte [eax+0x2D], ch; add edx, [eax]; jne 0x1001468D; mov eax, [eax+0x10032D6C]; ret 
0x10019e38  # add eax, [esi+0x10]; push 0x00001000; push eax; call [0x100252BC] 
0x10019862  # add ecx, [eax+0x0C]; push 0x00008000; push ecx; call [0x100252BC] 
0x10018fbc  # add ecx, [eax+0x0C]; mov ebx, 0x00008000; push 0x00004000; push ebx; push ecx; call esi 
0x10011924  # add edx, [ecx+0x51]; push ecx; push [eax+edi]; call [0x10025250] 
0x1001d7b5  # add ebx, [ecx-0x09]; fcomp [ebx]; shr byte [edx+0x01], 0x40; push 0x1001D7DF; mov [0x100369F0], eax; call [0x100250B8] 
0x10011891  # add ebx, [ecx-0x01]; xor al, 0x38; call [0x10025180] 
0x100143ca  # add ebx, [ebx-0x37]; ret 
0x10024459  # add esp, [esi-0x77]; sbb byte [ebx], dh; rcr byte [esi+0x5B], 0x5D; ret 
0x10022e3f  # add esp, [esi-0x77]; sbb byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x10021e40  # add ebp, [eax+0x68]; outsb; add edx, [eax]; call [0x10025098] 
0x10012a2f  # add ebp, [edx+0x01]; pop eax; pop edi; pop esi; ret 
0x1001e4bd  # add ebp, [edx+0x01]; pop eax; mov edx, [esp+0x10]; pop esi; mov [edx], ecx; ret 
0x10018c35  # add esi, [ebp+0x06]; mov eax, [0x10037124]; ret 
0x10019499  # add edi, [ecx+0x0C]; push 0x00001000; push 0x00008000; push edi; call [0x100252E0] 
0x10013db9  # add edi, [edi+edx*4-0x01]; xor eax, 0x10038260; call [0x1002528C] 
0x1001aecb  # add edi, [edx+esi*8+0x6A]; add [eax+0x5E], ebx; ret 
0x1001aff1  # add edi, [edx+esi*8+0x6A]; add [eax-0x3D], ebx; xor eax, eax; ret 
0x10016026  # add eax, [eax+0x75FF10CB]; or bh, bh; adc eax, 0x10025180; test eax, eax; jne 0x10016046; call [0x100250B0] 
0x1001601d  # add eax, [eax+0x45F680CB]; or al, 0x80; je 0x1001602A; or bl, 0x10; push [ebp+0x08]; call [0x10025180] 
0x1001a727  # add eax, [ebx-0x067CFC39]; or byte [edx-0x34], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x10016b39  # add eax, [ebx-0x36A40038]; ret 
0x100206d0  # add eax, [ebx+0x5E5FFFC8]; pop ebx; retn 0x0004 
0x10020622  # add eax, [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0004 
0x1001dfe0  # add eax, [ebx-0x3974FD32]; pop esi; leave; ret 
0x1001a84d  # add eax, [ebx+0x0D7208F9]; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a6cd  # add eax, [ebx+0x297208F9]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a72a  # add eax, [ebx-0x338DF707]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001983a  # add ecx, [ecx+0x6AFC1844]; add [eax+0x5F], ebx; pop esi; pop ebx; leave; ret 
0x100160fe  # add ecx, [ebp+0x500C3844]; call [0x10025074]; pop edi; pop esi; pop ebx; ret 
0x100160fe  # add ecx, [ebp+0x500C3844]; call [0x10025074] 
0x1001d3fc  # add ecx, [ebp+0x5D3B015E]; or al, 0x7E; mov ebp, 0x5D5B5E5F; ret 
0x10013d10  # add ebp, [eax-0x57CD8BFF]; or byte [ebp+0x0B], dh; push ecx; call [0x10025180] 
0x10012ef4  # add eax, ecx; pop esi; ret 
0x10024108  # add eax, ecx; pop edi; pop esi; pop ebx; leave; ret 
0x10011cca  # add eax, esi; pop esi; ret 
0x1001d501  # add eax, edi; push eax; push esi; call [0x10036A0C] 
0x100206eb  # add ecx, eax; cmp eax, ecx; jnc 0x100206F6; movzx eax, byte [eax]; pop esi; ret 
0x1001a6eb  # add ecx, eax; jmp [0x1001A700+eax*4] 
0x10012ef2  # add ecx, edx; add eax, ecx; pop esi; ret 
0x10016c9e  # add edx, ebx; pop ebx; retn 0x0010 
0x10016c96  # add ebx, eax; mov eax, [esp+0x08]; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x1001a973  # add esi, eax; add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7db  # add esi, eax; add edi, eax; jmp [0x1001A7E8+edx*4] 
0x1001a975  # add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7dd  # add edi, eax; jmp [0x1001A7E8+edx*4] 
0x1001e89a  # add edi, esi; add byte [edx], ch; ret 
0x10018595  # add edi, edi; xor al, 0x30; call [0x1002516C] 
0x10011963  # add edi, edi; xor al, 0x38; call [0x10025178]; test eax, eax; jne 0x10011983; call [0x100250B0] 
0x10011963  # add edi, edi; xor al, 0x38; call [0x10025178] 
0x10017614  # add edi, edi; inc ebp; or byte [ebx-0x7EBCF339], al; call [eax] 
0x1001327c  # add al, 0x00; add byte [eax], al; add esp, 0x0C; ret 
0x100108ec  # add al, 0x00; add byte [eax], al; add esp, 0x14; ret 
0x1001b6ce  # add al, 0x00; add bl, al; mov eax, 0x00000804; ret 
0x1001b6c8  # add al, 0x00; add bl, al; mov eax, 0x00000412; ret 
0x10020324  # add al, 0x00; xor eax, eax; ret 
0x1001ae50  # add al, 0x00; pop ebx; je 0x1001AE58; or ah, 0x10; ret 
0x100214d7  # add al, 0x00; or ax, 0x0000FFFF; retn 0x0004 
0x1001d863  # add al, 0x00; or word [0x10036A04], 0x0104; call [0x100250B4]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001d863  # add al, 0x00; or word [0x10036A04], 0x0104; call [0x100250B4] 
0x100131f7  # add al, 0x00; push 0x100131B3; call [0x10025278]; mov [0x100366C4], eax; ret 
0x100131f7  # add al, 0x00; push 0x100131B3; call [0x10025278] 
0x1001a4da  # add al, 0x00; je 0x1001A523; push esi; push ebp; lea ebp, [ebx+0x10]; call [edi+ecx*4+0x04] 
0x10023ce2  # add al, 0x00; and [eax+0x08], 0x00000000; mov [eax], 0x10027B70; ret 
0x10017b76  # add al, 0x00; or eax, 0xFFFFFFFF; pop esi; ret 
0x1002031e  # add al, 0x00; or eax, 0xFFFFFFFF; retn 0x0004 
0x10017bbc  # add al, 0x00; mov [ecx], eax; ret 
0x10021f70  # add al, 0x00; mov eax, [ecx+0x10]; test eax, eax; jne 0x10021F7E; mov eax, 0x10027AA0; ret 
0x100237aa  # add al, 0x00; mov eax, ecx; retn 0x0004 
0x10020485  # add al, 0x00; mov eax, ecx; mov [eax], 0x10027938; retn 0x0004 
0x10021669  # add al, 0x00; mov eax, ecx; mov [eax], 0x100279D4; retn 0x0004 
0x1002379b  # add al, 0x00; lea eax, [ecx+0x08]; ret 
0x100243d4  # add al, 0x00; mov eax, 0x0000FFFF; pop esi; ret 
0x1001adcd  # add al, 0x00; ret 
0x100228d5  # add al, 0x00; mov [ecx], 0x10027AE4; ret 
0x10014334  # add al, 0x01; add byte [eax], al; push eax; push ebx; call [0x10025298] 
0x10014572  # add al, 0x01; add byte [eax], al; push eax; push 0x00000000; call [0x10025298] 
0x10013ef7  # add al, 0x01; add byte [eax], al; push esi; push ebx; call [0x10025298] 
0x10017077  # add al, 0x01; add byte [eax], al; call [0x10025220] 
0x10015e18  # add al, 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x10015fe7  # add al, 0x01; lea eax, [ecx+eax*4]; je 0x10015FF1; mov eax, [eax]; ret 
0x1001d86c  # add al, 0x01; call [0x100250B4]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001d86c  # add al, 0x01; call [0x100250B4] 
0x1001dab5  # add al, 0x03; shr ebx, 0xFFFFFFCE; ret 
0x1001b6c7  # add al, 0x04; add byte [eax], al; ret 
0x10015cdd  # add al, 0x06; cmp eax, ebx; je 0x10015D1D; add eax, 0x20; push eax; call [0x10025090] 
0x10015cf3  # add al, 0x06; add eax, 0x20; push eax; call [0x10025074] 
0x1001b988  # add al, 0x06; add eax, 0x20; push eax; call [0x1002508C] 
0x1001b6d3  # add al, 0x08; add byte [eax], al; ret 
0x10017b5e  # add al, 0x0F; mov dh, 0x01; inc ecx; mov [esi], ecx; pop esi; ret 
0x100243ba  # add al, 0x0F; mov bh, 0x01; add ecx, 0x02; mov [esi], ecx; pop esi; ret 
0x10022f6c  # add al, 0x0F; mov bh, 0x45; dec cl; ret 
0x1001d8c4  # add al, 0x10; add byte [eax], al; push [0x10036A08]; call [0x10036A0C] 
0x10017f21  # add al, 0x24; enter 0x0368, 0x10; call [0x10025198] 
0x1001d95c  # add al, 0x33; ror cl, 0xC3; push 0x00000001; pop eax; leave; ret 
0x10011ae0  # add al, 0x3B; add eax, 0x10038260; jc 0x10011AEC; xor eax, eax; ret 
0x1001ccf8  # add al, 0x3B; ret 
0x1001afce  # add al, 0x4A; jne 0x1001AFC7; pop esi; ret 
0x100236a4  # add al, 0x50; add dl, byte [eax]; jmp [0x10025058] 
0x1001d91c  # add al, 0x50; call [0x10036A0C] 
0x100232ea  # add al, 0x51; add dl, byte [eax]; jmp [0x10025108] 
0x1002346a  # add al, 0x52; add dl, byte [eax]; jmp [0x10025208] 
0x10023254  # add al, 0x53; add dl, byte [eax]; jmp [0x10025308] 
0x100222ae  # add al, 0x57; push [esp+0x14]; call [esi+0x08] 
0x10017c3f  # add al, 0x5B; leave; ret 
0x1001db31  # add al, 0x5E; mov bl, byte [edi]; inc edi; cmp eax, 0x0B; ja 0x1001DDB6; jmp [0x1001DF7D+eax*4] 
0x1001bfec  # add al, 0x5E; ret 
0x1001939f  # add al, 0x5F; pop esi; pop ebx; leave; ret 
0x100218cf  # add al, 0x66; or eax, 0x5E5FFFFF; pop ebx; retn 0x0004 
0x100154b2  # add al, 0x66; mov eax, [ebp-0x02]; leave; ret 
0x1001940f  # add al, 0x68; add byte [eax], ah; add byte [eax], al; push 0x00100000; push edi; call [0x100252E0] 
0x10019ca1  # add al, 0x68; add byte [eax], ah; add byte [eax], al; push 0x00400000; push 0x00000000; call ebp 
0x100153b9  # add al, 0x6A; add bh, bh; adc eax, 0x100252C0; push 0x000000FF; call [0x1002527C]; ret 
0x100153b9  # add al, 0x6A; add bh, bh; adc eax, 0x100252C0; push 0x000000FF; call [0x1002527C] 
0x10014472  # add al, 0x6A; add bh, bh; xor eax, 0x10038144; call ebp 
0x10012ca2  # add al, 0x6A; add [eax-0x3D], ebx; xor eax, eax; ret 
0x1001fb9f  # add al, 0x6A; add ebx, ebp; adc eax, 0x016A5656; push esi; call [0x100250BC] 
0x1001fa8c  # add al, 0x6A; add ebx, ebp; adc eax, 0x016A5757; push edi; call [0x100250BC] 
0x1001d868  # add al, 0x6A; add edx, [eax]; add al, 0x01; call [0x100250B4] 
0x1001d6dc  # add al, 0x6A; add edx, [eax]; add al, 0x75; pop es; and [0x10036A04], 0x00000000; ret 
0x1001a6e5  # add al, 0x72; or al, 0x83; loopne 0x1001A6EE; add ecx, eax; jmp [0x1001A700+eax*4] 
0x1001a875  # add al, 0x72; or al, 0x83; loopne 0x1001A87E; sub ecx, eax; jmp [0x1001A888+eax*4] 
0x1001d6e0  # add al, 0x75; pop es; and [0x10036A04], 0x00000000; ret 
0x1001c3ac  # add al, 0x75; or bh, bh; jne 0x1001C396; call esi 
0x1001b080  # add al, 0x79; loopne 0x1001B0E3; pop esi; pop ebx; leave; ret 
0x10013db4  # add al, 0x80; inc ebx; cmp ebx, 0x03; jl 0x10013D53; push [0x10038260]; call [0x1002528C] 
0x1001992a  # add al, 0x80; shl eax, 0x02; push eax; push [0x10037120]; call [0x100252E4] 
0x100193f6  # add al, 0x80; push [0x10038144]; lea esi, [ecx+eax*4]; call [0x10025258] 
0x10015fea  # add al, 0x81; je 0x10015FF1; mov eax, [eax]; ret 
0x10015103  # add al, 0x83; add byte [ebx+ecx*4], al; add byte [esi-0x75], ah; inc eax; cld; ret 
0x100150f3  # add al, 0x83; add byte [eax], cl; mov ecx, [eax]; mov eax, [ecx-0x08]; mov edx, [ecx-0x04]; ret 
0x1001b664  # add al, 0x83; and eax, 0x10036998; add byte [ebx+0x1075FEF8], al; mov [0x10036998], 0x00000001; jmp [0x100250D4] 
0x10011b01  # add al, 0x83; loopne 0x10011B45; ret 
0x10014916  # add al, 0x83; clc; pop es; mov [ebp-0x3C], eax; ja 0x1001500C; jmp [0x10015025+eax*4] 
0x100147d0  # add al, 0x83; clc; adc al, 0x7D; or eax, [ebx-0x17AFE340]; retn 0x000B 
0x1001afee  # add al, 0x83; stc; add edi, [edx+esi*8+0x6A]; add [eax-0x3D], ebx; xor eax, eax; ret 
0x1001967b  # add al, 0x83; jmp [eax] 
0x10017af3  # add al, 0x85; sal byte [edi+ebp*2-0x7D], 0xF8; push [edx+ebp*2-0x75]; push esi; or al, 0xF6; retn 0x7582 
0x10023dc9  # add al, 0x85; sal byte [ebp+0x05], 0xB8; js 0x10023E4C; add dl, byte [eax]; ret 
0x1001af24  # add al, 0x85; idiv byte [ebp-0x19]; pop edi; pop esi; pop ebx; ret 
0x10019de8  # add al, 0x89; dec eax; add al, 0xFF; xor eax, 0x10038144; call [0x10025254] 
0x10015106  # add al, 0x8B; add byte [esi-0x75], ah; inc eax; cld; ret 
0x1001408a  # add al, 0x8B; retn 0x03EB 
0x1001a96d  # add al, 0x8D; add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A980+edx*4] 
0x1001a7d5  # add al, 0x8D; add byte [eax], al; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A7E8+edx*4] 
0x10019f12  # add al, 0x8D; inc esp; or byte [eax], cl; ret 
0x1001a51a  # add al, 0x8F; mov [ebx+0x0C], eax; call [edi+ecx*4+0x08] 
0x1001d484  # add al, 0xA8; pop es; jne 0x1001D490; and [0x10036A04], 0x00000000; ret 
0x10011af5  # add al, 0xC0; mov ecx, [0x10038160+ecx*4]; mov al, byte [ecx+eax*4+0x04]; and eax, 0x40; ret 
0x1001611b  # add al, 0xC0; mov ecx, [0x10038160+ecx*4]; lea eax, [ecx+eax*4+0x0C]; push eax; call [0x10025078]; ret 
0x1001611b  # add al, 0xC0; mov ecx, [0x10038160+ecx*4]; lea eax, [ecx+eax*4+0x0C]; push eax; call [0x10025078] 
0x100189f0  # add al, 0xC3; mov eax, edx; ret 
0x100138d1  # add al, 0xC9; ret 
0x10018c27  # add al, 0xD1; clc; ret 
0x1001c0aa  # add al, 0xEB; ror [ebx+0x38448D06], cl; add ebx, ebp; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; ret 
0x10013350  # add al, 0xEB; in eax, dx; pop esi; ret 
0x1001ad5c  # add al, 0xF6; ret 
0x10016faf  # add al, 0xFD; lea eax, [ecx+eax*4+0x04]; mov eax, edi; pop edi; pop esi; ret 
0x1001f5a9  # add al, 0xFF; adc eax, 0x100250A4; cmp eax, 0xFFFFFFFF; jne 0x1001F5C6; call [0x100250B0] 
0x10019deb  # add al, 0xFF; xor eax, 0x10038144; call [0x10025254]; pop esi; ret 
0x10019deb  # add al, 0xFF; xor eax, 0x10038144; call [0x10025254] 
0x10012f93  # add al, 0xFF; push 0x00000001; mov [esi], eax; pop eax; pop esi; ret 
0x1001a5aa  # add al, 0xFF; rol byte [ebp+0x047459C0], 1; push 0x00000001; pop eax; ret 
0x10022533  # add eax, 0xE9000000; add [eax], eax; add byte [eax], al; ret 
0x10014a9c  # add eax, 0xBE0F0000; ret 
0x100128fa  # add eax, 0x59590000; pop edi; pop esi; pop ebx; leave; ret 
0x10014a94  # add eax, 0xC4830000; or al, 0xE9; insd; add eax, 0xBE0F0000; ret 
0x1001d710  # add eax, 0x00001001; push eax; push esi; call [0x10036A0C] 
0x1001d4b8  # add eax, 0x00001002; push eax; push esi; call [0x10036A0C] 
0x1001d6db  # add eax, 0x10036A04; add al, 0x75; pop es; and [0x10036A04], 0x00000000; ret 
0x10018d3d  # add eax, 0x10037108; adc byte [eax], al; add byte [eax], al; pop eax; ret 
0x100206f0  # add eax, 0x5E00B60F; ret 
0x1001760f  # add eax, 0xEBFC4521; add edi, edi; inc ebp; or byte [ebx-0x7EBCF339], al; call [eax] 
0x10017451  # add eax, 0x10037128; pop ecx; cmp [0x1003712C], ebx; je 0x10017469; push 0x00000001; call [0x10025084] 
0x100189ec  # add eax, 0x0424442B; ret 
0x10010536  # add eax, 0x0241C63A; cmp al, byte [edx]; ret 
0x10011ae2  # add eax, 0x10038260; jc 0x10011AEC; xor eax, eax; ret 
0x10013ecf  # add eax, 0x10038264; add [eax], eax; add byte [eax], al; pop ebx; ret 
0x1001544e  # add eax, 0xC9C00B66; ret 
0x100218f1  # add eax, 0x5E008B66; ret 
0x1001b8ae  # add eax, 0x10038268; add [eax], eax; add byte [eax], al; ret 
0x100137e0  # add eax, 0xD0FF006A; ret 
0x100137b8  # add eax, 0xC958016A; ret 
0x10013d6c  # add eax, 0xEB58F66A; or cl, byte [ebx-0x2708B73D]; sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x10025290] 
0x10015070  # add eax, 0x5DFF0883; ret 
0x1001c0a7  # add eax, 0xEB04C683; ror [ebx+0x38448D06], cl; add ebx, ebp; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; ret 
0x1001231e  # add eax, 0x5EFFC883; ret 
0x10017c0f  # add eax, 0x7501F883; add eax, 0x000080BF; add dh, dh; ret 
0x1002061d  # add eax, 0xEB08458B; add eax, [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0004 
0x1001b1e9  # add eax, 0x890C4D8B; xor [edi+0x5E], ebx; pop ebx; leave; ret 
0x10016119  # add eax, 0x8BC0048D; or al, 0x8D; pushad; add [ebx], 0x81448D10; or al, 0x50; call [0x10025078] 
0x10012c98  # add eax, 0x0A751993; cmp [eax+0x1C], 0x00000000; jne 0x10012CA7; push 0x00000001; pop eax; ret 
0x1001b6a1  # add eax, 0x10036998; add [eax], eax; add byte [eax], al; ret 
0x1001b672  # add eax, 0x10036998; add [eax], eax; add byte [eax], al; jmp [0x100250D4] 
0x1001b687  # add eax, 0x10036998; add [eax], eax; add byte [eax], al; jmp [0x100250D8] 
0x1001772f  # add eax, 0x0368ACA3; adc byte [ebx+0x057501FF], al; mov [0x100368B0], eax; call [esi+0x100333D8] 
0x10018c47  # add eax, 0x100355AC; ret 
0x10021816  # add eax, 0x00FFFFB8; add byte [edi+0x5E], bl; pop ebx; leave; retn 0x0004 
0x10017c14  # add eax, 0x000080BF; add dh, dh; ret 
0x100125fd  # add eax, 0x100366C0; mov [ebp+0x08], eax; je 0x10012655; lea eax, [ebp-0x000000B4]; push eax; call [0x10025198] 
0x1001b896  # add eax, 0x10036EDC; ret 
0x100153e9  # add eax, 0x0000FFE0; pop ebx; ret 
0x10015469  # add eax, 0x0000FFE0; leave; ret 
0x100157c7  # add eax, 0x100366E8; sar eax, 0x02; neg eax; pop edi; pop esi; ret 
0x100223ee  # add eax, 0xFFDE73E8; call [edi+0x57] 
0x10013eeb  # add eax, 0x0079ABE8; add byte [esi+0x1003670C], bh; push 0x00000104; push esi; push ebx; call [0x10025298] 
0x100131d0  # add eax, 0xFFFF0EE9; jmp [ecx+0x100366C4] 
0x1001d4b6  # add eax, 0x100205F0; add byte [eax], al; push eax; push esi; call [0x10036A0C] 
0x10015a1d  # add eax, 0x100366F0; sar eax, 0x02; neg eax; pop edi; pop esi; ret 
0x1001ed59  # push es; add byte [eax], al; add esp, 0x10; ret 
0x1001fde7  # push es; add byte [eax], al; ret 
0x10022d6f  # push es; sbb al, 0x7B; add dl, byte [eax]; mov eax, esi; pop esi; retn 0x0004 
0x10015cde  # push es; cmp eax, ebx; je 0x10015D1D; add eax, 0x20; push eax; call [0x10025090] 
0x10012f98  # push es; pop eax; pop esi; ret 
0x1001269a  # push es; pop edi; pop esi; pop ebx; leave; ret 
0x10012392  # push es; pop edi; mov eax, ebx; pop esi; pop ebx; ret 
0x10022f3e  # push es; or ax, 0x0000FFFF; leave; ret 
0x10015483  # push es; mov ax, word [ebp+0x08]; leave; ret 
0x10015cf4  # push es; add eax, 0x20; push eax; call [0x10025074] 
0x1001b989  # push es; add eax, 0x20; push eax; call [0x1002508C] 
0x100132d6  # push es; test eax, eax; je 0x100132DD; call eax 
0x10021e10  # push es; mov [0x10036E68], edi; cmp [0x10036E68], 0x01; jne 0x10021E2A; push 0x00000001; call [0x10025084] 
0x1001bfe6  # push es; mov [esi+0x08], eax; mov [esi+0x04], eax; pop esi; ret 
0x100215f1  # push es; mov edx, [edi]; push eax; mov ecx, edi; call [edx+0x04] 
0x1001c3b8  # push es; mov eax, [ebp-0x1C]; mov [ebp+0x10], eax; push [ebp-0x18]; call esi 
0x10019de5  # push es; mov ecx, [esi+0x04]; mov [eax+0x04], ecx; push [0x10038144]; call [0x10025254] 
0x100125dd  # push es; lea eax, [ebp-0x08]; push eax; call [0x1002525C] 
0x10018c37  # push es; mov eax, [0x10037124]; ret 
0x10017822  # push es; mov eax, [0x100333D4]; ret 
0x10015d96  # push es; ret 
0x100228c2  # push es; fdivr qword [edx+0x02]; adc byte [ebx+0x5B5E5FC6], cl; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10020331  # push es; call [eax+0x10] 
0x10021c60  # pop es; add byte [eax], al; pop esi; retn 0x0008 
0x10021501  # pop es; add byte [eax], al; mov ax, word [eax]; pop esi; ret 
0x1001fd05  # pop es; add byte [eax], al; ret 
0x1001967a  # pop es; add al, 0x83; jmp [eax] 
0x10020f60  # pop es; pop es; add byte [eax], al; ret 
0x10018c23  # pop es; sub eax, [esp+0x04]; sar eax, 1; ret 
0x10020411  # pop es; push ecx; mov ecx, edi; call [eax+0x04] 
0x10011fcf  # pop es; push ebx; call [0x10025248] 
0x10021e31  # pop es; push ebx; call [0x10025074] 
0x10013dee  # pop es; push ebx; call [0x1002508C] 
0x10023060  # pop es; push esi; call [0x10025248] 
0x10011d62  # pop es; push edi; call [0x10025248] 
0x10010e6f  # pop es; pop edi; leave; ret 
0x10013199  # pop es; push 0x00000001; pop eax; ret 
0x1001d486  # pop es; jne 0x1001D490; and [0x10036A04], 0x00000000; ret 
0x1001d488  # pop es; and [0x10036A04], 0x00000000; ret 
0x10014919  # pop es; mov [ebp-0x3C], eax; ja 0x1001500C; jmp [0x10015025+eax*4] 
0x10014685  # pop es; mov eax, [eax+0x10032D6C]; ret 
0x1002039a  # pop es; mov ecx, edi; call [eax+0x14] 
0x100214f5  # pop es; mov eax, 0x0000FFFF; pop esi; ret 
0x1001bf60  # pop es; mov eax, 0x7FFFFFFF; pop ebp; ret 
0x10023085  # pop es; mov [ebp+0x14], 0x10036EBC; mov ebx, 0x1003712C; push ebx; call [0x1002524C] 
0x1001ac19  # pop es; mov [esi+0x58], 0x0000008A; push [esi+0x58]; push 0x00000008; call ebx 
0x10010507  # pop es; leave; ret 
0x10016e4f  # pop es; push [eax+esi]; call [0x10025174]; test eax, eax; jne 0x10016E67; call [0x100250B0] 
0x10016e4f  # pop es; push [eax+esi]; call [0x10025174] 
0x10016d7b  # pop es; push [ebp+0x10]; push edx; push [eax+esi]; call [0x10025174] 
0x10015286  # or byte [eax], al; add byte [eax], al; pop esi; ret 
0x1001528d  # or byte [eax], al; add byte [eax], al; mov [eax], 0x00000016; pop esi; ret 
0x10020342  # or byte [eax], al; add byte [edi], cl; mov dh, 0x00; pop esi; ret 
0x100214b0  # or byte [eax], al; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x100213f1  # or byte [eax], al; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x000C 
0x1001b6d4  # or byte [eax], al; add bl, al; mov eax, 0x00000411; ret 
0x1002047f  # or byte [eax], al; xor eax, eax; ret 
0x1001ac32  # or byte [eax], al; push ecx; call ebx 
0x100148a2  # or byte [eax], al; pop ecx; pop esi; ret 
0x10015df2  # or byte [eax], al; pop ecx; jne 0x10015E04; lea eax, [esi+0x0C]; push eax; call [0x10025090] 
0x1001ae8b  # or byte [eax], al; ret 
0x10023ce6  # or byte [eax], al; mov [eax], 0x10027B70; ret 
0x1001195e  # or byte [ecx], al; add byte [eax-0x75], dl; add edi, edi; xor al, 0x38; call [0x10025178] 
0x1001c3ab  # or byte [0xE475FF0A+esi*2], al; call esi 
0x1001e41f  # or byte [eax], cl; jne 0x1001E42E; push [esi+0x58]; push 0x00000008; call ebx 
0x10019f15  # or byte [eax], cl; ret 
0x100114fa  # or byte [ebx], cl; rcr [ebx-0x37], 0xFFFFFFC3; mov eax, [esp+0x04]; add eax, 0x20; ret 
0x1001163a  # or byte [ebx], cl; rcr [edi+0x5E], 0x5B; leave; ret 
0x10022eee  # or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x1001be1e  # or byte [edi], cl; mov bh, 0x45; or al, 0x2B; rcr [ebx+0x5E], 0xFFFFFFC9; ret 
0x1001d912  # or byte [0x000003FF], ah; push 0x00000001; or ah, 0x04; push eax; call [0x10036A0C] 
0x1001add4  # or byte [ebx], dh; rcl byte [esi-0x0A], 0xC3; adc byte [ebx+eax+0x6A], dh; add [eax-0x0A], ebx; ret 
0x1001ac5e  # or byte [ecx], bh; xor dl, byte [edi-0x75]; retn 0x1174 
0x100180b5  # or byte [edx], bh; ret 
0x1001333f  # or byte [ebx], bh; je 0x10013367; or al, 0x73; or eax, 0xC085068B; je 0x1001334E; call eax 
0x1001871c  # or byte [eax+0x50], al; push [ebp+0x18]; call [0x10025208] 
0x1001887f  # or byte [eax+0x50], al; push [ebp+0x20]; call [0x10025208] 
0x10023662  # or byte [eax+0x02], dl; adc bh, bh; and eax, 0x1002500C; jmp [0x10025010] 
0x100244a8  # or byte [eax+0x56], dl; push 0x00000009; push [0x100368AC]; call [0x10025208] 
0x1001d8c1  # or byte [eax+0x68], dl; add al, 0x10; add byte [eax], al; push [0x10036A08]; call [0x10036A0C] 
0x100170f4  # or byte [eax-0x3A], dl; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x100232f0  # or byte [ecx+0x02], dl; adc bh, bh; and eax, 0x1002510C; jmp [0x10025110] 
0x10022ef5  # or byte [ecx+0x57], dl; push 0x00000009; push eax; call [0x10025208] 
0x1001877a  # or byte [edx+0x02], dl; adc byte [ebx], bh; ret 
0x10023470  # or byte [edx+0x02], dl; adc bh, bh; and eax, 0x1002520C; jmp [0x10025210] 
0x1002325a  # or byte [ebx+0x02], dl; adc bh, bh; and eax, 0x1002530C; jmp [0x1002532C] 
0x1001ba3e  # or byte [eax+0x5D], bl; ret 
0x10020e03  # or byte [ecx-0x48], bl; or ecx, [esi]; add dl, byte [eax]; ret 
0x1001b4a5  # or byte [edi+0x5E], bl; pop ebx; leave; ret 
0x10020703  # or byte [edi+0x5E], bl; ret 
0x1001032f  # or byte [edi-0x3D], bl; mov word [edi], dx; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x10010345  # or byte [edi-0x3D], bl; mov byte [edi], dl; mov eax, [esp+0x08]; pop edi; ret 
0x1001bf8b  # or byte [esi-0x09], ah; fstp [ebx]; leave; not ecx; and eax, ecx; ret 
0x1001328f  # or byte [edi+0x03], ah; adc byte [ebp+0x11], dh; push [esp+0x08]; call [0x1002518C]; push eax; call [0x10025280] 
0x1001328f  # or byte [edi+0x03], ah; adc byte [ebp+0x11], dh; push [esp+0x08]; call [0x1002518C] 
0x1001331d  # or byte [edi+0x03], ah; adc bh, bh; adc eax, 0x1002527C; pop edi; ret 
0x10019db1  # or byte [eax+0x00], ch; add byte [eax], 0x00; push 0x00000000; push [esi+0x10]; call [0x100252BC] 
0x1001425d  # or byte [edx+0x00], ch; and [esi], 0x00000000; call [0x10025194] 
0x10013744  # or byte [edx+0x00], ch; push [0x10038144]; call [0x10025288] 
0x100244e7  # or byte [edx+0x01], ch; push esi; push 0x00000009; push [0x100368AC]; call [0x10025208] 
0x10022f1b  # or byte [edx+0x01], ch; push edi; push 0x00000009; push eax; call [0x10025208] 
0x10022e98  # or byte [edx+0x02], ch; push esi; push 0x00000009; push eax; call [0x10025208] 
0x1001d875  # or byte [edx+0x03], ch; adc byte [ebx+0x100369EC], ah; ret 
0x1001a850  # or byte [edx+0x0D], dh; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a6d0  # or byte [edx+0x29], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a76d  # or byte [edx-0x74], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a8d1  # or byte [edx-0x74], dh; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a753  # or byte [edx-0x5A], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001a8a7  # or byte [edx-0x4A], dh; std; rep movsd; cld; jmp [0x1001A980+edx*4] 
0x1001a72d  # or byte [edx-0x34], dh; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001ad58  # or byte [edx+eax+0x0C], dh; add al, 0xF6; ret 
0x100154b0  # or byte [esp+eax+0x66], dh; mov eax, [ebp-0x02]; leave; ret 
0x10014f6b  # or byte [edi+edx-0x0A], dh; ret 
0x10012604  # or byte [esi+ecx*2-0x73], dh; test [edi+edi*8-0x01], ecx; call [eax-0x01] 
0x1001bd98  # or byte [edi+esi*4-0x15], dh; jle 0x1001BD59; sub al, 0x71; add edx, [eax]; push ebx; call [0x1002524C] 
0x100169b2  # or byte [eax+eax*8-0x15], dh; jns 0x10016973; sub al, 0x71; add edx, [eax]; push ebx; call [0x1002524C] 
0x10013d16  # or byte [ebp+0x0B], dh; push ecx; call [0x10025180] 
0x10020e57  # or byte [eax+0x5F003824], al; pop esi; mov [fs:0x00000000], ecx; pop ebx; leave; retn 0x0004 
0x1001ac2f  # or byte [ebx+0x51000860], al; call ebx 
0x1001a29f  # or byte [ebx-0x74FF039B], al; ret 
0x100135a5  # or byte [ebx+0x7500DC7D], al; push ebx; push esi; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x1001f991  # or byte [ebx-0x76AEFB40], al; inc ebp; adc al, ch; retn 0xFED8 
0x10014792  # or byte [ebx-0x00AFDF40], al; adc eax, 0x10025074; ret 
0x100147e4  # or byte [ebx-0x00AFDF40], al; adc eax, 0x10025078; ret 
0x10017617  # or byte [ebx-0x7EBCF339], al; call [eax] 
0x10011516  # or byte [ebx+0x597C41F8], al; cmp eax, 0x5A; jnle 0x10011575; add eax, 0x20; pop ebx; ret 
0x100113d3  # or byte [ebx+0x597C61F8], al; cmp eax, 0x7A; jnle 0x10011432; sub eax, 0x20; pop ebx; ret 
0x10022f39  # or byte [ebx+0x0675FFF8], al; or ax, 0x0000FFFF; leave; ret 
0x1001304a  # or byte [ebp+0x500D75F6], al; call [0x10025270] 
0x100225a9  # or byte [ecx-0x743E74FF], cl; dec ebp; hlt; mov [fs:0x00000000], ecx; leave; ret 
0x1001b290  # or byte [ecx-0x03BA74F8], cl; pop edi; pop esi; leave; ret 
0x1001331a  # or byte [ecx+0x0367083D], cl; adc bh, bh; adc eax, 0x1002527C; pop edi; ret 
0x10015c58  # or byte [ecx+0x48891C58], cl; adc byte [esi+0x5B], bl; leave; ret 
0x10019de3  # or byte [ebx+0x044E8B06], cl; mov [eax+0x04], ecx; push [0x10038144]; call [0x10025254]; pop esi; ret 
0x10019de3  # or byte [ebx+0x044E8B06], cl; mov [eax+0x04], ecx; push [0x10038144]; call [0x10025254] 
0x100150f6  # or byte [ebx-0x07BE74F8], cl; mov edx, [ecx-0x04]; ret 
0x10012eee  # or byte [ebx-0x35FCF1F4], cl; add eax, ecx; pop esi; ret 
0x1001ac53  # or byte [ebx+0x0356340D], cl; adc byte [esi-0x75], dl; je 0x1001AC82; or byte [ecx], bh; xor dl, byte [edi-0x75]; retn 0x1174 
0x1001c381  # or byte [ebx+0x02522835], cl; adc byte [ebp+0x1F], dh; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x100150f8  # or byte [ebx+0x518BF841], cl; cld; ret 
0x1001b292  # or byte [ebx+0x5E5FFC45], cl; leave; ret 
0x10021c90  # or byte [ebx+0x018B1C49], cl; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x10021cb4  # or byte [ebx+0x018B2049], cl; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x100138cb  # or byte [ebx+0x4889FC4D], cl; add al, 0xC9; ret 
0x10019549  # or byte [ebx+0x5B5E5FC3], cl; leave; ret 
0x10020880  # or byte [ebx+0x5FA5F3F8], cl; pop esi; leave; retn 0x0010 
0x100193f4  # or byte [ebp+0x35FF8004], cl; inc esp; add [ebx], 0x81348D10; call [0x10025258] 
0x1001939c  # or byte [ebp+0x5E5F0442], cl; pop ebx; leave; ret 
0x100170f1  # or byte [ebp-0x39AFF7BB], cl; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x10021c12  # or byte [esi+edi*8-0x3974A601], ch; pop esi; retn 0x0004 
0x10019f16  # or bl, al; xor eax, eax; pop esi; ret 
0x1002379f  # or bl, al; mov eax, ecx; mov [eax], 0x10027B68; retn 0x0004 
0x1001705e  # or dh, al; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x2E; call [0x100252D0] 
0x10010338  # or dh, al; inc edi; add al, byte [eax]; pop edi; ret 
0x100138e6  # or cl, cl; ret 
0x100121a9  # or al, ch; add eax, [eax]; add byte [eax], al; pop ecx; pop ecx; ret 
0x1001badd  # or al, ch; mov eax, [0x59FFFFFF]; pop ecx; ret 
0x1001bfd6  # or al, ch; les esp, [eax-0x01]; jmp [esi-0x007F] 
0x1001ad55  # or dh, dh; ret 
0x100125d7  # or bh, dh; stc; mov word [esi+0x06], ax; lea eax, [ebp-0x08]; push eax; call [0x1002525C] 
0x1001602c  # or bh, bh; adc eax, 0x10025180; test eax, eax; jne 0x10016046; call [0x100250B0] 
0x10013298  # or bh, bh; adc eax, 0x1002518C; push eax; call [0x10025280] 
0x1001aac4  # or bh, bh; xor eax, 0x10038144; call [0x10025258] 
0x10015072  # or bh, bh; pop ebp; ret 
0x1001bad9  # or bh, bh; je 0x1001BB01; or al, ch; mov eax, [0x59FFFFFF]; pop ecx; ret 
0x1001901c  # or bh, bh; jne 0x10019089; push ebx; push 0x00000000; push [eax+0x0C]; call esi 
0x1001944f  # or bh, bh; mov eax, esi; pop edi; pop esi; ret 
0x10011692  # or [eax], eax; add byte [eax], al; or eax, 0xFFFFFFFF; pop esi; ret 
0x1001eebf  # or [eax], eax; add byte [ebx-0x077CEB3C], al; push [ebp+0x04]; or eax, eax; pop ebp; ret 
0x10020253  # or [eax], eax; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10020194  # or [eax], eax; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x000C 
0x100212d5  # or [eax], eax; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0010 
0x100206ea  # or [ebx], eax; enter 0xC13B, 0x73; add eax, 0x5E00B60F; ret 
0x1001a264  # or [ebx], ebp; retn 0x1989 
0x10017061  # or [edx], edi; mov byte [ebp+0x0A], 0x2E; call [0x100252D0] 
0x100170f8  # or [edx], edi; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x1001178c  # or [ebx], edi; add byte [eax], al; mov [eax], 0x0000000D; call [0x100250B0] 
0x10017b71  # or [esi+0x0C], eax; and [esi+0x04], 0x00000000; or eax, 0xFFFFFFFF; pop esi; ret 
0x100243cf  # or [esi+0x0C], eax; and [esi+0x04], 0x00000000; mov eax, 0x0000FFFF; pop esi; ret 
0x100122e8  # or [esi-0x18], edx; mov bl, 0x00; add byte [eax], al; pop ecx; pop esi; ret 
0x10019c5c  # or [edx+0x01], ebp; mov [0x100355AC], eax; pop eax; ret 
0x10019010  # or [ebx-0x5E01FBA0], eax; sbb byte [ecx+0x03], dh; adc byte [ebx+0x75FF0878], al; imul edx, [ebx+0x6A], 0x0C70FF00; call esi 
0x1001a48b  # or [ebx+0x5E5FF7C0], eax; pop ebx; leave; ret 
0x100202bc  # or [ebp-0x17EE8B37], eax; or eax, 0x85000000; sal byte [eax+ecx-0x75], 0x10; push 0x00000001; mov ecx, eax; call [edx] 
0x100218ea  # or [ebp-0x3EC4B7F4], ecx; jnc 0x100218F7; mov ax, word [eax]; pop esi; ret 
0x100247d1  # or [eax+0x5959FFFF], edi; ret 
0x100246d1  # or [ecx+0x5959FFFF], edi; ret 
0x10012163  # or eax, ebp; cmp byte [edx], dh; add byte [eax], al; pop ecx; ret 
0x1001aaf8  # or eax, ebp; mov [0x59FFFFA8], eax; ret 
0x100134e1  # or eax, ebp; mov edx, 0x5900001E; ret 
0x100122a5  # or eax, ebp; div byte [eax]; add byte [eax], al; pop ecx; ret 
0x10014f22  # or esi, esi; ret 
0x100244ac  # or edi, edi; xor eax, 0x100368AC; call [0x10025208] 
0x1001ac42  # or edi, edi; jne 0x1001AC52; call [0x100250E0] 
0x1001ec26  # or edi, edi; jne 0x1001EC4A; call [0x10025208] 
0x1001ec9a  # or edi, edi; jne 0x1001ECBE; call esi 
0x10023dde  # or edi, edi; call [esi-0x18] 
0x1001c140  # or al, byte [eax]; add byte [eax], al; or eax, 0xFFFFFFFF; pop ebx; pop ebp; ret 
0x1001f097  # or al, byte [eax]; add byte [ebx+0x14C483F0], cl; cmp esi, ebx; jne 0x1001F0F0; call [0x100250B0] 
0x100113b7  # or ah, byte [ebx]; inc ebp; or al, 0xC9; ret 
0x10017065  # or ch, byte [esi]; call [0x100252D0] 
0x1001e645  # or bl, byte [ebx-0x37]; ret 
0x10011cc5  # or ah, byte [esi+0x25]; add al, al; add eax, esi; pop esi; ret 
0x1001745e  # or ch, byte [edx+0x01]; call [0x10025084] 
0x100139ee  # or bh, byte [ecx+edx-0x75]; ret 
0x10010439  # or al, byte [eax-0x74FFFEA0]; ret 
0x10012c9c  # or al, byte [ebx+0x75001C78]; add al, 0x6A; add [eax-0x3D], ebx; xor eax, eax; ret 
0x10017107  # or al, byte [ebx+0x057401F8]; push 0x00000001; pop eax; pop ebp; ret 
0x1001df72  # or cl, byte [ebx+0x665EEC45]; mov [ecx], edx; pop ebx; leave; ret 
0x10013d71  # or cl, byte [ebx-0x2708B73D]; sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x10025290] 
0x1001c3ae  # or bh, bh; jne 0x1001C396; call esi 
0x1001476b  # or eax, [eax]; add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025074]; ret 
0x1001476b  # or eax, [eax]; add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025074] 
0x100147bd  # or eax, [eax]; add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025078]; ret 
0x100147bd  # or eax, [eax]; add byte [ecx-0x3D], bl; add eax, 0x20; push eax; call [0x10025078] 
0x1001478a  # or eax, [eax]; add byte [ecx-0x3D], bl; mov eax, [esp+0x08]; add eax, 0x20; push eax; call [0x10025074] 
0x100147dc  # or eax, [eax]; add byte [ecx-0x3D], bl; mov eax, [esp+0x08]; add eax, 0x20; push eax; call [0x10025078] 
0x10020e06  # or ecx, [esi]; add dl, byte [eax]; ret 
0x1001db38  # or ecx, [edi]; xchg [edi+0x02], esi; add byte [eax], al; jmp [0x1001DF7D+eax*4] 
0x10015d93  # or edx, [eax-0x18]; push es; ret 
0x10021e65  # or ebp, [eax+0x50]; outsb; add edx, [eax]; call [0x10025078]; ret 
0x10021e65  # or ebp, [eax+0x50]; outsb; add edx, [eax]; call [0x10025078] 
0x10021e50  # or ebp, [eax+0x50]; outsb; add edx, [eax]; call [0x1002508C]; ret 
0x10021e50  # or ebp, [eax+0x50]; outsb; add edx, [eax]; call [0x1002508C] 
0x1001312b  # or ebp, [edx+0x01]; pop eax; ret 
0x10014783  # or eax, [ebx-0x17AFE340]; mov bl, 0x0B; add byte [eax], al; pop ecx; ret 
0x100147d5  # or eax, [ebx-0x17AFE340]; retn 0x000B 
0x1002040f  # or ecx, [ebx-0x3074AEF9]; call [eax+0x04] 
0x10018607  # or ecx, [ebx+0x7D89F445]; or byte [ecx-0x581407BB], cl; call [0x100250B0] 
0x1001d8bc  # or ecx, [ebp+0x086AF845]; push eax; push 0x00001004; push [0x10036A08]; call [0x10036A0C] 
0x100173f8  # or eax, eax; pop ebp; ret 
0x1002033a  # or eax, eax; pop esi; ret 
0x10015450  # or eax, eax; leave; ret 
0x100114fb  # or eax, ecx; pop ebx; leave; ret 
0x1001163b  # or eax, ecx; pop edi; pop esi; pop ebx; leave; ret 
0x1001cf62  # or eax, ebx; pop ebx; pop edi; pop esi; ret 
0x1001c9d8  # or eax, edi; pop edi; pop ebx; pop esi; leave; ret 
0x10016c78  # or ecx, eax; mov ecx, [esp+0x0C]; jne 0x10016C89; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x1001e54d  # or ecx, edx; pop edi; mov [eax+0x08], ecx; pop esi; ret 
0x1001e578  # or ecx, edi; pop edi; mov [eax+0x08], edx; mov [eax], ecx; pop esi; ret 
0x1001d8ba  # or ebp, ebx; or ecx, [ebp+0x086AF845]; push eax; push 0x00001004; push [0x10036A08]; call [0x10036A0C] 
0x1001e422  # or edi, edi; jbe 0x1001E47E; push 0x00000008; call ebx 
0x10023bc8  # or edi, edi; call [esi-0x18] 
0x10015da1  # or al, 0x00; mov eax, edi; pop edi; pop esi; ret 
0x1001ae81  # or al, 0x01; test cl, 0x02; je 0x1001AE8D; or eax, 0x00080000; ret 
0x10019f90  # or al, 0x03; retn 0xF93B 
0x1001d3c8  # or al, 0x03; ret 
0x10012ef0  # or al, 0x0E; add ecx, edx; add eax, ecx; pop esi; ret 
0x1001bace  # or al, 0x0F; mov bh, 0xC0; and eax, ecx; leave; ret 
0x10021c74  # or al, 0x12; add [eax], ecx; retn 0x0004 
0x1001be22  # or al, 0x2B; rcr [ebx+0x5E], 0xFFFFFFC9; ret 
0x100152c4  # or al, 0x32; add edx, [eax]; call esi; push [0x100331EC]; call esi 
0x100152c4  # or al, 0x32; add edx, [eax]; call esi 
0x1001531f  # or al, 0x32; add edx, [eax]; call edi; push [0x1003321C]; call edi 
0x1001531f  # or al, 0x32; add edx, [eax]; call edi 
0x10014094  # or al, 0x33; sar byte [ecx], cl; push ebp; sbb byte [edi], cl; xchg eax, esp; retn 0x5589 
0x100218ec  # or al, 0x48; cmp eax, ecx; jnc 0x100218F7; mov ax, word [eax]; pop esi; ret 
0x1001b6bf  # or al, 0x48; je 0x1001B6C6; xor eax, eax; ret 
0x10023668  # or al, 0x50; add dl, byte [eax]; jmp [0x10025010] 
0x1001c0dc  # or al, 0x50; push ebx; call [0x1002507C] 
0x100237d0  # or al, 0x50; ret 
0x10016102  # or al, 0x50; call [0x10025074]; pop edi; pop esi; pop ebx; ret 
0x10016102  # or al, 0x50; call [0x10025074] 
0x10016127  # or al, 0x50; call [0x10025078]; ret 
0x10016127  # or al, 0x50; call [0x10025078] 
0x10015df9  # or al, 0x50; call [0x10025090] 
0x10016369  # or al, 0x50; call [0x100252CC]; test eax, eax; jne 0x10016387; call [0x100250B0] 
0x10016369  # or al, 0x50; call [0x100252CC] 
0x10012750  # or al, 0x50; call ecx 
0x100232f6  # or al, 0x51; add dl, byte [eax]; jmp [0x10025110] 
0x10023476  # or al, 0x52; add dl, byte [eax]; jmp [0x10025210] 
0x1001bc39  # or al, 0x52; add dl, byte [eax]; call ebx 
0x10023260  # or al, 0x53; add dl, byte [eax]; jmp [0x1002532C] 
0x10015e0e  # or al, 0x53; call [0x10025074]; test byte [esi+0x04], 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x10015e0e  # or al, 0x53; call [0x10025074] 
0x1001349a  # or al, 0x56; push ebx; push edi; push [0x10038144]; call [0x10025284] 
0x10013444  # or al, 0x56; push edi; push [0x10038144]; call [0x10025258] 
0x10014244  # or al, 0x57; call [0x1002529C] 
0x100138df  # or al, 0x59; pop ecx; mov ecx, [ebp+0x10]; mov [eax], ecx; leave; ret 
0x1001acf3  # or al, 0x59; fldcw word [ebp+0x0C]; mov eax, esi; pop esi; leave; ret 
0x10016a37  # or al, 0x5E; sub eax, ecx; pop ebx; leave; ret 
0x1001e523  # or al, 0x5F; pop esi; ret 
0x100237c1  # or al, 0x64; mov [0x00000000], esp; mov [esp+0x0C], ebp; lea ebp, [esp+0x0C]; push eax; ret 
0x10023bdb  # or al, 0x66; mov eax, edi; pop edi; pop esi; ret 
0x10013ef2  # or al, 0x67; add edx, [eax]; push 0x00000104; push esi; push ebx; call [0x10025298] 
0x1001949b  # or al, 0x68; add byte [eax], dl; add byte [eax], al; push 0x00008000; push edi; call [0x100252E0] 
0x10014456  # or al, 0x68; add byte [eax+0x00], al; add byte [eax+0x00], ch; add byte [eax], dl; add bh, bh; call edi 
0x1001e986  # or al, 0x68; and byte [edx], al; add byte [eax], al; push [ebp+0x18]; call [0x1002520C] 
0x1001ba55  # or al, 0x6A; add [eax+0x68], edx; and byte [edx], al; add byte [eax], al; push [0x100368AC]; call [0x1002520C] 
0x1001d3a6  # or al, 0x6A; add [eax-0x15], ebx; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; ret 
0x10018772  # or al, 0x6A; add edi, edi; jne 0x10018790; call [0x10025208] 
0x1001aaf6  # or al, 0x6A; or eax, ebp; mov [0x59FFFFA8], eax; ret 
0x10013343  # or al, 0x73; or eax, 0xC085068B; je 0x1001334E; call eax 
0x10019425  # or al, 0x75; adc al, 0xFF; jbe 0x1001943B; push edi; push [0x10038144]; call [0x10025254] 
0x1001f439  # or al, 0x75; ret 
0x1001d402  # or al, 0x7E; mov ebp, 0x5D5B5E5F; ret 
0x10016023  # or al, 0x80; je 0x1001602A; or bl, 0x10; push [ebp+0x08]; call [0x10025180] 
0x100150d2  # or al, 0x83; aas; push [edi+eax-0x75]; ret 
0x10017b73  # or al, 0x83; add al, 0x00; or eax, 0xFFFFFFFF; pop esi; ret 
0x100243d1  # or al, 0x83; add al, 0x00; mov eax, 0x0000FFFF; pop esi; ret 
0x10013de8  # or al, 0x83; jnp 0x10013DE8; add byte [edi+eax+0x53], dh; call [0x1002508C] 
0x10017525  # or al, 0x83; ret 
0x10023917  # or al, 0x83; les ecx, [esi+esi*8]; ret 
0x10013a5a  # or al, 0x83; les ebp, [esi+ebx*2]; leave; ret 
0x10013943  # or al, 0x83; les esi, [eax]; pop esi; leave; ret 
0x1001521e  # or al, 0x83; enter 0x5EFF, 0x5B; pop ebp; ret 
0x1001a6e7  # or al, 0x83; loopne 0x1001A6EE; add ecx, eax; jmp [0x1001A700+eax*4] 
0x1001a877  # or al, 0x83; loopne 0x1001A87E; sub ecx, eax; jmp [0x1001A888+eax*4] 
0x10014cbd  # or al, 0x85; div byte [ebp+0x08]; push edi; call [0x10032D2C] 
0x1001b1ec  # or al, 0x89; xor [edi+0x5E], ebx; pop ebx; leave; ret 
0x100164d8  # or al, 0x8B; xor eax, 0x10025228; call esi; push [ebp-0x04]; call esi 
0x100164d8  # or al, 0x8B; xor eax, 0x10025228; call esi 
0x10019d58  # or al, 0x8B; inc esi; adc byte [ebx], al; ret 
0x10011af8  # or al, 0x8D; pushad; add [ebx], 0x81448A10; add al, 0x83; loopne 0x10011B45; ret 
0x1001611e  # or al, 0x8D; pushad; add [ebx], 0x81448D10; or al, 0x50; call [0x10025078]; ret 
0x1001611e  # or al, 0x8D; pushad; add [ebx], 0x81448D10; or al, 0x50; call [0x10025078] 
0x100237cc  # or al, 0x8D; insb; and al, 0x0C; push eax; ret 
0x1001a7f0  # or al, 0xA8; add [eax], edx; and byte [eax+0x458B1001], ch; or byte [esi+0x5F], bl; leave; ret 
0x100152a9  # or al, 0xC3; push esi; mov esi, [0x10025090]; push [0x1003322C]; call esi 
0x100113ba  # or al, 0xC9; ret 
0x1001325c  # or al, 0xE8; and al, byte [eax]; add byte [eax], al; add esp, 0x0C; ret 
0x1001324b  # or al, 0xE8; xor eax, [eax]; add byte [eax], al; add esp, 0x0C; ret 
0x1001613c  # or al, 0xE8; inc edi; sar bh, 0xFF; add esp, 0x0C; ret 
0x10014a99  # or al, 0xE9; insd; add eax, 0xBE0F0000; ret 
0x1001d3fa  # or al, 0xEB; add ecx, [ebp+0x5D3B015E]; or al, 0x7E; mov ebp, 0x5D5B5E5F; ret 
0x10018753  # or al, 0xEB; or ebp, [edx+0x01]; pop eax; ret 
0x10023912  # or al, 0xF3; retn 0x4E8B 
0x10015265  # or al, 0xF5; test byte [eax], dh; add edx, [eax]; pop esi; mov [eax], ecx; ret 
0x10017aff  # or al, 0xF6; retn 0x7582 
0x1002391a  # or al, 0xF6; ret 
0x1001f7c4  # or al, 0xFF; adc eax, 0x100250A0; mov esi, eax; call [0x100250B0] 
0x1001c349  # or al, 0xFF; adc eax, 0x100251D0; mov esi, eax; call [0x100250B0] 
0x1001ac45  # or al, 0xFF; adc eax, 0x100250E0; pop esi; pop ebx; leave; ret 
0x100186e5  # or al, 0xFF; jne 0x100186F1; push eax; call [0x100251F8] 
0x1001fab9  # or al, 0xFF; jne 0x1001FAC5; call [0x1002509C] 
0x1001d9d9  # or al, 0xFF; jne 0x1001D9E5; call [0x100250BC] 
0x1001bb86  # or al, 0xFF; jne 0x1001BB92; call [0x100250C8] 
0x1001bcc7  # or al, 0xFF; jne 0x1001BCD3; call [0x100250CC] 
0x10018849  # or al, 0xFF; jne 0x10018855; call [0x100252D8] 
0x100188ef  # or al, 0xFF; jne 0x100188FB; call [0x100252DC] 
0x1001e958  # or al, 0xFF; jne 0x1001E964; call [0x100251FC] 
0x10020e60  # or eax, 0x00000000; pop ebx; leave; retn 0x0004 
0x1001217f  # or eax, 0x00000000; pop edi; pop esi; pop ebx; leave; ret 
0x1002025e  # or eax, 0x00000000; leave; retn 0x0004 
0x1002019f  # or eax, 0x00000000; leave; retn 0x000C 
0x1001ffd7  # or eax, 0x00000000; leave; ret 
0x10015390  # or eax, 0x59000000; pop edi; push [esi]; call [0x10025074] 
0x10015259  # or eax, 0x5E000000; ret 
0x100202c2  # or eax, 0x85000000; sal byte [eax+ecx-0x75], 0x10; push 0x00000001; mov ecx, eax; call [edx]; ret 
0x100202c2  # or eax, 0x85000000; sal byte [eax+ecx-0x75], 0x10; push 0x00000001; mov ecx, eax; call [edx] 
0x1001adca  # or eax, 0x00040000; ret 
0x1001ae88  # or eax, 0x00080000; ret 
0x10019904  # or eax, 0xC4830000; or al, 0xFF; or eax, 0x1003711C; and [0x10037118], 0x00000000; ret 
0x1002237d  # or eax, 0x468B0000; sbb byte [ebx+0x5E5FF44D], cl; pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10014276  # or eax, 0x488AC103; sbb cl, byte [eax+0x1B408A0E]; mov byte [esi+0x01], al; pop esi; ret 
0x1001d867  # or eax, 0x10036A04; add al, 0x01; call [0x100250B4]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001d867  # or eax, 0x10036A04; add al, 0x01; call [0x100250B4] 
0x10012fb7  # or eax, 0x10032D20; inc ebx; mov eax, [esp+0x04]; mov [eax+0x50], 0x100355B0; mov [eax+0x14], 0x00000001; ret 
0x10018d37  # or eax, 0x10037124; mov [0x10037108], 0x00000010; pop eax; ret 
0x1001afea  # or eax, 0x04C08341; cmp ecx, 0x03; jl 0x1001AFE6; push 0x00000001; pop eax; ret 
0x1001b6bd  # or eax, 0x74480C74; add esi, [ebx]; rol bl, 0xB8; add al, 0x04; add byte [eax], al; ret 
0x10013345  # or eax, 0xC085068B; je 0x1001334E; call eax 
0x10012ee8  # or eax, 0x8B32348B; dec ecx; or byte [ebx-0x35FCF1F4], cl; add eax, ecx; pop esi; ret 
0x10015df6  # or eax, 0x500C468D; call [0x10025090] 
0x1001845e  # or eax, 0x100334CC; mov [0x100334C8], ebx; pop esi; pop ebx; pop ebp; ret 
0x10011b98  # or eax, 0x004428E8; add byte [ecx+0x50], bl; call [0x10025164]; test eax, eax; jne 0x10011BB2; call [0x100250B0] 
0x10011b98  # or eax, 0x004428E8; add byte [ecx+0x50], bl; call [0x10025164] 
0x10014897  # or eax, 0x186683EE; add byte [ebx+0x66830026], al; or byte [eax], al; pop ecx; pop esi; ret 
0x1001a852  # or eax, 0xFCA5F3FD; jmp [0x1001A980+edx*4] 
0x10023b52  # or eax, 0x5B5EFFFF; pop ebp; ret 
0x100218d1  # or eax, 0x5E5FFFFF; pop ebx; retn 0x0004 
0x10024567  # or eax, 0x2083FFFF; add byte [ebx-0x3D740036], al; pop esi; ret 
0x100214e4  # or eax, 0x56C3FFFF; mov esi, ecx; mov eax, [esi]; call [eax+0x10] 
0x10020e07  # push cs; add dl, byte [eax]; ret 
0x10012ef1  # push cs; add ecx, edx; add eax, ecx; pop esi; ret 
0x1001383d  # push cs; inc esi; test cl, cl; jne 0x10013836; pop esi; ret 
0x10012fae  # push cs; push eax; call [0x1002526C]; or [0x10032D20], 0xFFFFFFFF; ret 
0x10012fae  # push cs; push eax; call [0x1002526C] 
0x10016b89  # push cs; push esi; call ebx 
0x100113fe  # push cs; push esi; call edi 
0x10017b64  # push cs; pop esi; ret 
0x100144af  # push cs; push 0x00008000; push 0x00000000; push eax; call [0x100252BC] 
0x10014caa  # push cs; cmp [ebp-0x08], 0x00000000; jne 0x10014CB9; push edi; call [0x10032D34] 
0x1001427d  # push cs; mov al, byte [eax+0x1B]; mov byte [esi+0x01], al; pop esi; ret 
0x1001b917  # push cs; mov eax, [0x100369A4]; test eax, eax; je 0x1001B926; push ebx; call eax 
0x10021038  # push cs; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x1002222f  # sldt word [eax]; retn 0x0008 
0x10019861  # lsl ecx, word [eax+0x0C]; push 0x00008000; push ecx; call [0x100252BC] 
0x10018fbb  # lsl ecx, word [eax+0x0C]; mov ebx, 0x00008000; push 0x00004000; push ebx; push ecx; call esi 
0x10019498  # lsl edi, word [ecx+0x0C]; push 0x00001000; push 0x00008000; push edi; call [0x100252E0] 
0x10019d96  # orps xmm5, [edx+0x00]; push [0x10038144]; call [0x10025254] 
0x10010f62  # jo 0xFFFFFFFF95100FA3; imul edi, edi, 0x5E5FFFFF; pop ebx; leave; ret 
0x1001e2b8  # jnc 0xFFFFFFFFF854E2DE; fbstp [eax-0x01]; call [edi-0x01] 
0x10013649  # jnc 0x63582735; push edi; push [0x10038144]; call [0x10025284] 
0x10013494  # jnc 0x858B2580; or al, 0x56; push ebx; push edi; push [0x10038144]; call [0x10025284] 
0x1001343e  # jnc 0x858B252A; or al, 0x56; push edi; push [0x10038144]; call [0x10025258] 
0x100119a7  # je 0x100118C5; lea eax, [ebp-0x1C]; push eax; lea eax, [ebp-0x0C]; push eax; call [0x10025230] 
0x1001d321  # je 0x1001D3AC; push 0x00000001; push [0x100369EC]; call [0x100250C4] 
0x1001d30f  # je 0x1001D3AC; movzx eax, di; push eax; call [0x100250C0] 
0x10014565  # je 0x1001465C; lea eax, [ebp-0x000001A4]; push 0x00000104; push eax; push 0x00000000; call [0x10025298] 
0x10010f66  # jne 0x10010ED5; pop edi; pop esi; pop ebx; leave; ret 
0x10014178  # jne 0x100141FF; cmp esi, ebx; jne 0x1001418E; call ebp 
0x1001db39  # ja 0x1001DDB6; jmp [0x1001DF7D+eax*4] 
0x1001491d  # ja 0x1001500C; jmp [0x10015025+eax*4] 
0x100199c1  # jl 0x10019BA1; push 0x00008000; push [ebp-0x0C]; call [0x100252E4] 
0x10019eba  # jg 0x10019E10; pop edi; pop esi; pop ebx; leave; ret 
0x100143db  # sete al; push eax; call [0x100252B8] 
0x10022a1a  # setne al; pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x10012ec9  # setne al; ret 
0x10023795  # setnle cl; mov eax, ecx; retn 0x0004 
0x10020345  # movzx eax, byte [eax]; pop esi; ret 
0x10017b5f  # movzx eax, byte [ecx]; inc ecx; mov [esi], ecx; pop esi; ret 
0x10020813  # movzx eax, byte [ebp-0x01]; pop edi; pop esi; pop ebx; leave; ret 
0x100114f4  # movzx ecx, byte [ebp-0x04]; shl eax, 0x08; or eax, ecx; pop ebx; leave; ret 
0x100243bb  # movzx eax, word [ecx]; add ecx, 0x02; mov [esi], ecx; pop esi; ret 
0x100113b4  # movzx eax, word [ebp+0x0A]; and eax, [ebp+0x0C]; leave; ret 
0x1001be1f  # movzx eax, word [ebp+0x0C]; sub eax, ecx; pop ebx; pop esi; leave; ret 
0x10016a34  # movzx eax, word [ebp+0x0C]; pop esi; sub eax, ecx; pop ebx; leave; ret 
0x10022f6d  # movzx eax, word [ebp-0x02]; leave; ret 
0x1001bacb  # movzx ecx, word [ebp+0x0C]; movzx eax, ax; and eax, ecx; leave; ret 
0x1001bacf  # movzx eax, ax; and eax, ecx; leave; ret 
0x1001d315  # movzx eax, di; push eax; call [0x100250C0] 
0x10014c8e  # movsx eax, bl; push eax; lea eax, [ebp-0x4C]; push edi; push eax; call [0x10032D28] 
0x10011b89  # psubsb mm6, qword [edi]; inc esp; add byte [eax], al; pop ecx; push eax; call [0x10025168] 
0x1001b38d  # psllq mm7, mm7; inc [ebx+0x5E5F10C4]; pop ebx; pop ebp; ret 
0x10014417  # ud0 esi, [0x10038144]; call [0x100252B4]; xor eax, eax; ret 
0x10014417  # ud0 esi, [0x10038144]; call [0x100252B4] 
0x1001a5a6  # ud0 esi, [esp+0x04]; call eax 
0x10023816  # ud0 edi, edi; add esp, 0x14; mov eax, esi; pop esi; pop ebp; ret 
0x10018d42  # adc byte [eax], al; add byte [eax], al; pop eax; ret 
0x1001a094  # adc byte [eax], al; add byte [eax+0x56], dl; mov [ebp-0x08], eax; call [0x100252E0] 
0x1001d4ba  # adc byte [eax], al; add byte [eax+0x56], dl; call [0x10036A0C] 
0x100142d1  # adc byte [eax], al; add byte [eax+0x68], dl; test al, 0x69; add dl, byte [eax]; call [0x100252AC] 
0x10019cc3  # adc byte [eax], al; add byte [ebx+0x57], dl; call ebp 
0x1001949e  # adc byte [eax], al; add byte [eax+0x00], ch; add byte [eax], 0x00; push edi; call [0x100252E0] 
0x10022d19  # adc byte [eax], al; add byte [ebx+0x645EF44D], cl; mov [0x00000000], ecx; leave; ret 
0x10021334  # adc byte [eax], al; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0008 
0x100116ea  # adc byte [eax], al; add byte [ebp-0x0010037B], cl; call [ebx+0x56] 
0x10019d78  # adc byte [eax], al; add bl, ch; fmul qword [ebx+0x6827EBC6]; add byte [eax+0x006A0000], al; push edi; call [0x100252BC] 
0x1001d382  # adc byte [eax], al; add bh, bh; xor eax, 0x10036A08; call [0x10036A0C] 
0x1001d367  # adc byte [eax], al; add bh, bh; xor eax, 0x100369EC; call [0x10036A0C] 
0x10019418  # adc byte [eax], al; push edi; call [0x100252E0] 
0x1001c689  # adc byte [eax], al; pop ecx; pop ecx; xor eax, eax; pop esi; ret 
0x1001bf33  # adc byte [eax], al; jne 0x1001BF3B; xor eax, eax; pop ebp; ret 
0x1001e1da  # adc byte [eax], al; jne 0x1001E1F4; push edi; push 0x1001E275; call [0x100250A8] 
0x1001b66a  # adc byte [eax], al; cmp eax, 0xFFFFFFFE; jne 0x1001B681; mov [0x10036998], 0x00000001; jmp [0x100250D4] 
0x10017839  # adc byte [eax], al; mov eax, [0x100333EC]; pop ecx; ret 
0x10019915  # adc byte [eax], al; ret 
0x1001445f  # adc byte [eax], al; push [esi]; call edi 
0x10021e1c  # adc byte [ecx], al; jne 0x10021E2A; push 0x00000001; call [0x10025084] 
0x100198c9  # adc byte [ecx], al; jle 0x10019910; push [eax+0x10]; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10021034  # adc byte [edx], al; adc al, ch; push cs; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x100210a7  # adc byte [edx], al; adc al, ch; wait; sar dh, 0xFF; pop ecx; ret 
0x10021e62  # adc byte [edx], al; jne 0x10021E71; push 0x10036E50; call [0x10025078]; ret 
0x10021e62  # adc byte [edx], al; jne 0x10021E71; push 0x10036E50; call [0x10025078] 
0x10019d5b  # adc byte [ebx], al; ret 
0x1001d86b  # adc byte [ecx+eax], al; call [0x100250B4]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001d86b  # adc byte [ecx+eax], al; call [0x100250B4] 
0x1001d6df  # adc byte [0x04258307+esi*2], al; push 0x00000003; adc byte [eax], al; ret 
0x10017e8e  # adc byte [ebx], cl; add byte [eax], al; add bl, ch; ret 
0x1001a7ef  # adc byte [eax+ebp*4], cl; add [eax], edx; and byte [eax+0x458B1001], ch; or byte [esi+0x5F], bl; leave; ret 
0x10019d34  # adc byte [edi], cl; popfd; retn 0x234A 
0x1001332c  # adc byte [eax], ah; add byte [eax], al; pop ecx; ret 
0x1001a7f3  # adc byte [eax], ah; test al, 0x01; adc byte [ebx+0x5F5E0845], cl; leave; ret 
0x1001d22c  # adc byte [ebx], dh; rcr byte [ebx-0x37], 0xC3; xor eax, eax; ret 
0x1001cd3d  # adc byte [ebx], dh; rcr byte [edi+0x5D], 0x5B; ret 
0x1001effc  # adc byte [ebx], dh; rcr byte [edi+0x5E], 0x5D; pop ebx; pop ecx; ret 
0x10019da5  # adc byte [ebx], dh; rcr byte [edi+0x5E], 0x5D; pop ebx; ret 
0x1001e58e  # adc byte [ebx], dh; sar byte [ebx], cl; retn 0xC756 
0x1001562f  # adc byte [ebx], dh; fstp tword [eax]; pop esi; add [edi], ecx; xchg eax, esp; ret 
0x1001b9d9  # adc byte [ebx], dh; fstp tword [ecx]; sbb eax, 0x10037128; je 0x1001B9F2; push esi; call edi 
0x10018687  # adc byte [ebx], dh; fstp tword [ebx]; ret 
0x10024174  # adc byte [ebx], dh; call [esi-0x18] 
0x100113f0  # adc byte [ecx], bh; sbb eax, 0x10037128; mov edi, [0x10025248]; je 0x1001140D; push esi; call edi 
0x100154e1  # adc byte [ecx], bh; sbb eax, 0x10037128; mov edi, [0x10025248]; je 0x10015504; push esi; call edi 
0x10011f94  # adc byte [ecx], bh; xor eax, 0x10037128; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011d27  # adc byte [ecx], bh; xor eax, 0x10037128; je 0x10011D48; push edi; call [0x10025248] 
0x10016b7b  # adc byte [ecx], bh; cmp eax, 0x10037128; mov ebx, [0x10025248]; je 0x10016B98; push esi; call ebx 
0x10010eb1  # adc byte [eax+0x3B], al; sal [edx-0x0E], 0x5F; pop esi; pop ebx; pop ebp; ret 
0x1002366e  # adc byte [eax+0x02], dl; adc bh, bh; and eax, 0x10025014; jmp [0x10025018] 
0x1001bb1e  # adc byte [eax+0x56], dl; push eax; push edi; push edi; call [0x100250C8] 
0x1001bb9a  # adc byte [eax+0x56], dl; push eax; push edi; push edi; call [0x100250CC] 
0x1001ead9  # adc byte [eax+0x57], dl; push eax; push ebx; push ebx; call [0x100250C8] 
0x1001eaf6  # adc byte [eax+0x57], dl; push eax; push ebx; push ebx; call [0x100250CC] 
0x1001f85a  # adc byte [eax-0x7D], dl; ret 
0x10014654  # adc byte [eax-0x01], dl; adc eax, 0x1002516C; pop esi; leave; ret 
0x100137d5  # adc byte [eax-0x01], dl; adc eax, 0x10025190; test eax, eax; je 0x100137E6; push 0x00000000; call eax 
0x1001c397  # adc byte [eax-0x01], dl; jne 0x1001C380; call [0x1002507C]; push [ebp-0x1C]; call esi 
0x1001c397  # adc byte [eax-0x01], dl; jne 0x1001C380; call [0x1002507C] 
0x100232fc  # adc byte [ecx+0x02], dl; adc bh, bh; and eax, 0x10025114; jmp [0x10025118] 
0x1002347c  # adc byte [edx+0x02], dl; adc bh, bh; and eax, 0x10025214; jmp [0x10025218] 
0x10016d7e  # adc byte [edx-0x01], dl; xor al, 0x30; call [0x10025174]; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x10016d7e  # adc byte [edx-0x01], dl; xor al, 0x30; call [0x10025174] 
0x1002324e  # adc byte [ebx+0x02], dl; adc bh, bh; and eax, 0x10025304; jmp [0x10025308] 
0x1001050f  # adc byte [ebx+0x56], dl; lea eax, [ebp-0x10]; push edi; push eax; call [0x10025244] 
0x100204fc  # adc byte [ebx-0x75], dl; pop ebp; or byte [esi-0x7D], dl; sti; call [edi-0x75] 
0x10011f8d  # adc byte [ebx-0x01], dl; adc eax, 0x1002524C; cmp [0x10037128], esi; je 0x10011FB5; push ebx; call [0x10025248] 
0x100186b3  # adc byte [esi+0x53], dl; call [0x100251F8] 
0x1001b8c0  # adc byte [esi+0x57], dl; jne 0x1001B907; push 0x100271C0; call [0x100250D0] 
0x10018801  # adc byte [esi+0x57], dl; call [0x100252D8] 
0x1001e932  # adc byte [esi+0x57], dl; call [0x100251F8] 
0x1001ac59  # adc byte [esi-0x75], dl; je 0x1001AC82; or byte [ecx], bh; xor dl, byte [edi-0x75]; retn 0x1174 
0x1001bc32  # adc byte [esi-0x01], dl; jne 0x1001BC57; mov ebx, [0x1002520C]; call ebx 
0x100113e8  # adc byte [edi+0x56], dl; call [0x1002524C] 
0x10018a50  # adc byte [edi+0x56], dl; call [0x100252D8] 
0x1001edb5  # adc byte [edi-0x18], dl; movsb; adc al, 0xFF; call [ebx+0x57] 
0x100172ea  # adc byte [edi-0x18], dl; xlatb; out 0xFF, eax; call [ebx+0x57] 
0x1001942a  # adc byte [edi-0x01], dl; xor eax, 0x10038144; call [0x10025254] 
0x100193c5  # adc byte [edi-0x01], dl; xor eax, 0x10038144; call [0x10025284] 
0x10017fb5  # adc byte [edi-0x01], dl; xor eax, 0x100368AC; call esi 
0x1001ec80  # adc byte [edi-0x01], dl; jne 0x1001ECA5; mov esi, [0x10025208]; call esi 
0x1001b8f1  # adc byte [edi-0x01], dl; salc; push 0x10027190; push edi; mov [0x100369A0], eax; call esi 
0x10019c63  # adc byte [eax-0x3D], bl; xor eax, eax; ret 
0x1001ad4d  # adc byte [eax-0x0A], bl; ret 
0x10017455  # adc byte [ecx+0x39], bl; sbb eax, 0x1003712C; je 0x10017469; push 0x00000001; call [0x10025084] 
0x1001d225  # adc byte [ecx-0x77], bl; sbb eax, 0x100369C4; xor eax, eax; pop ebx; leave; ret 
0x10013f6f  # adc byte [ebx-0x37], bl; ret 
0x100153b3  # adc byte [ebp-0x3D], bl; push [esp+0x04]; push 0x00000000; call [0x100252C0]; push 0x000000FF; call [0x1002527C] 
0x100153b3  # adc byte [ebp-0x3D], bl; push [esp+0x04]; push 0x00000000; call [0x100252C0] 
0x10018468  # adc byte [esi+0x5B], bl; pop ebp; ret 
0x10015c5e  # adc byte [esi+0x5B], bl; leave; ret 
0x1001539d  # adc byte [esi+0x5D], bl; ret 
0x10017c3b  # adc byte [esi-0x77], bl; dec eax; add al, 0x5B; leave; ret 
0x10019df7  # adc byte [esi-0x3D], bl; or [0x10033598], 0xFFFFFFFF; pop esi; ret 
0x100130d5  # adc byte [esi-0x3D], bl; jmp [0x10025260] 
0x1001465b  # adc byte [esi-0x37], bl; ret 
0x1001d9e2  # adc byte [edi+0x5E], bl; pop ebx; pop ebp; retn 0x0010 
0x1001b393  # adc byte [edi+0x5E], bl; pop ebx; pop ebp; ret 
0x1001142f  # adc byte [edi+0x5E], bl; pop ebx; ret 
0x10012565  # adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x10022993  # adc byte [edi+0x5E], bl; mov [fs:0x00000000], ecx; leave; ret 
0x10013f68  # adc byte [edi+0x5E], bl; mov [0x100366DC], eax; pop ebx; leave; ret 
0x100144cf  # adc byte [edi+0x5E], bl; ret 
0x10023067  # adc byte [edi-0x75], bl; ret 
0x10013ef5  # adc byte [eax+0x04], ch; add [eax], eax; add byte [esi+0x53], dl; call [0x10025298] 
0x10018ac6  # adc byte [eax+0x20], ch; add al, byte [eax]; add bh, bh; jne 0x10018AEF; call [0x1002520C] 
0x10019968  # adc byte [eax-0x3C], ch; inc ecx; add byte [eax], al; push esi; call [0x100252E4] 
0x100153c1  # adc byte [eax-0x01], ch; add byte [eax], al; add bh, bh; adc eax, 0x1002527C; ret 
0x1001902f  # adc byte [edx+0x00], ch; push [0x10038144]; call [0x10025254] 
0x1001448e  # adc byte [edx+0x00], ch; push [0x10038144]; call ebp 
0x1001d468  # adc byte [edx+0x01], ch; push 0x1001D491; call [0x100250B8] 
0x1001d6cc  # adc byte [edx+0x01], ch; push 0x1001D6EB; call [0x100250B8] 
0x100202cb  # adc byte [edx+0x01], ch; mov ecx, eax; call [edx]; ret 
0x100202cb  # adc byte [edx+0x01], ch; mov ecx, eax; call [edx] 
0x100188d7  # adc byte [edx+0x01], ch; push [ebp+0x20]; call [0x10025208] 
0x10019c9f  # adc byte [edx+0x04], ch; push 0x00002000; push 0x00400000; push 0x00000000; call ebp 
0x1001ec24  # adc byte [edx+0x09], ch; push [ebp+0x20]; call [0x10025208] 
0x1001fb3b  # adc byte [edx-0x01], ch; push esi; push 0x00000001; push [ebp+0x18]; call [0x10025208] 
0x1001fc56  # adc byte [edx-0x01], ch; push edi; push 0x00000220; push [ebp+0x18]; call [0x1002520C] 
0x10017fe7  # adc byte [edx-0x01], ch; push 0x10036920; push edi; push [0x100368AC]; call esi 
0x10017fae  # adc byte [edx-0x01], ch; push 0x100368CC; push edi; push [0x100368AC]; call esi 
0x10020f88  # adc byte [ebp+0x03], ch; adc al, ch; fiadd [esi]; add byte [eax], al; ret 
0x10011ae6  # adc byte [edx+0x03], dh; xor eax, eax; ret 
0x1001d8fa  # adc byte [edx-0x13], dh; push 0x00000001; pop eax; ret 
0x1001b4fd  # adc byte [edx-0x0F], dh; lea eax, [ebp-0x18]; push eax; push ebx; call [0x100250DC] 
0x1001ad5f  # adc byte [edx+eax+0x0C], dh; add dh, dh; ret 
0x1001adda  # adc byte [ebx+eax+0x6A], dh; add [eax-0x0A], ebx; ret 
0x10015304  # adc byte [ebx+ecx+0x50], dh; call edi 
0x10016b87  # adc byte [esi+ecx+0x56], dh; call ebx 
0x100113fc  # adc byte [esi+ecx+0x56], dh; call edi 
0x10019d94  # adc byte [edi+ecx+0x56], dh; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x100154ed  # adc byte [esp+edx+0x56], dh; call edi 
0x10011f9a  # adc byte [eax+ebx+0x53], dh; call [0x10025248] 
0x10022ff8  # adc byte [eax+ebx+0x56], dh; call [0x10025248] 
0x10011d2d  # adc byte [eax+ebx+0x57], dh; call [0x10025248] 
0x100154d3  # adc byte [esp+ecx*2-0x42], dh; sub al, 0x71; add edx, [eax]; push esi; call [0x1002524C] 
0x10018d19  # adc byte [ebp+0x01], dh; ret 
0x1001506e  # adc byte [ebp+0x05], dh; or [eax], 0xFFFFFFFF; pop ebp; ret 
0x10021e2f  # adc byte [ebp+0x07], dh; push ebx; call [0x10025074] 
0x10014683  # adc byte [ebp+0x07], dh; mov eax, [eax+0x10032D6C]; ret 
0x10013292  # adc byte [ebp+0x11], dh; push [esp+0x08]; call [0x1002518C]; push eax; call [0x10025280] 
0x10013292  # adc byte [ebp+0x11], dh; push [esp+0x08]; call [0x1002518C] 
0x1001c387  # adc byte [ebp+0x1F], dh; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x10021ddf  # adc byte [ebp+0x35], dh; push 0x00000001; push 0x10036E68; call [0x10025098] 
0x1001388f  # adc byte [ebp-0x0A], dh; ret 
0x10013e1a  # adc byte [eax+edi*4+0x5F], bh; pop esi; pop ebx; ret 
0x1001531a  # adc byte [esp+eax*8-0x01], bh; xor eax, 0x1003320C; call edi; push [0x1003321C]; call edi 
0x1001531a  # adc byte [esp+eax*8-0x01], bh; xor eax, 0x1003320C; call edi 
0x10014486  # adc byte [esi+ecx*8-0x01], bh; xor eax, 0x10037120; push 0x00000000; push [0x10038144]; call ebp 
0x10014733  # adc byte [ecx+edx*8+0x5E], bh; ret 
0x10019d8e  # adc byte [ecx+0x033588FE], al; adc byte [edi+ecx+0x56], dh; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x1001944d  # adc byte [ebx-0x397400F8], al; pop edi; pop esi; ret 
0x10012fb5  # adc byte [ebx+0x032D200D], al; adc bh, bh; ret 
0x1001990f  # adc byte [ebx+0x03711825], al; adc byte [eax], al; ret 
0x10021e16  # adc byte [ebx+0x036E683D], al; adc byte [ecx], al; jne 0x10021E2A; push 0x00000001; call [0x10025084] 
0x10012f90  # adc byte [ebx+0x6AFF044E], al; add [ecx-0x3CA1A7FA], ecx; xor eax, eax; pop esi; ret 
0x10019019  # adc byte [ebx+0x75FF0878], al; imul edx, [ebx+0x6A], 0x0C70FF00; call esi 
0x100128b4  # adc byte [ebx+0x7F00F47D], al; retn 0x24EB 
0x10017b6d  # adc byte [ebx+0x460910C0], al; or al, 0x83; add al, 0x00; or eax, 0xFFFFFFFF; pop esi; ret 
0x100243cb  # adc byte [ebx+0x460910C0], al; or al, 0x83; add al, 0x00; mov eax, 0x0000FFFF; pop esi; ret 
0x1001faab  # adc byte [ebx+0x177501F8], al; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001e94a  # adc byte [ebx+0x177501F8], al; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100251FC] 
0x10021e4b  # adc byte [ebx+0x0B7502F8], al; push 0x10036E50; call [0x1002508C]; ret 
0x10021e4b  # adc byte [ebx+0x0B7502F8], al; push 0x10036E50; call [0x1002508C] 
0x1001fbbe  # adc byte [ebx+0x177502F8], al; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10018c32  # adc byte [ebx+0x067503F8], al; mov eax, [0x10037124]; ret 
0x1001b695  # adc byte [ebx+0x0F75FCF8], al; mov eax, [0x100368AC]; mov [0x10036998], 0x00000001; ret 
0x1001b680  # adc byte [ebx+0x1075FDF8], al; mov [0x10036998], 0x00000001; jmp [0x100250D8] 
0x10012fa9  # adc byte [ebx+0x0E74FFF8], al; push eax; call [0x1002526C]; or [0x10032D20], 0xFFFFFFFF; ret 
0x10012fa9  # adc byte [ebx+0x0E74FFF8], al; push eax; call [0x1002526C] 
0x10020334  # adc byte [ebx+0x0475FFF8], al; or eax, eax; pop esi; ret 
0x10017734  # adc byte [ebx+0x057501FF], al; mov [0x100368B0], eax; call [esi+0x100333D8] 
0x1001d31e  # adc byte [ebp-0x7A7BF040], al; add byte [eax], al; add byte [edx+0x01], ch; push [0x100369EC]; call [0x100250C4] 
0x1001fb9b  # adc byte [ebp+0x6A0474C0], al; add ebx, ebp; adc eax, 0x016A5656; push esi; call [0x100250BC] 
0x1001fa88  # adc byte [ebp+0x6A0474C0], al; add ebx, ebp; adc eax, 0x016A5757; push edi; call [0x100250BC] 
0x1001b91c  # adc byte [ebp+0x530574C0], al; call eax 
0x10017103  # adc byte [ebp-0x7CF58B40], al; clc; add [ebp+eax+0x6A], esi; add [eax+0x5D], ebx; ret 
0x100144ab  # adc byte [ebp+0x680E74C0], al; add byte [eax+0x006A0000], al; push eax; call [0x100252BC] 
0x1001318a  # adc byte [ebp-0x38E98B40], al; inc ebp; cld; add [eax], eax; add byte [eax], al; call eax 
0x10011a6e  # adc byte [ebp-0x72AF8B40], al; inc ebp; in al, 0x50; lea eax, [ebp-0x0C]; push eax; call [0x10025230] 
0x1001c0d5  # adc byte [ebp-0x72EC8A40], al; inc ebp; or al, 0x50; push ebx; call [0x1002507C] 
0x10021dee  # adc byte [ebp+0x531A75C0], al; call [0x10025090] 
0x10018d12  # adc byte [ebp+0x7120A3C0], al; add edx, [eax]; jne 0x10018D1D; ret 
0x1001845c  # adc byte [ecx+0x0334CC0D], cl; adc byte [ecx+0x0334C81D], cl; adc byte [esi+0x5B], bl; pop ebp; ret 
0x10018462  # adc byte [ecx+0x0334C81D], cl; adc byte [esi+0x5B], bl; pop ebp; ret 
0x10013ec9  # adc byte [ecx-0x38A1A0E2], cl; add eax, 0x10038264; add [eax], eax; add byte [eax], al; pop ebx; ret 
0x10012601  # adc byte [ecx+0x4E740845], cl; lea eax, [ebp-0x000000B4]; push eax; call [0x10025198] 
0x1001fbed  # adc byte [ecx+0x56561845], cl; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001fad6  # adc byte [ecx+0x57571845], cl; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10021d29  # adc byte [ecx-0x7B5EBFBA], cl; add byte [ebx], 0x10; and [esi+0x38], 0x00000000; mov [esi+0x3C], eax; pop esi; retn 0x0008 
0x10011483  # adc byte [edx-0x1F7CA7FC], cl; add al, byte [ebp-0x74FB8A40]; ret 
0x100180af  # adc byte [edx+0x742B3C06], cl; or byte [edx], bh; ret 
0x10011afd  # adc byte [edx-0x7CFB7EBC], cl; loopne 0x10011B45; ret 
0x10015cdb  # adc byte [ebx-0x3CC4F9FC], cl; je 0x10015D1D; add eax, 0x20; push eax; call [0x10025090] 
0x10016b81  # adc byte [ebx+0x0252481D], cl; adc byte [esi+ecx+0x56], dh; call ebx 
0x100144bd  # adc byte [ebx+0x75F73B36], cl; in eax, 0xFF; xor eax, 0x10038144; call [0x100252B4] 
0x100113f6  # adc byte [ebx+0x0252483D], cl; adc byte [esi+ecx+0x56], dh; call edi 
0x100154e7  # adc byte [ebx+0x0252483D], cl; adc byte [esp+edx+0x56], dh; call edi 
0x1001e587  # adc byte [ebx-0x74ACF3BB], cl; pop ebp; adc byte [ebx], dh; sar byte [ebx], cl; retn 0xC756 
0x1002315b  # adc byte [ebx+0x5E5FFC45], cl; pop ebx; leave; ret 
0x10020563  # adc byte [ebx+0x5D88444E], cl; call [edi-0x18] 
0x100141ef  # adc byte [ebx+0x5610245C], cl; call [0x100252A0] 
0x10016b35  # adc byte [ebx-0x7CFC143F], cl; enter 0x5BFF, 0xC9; ret 
0x100141fa  # adc byte [ebx-0x7CAC143D], cl; clc; add dh, byte [ebp+0x4C]; cmp edi, ebx; jne 0x10014214; call [0x100252A4] 
0x10021f61  # adc byte [ebx+0x5B5E5FC6], cl; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10021e38  # adc byte [ebx+0x5B5E5FC6], cl; ret 
0x10017662  # adc byte [ebx+0x02EB5FC6], cl; xor eax, eax; pop esi; pop ebx; leave; ret 
0x1001424b  # adc byte [ebx+0x3302EBC6], cl; rcr byte [edi+0x5E], 0x5D; pop ebx; pop ecx; pop ecx; ret 
0x10011baf  # adc byte [ebx+0x245C39F8], cl; adc al, 0x7E; adc eax, 0x1174FB3B; push 0x000003E8; call [0x10025084] 
0x10013d82  # adc byte [ebx-0x00007C08], cl; je 0x10013DA1; push edi; call [0x10025180] 
0x10016f76  # adc byte [ebx-0x00007C08], cl; jne 0x10016F86; call [0x100250B0] 
0x100162fd  # adc byte [ebx+0x3302EBF8], cl; call [esi-0x18] 
0x10016fa8  # adc byte [ebp+0x6480C004], cl; add [0x0481448D+edi*8], 0x5E5FC78B; ret 
0x10016123  # adc byte [ebp+0x500C8144], cl; call [0x10025078]; ret 
0x10016123  # adc byte [ebp+0x500C8144], cl; call [0x10025078] 
0x1001c394  # adc byte [ebp-0x00AFEFBB], cl; jne 0x1001C380; call [0x1002507C]; push [ebp-0x1C]; call esi 
0x1001c394  # adc byte [ebp-0x00AFEFBB], cl; jne 0x1001C380; call [0x1002507C] 
0x10016e47  # adc byte [ebp+0x016AFF45], cl; push eax; mov eax, [edi]; push [eax+esi]; call [0x10025174] 
0x1001fff1  # adc byte [ebp-0x6BF003B3], cl; ret 
0x10014453  # adc byte [ebp+0x00680C70], cl; inc eax; add byte [eax], al; push 0x00100000; push [esi]; call edi 
0x100178f7  # adc byte [ebp-0x0000877B], cl; call [eax+0x57] 
0x10015cec  # adc byte [ecx+0x10037130], ah; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x10025074] 
0x1001b906  # adc byte [ecx+0x100369A0], ah; test eax, eax; je 0x1001B926; call eax 
0x1001b6fc  # adc byte [ebx+0x10037104], ah; stosd; stosd; stosd; pop edi; ret 
0x1001d873  # adc byte [ebx+0x10036A08], ah; mov [0x100369EC], eax; ret 
0x10019091  # adc byte [ebx+0x10037118], ah; pop edi; pop esi; pop ebx; leave; ret 
0x10013203  # adc byte [ebx+0x100366C4], ah; ret 
0x1001d878  # adc byte [ebx+0x100369EC], ah; ret 
0x1001d7c2  # adc byte [ebx+0x100369F0], ah; call [0x100250B8]; test byte [0x10036A04], 0x04; jne 0x1001D7DE; and [0x10036A04], 0x00000000; ret 
0x1001d7c2  # adc byte [ebx+0x100369F0], ah; call [0x100250B8] 
0x1001a987  # adc byte [eax-0x43EFFE57], ch; test eax, 0x458B1001; or byte [esi+0x5F], bl; leave; ret 
0x1002308c  # adc byte [ebx+0x1003712C], bh; push ebx; call [0x1002524C] 
0x1001a98b  # adc byte [ecx+ebp*4+0x458B1001], bh; or byte [esi+0x5F], bl; leave; ret 
0x100187e0  # adc byte [esi+0x00000100], bh; push esi; push edi; call [0x100252DC] 
0x1001bbd9  # adc byte [esi+0x00000220], bh; push esi; push [ebp+0x20]; call [0x1002520C] 
0x10018a2f  # adc byte [edi+0x00000100], bh; push edi; push esi; call [0x100252DC] 
0x100157cb  # adc cl, al; clc; add dh, bh; fcomp [edi+0x5E]; ret 
0x100237a8  # adc dl, al; add al, 0x00; mov eax, ecx; retn 0x0004 
0x1001468b  # adc bl, al; xor eax, eax; ret 
0x10021e5b  # adc bl, al; cmp [0x10036E68], 0x02; jne 0x10021E71; push 0x10036E50; call [0x10025078]; ret 
0x10021e5b  # adc bl, al; cmp [0x10036E68], 0x02; jne 0x10021E71; push 0x10036E50; call [0x10025078] 
0x10013215  # adc bl, al; mov eax, [0x10032A18]; test eax, eax; je 0x10013222; call eax 
0x1001a59c  # adc bl, al; mov eax, [0x10036994]; test eax, eax; je 0x1001A5B6; push [esp+0x04]; call eax 
0x10013208  # adc bl, al; push [0x100366C4]; call [0x10025278]; ret 
0x10013208  # adc bl, al; push [0x100366C4]; call [0x10025278] 
0x10018d3b  # adc bh, al; add eax, 0x10037108; adc byte [eax], al; add byte [eax], al; pop eax; ret 
0x1001b69f  # adc bh, al; add eax, 0x10036998; add [eax], eax; add byte [eax], al; ret 
0x1001b670  # adc bh, al; add eax, 0x10036998; add [eax], eax; add byte [eax], al; jmp [0x100250D4] 
0x1001b685  # adc bh, al; add eax, 0x10036998; add [eax], eax; add byte [eax], al; jmp [0x100250D8] 
0x10022570  # adc cl, cl; ret 
0x1001389e  # adc bh, bl; loopne 0x10013840; jc 0x100138A8; push 0x00000001; pop eax; ret 
0x10020f5e  # adc al, ch; pop es; pop es; add byte [eax], al; ret 
0x10021036  # adc al, ch; push cs; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x10016154  # adc al, ch; cmp dl, byte [ecx]; add byte [eax], al; add esp, 0x10; ret 
0x1001fd2f  # adc al, ch; push edx; pop es; add byte [eax], al; ret 
0x10020ff2  # adc al, ch; push edx; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x10020ef1  # adc al, ch; push ebx; retn 0xFFFE 
0x100241a9  # adc al, ch; push esp; add eax, [eax]; add byte [ebx], ah; retn 0xC483 
0x10020ee5  # adc al, ch; pop edi; retn 0xFFFE 
0x10018077  # adc al, ch; arpl word [ebx-0x01], si; jmp [ecx+0x100334AC] 
0x1001fe13  # adc al, ch; jnc 0x1001FE19; add byte [eax], al; ret 
0x1002106f  # adc al, ch; je 0x10021075; add byte [eax], al; ret 
0x1001fd02  # adc al, ch; jnle 0x1001FD0D; add byte [eax], al; ret 
0x1001232c  # adc al, ch; xchg [edx-0x27090000], eax; pop ecx; pop esi; sbb eax, eax; ret 
0x100210a9  # adc al, ch; wait; sar dh, 0xFF; pop ecx; ret 
0x1001fde4  # adc al, ch; popfd; push es; add byte [eax], al; ret 
0x10018136  # adc al, ch; movsb; jc 0x1001813A; jmp [ecx+0x100334B0] 
0x10020fb8  # adc al, ch; lodsd; push es; add byte [eax], al; ret 
0x10020f96  # adc al, ch; scasb; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x10012196  # adc al, ch; mov bh, 0x4F; add byte [eax], al; add esp, 0x10; ret 
0x1001d5f8  # adc al, ch; retn 0xFF20 
0x1001f998  # adc al, ch; retn 0xFED8 
0x10020f8b  # adc al, ch; fiadd [esi]; add byte [eax], al; ret 
0x1001fda2  # adc al, ch; in al, 0x02; add byte [eax], al; ret 
0x1001ed56  # adc al, ch; in eax, 0x06; add byte [eax], al; add esp, 0x10; ret 
0x10017974  # adc al, ch; test byte [eax+0x4F59FFFF], 0x59; jne 0x1001796B; pop esi; pop edi; ret 
0x10012368  # adc al, ch; jmp [eax+0x00] 
0x1001748c  # adc cl, ch; ret 
0x100206ce  # adc bl, ch; add eax, [ebx+0x5E5FFFC8]; pop ebx; retn 0x0004 
0x100218cd  # adc bl, ch; add al, 0x66; or eax, 0x5E5FFFFF; pop ebx; retn 0x0004 
0x1001c3b6  # adc bl, ch; push es; mov eax, [ebp-0x1C]; mov [ebp+0x10], eax; push [ebp-0x18]; call esi 
0x10011b96  # adc bl, ch; or eax, 0x004428E8; add byte [ecx+0x50], bl; call [0x10025164] 
0x1001706c  # adc bl, ch; adc cl, byte [ebp-0x0001077B]; call [eax+0x68]; add al, 0x01; add byte [eax], al; call [0x10025220] 
0x1001706c  # adc bl, ch; adc cl, byte [ebp-0x0001077B]; call [eax+0x68] 
0x1001bcd0  # adc bl, ch; sbb al, 0x8B; ret 
0x1001b818  # adc bl, ch; sbb al, 0xF6; retn 0x7402 
0x10019c7a  # adc bl, ch; sbb eax, 0x00202068; add byte [edx+0x00], ch; push [0x10038144]; call [0x10025258] 
0x1001e210  # adc bl, ch; push esi; call [0x100250B0] 
0x10021e27  # adc bl, ch; in eax, dx; cmp [0x10036E68], edi; jne 0x10021E39; push ebx; call [0x10025074] 
0x1001d6d9  # adc dh, dh; add eax, 0x10036A04; add al, 0x75; pop es; and [0x10036A04], 0x00000000; ret 
0x10015e15  # adc dh, dh; inc esi; add al, 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x10014f68  # adc dh, dh; ret 
0x10019df1  # adc bh, bh; adc eax, 0x10025254; pop esi; ret 
0x100130cf  # adc bh, bh; adc eax, 0x10025264; pop esi; ret 
0x100153ad  # adc bh, bh; adc eax, 0x10025078; pop ebp; ret 
0x10021e6a  # adc bh, bh; adc eax, 0x10025078; ret 
0x100131fd  # adc bh, bh; adc eax, 0x10025278; mov [0x100366C4], eax; ret 
0x1001320f  # adc bh, bh; adc eax, 0x10025278; ret 
0x10021e55  # adc bh, bh; adc eax, 0x1002508C; ret 
0x10021e45  # adc bh, bh; adc eax, 0x10025098; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C] 
0x10021de8  # adc bh, bh; adc eax, 0x10025098; test eax, eax; jne 0x10021E0D; push ebx; call [0x10025090] 
0x1001441d  # adc bh, bh; adc eax, 0x100252B4; xor eax, eax; ret 
0x100144c9  # adc bh, bh; adc eax, 0x100252B4; pop edi; pop esi; ret 
0x1001d6d3  # adc bh, bh; adc eax, 0x100250B8; test byte [0x10036A04], 0x04; jne 0x1001D6EA; and [0x10036A04], 0x00000000; ret 
0x100236b9  # adc bh, bh; and eax, 0x10025000; jmp [0x10025054] 
0x100232e1  # adc bh, bh; and eax, 0x10025100; jmp [0x10025104] 
0x10023461  # adc bh, bh; and eax, 0x10025200; jmp [0x10025204] 
0x10023239  # adc bh, bh; and eax, 0x10025300; jmp [0x10025314] 
0x100236a1  # adc bh, bh; and eax, 0x10025004; jmp [0x10025058] 
0x100232e7  # adc bh, bh; and eax, 0x10025104; jmp [0x10025108] 
0x10023467  # adc bh, bh; and eax, 0x10025204; jmp [0x10025208] 
0x10023251  # adc bh, bh; and eax, 0x10025304; jmp [0x10025308] 
0x1002365f  # adc bh, bh; and eax, 0x10025008; jmp [0x1002500C] 
0x100232ed  # adc bh, bh; and eax, 0x10025108; jmp [0x1002510C] 
0x1002346d  # adc bh, bh; and eax, 0x10025208; jmp [0x1002520C] 
0x10023257  # adc bh, bh; and eax, 0x10025308; jmp [0x1002530C] 
0x10023665  # adc bh, bh; and eax, 0x1002500C; jmp [0x10025010] 
0x100232f3  # adc bh, bh; and eax, 0x1002510C; jmp [0x10025110] 
0x10023473  # adc bh, bh; and eax, 0x1002520C; jmp [0x10025210] 
0x1002325d  # adc bh, bh; and eax, 0x1002530C; jmp [0x1002532C] 
0x1002366b  # adc bh, bh; and eax, 0x10025010; jmp [0x10025014] 
0x100232f9  # adc bh, bh; and eax, 0x10025110; jmp [0x10025114] 
0x10023479  # adc bh, bh; and eax, 0x10025210; jmp [0x10025214] 
0x1002324b  # adc bh, bh; and eax, 0x10025310; jmp [0x10025304] 
0x10023671  # adc bh, bh; and eax, 0x10025014; jmp [0x10025018] 
0x100232ff  # adc bh, bh; and eax, 0x10025114; jmp [0x10025118] 
0x1002347f  # adc bh, bh; and eax, 0x10025214; jmp [0x10025218] 
0x1002323f  # adc bh, bh; and eax, 0x10025314; jmp [0x100252FC] 
0x10023677  # adc bh, bh; and eax, 0x10025018; jmp [0x1002501C] 
0x10023305  # adc bh, bh; and eax, 0x10025118; jmp [0x1002511C] 
0x10023485  # adc bh, bh; and eax, 0x10025218; jmp [0x1002521C] 
0x1002367d  # adc bh, bh; and eax, 0x1002501C; jmp [0x10025020] 
0x1002348b  # adc bh, bh; and eax, 0x1002521C; jmp [0x10025220] 
0x10023281  # adc bh, bh; and eax, 0x1002531C; jmp [0x10025320] 
0x10023683  # adc bh, bh; and eax, 0x10025020; jmp [0x10025024] 
0x10023311  # adc bh, bh; and eax, 0x10025120; jmp [0x10025124] 
0x10023491  # adc bh, bh; and eax, 0x10025220; jmp [0x10025224] 
0x10023287  # adc bh, bh; and eax, 0x10025320; jmp [0x1002536C] 
0x10023689  # adc bh, bh; and eax, 0x10025024; jmp [0x10025028] 
0x10023317  # adc bh, bh; and eax, 0x10025124; jmp [0x10025128] 
0x10023497  # adc bh, bh; and eax, 0x10025224; jmp [0x10025228] 
0x1002368f  # adc bh, bh; and eax, 0x10025028; jmp [0x1002502C] 
0x1002331d  # adc bh, bh; and eax, 0x10025128; jmp [0x1002512C] 
0x1002349d  # adc bh, bh; and eax, 0x10025228; jmp [0x1002522C] 
0x10023269  # adc bh, bh; and eax, 0x10025328; jmp [0x100252F0] 
0x10023695  # adc bh, bh; and eax, 0x1002502C; jmp [0x10025064] 
0x10023323  # adc bh, bh; and eax, 0x1002512C; jmp [0x10025130] 
0x100234a3  # adc bh, bh; and eax, 0x1002522C; jmp [0x10025230] 
0x10023263  # adc bh, bh; and eax, 0x1002532C; jmp [0x10025328] 
0x100236f5  # adc bh, bh; and eax, 0x10025030; jmp [0x10025334] 
0x10023329  # adc bh, bh; and eax, 0x10025130; jmp [0x10025134] 
0x100234a9  # adc bh, bh; and eax, 0x10025230; jmp [0x10025234] 
0x100236ef  # adc bh, bh; and eax, 0x10025034; jmp [0x10025030] 
0x1002332f  # adc bh, bh; and eax, 0x10025134; jmp [0x10025138] 
0x100234af  # adc bh, bh; and eax, 0x10025234; jmp [0x10025238] 
0x100236e9  # adc bh, bh; and eax, 0x10025038; jmp [0x10025034] 
0x10023335  # adc bh, bh; and eax, 0x10025138; jmp [0x1002513C] 
0x100234b5  # adc bh, bh; and eax, 0x10025238; jmp [0x1002523C] 
0x100236e3  # adc bh, bh; and eax, 0x1002503C; jmp [0x10025038] 
0x1002333b  # adc bh, bh; and eax, 0x1002513C; jmp [0x10025140] 
0x100234bb  # adc bh, bh; and eax, 0x1002523C; jmp [0x10025240] 
0x10023233  # adc bh, bh; and eax, 0x1002533C; jmp [0x10025300] 
0x100236dd  # adc bh, bh; and eax, 0x10025040; jmp [0x1002503C] 
0x10023341  # adc bh, bh; and eax, 0x10025140; jmp [0x10025144] 
0x100234c1  # adc bh, bh; and eax, 0x10025240; jmp [0x10025244] 
0x100236d7  # adc bh, bh; and eax, 0x10025044; jmp [0x10025040] 
0x10023347  # adc bh, bh; and eax, 0x10025144; jmp [0x10025148] 
0x100234c7  # adc bh, bh; and eax, 0x10025244; jmp [0x10025248] 
0x100236d1  # adc bh, bh; and eax, 0x10025048; jmp [0x10025044] 
0x1002334d  # adc bh, bh; and eax, 0x10025148; jmp [0x1002514C] 
0x100234cd  # adc bh, bh; and eax, 0x10025248; jmp [0x1002524C] 
0x10023647  # adc bh, bh; and eax, 0x10025348; jmp [0x1002534C] 
0x100236cb  # adc bh, bh; and eax, 0x1002504C; jmp [0x10025048] 
0x10023353  # adc bh, bh; and eax, 0x1002514C; jmp [0x10025150] 
0x100234d3  # adc bh, bh; and eax, 0x1002524C; jmp [0x10025250] 
0x1002364d  # adc bh, bh; and eax, 0x1002534C; jmp [0x10025350] 
0x100236c5  # adc bh, bh; and eax, 0x10025050; jmp [0x1002504C] 
0x10023359  # adc bh, bh; and eax, 0x10025150; jmp [0x10025154] 
0x100234d9  # adc bh, bh; and eax, 0x10025250; jmp [0x10025254] 
0x10023653  # adc bh, bh; and eax, 0x10025350; jmp [0x10025364] 
0x100236bf  # adc bh, bh; and eax, 0x10025054; jmp [0x10025050] 
0x1002335f  # adc bh, bh; and eax, 0x10025154; jmp [0x10025158] 
0x100234df  # adc bh, bh; and eax, 0x10025254; jmp [0x10025258] 
0x10023641  # adc bh, bh; and eax, 0x10025354; jmp [0x10025348] 
0x100236a7  # adc bh, bh; and eax, 0x10025058; jmp [0x10025060] 
0x10023365  # adc bh, bh; and eax, 0x10025158; jmp [0x1002515C] 
0x100234e5  # adc bh, bh; and eax, 0x10025258; jmp [0x1002525C] 
0x1002362f  # adc bh, bh; and eax, 0x10025358; jmp [0x10025360] 
0x100236b3  # adc bh, bh; and eax, 0x1002505C; jmp [0x10025000] 
0x1002336b  # adc bh, bh; and eax, 0x1002515C; jmp [0x10025160] 
0x100234eb  # adc bh, bh; and eax, 0x1002525C; jmp [0x10025260] 
0x1002363b  # adc bh, bh; and eax, 0x1002535C; jmp [0x10025354] 
0x100236ad  # adc bh, bh; and eax, 0x10025060; jmp [0x1002505C] 
0x10023371  # adc bh, bh; and eax, 0x10025160; jmp [0x10025164] 
0x100234f1  # adc bh, bh; and eax, 0x10025260; jmp [0x10025264] 
0x10023635  # adc bh, bh; and eax, 0x10025360; jmp [0x1002535C] 
0x1002369b  # adc bh, bh; and eax, 0x10025064; jmp [0x10025004] 
0x10023377  # adc bh, bh; and eax, 0x10025164; jmp [0x10025168] 
0x100234f7  # adc bh, bh; and eax, 0x10025264; jmp [0x10025268] 
0x10023659  # adc bh, bh; and eax, 0x10025364; jmp [0x10025008] 
0x1002337d  # adc bh, bh; and eax, 0x10025168; jmp [0x1002516C] 
0x100234fd  # adc bh, bh; and eax, 0x10025268; jmp [0x1002526C] 
0x1002327b  # adc bh, bh; and eax, 0x1002506C; jmp [0x1002531C] 
0x10023383  # adc bh, bh; and eax, 0x1002516C; jmp [0x10025170] 
0x10023503  # adc bh, bh; and eax, 0x1002526C; jmp [0x10025270] 
0x1002328d  # adc bh, bh; and eax, 0x1002536C; jmp [0x10025370] 
0x10023389  # adc bh, bh; and eax, 0x10025170; jmp [0x10025174] 
0x10023293  # adc bh, bh; and eax, 0x10025370; jmp [0x10025374] 
0x1002338f  # adc bh, bh; and eax, 0x10025174; jmp [0x10025178] 
0x1002350f  # adc bh, bh; and eax, 0x10025274; jmp [0x10025278] 
0x10023299  # adc bh, bh; and eax, 0x10025374; jmp [0x10025378] 
0x10023395  # adc bh, bh; and eax, 0x10025178; jmp [0x1002517C] 
0x10023515  # adc bh, bh; and eax, 0x10025278; jmp [0x1002527C] 
0x1002329f  # adc bh, bh; and eax, 0x10025378; jmp [0x10025388] 
0x1002339b  # adc bh, bh; and eax, 0x1002517C; jmp [0x10025180] 
0x1002351b  # adc bh, bh; and eax, 0x1002527C; jmp [0x10025280] 
0x100233a1  # adc bh, bh; and eax, 0x10025180; jmp [0x10025184] 
0x10023521  # adc bh, bh; and eax, 0x10025280; jmp [0x10025284] 
0x100232b1  # adc bh, bh; and eax, 0x10025380; jmp [0x1002538C] 
0x100233a7  # adc bh, bh; and eax, 0x10025184; jmp [0x10025188] 
0x10023527  # adc bh, bh; and eax, 0x10025284; jmp [0x10025288] 
0x100232ab  # adc bh, bh; and eax, 0x10025384; jmp [0x10025380] 
0x100233ad  # adc bh, bh; and eax, 0x10025188; jmp [0x1002518C] 
0x1002352d  # adc bh, bh; and eax, 0x10025288; jmp [0x1002528C] 
0x100232a5  # adc bh, bh; and eax, 0x10025388; jmp [0x10025384] 
0x100233b3  # adc bh, bh; and eax, 0x1002518C; jmp [0x10025190] 
0x10023533  # adc bh, bh; and eax, 0x1002528C; jmp [0x10025290] 
0x100232b7  # adc bh, bh; and eax, 0x1002538C; jmp [0x100250E8] 
0x100233b9  # adc bh, bh; and eax, 0x10025190; jmp [0x10025194] 
0x10023539  # adc bh, bh; and eax, 0x10025290; jmp [0x10025294] 
0x100233bf  # adc bh, bh; and eax, 0x10025194; jmp [0x10025198] 
0x1002353f  # adc bh, bh; and eax, 0x10025294; jmp [0x10025298] 
0x10023629  # adc bh, bh; and eax, 0x10025098; jmp [0x10025358] 
0x100233c5  # adc bh, bh; and eax, 0x10025198; jmp [0x1002519C] 
0x10023545  # adc bh, bh; and eax, 0x10025298; jmp [0x1002529C] 
0x10023623  # adc bh, bh; and eax, 0x1002509C; jmp [0x10025098] 
0x100233cb  # adc bh, bh; and eax, 0x1002519C; jmp [0x100251A0] 
0x1002354b  # adc bh, bh; and eax, 0x1002529C; jmp [0x100252A0] 
0x1002361d  # adc bh, bh; and eax, 0x100250A0; jmp [0x1002509C] 
0x100233d1  # adc bh, bh; and eax, 0x100251A0; jmp [0x100251A4] 
0x10023551  # adc bh, bh; and eax, 0x100252A0; jmp [0x100252A4] 
0x10023617  # adc bh, bh; and eax, 0x100250A4; jmp [0x100250A0] 
0x100233d7  # adc bh, bh; and eax, 0x100251A4; jmp [0x100251A8] 
0x10023557  # adc bh, bh; and eax, 0x100252A4; jmp [0x100252A8] 
0x10023611  # adc bh, bh; and eax, 0x100250A8; jmp [0x100250A4] 
0x100233dd  # adc bh, bh; and eax, 0x100251A8; jmp [0x100251AC] 
0x1002355d  # adc bh, bh; and eax, 0x100252A8; jmp [0x100252AC] 
0x100233e3  # adc bh, bh; and eax, 0x100251AC; jmp [0x100251B0] 
0x10023563  # adc bh, bh; and eax, 0x100252AC; jmp [0x100252B0] 
0x100233e9  # adc bh, bh; and eax, 0x100251B0; jmp [0x100251B4] 
0x10023569  # adc bh, bh; and eax, 0x100252B0; jmp [0x100252B4] 
0x100233ef  # adc bh, bh; and eax, 0x100251B4; jmp [0x100251B8] 
0x1002356f  # adc bh, bh; and eax, 0x100252B4; jmp [0x100252B8] 
0x10023605  # adc bh, bh; and eax, 0x100250B8; jmp [0x100250B4] 
0x100233f5  # adc bh, bh; and eax, 0x100251B8; jmp [0x100251BC] 
0x10023575  # adc bh, bh; and eax, 0x100252B8; jmp [0x100252BC] 
0x100235ff  # adc bh, bh; and eax, 0x100250BC; jmp [0x100250B8] 
0x100233fb  # adc bh, bh; and eax, 0x100251BC; jmp [0x100251C0] 
0x1002357b  # adc bh, bh; and eax, 0x100252BC; jmp [0x100252C0] 
0x100235f9  # adc bh, bh; and eax, 0x100250C0; jmp [0x100250BC] 
0x10023401  # adc bh, bh; and eax, 0x100251C0; jmp [0x100251C4] 
0x10023581  # adc bh, bh; and eax, 0x100252C0; jmp [0x100252C4] 
0x100235f3  # adc bh, bh; and eax, 0x100250C4; jmp [0x100250C0] 
0x10023407  # adc bh, bh; and eax, 0x100251C4; jmp [0x100251C8] 
0x10023587  # adc bh, bh; and eax, 0x100252C4; jmp [0x100252C8] 
0x100235ed  # adc bh, bh; and eax, 0x100250C8; jmp [0x100250C4] 
0x1002358d  # adc bh, bh; and eax, 0x100252C8; jmp [0x100252CC] 
0x100235e7  # adc bh, bh; and eax, 0x100250CC; jmp [0x100250C8] 
0x10023413  # adc bh, bh; and eax, 0x100251CC; jmp [0x100251D0] 
0x10023593  # adc bh, bh; and eax, 0x100252CC; jmp [0x100252D0] 
0x100235e1  # adc bh, bh; and eax, 0x100250D0; jmp [0x100250CC] 
0x10023419  # adc bh, bh; and eax, 0x100251D0; jmp [0x100251D4] 
0x10023599  # adc bh, bh; and eax, 0x100252D0; jmp [0x100252D4] 
0x100235db  # adc bh, bh; and eax, 0x100250D4; jmp [0x100250D0] 
0x1002341f  # adc bh, bh; and eax, 0x100251D4; jmp [0x100251D8] 
0x1002359f  # adc bh, bh; and eax, 0x100252D4; jmp [0x100252D8] 
0x100235d5  # adc bh, bh; and eax, 0x100250D8; jmp [0x100250D4] 
0x10023425  # adc bh, bh; and eax, 0x100251D8; jmp [0x100251DC] 
0x100235a5  # adc bh, bh; and eax, 0x100252D8; jmp [0x100252DC] 
0x100235cf  # adc bh, bh; and eax, 0x100250DC; jmp [0x100250D8] 
0x1002342b  # adc bh, bh; and eax, 0x100251DC; jmp [0x100251E0] 
0x100235ab  # adc bh, bh; and eax, 0x100252DC; jmp [0x100252E0] 
0x100235c9  # adc bh, bh; and eax, 0x100250E0; jmp [0x100250DC] 
0x10023431  # adc bh, bh; and eax, 0x100251E0; jmp [0x100251E4] 
0x100235b1  # adc bh, bh; and eax, 0x100252E0; jmp [0x100252E4] 
0x100235c3  # adc bh, bh; and eax, 0x100250E4; jmp [0x100250E0] 
0x10023437  # adc bh, bh; and eax, 0x100251E4; jmp [0x100251E8] 
0x100235b7  # adc bh, bh; and eax, 0x100252E4; jmp [0x100252E8] 
0x100232bd  # adc bh, bh; and eax, 0x100250E8; jmp [0x100250EC] 
0x1002343d  # adc bh, bh; and eax, 0x100251E8; jmp [0x100251EC] 
0x100235bd  # adc bh, bh; and eax, 0x100252E8; jmp [0x100250E4] 
0x100232c3  # adc bh, bh; and eax, 0x100250EC; jmp [0x100250F0] 
0x10023443  # adc bh, bh; and eax, 0x100251EC; jmp [0x100251F0] 
0x100232c9  # adc bh, bh; and eax, 0x100250F0; jmp [0x100250F4] 
0x10023449  # adc bh, bh; and eax, 0x100251F0; jmp [0x100251F4] 
0x1002326f  # adc bh, bh; and eax, 0x100252F0; jmp [0x100252F4] 
0x100232cf  # adc bh, bh; and eax, 0x100250F4; jmp [0x100250F8] 
0x1002344f  # adc bh, bh; and eax, 0x100251F4; jmp [0x100251F8] 
0x10023275  # adc bh, bh; and eax, 0x100252F4; jmp [0x1002506C] 
0x100232d5  # adc bh, bh; and eax, 0x100250F8; jmp [0x100250FC] 
0x10023455  # adc bh, bh; and eax, 0x100251F8; jmp [0x100251FC] 
0x100232db  # adc bh, bh; and eax, 0x100250FC; jmp [0x10025100] 
0x1002345b  # adc bh, bh; and eax, 0x100251FC; jmp [0x10025200] 
0x10023245  # adc bh, bh; and eax, 0x100252FC; jmp [0x10025310] 
0x10012fd8  # adc bh, bh; xor eax, 0x10032D20; mov edi, eax; call [0x10025270] 
0x100152b1  # adc bh, bh; xor eax, 0x1003322C; call esi; push [0x1003321C]; call esi 
0x100152b1  # adc bh, bh; xor eax, 0x1003322C; call esi 
0x10019dff  # adc bh, bh; pop esi; ret 
0x1001902c  # adc bh, bh; jo 0x10019040; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10016029  # adc bh, bh; jne 0x10016035; call [0x10025180]; test eax, eax; jne 0x10016046; call [0x100250B0] 
0x10016029  # adc bh, bh; jne 0x10016035; call [0x10025180] 
0x1001274d  # adc bh, bh; jne 0x1001275D; push eax; call ecx 
0x1001e983  # adc bh, bh; jne 0x1001E993; push 0x00000220; push [ebp+0x18]; call [0x1002520C] 
0x1001876f  # adc bh, bh; jne 0x1001877F; push 0x00000001; push [ebp+0x18]; call [0x10025208] 
0x100185f8  # adc bh, bh; jne 0x10018608; push [eax]; call [0x1002516C] 
0x100186e2  # adc bh, bh; jne 0x100186F2; push [ebp+0x08]; push eax; call [0x100251F8] 
0x1001fab6  # adc bh, bh; jne 0x1001FAC6; push [ebp+0x08]; call [0x1002509C] 
0x1001d9d6  # adc bh, bh; jne 0x1001D9E6; push [ebp+0x08]; call [0x100250BC] 
0x1001bb83  # adc bh, bh; jne 0x1001BB93; push [ebp+0x08]; call [0x100250C8] 
0x1001eb53  # adc bh, bh; jne 0x1001EB63; push [ebp+0x08]; call [0x100250CC] 
0x10018846  # adc bh, bh; jne 0x10018856; push [ebp+0x08]; call [0x100252D8] 
0x10018a95  # adc bh, bh; jne 0x10018AA5; push [ebp+0x08]; call [0x100252DC] 
0x1001e955  # adc bh, bh; jne 0x1001E965; push [ebp+0x08]; call [0x100251FC] 
0x10018781  # adc bh, bh; jne 0x10018799; push eax; push esi; push [ebp+0x08]; call [0x100251FC] 
0x1001c3a1  # adc bh, bh; jne 0x1001C389; call esi 
0x1001c3be  # adc bh, bh; jne 0x1001C3AA; call esi 
0x10012fbb  # adc bh, bh; ret 
0x100152cf  # adc bh, bh; salc; pop esi; ret 
0x100152bf  # adc bh, bh; salc; push [0x1003320C]; call esi; push [0x100331EC]; call esi 
0x100152bf  # adc bh, bh; salc; push [0x1003320C]; call esi 
0x100152b7  # adc bh, bh; salc; push [0x1003321C]; call esi; push [0x1003320C]; call esi 
0x100152b7  # adc bh, bh; salc; push [0x1003321C]; call esi 
0x100152c7  # adc bh, bh; salc; push [0x100331EC]; call esi; pop esi; ret 
0x100152c7  # adc bh, bh; salc; push [0x100331EC]; call esi 
0x100164de  # adc bh, bh; salc; push [ebp-0x04]; call esi 
0x1001533a  # adc bh, bh; xlatb; pop edi; pop esi; ret 
0x10015322  # adc bh, bh; xlatb; push [0x1003321C]; call edi; push [0x1003322C]; call edi 
0x10015322  # adc bh, bh; xlatb; push [0x1003321C]; call edi 
0x1001532a  # adc bh, bh; xlatb; push [0x1003322C]; call edi; push [0x100331EC]; call edi 
0x1001532a  # adc bh, bh; xlatb; push [0x1003322C]; call edi 
0x10015332  # adc bh, bh; xlatb; push [0x100331EC]; call edi 
0x10022c31  # adc [eax], eax; add byte [ebx+0x645EF44D], cl; mov [0x00000000], ecx; leave; ret 
0x10013889  # adc [eax+0x41], eax; test dl, dl; mov byte [eax], dl; jne 0x10013888; ret 
0x100205b3  # adc [eax-0x73], edx; inc ebp; add byte [eax-0x73], dl; inc ebp; call [eax-0x73] 
0x100207d6  # adc [ebx+0x50], edx; call [edx+0x10] 
0x1001df79  # adc [ebx-0x37], ebx; ret 
0x10014871  # adc [edx+0x01], ebp; pop eax; pop edi; pop ebx; pop esi; ret 
0x10010305  # adc [ebx+0x00A904C1], eax; add [ecx], eax; xor [ecx-0x7C], 0x843474D2; div byte [edi-0x09]; retn 0x0000 
0x1001538e  # adc eax, ebp; or eax, 0x59000000; pop edi; push [esi]; call [0x10025074] 
0x100202c0  # adc eax, ebp; or eax, 0x85000000; sal byte [eax+ecx-0x75], 0x10; push 0x00000001; mov ecx, eax; call [edx] 
0x1001788c  # adc ecx, ebp; ret 
0x1001b7ff  # adc esi, esi; retn 0x7401 
0x10013294  # adc edi, edi; je 0x100132BC; or bh, bh; adc eax, 0x1002518C; push eax; call [0x10025280] 
0x10022b7b  # adc al, byte [eax]; add byte [ebx+0x645EF44D], cl; mov [0x00000000], ecx; leave; ret 
0x1001b6cd  # adc al, byte [eax+eax]; add bl, al; mov eax, 0x00000804; ret 
0x10018969  # adc ch, byte [edx+0x01]; pop eax; ret 
0x1001706e  # adc cl, byte [ebp-0x0001077B]; call [eax+0x68]; add al, 0x01; add byte [eax], al; call [0x10025220] 
0x1001706e  # adc cl, byte [ebp-0x0001077B]; call [eax+0x68] 
0x1001e42d  # adc bh, bh; jne 0x1001E439; call ebx 
0x100222ab  # adc bh, bh; jbe 0x100222B3; push edi; push [esp+0x14]; call [esi+0x08] 
0x1001326d  # adc eax, [eax]; add byte [eax], al; add esp, 0x0C; ret 
0x1001582a  # adc edx, [eax-0x7D]; ret 
0x10023f84  # adc edx, [ebp-0x0C]; pop edi; pop esi; pop ebx; leave; ret 
0x100135eb  # adc edx, [esi+0x53]; push 0x00000000; push [0x10038144]; call [0x10025284] 
0x100188b5  # adc ebp, [edx+0x01]; pop eax; ret 
0x100152fe  # adc eax, [ecx+0x0331ECFE]; adc byte [ebx+ecx+0x50], dh; call edi 
0x1001c0d9  # adc ecx, [ebp+0x53500C45]; call [0x1002507C] 
0x10017149  # adc ecx, ecx; rep stosw; mov eax, esi; pop edi; pop esi; ret 
0x10013741  # adc edi, edi; jne 0x1001374D; push 0x00000000; push [0x10038144]; call [0x10025288] 
0x1001df1e  # adc al, 0x00; add byte [ebx+0x5D8BC055], cl; retn 0x758B 
0x10012fcb  # adc al, 0x01; add byte [eax], al; add bl, al; push esi; push edi; call [0x100250B0] 
0x10022a19  # adc al, 0x0F; xchg eax, ebp; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x1001d2dd  # adc al, 0x3B; ret 
0x1001f09e  # adc al, 0x3B; jne 0x1001F0F0; call [0x100250B0] 
0x10023674  # adc al, 0x50; add dl, byte [eax]; jmp [0x10025018] 
0x10018784  # adc al, 0x50; push esi; push [ebp+0x08]; call [0x100251FC] 
0x100206fd  # adc al, 0x50; mov ecx, esi; call [edi+0x08]; pop edi; pop esi; ret 
0x100206fd  # adc al, 0x50; mov ecx, esi; call [edi+0x08] 
0x10023302  # adc al, 0x51; add dl, byte [eax]; jmp [0x10025118] 
0x10023482  # adc al, 0x52; add dl, byte [eax]; jmp [0x10025218] 
0x10023242  # adc al, 0x53; add dl, byte [eax]; jmp [0x100252FC] 
0x1001048b  # adc al, 0x53; push esi; lea eax, [ebp-0x14]; push edi; push eax; call [0x10025244] 
0x100154ef  # adc al, 0x56; call edi 
0x10013b95  # adc al, 0x5F; pop esi; pop ebx; leave; ret 
0x1001411f  # adc al, 0x5F; pop esi; pop ebx; inc [eax]; pop ebp; ret 
0x100144f5  # adc al, 0x68; add edx, [eax]; pop ecx; test eax, eax; je 0x10014500; call eax 
0x1001b97f  # adc al, 0x7C; sub [ecx+0x10037130], esp; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x1002508C] 
0x10014781  # adc al, 0x7D; or eax, [ebx-0x17AFE340]; mov bl, 0x0B; add byte [eax], al; pop ecx; ret 
0x100147d3  # adc al, 0x7D; or eax, [ebx-0x17AFE340]; retn 0x000B 
0x10011bb5  # adc al, 0x7E; adc eax, 0x1174FB3B; push 0x000003E8; call [0x10025084] 
0x100173f2  # adc al, 0x83; clc; push [ebp+0x04]; or eax, eax; pop ebp; ret 
0x1001e7d1  # adc al, 0x83; call [0x156A037E] 
0x10022f63  # adc al, 0x85; sar byte [eax+0x0000FFFF], 0x7C; add al, 0x0F; mov bh, 0x45; dec cl; ret 
0x10023088  # adc al, 0xBC; outsb; add edx, [eax]; mov ebx, 0x1003712C; push ebx; call [0x1002524C] 
0x100108ea  # adc al, 0xE8; add al, 0x00; add byte [eax], al; add esp, 0x14; ret 
0x10014f17  # adc al, 0xF6; ret 
0x1001bc2f  # adc al, 0xFF; jne 0x1001BC43; push esi; push [ebp+0x20]; mov ebx, [0x1002520C]; call ebx 
0x10018ac3  # adc al, 0xFF; jne 0x10018AD7; push 0x00000220; push [ebp+0x20]; call [0x1002520C] 
0x100188d4  # adc al, 0xFF; jne 0x100188E8; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x1001274a  # adc al, 0xFF; jne 0x1001275E; push [ebp+0x0C]; push eax; call ecx 
0x100186df  # adc al, 0xFF; jne 0x100186F3; push [ebp+0x0C]; push [ebp+0x08]; push eax; call [0x100251F8] 
0x1001fab3  # adc al, 0xFF; jne 0x1001FAC7; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001fbc6  # adc al, 0xFF; jne 0x1001FBDA; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10018843  # adc al, 0xFF; jne 0x10018857; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252D8] 
0x10018a92  # adc al, 0xFF; jne 0x10018AA6; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252DC] 
0x1001e952  # adc al, 0xFF; jne 0x1001E966; push [ebp+0x0C]; push [ebp+0x08]; call [0x100251FC] 
0x10019427  # adc al, 0xFF; jbe 0x1001943B; push edi; push [0x10038144]; call [0x10025254] 
0x1001edb9  # adc al, 0xFF; call [ebx+0x57] 
0x1001ee37  # adc al, 0xFF; call [edi-0x18] 
0x1001a569  # adc eax, 0x83FFFF26; les ecx, [eax]; pop ebp; retn 0x0004 
0x100162ef  # adc eax, 0x10025228; test eax, eax; jne 0x10016302; call [0x100250B0] 
0x10011bb7  # adc eax, 0x1174FB3B; push 0x000003E8; call [0x10025084] 
0x10022fec  # adc eax, 0x1002524C; xor edi, edi; cmp [0x10037128], edi; je 0x10023013; push esi; call [0x10025248] 
0x100113ec  # adc eax, 0x1002524C; cmp [0x10037128], ebx; mov edi, [0x10025248]; je 0x1001140D; push esi; call edi 
0x100154dd  # adc eax, 0x1002524C; cmp [0x10037128], ebx; mov edi, [0x10025248]; je 0x10015504; push esi; call edi 
0x10011f90  # adc eax, 0x1002524C; cmp [0x10037128], esi; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011d23  # adc eax, 0x1002524C; cmp [0x10037128], esi; je 0x10011D48; push edi; call [0x10025248] 
0x10016b77  # adc eax, 0x1002524C; cmp [0x10037128], edi; mov ebx, [0x10025248]; je 0x10016B98; push esi; call ebx 
0x10019df3  # adc eax, 0x10025254; pop esi; ret 
0x1001fba3  # adc eax, 0x016A5656; push esi; call [0x100250BC] 
0x1001fa90  # adc eax, 0x016A5757; push edi; call [0x100250BC] 
0x10018d0e  # adc eax, 0x10025258; test eax, eax; mov [0x10037120], eax; jne 0x10018D1D; ret 
0x100245b1  # adc eax, 0x10025160; cmp eax, edi; mov [ebp-0x08], eax; jne 0x100245D4; call [0x100250B0] 
0x10016f72  # adc eax, 0x10025160; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x10016F86; call [0x100250B0] 
0x10011ba1  # adc eax, 0x10025164; test eax, eax; jne 0x10011BB2; call [0x100250B0] 
0x100130d1  # adc eax, 0x10025264; pop esi; ret 
0x10014657  # adc eax, 0x1002516C; pop esi; leave; ret 
0x10012fb1  # adc eax, 0x1002526C; or [0x10032D20], 0xFFFFFFFF; ret 
0x1001a601  # adc eax, 0x10025170; test eax, eax; jne 0x1001A614; call [0x100250B0] 
0x10015399  # adc eax, 0x10025074; pop esi; pop ebp; ret 
0x10016105  # adc eax, 0x10025074; pop edi; pop esi; pop ebx; ret 
0x10021e34  # adc eax, 0x10025074; mov eax, esi; pop edi; pop esi; pop ebx; ret 
0x10014775  # adc eax, 0x10025074; ret 
0x10015e11  # adc eax, 0x10025074; test byte [esi+0x04], 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x10016e54  # adc eax, 0x10025174; test eax, eax; jne 0x10016E67; call [0x100250B0] 
0x10016d84  # adc eax, 0x10025174; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x100153af  # adc eax, 0x10025078; pop ebp; ret 
0x100147c7  # adc eax, 0x10025078; ret 
0x10011968  # adc eax, 0x10025178; test eax, eax; jne 0x10011983; call [0x100250B0] 
0x100131ff  # adc eax, 0x10025278; mov [0x100366C4], eax; ret 
0x10013211  # adc eax, 0x10025278; ret 
0x1001c39d  # adc eax, 0x1002507C; push [ebp-0x1C]; call esi 
0x10013322  # adc eax, 0x1002527C; pop edi; ret 
0x100153c8  # adc eax, 0x1002527C; ret 
0x1001c390  # adc eax, 0x10025080; lea eax, [ebp+0x10]; push eax; push [ebp-0x1C]; call [0x1002507C] 
0x1001602e  # adc eax, 0x10025180; test eax, eax; jne 0x10016046; call [0x100250B0] 
0x10024605  # adc eax, 0x59FFFE82; ret 
0x10020398  # adc eax, 0xCF8B078B; call [eax+0x14] 
0x10021e57  # adc eax, 0x1002508C; ret 
0x1001329a  # adc eax, 0x1002518C; push eax; call [0x10025280] 
0x10013dc3  # adc eax, 0x1002528C; pop edi; pop esi; pop ebx; leave; ret 
0x10015ce8  # adc eax, 0x10025090; mov eax, [0x10037130]; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x10025074] 
0x100137d8  # adc eax, 0x10025190; test eax, eax; je 0x100137E6; push 0x00000000; call eax; ret 
0x100137d8  # adc eax, 0x10025190; test eax, eax; je 0x100137E6; push 0x00000000; call eax 
0x10014650  # adc eax, 0x10025290; push eax; call [0x1002516C]; pop esi; leave; ret 
0x10014650  # adc eax, 0x10025290; push eax; call [0x1002516C] 
0x10013d7e  # adc eax, 0x10025290; mov edi, eax; cmp edi, 0xFFFFFFFF; je 0x10013DA1; push edi; call [0x10025180] 
0x100137c8  # adc eax, 0x10025194; test eax, eax; je 0x100137E6; push 0x10026958; push eax; call [0x10025190] 
0x10021e47  # adc eax, 0x10025098; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C]; ret 
0x10021e47  # adc eax, 0x10025098; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C] 
0x10021dea  # adc eax, 0x10025098; test eax, eax; jne 0x10021E0D; push ebx; call [0x10025090] 
0x1001b934  # adc eax, 0x1003699C; pop edi; pop esi; pop ebx; ret 
0x1001f7c6  # adc eax, 0x100250A0; mov esi, eax; call [0x100250B0] 
0x1001f5ab  # adc eax, 0x100250A4; cmp eax, 0xFFFFFFFF; jne 0x1001F5C6; call [0x100250B0] 
0x10012fd4  # adc eax, 0x100250B0; push [0x10032D20]; mov edi, eax; call [0x10025270] 
0x1001d86f  # adc eax, 0x100250B4; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x1001441f  # adc eax, 0x100252B4; xor eax, eax; ret 
0x100144cb  # adc eax, 0x100252B4; pop edi; pop esi; ret 
0x1001d6d5  # adc eax, 0x100250B8; test byte [0x10036A04], 0x04; jne 0x1001D6EA; and [0x10036A04], 0x00000000; ret 
0x1001d9de  # adc eax, 0x100250BC; pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x100144b9  # adc eax, 0x100252BC; mov esi, [esi]; cmp esi, edi; jne 0x100144A9; push [0x10038144]; call [0x100252B4] 
0x1001d31a  # adc eax, 0x100250C0; test eax, eax; je 0x1001D3AC; push 0x00000001; push [0x100369EC]; call [0x100250C4] 
0x100153bd  # adc eax, 0x100252C0; push 0x000000FF; call [0x1002527C]; ret 
0x100153bd  # adc eax, 0x100252C0; push 0x000000FF; call [0x1002527C] 
0x1001636c  # adc eax, 0x100252CC; test eax, eax; jne 0x10016387; call [0x100250B0] 
0x1001c34b  # adc eax, 0x100251D0; mov esi, eax; call [0x100250B0] 
0x1001ac47  # adc eax, 0x100250E0; pop esi; pop ebx; leave; ret 
0x1001302e  # adc eax, 0x100250E8; mov eax, esi; pop edi; pop esi; ret 
0x1001e230  # push ss; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebx; pop ebp; ret 
0x100241c4  # push ss; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; pop ebp; ret 
0x100238a4  # push ss; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; ret 
0x1001e1dd  # push ss; push edi; push 0x1001E275; call [0x100250A8] 
0x1001ec57  # push ss; push 0x00000001; pop eax; ret 
0x1001c3a8  # push ss; cmp [ebp+0x08], 0x04; jne 0x1001C3B9; push [ebp-0x1C]; call esi 
0x1001318e  # push ss; mov [ebp-0x04], 0x00000001; call eax 
0x1001b90f  # push ss; call eax 
0x100215f3  # pop ss; push eax; mov ecx, edi; call [edx+0x04] 
0x10013d89  # pop ss; push edi; call [0x10025180] 
0x1001032b  # pop ss; mov eax, [esp+0x08]; pop edi; ret 
0x10010334  # pop ss; mov eax, [esp+0x08]; mov byte [edi+0x02], 0x00; pop edi; ret 
0x100245bc  # pop ss; call [0x100250B0] 
0x1001fab0  # pop ss; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001fbc3  # pop ss; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x1001e94f  # pop ss; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100251FC] 
0x1001489b  # sbb byte [eax], al; and [esi], 0x00000000; and [esi+0x08], 0x00000000; pop ecx; pop esi; ret 
0x10017bb2  # sbb byte [edx], al; add byte [eax], al; add byte [ebx+0x61830841], cl; add al, 0x00; mov [ecx], eax; ret 
0x10014099  # sbb byte [edi], cl; xchg eax, esp; retn 0x5589 
0x10013218  # sbb byte [edx], ch; add edx, [eax]; test eax, eax; je 0x10013222; call eax 
0x1002445c  # sbb byte [ebx], dh; rcr byte [esi+0x5B], 0x5D; ret 
0x10022e42  # sbb byte [ebx], dh; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x10022e4c  # sbb byte [ebx], bh; ret 
0x1002367a  # sbb byte [eax+0x02], dl; adc bh, bh; and eax, 0x1002501C; jmp [0x10025020] 
0x1001a566  # sbb byte [eax-0x18], dl; adc eax, 0x83FFFF26; les ecx, [eax]; pop ebp; retn 0x0004 
0x10016f6f  # sbb byte [eax-0x01], dl; adc eax, 0x10025160; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x10016F86; call [0x100250B0] 
0x10023308  # sbb byte [ecx+0x02], dl; adc bh, bh; and eax, 0x1002511C; jmp [0x10025120] 
0x10023488  # sbb byte [edx+0x02], dl; adc bh, bh; and eax, 0x1002521C; jmp [0x10025220] 
0x1001b931  # sbb byte [ebx-0x01], dl; adc eax, 0x1003699C; pop edi; pop esi; pop ebx; ret 
0x1001bb7f  # sbb byte [ebx-0x01], dl; jne 0x1001BB94; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250C8] 
0x1001891b  # sbb byte [ebx-0x01], dl; jne 0x100188FC; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252DC] 
0x100189a8  # sbb byte [esi+0x53], dl; push 0x00000220; push [ebp+0x20]; call [0x1002520C] 
0x1001fbf0  # sbb byte [esi+0x56], dl; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x10012f83  # sbb byte [esi-0x18], dl; xor al, 0x00; add byte [eax], al; pop ecx; call [0x10025260] 
0x1001eb4f  # sbb byte [esi-0x01], dl; jne 0x1001EB64; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250CC] 
0x1001bca8  # sbb byte [esi-0x01], dl; jne 0x1001BCCD; call [0x1002520C] 
0x1001bc50  # sbb byte [esi-0x01], dl; jne 0x1001BC75; call ebx 
0x10018bd2  # sbb byte [edi+0x53], dl; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x1001fad9  # sbb byte [edi+0x57], dl; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10022e19  # sbb byte [edi+0x5E], bl; pop ebx; pop ebp; ret 
0x1001ece4  # sbb byte [edx+0x01], ch; push [ebp+0x20]; call [0x10025208] 
0x1001ec98  # sbb byte [edx+0x09], ch; push [ebp+0x20]; call esi 
0x10019912  # sbb byte [ecx+0x03], dh; adc byte [eax], al; ret 
0x10019093  # sbb byte [ecx+0x03], dh; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x10019016  # sbb byte [ecx+0x03], dh; adc byte [ebx+0x75FF0878], al; imul edx, [ebx+0x6A], 0x0C70FF00; call esi 
0x10019029  # sbb byte [ecx+0x03], dh; adc bh, bh; jo 0x10019040; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x1001d2cd  # sbb byte [edi+eax-0x18], dh; xor eax, 0xEB000001; sbb ebp, eax; mov ecx, 0xEB000003; adc al, 0x3B; ret 
0x100138d9  # sbb byte [edx+0x00], bh; add byte [ebx+0x59590C45], cl; mov ecx, [ebp+0x10]; mov [eax], ecx; leave; ret 
0x10015c55  # sbb byte [ecx+0x58890858], cl; sbb al, 0x89; dec eax; adc byte [esi+0x5B], bl; leave; ret 
0x10022382  # sbb byte [ebx+0x5E5FF44D], cl; pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10024551  # sbb byte [ebx+0x5FD38BC7], cl; pop ebx; pop esi; ret 
0x1001a159  # sbb byte [ebp+0x00010081], cl; add bl, ch; add dh, byte [ebx]; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x100175fc  # sbb byte [ebp-0x0000877B], cl; call [eax+0x53] 
0x1001f5d0  # sbb al, ch; ret 
0x100135e9  # sbb bl, ch; adc edx, [esi+0x53]; push 0x00000000; push [0x10038144]; call [0x10025284] 
0x10018840  # sbb bh, bh; jne 0x10018858; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252D8] 
0x10018a8f  # sbb bh, bh; jne 0x10018AA7; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252DC] 
0x100215ee  # sbb [esi-0x75], esp; push es; mov edx, [edi]; push eax; mov ecx, edi; call [edx+0x04] 
0x1001d2c5  # sbb [esi+edx+0x3B], esi; ret 
0x10012c9a  # sbb [ebp+0x0A], esi; cmp [eax+0x1C], 0x00000000; jne 0x10012CA7; push 0x00000001; pop eax; ret 
0x100246c1  # sbb [ecx+0x5959FFFF], edi; ret 
0x1002389f  # sbb edi, edi; inc edi; add byte [esi], dl; add byte [eax], al; add byte [ebx+0x5E5FFFC8], al; ret 
0x1001d2c3  # sbb bh, byte [eax]; sbb [esi+edx+0x3B], esi; ret 
0x1001427b  # sbb cl, byte [eax+0x1B408A0E]; mov byte [esi+0x01], al; pop esi; ret 
0x100182de  # sbb cl, byte [ebx+0x5B5E5FC3]; ret 
0x1001178a  # sbb ch, al; or [ebx], edi; add byte [eax], al; mov [eax], 0x0000000D; call [0x100250B0] 
0x100202b5  # sbb eax, [eax]; add byte [esi-0x37], bl; ret 
0x10020303  # sbb eax, [eax]; add byte [ebx-0x36A1A03A], cl; ret 
0x10022ee9  # sbb esi, [ebx]; sar byte [ecx], cl; push ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x10017d26  # sbb edx, [esp+0x0C]; neg edx; neg eax; sbb edx, 0x00000000; pop ebx; retn 0x0010 
0x1001b893  # sbb eax, eax; and eax, [0x10036EDC]; ret 
0x1001d4fd  # sbb eax, eax; and eax, ebx; add eax, edi; push eax; push esi; call [0x10036A0C] 
0x1002375b  # sbb eax, eax; pop ecx; inc eax; retn 0x0004 
0x10023776  # sbb eax, eax; pop ecx; neg eax; retn 0x0004 
0x1001fceb  # sbb eax, eax; pop esi; and eax, ecx; pop ebp; ret 
0x1001c1d2  # sbb eax, eax; pop edi; and eax, ecx; pop esi; pop ebp; ret 
0x1001d4b2  # sbb eax, eax; and ax, 0x0000F005; add eax, 0x00001002; push eax; push esi; call [0x10036A0C] 
0x1001d7b9  # sbb eax, eax; push 0x00000001; inc eax; push 0x1001D7DF; mov [0x100369F0], eax; call [0x100250B8] 
0x100143c6  # sbb eax, eax; add eax, 0x03; pop ebx; leave; ret 
0x10013d77  # sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x10025290] 
0x10018718  # sbb eax, eax; and eax, 0x08; inc eax; push eax; push [ebp+0x18]; call [0x10025208] 
0x1001887b  # sbb eax, eax; and eax, 0x08; inc eax; push eax; push [ebp+0x20]; call [0x10025208] 
0x10011cc2  # sbb eax, eax; mov byte [edx], cl; and ax, 0x0000C000; add eax, esi; pop esi; ret 
0x10012336  # sbb eax, eax; ret 
0x10018c42  # sbb eax, eax; not eax; and eax, [0x100355AC]; ret 
0x10016a77  # sbb ecx, ecx; not ecx; and eax, ecx; ret 
0x1001576d  # sbb ebx, ebx; not ebx; and ebx, eax; push ebx; push esi; call [0x100252C4] 
0x100159bf  # sbb ebx, ebx; not ebx; and ebx, eax; push ebx; push esi; call [0x100251F4] 
0x1001d2d6  # sbb ebp, eax; mov ecx, 0xEB000003; adc al, 0x3B; ret 
0x10022457  # sbb al, 0x00; pop edi; pop esi; ret 
0x10012c9f  # sbb al, 0x00; jne 0x10012CA7; push 0x00000001; pop eax; ret 
0x10020392  # sbb al, 0x03; fiadd word [ecx]; xor bl, ch; adc eax, 0xCF8B078B; call [eax+0x14] 
0x100152bc  # sbb al, 0x32; add edx, [eax]; call esi; push [0x1003320C]; call esi 
0x100152bc  # sbb al, 0x32; add edx, [eax]; call esi 
0x10015327  # sbb al, 0x32; add edx, [eax]; call edi; push [0x1003322C]; call edi 
0x10015327  # sbb al, 0x32; add edx, [eax]; call edi 
0x100186d3  # sbb al, 0x3B; ret 
0x10023680  # sbb al, 0x50; add dl, byte [eax]; jmp [0x10025020] 
0x1002330e  # sbb al, 0x51; add dl, byte [eax]; jmp [0x10025120] 
0x1002348e  # sbb al, 0x52; add dl, byte [eax]; jmp [0x10025220] 
0x10023284  # sbb al, 0x53; add dl, byte [eax]; jmp [0x10025320] 
0x10012746  # sbb al, 0x56; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push eax; call ecx 
0x1001cfea  # sbb al, 0x5E; ret 
0x10022d70  # sbb al, 0x7B; add dl, byte [eax]; mov eax, esi; pop esi; retn 0x0004 
0x10021c82  # sbb al, 0x83; add dh, bh; mov eax, [ecx+0x1C]; mov eax, [eax]; ret 
0x100154aa  # sbb al, 0x85; shl byte [esi-0x75], 0x45; or byte [esp+eax+0x66], dh; mov eax, [ebp-0x02]; leave; ret 
0x10015d8f  # sbb al, 0x85; sal byte [ebx+ecx+0x50], 0xE8; push es; ret 
0x100113ad  # sbb al, 0x85; sal byte [ebp+0x02], 0xC9; ret 
0x100222a7  # sbb al, 0x85; div byte [edx+edx-0x01]; jbe 0x100222B3; push edi; push [esp+0x14]; call [esi+0x08] 
0x10015c5b  # sbb al, 0x89; dec eax; adc byte [esi+0x5B], bl; leave; ret 
0x10021c93  # sbb al, 0x8B; add [ebp+0x11890250], ecx; ret 
0x1001bcd2  # sbb al, 0x8B; ret 
0x10021c72  # sbb al, 0x8D; or al, 0x12; add [eax], ecx; retn 0x0004 
0x1001b81a  # sbb al, 0xF6; retn 0x7402 
0x10017be9  # sbb al, 0xF6; ret 
0x1001bca5  # sbb al, 0xFF; jne 0x1001BCC1; push esi; push [ebp+0x20]; call [0x1002520C] 
0x1001bc4d  # sbb al, 0xFF; jne 0x1001BC69; push esi; push [ebp+0x20]; call ebx 
0x1001ece1  # sbb al, 0xFF; jne 0x1001ECFD; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x1001ec95  # sbb al, 0xFF; jne 0x1001ECB1; push 0x00000009; push [ebp+0x20]; call esi 
0x10013311  # sbb eax, 0x5F000000; ret 
0x10021fc9  # sbb eax, 0x4D8B0000; hlt; pop esi; mov [fs:0x00000000], ecx; leave; ret 
0x1002012d  # sbb eax, 0xC68B0000; pop edi; pop esi; ret 
0x1001ffe9  # sbb eax, 0x0DFF0000; dec esp; bound eax, [ebx]; adc byte [ebp-0x6BF003B3], cl; ret 
0x1001bc38  # sbb eax, 0x1002520C; call ebx 
0x10014482  # sbb eax, 0x1003711C; jl 0x10014457; push [0x10037120]; push 0x00000000; push [0x10038144]; call ebp 
0x1001b9dd  # sbb eax, 0x10037128; je 0x1001B9F2; push esi; call edi 
0x100113f2  # sbb eax, 0x10037128; mov edi, [0x10025248]; je 0x1001140D; push esi; call edi 
0x100154e3  # sbb eax, 0x10037128; mov edi, [0x10025248]; je 0x10015504; push esi; call edi 
0x10017458  # sbb eax, 0x1003712C; je 0x10017469; push 0x00000001; call [0x10025084] 
0x10016b83  # sbb eax, 0x10025248; je 0x10016B98; push esi; call ebx 
0x10019c7c  # sbb eax, 0x00202068; add byte [edx+0x00], ch; push [0x10038144]; call [0x10025258] 
0x100186a9  # sbb eax, 0x50E4458D; push esi; push 0x10027130; push esi; push ebx; call [0x100251F8] 
0x1001e928  # sbb eax, 0x50E4458D; push esi; push 0x10027130; push esi; push edi; call [0x100251F8] 
0x100154cf  # sbb eax, 0x10036898; je 0x10015522; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001b8bc  # sbb eax, 0x1003699C; push esi; push edi; jne 0x1001B907; push 0x100271C0; call [0x100250D0] 
0x1001d228  # sbb eax, 0x100369C4; xor eax, eax; pop ebx; leave; ret 
0x10018464  # sbb eax, 0x100334C8; pop esi; pop ebx; pop ebp; ret 
0x10015251  # sbb eax, 0x000042E8; add bh, al; add byte [0x5E000000], cl; ret 
0x100164d5  # sbb eax, 0x8B0C75FF; xor eax, 0x10025228; call esi; push [ebp-0x04]; call esi 
0x100164d5  # sbb eax, 0x8B0C75FF; xor eax, 0x10025228; call esi 
0x100134e4  # push ds; add byte [eax], al; pop ecx; ret 
0x10013ecb  # push ds; pop edi; pop esi; mov [0x10038264], 0x00000001; pop ebx; ret 
0x1001db34  # pop ds; inc edi; cmp eax, 0x0B; ja 0x1001DDB6; jmp [0x1001DF7D+eax*4] 
0x1001c389  # pop ds; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x1001e1d4  # pop ds; cmp [0x10036A44], 0x00000000; jne 0x1001E1F4; push edi; push 0x1001E275; call [0x100250A8] 
0x10019ca4  # and byte [eax], al; add byte [eax+0x00], ch; add byte [eax+0x00], al; push 0x00000000; call ebp 
0x10019c7f  # and byte [eax], al; add byte [edx+0x00], ch; push [0x10038144]; call [0x10025258] 
0x100126d5  # and byte [eax], al; add byte [ebx-0x3C74D73C], al; pop edi; pop esi; pop ebx; ret 
0x10011843  # and byte [eax], al; or eax, 0xFFFFFFFF; pop esi; ret 
0x10015f3f  # and byte [eax], al; or eax, 0xFFFFFFFF; pop edi; pop esi; ret 
0x10016002  # and byte [eax], al; or eax, 0xFFFFFFFF; ret 
0x1002456b  # and byte [eax], al; or edx, 0xFFFFFFFF; mov eax, edx; pop esi; ret 
0x1002047a  # and byte [eax], al; mov eax, ecx; retn 0x0008 
0x1001ad33  # and byte [eax], al; mov [eax+0x24], 0x0000FFFF; pop esi; ret 
0x1001bbdb  # and byte [edx], al; add byte [eax], al; push esi; push [ebp+0x20]; call [0x1002520C] 
0x1001ba5a  # and byte [edx], al; add byte [eax], al; push [0x100368AC]; call [0x1002520C] 
0x1001e988  # and byte [edx], al; add byte [eax], al; push [ebp+0x18]; call [0x1002520C] 
0x100189ac  # and byte [edx], al; add byte [eax], al; push [ebp+0x20]; call [0x1002520C] 
0x10012c97  # and byte [0x0A751993], al; cmp [eax+0x1C], 0x00000000; jne 0x10012CA7; push 0x00000001; pop eax; ret 
0x10019c7e  # and byte [eax], ah; add byte [eax], al; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x10012fa6  # and byte [0xF8831003], ch; push [esi+ecx+0x50]; call [0x1002526C]; or [0x10032D20], 0xFFFFFFFF; ret 
0x10012fa6  # and byte [0xF8831003], ch; push [esi+ecx+0x50]; call [0x1002526C] 
0x10012fdb  # and byte [0xF88B1003], ch; call [0x10025270] 
0x100130cc  # and byte [0x15FF1003], ch; push edx; add dl, byte [eax]; pop esi; ret 
0x10012fb8  # and byte [0xC3FF1003], ch; mov eax, [esp+0x04]; mov [eax+0x50], 0x100355B0; mov [eax+0x14], 0x00000001; ret 
0x100180ac  # and byte [ebx+eax], dh; adc byte [edx+0x742B3C06], cl; or byte [edx], bh; ret 
0x10023686  # and byte [eax+0x02], dl; adc bh, bh; and eax, 0x10025024; jmp [0x10025028] 
0x10014772  # and byte [eax-0x01], dl; adc eax, 0x10025074; ret 
0x100147c4  # and byte [eax-0x01], dl; adc eax, 0x10025078; ret 
0x10023314  # and byte [ecx+0x02], dl; adc bh, bh; and eax, 0x10025124; jmp [0x10025128] 
0x10023494  # and byte [edx+0x02], dl; adc bh, bh; and eax, 0x10025224; jmp [0x10025228] 
0x1002328a  # and byte [ebx+0x02], dl; adc bh, bh; and eax, 0x1002536C; jmp [0x10025370] 
0x100113e0  # and byte [ebx-0x3D], bl; push esi; mov esi, 0x1003712C; push edi; push esi; call [0x1002524C] 
0x10011344  # and byte [edi+0x5E], bl; ret 
0x10017feb  # and byte [ecx+0x03], ch; adc byte [edi-0x01], dl; xor eax, 0x100368AC; call esi 
0x10012774  # and byte [edx+0x01], ch; pop eax; pop edi; pop esi; pop ebp; ret 
0x100193c2  # and byte [ecx+0x03], dh; adc byte [edi-0x01], dl; xor eax, 0x10038144; call [0x10025284] 
0x1001448b  # and byte [ecx+0x03], dh; adc byte [edx+0x00], ch; push [0x10038144]; call ebp 
0x10018d16  # and byte [ecx+0x03], dh; adc byte [ebp+0x01], dh; ret 
0x1001ad66  # and byte [edx+eax+0x0C], dh; add esi, esi; ret 
0x1001772a  # and byte [ebx+0x057502FF], al; mov [0x100368AC], eax; cmp edi, 0x01; jne 0x1001773F; mov [0x100368B0], eax; call [esi+0x100333D8] 
0x100242e9  # and byte [ecx-0x0047F3BA], cl; inc [eax]; add byte [esi+0x5B], bl; leave; ret 
0x1001b3eb  # and byte [ecx-0x3974F382], cl; pop edi; pop esi; leave; ret 
0x10021cb7  # and byte [ebx+0x02508D01], cl; mov [ecx], edx; ret 
0x10021ca7  # and byte [ebp+0x0801120C], cl; retn 0x0004 
0x1001ba75  # and byte [eax+0x00C7FFFF], bl; sub al, byte [eax]; add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x1001a7f4  # and byte [eax+0x458B1001], ch; or byte [esi+0x5F], bl; leave; ret 
0x10016be3  # and cl, cl; ret 
0x1001adfb  # and bh, dh; ret 
0x10018715  # and bh, dh; fcomp [ebx]; rol byte [ebx+0x504008E0], 0xFF; jne 0x1001873A; call [0x10025208] 
0x100125af  # and [eax], eax; add byte [ebx-0x3C74DF3C], al; pop edi; pop esi; pop ebx; ret 
0x1001cf5c  # and [eax], eax; add byte [ebx-0x3CF4CF3C], al; pop ebx; pop edi; pop esi; ret 
0x100201f3  # and [eax], eax; add byte [ebx-0x39740BB3], cl; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0008 
0x1001b442  # and [ebx], esi; fstp tword [ebx]; ret 
0x10013de5  # and [ebp+0x7B830C5F], ecx; cld; add byte [edi+eax+0x53], dh; call [0x1002508C] 
0x1001325e  # and al, byte [eax]; add byte [eax], al; add esp, 0x0C; ret 
0x10018a48  # and dl, byte [esi+0x56]; push ebx; push 0x10027130; push edi; push esi; call [0x100252D8] 
0x100187f9  # and dl, byte [edi+0x57]; push ebx; push 0x10027130; push esi; push edi; call [0x100252D8] 
0x1001246a  # and eax, [eax]; add byte [ebx-0x3974E73C], al; pop esi; pop ebp; ret 
0x10012fa2  # and eax, [eax]; add byte [ecx+0x10032D20], ah; cmp eax, 0xFFFFFFFF; je 0x10012FBD; push eax; call [0x1002526C] 
0x10018c46  # and eax, [0x100355AC]; ret 
0x1001b895  # and eax, [0x10036EDC]; ret 
0x100113b8  # and eax, [ebp+0x0C]; leave; ret 
0x100237eb  # and edx, [ecx+0x04]; cmp edx, eax; je 0x100237F4; xor eax, eax; ret 
0x1001fcee  # and eax, ecx; pop ebp; ret 
0x1001c1d5  # and eax, ecx; pop esi; pop ebp; ret 
0x10016a7b  # and eax, ecx; ret 
0x1001bad2  # and eax, ecx; leave; ret 
0x1001d4ff  # and eax, ebx; add eax, edi; push eax; push esi; call [0x10036A0C] 
0x1001bf28  # and eax, esi; pop esi; pop ebx; pop ebp; ret 
0x10015771  # and ebx, eax; push ebx; push esi; call [0x100252C4] 
0x100159c3  # and ebx, eax; push ebx; push esi; call [0x100251F4] 
0x10012304  # and al, 0x00; add byte [ebx-0x3874F33C], al; pop edi; pop esi; ret 
0x10021c6c  # and al, 0x04; sub [eax], edx; mov eax, [ecx+0x1C]; lea ecx, [edx+edx]; add [eax], ecx; retn 0x0004 
0x10021ca1  # and al, 0x04; sub [eax], edx; mov eax, [ecx+0x20]; lea ecx, [edx+edx]; add [eax], ecx; retn 0x0004 
0x10011adf  # and al, 0x04; cmp eax, [0x10038260]; jc 0x10011AEC; xor eax, eax; ret 
0x100153b8  # and al, 0x04; push 0x00000000; call [0x100252C0]; push 0x000000FF; call [0x1002527C]; ret 
0x100153b8  # and al, 0x04; push 0x00000000; call [0x100252C0]; push 0x000000FF; call [0x1002527C] 
0x100153b8  # and al, 0x04; push 0x00000000; call [0x100252C0] 
0x10015102  # and al, 0x04; add [eax], 0x04; mov eax, [eax]; mov ax, word [eax-0x04]; ret 
0x100150e5  # and al, 0x04; add [eax], 0x04; mov eax, [eax]; mov eax, [eax-0x04]; ret 
0x100150f2  # and al, 0x04; add [eax], 0x08; mov ecx, [eax]; mov eax, [ecx-0x08]; mov edx, [ecx-0x04]; ret 
0x1001b663  # and al, 0x04; and [0x10036998], 0x00000000; cmp eax, 0xFFFFFFFE; jne 0x1001B681; mov [0x10036998], 0x00000001; jmp [0x100250D4] 
0x10011502  # and al, 0x04; add eax, 0x20; ret 
0x100113bf  # and al, 0x04; add eax, 0xFFFFFFE0; ret 
0x10012ad6  # and al, 0x04; mov eax, [eax]; cmp [eax], 0xE06D7363; je 0x10012AE5; xor eax, eax; ret 
0x10012fc0  # and al, 0x04; mov [eax+0x50], 0x100355B0; mov [eax+0x14], 0x00000001; ret 
0x10018c26  # and al, 0x04; sar eax, 1; ret 
0x10016c82  # and al, 0x04; mul ecx; retn 0x0010 
0x1001f5a8  # and al, 0x04; call [0x100250A4]; cmp eax, 0xFFFFFFFF; jne 0x1001F5C6; call [0x100250B0] 
0x1001f5a8  # and al, 0x04; call [0x100250A4] 
0x1001a5a9  # and al, 0x04; call eax 
0x1001f5cc  # and al, 0x08; add dh, byte [eax+ebx-0x18]; ret 
0x1001bf8a  # and al, 0x08; neg cx; sbb ecx, ecx; not ecx; and eax, ecx; ret 
0x100143d4  # and al, 0x08; push 0x00001000; sete al; push eax; call [0x100252B8] 
0x10019db0  # and al, 0x08; push 0x00008000; push 0x00000000; push [esi+0x10]; call [0x100252BC] 
0x1001425c  # and al, 0x08; push 0x00000000; and [esi], 0x00000000; call [0x10025194] 
0x10014791  # and al, 0x08; add eax, 0x20; push eax; call [0x10025074]; ret 
0x10014791  # and al, 0x08; add eax, 0x20; push eax; call [0x10025074] 
0x100147e3  # and al, 0x08; add eax, 0x20; push eax; call [0x10025078]; ret 
0x100147e3  # and al, 0x08; add eax, 0x20; push eax; call [0x10025078] 
0x10013049  # and al, 0x08; test esi, esi; jne 0x1001305C; push eax; call [0x10025270] 
0x10013319  # and al, 0x08; mov [0x10036708], edi; call [0x1002527C]; pop edi; ret 
0x10013319  # and al, 0x08; mov [0x10036708], edi; call [0x1002527C] 
0x10010337  # and al, 0x08; mov byte [edi+0x02], 0x00; pop edi; ret 
0x10016c9a  # and al, 0x08; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x10013297  # and al, 0x08; call [0x1002518C]; push eax; call [0x10025280] 
0x10013297  # and al, 0x08; call [0x1002518C] 
0x1001a68a  # and al, 0x08; call [0x100250E4] 
0x100237cf  # and al, 0x0C; push eax; ret 
0x100237c0  # and al, 0x0C; mov [fs:0x00000000], esp; mov [esp+0x0C], ebp; lea ebp, [esp+0x0C]; push eax; ret 
0x10013342  # and al, 0x0C; jnc 0x10013353; mov eax, [esi]; test eax, eax; je 0x1001334E; call eax 
0x10016c7c  # and al, 0x0C; jne 0x10016C89; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x100237cb  # and al, 0x0C; lea ebp, [esp+0x0C]; push eax; ret 
0x10017d28  # and al, 0x0C; neg edx; neg eax; sbb edx, 0x00000000; pop ebx; retn 0x0010 
0x1001a672  # and al, 0x0C; call [0x100252E4] 
0x1001a656  # and al, 0x0C; call [0x100252E8] 
0x1001a66e  # and al, 0x0C; push [esp+0x0C]; call [0x100252E4] 
0x1001a652  # and al, 0x0C; push [esp+0x0C]; call [0x100252E8] 
0x100141f2  # and al, 0x10; push esi; call [0x100252A0] 
0x1001e4c3  # and al, 0x10; pop esi; mov [edx], ecx; ret 
0x1001142e  # and al, 0x10; pop edi; pop esi; pop ebx; ret 
0x100141ee  # and al, 0x10; mov ebx, [esp+0x10]; push esi; call [0x100252A0] 
0x10012438  # and al, 0x14; add [ecx-0x75], ebx; ret 
0x10016f68  # and al, 0x14; push 0x00000000; push [esp+0x18]; push eax; call [0x10025160] 
0x10011bb4  # and al, 0x14; jle 0x10011BCD; cmp edi, ebx; je 0x10011BCD; push 0x000003E8; call [0x10025084] 
0x100222b2  # and al, 0x14; call [esi+0x08] 
0x10016f6e  # and al, 0x18; push eax; call [0x10025160] 
0x1001b930  # and al, 0x18; push ebx; call [0x1003699C] 
0x1001b92c  # and al, 0x18; push [esp+0x18]; push ebx; call [0x1003699C] 
0x1001b928  # and al, 0x18; push [esp+0x18]; push [esp+0x18]; push ebx; call [0x1003699C] 
0x100141d7  # and al, 0x24; push esi; push ebx; push ebx; call edi 
0x10013187  # and al, 0x2D; add edx, [eax]; test eax, eax; je 0x100131A5; mov [ebp-0x04], 0x00000001; call eax 
0x10022526  # and al, 0x30; add byte [ebx+0x5B5E5FC7], cl; pop ebp; retn 0x000C 
0x100141b8  # and al, 0x34; call edi 
0x10020e59  # and al, 0x38; add byte [edi+0x5E], bl; mov [fs:0x00000000], ecx; pop ebx; leave; retn 0x0004 
0x1002368c  # and al, 0x50; add dl, byte [eax]; jmp [0x10025028] 
0x1002331a  # and al, 0x51; add dl, byte [eax]; jmp [0x10025128] 
0x1002349a  # and al, 0x52; add dl, byte [eax]; jmp [0x10025228] 
0x100141d8  # and al, 0x56; push ebx; push ebx; call edi 
0x10018c39  # and al, 0x71; add edx, [eax]; ret 
0x10018d38  # and al, 0x71; add edx, [eax]; mov [0x10037108], 0x00000010; pop eax; ret 
0x1001524f  # and al, 0x77; sbb eax, 0x000042E8; add bh, al; add byte [0x5E000000], cl; ret 
0x100186d0  # and al, 0x8B; inc ebp; sbb al, 0x3B; ret 
0x1001a6f5  # and al, 0x8D; clc; cmpsd; add [eax], edx; nop; jmp [0x1001A77C+ecx*4] 
0x1001b2c4  # and al, 0xC9; ret 
0x1001cfe2  # and al, 0xE8; mov eax, 0x83FFFF50; les ebx, [esi+ebx*2]; ret 
0x100122ba  # and al, 0xF0; push eax; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x10018878  # and al, 0xF7; fcomp [ebx]; rol byte [ebx+0x504008E0], 0xFF; jne 0x100188A5; call [0x10025208] 
0x100236bb  # and eax, 0x10025000; jmp [0x10025054] 
0x100232e3  # and eax, 0x10025100; jmp [0x10025104] 
0x10023463  # and eax, 0x10025200; jmp [0x10025204] 
0x1002323b  # and eax, 0x10025300; jmp [0x10025314] 
0x10011cc7  # and eax, 0xC603C000; pop esi; ret 
0x100236a3  # and eax, 0x10025004; jmp [0x10025058] 
0x100232e9  # and eax, 0x10025104; jmp [0x10025108] 
0x10023469  # and eax, 0x10025204; jmp [0x10025208] 
0x10023253  # and eax, 0x10025304; jmp [0x10025308] 
0x1001d4b5  # and eax, 0x0205F005; adc byte [eax], al; add byte [eax+0x56], dl; call [0x10036A0C] 
0x10023661  # and eax, 0x10025008; jmp [0x1002500C] 
0x100232ef  # and eax, 0x10025108; jmp [0x1002510C] 
0x1002346f  # and eax, 0x10025208; jmp [0x1002520C] 
0x10023259  # and eax, 0x10025308; jmp [0x1002530C] 
0x10023667  # and eax, 0x1002500C; jmp [0x10025010] 
0x100232f5  # and eax, 0x1002510C; jmp [0x10025110] 
0x10023475  # and eax, 0x1002520C; jmp [0x10025210] 
0x1002325f  # and eax, 0x1002530C; jmp [0x1002532C] 
0x1002366d  # and eax, 0x10025010; jmp [0x10025014] 
0x100232fb  # and eax, 0x10025110; jmp [0x10025114] 
0x1002347b  # and eax, 0x10025210; jmp [0x10025214] 
0x1002324d  # and eax, 0x10025310; jmp [0x10025304] 
0x10023673  # and eax, 0x10025014; jmp [0x10025018] 
0x10023301  # and eax, 0x10025114; jmp [0x10025118] 
0x10023481  # and eax, 0x10025214; jmp [0x10025218] 
0x10023241  # and eax, 0x10025314; jmp [0x100252FC] 
0x10023679  # and eax, 0x10025018; jmp [0x1002501C] 
0x10023307  # and eax, 0x10025118; jmp [0x1002511C] 
0x10023487  # and eax, 0x10025218; jmp [0x1002521C] 
0x1002367f  # and eax, 0x1002501C; jmp [0x10025020] 
0x1002348d  # and eax, 0x1002521C; jmp [0x10025220] 
0x10023283  # and eax, 0x1002531C; jmp [0x10025320] 
0x10023685  # and eax, 0x10025020; jmp [0x10025024] 
0x10023313  # and eax, 0x10025120; jmp [0x10025124] 
0x10023493  # and eax, 0x10025220; jmp [0x10025224] 
0x10023289  # and eax, 0x10025320; jmp [0x1002536C] 
0x1002368b  # and eax, 0x10025024; jmp [0x10025028] 
0x10023319  # and eax, 0x10025124; jmp [0x10025128] 
0x10023499  # and eax, 0x10025224; jmp [0x10025228] 
0x10023691  # and eax, 0x10025028; jmp [0x1002502C] 
0x1002331f  # and eax, 0x10025128; jmp [0x1002512C] 
0x1002349f  # and eax, 0x10025228; jmp [0x1002522C] 
0x1002326b  # and eax, 0x10025328; jmp [0x100252F0] 
0x10023697  # and eax, 0x1002502C; jmp [0x10025064] 
0x10023325  # and eax, 0x1002512C; jmp [0x10025130] 
0x100234a5  # and eax, 0x1002522C; jmp [0x10025230] 
0x10023265  # and eax, 0x1002532C; jmp [0x10025328] 
0x100236f7  # and eax, 0x10025030; jmp [0x10025334] 
0x1002332b  # and eax, 0x10025130; jmp [0x10025134] 
0x100234ab  # and eax, 0x10025230; jmp [0x10025234] 
0x100236f1  # and eax, 0x10025034; jmp [0x10025030] 
0x10023331  # and eax, 0x10025134; jmp [0x10025138] 
0x100234b1  # and eax, 0x10025234; jmp [0x10025238] 
0x100236eb  # and eax, 0x10025038; jmp [0x10025034] 
0x10023337  # and eax, 0x10025138; jmp [0x1002513C] 
0x100234b7  # and eax, 0x10025238; jmp [0x1002523C] 
0x100236e5  # and eax, 0x1002503C; jmp [0x10025038] 
0x1002333d  # and eax, 0x1002513C; jmp [0x10025140] 
0x100234bd  # and eax, 0x1002523C; jmp [0x10025240] 
0x10023235  # and eax, 0x1002533C; jmp [0x10025300] 
0x100236df  # and eax, 0x10025040; jmp [0x1002503C] 
0x10023343  # and eax, 0x10025140; jmp [0x10025144] 
0x100234c3  # and eax, 0x10025240; jmp [0x10025244] 
0x1002322f  # and eax, 0x10025340; jmp [0x1002533C] 
0x100236d9  # and eax, 0x10025044; jmp [0x10025040] 
0x10023349  # and eax, 0x10025144; jmp [0x10025148] 
0x100234c9  # and eax, 0x10025244; jmp [0x10025248] 
0x100236d3  # and eax, 0x10025048; jmp [0x10025044] 
0x1002334f  # and eax, 0x10025148; jmp [0x1002514C] 
0x100234cf  # and eax, 0x10025248; jmp [0x1002524C] 
0x10023649  # and eax, 0x10025348; jmp [0x1002534C] 
0x100236cd  # and eax, 0x1002504C; jmp [0x10025048] 
0x10023355  # and eax, 0x1002514C; jmp [0x10025150] 
0x100234d5  # and eax, 0x1002524C; jmp [0x10025250] 
0x1002364f  # and eax, 0x1002534C; jmp [0x10025350] 
0x100236c7  # and eax, 0x10025050; jmp [0x1002504C] 
0x1002335b  # and eax, 0x10025150; jmp [0x10025154] 
0x100234db  # and eax, 0x10025250; jmp [0x10025254] 
0x10023655  # and eax, 0x10025350; jmp [0x10025364] 
0x100236c1  # and eax, 0x10025054; jmp [0x10025050] 
0x10023361  # and eax, 0x10025154; jmp [0x10025158] 
0x100234e1  # and eax, 0x10025254; jmp [0x10025258] 
0x10023643  # and eax, 0x10025354; jmp [0x10025348] 
0x100236a9  # and eax, 0x10025058; jmp [0x10025060] 
0x10023367  # and eax, 0x10025158; jmp [0x1002515C] 
0x100234e7  # and eax, 0x10025258; jmp [0x1002525C] 
0x10023631  # and eax, 0x10025358; jmp [0x10025360] 
0x100236b5  # and eax, 0x1002505C; jmp [0x10025000] 
0x1002336d  # and eax, 0x1002515C; jmp [0x10025160] 
0x100234ed  # and eax, 0x1002525C; jmp [0x10025260] 
0x1002363d  # and eax, 0x1002535C; jmp [0x10025354] 
0x100236af  # and eax, 0x10025060; jmp [0x1002505C] 
0x10023373  # and eax, 0x10025160; jmp [0x10025164] 
0x100234f3  # and eax, 0x10025260; jmp [0x10025264] 
0x100130d9  # and eax, 0x10025260; jmp [0x10025274] 
0x10023637  # and eax, 0x10025360; jmp [0x1002535C] 
0x1002369d  # and eax, 0x10025064; jmp [0x10025004] 
0x10023379  # and eax, 0x10025164; jmp [0x10025168] 
0x100234f9  # and eax, 0x10025264; jmp [0x10025268] 
0x1002365b  # and eax, 0x10025364; jmp [0x10025008] 
0x1002337f  # and eax, 0x10025168; jmp [0x1002516C] 
0x100234ff  # and eax, 0x10025268; jmp [0x1002526C] 
0x1002327d  # and eax, 0x1002506C; jmp [0x1002531C] 
0x10023385  # and eax, 0x1002516C; jmp [0x10025170] 
0x10023505  # and eax, 0x1002526C; jmp [0x10025270] 
0x1002328f  # and eax, 0x1002536C; jmp [0x10025370] 
0x1002338b  # and eax, 0x10025170; jmp [0x10025174] 
0x10023295  # and eax, 0x10025370; jmp [0x10025374] 
0x10023391  # and eax, 0x10025174; jmp [0x10025178] 
0x10023511  # and eax, 0x10025274; jmp [0x10025278] 
0x1002329b  # and eax, 0x10025374; jmp [0x10025378] 
0x10023397  # and eax, 0x10025178; jmp [0x1002517C] 
0x10023517  # and eax, 0x10025278; jmp [0x1002527C] 
0x100232a1  # and eax, 0x10025378; jmp [0x10025388] 
0x1002339d  # and eax, 0x1002517C; jmp [0x10025180] 
0x1002351d  # and eax, 0x1002527C; jmp [0x10025280] 
0x100233a3  # and eax, 0x10025180; jmp [0x10025184] 
0x10023523  # and eax, 0x10025280; jmp [0x10025284] 
0x100232b3  # and eax, 0x10025380; jmp [0x1002538C] 
0x100233a9  # and eax, 0x10025184; jmp [0x10025188] 
0x10023529  # and eax, 0x10025284; jmp [0x10025288] 
0x100232ad  # and eax, 0x10025384; jmp [0x10025380] 
0x100233af  # and eax, 0x10025188; jmp [0x1002518C] 
0x1002352f  # and eax, 0x10025288; jmp [0x1002528C] 
0x100232a7  # and eax, 0x10025388; jmp [0x10025384] 
0x100233b5  # and eax, 0x1002518C; jmp [0x10025190] 
0x10023535  # and eax, 0x1002528C; jmp [0x10025290] 
0x100232b9  # and eax, 0x1002538C; jmp [0x100250E8] 
0x100233bb  # and eax, 0x10025190; jmp [0x10025194] 
0x1002353b  # and eax, 0x10025290; jmp [0x10025294] 
0x1001fa3f  # and eax, 0x10036690; add byte [ecx+0x33], bl; rcr byte [edi+0x5E], 0x5B; pop ebp; ret 
0x100233c1  # and eax, 0x10025194; jmp [0x10025198] 
0x10023541  # and eax, 0x10025294; jmp [0x10025298] 
0x1001c5f2  # and eax, 0x10036694; add byte [ecx+0x33], bl; rcr byte [edi+0x5E], 0x5B; leave; ret 
0x1002362b  # and eax, 0x10025098; jmp [0x10025358] 
0x100233c7  # and eax, 0x10025198; jmp [0x1002519C] 
0x10023547  # and eax, 0x10025298; jmp [0x1002529C] 
0x1001b666  # and eax, 0x10036998; add byte [ebx+0x1075FEF8], al; mov [0x10036998], 0x00000001; jmp [0x100250D4] 
0x10023625  # and eax, 0x1002509C; jmp [0x10025098] 
0x100233cd  # and eax, 0x1002519C; jmp [0x100251A0] 
0x1002354d  # and eax, 0x1002529C; jmp [0x100252A0] 
0x1002361f  # and eax, 0x100250A0; jmp [0x1002509C] 
0x100233d3  # and eax, 0x100251A0; jmp [0x100251A4] 
0x10023553  # and eax, 0x100252A0; jmp [0x100252A4] 
0x10023619  # and eax, 0x100250A4; jmp [0x100250A0] 
0x100233d9  # and eax, 0x100251A4; jmp [0x100251A8] 
0x10023559  # and eax, 0x100252A4; jmp [0x100252A8] 
0x10023613  # and eax, 0x100250A8; jmp [0x100250A4] 
0x100233df  # and eax, 0x100251A8; jmp [0x100251AC] 
0x1002355f  # and eax, 0x100252A8; jmp [0x100252AC] 
0x100233e5  # and eax, 0x100251AC; jmp [0x100251B0] 
0x10023565  # and eax, 0x100252AC; jmp [0x100252B0] 
0x1001c685  # and eax, 0x100369AC; add byte [ecx+0x59], bl; xor eax, eax; pop esi; ret 
0x100233eb  # and eax, 0x100251B0; jmp [0x100251B4] 
0x1002356b  # and eax, 0x100252B0; jmp [0x100252B4] 
0x100233f1  # and eax, 0x100251B4; jmp [0x100251B8] 
0x10023571  # and eax, 0x100252B4; jmp [0x100252B8] 
0x10023607  # and eax, 0x100250B8; jmp [0x100250B4] 
0x100233f7  # and eax, 0x100251B8; jmp [0x100251BC] 
0x10023577  # and eax, 0x100252B8; jmp [0x100252BC] 
0x10023601  # and eax, 0x100250BC; jmp [0x100250B8] 
0x100233fd  # and eax, 0x100251BC; jmp [0x100251C0] 
0x1002357d  # and eax, 0x100252BC; jmp [0x100252C0] 
0x1001ce3a  # and eax, 0x100369BC; add byte [ecx+0x59], bl; xor eax, eax; pop esi; ret 
0x100235fb  # and eax, 0x100250C0; jmp [0x100250BC] 
0x10023403  # and eax, 0x100251C0; jmp [0x100251C4] 
0x10023583  # and eax, 0x100252C0; jmp [0x100252C4] 
0x100235f5  # and eax, 0x100250C4; jmp [0x100250C0] 
0x10023589  # and eax, 0x100252C4; jmp [0x100252C8] 
0x100235ef  # and eax, 0x100250C8; jmp [0x100250C4] 
0x1002340f  # and eax, 0x100251C8; jmp [0x100251CC] 
0x1002358f  # and eax, 0x100252C8; jmp [0x100252CC] 
0x100235e9  # and eax, 0x100250CC; jmp [0x100250C8] 
0x10023415  # and eax, 0x100251CC; jmp [0x100251D0] 
0x10023595  # and eax, 0x100252CC; jmp [0x100252D0] 
0x100235e3  # and eax, 0x100250D0; jmp [0x100250CC] 
0x1002341b  # and eax, 0x100251D0; jmp [0x100251D4] 
0x1002359b  # and eax, 0x100252D0; jmp [0x100252D4] 
0x10017835  # and eax, 0x100333D4; add byte [ecx+0x100333EC], ah; pop ecx; ret 
0x1001b67c  # and eax, 0x100250D4; cmp eax, 0xFFFFFFFD; jne 0x1001B696; mov [0x10036998], 0x00000001; jmp [0x100250D8] 
0x100235dd  # and eax, 0x100250D4; jmp [0x100250D0] 
0x10023421  # and eax, 0x100251D4; jmp [0x100251D8] 
0x100235a1  # and eax, 0x100252D4; jmp [0x100252D8] 
0x1001b691  # and eax, 0x100250D8; cmp eax, 0xFFFFFFFC; jne 0x1001B6AA; mov eax, [0x100368AC]; mov [0x10036998], 0x00000001; ret 
0x100235d7  # and eax, 0x100250D8; jmp [0x100250D4] 
0x10023427  # and eax, 0x100251D8; jmp [0x100251DC] 
0x100235a7  # and eax, 0x100252D8; jmp [0x100252DC] 
0x100235d1  # and eax, 0x100250DC; jmp [0x100250D8] 
0x1002342d  # and eax, 0x100251DC; jmp [0x100251E0] 
0x100235ad  # and eax, 0x100252DC; jmp [0x100252E0] 
0x100235cb  # and eax, 0x100250E0; jmp [0x100250DC] 
0x10023433  # and eax, 0x100251E0; jmp [0x100251E4] 
0x100235b3  # and eax, 0x100252E0; jmp [0x100252E4] 
0x100235c5  # and eax, 0x100250E4; jmp [0x100250E0] 
0x10023439  # and eax, 0x100251E4; jmp [0x100251E8] 
0x100235b9  # and eax, 0x100252E4; jmp [0x100252E8] 
0x100232bf  # and eax, 0x100250E8; jmp [0x100250EC] 
0x1002343f  # and eax, 0x100251E8; jmp [0x100251EC] 
0x100235bf  # and eax, 0x100252E8; jmp [0x100250E4] 
0x100232c5  # and eax, 0x100250EC; jmp [0x100250F0] 
0x10023445  # and eax, 0x100251EC; jmp [0x100251F0] 
0x100232cb  # and eax, 0x100250F0; jmp [0x100250F4] 
0x1002344b  # and eax, 0x100251F0; jmp [0x100251F4] 
0x10023271  # and eax, 0x100252F0; jmp [0x100252F4] 
0x100232d1  # and eax, 0x100250F4; jmp [0x100250F8] 
0x10023451  # and eax, 0x100251F4; jmp [0x100251F8] 
0x10023277  # and eax, 0x100252F4; jmp [0x1002506C] 
0x100232d7  # and eax, 0x100250F8; jmp [0x100250FC] 
0x10023457  # and eax, 0x100251F8; jmp [0x100251FC] 
0x100232dd  # and eax, 0x100250FC; jmp [0x10025100] 
0x1002345d  # and eax, 0x100251FC; jmp [0x10025200] 
0x10023247  # and eax, 0x100252FC; jmp [0x10025310] 
0x1001d913  # and eax, 0x000003FF; push 0x00000001; or ah, 0x04; push eax; call [0x10036A0C] 
0x1001489e  # add byte [ebx+0x59000866], al; pop esi; ret 
0x1001f3bb  # add byte [ecx+0x5E5F087E], cl; pop ebx; leave; ret 
0x1001069d  # add byte [ebx+0x5E5FF845], cl; pop ebx; leave; ret 
0x10010608  # add byte [ebx+0x5E5FFC45], cl; pop ebx; leave; ret 
0x1001583f  # add byte [ebx+0x5B5D5EC5], cl; pop edi; ret 
0x1001ee36  # adc al, 0xFF; call [edi-0x18] 
0x10012ffd  # push esi; push [0x10032D20]; call [0x10025264] 
0x1001411b  # daa; add byte [ebx+0x5E5F1445], cl; pop ebx; inc [eax]; pop ebp; ret 
0x10011c6e  # daa; add byte [eax], al; mov [eax], 0x00000009; or eax, 0xFFFFFFFF; pop esi; ret 
0x10019d80  # daa; push 0x00008000; push 0x00000000; push edi; call [0x100252BC] 
0x10018176  # daa; sar bh, cl; inc [ebx-0x3974F33C]; pop esi; ret 
0x10016b32  # sub byte [ebx+eax], dh; adc byte [ebx-0x7CFC143F], cl; enter 0x5BFF, 0xC9; ret 
0x10011b9a  # sub byte [eax+eax+0x00], al; pop ecx; push eax; call [0x10025164] 
0x10023692  # sub byte [eax+0x02], dl; adc bh, bh; and eax, 0x1002502C; jmp [0x10025064] 
0x1001c384  # sub byte [edx+0x02], dl; adc byte [ebp+0x1F], dh; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x100234a0  # sub byte [edx+0x02], dl; adc bh, bh; and eax, 0x1002522C; jmp [0x10025230] 
0x100164db  # sub byte [edx+0x02], dl; adc bh, bh; salc; push [ebp-0x04]; call esi 
0x1002326c  # sub byte [ebx+0x02], dl; adc bh, bh; and eax, 0x100252F0; jmp [0x100252F4] 
0x10017452  # sub byte [ecx+0x03], dh; adc byte [ecx+0x39], bl; sbb eax, 0x1003712C; je 0x10017469; push 0x00000001; call [0x10025084] 
0x1001b9de  # sub byte [ecx+0x03], dh; adc byte [esi+ecx+0x56], dh; call edi 
0x10011f97  # sub byte [ecx+0x03], dh; adc byte [eax+ebx+0x53], dh; call [0x10025248] 
0x10022ff5  # sub byte [ecx+0x03], dh; adc byte [eax+ebx+0x56], dh; call [0x10025248] 
0x10011d2a  # sub byte [ecx+0x03], dh; adc byte [eax+ebx+0x57], dh; call [0x10025248] 
0x10016b7e  # sub byte [ecx+0x03], dh; adc byte [ebx+0x0252481D], cl; adc byte [esi+ecx+0x56], dh; call ebx 
0x100113f3  # sub byte [ecx+0x03], dh; adc byte [ebx+0x0252483D], cl; adc byte [esi+ecx+0x56], dh; call edi 
0x100154e4  # sub byte [ecx+0x03], dh; adc byte [ebx+0x0252483D], cl; adc byte [esp+edx+0x56], dh; call edi 
0x100126da  # sub byte [ebx+0x5B5E5FC3], cl; ret 
0x10021c6e  # sub [eax], edx; mov eax, [ecx+0x1C]; lea ecx, [edx+edx]; add [eax], ecx; retn 0x0004 
0x10021ca3  # sub [eax], edx; mov eax, [ecx+0x20]; lea ecx, [edx+edx]; add [eax], ecx; retn 0x0004 
0x1001a5f7  # sub [ebx-0x18], edx; enter 0xFFB9, 0xFF; pop ecx; push eax; call [0x10025170] 
0x10012f72  # sub [esi-0x01], edx; xor eax, 0x10032D20; call [0x10025264] 
0x100145af  # sub [ebp-0x0001A37B], ecx; call [eax-0x18] 
0x1001b981  # sub [ecx+0x10037130], esp; mov eax, [esi+eax]; add eax, 0x20; push eax; call [0x1002508C] 
0x100246b1  # sub [ecx+0x5959FFFF], edi; ret 
0x1001a6d2  # sub ebx, esi; movsd; jmp [0x1001A7E8+edx*4] 
0x1001ba7b  # sub al, byte [eax]; add byte [eax], al; or eax, 0xFFFFFFFF; pop ebp; ret 
0x10011481  # sub al, byte [ebx]; adc byte [edx-0x1F7CA7FC], cl; add al, byte [ebp-0x74FB8A40]; ret 
0x1001bf57  # sub eax, [eax]; add byte [ebx-0x3F7AE33C], al; jne 0x1001BF68; mov eax, 0x7FFFFFFF; pop ebp; ret 
0x100157c6  # sub eax, [0x100366E8]; sar eax, 0x02; neg eax; pop edi; pop esi; ret 
0x10015a1c  # sub eax, [0x100366F0]; sar eax, 0x02; neg eax; pop edi; pop esi; ret 
0x100189ed  # sub eax, [esp+0x04]; ret 
0x10018c24  # sub eax, [esp+0x04]; sar eax, 1; ret 
0x10018655  # sub eax, [ebp-0x10]; pop edi; pop esi; pop ebx; leave; ret 
0x1001bf88  # sub ecx, [esp+0x08]; neg cx; sbb ecx, ecx; not ecx; and eax, ecx; ret 
0x100155d1  # sub edx, [edi+0x55]; push 0xFFFFFFFF; push [esi]; push 0x00000000; push 0x00000001; call ebx 
0x100180b3  # sub esi, [eax+ecx+0x3A]; ret 
0x1001be23  # sub eax, ecx; pop ebx; pop esi; leave; ret 
0x10016a39  # sub eax, ecx; pop ebx; leave; ret 
0x1001a87b  # sub ecx, eax; jmp [0x1001A888+eax*4] 
0x10020ee3  # sub al, 0x00; adc al, ch; pop edi; retn 0xFFFE 
0x100152b4  # sub al, 0x32; add edx, [eax]; call esi; push [0x1003321C]; call esi 
0x100152b4  # sub al, 0x32; add edx, [eax]; call esi 
0x1001532f  # sub al, 0x32; add edx, [eax]; call edi; push [0x100331EC]; call edi 
0x1001532f  # sub al, 0x32; add edx, [eax]; call edi 
0x10023698  # sub al, 0x50; add dl, byte [eax]; jmp [0x10025064] 
0x10023326  # sub al, 0x51; add dl, byte [eax]; jmp [0x10025130] 
0x100234a6  # sub al, 0x52; add dl, byte [eax]; jmp [0x10025230] 
0x10023266  # sub al, 0x53; add dl, byte [eax]; jmp [0x10025328] 
0x1001cb6c  # sub al, 0x5E; ret 
0x10013a5d  # sub al, 0x5E; leave; ret 
0x10011f8a  # sub al, 0x71; add edx, [eax]; push ebx; call [0x1002524C] 
0x100154d7  # sub al, 0x71; add edx, [eax]; push esi; call [0x1002524C] 
0x100113e5  # sub al, 0x71; add edx, [eax]; push edi; push esi; call [0x1002524C] 
0x10011d1d  # sub al, 0x71; add edx, [eax]; push edi; call [0x1002524C] 
0x10017459  # sub al, 0x71; add edx, [eax]; je 0x10017469; push 0x00000001; call [0x10025084] 
0x100206e8  # sub al, 0x8B; or [ebx], eax; enter 0xC13B, 0x73; add eax, 0x5E00B60F; ret 
0x100218e8  # sub al, 0x8B; or [ebp-0x3EC4B7F4], ecx; jnc 0x100218F7; mov ax, word [eax]; pop esi; ret 
0x10014075  # sub al, 0xF6; ret 
0x10021c7d  # sub al, 0xFF; add byte [ebx+0x00831C41], cl; dec byte [ebx+0x008B1C41]; ret 
0x10021c8e  # sub al, 0xFF; or byte [ebx+0x018B1C49], cl; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x1001efe7  # sub eax, 0xB1E85000; xor edi, edi; dec [ebx-0x247AA628]; jne 0x1001F005; push esi; call [0x1002529C] 
0x1001cd3b  # sub eax, 0xC0331003; pop edi; pop ebp; pop ebx; ret 
0x10014681  # sub eax, 0x07751003; mov eax, [eax+0x10032D6C]; ret 
0x10012fa7  # sub eax, 0xF8831003; push [esi+ecx+0x50]; call [0x1002526C]; or [0x10032D20], 0xFFFFFFFF; ret 
0x10012fa7  # sub eax, 0xF8831003; push [esi+ecx+0x50]; call [0x1002526C] 
0x10013188  # sub eax, 0xC0851003; je 0x100131A5; mov [ebp-0x04], 0x00000001; call eax 
0x10012fdc  # sub eax, 0xF88B1003; call [0x10025270] 
0x100130cd  # sub eax, 0x15FF1003; push edx; add dl, byte [eax]; pop esi; ret 
0x10012fb9  # sub eax, 0xC3FF1003; mov eax, [esp+0x04]; mov [eax+0x50], 0x100355B0; mov [eax+0x14], 0x00000001; ret 
0x1001ecdc  # sub eax, 0x75FF5756; sbb al, 0xFF; jne 0x1001ECFD; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x1001efb2  # sub eax, 0x006A006A; push 0xFFFFFFFF; push edi; push 0x00000001; push [0x100368AC]; call [0x10025208] 
0x10019c9b  # sub eax, 0x100252E0; push 0x00000004; push 0x00002000; push 0x00400000; push 0x00000000; call ebp 
0x10016f65  # sub eax, 0x142474FF; push 0x00000000; push [esp+0x18]; push eax; call [0x10025160] 
0x10014731  # add edx, [eax]; jl 0x10014707; pop esi; ret 
0x1001fb90  # push esi; push esi; push 0x00000001; push esi; call [0x1002509C] 
0x1001fa7d  # push edi; push edi; push 0x00000001; push edi; call [0x1002509C] 
0x10017066  # call [0x100252D0] 
0x100104c4  # xor byte [edx], al; ret 
0x10023214  # xor byte [ebx], cl; add byte [eax], al; mov [esi], 0x10027B58; mov eax, esi; pop esi; retn 0x0004 
0x1001cf61  # xor byte [ebx], cl; ret 
0x1001dc08  # xor byte [edi], cl; test [ebp-0x74FFFFFF], esi; retn 0x1DE9 
0x1002332c  # xor byte [ecx+0x02], dl; adc bh, bh; and eax, 0x10025134; jmp [0x10025138] 
0x100234ac  # xor byte [edx+0x02], dl; adc bh, bh; and eax, 0x10025234; jmp [0x10025238] 
0x10013946  # xor byte [esi-0x37], bl; ret 
0x1001fde1  # xor byte [ebx+0x03], ch; adc al, ch; popfd; push es; add byte [eax], al; ret 
0x1001bb97  # xor byte [ecx+0x02], dh; adc byte [eax+0x56], dl; push eax; push edi; push edi; call [0x100250CC] 
0x1001eaf3  # xor byte [ecx+0x02], dh; adc byte [eax+0x57], dl; push eax; push ebx; push ebx; call [0x100250CC] 
0x100186b0  # xor byte [ecx+0x02], dh; adc byte [esi+0x53], dl; call [0x100251F8] 
0x100187fe  # xor byte [ecx+0x02], dh; adc byte [esi+0x57], dl; call [0x100252D8] 
0x1001e92f  # xor byte [ecx+0x02], dh; adc byte [esi+0x57], dl; call [0x100251F8] 
0x10018a4d  # xor byte [ecx+0x02], dh; adc byte [edi+0x56], dl; call [0x100252D8] 
0x10015cd8  # xor byte [ecx+0x03], dh; adc byte [ebx-0x3CC4F9FC], cl; je 0x10015D1D; add eax, 0x20; push eax; call [0x10025090] 
0x1001cd58  # xor byte [eax+0x018A4101], cl; test al, al; jne 0x1001CD4F; pop esi; ret 
0x1001afc8  # xor byte [ecx-0x3F7CFECC], cl; add al, 0x4A; jne 0x1001AFC7; pop esi; ret 
0x100108cb  # xor byte [ecx+0x0000A883], cl; add byte [edi-0x75], bl; ret 
0x10010533  # xor dh, al; inc ecx; add eax, 0x0241C63A; cmp al, byte [edx]; ret 
0x10020396  # xor bl, ch; adc eax, 0xCF8B078B; call [eax+0x14] 
0x100185e3  # xor bl, ch; inc ecx; call [0x100250B0] 
0x10021cb2  # xor bh, bh; or byte [ebx+0x018B2049], cl; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x10016e52  # xor bh, bh; adc eax, 0x10025174; test eax, eax; jne 0x10016E67; call [0x100250B0] 
0x10016d82  # xor bh, bh; adc eax, 0x10025174; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x100131fb  # xor [ecx], eax; adc bh, bh; adc eax, 0x10025278; mov [0x100366C4], eax; ret 
0x10015302  # xor [ebx], eax; adc byte [ebx+ecx+0x50], dh; call edi 
0x100153ab  # xor [ebx], eax; adc bh, bh; adc eax, 0x10025078; pop ebp; ret 
0x100152cd  # xor [ebx], eax; adc bh, bh; salc; pop esi; ret 
0x10015338  # xor [ebx], eax; adc bh, bh; xlatb; pop edi; pop esi; ret 
0x10021c5f  # xor [edi], eax; add byte [eax], al; pop esi; retn 0x0008 
0x1001b1ee  # xor [edi+0x5E], ebx; pop ebx; leave; ret 
0x1001e0ec  # xor [ebx+0x5B5E5FC1], ecx; ret 
0x1001eeef  # xor edi, edi; inc [ebx-0x3974E73C]; pop esi; pop ebp; ret 
0x1001efec  # xor edi, edi; dec [ebx-0x247AA628]; jne 0x1001F005; push esi; call [0x1002529C] 
0x10012166  # xor al, byte [eax]; add byte [ecx-0x3D], bl; push esi; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10015318  # xor al, byte [ebx]; adc byte [esp+eax*8-0x01], bh; xor eax, 0x1003320C; call edi; push [0x1003321C]; call edi 
0x10015318  # xor al, byte [ebx]; adc byte [esp+eax*8-0x01], bh; xor eax, 0x1003320C; call edi 
0x100152bd  # xor al, byte [ebx]; adc bh, bh; salc; push [0x1003320C]; call esi 
0x100152b5  # xor al, byte [ebx]; adc bh, bh; salc; push [0x1003321C]; call esi 
0x100152c5  # xor al, byte [ebx]; adc bh, bh; salc; push [0x100331EC]; call esi 
0x10015328  # xor al, byte [ebx]; adc bh, bh; xlatb; push [0x1003322C]; call edi 
0x10015330  # xor al, byte [ebx]; adc bh, bh; xlatb; push [0x100331EC]; call edi 
0x1002222e  # xor cl, byte [edi]; add byte [eax], al; retn 0x0008 
0x1001ac60  # xor dl, byte [edi-0x75]; retn 0x1174 
0x10012eeb  # xor cl, byte [ebx+0x0C8B0849]; push cs; add ecx, edx; add eax, ecx; pop esi; ret 
0x1001d379  # xor cl, byte [ebp+0x406A4046]; push eax; push 0x00001002; push [0x10036A08]; call [0x10036A0C] 
0x10013d14  # xor ch, byte [eax+0x510B7508]; call [0x10025180] 
0x10020eb2  # xor al, al; pop edi; pop esi; ret 
0x1001ef79  # xor bh, bh; dec [ebx-0x007AA608]; jne 0x1001EF8E; push esi; call [0x100252A0] 
0x1001324d  # xor eax, [eax]; add byte [eax], al; add esp, 0x0C; ret 
0x10011fca  # xor eax, [eax]; add byte [ecx-0x15], bl; pop es; push ebx; call [0x10025248] 
0x10017837  # xor eax, [ebx]; adc byte [eax], al; mov eax, [0x100333EC]; pop ecx; ret 
0x10017781  # xor eax, [ebx]; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x1001748a  # xor eax, [ebx]; adc cl, ch; ret 
0x10012ec4  # xor eax, eax; cmp byte [ebp+0x0C], al; setne al; ret 
0x1001703c  # xor eax, eax; pop ebx; leave; ret 
0x10017112  # xor eax, eax; pop ebp; ret 
0x100112b7  # xor eax, eax; pop esi; pop ebx; pop ebp; ret 
0x100164f3  # xor eax, eax; pop esi; pop ebx; leave; ret 
0x10018cfb  # xor eax, eax; pop esi; pop ebp; ret 
0x100131f3  # xor eax, eax; pop esi; retn 0x0004 
0x1001cd3e  # xor eax, eax; pop edi; pop ebp; pop ebx; ret 
0x1001fa46  # xor eax, eax; pop edi; pop esi; pop ebx; pop ebp; ret 
0x100157ec  # xor eax, eax; pop edi; ret 
0x1001afd9  # xor eax, eax; stosd; stosd; stosd; pop edi; ret 
0x100157e6  # xor ecx, ecx; test edi, edi; jne 0x100157F0; xor eax, eax; pop edi; ret 
0x10017caf  # xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x10014138  # xor ebx, ebx; xor esi, esi; xor edi, edi; cmp eax, ebx; jne 0x10014175; call ebp 
0x1001b9da  # xor ebx, ebx; cmp [0x10037128], ebx; je 0x1001B9F2; push esi; call edi 
0x1001f05a  # xor ebx, ebx; push esi; call [0x1002529C] 
0x1001413a  # xor esi, esi; xor edi, edi; cmp eax, ebx; jne 0x10014175; call ebp 
0x10022ff1  # xor edi, edi; cmp [0x10037128], edi; je 0x10023013; push esi; call [0x10025248] 
0x1001413c  # xor edi, edi; cmp eax, ebx; jne 0x10014175; call ebp 
0x1001fb18  # xor edi, edi; jne 0x1001FB00; push esi; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10019964  # xor edi, edi; mov esi, [ebx+0x10]; push 0x000041C4; push esi; call [0x100252E4] 
0x10012f86  # xor al, 0x00; add byte [eax], al; pop ecx; call [0x10025260] 
0x10011f29  # xor al, 0x00; add byte [ecx-0x15], bl; pop es; push edi; call [0x10025248] 
0x1001afca  # xor al, 0x01; add eax, 0x04; dec edx; jne 0x1001AFC7; pop esi; ret 
0x10018466  # xor al, 0x03; adc byte [esi+0x5B], bl; pop ebp; ret 
0x10017fe5  # xor al, 0x03; adc byte [edx-0x01], ch; push 0x10036920; push edi; push [0x100368AC]; call esi 
0x10017fac  # xor al, 0x03; adc byte [edx-0x01], ch; push 0x100368CC; push edi; push [0x100368AC]; call esi 
0x1001845a  # xor al, 0x03; adc byte [ecx+0x0334CC0D], cl; adc byte [ecx+0x0334C81D], cl; adc byte [esi+0x5B], bl; pop ebp; ret 
0x10018460  # xor al, 0x03; adc byte [ecx+0x0334C81D], cl; adc byte [esi+0x5B], bl; pop ebp; ret 
0x100180ad  # xor al, 0x03; adc byte [edx+0x742B3C06], cl; or byte [edx], bh; ret 
0x10016b33  # xor al, 0x03; adc byte [ebx-0x7CFC143F], cl; enter 0x5BFF, 0xC9; ret 
0x10018075  # xor al, 0x03; adc al, ch; arpl word [ebx-0x01], si; jmp [ecx+0x100334AC] 
0x10018134  # xor al, 0x03; adc al, ch; movsb; jc 0x1001813A; jmp [ecx+0x100334B0] 
0x10018597  # xor al, 0x30; call [0x1002516C] 
0x10016e51  # xor al, 0x30; call [0x10025174]; test eax, eax; jne 0x10016E67; call [0x100250B0] 
0x10016d81  # xor al, 0x30; call [0x10025174]; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x10016d81  # xor al, 0x30; call [0x10025174] 
0x10011929  # xor al, 0x38; call [0x10025250] 
0x10011965  # xor al, 0x38; call [0x10025178]; test eax, eax; jne 0x10011983; call [0x100250B0] 
0x10011965  # xor al, 0x38; call [0x10025178] 
0x10011894  # xor al, 0x38; call [0x10025180] 
0x100236f2  # xor al, 0x50; add dl, byte [eax]; jmp [0x10025030] 
0x10023332  # xor al, 0x51; add dl, byte [eax]; jmp [0x10025138] 
0x100234b2  # xor al, 0x52; add dl, byte [eax]; jmp [0x10025238] 
0x10018697  # xor al, 0x71; add dl, byte [eax]; push esi; call [0x100251FC] 
0x100187dd  # xor al, 0x71; add dl, byte [eax]; mov esi, 0x00000100; push esi; push edi; call [0x100252DC] 
0x10018a2c  # xor al, 0x71; add dl, byte [eax]; mov edi, 0x00000100; push edi; push esi; call [0x100252DC] 
0x100193ff  # xor al, 0x81; call [0x10025258] 
0x10010313  # xor al, 0x84; div byte [edi-0x09]; retn 0x0000 
0x1001c0ec  # xor al, 0x8B; xor eax, 0x100250B0; call esi 
0x10011df5  # xor eax, 0xEB590000; pop es; push edi; call [0x10025248] 
0x1001d2d1  # xor eax, 0xEB000001; sbb ebp, eax; mov ecx, 0xEB000003; adc al, 0x3B; ret 
0x10019d92  # xor eax, 0x0F741003; push esi; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10019c78  # xor eax, 0x1DEB1003; push 0x00002020; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x1001ec86  # xor eax, 0x10025208; call esi 
0x1001d386  # xor eax, 0x10036A08; call [0x10036A0C] 
0x100152c3  # xor eax, 0x1003320C; call esi; push [0x100331EC]; call esi; pop esi; ret 
0x100152c3  # xor eax, 0x1003320C; call esi; push [0x100331EC]; call esi 
0x100152c3  # xor eax, 0x1003320C; call esi 
0x1001531e  # xor eax, 0x1003320C; call edi; push [0x1003321C]; call edi; push [0x1003322C]; call edi 
0x1001531e  # xor eax, 0x1003320C; call edi; push [0x1003321C]; call edi 
0x1001531e  # xor eax, 0x1003320C; call edi 
0x100152bb  # xor eax, 0x1003321C; call esi; push [0x1003320C]; call esi; push [0x100331EC]; call esi 
0x100152bb  # xor eax, 0x1003321C; call esi; push [0x1003320C]; call esi 
0x100152bb  # xor eax, 0x1003321C; call esi 
0x10015326  # xor eax, 0x1003321C; call edi; push [0x1003322C]; call edi; push [0x100331EC]; call edi 
0x10015326  # xor eax, 0x1003321C; call edi; push [0x1003322C]; call edi 
0x10015326  # xor eax, 0x1003321C; call edi 
0x10012fda  # xor eax, 0x10032D20; mov edi, eax; call [0x10025270] 
0x100130cb  # xor eax, 0x10032D20; call [0x10025264]; pop esi; ret 
0x10012f75  # xor eax, 0x10032D20; call [0x10025264] 
0x100193c1  # xor eax, 0x10037120; push edi; push [0x10038144]; call [0x10025284] 
0x1001448a  # xor eax, 0x10037120; push 0x00000000; push [0x10038144]; call ebp 
0x10019931  # xor eax, 0x10037120; call [0x100252E4] 
0x1001c383  # xor eax, 0x10025228; jne 0x1001C3A9; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x100164da  # xor eax, 0x10025228; call esi; push [ebp-0x04]; call esi 
0x100164da  # xor eax, 0x10025228; call esi 
0x10011f96  # xor eax, 0x10037128; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011d29  # xor eax, 0x10037128; je 0x10011D48; push edi; call [0x10025248] 
0x100152b3  # xor eax, 0x1003322C; call esi; push [0x1003321C]; call esi; push [0x1003320C]; call esi 
0x100152b3  # xor eax, 0x1003322C; call esi; push [0x1003321C]; call esi 
0x100152b3  # xor eax, 0x1003322C; call esi 
0x1001532e  # xor eax, 0x1003322C; call edi; push [0x100331EC]; call edi 
0x1001532e  # xor eax, 0x1003322C; call edi 
0x100193f9  # xor eax, 0x10038144; lea esi, [ecx+eax*4]; call [0x10025258] 
0x10019ded  # xor eax, 0x10038144; call [0x10025254]; pop esi; ret 
0x1001216f  # xor eax, 0x10038144; call [0x10025254] 
0x10018d08  # xor eax, 0x10038144; call [0x10025258]; test eax, eax; mov [0x10037120], eax; jne 0x10018D1D; ret 
0x100122c0  # xor eax, 0x10038144; call [0x10025258] 
0x1001349f  # xor eax, 0x10038144; call [0x10025284] 
0x10013748  # xor eax, 0x10038144; call [0x10025288] 
0x10014419  # xor eax, 0x10038144; call [0x100252B4]; xor eax, eax; ret 
0x100144c5  # xor eax, 0x10038144; call [0x100252B4]; pop edi; pop esi; ret 
0x10014419  # xor eax, 0x10038144; call [0x100252B4] 
0x10014476  # xor eax, 0x10038144; call ebp 
0x10013dbd  # xor eax, 0x10038260; call [0x1002528C] 
0x10021de1  # xor eax, 0x6868016A; outsb; add edx, [eax]; call [0x10025098] 
0x100152ad  # xor eax, 0x10025090; push [0x1003322C]; call esi; push [0x1003321C]; call esi 
0x100152ad  # xor eax, 0x10025090; push [0x1003322C]; call esi 
0x1001b8d7  # xor eax, 0x10025190; push 0x100271B4; push edi; call esi 
0x10017faa  # xor eax, 0x100334AC; push 0xFFFFFFFF; push 0x100368CC; push edi; push [0x100368AC]; call esi 
0x1001efbd  # xor eax, 0x100368AC; call [0x10025208] 
0x1001ba5f  # xor eax, 0x100368AC; call [0x1002520C] 
0x1001d0a0  # xor eax, 0x100368AC; call [0x100250DC] 
0x10017fb8  # xor eax, 0x100368AC; call esi 
0x10017fe3  # xor eax, 0x100334B0; push 0xFFFFFFFF; push 0x10036920; push edi; push [0x100368AC]; call esi 
0x1001c0ee  # xor eax, 0x100250B0; call esi 
0x1001b716  # xor eax, 0x10036EDC; call [0x100250DC] 
0x100152cb  # xor eax, 0x100331EC; call esi; pop esi; ret 
0x100152cb  # xor eax, 0x100331EC; call esi 
0x10015336  # xor eax, 0x100331EC; call edi; pop edi; pop esi; ret 
0x10015336  # xor eax, 0x100331EC; call edi 
0x1001d36b  # xor eax, 0x100369EC; call [0x10036A0C] 
0x1001d32a  # xor eax, 0x100369EC; call [0x100250C4] 
0x10011c6f  # add byte [eax], al; mov [eax], 0x00000009; or eax, 0xFFFFFFFF; pop esi; ret 
0x100144bf  # cmp esi, edi; jne 0x100144A9; push [0x10038144]; call [0x100252B4] 
0x1001be6a  # push edi; push 0x00000001; call ebx 
0x100155d7  # push 0x00000000; push 0x00000001; call ebx 
0x1001464c  # push 0xFFFFFFF4; call [0x10025290]; push eax; call [0x1002516C] 
0x1001464c  # push 0xFFFFFFF4; call [0x10025290] 
0x10015397  # call [0x10025074]; pop esi; pop ebp; ret 
0x10015397  # call [0x10025074] 
0x10014462  # call edi; push 0x00008000; push 0x00000000; push [esi]; call edi 
0x1001446d  # call edi; push [esi+0x04]; push 0x00000000; push [0x10038144]; call ebp 
0x10014462  # call edi 
0x10011b8b  # aaa; inc esp; add byte [eax], al; pop ecx; push eax; call [0x10025168] 
0x100189e8  # cmp byte [eax], al; pop esi; jne 0x100189F2; sub eax, [esp+0x04]; ret 
0x10018c1f  # cmp byte [eax], al; pop esi; jne 0x10018C2B; sub eax, [esp+0x04]; sar eax, 1; ret 
0x100164d2  # cmp byte [eax], al; je 0x100164F3; push [ebp+0x0C]; mov esi, [0x10025228]; call esi 
0x10016101  # cmp byte [eax+edx*2], cl; call [0x10025074]; pop edi; pop esi; pop ebx; ret 
0x10016101  # cmp byte [eax+edx*2], cl; call [0x10025074] 
0x10024566  # cmp byte [0x2083FFFF], cl; add byte [ebx-0x3D740036], al; pop esi; ret 
0x10012165  # cmp byte [edx], dh; add byte [eax], al; pop ecx; ret 
0x10012ec6  # cmp byte [ebp+0x0C], al; setne al; ret 
0x100236ec  # cmp byte [eax+0x02], dl; adc bh, bh; and eax, 0x10025034; jmp [0x10025030] 
0x10023338  # cmp byte [ecx+0x02], dl; adc bh, bh; and eax, 0x1002513C; jmp [0x10025140] 
0x100234b8  # cmp byte [edx+0x02], dl; adc bh, bh; and eax, 0x1002523C; jmp [0x10025240] 
0x100207cf  # cmp byte [edi+0x50], dl; lea eax, [esi+0x40]; mov edx, [ecx]; push ebx; push eax; call [edx+0x10] 
0x10023080  # cmp byte [ecx+0x0775FC75], cl; mov [ebp+0x14], 0x10036EBC; mov ebx, 0x1003712C; push ebx; call [0x1002524C] 
0x10013d0e  # cmp byte [edx+0x7401A803], cl; xor ch, byte [eax+0x510B7508]; call [0x10025180] 
0x10011966  # cmp bh, bh; adc eax, 0x10025178; test eax, eax; jne 0x10011983; call [0x100250B0] 
0x1001fc31  # cmp bh, bh; jne 0x1001FC19; push edi; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001b9dc  # cmp [0x10037128], ebx; je 0x1001B9F2; push esi; call edi 
0x100113f1  # cmp [0x10037128], ebx; mov edi, [0x10025248]; je 0x1001140D; push esi; call edi 
0x100154e2  # cmp [0x10037128], ebx; mov edi, [0x10025248]; je 0x10015504; push esi; call edi 
0x10017457  # cmp [0x1003712C], ebx; je 0x10017469; push 0x00000001; call [0x10025084] 
0x100154ce  # cmp [0x10036898], ebx; je 0x10015522; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001b8bb  # cmp [0x1003699C], ebx; push esi; push edi; jne 0x1001B907; push 0x100271C0; call [0x100250D0] 
0x1001ac81  # cmp [eax], esi; je 0x1001AC87; xor eax, eax; pop edi; pop esi; ret 
0x10011f95  # cmp [0x10037128], esi; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011d28  # cmp [0x10037128], esi; je 0x10011D48; push edi; call [0x10025248] 
0x1001328d  # cmp [0x10036708], edi; jne 0x100132A6; push [esp+0x08]; call [0x1002518C]; push eax; call [0x10025280] 
0x1001328d  # cmp [0x10036708], edi; jne 0x100132A6; push [esp+0x08]; call [0x1002518C] 
0x10022ff3  # cmp [0x10037128], edi; je 0x10023013; push esi; call [0x10025248] 
0x10016b7c  # cmp [0x10037128], edi; mov ebx, [0x10025248]; je 0x10016B98; push esi; call ebx 
0x10021e2a  # cmp [0x10036E68], edi; jne 0x10021E39; push ebx; call [0x10025074] 
0x100143d2  # cmp [esp+0x08], eax; push 0x00001000; sete al; push eax; call [0x100252B8] 
0x10011bb2  # cmp [esp+0x14], ebx; jle 0x10011BCD; cmp edi, ebx; je 0x10011BCD; push 0x000003E8; call [0x10025084] 
0x1001aabd  # cmp [ebp-0x20], ebx; jne 0x1001AB00; push esi; push 0x00000008; push [0x10038144]; call [0x10025258] 
0x1001ba3a  # cmp [edx+0x01], ebp; mov byte [eax], cl; pop eax; pop ebp; ret 
0x1001e48c  # cmp [eax+0x04], esi; je 0x1001E493; xor eax, eax; pop edi; pop esi; ret 
0x1001c37f  # cmp [ebp+0x08], edi; mov esi, [0x10025228]; jne 0x1001C3A9; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x10019e30  # cmp [ebx+0x400068C3], ecx; add byte [eax], al; add eax, [esi+0x10]; push 0x00001000; push eax; call [0x100252BC] 
0x100246a1  # cmp [ecx+0x5959FFFF], edi; ret 
0x1001053b  # cmp al, byte [edx]; ret 
0x10016156  # cmp dl, byte [ecx]; add byte [eax], al; add esp, 0x10; ret 
0x10017062  # cmp al, dh; inc ebp; or ch, byte [esi]; call [0x100252D0] 
0x10011ae1  # cmp eax, [0x10038260]; jc 0x10011AEC; xor eax, eax; ret 
0x100125fc  # cmp eax, [0x100366C0]; mov [ebp+0x08], eax; je 0x10012655; lea eax, [ebp-0x000000B4]; push eax; call [0x10025198] 
0x10014481  # cmp ebx, [0x1003711C]; jl 0x10014457; push [0x10037120]; push 0x00000000; push [0x10038144]; call ebp 
0x10013340  # cmp esi, [esp+0x0C]; jnc 0x10013353; mov eax, [esi]; test eax, eax; je 0x1001334E; call eax 
0x1001467e  # cmp ecx, [eax+0x10032D68]; jne 0x1001468D; mov eax, [eax+0x10032D6C]; ret 
0x100206ed  # cmp eax, ecx; jnc 0x100206F6; movzx eax, byte [eax]; pop esi; ret 
0x100218ee  # cmp eax, ecx; jnc 0x100218F7; mov ax, word [eax]; pop esi; ret 
0x10015cdf  # cmp eax, ebx; je 0x10015D1D; add eax, 0x20; push eax; call [0x10025090] 
0x1001413e  # cmp eax, ebx; jne 0x10014175; call ebp 
0x1001b885  # cmp eax, esi; jc 0x1001B847; pop esi; leave; ret 
0x1001d097  # cmp eax, esi; jl 0x1001D090; lea eax, [ebp-0x24]; push eax; push [0x100368AC]; call [0x100250DC] 
0x100245b6  # cmp eax, edi; mov [ebp-0x08], eax; jne 0x100245D4; call [0x100250B0] 
0x100237ee  # cmp edx, eax; je 0x100237F4; xor eax, eax; ret 
0x100132d1  # cmp esi, eax; jc 0x100132E8; mov eax, [esi]; test eax, eax; je 0x100132DD; call eax 
0x1001417e  # cmp esi, ebx; jne 0x1001418E; call ebp 
0x1001f09f  # cmp esi, ebx; jne 0x1001F0F0; call [0x100250B0] 
0x100144c0  # cmp esi, edi; jne 0x100144A9; push [0x10038144]; call [0x100252B4] 
0x1001eba0  # cmp esi, edi; jnle 0x1001EBE5; lea eax, [ebp-0x3C]; push eax; push [ebp+0x20]; call [0x100250DC] 
0x10011bb8  # cmp edi, ebx; je 0x10011BCD; push 0x000003E8; call [0x10025084] 
0x1001b8d2  # cmp edi, ebx; je 0x1001B93D; mov esi, [0x10025190]; push 0x100271B4; push edi; call esi 
0x10014204  # cmp edi, ebx; jne 0x10014214; call [0x100252A4] 
0x100236e6  # cmp al, 0x50; add dl, byte [eax]; jmp [0x10025038] 
0x1002333e  # cmp al, 0x51; add dl, byte [eax]; jmp [0x10025140] 
0x100234be  # cmp al, 0x52; add dl, byte [eax]; jmp [0x10025240] 
0x10023236  # cmp al, 0x53; add dl, byte [eax]; jmp [0x10025300] 
0x100145ad  # cmp al, 0x76; sub [ebp-0x0001A37B], ecx; call [eax-0x18] 
0x1001328e  # cmp eax, 0x10036708; jne 0x100132A6; push [esp+0x08]; call [0x1002518C]; push eax; call [0x10025280] 
0x1001328e  # cmp eax, 0x10036708; jne 0x100132A6; push [esp+0x08]; call [0x1002518C] 
0x1001331c  # cmp eax, 0x10036708; call [0x1002527C]; pop edi; ret 
0x1001331c  # cmp eax, 0x10036708; call [0x1002527C] 
0x100198c5  # cmp eax, 0x1003711C; add [esi+0x43], edi; push [eax+0x10]; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10022ff4  # cmp eax, 0x10037128; je 0x10023013; push esi; call [0x10025248] 
0x10016b7d  # cmp eax, 0x10037128; mov ebx, [0x10025248]; je 0x10016B98; push esi; call ebx 
0x10016bd6  # cmp eax, 0x52720041; cmp ax, 0x0000005A; jnbe 0x10016C2D; add eax, 0x20; leave; ret 
0x1001e1d6  # cmp eax, 0x10036A44; add byte [ebp+0x16], dh; push edi; push 0x1001E275; call [0x100250A8] 
0x1001b9d5  # cmp eax, 0x10025248; xor ebx, ebx; cmp [0x10037128], ebx; je 0x1001B9F2; push esi; call edi 
0x100113f8  # cmp eax, 0x10025248; je 0x1001140D; push esi; call edi 
0x100154e9  # cmp eax, 0x10025248; je 0x10015504; push esi; call edi 
0x10016bdc  # cmp eax, 0x4C77005A; add eax, 0x20; leave; ret 
0x1001b4f9  # cmp eax, 0x10035760; jc 0x1001B4F1; lea eax, [ebp-0x18]; push eax; push ebx; call [0x100250DC] 
0x1001545e  # cmp eax, 0x54720061; cmp ax, 0x0000007A; jnbe 0x100154B7; add eax, 0x0000FFE0; leave; ret 
0x100153de  # cmp eax, 0x5D720061; cmp ax, 0x0000007A; jnbe 0x10015440; add eax, 0x0000FFE0; pop ebx; ret 
0x10021e18  # cmp eax, 0x10036E68; add [ebp+0x0A], esi; push 0x00000001; call [0x10025084] 
0x10021e5e  # cmp eax, 0x10036E68; add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x10025078]; ret 
0x10021e5e  # cmp eax, 0x10036E68; add dh, byte [ebp+0x0B]; push 0x10036E50; call [0x10025078] 
0x10021e2b  # cmp eax, 0x10036E68; jne 0x10021E39; push ebx; call [0x10025074] 
0x10021e12  # cmp eax, 0x10036E68; cmp [0x10036E68], 0x01; jne 0x10021E2A; push 0x00000001; call [0x10025084] 
0x10017560  # cmp eax, 0xFFFFFF78; add byte [ebp-0x0000877B], cl; call [eax-0x01] 
0x10015464  # cmp eax, 0x4E77007A; add eax, 0x0000FFE0; leave; ret 
0x100153e4  # cmp eax, 0x5777007A; add eax, 0x0000FFE0; pop ebx; ret 
0x10019c56  # cmp eax, 0x00000780; jnbe 0x10019C66; push 0x00000001; mov [0x100355AC], eax; pop eax; ret 
0x1001d8f6  # cmp eax, 0x10035C80; jc 0x1001D8EA; push 0x00000001; pop eax; ret 
0x1001ac13  # cmp eax, 0xC0000092; jne 0x1001AC21; mov [esi+0x58], 0x0000008A; push [esi+0x58]; push 0x00000008; call ebx 
0x10019c6a  # cmp eax, 0x10033598; call [ebx+0x55] 
0x1001ef0f  # cmp eax, 0x100252A8; test eax, eax; jne 0x1001EF44; call edi 
0x1001444f  # cmp eax, 0x100252BC; lea esi, [eax+0x0C]; push 0x00004000; push 0x00100000; push [esi]; call edi 
0x1001544a  # cmp eax, 0x0575FFFF; or ax, ax; leave; ret 
0x100214f1  # cmp eax, 0x0775FFFF; mov eax, 0x0000FFFF; pop esi; ret 
0x10015377  # add byte [ecx+0x57], bl; jne 0x10015387; call [0x10025090] 
0x10021033  # adc byte [edx], al; adc al, ch; push cs; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x1001aac1  # push esi; push 0x00000008; push [0x10038144]; call [0x10025258] 
0x10015665  # or eax, 0xFFFFFFFF; pop edi; pop esi; pop ebx; leave; ret 
0x100206f8  # mov ecx, esi; call [edi+0x14]; push eax; mov ecx, esi; call [edi+0x08] 
0x100206f8  # mov ecx, esi; call [edi+0x14] 
0x100150d4  # aas; push [edi+eax-0x75]; ret 
0x10019e35  # inc eax; add byte [eax], al; add eax, [esi+0x10]; push 0x00001000; push eax; call [0x100252BC] 
0x10018fc6  # inc eax; add byte [eax], al; push ebx; push ecx; call esi 
0x10014459  # inc eax; add byte [eax], al; push 0x00100000; push [esi]; call edi 
0x10019caa  # inc eax; add byte [edx+0x00], ch; call ebp 
0x10018d01  # inc eax; add [eax], eax; add byte [edx+0x00], ch; push [0x10038144]; call [0x10025258] 
0x1001ccf7  # inc eax; add al, 0x3B; ret 
0x1001cd1a  # inc eax; or byte [ebx], bh; ret 
0x1001b884  # inc eax; cmp eax, esi; jc 0x1001B847; pop esi; leave; ret 
0x1001d8f5  # inc eax; cmp eax, 0x10035C80; jc 0x1001D8EA; push 0x00000001; pop eax; ret 
0x1001388a  # inc eax; inc ecx; test dl, dl; mov byte [eax], dl; jne 0x10013888; ret 
0x100236e0  # inc eax; push eax; add dl, byte [eax]; jmp [0x1002503C] 
0x1001d37e  # inc eax; push eax; push 0x00001002; push [0x10036A08]; call [0x10036A0C] 
0x10012fc3  # inc eax; push eax; mov al, 0x55; add edx, [eax]; mov [eax+0x14], 0x00000001; ret 
0x100205bf  # inc eax; push eax; call [edx+0x14] 
0x1001871d  # inc eax; push eax; push [ebp+0x18]; call [0x10025208] 
0x10018880  # inc eax; push eax; push [ebp+0x20]; call [0x10025208] 
0x10023344  # inc eax; push ecx; add dl, byte [eax]; jmp [0x10025144] 
0x100234c4  # inc eax; push edx; add dl, byte [eax]; jmp [0x10025244] 
0x10023230  # inc eax; push ebx; add dl, byte [eax]; jmp [0x1002533C] 
0x1001d363  # inc eax; push esi; push 0x00001001; push [0x100369EC]; call [0x10036A0C] 
0x1001d7bd  # inc eax; push 0x1001D7DF; mov [0x100369F0], eax; call [0x100250B8] 
0x1001d37c  # inc eax; push 0x00000040; push eax; push 0x00001002; push [0x10036A08]; call [0x10036A0C] 
0x100207d4  # inc eax; mov edx, [ecx]; push ebx; push eax; call [edx+0x10] 
0x10021d2c  # inc eax; mov eax, [0x10038284]; and [esi+0x38], 0x00000000; mov [esi+0x3C], eax; pop esi; retn 0x0008 
0x100150ed  # inc eax; cld; ret 
0x1001996b  # inc ecx; add byte [eax], al; push esi; call [0x100252E4] 
0x10010465  # inc ecx; add [eax+0x118830C2], eax; ret 
0x10023dc8  # inc ecx; add al, 0x85; sal byte [ebp+0x05], 0xB8; js 0x10023E4C; add dl, byte [eax]; ret 
0x10010535  # inc ecx; add eax, 0x0241C63A; cmp al, byte [edx]; ret 
0x1002379e  # inc ecx; or bl, al; mov eax, ecx; mov [eax], 0x10027B68; retn 0x0004 
0x1001df71  # inc ecx; or cl, byte [ebx+0x665EEC45]; mov [ecx], edx; pop ebx; leave; ret 
0x1001a565  # inc ecx; sbb byte [eax-0x18], dl; adc eax, 0x83FFFF26; les ecx, [eax]; pop ebp; retn 0x0004 
0x10021c81  # inc ecx; sbb al, 0x83; add dh, bh; mov eax, [ecx+0x1C]; mov eax, [eax]; ret 
0x10021c71  # inc ecx; sbb al, 0x8D; or al, 0x12; add [eax], ecx; retn 0x0004 
0x10021ca6  # inc ecx; and byte [ebp+0x0801120C], cl; retn 0x0004 
0x10021c7c  # inc ecx; sub al, 0xFF; add byte [ebx+0x00831C41], cl; dec byte [ebx+0x008B1C41]; ret 
0x10021c8d  # inc ecx; sub al, 0xFF; or byte [ebx+0x018B1C49], cl; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x10021cb1  # inc ecx; xor bh, bh; or byte [ebx+0x018B2049], cl; lea edx, [eax+0x02]; mov [ecx], edx; ret 
0x10010462  # inc ecx; pop esi; lea eax, [ecx+0x01]; add dl, 0x30; mov byte [ecx], dl; ret 
0x1001472d  # inc ecx; cmp edx, 0x10032E68; jl 0x10014707; pop esi; ret 
0x1001388b  # inc ecx; test dl, dl; mov byte [eax], dl; jne 0x10013888; ret 
0x10017b62  # inc ecx; mov [esi], ecx; pop esi; ret 
0x1001cd5b  # inc ecx; mov al, byte [ecx]; test al, al; jne 0x1001CD4F; pop esi; ret 
0x1001eba3  # inc ecx; lea eax, [ebp-0x3C]; push eax; push [ebp+0x20]; call [0x100250DC] 
0x100150fa  # inc ecx; clc; mov edx, [ecx-0x04]; ret 
0x100185e5  # inc ecx; call [0x100250B0] 
0x10015253  # inc edx; add byte [eax], al; add bh, al; add byte [0x5E000000], cl; ret 
0x1001939e  # inc edx; add al, 0x5F; pop esi; pop ebx; leave; ret 
0x1002012c  # inc edx; sbb eax, 0xC68B0000; pop edi; pop esi; ret 
0x10015abf  # inc edx; inc edx; test si, si; jne 0x10015AB7; pop esi; ret 
0x10015ac0  # inc edx; test si, si; jne 0x10015AB7; pop esi; ret 
0x1001b8c4  # inc edx; push 0x100271C0; call [0x100250D0] 
0x1001e644  # inc ebx; or bl, byte [ebx-0x37]; ret 
0x10013db6  # inc ebx; cmp ebx, 0x03; jl 0x10013D53; push [0x10038260]; call [0x1002528C] 
0x10022274  # inc ebx; loopne 0x10022276; dec [ebx+0x645EF44D]; mov [0x00000000], ecx; leave; ret 
0x1001836d  # inc ebx; call [edi-0x3F] 
0x100198cc  # inc ebx; push [eax+0x10]; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x10011b9b  # inc esp; add byte [eax], al; pop ecx; push eax; call [0x10025164] 
0x10011b8c  # inc esp; add byte [eax], al; pop ecx; push eax; call [0x10025168] 
0x10019f14  # inc esp; or byte [eax], cl; ret 
0x10011ade  # inc esp; and al, 0x04; cmp eax, [0x10038260]; jc 0x10011AEC; xor eax, eax; ret 
0x10015101  # inc esp; and al, 0x04; add [eax], 0x04; mov eax, [eax]; mov ax, word [eax-0x04]; ret 
0x100150e4  # inc esp; and al, 0x04; add [eax], 0x04; mov eax, [eax]; mov eax, [eax-0x04]; ret 
0x10011501  # inc esp; and al, 0x04; add eax, 0x20; ret 
0x100113be  # inc esp; and al, 0x04; add eax, 0xFFFFFFE0; ret 
0x10012fbf  # inc esp; and al, 0x04; mov [eax+0x50], 0x100355B0; mov [eax+0x14], 0x00000001; ret 
0x10018c25  # inc esp; and al, 0x04; sar eax, 1; ret 
0x10016c81  # inc esp; and al, 0x04; mul ecx; retn 0x0010 
0x1001f5cb  # inc esp; and al, 0x08; add dh, byte [eax+ebx-0x18]; ret 
0x100143d3  # inc esp; and al, 0x08; push 0x00001000; sete al; push eax; call [0x100252B8] 
0x10014790  # inc esp; and al, 0x08; add eax, 0x20; push eax; call [0x10025074]; ret 
0x10014790  # inc esp; and al, 0x08; add eax, 0x20; push eax; call [0x10025074] 
0x100147e2  # inc esp; and al, 0x08; add eax, 0x20; push eax; call [0x10025078]; ret 
0x100147e2  # inc esp; and al, 0x08; add eax, 0x20; push eax; call [0x10025078] 
0x10010336  # inc esp; and al, 0x08; mov byte [edi+0x02], 0x00; pop edi; ret 
0x10016c99  # inc esp; and al, 0x08; mul ecx; add edx, ebx; pop ebx; retn 0x0010 
0x1001142d  # inc esp; and al, 0x10; pop edi; pop esi; pop ebx; ret 
0x100141b7  # inc esp; and al, 0x34; call edi 
0x100236da  # inc esp; push eax; add dl, byte [eax]; jmp [0x10025040] 
0x1002334a  # inc esp; push ecx; add dl, byte [eax]; jmp [0x10025148] 
0x100234ca  # inc esp; push edx; add dl, byte [eax]; jmp [0x10025248] 
0x100193fa  # inc esp; add [ebx], 0x81348D10; call [0x10025258] 
0x10019dee  # inc esp; add [ebx], 0x5415FF10; push edx; add dl, byte [eax]; pop esi; ret 
0x1001441a  # inc esp; add [ebx], 0xB415FF10; push edx; add dl, byte [eax]; xor eax, eax; ret 
0x10016125  # inc esp; or [eax+edx*2], 0x507815FF; add dl, byte [eax]; ret 
0x1001a969  # inc esp; pop [0x00008D04+ecx*4]; add byte [eax], al; add esi, eax; add edi, eax; jmp [0x1001A980+edx*4] 
0x100205b6  # inc ebp; add byte [eax-0x73], dl; inc ebp; call [eax-0x73] 
0x10014f62  # inc ebp; add [eax], eax; add byte [ebx-0x3C09EF3C], al; or byte [edi+edx-0x0A], dh; ret 
0x1001d911  # inc ebp; or byte [0x000003FF], ah; push 0x00000001; or ah, 0x04; push eax; call [0x10036A0C] 
0x10022e3a  # inc ebp; or byte [ebx], bh; ret 
0x100170f3  # inc ebp; or byte [eax-0x3A], dl; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x10020e02  # inc ebp; or byte [ecx-0x48], bl; or ecx, [esi]; add dl, byte [eax]; ret 
0x100154af  # inc ebp; or byte [esp+eax+0x66], dh; mov eax, [ebp-0x02]; leave; ret 
0x10012603  # inc ebp; or byte [esi+ecx*2-0x73], dh; test [edi+edi*8-0x01], ecx; call [eax-0x01] 
0x10017616  # inc ebp; or byte [ebx-0x7EBCF339], al; call [eax] 
0x10022f38  # inc ebp; or byte [ebx+0x0675FFF8], al; or ax, 0x0000FFFF; leave; ret 
0x1001ba1f  # inc ebp; or byte [ebp+0x5D0275C0], al; ret 
0x1002087f  # inc ebp; or byte [ebx+0x5FA5F3F8], cl; pop esi; leave; retn 0x0010 
0x100170f0  # inc ebp; or byte [ebp-0x39AFF7BB], cl; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x10015486  # inc ebp; or cl, cl; ret 
0x1002061f  # inc ebp; or bl, ch; add eax, [ebx+0x5E5FFFC8]; pop ebx; leave; retn 0x0004 
0x10017060  # inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x2E; call [0x100252D0] 
0x100170f7  # inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x100113b6  # inc ebp; or ah, byte [ebx]; inc ebp; or al, 0xC9; ret 
0x10017064  # inc ebp; or ch, byte [esi]; call [0x100252D0] 
0x1001d3c7  # inc ebp; or al, 0x03; ret 
0x1001be21  # inc ebp; or al, 0x2B; rcr [ebx+0x5E], 0xFFFFFFC9; ret 
0x1001c0db  # inc ebp; or al, 0x50; push ebx; call [0x1002507C] 
0x10016368  # inc ebp; or al, 0x50; call [0x100252CC]; test eax, eax; jne 0x10016387; call [0x100250B0] 
0x10016368  # inc ebp; or al, 0x50; call [0x100252CC] 
0x10016a36  # inc ebp; or al, 0x5E; sub eax, ecx; pop ebx; leave; ret 
0x1001ba14  # inc ebp; or al, 0x5F; pop esi; pop ebx; pop ebp; ret 
0x10016022  # inc ebp; or al, 0x80; je 0x1001602A; or bl, 0x10; push [ebp+0x08]; call [0x10025180] 
0x10017524  # inc ebp; or al, 0x83; ret 
0x10013a59  # inc ebp; or al, 0x83; les ebp, [esi+ebx*2]; leave; ret 
0x10013942  # inc ebp; or al, 0x83; les esi, [eax]; pop esi; leave; ret 
0x100113b9  # inc ebp; or al, 0xC9; ret 
0x1001c396  # inc ebp; adc byte [eax-0x01], dl; jne 0x1001C380; call [0x1002507C]; push [ebp-0x1C]; call esi 
0x1001c396  # inc ebp; adc byte [eax-0x01], dl; jne 0x1001C380; call [0x1002507C] 
0x10022fd7  # inc ebp; adc byte [edi+0x5E], bl; pop ebx; pop ebp; ret 
0x10012564  # inc ebp; adc byte [edi+0x5E], bl; pop ebx; leave; ret 
0x1001506d  # inc ebp; adc byte [ebp+0x05], dh; or [eax], 0xFFFFFFFF; pop ebp; ret 
0x10016e46  # inc ebp; adc byte [ebp+0x016AFF45], cl; push eax; mov eax, [edi]; push [eax+esi]; call [0x10025174] 
0x1001f997  # inc ebp; adc al, ch; retn 0xFED8 
0x1001c3bd  # inc ebp; adc bh, bh; jne 0x1001C3AA; call esi 
0x100183c9  # inc ebp; adc al, 0xF6; ret 
0x10022e4b  # inc ebp; sbb byte [ebx], bh; ret 
0x1001fbef  # inc ebp; sbb byte [esi+0x56], dl; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001fad8  # inc ebp; sbb byte [edi+0x57], dl; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x10022e18  # inc ebp; sbb byte [edi+0x5E], bl; pop ebx; pop ebp; ret 
0x100186d2  # inc ebp; sbb al, 0x3B; ret 
0x10018714  # inc ebp; and bh, dh; fcomp [ebx]; rol byte [ebx+0x504008E0], 0xFF; jne 0x1001873A; call [0x10025208] 
0x10018877  # inc ebp; and al, 0xF7; fcomp [ebx]; rol byte [ebx+0x504008E0], 0xFF; jne 0x100188A5; call [0x10025208] 
0x1001a4dd  # inc ebp; push esi; push ebp; lea ebp, [ebx+0x10]; call [edi+ecx*4+0x04] 
0x1001d361  # inc ebp; push 0x00000040; push esi; push 0x00001001; push [0x100369EC]; call [0x10036A0C] 
0x10011959  # inc ebp; mov al, 0x66; mov [esi+0x08], 0x8B500001; add edi, edi; xor al, 0x38; call [0x10025178] 
0x10011a66  # inc ebp; mov ah, 0x50; call [0x10025234] 
0x10014c93  # inc ebp; mov ah, 0x57; push eax; call [0x10032D28] 
0x10014c8c  # inc ebp; mov eax, 0x50C3BE0F; lea eax, [ebp-0x4C]; push edi; push eax; call [0x10032D28] 
0x1001df19  # inc ebp; rcl byte [eax-0x18], 0xA4; adc al, 0x00; add byte [ebx+0x5D8BC055], cl; retn 0x758B 
0x1001491b  # inc ebp; les ecx, [edi]; xchg ecx, ebp; push es; add byte [eax], al; jmp [0x10015025+eax*4] 
0x1001eba5  # inc ebp; les edx, [eax-0x01]; jne 0x1001EBCB; call [0x100250DC] 
0x1001d09c  # inc ebp; fcom qword [eax-0x01]; xor eax, 0x100368AC; call [0x100250DC] 
0x100188ae  # inc ebp; fadd qword [ebx-0x140003B3]; adc ebp, [edx+0x01]; pop eax; ret 
0x1001ec50  # inc ebp; fadd qword [ebx-0x140003B3]; push ss; push 0x00000001; pop eax; ret 
0x10018729  # inc ebp; loopne 0x10018767; ret 
0x1001ec31  # inc ebp; in al, 0x3B; ret 
0x100119ae  # inc ebp; in al, 0x50; lea eax, [ebp-0x0C]; push eax; call [0x10025230] 
0x1001c3ba  # inc ebp; in al, 0x89; inc ebp; adc bh, bh; jne 0x1001C3AA; call esi 
0x1001b711  # inc ebp; in al, dx; push esi; push eax; push [0x10036EDC]; call [0x100250DC] 
0x1001048f  # inc ebp; in al, dx; push edi; push eax; call [0x10025244] 
0x10010513  # inc ebp; lock push edi; push eax; call [0x10025244] 
0x10018656  # inc ebp; lock pop edi; pop esi; pop ebx; leave; ret 
0x10011a62  # inc ebp; hlt; push eax; lea eax, [ebp-0x4C]; push eax; call [0x10025234] 
0x100119fd  # inc ebp; hlt; push eax; lea eax, [ebp-0x44]; push eax; call [0x10025234] 
0x10011998  # inc ebp; hlt; push eax; lea eax, [ebp-0x3C]; push eax; call [0x10025234] 
0x100119b2  # inc ebp; hlt; push eax; call [0x10025230] 
0x100125df  # inc ebp; clc; push eax; call [0x1002525C] 
0x1001728e  # inc ebp; clc; pop edi; pop esi; leave; ret 
0x100245b9  # inc ebp; clc; jne 0x100245D4; call [0x100250B0] 
0x1001a09a  # inc ebp; clc; call [0x100252E0] 
0x10013190  # inc ebp; cld; add [eax], eax; add byte [eax], al; call eax 
0x10016364  # inc ebp; cld; push eax; lea eax, [ebp+0x0C]; push eax; call [0x100252CC] 
0x100217a6  # inc ebp; cld; push eax; lea eax, [esi+0x40]; push eax; call [edx+0x14] 
0x1001b294  # inc ebp; cld; pop edi; pop esi; leave; ret 
0x100203b7  # inc ebp; cld; pop edi; leave; retn 0x0008 
0x100154b5  # inc ebp; dec cl; ret 
0x100205ba  # inc ebp; call [eax-0x73]; inc esi; inc eax; push eax; call [edx+0x14] 
0x100205ba  # inc ebp; call [eax-0x73] 
0x10015e17  # inc esi; add al, 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x1001bfeb  # inc esi; add al, 0x5E; ret 
0x100125dc  # inc esi; push es; lea eax, [ebp-0x08]; push eax; call [0x1002525C] 
0x1001195d  # inc esi; or byte [ecx], al; add byte [eax-0x75], dl; add edi, edi; xor al, 0x38; call [0x10025178] 
0x10015df8  # inc esi; or al, 0x50; call [0x10025090] 
0x10017b72  # inc esi; or al, 0x83; add al, 0x00; or eax, 0xFFFFFFFF; pop esi; ret 
0x100243d0  # inc esi; or al, 0x83; add al, 0x00; mov eax, 0x0000FFFF; pop esi; ret 
0x1001521d  # inc esi; or al, 0x83; enter 0x5EFF, 0x5B; pop ebp; ret 
0x10019d5a  # inc esi; adc byte [ebx], al; ret 
0x10017e8d  # inc esi; adc byte [ebx], cl; add byte [eax], al; add bl, ch; ret 
0x1001944c  # inc esi; adc byte [ebx-0x397400F8], al; pop edi; pop esi; ret 
0x100144aa  # inc esi; adc byte [ebp+0x680E74C0], al; add byte [eax+0x006A0000], al; push eax; call [0x100252BC] 
0x10022381  # inc esi; sbb byte [ebx+0x5E5FF44D], cl; pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10015d8e  # inc esi; sbb al, 0x85; sal byte [ebx+ecx+0x50], 0xE8; push es; ret 
0x100205be  # inc esi; inc eax; push eax; call [edx+0x14] 
0x100207d3  # inc esi; inc eax; mov edx, [ecx]; push ebx; push eax; call [edx+0x10] 
0x1001383e  # inc esi; test cl, cl; jne 0x10013836; pop esi; ret 
0x1001a749  # inc edi; add [ebx-0x387CFD3A], eax; add al, byte [ebx-0x598DF707]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001033a  # inc edi; add al, byte [eax]; pop edi; ret 
0x1001a723  # inc edi; add al, byte [ebx-0x387CFC3A]; add eax, [ebx-0x338DF707]; rep movsd; jmp [0x1001A7E8+edx*4] 
0x10020391  # inc edi; sbb al, 0x03; fiadd word [ecx]; xor bl, ch; adc eax, 0xCF8B078B; call [eax+0x14] 
0x1001db35  # inc edi; cmp eax, 0x0B; ja 0x1001DDB6; jmp [0x1001DF7D+eax*4] 
0x1001a76a  # inc edi; cmp ecx, 0x08; jc 0x1001A6FC; rep movsd; jmp [0x1001A7E8+edx*4] 
0x1001613e  # inc edi; sar bh, 0xFF; add esp, 0x0C; ret 
0x10011771  # dec eax; add byte [eax], al; add esp, 0x10; push eax; call [0x10025154] 
0x1001188d  # dec eax; add byte [eax], al; mov eax, [ebx]; pop ecx; push [eax+edi]; call [0x10025180] 
0x10017c3e  # dec eax; add al, 0x5B; leave; ret 
0x100138d0  # dec eax; add al, 0xC9; ret 
0x10019dea  # dec eax; add al, 0xFF; xor eax, 0x10038144; call [0x10025254]; pop esi; ret 
0x10019dea  # dec eax; add al, 0xFF; xor eax, 0x10038144; call [0x10025254] 
0x1001b4a4  # dec eax; or byte [edi+0x5E], bl; pop ebx; leave; ret 
0x10015c5d  # dec eax; adc byte [esi+0x5B], bl; leave; ret 
0x1001427a  # dec eax; sbb cl, byte [eax+0x1B408A0E]; mov byte [esi+0x01], al; pop esi; ret 
0x100218ed  # dec eax; cmp eax, ecx; jnc 0x100218F7; mov ax, word [eax]; pop esi; ret 
0x100236d4  # dec eax; push eax; add dl, byte [eax]; jmp [0x10025044] 
0x10023350  # dec eax; push ecx; add dl, byte [eax]; jmp [0x1002514C] 
0x10016b84  # dec eax; push edx; add dl, byte [eax]; je 0x10016B98; push esi; call ebx 
0x100113f9  # dec eax; push edx; add dl, byte [eax]; je 0x1001140D; push esi; call edi 
0x100154ea  # dec eax; push edx; add dl, byte [eax]; je 0x10015504; push esi; call edi 
0x100234d0  # dec eax; push edx; add dl, byte [eax]; jmp [0x1002524C] 
0x1002364a  # dec eax; push ebx; add dl, byte [eax]; jmp [0x1002534C] 
0x1001b6c0  # dec eax; je 0x1001B6C6; xor eax, eax; ret 
0x10018c2f  # dec eax; add [ebx], 0x03F88310; jne 0x10018C3E; mov eax, [0x10037124]; ret 
0x10013d74  # dec eax; neg eax; sbb eax, eax; add eax, 0xFFFFFFF5; push eax; call [0x10025290] 
0x10018c3f  # dec eax; neg eax; sbb eax, eax; not eax; and eax, [0x100355AC]; ret 
0x10012eed  # dec ecx; or byte [ebx-0x35FCF1F4], cl; add eax, ecx; pop esi; ret 
0x10021c92  # dec ecx; sbb al, 0x8B; add [ebp+0x11890250], ecx; ret 
0x10021cb6  # dec ecx; and byte [ebx+0x02508D01], cl; mov [ecx], edx; ret 
0x10016b6d  # dec ecx; push ebx; push esi; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001432c  # dec ecx; lea eax, [ebp-0x0000019C]; push 0x00000104; push eax; push ebx; call [0x10025298] 
0x10024691  # dec ecx; mov ecx, 0x5959FFFF; ret 
0x1001afcf  # dec edx; jne 0x1001AFC7; pop esi; ret 
0x10011a60  # dec ebx; lea eax, [ebp-0x0C]; push eax; lea eax, [ebp-0x4C]; push eax; call [0x10025234] 
0x1001da68  # dec ebx; call [ecx+0x50] 
0x10019679  # dec esp; pop es; add al, 0x83; jmp [eax] 
0x10016c7b  # dec esp; and al, 0x0C; jne 0x10016C89; mov eax, [esp+0x04]; mul ecx; retn 0x0010 
0x10014203  # dec esp; cmp edi, ebx; jne 0x10014214; call [0x100252A4] 
0x100236ce  # dec esp; push eax; add dl, byte [eax]; jmp [0x10025048] 
0x10023356  # dec esp; push ecx; add dl, byte [eax]; jmp [0x10025150] 
0x100234d6  # dec esp; push edx; add dl, byte [eax]; jmp [0x10025250] 
0x10023650  # dec esp; push ebx; add dl, byte [eax]; jmp [0x10025350] 
0x1001ffee  # dec esp; bound eax, [ebx]; adc byte [ebp-0x6BF003B3], cl; ret 
0x10016be0  # dec esp; add eax, 0x20; leave; ret 
0x100154d5  # dec esp; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001133f  # dec ebp; add byte [eax], al; add esp, 0x20; pop edi; pop esi; ret 
0x1001be1d  # dec ebp; or byte [edi], cl; mov bh, 0x45; or al, 0x2B; rcr [ebx+0x5E], 0xFFFFFFC9; ret 
0x1001bacd  # dec ebp; or al, 0x0F; mov bh, 0xC0; and eax, ecx; leave; ret 
0x1001f438  # dec ebp; or al, 0x75; ret 
0x1001b1eb  # dec ebp; or al, 0x89; xor [edi+0x5E], ebx; pop ebx; leave; ret 
0x100226cb  # dec ebp; in al, 0xFE; ret 
0x10021fcd  # dec ebp; hlt; pop esi; mov [fs:0x00000000], ecx; leave; ret 
0x100225af  # dec ebp; hlt; mov [fs:0x00000000], ecx; leave; ret 
0x100245a9  # dec ebp; cld; push ecx; push [ebp-0x08]; push eax; call [0x10025160] 
0x100138cd  # dec ebp; cld; mov [eax+0x04], ecx; leave; ret 
0x1001f0a2  # dec ebp; call [0x100250B0] 
0x10019de7  # dec esi; add al, 0x89; dec eax; add al, 0xFF; xor eax, 0x10038144; call [0x10025254] 
0x10015468  # dec esi; add eax, 0x0000FFE0; leave; ret 
0x10023916  # dec esi; or al, 0x83; les ecx, [esi+esi*8]; ret 
0x100206e7  # dec esi; sub al, 0x8B; or [ebx], eax; enter 0xC13B, 0x73; add eax, 0x5E00B60F; ret 
0x10017cae  # dec esi; xor edx, edx; mov eax, esi; pop esi; pop ebx; retn 0x0010 
0x10012606  # dec esi; lea eax, [ebp-0x000000B4]; push eax; call [0x10025198] 
0x1001804e  # dec esi; mov eax, [0xC483FFFF]; or al, 0x3B; ret 
0x10012199  # dec edi; add byte [eax], al; add esp, 0x10; ret 
0x1001797b  # dec edi; pop ecx; jne 0x1001796B; pop esi; pop edi; ret 
0x100150a3  # dec edi; test eax, eax; jnle 0x1001508B; pop edi; pop esi; ret 
0x10022180  # dec edi; loope 0x10022182; inc [ebp-0x74F78B40]; adc byte [edx+0x01], ch; mov ecx, eax; call [edx] 
0x1001ac49  # push eax; add dl, byte [eax]; pop esi; pop ebx; leave; ret 
0x1001539b  # push eax; add dl, byte [eax]; pop esi; pop ebp; ret 
0x10016107  # push eax; add dl, byte [eax]; pop edi; pop esi; pop ebx; ret 
0x10021e49  # push eax; add dl, byte [eax]; cmp eax, 0x02; jne 0x10021E5C; push 0x10036E50; call [0x1002508C] 
0x1001b67e  # push eax; add dl, byte [eax]; cmp eax, 0xFFFFFFFD; jne 0x1001B696; mov [0x10036998], 0x00000001; jmp [0x100250D8] 
0x1001f5ad  # push eax; add dl, byte [eax]; cmp eax, 0xFFFFFFFF; jne 0x1001F5C6; call [0x100250B0] 
0x10021dec  # push eax; add dl, byte [eax]; test eax, eax; jne 0x10021E0D; push ebx; call [0x10025090] 
0x10013030  # push eax; add dl, byte [eax]; mov eax, esi; pop edi; pop esi; ret 
0x1001f7c8  # push eax; add dl, byte [eax]; mov esi, eax; call [0x100250B0] 
0x1001c392  # push eax; add dl, byte [eax]; lea eax, [ebp+0x10]; push eax; push [ebp-0x1C]; call [0x1002507C] 
0x1001d871  # push eax; add dl, byte [eax]; mov [0x10036A08], eax; mov [0x100369EC], eax; ret 
0x10014777  # push eax; add dl, byte [eax]; ret 
0x1001d6d7  # push eax; add dl, byte [eax]; test byte [0x10036A04], 0x04; jne 0x1001D6EA; and [0x10036A04], 0x00000000; ret 
0x10015e13  # push eax; add dl, byte [eax]; test byte [esi+0x04], 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x100236b7  # push eax; add dl, byte [eax]; jmp [0x10025000] 
0x100232df  # push eax; add dl, byte [eax]; jmp [0x10025100] 
0x1002369f  # push eax; add dl, byte [eax]; jmp [0x10025004] 
0x10023663  # push eax; add dl, byte [eax]; jmp [0x1002500C]
0x10023669  # push eax; add dl, byte [eax]; jmp [0x10025010] 
0x1002366f  # push eax; add dl, byte [eax]; jmp [0x10025014] 
0x10023675  # push eax; add dl, byte [eax]; jmp [0x10025018] 
0x1002367b  # push eax; add dl, byte [eax]; jmp [0x1002501C] 
0x1002327f  # push eax; add dl, byte [eax]; jmp [0x1002531C] 
0x10023681  # push eax; add dl, byte [eax]; jmp [0x10025020] 
0x10023687  # push eax; add dl, byte [eax]; jmp [0x10025024] 
0x1002368d  # push eax; add dl, byte [eax]; jmp [0x10025028] 
0x10023693  # push eax; add dl, byte [eax]; jmp [0x1002502C] 
0x100236f3  # push eax; add dl, byte [eax]; jmp [0x10025030] 
0x100236ed  # push eax; add dl, byte [eax]; jmp [0x10025034] 
0x100236f9  # push eax; add dl, byte [eax]; jmp [0x10025334] 
0x100236e7  # push eax; add dl, byte [eax]; jmp [0x10025038] 
0x100236e1  # push eax; add dl, byte [eax]; jmp [0x1002503C] 
0x100236db  # push eax; add dl, byte [eax]; jmp [0x10025040] 
0x100236d5  # push eax; add dl, byte [eax]; jmp [0x10025044] 
0x100236cf  # push eax; add dl, byte [eax]; jmp [0x10025048] 
0x100236c9  # push eax; add dl, byte [eax]; jmp [0x1002504C] 
0x100236c3  # push eax; add dl, byte [eax]; jmp [0x10025050] 
0x100236bd  # push eax; add dl, byte [eax]; jmp [0x10025054] 
0x100236a5  # push eax; add dl, byte [eax]; jmp [0x10025058] 
0x1002362d  # push eax; add dl, byte [eax]; jmp [0x10025358] 
0x100236b1  # push eax; add dl, byte [eax]; jmp [0x1002505C] 
0x100236ab  # push eax; add dl, byte [eax]; jmp [0x10025060] 
0x10023699  # push eax; add dl, byte [eax]; jmp [0x10025064] 
0x10023627  # push eax; add dl, byte [eax]; jmp [0x10025098] 
0x10023621  # push eax; add dl, byte [eax]; jmp [0x1002509C] 
0x1002361b  # push eax; add dl, byte [eax]; jmp [0x100250A0] 
0x10023615  # push eax; add dl, byte [eax]; jmp [0x100250A4] 
0x1002360f  # push eax; add dl, byte [eax]; jmp [0x100250A8] 
0x10023603  # push eax; add dl, byte [eax]; jmp [0x100250B8] 
0x100235fd  # push eax; add dl, byte [eax]; jmp [0x100250BC] 
0x100235f7  # push eax; add dl, byte [eax]; jmp [0x100250C0] 
0x100235f1  # push eax; add dl, byte [eax]; jmp [0x100250C4] 
0x100235eb  # push eax; add dl, byte [eax]; jmp [0x100250C8] 
0x100235e5  # push eax; add dl, byte [eax]; jmp [0x100250CC] 
0x100235df  # push eax; add dl, byte [eax]; jmp [0x100250D0] 
0x100235d9  # push eax; add dl, byte [eax]; jmp [0x100250D4] 
0x100235d3  # push eax; add dl, byte [eax]; jmp [0x100250D8] 
0x100235cd  # push eax; add dl, byte [eax]; jmp [0x100250DC] 
0x100235c7  # push eax; add dl, byte [eax]; jmp [0x100250E0] 
0x100232c1  # push eax; add dl, byte [eax]; jmp [0x100250EC] 
0x100232c7  # push eax; add dl, byte [eax]; jmp [0x100250F0] 
0x100232cd  # push eax; add dl, byte [eax]; jmp [0x100250F4] 
0x100232d3  # push eax; add dl, byte [eax]; jmp [0x100250F8] 
0x100232d9  # push eax; add dl, byte [eax]; jmp [0x100250FC] 
0x10012fd6  # push eax; add dl, byte [eax]; push [0x10032D20]; mov edi, eax; call [0x10025270] 
0x100152af  # push eax; add dl, byte [eax]; push [0x1003322C]; call esi; push [0x1003321C]; call esi 
0x100152af  # push eax; add dl, byte [eax]; push [0x1003322C]; call esi 
0x1001c39f  # push eax; add dl, byte [eax]; push [ebp-0x1C]; call esi 
0x1001c0f0  # push eax; add dl, byte [eax]; call esi 
0x10019548  # push eax; or byte [ebx+0x5B5E5FC3], cl; leave; ret 
0x10020333  # push eax; adc byte [ebx+0x0475FFF8], al; or eax, eax; pop esi; ret 
0x100236c8  # push eax; push eax; add dl, byte [eax]; jmp [0x1002504C] 
0x1002335c  # push eax; push ecx; add dl, byte [eax]; jmp [0x10025154] 
0x100234dc  # push eax; push edx; add dl, byte [eax]; jmp [0x10025254] 
0x10023656  # push eax; push ebx; add dl, byte [eax]; jmp [0x10025364] 
0x1001eadc  # push eax; push ebx; push ebx; call [0x100250C8] 
0x1001eaf9  # push eax; push ebx; push ebx; call [0x100250CC] 
0x1001c0dd  # push eax; push ebx; call [0x1002507C] 
0x10014338  # push eax; push ebx; call [0x10025298] 
0x1001b503  # push eax; push ebx; call [0x100250DC] 
0x100155b6  # push eax; push ebp; push 0x00000001; call ebx 
0x1001bb1f  # push eax; push esi; push eax; push edi; push edi; call [0x100250C8] 
0x1001bb9b  # push eax; push esi; push eax; push edi; push edi; call [0x100250CC] 
0x100141b2  # push eax; push esi; push ebx; push ebx; mov [esp+0x34], eax; call edi 
0x100186ad  # push eax; push esi; push 0x10027130; push esi; push ebx; call [0x100251F8] 
0x1001e92c  # push eax; push esi; push 0x10027130; push esi; push edi; call [0x100251F8] 
0x100244a9  # push eax; push esi; push 0x00000009; push [0x100368AC]; call [0x10025208] 
0x1001a097  # push eax; push esi; mov [ebp-0x08], eax; call [0x100252E0] 
0x1001d4bd  # push eax; push esi; call [0x10036A0C] 
0x10018785  # push eax; push esi; push [ebp+0x08]; call [0x100251FC] 
0x1001eada  # push eax; push edi; push eax; push ebx; push ebx; call [0x100250C8] 
0x1001eaf7  # push eax; push edi; push eax; push ebx; push ebx; call [0x100250CC] 
0x1001bb21  # push eax; push edi; push edi; call [0x100250C8] 
0x1001bb9d  # push eax; push edi; push edi; call [0x100250CC] 
0x1001be48  # push eax; push edi; push 0x00000001; call ebx 
0x1001d37f  # push eax; push 0x00001002; push [0x10036A08]; call [0x10036A0C] 
0x10017075  # push eax; push 0x00000104; call [0x10025220] 
0x1001d8c2  # push eax; push 0x00001004; push [0x10036A08]; call [0x10036A0C] 
0x1001ba58  # push eax; push 0x00000220; push [0x100368AC]; call [0x1002520C] 
0x1001b8ec  # push eax; push 0x100271A4; push edi; call esi 
0x100142d4  # push eax; push 0x100269A8; call [0x100252AC] 
0x10014576  # push eax; push 0x00000000; call [0x10025298] 
0x100122bc  # push eax; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x10015f9a  # push eax; push 0xFFFFFFF6; call [0x100252C8] 
0x1001be66  # push eax; push 0xFFFFFFFF; push [esi]; push edi; push 0x00000001; call ebx 
0x10021e67  # push eax; outsb; add edx, [eax]; call [0x10025078]; ret 
0x10021e67  # push eax; outsb; add edx, [eax]; call [0x10025078] 
0x10021e52  # push eax; outsb; add edx, [eax]; call [0x1002508C]; ret 
0x10021e52  # push eax; outsb; add edx, [eax]; call [0x1002508C] 
0x1001705b  # push eax; mov byte [ebp+0x08], bl; mov byte [ebp+0x09], 0x3A; mov byte [ebp+0x0A], 0x2E; call [0x100252D0] 
0x10018593  # push eax; mov eax, [ebx]; push [eax+esi]; call [0x1002516C] 
0x10011961  # push eax; mov eax, [ebx]; push [eax+edi]; call [0x10025178] 
0x10016e4d  # push eax; mov eax, [edi]; push [eax+esi]; call [0x10025174] 
0x10016d79  # push eax; mov eax, [edi]; push [ebp+0x10]; push edx; push [eax+esi]; call [0x10025174] 
0x100206fe  # push eax; mov ecx, esi; call [edi+0x08]; pop edi; pop esi; ret 
0x100206fe  # push eax; mov ecx, esi; call [edi+0x08] 
0x100215f4  # push eax; mov ecx, edi; call [edx+0x04] 
0x10016366  # push eax; lea eax, [ebp+0x0C]; push eax; call [0x100252CC] 
0x10011a64  # push eax; lea eax, [ebp-0x4C]; push eax; call [0x10025234] 
0x10014c91  # push eax; lea eax, [ebp-0x4C]; push edi; push eax; call [0x10032D28] 
0x100119ff  # push eax; lea eax, [ebp-0x44]; push eax; call [0x10025234] 
0x1001199a  # push eax; lea eax, [ebp-0x3C]; push eax; call [0x10025234] 
0x10011a72  # push eax; lea eax, [ebp-0x1C]; push eax; lea eax, [ebp-0x0C]; push eax; call [0x10025230] 
0x100119b0  # push eax; lea eax, [ebp-0x0C]; push eax; call [0x10025230] 
0x10016362  # push eax; lea eax, [ebp-0x04]; push eax; lea eax, [ebp+0x0C]; push eax; call [0x100252CC] 
0x100217a4  # push eax; lea eax, [ebp-0x04]; push eax; lea eax, [esi+0x40]; push eax; call [edx+0x14] 
0x100205b8  # push eax; lea eax, [ebp-0x01]; push eax; lea eax, [esi+0x40]; push eax; call [edx+0x14] 
0x100205bc  # push eax; lea eax, [esi+0x40]; push eax; call [edx+0x14] 
0x100207d1  # push eax; lea eax, [esi+0x40]; mov edx, [ecx]; push ebx; push eax; call [edx+0x10] 
0x10012fc4  # push eax; mov al, 0x55; add edx, [eax]; mov [eax+0x14], 0x00000001; ret 
0x100170f5  # push eax; mov byte [ebp+0x09], 0x3A; mov byte [ebp+0x0A], 0x5C; call [0x100252D4] 
0x1001429a  # push eax; mov [ebp-0x00000098], 0x00000094; call [0x100252B0] 
0x10022e9e  # push eax; call [0x10025208] 
0x1001d91d  # push eax; call [0x10036A0C] 
0x10014c96  # push eax; call [0x10032D28] 
0x100162ed  # push eax; call [0x10025228]; test eax, eax; jne 0x10016302; call [0x100250B0] 
0x100162ed  # push eax; call [0x10025228] 
0x10010492  # push eax; call [0x10025244] 
0x100125e1  # push eax; call [0x1002525C] 
0x100245af  # push eax; call [0x10025160]; cmp eax, edi; mov [ebp-0x08], eax; jne 0x100245D4; call [0x100250B0] 
0x10016f70  # push eax; call [0x10025160]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x10016F86; call [0x100250B0] 
0x10011b9f  # push eax; call [0x10025164]; test eax, eax; jne 0x10011BB2; call [0x100250B0] 
0x10011b9f  # push eax; call [0x10025164] 
0x10011b90  # push eax; call [0x10025168] 
0x10014655  # push eax; call [0x1002516C]; pop esi; leave; ret 
0x10014655  # push eax; call [0x1002516C] 
0x10012faf  # push eax; call [0x1002526C]; or [0x10032D20], 0xFFFFFFFF; ret 
0x10012faf  # push eax; call [0x1002526C] 
0x1001a5ff  # push eax; call [0x10025170]; test eax, eax; jne 0x1001A614; call [0x100250B0] 
0x1001304f  # push eax; call [0x10025270] 
0x10016103  # push eax; call [0x10025074]; pop edi; pop esi; pop ebx; ret 
0x10014773  # push eax; call [0x10025074]; ret 
0x100147c5  # push eax; call [0x10025078]; ret 
0x100147c5  # push eax; call [0x10025078] 
0x1001329f  # push eax; call [0x10025280] 
0x1001b98d  # push eax; call [0x1002508C] 
0x100137d6  # push eax; call [0x10025190]; test eax, eax; je 0x100137E6; push 0x00000000; call eax 
0x10013d7c  # push eax; call [0x10025290] 
0x10013c6e  # push eax; call [0x10025294] 
0x1001d97f  # push eax; call [0x100252B0] 
0x100143de  # push eax; call [0x100252B8] 
0x100144b7  # push eax; call [0x100252BC] 
0x1001d318  # push eax; call [0x100250C0] 
0x1001636a  # push eax; call [0x100252CC]; test eax, eax; jne 0x10016387; call [0x100250B0] 
0x1001636a  # push eax; call [0x100252CC] 
0x100186e9  # push eax; call [0x100251F8] 
0x100193bf  # push eax; push [0x10037120]; push edi; push [0x10038144]; call [0x10025284] 
0x1001992f  # push eax; push [0x10037120]; call [0x100252E4] 
0x1001d09e  # push eax; push [0x100368AC]; call [0x100250DC] 
0x1001b714  # push eax; push [0x10036EDC]; call [0x100250DC] 
0x1001464a  # push eax; push [esi]; push 0xFFFFFFF4; call [0x10025290]; push eax; call [0x1002516C] 
0x1001464a  # push eax; push [esi]; push 0xFFFFFFF4; call [0x10025290] 
0x100207d8  # push eax; call [edx+0x10] 
0x100205c0  # push eax; call [edx+0x14] 
0x100141d4  # push eax; push [esp+0x24]; push esi; push ebx; push ebx; call edi 
0x1001871e  # push eax; push [ebp+0x18]; call [0x10025208] 
0x10018881  # push eax; push [ebp+0x20]; call [0x10025208] 
0x1001eba7  # push eax; push [ebp+0x20]; call [0x100250DC] 
0x1001c398  # push eax; push [ebp-0x1C]; call [0x1002507C]; push [ebp-0x1C]; call esi 
0x1001c398  # push eax; push [ebp-0x1C]; call [0x1002507C] 
0x10012751  # push eax; call ecx 
0x10015307  # push eax; call edi 
0x100245b3  # push ecx; add dl, byte [eax]; cmp eax, edi; mov [ebp-0x08], eax; jne 0x100245D4; call [0x100250B0] 
0x1001329c  # push ecx; add dl, byte [eax]; push eax; call [0x10025280] 
0x10014659  # push ecx; add dl, byte [eax]; pop esi; leave; ret 
0x1001b8d9  # push ecx; add dl, byte [eax]; push 0x100271B4; push edi; call esi 
0x100137da  # push ecx; add dl, byte [eax]; test eax, eax; je 0x100137E6; push 0x00000000; call eax 
0x10016e56  # push ecx; add dl, byte [eax]; test eax, eax; jne 0x10016E67; call [0x100250B0] 
0x10016030  # push ecx; add dl, byte [eax]; test eax, eax; jne 0x10016046; call [0x100250B0] 
0x1001196a  # push ecx; add dl, byte [eax]; test eax, eax; jne 0x10011983; call [0x100250B0] 
0x10016d86  # push ecx; add dl, byte [eax]; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x1001c34d  # push ecx; add dl, byte [eax]; mov esi, eax; call [0x100250B0] 
0x10016f74  # push ecx; add dl, byte [eax]; mov edi, eax; cmp edi, 0xFFFFFFFF; jne 0x10016F86; call [0x100250B0] 
0x1002345f  # push ecx; add dl, byte [eax]; jmp [0x10025200] 
0x100232e5  # push ecx; add dl, byte [eax]; jmp [0x10025104] 
0x100232eb  # push ecx; add dl, byte [eax]; jmp [0x10025108] 
0x100232f1  # push ecx; add dl, byte [eax]; jmp [0x1002510C] 
0x100232f7  # push ecx; add dl, byte [eax]; jmp [0x10025110] 
0x100232fd  # push ecx; add dl, byte [eax]; jmp [0x10025114] 
0x10023303  # push ecx; add dl, byte [eax]; jmp [0x10025118] 
0x1002330f  # push ecx; add dl, byte [eax]; jmp [0x10025120] 
0x10023315  # push ecx; add dl, byte [eax]; jmp [0x10025124] 
0x1002331b  # push ecx; add dl, byte [eax]; jmp [0x10025128] 
0x10023321  # push ecx; add dl, byte [eax]; jmp [0x1002512C] 
0x10023327  # push ecx; add dl, byte [eax]; jmp [0x10025130] 
0x1002332d  # push ecx; add dl, byte [eax]; jmp [0x10025134] 
0x10023333  # push ecx; add dl, byte [eax]; jmp [0x10025138] 
0x10023339  # push ecx; add dl, byte [eax]; jmp [0x1002513C] 
0x1002333f  # push ecx; add dl, byte [eax]; jmp [0x10025140] 
0x10023345  # push ecx; add dl, byte [eax]; jmp [0x10025144] 
0x1002334b  # push ecx; add dl, byte [eax]; jmp [0x10025148] 
0x10023351  # push ecx; add dl, byte [eax]; jmp [0x1002514C] 
0x10023357  # push ecx; add dl, byte [eax]; jmp [0x10025150] 
0x1002335d  # push ecx; add dl, byte [eax]; jmp [0x10025154] 
0x10023363  # push ecx; add dl, byte [eax]; jmp [0x10025158] 
0x10023369  # push ecx; add dl, byte [eax]; jmp [0x1002515C] 
0x1002336f  # push ecx; add dl, byte [eax]; jmp [0x10025160] 
0x10023375  # push ecx; add dl, byte [eax]; jmp [0x10025164] 
0x1002337b  # push ecx; add dl, byte [eax]; jmp [0x10025168] 
0x10023381  # push ecx; add dl, byte [eax]; jmp [0x1002516C] 
0x10023387  # push ecx; add dl, byte [eax]; jmp [0x10025170] 
0x1002338d  # push ecx; add dl, byte [eax]; jmp [0x10025174] 
0x10023393  # push ecx; add dl, byte [eax]; jmp [0x10025178] 
0x10023399  # push ecx; add dl, byte [eax]; jmp [0x1002517C] 
0x1002339f  # push ecx; add dl, byte [eax]; jmp [0x10025180] 
0x100233a5  # push ecx; add dl, byte [eax]; jmp [0x10025184] 
0x100233ab  # push ecx; add dl, byte [eax]; jmp [0x10025188] 
0x100233b1  # push ecx; add dl, byte [eax]; jmp [0x1002518C] 
0x100233b7  # push ecx; add dl, byte [eax]; jmp [0x10025190] 
0x100233bd  # push ecx; add dl, byte [eax]; jmp [0x10025194] 
0x100233c3  # push ecx; add dl, byte [eax]; jmp [0x10025198] 
0x100233c9  # push ecx; add dl, byte [eax]; jmp [0x1002519C] 
0x100233cf  # push ecx; add dl, byte [eax]; jmp [0x100251A0] 
0x100233d5  # push ecx; add dl, byte [eax]; jmp [0x100251A4] 
0x100233db  # push ecx; add dl, byte [eax]; jmp [0x100251A8] 
0x100233e1  # push ecx; add dl, byte [eax]; jmp [0x100251AC] 
0x100233e7  # push ecx; add dl, byte [eax]; jmp [0x100251B0] 
0x100233ed  # push ecx; add dl, byte [eax]; jmp [0x100251B4] 
0x100233f3  # push ecx; add dl, byte [eax]; jmp [0x100251B8] 
0x100233f9  # push ecx; add dl, byte [eax]; jmp [0x100251BC] 
0x100233ff  # push ecx; add dl, byte [eax]; jmp [0x100251C0] 
0x10023405  # push ecx; add dl, byte [eax]; jmp [0x100251C4] 
0x10023411  # push ecx; add dl, byte [eax]; jmp [0x100251CC] 
0x10023417  # push ecx; add dl, byte [eax]; jmp [0x100251D0] 
0x1002341d  # push ecx; add dl, byte [eax]; jmp [0x100251D4] 
0x10023423  # push ecx; add dl, byte [eax]; jmp [0x100251D8] 
0x10023429  # push ecx; add dl, byte [eax]; jmp [0x100251DC] 
0x1002342f  # push ecx; add dl, byte [eax]; jmp [0x100251E0] 
0x10023435  # push ecx; add dl, byte [eax]; jmp [0x100251E4] 
0x1002343b  # push ecx; add dl, byte [eax]; jmp [0x100251E8] 
0x10023441  # push ecx; add dl, byte [eax]; jmp [0x100251EC] 
0x10023447  # push ecx; add dl, byte [eax]; jmp [0x100251F0] 
0x1002344d  # push ecx; add dl, byte [eax]; jmp [0x100251F4] 
0x10023453  # push ecx; add dl, byte [eax]; jmp [0x100251F8] 
0x10023459  # push ecx; add dl, byte [eax]; jmp [0x100251FC] 
0x10010506  # push ecx; pop es; leave; ret 
0x10020341  # push ecx; or byte [eax], al; add byte [edi], cl; mov dh, 0x00; pop esi; ret 
0x10011925  # push ecx; push ecx; push ecx; push [eax+edi]; call [0x10025250] 
0x10011926  # push ecx; push ecx; push [eax+edi]; call [0x10025250] 
0x10022ef6  # push ecx; push edi; push 0x00000009; push eax; call [0x10025208] 
0x10020412  # push ecx; mov ecx, edi; call [eax+0x04] 
0x100150fd  # push ecx; cld; ret 
0x10013d19  # push ecx; call [0x10025180] 
0x1001986a  # push ecx; call [0x100252BC] 
0x10011927  # push ecx; push [eax+edi]; call [0x10025250] 
0x100185f5  # push ecx; push [ebp+0x10]; push [ebp+0x0C]; push [eax]; call [0x1002516C] 
0x100245ab  # push ecx; push [ebp-0x08]; push eax; call [0x10025160] 
0x1001ac34  # push ecx; call ebx 
0x10018fca  # push ecx; call esi 
0x10014421  # push edx; add dl, byte [eax]; xor eax, eax; ret 
0x10011f92  # push edx; add dl, byte [eax]; cmp [0x10037128], esi; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011d25  # push edx; add dl, byte [eax]; cmp [0x10037128], esi; je 0x10011D48; push edi; call [0x10025248] 
0x10014652  # push edx; add dl, byte [eax]; push eax; call [0x1002516C] 
0x100130d3  # push edx; add dl, byte [eax]; pop esi; ret 
0x100144cd  # push edx; add dl, byte [eax]; pop edi; pop esi; ret 
0x10013324  # push edx; add dl, byte [eax]; pop edi; ret 
0x100153bf  # push edx; add dl, byte [eax]; push 0x000000FF; call [0x1002527C]; ret 
0x100153bf  # push edx; add dl, byte [eax]; push 0x000000FF; call [0x1002527C] 
0x10016b85  # push edx; add dl, byte [eax]; je 0x10016B98; push esi; call ebx 
0x100113fa  # push edx; add dl, byte [eax]; je 0x1001140D; push esi; call edi 
0x100154eb  # push edx; add dl, byte [eax]; je 0x10015504; push esi; call edi 
0x1001c385  # push edx; add dl, byte [eax]; jne 0x1001C3A9; push 0xFFFFFFFF; push [ebp-0x1C]; call [0x10025080] 
0x10012fb3  # push edx; add dl, byte [eax]; or [0x10032D20], 0xFFFFFFFF; ret 
0x100162f1  # push edx; add dl, byte [eax]; test eax, eax; jne 0x10016302; call [0x100250B0] 
0x1001636e  # push edx; add dl, byte [eax]; test eax, eax; jne 0x10016387; call [0x100250B0] 
0x1001ef11  # push edx; add dl, byte [eax]; test eax, eax; jne 0x1001EF44; call edi 
0x10018d10  # push edx; add dl, byte [eax]; test eax, eax; mov [0x10037120], eax; jne 0x10018D1D; ret 
0x10013201  # push edx; add dl, byte [eax]; mov [0x100366C4], eax; ret 
0x10013213  # push edx; add dl, byte [eax]; ret 
0x10023465  # push edx; add dl, byte [eax]; jmp [0x10025204] 
0x1002346b  # push edx; add dl, byte [eax]; jmp [0x10025208] 
0x10023471  # push edx; add dl, byte [eax]; jmp [0x1002520C] 
0x10023477  # push edx; add dl, byte [eax]; jmp [0x10025210] 
0x10023249  # push edx; add dl, byte [eax]; jmp [0x10025310] 
0x1002347d  # push edx; add dl, byte [eax]; jmp [0x10025214] 
0x10023483  # push edx; add dl, byte [eax]; jmp [0x10025218] 
0x10023489  # push edx; add dl, byte [eax]; jmp [0x1002521C] 
0x1002348f  # push edx; add dl, byte [eax]; jmp [0x10025220] 
0x10023495  # push edx; add dl, byte [eax]; jmp [0x10025224] 
0x1002349b  # push edx; add dl, byte [eax]; jmp [0x10025228] 
0x100234a1  # push edx; add dl, byte [eax]; jmp [0x1002522C] 
0x100234a7  # push edx; add dl, byte [eax]; jmp [0x10025230] 
0x100234ad  # push edx; add dl, byte [eax]; jmp [0x10025234] 
0x100234b3  # push edx; add dl, byte [eax]; jmp [0x10025238] 
0x100234b9  # push edx; add dl, byte [eax]; jmp [0x1002523C] 
0x100234bf  # push edx; add dl, byte [eax]; jmp [0x10025240] 
0x100234c5  # push edx; add dl, byte [eax]; jmp [0x10025244] 
0x100234cb  # push edx; add dl, byte [eax]; jmp [0x10025248] 
0x100234d1  # push edx; add dl, byte [eax]; jmp [0x1002524C] 
0x100234d7  # push edx; add dl, byte [eax]; jmp [0x10025250] 
0x100234dd  # push edx; add dl, byte [eax]; jmp [0x10025254] 
0x100234e3  # push edx; add dl, byte [eax]; jmp [0x10025258] 
0x100234e9  # push edx; add dl, byte [eax]; jmp [0x1002525C] 
0x100234ef  # push edx; add dl, byte [eax]; jmp [0x10025260] 
0x100234f5  # push edx; add dl, byte [eax]; jmp [0x10025264] 
0x100234fb  # push edx; add dl, byte [eax]; jmp [0x10025268] 
0x10023279  # push edx; add dl, byte [eax]; jmp [0x1002506C] 
0x10023501  # push edx; add dl, byte [eax]; jmp [0x1002526C] 
0x10023507  # push edx; add dl, byte [eax]; jmp [0x10025270] 
0x100130db  # push edx; add dl, byte [eax]; jmp [0x10025274] 
0x10023513  # push edx; add dl, byte [eax]; jmp [0x10025278] 
0x10023519  # push edx; add dl, byte [eax]; jmp [0x1002527C] 
0x1002351f  # push edx; add dl, byte [eax]; jmp [0x10025280] 
0x10023525  # push edx; add dl, byte [eax]; jmp [0x10025284] 
0x1002352b  # push edx; add dl, byte [eax]; jmp [0x10025288] 
0x10023531  # push edx; add dl, byte [eax]; jmp [0x1002528C] 
0x10023537  # push edx; add dl, byte [eax]; jmp [0x10025290] 
0x1002353d  # push edx; add dl, byte [eax]; jmp [0x10025294] 
0x10023543  # push edx; add dl, byte [eax]; jmp [0x10025298] 
0x10023549  # push edx; add dl, byte [eax]; jmp [0x1002529C] 
0x1002354f  # push edx; add dl, byte [eax]; jmp [0x100252A0] 
0x10023555  # push edx; add dl, byte [eax]; jmp [0x100252A4] 
0x1002355b  # push edx; add dl, byte [eax]; jmp [0x100252A8] 
0x10023561  # push edx; add dl, byte [eax]; jmp [0x100252AC] 
0x10023567  # push edx; add dl, byte [eax]; jmp [0x100252B0] 
0x1002356d  # push edx; add dl, byte [eax]; jmp [0x100252B4] 
0x10023573  # push edx; add dl, byte [eax]; jmp [0x100252B8] 
0x10023579  # push edx; add dl, byte [eax]; jmp [0x100252BC] 
0x1002357f  # push edx; add dl, byte [eax]; jmp [0x100252C0] 
0x10023585  # push edx; add dl, byte [eax]; jmp [0x100252C4] 
0x1002358b  # push edx; add dl, byte [eax]; jmp [0x100252C8] 
0x10023591  # push edx; add dl, byte [eax]; jmp [0x100252CC] 
0x10023597  # push edx; add dl, byte [eax]; jmp [0x100252D0] 
0x1002359d  # push edx; add dl, byte [eax]; jmp [0x100252D4] 
0x100235a3  # push edx; add dl, byte [eax]; jmp [0x100252D8] 
0x100235a9  # push edx; add dl, byte [eax]; jmp [0x100252DC] 
0x100235af  # push edx; add dl, byte [eax]; jmp [0x100252E0] 
0x100235c1  # push edx; add dl, byte [eax]; jmp [0x100250E4] 
0x100235b5  # push edx; add dl, byte [eax]; jmp [0x100252E4] 
0x100235bb  # push edx; add dl, byte [eax]; jmp [0x100252E8] 
0x10023273  # push edx; add dl, byte [eax]; jmp [0x100252F4] 
0x1001bc3a  # push edx; add dl, byte [eax]; call ebx 
0x100164dc  # push edx; add dl, byte [eax]; call esi; push [ebp-0x04]; call esi 
0x100164dc  # push edx; add dl, byte [eax]; call esi 
0x1001fd31  # push edx; pop es; add byte [eax], al; ret 
0x10011770  # push edx; dec eax; add byte [eax], al; add esp, 0x10; push eax; call [0x10025154] 
0x10016bda  # push edx; cmp ax, 0x0000005A; jnbe 0x10016C2D; add eax, 0x20; leave; ret 
0x1001ef48  # push edx; test esi, esi; jne 0x1001EF59; call edi 
0x10020ff4  # push edx; sar esi, 0xFFFFFFFF; pop ecx; ret 
0x10016d7f  # push edx; push [eax+esi]; call [0x10025174]; test eax, eax; jne 0x10016DC6; call [0x100250B0] 
0x10016d7f  # push edx; push [eax+esi]; call [0x10025174] 
0x10023237  # push ebx; add dl, byte [eax]; jmp [0x10025300] 
0x1002324f  # push ebx; add dl, byte [eax]; jmp [0x10025304] 
0x1002365d  # push ebx; add dl, byte [eax]; jmp [0x10025008] 
0x10023255  # push ebx; add dl, byte [eax]; jmp [0x10025308] 
0x1002325b  # push ebx; add dl, byte [eax]; jmp [0x1002530C] 
0x1002323d  # push ebx; add dl, byte [eax]; jmp [0x10025314] 
0x10023285  # push ebx; add dl, byte [eax]; jmp [0x10025320] 
0x10023267  # push ebx; add dl, byte [eax]; jmp [0x10025328] 
0x10023261  # push ebx; add dl, byte [eax]; jmp [0x1002532C] 
0x10023231  # push ebx; add dl, byte [eax]; jmp [0x1002533C] 
0x10023645  # push ebx; add dl, byte [eax]; jmp [0x10025348] 
0x1002364b  # push ebx; add dl, byte [eax]; jmp [0x1002534C] 
0x10023651  # push ebx; add dl, byte [eax]; jmp [0x10025350] 
0x1002363f  # push ebx; add dl, byte [eax]; jmp [0x10025354] 
0x10023639  # push ebx; add dl, byte [eax]; jmp [0x1002535C] 
0x10023633  # push ebx; add dl, byte [eax]; jmp [0x10025360] 
0x10023657  # push ebx; add dl, byte [eax]; jmp [0x10025364] 
0x1002328b  # push ebx; add dl, byte [eax]; jmp [0x1002536C] 
0x10023291  # push ebx; add dl, byte [eax]; jmp [0x10025370] 
0x10023297  # push ebx; add dl, byte [eax]; jmp [0x10025374] 
0x1002329d  # push ebx; add dl, byte [eax]; jmp [0x10025378] 
0x100232af  # push ebx; add dl, byte [eax]; jmp [0x10025380] 
0x100232a9  # push ebx; add dl, byte [eax]; jmp [0x10025384] 
0x100232a3  # push ebx; add dl, byte [eax]; jmp [0x10025388] 
0x100232b5  # push ebx; add dl, byte [eax]; jmp [0x1002538C] 
0x100232bb  # push ebx; add dl, byte [eax]; jmp [0x100250E8] 
0x1002326d  # push ebx; add dl, byte [eax]; jmp [0x100252F0] 
0x10023243  # push ebx; add dl, byte [eax]; jmp [0x100252FC] 
0x10014299  # push ebx; push eax; mov [ebp-0x00000098], 0x00000094; call [0x100252B0] 
0x100207d7  # push ebx; push eax; call [edx+0x10] 
0x10018fc9  # push ebx; push ecx; call esi 
0x100141b4  # push ebx; push ebx; mov [esp+0x34], eax; call edi 
0x1001eadd  # push ebx; push ebx; call [0x100250C8] 
0x1001eafa  # push ebx; push ebx; call [0x100250CC] 
0x100141da  # push ebx; push ebx; call edi 
0x100135ab  # push ebx; push esi; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x1001048c  # push ebx; push esi; lea eax, [ebp-0x14]; push edi; push eax; call [0x10025244] 
0x10010510  # push ebx; push esi; lea eax, [ebp-0x10]; push edi; push eax; call [0x10025244] 
0x10016b6e  # push ebx; push esi; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x1001b9c5  # push ebx; push esi; mov esi, 0x1003712C; push edi; push esi; call [0x1002524C] 
0x10015773  # push ebx; push esi; call [0x100252C4] 
0x100159c5  # push ebx; push esi; call [0x100251F4] 
0x1001349c  # push ebx; push edi; push [0x10038144]; call [0x10025284] 
0x10019cc6  # push ebx; push edi; call ebp 
0x100189aa  # push ebx; push 0x00000220; push [ebp+0x20]; call [0x1002520C] 
0x100187fc  # push ebx; push 0x10027130; push esi; push edi; call [0x100252D8] 
0x10018a4b  # push ebx; push 0x10027130; push edi; push esi; call [0x100252D8] 
0x100187db  # push ebx; push 0x10027134; mov esi, 0x00000100; push esi; push edi; call [0x100252DC] 
0x10018a2a  # push ebx; push 0x10027134; mov edi, 0x00000100; push edi; push esi; call [0x100252DC] 
0x100135ed  # push ebx; push 0x00000000; push [0x10038144]; call [0x10025284] 
0x10018bd4  # push ebx; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x10015f1b  # push ebx; push 0xFFFFFFF6; call [0x100252C8] 
0x100141fe  # push ebx; cmp eax, 0x02; jne 0x10014250; cmp edi, ebx; jne 0x10014214; call [0x100252A4] 
0x100141b5  # push ebx; mov [esp+0x34], eax; call edi 
0x100119fb  # push ebx; lea eax, [ebp-0x0C]; push eax; lea eax, [ebp-0x44]; push eax; call [0x10025234] 
0x10020ef3  # push ebx; retn 0xFFFE 
0x1001c121  # push ebx; call [0x10025228] 
0x10011f9d  # push ebx; call [0x10025248] 
0x10011f8e  # push ebx; call [0x1002524C]; cmp [0x10037128], esi; je 0x10011FB5; push ebx; call [0x10025248] 
0x10011f8e  # push ebx; call [0x1002524C] 
0x10015e0f  # push ebx; call [0x10025074]; test byte [esi+0x04], 0x01; je 0x10015E34; push ebx; call [0x10025078] 
0x10015e0f  # push ebx; call [0x10025074] 
0x10015e1c  # push ebx; call [0x10025078] 
0x1001c0de  # push ebx; call [0x1002507C] 
0x1001c0cf  # push ebx; call [0x10025080] 
0x10013def  # push ebx; call [0x1002508C] 
0x10021df3  # push ebx; call [0x10025090] 
0x10013efc  # push ebx; call [0x10025298] 
0x1001b932  # push ebx; call [0x1003699C]; pop edi; pop esi; pop ebx; ret 
0x1001b932  # push ebx; call [0x1003699C] 
0x1001eade  # push ebx; call [0x100250C8] 
0x1001eafb  # push ebx; call [0x100250CC] 
0x1001b504  # push ebx; call [0x100250DC] 
0x100186b5  # push ebx; call [0x100251F8] 
0x1001bbd6  # push ebx; push [ebp+0x10]; mov esi, 0x00000220; push esi; push [ebp+0x20]; call [0x1002520C] 
0x1001d9d3  # push ebx; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x1001bb80  # push ebx; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250C8] 
0x1001bca2  # push ebx; push [ebp+0x1C]; push [ebp+0x18]; push esi; push [ebp+0x20]; call [0x1002520C] 
0x1001ec92  # push ebx; push [ebp+0x1C]; push [ebp+0x18]; push 0x00000009; push [ebp+0x20]; call esi 
0x1001ea58  # push ebx; push [ebp-0x28]; push [ebp-0x2C]; push [ebp+0x08]; push eax; call [0x100251F8] 
0x100188e9  # push ebx; push [ebp-0x24]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252DC] 
0x1001bcbe  # push ebx; push [ebp-0x24]; push [ebp-0x20]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250CC] 
0x10018b8b  # push ebx; push [ebp-0x20]; push [ebp-0x1C]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252D8] 
0x10018981  # push ebx; push [ebp-0x1C]; push [ebp-0x24]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252DC] 
0x100141db  # push ebx; call edi 
0x100241ab  # push esp; add eax, [eax]; add byte [ebx], ah; retn 0xC483 
0x1001e4c2  # push esp; and al, 0x10; pop esi; mov [edx], ecx; ret 
0x100236c2  # push esp; push eax; add dl, byte [eax]; jmp [0x10025050] 
0x10023362  # push esp; push ecx; add dl, byte [eax]; jmp [0x10025158] 
0x10019df4  # push esp; push edx; add dl, byte [eax]; pop esi; ret 
0x100234e2  # push esp; push edx; add dl, byte [eax]; jmp [0x10025258] 
0x10023644  # push esp; push ebx; add dl, byte [eax]; jmp [0x10025348] 
0x10015462  # push esp; cmp ax, 0x0000007A; jnbe 0x100154B7; add eax, 0x0000FFE0; leave; ret 
0x100113dd  # push esp; sub eax, 0x20; pop ebx; ret 
0x10019c61  # push ebp; add edx, [eax]; pop eax; ret 
0x10018c49  # push ebp; add edx, [eax]; ret 
0x10012fc6  # push ebp; add edx, [eax]; mov [eax+0x14], 0x00000001; ret 
0x10022eed  # push ebp; or byte [edi], cl; xchg eax, ebp; retn 0xFF52 
0x10024173  # push ebp; adc byte [ebx], dh; call [esi-0x18] 
0x10014098  # push ebp; sbb byte [edi], cl; xchg eax, esp; retn 0x5589 
0x1001f01e  # push ebp; push 0x00000001; push [0x100368AC]; call [0x10025208] 
0x100155b7  # push ebp; push 0x00000001; call ebx 
0x100155b3  # push ebp; push 0xFFFFFFFF; push eax; push ebp; push 0x00000001; call ebx 
0x100155d3  # push ebp; push 0xFFFFFFFF; push [esi]; push 0x00000000; push 0x00000001; call ebx 
0x100153a1  # push ebp; mov ebp, esp; mov eax, [ebp+0x08]; push [0x100331E8+eax*4]; call [0x10025078] 
0x1001a4df  # push ebp; lea ebp, [ebx+0x10]; call [edi+ecx*4+0x04] 
0x10017afe  # push esi; or al, 0xF6; retn 0x7582 
0x1001bb9c  # push esi; push eax; push edi; push edi; call [0x100250CC] 
0x1001b713  # push esi; push eax; push [0x10036EDC]; call [0x100250DC] 
0x100141b3  # push esi; push ebx; push ebx; mov [esp+0x34], eax; call edi 
0x100141d9  # push esi; push ebx; push ebx; call edi 
0x1001349b  # push esi; push ebx; push edi; push [0x10038144]; call [0x10025284] 
0x100189a9  # push esi; push ebx; push 0x00000220; push [ebp+0x20]; call [0x1002520C] 
0x10018a4a  # push esi; push ebx; push 0x10027130; push edi; push esi; call [0x100252D8] 
0x100135ec  # push esi; push ebx; push 0x00000000; push [0x10038144]; call [0x10025284] 
0x10013efb  # push esi; push ebx; call [0x10025298] 
0x100186b4  # push esi; push ebx; call [0x100251F8] 
0x1001a4de  # push esi; push ebp; lea ebp, [ebx+0x10]; call [edi+ecx*4+0x04] 
0x1001fb91  # push esi; push esi; push 0x00000001; push esi; call [0x1002509C] 
0x1001fba4  # push esi; push esi; push 0x00000001; push esi; call [0x100250BC] 
0x1001fbf1  # push esi; push esi; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001b8c1  # push esi; push edi; jne 0x1001B907; push 0x100271C0; call [0x100250D0] 
0x100108fd  # push esi; push edi; mov edi, 0x1003712C; mov [ebp-0x04], eax; push edi; call [0x1002524C] 
0x10012fd1  # push esi; push edi; call [0x100250B0]; push [0x10032D20]; mov edi, eax; call [0x10025270] 
0x10012fd1  # push esi; push edi; call [0x100250B0] 
0x10018802  # push esi; push edi; call [0x100252D8] 
0x100187e6  # push esi; push edi; call [0x100252DC] 
0x1001e933  # push esi; push edi; call [0x100251F8] 
0x10013445  # push esi; push edi; push [0x10038144]; call [0x10025258] 
0x10012f23  # push esi; push edi; call eax 
0x1001d364  # push esi; push 0x00001001; push [0x100369EC]; call [0x10036A0C] 
0x100186ae  # push esi; push 0x10027130; push esi; push ebx; call [0x100251F8] 
0x1001e92d  # push esi; push 0x10027130; push esi; push edi; call [0x100251F8] 
0x10018695  # push esi; push 0x10027134; push esi; call [0x100251FC] 
0x1001216b  # push esi; push 0x00000000; push [0x10038144]; call [0x10025254] 
0x100135ac  # push esi; push 0x00000000; push [0x10038144]; call [0x10025258] 
0x1001fb92  # push esi; push 0x00000001; push esi; call [0x1002509C] 
0x1001fba5  # push esi; push 0x00000001; push esi; call [0x100250BC] 
0x1001a684  # push esi; push 0x00000001; pop esi; push [esp+0x08]; call [0x100250E4] 
0x1001a668  # push esi; push 0x00000001; pop esi; push [esp+0x0C]; push [esp+0x0C]; call [0x100252E4] 
0x1001a64c  # push esi; push 0x00000001; pop esi; push [esp+0x0C]; push [esp+0x0C]; call [0x100252E8] 
0x1001fb3e  # push esi; push 0x00000001; push [ebp+0x18]; call [0x10025208] 
0x1001aac2  # push esi; push 0x00000008; push [0x10038144]; call [0x10025258] 
0x10022e9b  # push esi; push 0x00000009; push eax; call [0x10025208] 
0x100244aa  # push esi; push 0x00000009; push [0x100368AC]; call [0x10025208] 
0x1001c0cc  # push esi; push 0xFFFFFFFF; push ebx; call [0x10025080] 
0x1001a098  # push esi; mov [ebp-0x08], eax; call [0x100252E0] 
0x100152ab  # push esi; mov esi, [0x10025090]; push [0x1003322C]; call esi; push [0x1003321C]; call esi 
0x100152ab  # push esi; mov esi, [0x10025090]; push [0x1003322C]; call esi 
0x10019dad  # push esi; mov esi, [esp+0x08]; push 0x00008000; push 0x00000000; push [esi+0x10]; call [0x100252BC] 
0x10014259  # push esi; mov esi, [esp+0x08]; push 0x00000000; and [esi], 0x00000000; call [0x10025194] 
0x10013046  # push esi; mov esi, [esp+0x08]; test esi, esi; jne 0x1001305C; push eax; call [0x10025270] 
0x1002032d  # push esi; mov esi, ecx; mov eax, [esi]; call [eax+0x10] 
0x1001048d  # push esi; lea eax, [ebp-0x14]; push edi; push eax; call [0x10025244] 
0x10010511  # push esi; lea eax, [ebp-0x10]; push edi; push eax; call [0x10025244] 
0x10016b6f  # push esi; mov esi, 0x1003712C; push esi; call [0x1002524C] 
0x100113e3  # push esi; mov esi, 0x1003712C; push edi; push esi; call [0x1002524C] 
0x1001d4be  # push esi; call [0x10036A0C] 
0x10022ffb  # push esi; call [0x10025248] 
0x100113ea  # push esi; call [0x1002524C] 
0x1001fb95  # push esi; call [0x1002509C] 
0x1001eff6  # push esi; call [0x1002529C] 
0x100141f4  # push esi; call [0x100252A0] 
0x1001e212  # push esi; call [0x100250B0] 
0x1001fba8  # push esi; call [0x100250BC] 
0x10015774  # push esi; call [0x100252C4] 
0x100131ea  # push esi; call [0x100366C4] 
0x10018a52  # push esi; call [0x100252D8] 
0x10018a36  # push esi; call [0x100252DC] 
0x1001996e  # push esi; call [0x100252E4] 
0x100159c6  # push esi; call [0x100251F4] 
0x1001869b  # push esi; call [0x100251FC] 
0x10012f73  # push esi; push [0x10032D20]; call [0x10025264] 
0x10018786  # push esi; push [ebp+0x08]; call [0x100251FC] 
0x1001fbf2  # push esi; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001fb1c  # push esi; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x1001ec7d  # push esi; push [ebp+0x10]; push edi; push [ebp+0x20]; mov esi, [0x10025208]; call esi 
0x1001ec21  # push esi; push [ebp+0x10]; push 0x00000009; push [ebp+0x20]; call [0x10025208] 
0x1001876c  # push esi; push [ebp+0x10]; push [ebp+0x0C]; push 0x00000001; push [ebp+0x18]; call [0x10025208] 
0x1001eb50  # push esi; push [ebp+0x10]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250CC] 
0x10018ac0  # push esi; push [ebp+0x14]; push [ebp+0x10]; push 0x00000220; push [ebp+0x20]; call [0x1002520C] 
0x10012747  # push esi; push [ebp+0x14]; push [ebp+0x10]; push [ebp+0x0C]; push eax; call ecx 
0x1001bc33  # push esi; push [ebp+0x20]; mov ebx, [0x1002520C]; call ebx 
0x1001bbdf  # push esi; push [ebp+0x20]; call [0x1002520C] 
0x1001bc51  # push esi; push [ebp+0x20]; call ebx 
0x10018b35  # push esi; push [ebp-0x20]; push [ebp-0x1C]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252D8] 
0x10016b8a  # push esi; call ebx 
0x100113ff  # push esi; call edi 
0x100153e8  # push edi; add eax, 0x0000FFE0; pop ebx; ret 
0x10020702  # push edi; or byte [edi+0x5E], bl; ret 
0x100206fc  # push edi; adc al, 0x50; mov ecx, esi; call [edi+0x08] 
0x10020302  # push edi; sbb eax, [eax]; add byte [ebx-0x36A1A03A], cl; ret 
0x1001eadb  # push edi; push eax; push ebx; push ebx; call [0x100250C8] 
0x1001eaf8  # push edi; push eax; push ebx; push ebx; call [0x100250CC] 
0x10018592  # push edi; push eax; mov eax, [ebx]; push [eax+esi]; call [0x1002516C] 
0x10014c95  # push edi; push eax; call [0x10032D28] 
0x10010491  # push edi; push eax; call [0x10025244] 
0x100185f4  # push edi; push ecx; push [ebp+0x10]; push [ebp+0x0C]; push [eax]; call [0x1002516C] 
0x100187fb  # push edi; push ebx; push 0x10027130; push esi; push edi; call [0x100252D8] 
0x10018bd3  # push edi; push ebx; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x100188e8  # push edi; push ebx; push [ebp-0x24]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100252DC] 
0x100113e9  # push edi; push esi; call [0x1002524C] 
0x10018a51  # push edi; push esi; call [0x100252D8] 
0x10018a35  # push edi; push esi; call [0x100252DC] 
0x1001fa7e  # push edi; push edi; push 0x00000001; push edi; call [0x1002509C] 
0x1001fa91  # push edi; push edi; push 0x00000001; push edi; call [0x100250BC] 
0x1001bb22  # push edi; push edi; call [0x100250C8] 
0x1001bb9e  # push edi; push edi; call [0x100250CC] 
0x1001fada  # push edi; push edi; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x1001f7bd  # push edi; push edi; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100250A0] 
0x1001c342  # push edi; push edi; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100251D0] 
0x1001fc59  # push edi; push 0x00000220; push [ebp+0x18]; call [0x1002520C] 
0x1001e1de  # push edi; push 0x1001E275; call [0x100250A8] 
0x1001fa7f  # push edi; push 0x00000001; push edi; call [0x1002509C] 
0x1001fa92  # push edi; push 0x00000001; push edi; call [0x100250BC] 
0x1001efb9  # push edi; push 0x00000001; push [0x100368AC]; call [0x10025208] 
0x1001be49  # push edi; push 0x00000001; call ebx 
0x10022ef7  # push edi; push 0x00000009; push eax; call [0x10025208] 
0x1001be45  # push edi; push 0xFFFFFFFF; push eax; push edi; push 0x00000001; call ebx 
0x1001f01b  # push edi; push 0xFFFFFFFF; push ebp; push 0x00000001; push [0x100368AC]; call [0x10025208] 
0x1001537a  # push edi; jne 0x10015387; call [0x10025090] 
0x1001b8c2  # push edi; jne 0x1001B907; push 0x100271C0; call [0x100250D0] 
0x100206f6  # push edi; mov edi, [esi]; mov ecx, esi; call [edi+0x14] 
0x10019928  # push edi; lea eax, [eax+eax*4]; shl eax, 0x02; push eax; push [0x10037120]; call [0x100252E4] 
0x1001b8fa  # push edi; mov [0x100369A0], eax; call esi 
0x100108fe  # push edi; mov edi, 0x1003712C; mov [ebp-0x04], eax; push edi; call [0x1002524C] 
0x10014cc2  # push edi; call [0x10032D2C] 
0x10014cb1  # push edi; call [0x10032D34] 
0x10011d30  # push edi; call [0x10025248] 
0x10011d21  # push edi; call [0x1002524C]; cmp [0x10037128], esi; je 0x10011D48; push edi; call [0x10025248] 
0x10013d8a  # push edi; call [0x10025180] 
0x1001fa82  # push edi; call [0x1002509C] 
0x10014245  # push edi; call [0x1002529C] 
0x10012fd2  # push edi; call [0x100250B0]; push [0x10032D20]; mov edi, eax; call [0x10025270] 
0x10012fd2  # push edi; call [0x100250B0] 
0x1001fa95  # push edi; call [0x100250BC] 
0x10019d88  # push edi; call [0x100252BC] 
0x1001bb23  # push edi; call [0x100250C8] 
0x1001bb9f  # push edi; call [0x100250CC] 
0x10018803  # push edi; call [0x100252D8] 
0x100187e7  # push edi; call [0x100252DC] 
0x1001941a  # push edi; call [0x100252E0] 
0x1001302c  # push edi; call [0x100250E8]; mov eax, esi; pop edi; pop esi; ret 
0x1001302c  # push edi; call [0x100250E8] 
0x1001e934  # push edi; call [0x100251F8] 
0x1001942b  # push edi; push [0x10038144]; call [0x10025254] 
0x10013446  # push edi; push [0x10038144]; call [0x10025258] 
0x1001349d  # push edi; push [0x10038144]; call [0x10025284] 
0x10017fb6  # push edi; push [0x100368AC]; call esi 
0x100222af  # push edi; push [esp+0x14]; call [esi+0x08] 
0x1001fc35  # push edi; push [ebp+0x0C]; push [ebp+0x08]; call [0x1002509C] 
0x1001fadb  # push edi; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250BC] 
0x1001e980  # push edi; push [ebp+0x10]; push [ebp+0x0C]; push 0x00000220; push [ebp+0x18]; call [0x1002520C] 
0x1001bc4a  # push edi; push [ebp+0x1C]; push [ebp+0x18]; push esi; push [ebp+0x20]; call ebx 
0x1001ecde  # push edi; push [ebp+0x1C]; push [ebp+0x18]; push 0x00000001; push [ebp+0x20]; call [0x10025208] 
0x1001ec81  # push edi; push [ebp+0x20]; mov esi, [0x10025208]; call esi 
0x1001ecf5  # push edi; push [ebp-0x1C]; push [ebp-0x24]; push [ebp+0x0C]; push [ebp+0x08]; call [0x100250C8] 
0x1001f7be  # push edi; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100250A0]; mov esi, eax; call [0x100250B0] 
0x1001f7be  # push edi; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100250A0] 
0x1001c343  # push edi; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100251D0]; mov esi, eax; call [0x100250B0] 
0x1001c343  # push edi; push [ebp-0x0C]; push [ebp+0x0C]; call [0x100251D0] 
0x10012f24  # push edi; call eax 
0x10019cc7  # push edi; call ebp 
0x1001b8f2  # push edi; call esi; push 0x10027190; push edi; mov [0x100369A0], eax; call esi 
0x1001b8e1  # push edi; call esi 
0x10014411  # pop eax; add byte [eax], al; test eax, eax; jne 0x10014427; push [0x10038144]; call [0x100252B4] 
0x10015c57  # pop eax; or byte [ecx+0x48891C58], cl; adc byte [esi+0x5B], bl; leave; ret 
0x10017c3a  # pop eax; adc byte [esi-0x77], bl; dec eax; add al, 0x5B; leave; ret 
0x10015c5a  # pop eax; sbb al, 0x89; dec eax; adc byte [esi+0x5B], bl; leave; ret 
0x100236aa  # pop eax; push eax; add dl, byte [eax]; jmp [0x10025060] 
0x10023368  # pop eax; push ecx; add dl, byte [eax]; jmp [0x1002515C] 
0x100234e8  # pop eax; push edx; add dl, byte [eax]; jmp [0x1002525C] 
0x10023632  # pop eax; push ebx; add dl, byte [eax]; jmp [0x10025360] 
0x1001710f  # pop eax; pop ebp; ret 
0x10014874  # pop eax; pop edi; pop ebx; pop esi; ret 
0x10019841  # pop eax; pop edi; pop esi; pop ebx; leave; ret 
0x10012777  # pop eax; pop edi; pop esi; pop ebp; ret 
0x10012a32  # pop eax; pop edi; pop esi; ret 
0x1001ac23  # pop eax; push 0x00000008; call ebx 
0x1001ac1c  # pop eax; mov al, byte [eax]; add byte [eax], al; push [esi+0x58]; push 0x00000008; call ebx 
0x1001e4c0  # pop eax; mov edx, [esp+0x10]; pop esi; mov [edx], ecx; ret 
0x100137bb  # pop eax; leave; ret 
0x10013a03  # pop ecx; add [ebx+0x5B5E5FC7], ecx; pop ebp; ret 
0x1002375a  # pop ecx; sbb eax, eax; pop ecx; inc eax; retn 0x0004 
0x10023775  # pop ecx; sbb eax, eax; pop ecx; neg eax; retn 0x0004 
0x100143c5  # pop ecx; sbb eax, eax; add eax, 0x03; pop ebx; leave; ret 
0x1001c68c  # pop ecx; xor eax, eax; pop esi; ret 
0x10023790  # pop ecx; xor ecx, ecx; test eax, eax; setnle cl; mov eax, ecx; retn 0x0004 
0x1001f059  # pop ecx; xor ebx, ebx; push esi; call [0x1002529C] 
0x10013635  # pop ecx; xor edi, edi; ret 
0x10017456  # pop ecx; cmp [0x1003712C], ebx; je 0x10017469; push 0x00000001; call [0x10025084] 
0x1002375d  # pop ecx; inc eax; retn 0x0004 
0x100162ec  # pop ecx; push eax; call [0x10025228]; test eax, eax; jne 0x10016302; call [0x100250B0] 
0x100162ec  # pop ecx; push eax; call [0x10025228] 
0x10011b9e  # pop ecx; push eax; call [0x10025164]; test eax, eax; jne 0x10011BB2; call [0x100250B0] 
0x10011b9e  # pop ecx; push eax; call [0x10025164] 
0x10011b8f  # pop ecx; push eax; call [0x10025168] 
0x1001a5fe  # pop ecx; push eax; call [0x10025170]; test eax, eax; jne 0x1001A614; call [0x100250B0] 
0x1001a5fe  # pop ecx; push eax; call [0x10025170] 
0x10014649  # pop ecx; push eax; push [esi]; push 0xFFFFFFF4; call [0x10025290] 
0x10015379  # pop ecx; push edi; jne 0x10015387; call [0x10025090] 
0x1001302b  # pop ecx; push edi; call [0x100250E8] 
0x1001c68b  # pop ecx; pop ecx; xor eax, eax; pop esi; ret 
0x10023a93  # pop ecx; pop ecx; pop esi; pop ebp; ret 
0x10010373  # pop ecx; pop ecx; pop esi; ret 
0x100138e0  # pop ecx; pop ecx; mov ecx, [ebp+0x10]; mov [eax], ecx; leave; ret 
0x10012f46  # pop ecx; pop ebx; leave; retn 0x000C 
0x10012334  # pop ecx; pop esi; sbb eax, eax; ret 
0x10023a94  # pop ecx; pop esi; pop ebp; ret 
0x1002396f  # pop ecx; pop esi; pop edi; pop ebx; leave; ret 
0x1001d959  # pop ecx; pop esi; jne 0x1001D961; xor eax, eax; leave; ret 
0x10010374  # pop ecx; pop esi; ret 
0x1001d8e1  # pop ecx; pop esi; leave; ret 
0x100128fe  # pop ecx; pop edi; pop esi; pop ebx; leave; ret 
0x10015394  # pop ecx; pop edi; push [esi]; call [0x10025074] 
0x100130c7  # pop ecx; push 0x00000000; push [0x10032D20]; call [0x10025264]; pop esi; ret 
0x100130c7  # pop ecx; push 0x00000000; push [0x10032D20]; call [0x10025264] 
0x1001a5af  # pop ecx; je 0x1001A5B6; push 0x00000001; pop eax; ret 
0x1001231c  # pop ecx; je 0x10012324; or eax, 0xFFFFFFFF; pop esi; ret 
0x100131e7  # pop ecx; je 0x100131F3; push esi; call [0x100366C4] 
0x10012ffb  # pop ecx; je 0x10013024; push esi; push [0x10032D20]; call [0x10025264] 
0x10012f70  # pop ecx; je 0x10012F9C; push esi; push [0x10032D20]; call [0x10025264] 
0x1001c61b  # pop ecx; jne 0x1001C623; push 0x00000001; pop eax; pop esi; ret 
0x10015481  # pop ecx; jne 0x1001548A; mov ax, word [ebp+0x08]; leave; ret 
0x10015df4  # pop ecx; jne 0x10015E04; lea eax, [esi+0x0C]; push eax; call [0x10025090] 
0x100121d8  # pop ecx; jne 0x100121B9; xor eax, eax; ret 
0x1001797c  # pop ecx; jne 0x1001796B; pop esi; pop edi; ret 
0x10020eaf  # pop ecx; jne 0x10020EA5; xor al, al; pop edi; pop esi; ret 
0x10015d9e  # pop ecx; and [esi+0x0C], 0x00000000; mov eax, edi; pop edi; pop esi; ret 
0x1001e41c  # pop ecx; cmp [ebp+0x08], 0x08; jne 0x1001E42E; push [esi+0x58]; push 0x00000008; call ebx 
0x10015311  # pop ecx; add esi, 0x04; cmp esi, 0x100332A8; jl 0x100152E1; push [0x1003320C]; call edi 
0x1001c11a  # pop ecx; or esi, 0xFFFFFFFF; mov [ebp+0x0C], esi; push ebx; call [0x10025228] 
0x1001151b  # pop ecx; cmp eax, 0x5A; jnle 0x10011575; add eax, 0x20; pop ebx; ret 
0x100113d8  # pop ecx; cmp eax, 0x7A; jnle 0x10011432; sub eax, 0x20; pop ebx; ret 
0x100144f9  # pop ecx; test eax, eax; je 0x10014500; call eax 
0x1001eff1  # pop ecx; test ebx, ebx; jne 0x1001F005; push esi; call [0x1002529C] 
0x1001ef7e  # pop ecx; test edi, edi; jne 0x1001EF8E; push esi; call [0x100252A0] 
0x1001bfe4  # pop ecx; mov [esi], eax; mov [esi+0x08], eax; mov [esi+0x04], eax; pop esi; ret 
0x1001d226  # pop ecx; mov [0x100369C4], ebx; xor eax, eax; pop ebx; leave; ret 
0x100141eb  # pop ecx; mov [esp+0x10], ebx; mov ebx, [esp+0x10]; push esi; call [0x100252A0] 
0x100160fc  # pop ecx; mov eax, [ebx]; lea eax, [eax+edi+0x0C]; push eax; call [0x10025074] 
0x100138e1  # pop ecx; mov ecx, [ebp+0x10]; mov [eax], ecx; leave; ret 
0x1001182b  # pop ecx; mov eax, ebx; pop edi; pop ebx; pop esi; ret 
0x1001b9bc  # pop ecx; mov eax, ebx; pop edi; pop ebx; ret 
0x1001e2ce  # pop ecx; mov eax, ebx; pop edi; pop esi; pop ebx; retn 0x0004 
0x1001a592  # pop ecx; mov eax, esi; pop ecx; pop esi; ret 
0x1001f657  # pop ecx; mov eax, esi; pop edi; pop esi; pop ebp; ret 
0x10015d24  # pop ecx; mov eax, edi; pop edi; pop esi; pop ebx; ret 
0x100168fb  # pop ecx; mov eax, edi; pop edi; pop esi; leave; ret 
0x1001d463  # pop ecx; mov [0x100369F4], eax; push 0x00000001; push 0x1001D491; call [0x100250B8] 
0x1001d6c7  # pop ecx; mov [0x100369F4], eax; push 0x00000001; push 0x1001D6EB; call [0x100250B8] 
0x10020e04  # pop ecx; mov eax, 0x10020E0B; ret 
0x10024681  # pop ecx; mov ecx, 0x5959FFFF; ret 
0x1001b8ac  # pop ecx; mov [0x10038268], 0x00000001; ret 
0x10023d39  # pop ecx; mov [esi+0x08], 0x00000001; mov eax, esi; pop edi; pop esi; retn 0x0004 
0x1001acb1  # pop ecx; leave; ret 
0x1001acf4  # pop ecx; fldcw word [ebp+0x0C]; mov eax, esi; pop esi; leave; ret 
0x1002044f  # pop ecx; rep movsd; pop edi; pop esi; leave; retn 0x0010 
0x10020473  # pop ecx; rep movsd; pop edi; pop esi; leave; retn 0x0020 
0x10023778  # pop ecx; neg eax; retn 0x0004 
0x10012f8a  # pop ecx; call [0x10025260] 
0x10011892  # pop ecx; push [eax+edi]; call [0x10025180] 
0x10016bdd  # pop edx; add byte [edi+0x4C], dh; add eax, 0x20; leave; ret 
0x1001151e  # pop edx; jnle 0x10011575; add eax, 0x20; pop ebx; ret 
0x10014255  # pop ebx; pop ecx; pop ecx; ret 
0x10010252  # pop ebx; pop ecx; ret 
0x1001d9e5  # pop ebx; pop ebp; retn 0x0010 
0x1001182f  # pop ebx; pop esi; ret 
0x1001be25  # pop ebx; pop esi; leave; ret 
0x10016bb6  # pop ebx; pop edi; pop ebp; ret 
0x1001cf64  # pop ebx; pop edi; pop esi; ret 
0x10021f66  # pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x10021f02  # pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0008 
0x1001ffd4  # pop ebx; mov [fs:0x00000000], ecx; leave; ret 
0x1001ae52  # pop ebx; je 0x1001AE58; or ah, 0x10; ret 
0x1001adc7  # pop ebx; je 0x1001ADCF; or eax, 0x00040000; ret 
0x10010504  # pop ebx; mov byte [ecx+0x07], dl; leave; ret 
0x1001728c  # pop ebx; mov eax, [ebp-0x08]; pop edi; pop esi; leave; ret 
0x100203b5  # pop ebx; mov eax, [ebp-0x04]; pop edi; leave; retn 0x0008 
0x1001d690  # pop ebx; leave; retn 0x0004 
0x10012f47  # pop ebx; leave; retn 0x000C 
0x10014122  # pop ebx; inc [eax]; pop ebp; ret 
0x1001d8f8  # pop esp; add edx, [eax]; jc 0x1001D8EA; push 0x00000001; pop eax; ret 
0x100141f1  # pop esp; and al, 0x10; push esi; call [0x100252A0] 
0x100141ed  # pop esp; and al, 0x10; mov ebx, [esp+0x10]; push esi; call [0x100252A0] 
0x100236b6  # pop esp; push eax; add dl, byte [eax]; jmp [0x10025000] 
0x1002336e  # pop esp; push ecx; add dl, byte [eax]; jmp [0x10025160] 
0x100234ee  # pop esp; push edx; add dl, byte [eax]; jmp [0x10025260] 
0x1002363e  # pop esp; push ebx; add dl, byte [eax]; jmp [0x10025354] 
0x1001ef43  # pop esp; cmp eax, 0x01; jne 0x1001EF9B; test esi, esi; jne 0x1001EF59; call edi 
0x100184ae  # pop esp; fdiv st7, st0; inc [ebx-0x3874EB3C]; pop edi; pop esi; ret 
0x100170fd  # pop esp; call [0x100252D4] 
0x100204ff  # pop ebp; or byte [esi-0x7D], dl; sti; call [edi-0x75] 
0x1001705d  # pop ebp; or dh, al; inc ebp; or [edx], edi; mov byte [ebp+0x0A], 0x2E; call [0x100252D0] 
0x1001d401  # pop ebp; or al, 0x7E; mov ebp, 0x5D5B5E5F; ret 
0x1001e58d  # pop ebp; adc byte [ebx], dh; sar byte [ebx], cl; retn 0xC756 
0x10022a18  # pop ebp; adc al, 0x0F; xchg eax, ebp; rcr byte [edi+0x5E], 0x5B; pop ebp; retn 0x0010 
0x10012f45  # pop ebp; pop ecx; pop ebx; leave; retn 0x000C 
0x10014254  # pop ebp; pop ebx; pop ecx; pop ecx; ret 
0x10010251  # pop ebp; pop ebx; pop ecx; ret 
0x10015844  # pop ebp; pop ebx; pop edi; ret 
0x1001781f  # pop ebp; pop ebx; jne 0x10017829; mov eax, [0x100333D4]; ret 
0x100153e2  # pop ebp; cmp ax, 0x0000007A; jnbe 0x10015440; add eax, 0x0000FFE0; pop ebx; ret 
0x1001ef9f  # pop ebp; test esi, esi; jne 0x1001EFAC; call ebx 
0x1001df25  # pop ebp; retn 0x758B 
0x10018b6c  # pop ebp; fadd qword [ebx-0x140003B3]; adc ch, byte [edx+0x01]; pop eax; ret 
0x1001ea21  # pop ebp; fsub st3, st0; or ebp, [edx+0x01]; pop eax; ret 
0x1001aabe  # pop ebp; loopne 0x1001AB36; push esi; push 0x00000008; push [0x10038144]; call [0x10025258] 
0x1001adc3  # pop ebp; test bh, 0x10; pop ebx; je 0x1001ADCF; or eax, 0x00040000; ret 
0x10020568  # pop ebp; call [edi-0x18] 
0x10015633  # pop esi; add [edi], ecx; xchg eax, esp; ret 
0x1001d3fe  # pop esi; add [ebx], edi; pop ebp; or al, 0x7E; mov ebp, 0x5D5B5E5F; ret 
0x10012335  # pop esi; sbb eax, eax; ret 
0x1001fced  # pop esi; and eax, ecx; pop ebp; ret 
0x10016a38  # pop esi; sub eax, ecx; pop ebx; leave; ret 
0x10018694  # pop esi; push esi; push 0x10027134; push esi; call [0x100251FC] 
0x1001d9e4  # pop esi; pop ebx; pop ebp; retn 0x0010 
0x10021f65  # pop esi; pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x1001ffd3  # pop esi; pop ebx; mov [fs:0x00000000], ecx; leave; ret 
0x100203b4  # pop esi; pop ebx; mov eax, [ebp-0x04]; pop edi; leave; retn 0x0008 
0x1001e2d2  # pop esi; pop ebx; retn 0x0004 
0x10017cb3  # pop esi; pop ebx; retn 0x0010 
0x1001d68f  # pop esi; pop ebx; leave; retn 0x0004 
0x10014121  # pop esi; pop ebx; inc [eax]; pop ebp; ret 
0x10014253  # pop esi; pop ebp; pop ebx; pop ecx; pop ecx; ret 
0x10010250  # pop esi; pop ebp; pop ebx; pop ecx; ret 
0x10015843  # pop esi; pop ebp; pop ebx; pop edi; ret 
0x10023970  # pop esi; pop edi; pop ebx; leave; ret 
0x10020e5d  # pop esi; mov [fs:0x00000000], ecx; pop ebx; leave; retn 0x0004 
0x1002025b  # pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x1002019c  # pop esi; mov [fs:0x00000000], ecx; leave; retn 0x000C 
0x100204ed  # pop esi; mov [fs:0x00000000], ecx; leave; ret 
0x1001df76  # pop esi; mov word [ecx], dx; pop ebx; leave; ret 
0x1001e641  # pop esi; mov word [ebx+0x0A], ax; pop ebx; leave; ret 
0x10016bb2  # pop esi; mov ax, bp; pop ebx; pop edi; pop ebp; ret 
0x10016a73  # pop esi; neg cx; sbb ecx, ecx; not ecx; and eax, ecx; ret 
0x1001d95a  # pop esi; jne 0x1001D961; xor eax, eax; leave; ret 
0x100189ea  # pop esi; jne 0x100189F2; sub eax, [esp+0x04]; ret 
0x10018c21  # pop esi; jne 0x10018C2B; sub eax, [esp+0x04]; sar eax, 1; ret 
0x1001526b  # pop esi; mov [eax], ecx; ret 
0x1001e4c5  # pop esi; mov [edx], ecx; ret 
0x10017c3c  # pop esi; mov [eax+0x04], ecx; pop ebx; leave; ret 
0x1001db32  # pop esi; mov bl, byte [edi]; inc edi; cmp eax, 0x0B; ja 0x1001DDB6; jmp [0x1001DF7D+eax*4] 
0x10021efe  # pop esi; mov ecx, [ebp-0x0C]; pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0008 
0x10010463  # pop esi; lea eax, [ecx+0x01]; add dl, 0x30; mov byte [ecx], dl; ret 
0x10013f6a  # pop esi; mov [0x100366DC], eax; pop ebx; leave; ret 
0x10019f0f  # pop esi; sar eax, 0x04; lea eax, [eax+ecx+0x08]; ret 
0x10013ecd  # pop esi; mov [0x10038264], 0x00000001; pop ebx; ret 
0x1001d7a3  # pop esi; leave; retn 0x0004 
0x10020453  # pop esi; leave; retn 0x0010 
0x10020477  # pop esi; leave; retn 0x0020 
0x10017366  # pop esi; out 0xFF, eax; call [edi-0x18] 
0x1001ae4b  # pop esi; test ebx, 0x00040000; pop ebx; je 0x1001AE58; or ah, 0x10; ret 
0x1001a687  # pop esi; push [esp+0x08]; call [0x100250E4] 
0x1001a66b  # pop esi; push [esp+0x0C]; push [esp+0x0C]; call [0x100252E4] 
0x1001a64f  # pop esi; push [esp+0x0C]; push [esp+0x0C]; call [0x100252E8] 
0x1001959c  # pop edi; add [eax], eax; add dh, dh; ret 
0x1001f1a1  # pop edi; add edx, [eax]; ret 
0x10013de7  # pop edi; or al, 0x83; jnp 0x10013DE8; add byte [edi+eax+0x53], dh; call [0x1002508C] 
0x1001c1d4  # pop edi; and eax, ecx; pop esi; pop ebp; ret 
0x1001328c  # pop edi; cmp [0x10036708], edi; jne 0x100132A6; push [esp+0x08]; call [0x1002518C] 
0x1001182e  # pop edi; pop ebx; pop esi; ret 
0x1001c9da  # pop edi; pop ebx; pop esi; leave; ret 
0x10011ad9  # pop edi; pop ebx; leave; ret 
0x1001cd40  # pop edi; pop ebp; pop ebx; ret 
0x10016bb7  # pop edi; pop ebp; ret 
0x1001d9e3  # pop edi; pop esi; pop ebx; pop ebp; retn 0x0010 
0x10021f64  # pop edi; pop esi; pop ebx; mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x1001e2d1  # pop edi; pop esi; pop ebx; retn 0x0004 
0x1001d68e  # pop edi; pop esi; pop ebx; leave; retn 0x0004 
0x1001024f  # pop edi; pop esi; pop ebp; pop ebx; pop ecx; ret 
0x10012778  # pop edi; pop esi; pop ebp; ret 
0x10020e5c  # pop edi; pop esi; mov [fs:0x00000000], ecx; pop ebx; leave; retn 0x0004 
0x100221f2  # pop edi; pop esi; mov [fs:0x00000000], ecx; leave; retn 0x0008 
0x100204ec  # pop edi; pop esi; mov [fs:0x00000000], ecx; leave; ret 
0x10013f69  # pop edi; pop esi; mov [0x100366DC], eax; pop ebx; leave; ret 
0x1002219b  # pop edi; pop esi; retn 0x0004 
0x10013ecc  # pop edi; pop esi; mov [0x10038264], 0x00000001; pop ebx; ret 
0x1002274b  # pop edi; pop esi; leave; retn 0x0004 
0x10020452  # pop edi; pop esi; leave; retn 0x0010 
0x10020476  # pop edi; pop esi; leave; retn 0x0020 
0x1001e54f  # pop edi; mov [eax+0x08], ecx; pop esi; ret 
0x1001e57a  # pop edi; mov [eax+0x08], edx; mov [eax], ecx; pop esi; ret 
0x10013b01  # pop edi; mov eax, ebx; pop esi; pop ebx; pop ebp; ret 
0x10012393  # pop edi; mov eax, ebx; pop esi; pop ebx; ret 
0x100108d2  # pop edi; mov eax, ebx; pop esi; pop ebx; leave; ret 
0x10022169  # pop edi; mov eax, esi; pop esi; pop ebx; retn 0x0004 
0x10020ee7  # pop edi; retn 0xFFFE 
0x100203b9  # pop edi; leave; retn 0x0008 
0x10015395  # pop edi; push [esi]; call [0x10025074]; pop esi; pop ebp; ret 
0x10015395  # pop edi; push [esi]; call [0x10025074] 
0x10023ce1  # pushad; add al, 0x00; and [eax+0x08], 0x00000000; mov [eax], 0x10027B70; ret 
0x1001ac31  # pushad; or byte [eax], al; push ecx; call ebx 
0x10023ce5  # pushad; or byte [eax], al; mov [eax], 0x10027B70; ret 
0x1001ad32  # pushad; and byte [eax], al; mov [eax+0x24], 0x0000FFFF; pop esi; ret 
0x100236b0  # pushad; push eax; add dl, byte [eax]; jmp [0x1002505C] 
0x10023374  # pushad; push ecx; add dl, byte [eax]; jmp [0x10025164] 
0x100234f4  # pushad; push edx; add dl, byte [eax]; jmp [0x10025264] 
0x100130da  # pushad; push edx; add dl, byte [eax]; jmp [0x10025274] 
0x10023638  # pushad; push ebx; add dl, byte [eax]; jmp [0x1002535C] 
0x10011afa  # pushad; add [ebx], 0x81448A10; add al, 0x83; loopne 0x10011B45; ret 
0x10011ae3  # pushad; add byte [ebx], 0x10; jc 0x10011AEC; xor eax, eax; ret 
0x10013dbe  # pushad; add byte [ebx], 0x10; call [0x1002528C] 
0x10017bbb  # popad; add al, 0x00; mov [ecx], eax; ret 
0x1001ffef  # bound eax, [ebx]; adc byte [ebp-0x6BF003B3], cl; ret 
0x100178b5  # bound ecx, [ebp-0x0000877B]; call [esi+0x50] 
0x1002124c  # arpl word [ebx], ax; adc byte [ebp-0x6BF003B3], cl; ret 
0x10018079  # arpl word [ebx-0x01], si; jmp [ecx+0x100334AC] 
0x1002369e  # push eax; add dl, byte [eax]; jmp [0x10025004] 
0x10011ba2  # push ecx; add dl, byte [eax]; test eax, eax; jne 0x10011BB2; call [0x100250B0] 
0x1002337a  # push ecx; add dl, byte [eax]; jmp [0x10025168] 
0x100130d2  # push edx; add dl, byte [eax]; pop esi; ret 
0x100234fa  # push edx; add dl, byte [eax]; jmp [0x10025268] 
0x1002365c  # push ebx; add dl, byte [eax]; jmp [0x10025008] 
0x10016fad  # add [fs:0x0481448D+edi*8], 0x5E5FC78B; ret 
0x10013ed0  # add byte [fs:ebx], 0x10; add [eax], eax; add byte [eax], al; pop ebx; ret 
0x10020e5e  # mov [fs:0x00000000], ecx; pop ebx; leave; retn 0x0004 
0x1001217d  # mov [fs:0x00000000], ecx; pop edi; pop esi; pop ebx; leave; ret 
0x1002025c  # mov [fs:0x00000000], ecx; leave; retn 0x0004 
0x1002019d  # mov [fs:0x00000000], ecx; leave; retn 0x000C 
0x1001ffd5  # mov [fs:0x00000000], ecx; leave; ret 
0x11015014  # inc ebx; add [eax], ebx; mov eax, [eax]; mov eax, [eax]; ret;
